uint64_t sub_1004FFBD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void (*)(void, void), char *, uint64_t);
  void (*v23)(void, void);
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  BOOL v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  long long v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(void, void);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;

  v61 = a2;
  v8 = type metadata accessor for UUID();
  v9 = *(void *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v50 - v13;
  v15 = a4 & 1;
  if (a4) {
    v16 = a3 == 2;
  }
  else {
    v16 = 0x1020100u >> (8 * a3);
  }
  v17 = sub_1002FEEA8(v16, 1uLL);
  if (!v4)
  {
    v19 = v18;
    v56 = (void (*)(void, void))v12;
    v57 = v15;
    v58 = a3;
    v59 = a1;
    v60 = v17;
    sub_1002FB658();
    v53 = v19;
    if (qword_100969F08 != -1) {
      swift_once();
    }
    v20 = type metadata accessor for Logger();
    sub_10000B47C(v20, (uint64_t)qword_100977960);
    v21 = v9;
    v22 = *(void (**)(void (*)(void, void), char *, uint64_t))(v9 + 16);
    v23 = v56;
    v54 = v14;
    v24 = v14;
    v25 = v8;
    v22(v56, v24, v8);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    v28 = v27;
    v29 = os_log_type_enabled(v26, v27);
    v55 = v9;
    if (v29)
    {
      LODWORD(v52) = v28;
      v30 = (uint8_t *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      v63 = v51;
      *(_DWORD *)v30 = 136315138;
      v50 = v30 + 4;
      v31 = UUID.uuidString.getter();
      v62 = sub_100254634(v31, v32, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v56 = *(void (**)(void, void))(v21 + 8);
      v56(v23, v25);
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v52, "Generated local LTK, keybagID: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v56 = *(void (**)(void, void))(v9 + 8);
      v56(v23, v25);
    }

    swift_bridgeObjectRetain();
    v33 = v60;
    v34 = v53;
    sub_10025ADCC(v60, v53);
    v35 = v54;
    v63 = UUID.uuid.getter();
    v64 = v36;
    v65 = v37;
    v66 = v38;
    v67 = v39;
    v68 = v40;
    v69 = v41;
    v70 = v42;
    v71 = v43;
    v52 = sub_10057C4D4((uint64_t)&v63, (uint64_t)&v72);
    v45 = v44;
    v46 = swift_allocObject();
    swift_weakInit();
    v47 = swift_allocObject();
    swift_weakInit();
    _s8LocalLTKCMa();
    swift_allocObject();
    *(void *)&v49 = sub_100500774;
    *((void *)&v49 + 1) = v46;
    a4 = sub_100308B14(v59, v61, v58, v57, v33, v34, v52, v45, v49, (uint64_t)sub_100500790, v47);
    sub_10030B7E4();
    v56(v35, v25);
    sub_100250CC4(v33, v34);
  }
  return a4;
}

uint64_t sub_100500114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong
    && (v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(Strong
                                                              + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_cacheDirectoryBlock),
        sub_1002CA420((uint64_t)v9),
        swift_release(),
        v9))
  {
    v9(a1, a2, a3);
    return sub_1002CA430((uint64_t)v9);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a4, 1, 1, v11);
  }
}

uint64_t sub_10050021C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  v3 = *(uint64_t (**)(uint64_t))(Strong
                                         + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_protectionClassBlock);
  sub_1002CA420((uint64_t)v3);
  swift_release();
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3(a1);
  sub_1002CA430((uint64_t)v3);
  return v4;
}

uint64_t sub_1005002D0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_cacheDirectory;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1002CA430(*(void *)(v0 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_cacheDirectoryBlock));
  sub_1002CA430(*(void *)(v0
                          + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_protectionClassBlock));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1005003CC()
{
  return _s13LTKCollectionCMa();
}

uint64_t _s13LTKCollectionCMa()
{
  uint64_t result = qword_1009779C8;
  if (!qword_1009779C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100500420()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005004F8()
{
  uint64_t v17 = *(void *)(v0 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_label);
  uint64_t v1 = v0 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_localLTKByID;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*(void *)v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v4 & *(void *)(*(void *)v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_5;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v6) {
      goto LABEL_25;
    }
    uint64_t v14 = *(void *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      int64_t v8 = v13 + 1;
      if (v13 + 1 >= v6) {
        goto LABEL_25;
      }
      uint64_t v14 = *(void *)(v2 + 8 * v8);
      if (!v14)
      {
        int64_t v8 = v13 + 2;
        if (v13 + 2 >= v6) {
          goto LABEL_25;
        }
        uint64_t v14 = *(void *)(v2 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 3;
          if (v13 + 3 >= v6) {
            goto LABEL_25;
          }
          uint64_t v14 = *(void *)(v2 + 8 * v8);
          if (!v14)
          {
            int64_t v8 = v13 + 4;
            if (v13 + 4 >= v6) {
              goto LABEL_25;
            }
            uint64_t v14 = *(void *)(v2 + 8 * v8);
            if (!v14) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    uint64_t v5 = (v14 - 1) & v14;
LABEL_5:
    unint64_t v9 = sub_10030D54C();
    uint64_t v11 = v10;
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 5;
  if (v15 >= v6)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    return v17;
  }
  uint64_t v14 = *(void *)(v2 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    uint64_t v14 = *(void *)(v2 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100500718()
{
  return sub_1005004F8();
}

uint64_t sub_10050073C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100500774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100500114(a1, a2, a3, a4);
}

uint64_t sub_100500790(uint64_t a1)
{
  return sub_10050021C(a1);
}

uint64_t sub_1005007AC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_localLTKByID);
  swift_beginAccess();
  *a1 = *v3;
  return swift_bridgeObjectRetain();
}

void *sub_100500810@<X0>(void *a1@<X8>)
{
  return sub_1003B62F8(a1);
}

uint64_t sub_100500828@<X0>(void *a1@<X8>)
{
  return sub_10030A4DC(v1, a1);
}

uint64_t sub_100500844()
{
  return _swift_deallocObject(v0, 48, 7);
}

void sub_100500884()
{
  sub_100704628(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100500894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005008A4()
{
  return swift_release();
}

uint64_t sub_1005008AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005008F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10030A47C(a1);
}

void *sub_100500910@<X0>(void *a1@<X8>)
{
  return sub_100707DE8(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

void sub_10050092C()
{
}

uint64_t sub_100500948@<X0>(unsigned char *a1@<X8>)
{
  return sub_1003087FC(v1, a1);
}

void *sub_100500964(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_100976270);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for URLComponents();
  uint64_t v5 = *(void *)(v49 - 8);
  uint64_t v6 = __chkstk_darwin(v49);
  v38 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v37 = (char *)&v34 - v8;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v13 - 8);
  int64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v17 = a1;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v16;
  uint64_t v46 = v10 + 16;
  v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v45 = v10 + 48;
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  v44 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v36 = v5;
  v40 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v48 = v17;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v43) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v42 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v15, *(void *)(v48 + 48) + *(void *)(v10 + 72) * v25, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1) {
      goto LABEL_31;
    }
    (*v44)(v12, v15, v9);
    URLComponents.init(url:resolvingAgainstBaseURL:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((*v21)(v4, 1, v49) == 1)
    {
      uint64_t result = (void *)sub_10000A7E8((uint64_t)v4, &qword_100976270);
    }
    else
    {
      v39 = *v40;
      v39(v37, v4, v49);
      v39(v38, v37, v49);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v41 = (void *)sub_100253938(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v30 = v41[2];
      unint64_t v29 = v41[3];
      unint64_t v31 = v30 + 1;
      if (v30 >= v29 >> 1)
      {
        unint64_t v34 = v41[2];
        unint64_t v35 = v30 + 1;
        v33 = (void *)sub_100253938(v29 > 1, v30 + 1, 1, (unint64_t)v41);
        unint64_t v30 = v34;
        unint64_t v31 = v35;
        v41 = v33;
      }
      v32 = v41;
      v41[2] = v31;
      uint64_t result = (void *)((uint64_t (*)(char *, char *, uint64_t))v39)((char *)v32+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v30, v38, v49);
    }
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v43)
  {
LABEL_30:
    (*v47)(v15, 1, 1, v9);
LABEL_31:
    swift_release();
    return v41;
  }
  unint64_t v27 = *(void *)(v42 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100500EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  int64_t v23 = a3;
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844(&qword_100976270);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  v22[1] = a1;
  if (!v11)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22[0] = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    swift_bridgeObjectRetain();
LABEL_14:
    v16(v10, 1, 1, v4);
    uint64_t v19 = v23;
LABEL_16:
    swift_bridgeObjectRelease();
    v16(v19, 1, 1, v4);
    return swift_release();
  }
  Swift::String v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v28 = v5 + 16;
  unint64_t v29 = v12;
  uint64_t v13 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v14 = *(void *)(v5 + 72);
  unint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  unint64_t v30 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  unint64_t v24 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v25 = v14;
  swift_bridgeObjectRetain();
  unint64_t v31 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v22[0] = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  while (1)
  {
    v29(v10, v13, v4);
    uint64_t v16 = *v31;
    (*v31)(v10, 0, 1, v4);
    if ((*v27)(v10, 1, v4) == 1)
    {
      uint64_t v19 = v23;
      goto LABEL_16;
    }
    int64_t v26 = *v30;
    v26(v7, v10, v4);
    URLComponents.scheme.getter();
    if (!v17) {
      goto LABEL_4;
    }
    Swift::String v18 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v18._countAndFlagsBits == *(void *)(v32 + 32) && v18._object == *(void **)(v32 + 40)) {
      break;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v18._countAndFlagsBits == *(void *)(v32 + 48) && v18._object == *(void **)(v32 + 56))
    {
      break;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_17;
    }
LABEL_4:
    (*v24)(v7, v4);
    v13 += v25;
    if (!--v11) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  v21 = v23;
  v26(v23, v7, v4);
  v16(v21, 0, 1, v4);
  return swift_release();
}

uint64_t sub_100501260(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096AC10);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferType();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_1005013E4, v5, 0);
}

void sub_1005013E4()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  SFAirDropReceive.AskRequest.type.getter();
  char v4 = SFAirDrop.TransferType.isLinks.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 1) == 0)
  {
    uint64_t v24 = 0;
LABEL_28:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (void (*)(uint64_t))v0[1];
    v25(v24);
    return;
  }
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  uint64_t v7 = SFAirDropReceive.AskRequest.urlItems.getter();
  int64_t v8 = 0;
  uint64_t v26 = v7 + 56;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << *(unsigned char *)(v7 + 32);
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(v7 + 56);
  uint64_t v28 = v7;
  int64_t v27 = (unint64_t)(63 - v10) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v13 = v12 | (v8 << 6);
      goto LABEL_21;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v14 >= v27) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v27) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v26 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_26;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v8);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_21:
    uint64_t v17 = v0[7];
    uint64_t v18 = v0[4];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16))(v17, *(void *)(v28 + 48) + *(void *)(v5 + 72) * v13, v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v17, 1, v18) == 1)
    {
      swift_release();
      uint64_t v24 = 1;
      goto LABEL_27;
    }
    uint64_t v19 = v0[6];
    uint64_t v20 = v0[4];
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 32))(v19, v0[7], v20);
    sub_1003ACB84(&off_1008D25E8);
    uint64_t v22 = v21;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v19, v20);
    int64_t v23 = *(void **)(v6 + 24);
    *(void *)(v6 + 24) = v22;

    if (!*(void *)(v6 + 24))
    {
      swift_release();
      uint64_t v24 = 0;
LABEL_27:
      swift_arrayDestroy();
      goto LABEL_28;
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v27)
  {
LABEL_26:
    uint64_t v24 = 1;
    (*(void (**)(void, uint64_t, uint64_t, void))(v5 + 56))(v0[7], 1, 1, v0[4]);
    swift_release();
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v26 + 8 * v16);
  if (v15)
  {
    int64_t v8 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v8 >= v27) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v26 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_32:
  __break(1u);
}

unint64_t sub_10050174C(unint64_t a1)
{
  uint64_t v2 = (void *)v1;
  uint64_t v4 = sub_10000A844(&qword_100976270);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for URLComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = SFAirDropReceive.AskRequest.urlItems.getter();
  unint64_t v12 = sub_100500964(v11);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_100500EE4((uint64_t)v12, v1, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    (*(void (**)(unsigned char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    uint64_t v14 = URLComponents.scheme.getter();
    uint64_t v16 = v15;
    if (!v15)
    {
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      return 0;
    }
    uint64_t v17 = v14;
    char v18 = sub_100501A58(a1);
    BOOL v19 = v17 == v2[4] && v16 == v2[5];
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (v18) {
        unint64_t v13 = 0xD00000000000001FLL;
      }
      else {
        unint64_t v13 = 0xD000000000000019;
      }
    }
    else
    {
      if (v17 == v2[6] && v16 == v2[7])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
          (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
          return 0;
        }
      }
      if (v18) {
        unint64_t v13 = 0xD00000000000001BLL;
      }
      else {
        unint64_t v13 = 0xD000000000000015;
      }
    }
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    return v13;
  }
  sub_10000A7E8((uint64_t)v6, &qword_100976270);
  return 0;
}

uint64_t sub_100501A58(unint64_t a1)
{
  uint64_t v3 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v3 - 8);
  uint64_t v42 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A844(&qword_100976270);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URLComponents();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096B3E0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10077AB80;
  *(void *)(v12 + 32) = CNContactEmailAddressesKey;
  *(void *)(v12 + 40) = CNContactPhoneNumbersKey;
  uint64_t v47 = v12;
  specialized Array._endMutation()();
  unint64_t v13 = CNContactEmailAddressesKey;
  uint64_t v14 = CNContactPhoneNumbersKey;
  unint64_t v41 = a1;
  uint64_t v15 = SFAirDropReceive.AskRequest.urlItems.getter();
  uint64_t v16 = sub_100500964(v15);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v40 = v1;
  uint64_t v17 = v9;
  sub_100500EE4((uint64_t)v16, v1, v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    char v18 = &qword_100976270;
    uint64_t v19 = (uint64_t)v7;
LABEL_5:
    sub_10000A7E8(v19, v18);
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  URLComponents.scheme.setter();
  uint64_t v20 = v42;
  URLComponents.url.getter();
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
    char v18 = (uint64_t *)&unk_10096AC10;
    uint64_t v19 = (uint64_t)v20;
    goto LABEL_5;
  }
  uint64_t v24 = URL.absoluteString.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  uint64_t v47 = v24;
  uint64_t v48 = v26;
  uint64_t v45 = 12079;
  unint64_t v46 = 0xE200000000000000;
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  unint64_t v38 = sub_10024A1FC();
  unint64_t v39 = v38;
  v37[0] = &type metadata for String;
  v37[1] = v38;
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
  unint64_t v27 = v41;
  SFAirDropReceive.AskRequest.contactIdentifier.getter();
  if (!v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v29 = *(void **)(v40 + 16);
  if (!v29)
  {
    __break(1u);
    return result;
  }
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000A844(&qword_100972450);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = [v29 contactsWithPhoneNumberOrEmail:v30 keys:isa];

  if (v32)
  {
    sub_1003DC47C();
    sub_100463298();
    uint64_t v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v34);
    unint64_t v38 = v27;
    sub_1003D8D8C(sub_100502C68, (uint64_t)v37, v33);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    if (v36)
    {

      return 1;
    }
  }
  return 0;
}

uint64_t sub_100501F30(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = SFAirDropReceive.AskRequest.contactIdentifier.getter();
  uint64_t v4 = v3;
  id v5 = [v1 identifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (v4)
  {
    if (v2 == v6 && v4 == v8) {
      char v10 = 1;
    }
    else {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = 0;
  }
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100501FF4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SDAirDropContentHandlerPhoneLinks()
{
  return self;
}

double sub_100502068@<D0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SDAirDropContentHandlerPhoneLinks();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = [self sharedMonitor];
  double result = 0.0;
  *(_OWORD *)(v2 + 24) = xmmword_10077AB90;
  *(void *)(v2 + 40) = 0xE800000000000000;
  *(void *)(v2 + 48) = 7103860;
  *(void *)(v2 + 56) = 0xE300000000000000;
  *a1 = v2;
  return result;
}

uint64_t sub_1005020E8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10024DEC4;
  return sub_100501260(a1);
}

uint64_t sub_100502184()
{
  return sub_100502880();
}

unint64_t sub_1005021A8(unint64_t a1)
{
  return sub_10050174C(a1);
}

uint64_t sub_1005021CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000A844((uint64_t *)&unk_10097F1D0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(*(void *)v2 + 24);
  type metadata accessor for SDAirDropContentHandlerUtilities();
  uint64_t v9 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  id v10 = v8;
  sub_10039FAA0(a1, v8, 1, a2);

  return sub_10000A7E8((uint64_t)v7, (uint64_t *)&unk_10097F1D0);
}

void sub_1005022E0(uint64_t a1, char a2)
{
  uint64_t v3 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(SFAirDropReceive.AskRequest.urlItems.getter() + 16);
  swift_bridgeObjectRelease();
  if (v10 == 1)
  {
    uint64_t v11 = SFAirDropReceive.AskRequest.urlItems.getter();
    sub_1002E5BA0(v11, (uint64_t)v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_10000A7E8((uint64_t)v5, (uint64_t *)&unk_10096AC10);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      URL._bridgeToObjectiveC()(v12);
      uint64_t v14 = v13;
      id v15 = [v13 formattedPhoneNumber];

      if (v15)
      {
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        uint64_t v36 = 0x545F4E5245444F4DLL;
        unint64_t v37 = 0xEF524546534E4152;
        swift_bridgeObjectRetain();
        v19._countAndFlagsBits = 95;
        v19._object = (void *)0xE100000000000000;
        String.append(_:)(v19);
        v20._countAndFlagsBits = 0xD000000000000016;
        v20._object = "CONTACT_INFORMATION";
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        if (a2)
        {
          v21._countAndFlagsBits = 0x4C4154495041435FLL;
          v21._object = (void *)0xEC00000044455A49;
          String.append(_:)(v21);
        }
        v22._countAndFlagsBits = 0x545845545FLL;
        v22._object = (void *)0xE500000000000000;
        String.append(_:)(v22);
        sub_10000A844((uint64_t *)&unk_100977CB0);
        swift_arrayDestroy();
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v24 = (id)SFLocalizedStringForKey();

        if (v24)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          sub_10000A844((uint64_t *)&unk_10096EE60);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = xmmword_10076E7A0;
          *(void *)(v25 + 56) = &type metadata for String;
          *(void *)(v25 + 64) = sub_1002E695C();
          *(void *)(v25 + 32) = v16;
          *(void *)(v25 + 40) = v18;
          static String.localizedStringWithFormat(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          return;
        }
        goto LABEL_17;
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  sub_10000A844(&qword_10096D760);
  uint64_t inited = swift_initStackObject();
  long long v35 = xmmword_10076E7A0;
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)(inited + 32) = 0x494C5F454E4F4850;
  *(void *)(inited + 40) = 0xEA00000000004B4ELL;
  *(void *)(inited + 48) = v10;
  uint64_t v36 = 0x545F4E5245444F4DLL;
  unint64_t v37 = 0xEF524546534E4152;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = 95;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x494C5F454E4F4850;
  v28._object = (void *)0xEA00000000004B4ELL;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  if (v10 > 1)
  {
    v29._countAndFlagsBits = 0x4C4152554C505FLL;
    v29._object = (void *)0xE700000000000000;
    String.append(_:)(v29);
  }
  swift_bridgeObjectRelease();
  if (a2)
  {
    v30._countAndFlagsBits = 0x4C4154495041435FLL;
    v30._object = (void *)0xEC00000044455A49;
    String.append(_:)(v30);
  }
  v31._countAndFlagsBits = 0x545845545FLL;
  v31._object = (void *)0xE500000000000000;
  String.append(_:)(v31);
  swift_setDeallocating();
  sub_10000A844((uint64_t *)&unk_100977CB0);
  swift_arrayDestroy();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v33 = (id)SFLocalizedStringForKey();

  if (v33)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000A844((uint64_t *)&unk_10096EE60);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = v35;
    *(void *)(v34 + 56) = &type metadata for Int;
    *(void *)(v34 + 64) = &protocol witness table for Int;
    *(void *)(v34 + 32) = v10;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
LABEL_17:
  __break(1u);
}

uint64_t sub_100502880()
{
  uint64_t v1 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v1 - 8);
  Swift::String v27 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URLComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v28 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A844(&qword_100976270);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = SFAirDropReceive.AskRequest.urlItems.getter();
  unint64_t v13 = sub_100500964(v12);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_100500EE4((uint64_t)v13, v0, v11);
  swift_bridgeObjectRelease();
  uint64_t v29 = v4;
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  LODWORD(v13) = v14(v11, 1, v3);
  sub_10000A7E8((uint64_t)v11, &qword_100976270);
  uint64_t v15 = 0;
  if (v13 != 1)
  {
    uint64_t v16 = SFAirDropReceive.AskRequest.urlItems.getter();
    uint64_t v17 = sub_100500964(v16);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100500EE4((uint64_t)v17, v0, v9);
    swift_bridgeObjectRelease();
    if (v14(v9, 1, v3) == 1)
    {
      uint64_t v18 = &qword_100976270;
    }
    else
    {
      Swift::String v20 = v28;
      uint64_t v19 = v29;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v28, v9, v3);
      URLComponents.scheme.setter();
      uint64_t v9 = v27;
      URLComponents.url.getter();
      uint64_t v21 = type metadata accessor for URL();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v9, 1, v21) != 1)
      {
        uint64_t v23 = URL.absoluteString.getter();
        uint64_t v25 = v24;
        (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v21);
        uint64_t v34 = v23;
        uint64_t v35 = v25;
        uint64_t v32 = 12079;
        unint64_t v33 = 0xE200000000000000;
        uint64_t v30 = 0;
        unint64_t v31 = 0xE000000000000000;
        sub_10024A1FC();
        uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v3);
        return v15;
      }
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v3);
      uint64_t v18 = (uint64_t *)&unk_10096AC10;
    }
    sub_10000A7E8((uint64_t)v9, v18);
    return 0;
  }
  return v15;
}

uint64_t sub_100502C68(void **a1)
{
  return sub_100501F30(a1) & 1;
}

uint64_t sub_100502C88()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100977CD8);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100977CD8);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100502D50(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFPlatform();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskRequest();
  v2[15] = v6;
  v2[16] = *(void *)(v6 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  v2[19] = static AirDropActor.shared;
  return _swift_task_switch(sub_100502F70, v7, 0);
}

uint64_t sub_100502F70()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[4];
  uint64_t v5 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[20] = v6;
  v0[21] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[15];
  uint64_t v9 = v0[16];
  if (v5)
  {
    uint64_t v10 = *(void *)(SFAirDropReceive.AskRequest.urlItems.getter() + 16);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v0[22] = v11;
    v0[23] = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v11(v7, v8);
    if (!v10 && SFWalletAppAvailable())
    {
      v0[24] = self;
      type metadata accessor for MainActor();
      v0[25] = static MainActor.shared.getter();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      return _swift_task_switch(sub_100503134, v13, v12);
    }
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[18], v0[15]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14(0);
}

uint64_t sub_100503134()
{
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_release();
  *(unsigned char *)(v0 + 208) = [v1 canAddPasses];
  return _swift_task_switch(sub_1005031B4, v2, 0);
}

uint64_t sub_1005031B4()
{
  int v1 = *(unsigned __int8 *)(v0 + 208);
  if ([self isPassLibraryAvailable]) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    BOOL v3 = 0;
  }
  else
  {
    uint64_t v4 = SFAirDropReceive.AskRequest.files.getter();
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = *(void *)(v0 + 104);
      uint64_t v8 = *(void (**)(void, unint64_t, void))(v6 + 16);
      uint64_t v7 = v6 + 16;
      unint64_t v9 = v4 + ((*(unsigned __int8 *)(v7 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 64));
      *(void *)type = *(void *)(v7 + 56);
      Swift::String v27 = v8;
      while (1)
      {
        v27(*(void *)(v0 + 112), v9, *(void *)(v0 + 96));
        SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
        NSString v10 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        SFAirDropReceive.AskRequest.ItemInfo.fileName.getter();
        NSString v11 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v12 = [v11 pathExtension];

        if (!v12)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v12 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        uint64_t v13 = *(void *)(v0 + 112);
        uint64_t v14 = *(void *)(v0 + 96);
        char v15 = SFIsPass();

        (*(void (**)(uint64_t, uint64_t))(v7 - 8))(v13, v14);
        if ((v15 & 1) == 0) {
          break;
        }
        v9 += *(void *)type;
        if (!--v5) {
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      BOOL v3 = 0;
    }
    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(v0 + 80);
      uint64_t v17 = *(void *)(v0 + 88);
      uint64_t v18 = *(void *)(v0 + 72);
      static SFPlatform.macOS.getter();
      char v19 = static SFPlatform.isPlatform(_:)();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
      if (v19)
      {
        BOOL v3 = 1;
      }
      else
      {
        id v20 = objc_allocWithZone((Class)LSApplicationRecord);
        id v21 = sub_1006A5458(0xD000000000000012, 0x80000001007C0640, 1);
        uint64_t v22 = *(void *)(v0 + 40);
        uint64_t v23 = *(void **)(v22 + 16);
        *(void *)(v22 + 16) = v21;

        BOOL v3 = *(void *)(*(void *)(v0 + 40) + 16) != 0;
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v24(v3);
}

uint64_t sub_100503740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[21] = a3;
  v4[22] = a4;
  v4[19] = a1;
  v4[20] = a2;
  uint64_t v5 = sub_10000A844(&qword_1009700B0);
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096AC10);
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[29] = v6;
  v4[30] = *(void *)(v6 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  sub_10000A844(&qword_1009700B8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  v4[36] = static AirDropActor.shared;
  return _swift_task_switch(sub_100503974, v7, 0);
}

uint64_t sub_100503974()
{
  *(void *)(v0 + 296) = self;
  type metadata accessor for MainActor();
  *(void *)(v0 + 304) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100503A4C, v2, v1);
}

uint64_t sub_100503A4C()
{
  uint64_t v1 = *(void **)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 288);
  swift_release();
  *(unsigned char *)(v0 + 336) = [v1 canAddPasses];
  return _swift_task_switch(sub_100503B00, v2, 0);
}

uint64_t sub_100503B00()
{
  uint64_t v66 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 336);
  if ([self isPassLibraryAvailable]) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    v57 = (void **)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 184);
    uint64_t v12 = *(void *)(v0 + 192);
    unint64_t v63 = *(void *)(*(void *)(v0 + 176) + 16);
    id v56 = [objc_allocWithZone((Class)PKPassLibrary) init];
    *(void *)(v0 + 312) = v56;
    *(void *)(v0 + 120) = _swiftEmptyArrayStorage;
    uint64_t v14 = (void (**)(uint64_t, char *, uint64_t))(v11 + 32);
    v61 = (void (**)(void, void, void, void))(v12 + 56);
    v62 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56);
    uint64_t v58 = v11;
    v59 = (void (**)(uint64_t, uint64_t))(v11 + 8);
    v60 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v64 = v13;
    while (v16 != v63)
    {
      if (v16 >= v63) {
        goto LABEL_37;
      }
      uint64_t v18 = *(void *)(v0 + 224);
      uint64_t v19 = *(void *)(v0 + 232);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v58 + 16))(v18, *(void *)(v0 + 176)+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(void *)(v58 + 72) * v16++, v19);
      uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56);
      v17(v18, 0, 1, v19);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v18, 1, v19) == 1) {
        goto LABEL_16;
      }
      uint64_t v22 = *(char **)(v0 + 264);
      uint64_t v23 = *(void *)(v0 + 232);
      uint64_t v24 = *(void *)(v0 + 200);
      uint64_t v25 = *v14;
      (*v14)((uint64_t)v22, *(char **)(v0 + 224), v23);
      uint64_t v26 = (char *)(v24 + *(int *)(v13 + 48));
      v25((uint64_t)v26, v22, v23);
      if (__OFADD__(v15, 1)) {
        goto LABEL_38;
      }
      Swift::String v27 = *(void **)(v0 + 272);
      uint64_t v28 = *(void *)(v0 + 232);
      uint64_t v29 = *(void *)(v0 + 184);
      uint64_t v30 = (char *)v27 + *(int *)(v13 + 48);
      *Swift::String v27 = v15;
      v25((uint64_t)v30, v26, v28);
      (*v61)(v27, 0, 1, v29);
      ++v15;
LABEL_19:
      *(void *)(v0 + 320) = v17;
      uint64_t v31 = *(void *)(v0 + 280);
      uint64_t v32 = *(void *)(v0 + 184);
      sub_10024D388(*(void *)(v0 + 272), v31, &qword_1009700B8);
      if ((*v60)(v31, 1, v32) == 1)
      {
        swift_bridgeObjectRelease();
        sub_100505324();
        swift_bridgeObjectRetain();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 328) = isa;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 56) = v0 + 128;
        *(void *)(v0 + 24) = sub_100504444;
        uint64_t v55 = swift_continuation_init();
        *(void *)(v0 + 80) = _NSConcreteStackBlock;
        *(void *)(v0 + 88) = 0x40000000;
        *(void *)(v0 + 96) = sub_100504A98;
        *(void *)(v0 + 104) = &unk_1008DE1A0;
        *(void *)(v0 + 112) = v55;
        [v56 addPasses:isa withCompletionHandler:v0 + 80];
        return _swift_continuation_await(v0 + 16);
      }
      unint64_t v33 = *(char **)(v0 + 280);
      uint64_t v34 = *(void *)v33;
      (*v14)(*(void *)(v0 + 256), &v33[*(int *)(v64 + 48)], *(void *)(v0 + 232));
      uint64_t v41 = Data.init(contentsOf:options:)();
      unint64_t v43 = v42;
      id v44 = objc_allocWithZone((Class)PKPass);
      sub_10025ADCC(v41, v43);
      Class v45 = Data._bridgeToObjectiveC()().super.isa;
      *v57 = 0;
      id v46 = [v44 initWithData:v45 error:v57];

      uint64_t v47 = *v57;
      if (v46)
      {
        id v48 = v47;
        sub_100250CC4(v41, v43);
        id v49 = v46;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*(void *)(v0 + 120) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 120) & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        sub_100250CC4(v41, v43);
      }
      else
      {
        id v53 = v47;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_100250CC4(v41, v43);
        sub_100250CC4(v41, v43);
        if (qword_100969F10 != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        sub_10000B47C(v35, (uint64_t)qword_100977CD8);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc();
          unint64_t v39 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v38 = 138412290;
          swift_errorRetain();
          uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v38 + 4) = v40;
          *unint64_t v39 = v40;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Wallet pass add or initWithData failed: %@", (uint8_t *)v38, 0xCu);
          sub_10000A844(&qword_10096B850);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
      }
      uint64_t v13 = v64;
      if (__OFADD__(v34, 1))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      uint64_t v50 = *(void *)(v0 + 256);
      uint64_t v51 = *(void *)(v0 + 232);
      v52 = *(void (**)(double *))(v0 + 160);
      double v65 = (double)(v34 + 1) / (double)(uint64_t)(v63 + 1);
      v52(&v65);
      (*v59)(v50, v51);
    }
    uint64_t v17 = *v62;
    (*v62)(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 232));
    unint64_t v16 = v63;
LABEL_16:
    uint64_t v20 = *(void *)(v0 + 272);
    uint64_t v21 = *(void *)(v0 + 184);
    sub_10000A7E8(*(void *)(v0 + 224), (uint64_t *)&unk_10096AC10);
    (*v61)(v20, 1, 1, v21);
    goto LABEL_19;
  }
  if (qword_100969F10 != -1) {
LABEL_39:
  }
    swift_once();
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000B47C(v3, (uint64_t)qword_100977CD8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Wallet not available. Abort", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = type metadata accessor for SFAirDropReceive.Failure();
  sub_100505364(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v8, enum case for SFAirDropReceive.Failure.moveToAppFailed(_:), v7);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100504444()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 288);
  return _swift_task_switch(sub_100504564, v1, 0);
}

uint64_t sub_100504564()
{
  uint64_t v1 = *(void *)(v0 + 128);

  unint64_t v2 = *(void *)(v0 + 120);
  if (!v1)
  {
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v3)
      {
LABEL_5:
        unint64_t v4 = v3 - 1;
        if (__OFSUB__(v3, 1))
        {
          __break(1u);
        }
        else if ((v2 & 0xC000000000000001) == 0)
        {
          if ((v4 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v4 < *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v5 = *(id *)(v2 + 8 * v4 + 32);
            goto LABEL_10;
          }
          __break(1u);
        }
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
        uint64_t v6 = v5;
        swift_bridgeObjectRelease();
        id v7 = [v6 passURL];

        if (v7)
        {
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v8 = 1;
        }
        uint64_t v9 = *(void *)(v0 + 232);
        uint64_t v10 = *(void *)(v0 + 240);
        uint64_t v12 = *(void *)(v0 + 208);
        uint64_t v11 = *(void *)(v0 + 216);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 320))(v12, v8, 1, v9);
        sub_10024D388(v12, v11, (uint64_t *)&unk_10096AC10);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) != 1)
        {
          uint64_t v13 = *(void **)(v0 + 312);
          unint64_t v14 = *(void *)(v0 + 248);
          uint64_t v15 = *(void *)(v0 + 232);
          uint64_t v16 = *(void *)(v0 + 240);
          uint64_t v17 = *(uint64_t **)(v0 + 152);
          uint64_t v18 = *(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32);
          v18(v14, *(void *)(v0 + 216), v15);
          sub_10000A844(&qword_10096B358);
          unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          uint64_t v20 = swift_allocObject();
          *(_OWORD *)(v20 + 16) = xmmword_10076E7A0;
          v18(v20 + v19, v14, v15);

          *uint64_t v17 = v20;
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
          goto LABEL_23;
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v3) {
        goto LABEL_5;
      }
    }
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 320);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v24 = *(void *)(v0 + 216);
    swift_bridgeObjectRelease();
    v22(v24, 1, 1, v23);
LABEL_17:
    sub_10000A7E8(*(void *)(v0 + 216), (uint64_t *)&unk_10096AC10);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  if (qword_100969F10 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_10000B47C(v25, (uint64_t)qword_100977CD8);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 134217984;
    *(void *)(v0 + 136) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Wallet pass add failed with status: %ld", v28, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v29 = *(void **)(v0 + 312);

  uint64_t v30 = type metadata accessor for SFAirDropReceive.Failure();
  sub_100505364(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v30 - 8) + 104))(v31, enum case for SFAirDropReceive.Failure.moveToAppFailed(_:), v30);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
LABEL_23:
  return v21();
}

uint64_t sub_100504A98(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_100504ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10097F1D0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v3 + 16);
  type metadata accessor for SDAirDropContentHandlerUtilities();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  id v13 = v10;
  sub_10039FAA0(a1, v10, 1, a3);

  return sub_10000A7E8((uint64_t)v9, (uint64_t *)&unk_10097F1D0);
}

uint64_t type metadata accessor for SDAirDropContentHandlerWalletItems()
{
  return self;
}

uint64_t sub_100504C34@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SDAirDropContentHandlerWalletItems();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_100504C6C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10024DEC4;
  return sub_100502D50(a1);
}

uint64_t sub_100504D08(uint64_t a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  sub_10000A844((uint64_t *)&unk_10096C8B0);
  return SFProgressTask.init(_:initialProgress:operation:file:line:)();
}

uint64_t sub_100504DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100504ABC(a1, a2, a3);
}

void sub_100504DFC(uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  if (v3 == 1 && (uint64_t v4 = SFAirDropReceive.AskRequest.itemsDescription.getter(), v5))
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    sub_10000A844(&qword_10096D760);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
    *(void *)(inited + 32) = 0x5449575F53534150;
    *(void *)(inited + 40) = 0xEF454C5449545F48;
    *(void *)(inited + 48) = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 95;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0x5449575F53534150;
    v10._object = (void *)0xEF454C5449545F48;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a2)
    {
      v11._countAndFlagsBits = 0x4C4154495041435FLL;
      v11._object = (void *)0xEC00000044455A49;
      String.append(_:)(v11);
    }
    v12._countAndFlagsBits = 0x545845545FLL;
    v12._object = (void *)0xE500000000000000;
    String.append(_:)(v12);
    swift_setDeallocating();
    sub_10000A844((uint64_t *)&unk_100977CB0);
    swift_arrayDestroy();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v14 = (id)SFLocalizedStringForKey();

    if (v14)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000A844((uint64_t *)&unk_10096EE60);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_10076E7A0;
      *(void *)(v15 + 56) = &type metadata for String;
      *(void *)(v15 + 64) = sub_1002E695C();
      *(void *)(v15 + 32) = v6;
      *(void *)(v15 + 40) = v7;
LABEL_13:
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    sub_10000A844(&qword_10096D760);
    uint64_t v16 = swift_initStackObject();
    *(_OWORD *)(v16 + 16) = xmmword_10076E7A0;
    *(void *)(v16 + 32) = 1397965136;
    *(void *)(v16 + 40) = 0xE400000000000000;
    *(void *)(v16 + 48) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = 95;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 1397965136;
    v18._object = (void *)0xE400000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    if (v3 > 1)
    {
      v19._countAndFlagsBits = 0x4C4152554C505FLL;
      v19._object = (void *)0xE700000000000000;
      String.append(_:)(v19);
    }
    swift_bridgeObjectRelease();
    if (a2)
    {
      v20._countAndFlagsBits = 0x4C4154495041435FLL;
      v20._object = (void *)0xEC00000044455A49;
      String.append(_:)(v20);
    }
    v21._countAndFlagsBits = 0x545845545FLL;
    v21._object = (void *)0xE500000000000000;
    String.append(_:)(v21);
    swift_setDeallocating();
    sub_10000A844((uint64_t *)&unk_100977CB0);
    swift_arrayDestroy();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = (id)SFLocalizedStringForKey();

    if (v23)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000A844((uint64_t *)&unk_10096EE60);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_10076E7A0;
      *(void *)(v24 + 56) = &type metadata for Int;
      *(void *)(v24 + 64) = &protocol witness table for Int;
      *(void *)(v24 + 32) = v3;
      goto LABEL_13;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100505234()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10050526C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  Swift::String v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *Swift::String v9 = v4;
  v9[1] = sub_10000A6F4;
  return sub_100503740(a1, a2, a3, v8);
}

unint64_t sub_100505324()
{
  unint64_t result = qword_100977DF0;
  if (!qword_100977DF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100977DF0);
  }
  return result;
}

uint64_t sub_100505364(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1005053AC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100977DF8);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100977DF8);
  if (qword_100969C90 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994600);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100505474(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  *(void *)(v5 + 24) = 0;
  *(_WORD *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  if (qword_100969F18 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_100977DF8);
  id v11 = a1;
  Swift::String v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v24 = a4;
    id v15 = [v11 identifier];
    uint64_t v23 = a3;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    sub_100254634(v16, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    if (a2) {
      uint64_t v19 = 1702195828;
    }
    else {
      uint64_t v19 = 0x65736C6166;
    }
    if (a2) {
      unint64_t v20 = 0xE400000000000000;
    }
    else {
      unint64_t v20 = 0xE500000000000000;
    }
    sub_100254634(v19, v20, &v25);
    a4 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v23;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "IncomingAirDropAlert created for transfer %s, playSound=%s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  *(void *)(v5 + 16) = v11;
  *(unsigned char *)(v5 + 34) = a2 & 1;
  uint64_t v21 = *(void *)(v5 + 40);
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  sub_1002CA430(v21);
  return v5;
}

void sub_1005056F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  id v3 = sub_100506C2C(v2, *(unsigned __int8 *)(v0 + 33));
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    if (*(unsigned char *)(v1 + 34) == 1) {
      [self playAlertForType:12];
    }
    uint64_t v31 = sub_100507D00;
    uint64_t v32 = v1;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256;
    uint64_t v29 = sub_1006B210C;
    uint64_t v30 = &unk_1008DE1B8;
    uint64_t v7 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v5 setErrorHandler:v7];
    _Block_release(v7);
    uint64_t v31 = sub_100505E58;
    uint64_t v32 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256;
    uint64_t v29 = sub_10061CCEC;
    uint64_t v30 = &unk_1008DE1E0;
    uint64_t v8 = _Block_copy(&aBlock);
    [v5 setResponseHandler:v8];
    _Block_release(v8);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = v1;
    uint64_t v31 = sub_100507D60;
    uint64_t v32 = v9;
    aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256;
    uint64_t v29 = sub_100506294;
    uint64_t v30 = &unk_1008DE230;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v5 setDictionaryResponseHandler:v10];
    _Block_release(v10);
    id v11 = *(void **)(v1 + 24);
    *(void *)(v1 + 24) = v5;
    id v12 = v5;

    if (qword_100969F18 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B47C(v13, (uint64_t)qword_100977DF8);
    swift_retain_n();
    uint64_t v14 = v12;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      unint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412546;
      aBlock = (void **)&v14->isa;
      uint64_t v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v18 = v5;

      *(_WORD *)(v17 + 12) = 2112;
      aBlock = (void **)v2;
      id v20 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v18[1] = v2;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "IncomingAirDropAlert: Presenting AirDrop alert: %@ for transfer %@.", (uint8_t *)v17, 0x16u);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      id v15 = v14;
    }

    [v14 present];
  }
  else
  {
    if (qword_100969F18 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000B47C(v21, (uint64_t)qword_100977DF8);
    swift_retain_n();
    NSString v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412290;
      aBlock = (void **)v2;
      id v26 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v2;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to populate AirDrop alert for transfer %@.", v24, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

void sub_100505C58(uint64_t a1, uint64_t a2)
{
  if (qword_100969F18 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000B47C(v3, (uint64_t)qword_100977DF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_errorRetain();
    sub_10000A844(&qword_100970E18);
    uint64_t v7 = String.init<A>(describing:)();
    sub_100254634(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Alert error handler called with error: %s.", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  id v9 = [*(id *)(a2 + 16) cancelAction];
  if (v9)
  {
    uint64_t v10 = v9;
    sub_100506324(v9);
  }
}

void sub_100505E58()
{
  if (qword_100969F18 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000B47C(v0, (uint64_t)qword_100977DF8);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Alert response handler called with: %d.", v2, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100505F90(uint64_t a1, uint64_t a2)
{
  if (qword_100969F18 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B47C(v4, (uint64_t)qword_100977DF8);
  swift_bridgeObjectRetain_n();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    if (a1)
    {
      uint64_t v8 = Dictionary.description.getter();
      unint64_t v10 = v9;
    }
    else
    {
      unint64_t v10 = 0xE90000000000003ELL;
      uint64_t v8 = 0x74636964206F6E3CLL;
    }
    *(void *)&long long v18 = sub_100254634(v8, v10, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Dictionary response handler called %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!a1) {
      return;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!a1) {
      return;
    }
  }
  unint64_t v16 = SBSUserNotificationButtonDefinitionResponseIndexKey;
  id v11 = SBSUserNotificationButtonDefinitionResponseIndexKey;
  sub_10000A844(&qword_10096B578);
  sub_10025B004();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v12 = sub_100583878((uint64_t)v17), (v13 & 1) != 0))
  {
    sub_10024D2D4(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v18);
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  sub_10025B0A8((uint64_t)v17);
  if (*((void *)&v19 + 1))
  {
    if (swift_dynamicCast())
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_20;
      }
      if ((v16 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v16 < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v14 = *(id *)(a2 + 8 * v16 + 32);
LABEL_20:
        id v15 = v14;
        sub_100506324(v14);

        return;
      }
      __break(1u);
    }
  }
  else
  {
    sub_10000A7E8((uint64_t)&v18, (uint64_t *)&unk_10096AC20);
  }
}

uint64_t sub_100506294(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t))(a1 + 32);
  if (a2) {
    uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_retain();
  v2(v3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100506324(void *a1)
{
  [a1 triggerAction];
  *(unsigned char *)(v1 + 32) = 1;
  id v3 = [*(id *)(v1 + 16) cancelAction];
  if (v3
    && (uint64_t v4 = v3,
        sub_10000B740(0, &qword_1009700A8),
        id v5 = a1,
        char v6 = static NSObject.== infix(_:_:)(),
        v5,
        v5,
        v4,
        (v6 & 1) != 0))
  {
    uint64_t v7 = 2;
  }
  else
  {
    uint64_t v7 = [a1 shouldUpdateUserResponse];
  }
  if (qword_100969F18 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B47C(v8, (uint64_t)qword_100977DF8);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)id v11 = 136315138;
    uint64_t v12 = v7;
    id v13 = (id)SFAirDropTransferUserResponseToString();
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    uint64_t v7 = v12;
    sub_100254634(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "User response is %s, dismissing alert.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return sub_100506578(v7);
}

uint64_t sub_100506578(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_100969F18 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B47C(v4, (uint64_t)qword_100977DF8);
  swift_retain_n();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v17 = v8;
    id v9 = [*(id *)(v2 + 16) identifier];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    sub_100254634(v10, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Dismiss alert for transfer %s.", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  [*(id *)(v2 + 24) invalidate];
  id v13 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = 0;

  uint64_t v14 = *(void (**)(uint64_t))(v2 + 40);
  if (v14)
  {
    swift_retain();
    v14(a1);
    sub_1002CA430((uint64_t)v14);
    uint64_t v15 = *(void *)(v2 + 40);
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  return sub_1002CA430(v15);
}

uint64_t sub_1005067C0()
{
  sub_1002CA430(*(void *)(v0 + 40));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IncomingAirDropAlert()
{
  return self;
}

void sub_10050682C(int a1, id a2, char a3)
{
  if ([a2 transferState] == (id)6) {
    return;
  }
  id v5 = [a2 identifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  id v9 = [a2 metaData];
  id v10 = [v9 previewImage];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10000A7E8((uint64_t)&v31, (uint64_t *)&unk_10096AC20);
    id v11 = [a2 metaData];
    id v12 = [v11 contactIdentifier];

    if (v12)
    {

      goto LABEL_6;
    }
    if ((a3 & 1) == 0)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
    sub_10000A7E8((uint64_t)&v31, (uint64_t *)&unk_10096AC20);
    if ((a3 & 1) == 0) {
      goto LABEL_12;
    }
  }
LABEL_6:
  id v13 = [objc_allocWithZone((Class)NSExtensionItem) init];
  sub_10000A844(&qword_100977F58);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)&long long v31 = 25705;
  *((void *)&v31 + 1) = 0xE200000000000000;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = v8;
  sub_10024592C(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setUserInfo:isa];

  unint64_t v16 = self;
  sub_10000A844(&qword_10096B3E0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100773BD0;
  *(void *)(v17 + 32) = v13;
  *(void *)&long long v31 = v17;
  specialized Array._endMutation()();
  sub_10000B740(0, (unint64_t *)&unk_100977F60);
  id v18 = v13;
  Class v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&long long v31 = 0;
  id v20 = [v16 archivedDataWithRootObject:v19 requiringSecureCoding:1 error:&v31];

  id v21 = (id)v31;
  if (v20)
  {
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    if (SBUserNotificationExtensionIdentifierKey)
    {
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v32 + 1) = &type metadata for String;
      *(void *)&long long v31 = 0xD000000000000020;
      *((void *)&v31 + 1) = 0x80000001007C0780;
      sub_10046665C((uint64_t)&v31, v25, v26);
      if (SBUserNotificationExtensionItemsKey)
      {
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v29 = v28;
        *((void *)&v32 + 1) = &type metadata for Data;
        *(void *)&long long v31 = v22;
        *((void *)&v31 + 1) = v24;
        sub_10025ADCC(v22, v24);
        sub_10046665C((uint64_t)&v31, v27, v29);

        sub_100250CC4(v22, v24);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t v30 = v21;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

id sub_100506C2C(void *a1, int a2)
{
  int v114 = a2;
  uint64_t v3 = sub_10000A844((uint64_t *)&unk_10096AC10);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  v112 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v116 = (char *)&v111 - v6;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v119 = *(void *)(v7 - 8);
  uint64_t v120 = v7;
  __chkstk_darwin(v7);
  v113 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)SFUserAlert) init];
  id v10 = [a1 possibleActions];
  sub_10000B740(0, &qword_1009700A8);
  unint64_t v125 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v121 = [a1 cancelAction];
  id v11 = [a1 contentsTitle];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v12 = String._bridgeToObjectiveC()();
  uint64_t v13 = (uint64_t)[v12 length];
  if (v13 >= 1000) {
    uint64_t v14 = 1000;
  }
  else {
    uint64_t v14 = v13;
  }
  id v15 = [v12 substringToIndex:v14];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setTitle:v16];

  id v17 = [a1 contentsDescription];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v18 = String._bridgeToObjectiveC()();
  uint64_t v19 = (uint64_t)[v18 length];
  if (v19 >= 1000) {
    uint64_t v20 = 1000;
  }
  else {
    uint64_t v20 = v19;
  }
  id v21 = [v18 substringToIndex:v20];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setMessage:v22];

  id v115 = v9;
  [v9 setHasDefaultButton:0];
  unint64_t v132 = (unint64_t)_swiftEmptyArrayStorage;
  v133 = _swiftEmptyArrayStorage;
  id v126 = a1;
  if (![a1 needsAction])
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v25 = v121;
    if (!v121) {
      goto LABEL_55;
    }
LABEL_42:
    id v43 = v25;
    id result = [v43 localizedTitle];
    if (!result)
    {
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    id v44 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v45 = objc_allocWithZone((Class)SBSMutableUserNotificationButtonDefinition);
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v47 = [v45 initWithTitle:v46];

    id v48 = [v47 build];
    uint64_t v49 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v50 = v132;
    if (v132 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v108 >= 2) {
        goto LABEL_45;
      }
      sub_1005A44E0(0, 0, v49);
      id v109 = v43;
      swift_bridgeObjectRetain();
      uint64_t v110 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v110 < 0)
      {
        __break(1u);
        swift_once();
        uint64_t v100 = type metadata accessor for Logger();
        sub_10000B47C(v100, (uint64_t)qword_100977DF8);
        swift_errorRetain();
        swift_errorRetain();
        v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v101, v102))
        {
          v103 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v129 = swift_slowAlloc();
          *(_DWORD *)v103 = 136315138;
          *(void *)&v128[0] = v50;
          swift_errorRetain();
          sub_10000A844(&qword_10096BAF0);
          uint64_t v104 = String.init<A>(describing:)();
          *(void *)&v128[0] = sub_100254634(v104, v105, (uint64_t *)&v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v25 = v121;
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v101, v102, "Failed to populate preview image: %s", v103, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        goto LABEL_80;
      }
    }
    else
    {
      if (*(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10) > 1uLL)
      {
LABEL_45:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = sub_10025334C(0, v27[2] + 1, 1, v27);
        }
        unint64_t v52 = v27[2];
        unint64_t v51 = v27[3];
        if (v52 >= v51 >> 1) {
          uint64_t v27 = sub_10025334C((void *)(v51 > 1), v52 + 1, 1, v27);
        }
        v27[2] = v52 + 1;
        v27[v52 + 4] = v49;
        v133 = v27;
        id v53 = v43;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_54;
      }
      sub_1005A44E0(0, 0, v49);
      id v54 = v43;
    }
    sub_1005A41E4(0, 0, (uint64_t)v43);
LABEL_54:

    goto LABEL_55;
  }
  uint64_t v23 = v125;
  unint64_t v122 = v125 >> 62;
  if (v125 >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v25 = v121;
    if (v24) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
  uint64_t v24 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v25 = v121;
  if (!v24)
  {
LABEL_41:
    swift_bridgeObjectRelease_n();
    uint64_t v27 = _swiftEmptyArrayStorage;
    if (!v25) {
      goto LABEL_55;
    }
    goto LABEL_42;
  }
LABEL_10:
  unint64_t v124 = v23 & 0xC000000000000001;
  uint64_t v26 = v23 & 0xFFFFFFFFFFFFFF8;
  uint64_t v118 = v23 & 0xFFFFFFFFFFFFFF8;
  if (v23 < 0) {
    uint64_t v26 = v23;
  }
  uint64_t v117 = v26;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v28 = 4;
  v123 = (char *)&type metadata for Any + 8;
  do
  {
    if (v124) {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v29 = *(id *)(v23 + 8 * v28);
    }
    uint64_t v30 = v29;
    uint64_t v31 = v28 - 3;
    if (__OFADD__(v28 - 4, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (![v126 userResponse])
    {
      if (v122)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v42 == 1)
        {
LABEL_33:
          id result = [v30 singleItemLocalizedTitle];
          uint64_t v33 = result;
          if (!result) {
            goto LABEL_85;
          }
          goto LABEL_19;
        }
      }
      else if (*(void *)(v118 + 16) == 1)
      {
        goto LABEL_33;
      }
    }
    id result = [v30 localizedTitle];
    uint64_t v33 = result;
    if (!result)
    {
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
LABEL_19:
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v34 = objc_allocWithZone((Class)SBSMutableUserNotificationButtonDefinition);
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v36 = [v34 initWithTitle:v35];

    if (!v27[2]) {
      [v36 setIsPreferredButton:1];
    }
    id v37 = [v36 build];
    uint64_t v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v27 = sub_10025334C(0, v27[2] + 1, 1, v27);
    }
    unint64_t v40 = v27[2];
    unint64_t v39 = v27[3];
    if (v40 >= v39 >> 1) {
      uint64_t v27 = sub_10025334C((void *)(v39 > 1), v40 + 1, 1, v27);
    }
    v27[2] = v40 + 1;
    v27[v40 + 4] = v38;
    id v41 = v30;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    ++v28;
    uint64_t v23 = v125;
  }
  while (v31 != v24);
  swift_bridgeObjectRelease_n();
  v133 = v27;
  uint64_t v25 = v121;
  if (v121) {
    goto LABEL_42;
  }
LABEL_55:
  sub_10000A844((uint64_t *)&unk_10097D2B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007706B0;
  id result = (id)kCFUserNotificationAlertTopMostKey;
  if (!kCFUserNotificationAlertTopMostKey)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v56;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  id result = (id)SBUserNotificationDontDismissOnUnlock;
  if (!SBUserNotificationDontDismissOnUnlock)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v57;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(unsigned char *)(inited + 96) = 1;
  id result = (id)SBUserNotificationDismissOnLock;
  if (!SBUserNotificationDismissOnLock)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v58;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 0;
  id result = (id)SBUserNotificationAllowLockscreenDismissalKey;
  if (!SBUserNotificationAllowLockscreenDismissalKey)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v59;
  *(unsigned char *)(inited + 192) = 0;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(void *)(inited + 224) = 0xD00000000000001DLL;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 232) = 0x80000001007C0700;
  *(void *)(inited + 240) = 0xD000000000000020;
  *(void *)(inited + 248) = 0x80000001007C0720;
  unint64_t v60 = sub_100245A7C(inited);
  id result = (id)SBSUserNotificationButtonDefinitionsKey;
  if (!SBSUserNotificationButtonDefinitionsKey)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v63 = v62;
  uint64_t v64 = v133;
  v130 = (void *)sub_10000A844(&qword_100977F50);
  *(void *)&long long v129 = v64;
  sub_100249444(&v129, v128);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v127 = v60;
  uint64_t v131 = 0x8000000000000000;
  sub_100591338(v128, v61, v63, isUniquelyReferenced_nonNull_native);
  uint64_t v131 = v127;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v66 = String._bridgeToObjectiveC()();
  id v67 = [self bundleWithIdentifier:v66];

  if (!v67)
  {
    uint64_t v75 = (uint64_t)v116;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v119 + 56))(v116, 1, 1, v120);
    goto LABEL_66;
  }
  NSString v68 = String._bridgeToObjectiveC()();
  NSString v69 = String._bridgeToObjectiveC()();
  id v70 = [v67 URLForResource:v68 withExtension:v69];

  if (v70)
  {
    uint64_t v71 = (uint64_t)v112;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v72 = 0;
    uint64_t v73 = v120;
  }
  else
  {
    uint64_t v72 = 1;
    uint64_t v73 = v120;
    uint64_t v71 = (uint64_t)v112;
  }
  v74 = v113;
  uint64_t v75 = (uint64_t)v116;
  uint64_t v76 = v119;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 56))(v71, v72, 1, v73);
  sub_1003D2B28(v71, v75);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v75, 1, v73) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v74, v75, v73);
    id result = (id)SBUserNotificationIconImageAssetCatalogPathKey;
    if (SBUserNotificationIconImageAssetCatalogPathKey)
    {
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v83 = v82;
      uint64_t v84 = URL.path.getter();
      v130 = &type metadata for String;
      *(void *)&long long v129 = v84;
      *((void *)&v129 + 1) = v85;
      sub_100249444(&v129, v128);
      uint64_t v86 = v131;
      char v87 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v127 = v86;
      uint64_t v131 = 0x8000000000000000;
      sub_100591338(v128, v81, v83, v87);
      uint64_t v131 = v127;
      swift_bridgeObjectRelease();
      id result = (id)swift_bridgeObjectRelease();
      if (SBUserNotificationIconImageAssetCatalogImageKey)
      {
        swift_bridgeObjectRelease();
        uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v90 = v89;
        v130 = &type metadata for String;
        *(void *)&long long v129 = 0x706F7244726941;
        *((void *)&v129 + 1) = 0xE700000000000000;
        sub_100249444(&v129, v128);
        uint64_t v91 = v131;
        char v92 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v127 = v91;
        uint64_t v131 = 0x8000000000000000;
        sub_100591338(v128, v88, v90, v92);
        uint64_t v131 = v127;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v119 + 8))(v74, v120);
        goto LABEL_74;
      }
      goto LABEL_93;
    }
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    return result;
  }
LABEL_66:
  swift_bridgeObjectRelease();
  sub_10000A7E8(v75, (uint64_t *)&unk_10096AC10);
  if (qword_100969F18 != -1) {
    swift_once();
  }
  uint64_t v77 = type metadata accessor for Logger();
  sub_10000B47C(v77, (uint64_t)qword_100977DF8);
  v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Could not find assets catalog.", v80, 2u);
    swift_slowDealloc();
  }

LABEL_74:
  id v93 = [v126 metaData];
  id v94 = [v93 contactIdentifier];

  if (v94)
  {
    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v97 = v96;

    v130 = &type metadata for String;
    *(void *)&long long v129 = v95;
    *((void *)&v129 + 1) = v97;
    sub_100249444(&v129, v128);
    uint64_t v98 = v131;
    char v99 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v127 = v98;
    sub_100591338(v128, 0xD000000000000023, 0x80000001007C0750, v99);
    uint64_t v131 = v127;
    swift_bridgeObjectRelease();
  }
  sub_10050682C((int)&v131, v126, v114 & 1);
LABEL_80:
  sub_10039E870(v131);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v107 = v115;
  [v115 setAdditionalInfo:isa];

  return v107;
}

void sub_100507D00(uint64_t a1)
{
  sub_100505C58(a1, v1);
}

uint64_t sub_100507D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100507D18()
{
  return swift_release();
}

uint64_t sub_100507D20()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100507D60(uint64_t a1)
{
  sub_100505F90(a1, *(void *)(v1 + 16));
}

uint64_t Optional.tryAuthUnwrap(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  id v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v10, v11);
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a4, v10, v12);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  sub_10024D280();
  swift_allocError();
  *(_DWORD *)uint64_t v14 = 10;
  *(void *)(v14 + 8) = a1;
  *(void *)(v14 + 16) = a2;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t sub_100507F28(uint64_t a1, int a2)
{
  int v50 = a2;
  double v49 = *(double *)&a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v61 = *(void *)(v4 - 8);
  uint64_t v62 = v4;
  __chkstk_darwin(v4);
  uint64_t v59 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for DispatchQoS();
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v57 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for DispatchTimeInterval();
  uint64_t v51 = *(void *)(v56 - 8);
  uint64_t v7 = __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v54 = (char *)&v45 - v9;
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)&v45 - v14;
  uint64_t v16 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *uint64_t v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v48 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_8;
  }
  id v47 = v2;
  uint64_t v46 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer;
  if (*(void *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer])
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
  if (v50) {
    double v3 = 15.0;
  }
  else {
    double v3 = v49;
  }
  sub_10042084C();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10050AE50(&qword_10096D4F8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_10000A844(&qword_10096D500);
  sub_1002AE308(&qword_10096D508, &qword_10096D500);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v25 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  swift_getObjectType();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v26 = v53;
  uint64_t v52 = *(void *)(v52 + 8);
  ((void (*)(char *, uint64_t))v52)(v13, v53);
  uint64_t v27 = v51;
  uint64_t v28 = v54;
  uint64_t v29 = v56;
  (*(void (**)(char *, void, uint64_t))(v51 + 104))(v54, enum case for DispatchTimeInterval.never(_:), v56);
  uint64_t v30 = v55;
  sub_1002C1FD8(v55);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v27 + 8);
  v31(v30, v29);
  v31(v28, v29);
  uint64_t v32 = v25;
  ((void (*)(char *, uint64_t))v52)(v15, v26);
  uint64_t v33 = swift_allocObject();
  uint64_t v19 = v47;
  swift_unknownObjectWeakInit();
  aBlock[4] = (uint64_t)sub_10050AE30;
  aBlock[5] = v33;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100296520;
  aBlock[3] = (uint64_t)&unk_1008DE420;
  id v34 = _Block_copy(aBlock);
  swift_retain();
  NSString v35 = v57;
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ();
  id v36 = v59;
  sub_1005BD8F8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v36, v62);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v60);
  swift_release();
  swift_release();
  *(void *)&v19[v46] = v32;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (qword_100969F20 != -1) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v37 = type metadata accessor for Logger();
  sub_10000B47C(v37, (uint64_t)qword_100977F70);
  uint64_t v38 = v19;
  unint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136315394;
    type metadata accessor for UUID();
    sub_10050AE50((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v63 = sub_100254634(v42, v43, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2048;
    uint64_t v63 = *(void *)&v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Starting response timer for %s to fire in %f sec", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  OS_dispatch_source.activate()();
  return swift_unknownObjectRelease();
}

uint64_t sub_100508854()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v1 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer;
  if (!*(void *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer]) {
    return result;
  }
  uint64_t v10 = qword_100969F20;
  swift_unknownObjectRetain();
  if (v10 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000B47C(v11, (uint64_t)qword_100977F70);
  uint64_t v12 = v2;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v19[1] = v16;
    *(_DWORD *)id v15 = 136315138;
    uint64_t v20 = v16;
    v19[0] = v15 + 4;
    type metadata accessor for UUID();
    sub_10050AE50((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v19[2] = sub_100254634(v17, v18, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Canceling response timer for %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  *(void *)&v2[v1] = 0;
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_100508B74(unint64_t a1)
{
  if (a1 > 0xB) {
    return 3;
  }
  else {
    return byte_10077B53A[a1];
  }
}

uint64_t sub_100508B94()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (qword_100969F20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000B47C(v7, (uint64_t)qword_100977F70);
  id v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v17 = v12;
    type metadata accessor for UUID();
    sub_10050AE50((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = sub_100254634(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidating %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return sub_100508854();
}

uint64_t sub_100508E74(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xA) {
    return 0;
  }
  else {
    return qword_10077B548[a1 - 1];
  }
}

uint64_t sub_100508E98(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = sub_10000A844(&qword_100978080);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A844(&qword_100978088);
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A844(&qword_100978090);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10026BB6C(a1, a1[3]);
  sub_10050ACFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    sub_10050AD50();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    sub_10050ADA4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t sub_100509148()
{
  if (*v0) {
    return 7955787;
  }
  else {
    return 1801678668;
  }
}

uint64_t sub_100509174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10050A7C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10050919C(uint64_t a1)
{
  unint64_t v2 = sub_10050ACFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005091D8(uint64_t a1)
{
  unint64_t v2 = sub_10050ACFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100509214()
{
  return 0;
}

uint64_t sub_100509220@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_100509250(uint64_t a1)
{
  unint64_t v2 = sub_10050AD50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10050928C(uint64_t a1)
{
  unint64_t v2 = sub_10050AD50();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005092C8(uint64_t a1)
{
  unint64_t v2 = sub_10050ADA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100509304(uint64_t a1)
{
  unint64_t v2 = sub_10050ADA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100509340@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10050A898(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_100509370(void *a1)
{
  return sub_100508E98(a1, *v1);
}

uint64_t sub_10050938C()
{
  return 0;
}

Swift::Int sub_1005095A0(unint64_t a1)
{
  if (a1 > 0xE) {
    return sub_1002CC2E4((uint64_t)&off_1008D2F28);
  }
  else {
    return sub_1002CC2E4((uint64_t)off_1008DE5A8[a1]);
  }
}

int64_t sub_1005095C4(uint64_t a1)
{
  return sub_1005095F4(a1, (uint64_t (*)(void))sub_1005095A0);
}

int64_t sub_1005095DC(uint64_t a1)
{
  return sub_1005095F4(a1, (uint64_t (*)(void))sub_100509790);
}

int64_t sub_1005095F4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    sub_1002555A0(0, v3, 0);
    int64_t result = sub_1002E60B8(v2);
    int64_t v5 = result;
    int v7 = v6;
    char v9 = v8 & 1;
    while ((v9 & 1) == 0)
    {
      if (v5 < 0 || v5 >= 1 << *(unsigned char *)(v2 + 32))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        break;
      }
      if (((*(void *)(v2 + 56 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(v2 + 36) != v7) {
        goto LABEL_16;
      }
      uint64_t v10 = sub_1000D30C0(*(unsigned char *)(*(void *)(v2 + 48) + v5));
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1002555A0(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      _swiftEmptyArrayStorage[v12 + 4] = v10;
      int64_t result = sub_10050A6C4(v5, v7, 0, v2);
      int64_t v5 = result;
      int v7 = v13;
      char v9 = v14 & 1;
      if (!--v3)
      {
        sub_10050A7A8(result, v13, v9);
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v15 = sub_100259754((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

Swift::Int sub_100509790(unint64_t a1)
{
  if (a1 > 0xE) {
    return sub_1002CC2E4((uint64_t)&off_1008D2CD0);
  }
  else {
    return sub_1002CC2E4((uint64_t)off_1008DE620[a1]);
  }
}

uint64_t sub_1005097B4(unint64_t a1)
{
  Swift::UInt8 v2 = SFDeviceClassCodeGet();
  Swift::Int v3 = sub_1005095A0(a1);
  BOOL v4 = sub_10057C25C(8u, v3);
  swift_bridgeObjectRelease();
  if (v4)
  {
    if (!SFDeviceIsRealityDevice()) {
      goto LABEL_3;
    }
  }
  else
  {
    Swift::Int v6 = sub_1005095A0(a1);
    BOOL v7 = sub_10057C25C(v2, v6);
    swift_bridgeObjectRelease();
    if (!v7)
    {
LABEL_3:
      if (a1 >= 0xF) {
        return 0;
      }
      else {
        return (0x658Eu >> a1) & 1;
      }
    }
  }
  if (a1 >= 0xF) {
    return 1;
  }
  else {
    return (0x1A71u >> a1) & 1;
  }
}

unint64_t sub_10050986C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10050A7B4(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_1005098A0(void *a1@<X8>)
{
  *a1 = &off_1008D28D8;
}

uint64_t sub_1005098B0()
{
  return sub_10050938C();
}

unint64_t static SFAuthenticationError._nsErrorDomain.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1005098D4(uint64_t a1)
{
  uint64_t v2 = sub_10050AE50(&qword_10096A9E0, type metadata accessor for SFAuthenticationError);

  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_100509940(uint64_t a1)
{
  uint64_t v2 = sub_10050AE50(&qword_10096A9E0, type metadata accessor for SFAuthenticationError);

  return _BridgedNSError._code.getter(a1, v2);
}

uint64_t sub_1005099AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10050AE50(&qword_10096A9E0, type metadata accessor for SFAuthenticationError);

  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

Swift::Int sub_100509A30()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 2006);
  return Hasher._finalize()();
}

void sub_100509A78()
{
  Hasher._combine(_:)(*v0 + 2006);
}

Swift::Int sub_100509AA8()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 2006);
  return Hasher._finalize()();
}

uint64_t sub_100509AEC@<X0>(int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10050ACE8(*a1);
  *a2 = result;
  return result;
}

void sub_100509B18(_DWORD *a1@<X8>)
{
  *a1 = *v1 + 2006;
}

void sub_100509B28(void *a1@<X8>)
{
  *a1 = &off_1008D2970;
}

unint64_t sub_100509B38(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
    case 8:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000024;
      break;
    case 6:
      unint64_t result = 0xD000000000000024;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0xD000000000000022;
      break;
    case 10:
      unint64_t result = 0xD000000000000025;
      break;
    case 11:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100509C6C()
{
  return sub_100509B38(*v0);
}

uint64_t sub_100509C74()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100977F70);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100977F70);
  if (qword_100969CD0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_1009946C0);
  Swift::Int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100509D3C()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    (*(void (**)(void))((swift_isaMask & *Strong) + 0x100))();
  }
}

id sub_100509DF8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SDAuthenticationSession();
  return [super dealloc];
}

uint64_t sub_100509EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100509FFC(a1, a2, a3, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate, &qword_100978040);
}

uint64_t sub_100509F04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID;
  uint64_t v4 = type metadata accessor for UUID();
  int64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100509F7C()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type);
}

uint64_t sub_100509F90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice;
  swift_beginAccess();
  return sub_10050A65C(v3, a1);
}

uint64_t sub_100509FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100509FFC(a1, a2, a3, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice, &qword_10097BB50);
}

uint64_t sub_100509FFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = *v5 + *a4;
  swift_beginAccess();
  sub_10026B410(a1, v8, a5);
  return swift_endAccess();
}

uint64_t sub_10050A068()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xE8))();
}

uint64_t SFAuthenticationError.description.getter()
{
  id v0 = (id)SFAuthenticationErrorToString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t sub_10050A108()
{
  return sub_10050AE50(&qword_100977F90, type metadata accessor for SFAuthenticationError);
}

uint64_t sub_10050A150()
{
  return sub_10050AE50(&qword_100977F98, type metadata accessor for SFAuthenticationError);
}

uint64_t sub_10050A198()
{
  return sub_10050AE50(&qword_100977FA0, type metadata accessor for SFAuthenticationError);
}

unint64_t sub_10050A1E4()
{
  unint64_t result = qword_100977FA8;
  if (!qword_100977FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100977FA8);
  }
  return result;
}

uint64_t sub_10050A238()
{
  return sub_10050AE50(&qword_100977FB0, type metadata accessor for SFAuthenticationError);
}

uint64_t sub_10050A280()
{
  id v0 = (id)SFAuthenticationErrorToString();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t sub_10050A2D0()
{
  return type metadata accessor for SDAuthenticationSession();
}

uint64_t type metadata accessor for SDAuthenticationSession()
{
  uint64_t result = qword_100978008;
  if (!qword_100978008) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10050A324()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDAuthenticationType()
{
  return &type metadata for SDAuthenticationType;
}

ValueMetadata *type metadata accessor for SDAuthenticationRole()
{
  return &type metadata for SDAuthenticationRole;
}

uint64_t destroy for SFAuthenticationErrorMessage()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s16DaemoniOSLibrary28SFAuthenticationErrorMessageVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SFAuthenticationErrorMessage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SFAuthenticationErrorMessage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SFAuthenticationErrorMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SFAuthenticationErrorMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SFAuthenticationErrorMessage()
{
  return &type metadata for SFAuthenticationErrorMessage;
}

unint64_t sub_10050A574()
{
  unint64_t result = qword_100978018;
  if (!qword_100978018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978018);
  }
  return result;
}

uint64_t sub_10050A5C8()
{
  return sub_1002AE308(&qword_100978020, &qword_100978028);
}

unint64_t sub_10050A608()
{
  unint64_t result = qword_100978030;
  if (!qword_100978030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978030);
  }
  return result;
}

uint64_t sub_10050A65C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_10097BB50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

int64_t sub_10050A6C4(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10050A7A8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10050A7B4(unint64_t result)
{
  if (result > 0xE) {
    return 0;
  }
  return result;
}

uint64_t sub_10050A7C4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1801678668 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7955787 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10050A898(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_100978048);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A844(&qword_100978050);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A844(&qword_100978058);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10026BB6C((void *)a1, *(void *)(a1 + 24));
  sub_10050ACFC();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    int v18 = v17;
    sub_10000A844(&qword_100978068);
    *int v18 = &type metadata for SDAuthenticationRole;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    sub_10024D338(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    sub_10050AD50();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    sub_10050ADA4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  sub_10024D338(v26);
  return a1;
}

uint64_t sub_10050ACE8(int a1)
{
  if ((a1 - 2006) >= 0xC) {
    return 12;
  }
  else {
    return (a1 - 2006);
  }
}

unint64_t sub_10050ACFC()
{
  unint64_t result = qword_100978060;
  if (!qword_100978060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978060);
  }
  return result;
}

unint64_t sub_10050AD50()
{
  unint64_t result = qword_100978070;
  if (!qword_100978070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978070);
  }
  return result;
}

unint64_t sub_10050ADA4()
{
  unint64_t result = qword_100978078;
  if (!qword_100978078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978078);
  }
  return result;
}

uint64_t sub_10050ADF8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10050AE30()
{
}

uint64_t sub_10050AE38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10050AE48()
{
  return swift_release();
}

uint64_t sub_10050AE50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s16DaemoniOSLibrary20SDAuthenticationRoleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10050AF64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDAuthenticationRole.CodingKeys()
{
  return &type metadata for SDAuthenticationRole.CodingKeys;
}

ValueMetadata *type metadata accessor for SDAuthenticationRole.LockCodingKeys()
{
  return &type metadata for SDAuthenticationRole.LockCodingKeys;
}

ValueMetadata *type metadata accessor for SDAuthenticationRole.KeyCodingKeys()
{
  return &type metadata for SDAuthenticationRole.KeyCodingKeys;
}

uint64_t getEnumTagSinglePayload for SDAuthenticationTransportMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SDAuthenticationTransportMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10050B118);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDAuthenticationTransportMessageType()
{
  return &type metadata for SDAuthenticationTransportMessageType;
}

uint64_t sub_10050B150()
{
  return sub_1002AE308(&qword_100978098, &qword_1009780A0);
}

unint64_t sub_10050B190()
{
  unint64_t result = qword_1009780A8;
  if (!qword_1009780A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009780A8);
  }
  return result;
}

unint64_t sub_10050B1E8()
{
  unint64_t result = qword_1009780B0;
  if (!qword_1009780B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009780B0);
  }
  return result;
}

unint64_t sub_10050B240()
{
  unint64_t result = qword_1009780B8;
  if (!qword_1009780B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009780B8);
  }
  return result;
}

unint64_t sub_10050B298()
{
  unint64_t result = qword_1009780C0;
  if (!qword_1009780C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009780C0);
  }
  return result;
}

unint64_t sub_10050B2F0()
{
  unint64_t result = qword_1009780C8;
  if (!qword_1009780C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009780C8);
  }
  return result;
}

unint64_t sub_10050B348()
{
  unint64_t result = qword_1009780D0;
  if (!qword_1009780D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009780D0);
  }
  return result;
}

unint64_t sub_10050B3A0()
{
  unint64_t result = qword_1009780D8;
  if (!qword_1009780D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009780D8);
  }
  return result;
}

unint64_t sub_10050B3F8()
{
  unint64_t result = qword_1009780E0;
  if (!qword_1009780E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009780E0);
  }
  return result;
}

uint64_t sub_10050B45C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v4 = static AirDropActor.shared;
  v2[7] = static AirDropActor.shared;
  return _swift_task_switch(sub_10050B558, v4, 0);
}

uint64_t sub_10050B558()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10050B5F4;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_10040EE58(v2);
}

uint64_t sub_10050B5F4(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(unsigned char *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10050B70C, v2, 0);
}

uint64_t sub_10050B70C()
{
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    uint64_t v1 = SFAirDropReceive.AskRequest.files.getter();
    uint64_t v2 = *(void *)(v1 + 16);
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      uint64_t v12 = 1;
      goto LABEL_9;
    }
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v5 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
    uint64_t v4 = v3 + 16;
    uint64_t v15 = v5;
    unint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 64));
    uint64_t v7 = *(void *)(v4 + 56);
    while (1)
    {
      uint64_t v8 = *(void *)(v0 + 48);
      uint64_t v9 = *(void *)(v0 + 32);
      v15(v8, v6, v9);
      SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v11 = SFIsPDF();

      (*(void (**)(uint64_t, uint64_t))(v4 - 8))(v8, v9);
      if ((v11 & 1) == 0) {
        break;
      }
      v6 += v7;
      if (!--v2) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = 0;
LABEL_9:
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v13(v12);
}

uint64_t sub_10050B860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for SFPlatform();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  NSString v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v3 + 16);
  if (SFFilesAppAvailable()
    && (static SFPlatform.visionOS.getter(),
        char v12 = static SFPlatform.isPlatform(_:)(),
        uint64_t v13 = *(void (**)(char *, uint64_t))(v8 + 8),
        v13(v10, v7),
        (v12 & 1) == 0))
  {
    static SFPlatform.macOS.getter();
    char v16 = static SFPlatform.isPlatform(_:)();
    v13(v10, v7);
    if (v16) {
      char v14 = 1;
    }
    else {
      char v14 = *(unsigned char *)(v11 + 24) ^ 1;
    }
  }
  else
  {
    char v14 = 0;
  }
  type metadata accessor for SDAirDropContentHandlerUtilities();
  return sub_1003A07DC(a1, a2, v14 & 1, a3);
}

uint64_t type metadata accessor for SDAirDropContentHandlerPDFs()
{
  return self;
}

uint64_t sub_10050B9E8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SDAirDropContentHandlerPDFs();
  uint64_t v2 = swift_allocObject();
  type metadata accessor for SDAirDropContentHandlerGenericFiles();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(v2 + 16) = result;
  *a1 = v2;
  return result;
}

uint64_t sub_10050BA40(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10024DEC4;
  return sub_10050B45C(a1);
}

uint64_t sub_10050BADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_10050B860(a1, a2, a3);
}

void sub_10050BB00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_10050BB28(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v2 = static AirDropActor.shared;
  return _swift_task_switch(sub_10050BBC4, v2, 0);
}

uint64_t sub_10050BBC4()
{
  uint64_t v1 = static AirDropActor.shared;
  *(void *)(v0 + 24) = static AirDropActor.shared;
  return _swift_task_switch(sub_10040FCD8, v1, 0);
}

uint64_t sub_10050BBEC(uint64_t a1, uint64_t a2)
{
  return sub_10050BE84(a2);
}

uint64_t sub_10050BBF4@<X0>(uint64_t a1@<X8>)
{
  return sub_10040FF5C(a1);
}

void sub_10050BC1C(uint64_t a1, char a2)
{
  unint64_t v4 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  if (v4 <= 1)
  {
    sub_1003AB7A8(a1, a2 & 1);
  }
  else
  {
    sub_10000A844(&qword_10096D760);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
    *(void *)(inited + 32) = 4605008;
    *(void *)(inited + 40) = 0xE300000000000000;
    *(void *)(inited + 48) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = 95;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = 4605008;
    v7._object = (void *)0xE300000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x4C4152554C505FLL;
    v8._object = (void *)0xE700000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    if (a2)
    {
      v9._countAndFlagsBits = 0x4C4154495041435FLL;
      v9._object = (void *)0xEC00000044455A49;
      String.append(_:)(v9);
    }
    v10._countAndFlagsBits = 0x545845545FLL;
    v10._object = (void *)0xE500000000000000;
    String.append(_:)(v10);
    swift_setDeallocating();
    sub_10000A844((uint64_t *)&unk_100977CB0);
    swift_arrayDestroy();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v12 = (id)SFLocalizedStringForKey();

    if (v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000A844((uint64_t *)&unk_10096EE60);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_10076E7A0;
      *(void *)(v13 + 56) = &type metadata for Int;
      *(void *)(v13 + 64) = &protocol witness table for Int;
      *(void *)(v13 + 32) = v4;
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10050BE84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  Swift::String v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v17 - v7;
  char v9 = SFFilesAppAvailable();
  Swift::String v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) == 0)
  {
    v10(v6, (uint64_t)v8, v2);
    int v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
    if (v11 == enum case for SFAirDropReceive.ItemDestination.customApp(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 96))(v6, v2);
      uint64_t v12 = *(void *)v6;
      uint64_t v13 = *((void *)v6 + 1);
      if (v12 != 0xD000000000000034 || v13 != 0x80000001007B7D20)
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        char v14 = v16 ^ 1;
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
    else if (v11 != enum case for SFAirDropReceive.ItemDestination.noItem(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      char v14 = 1;
      goto LABEL_8;
    }
  }
  char v14 = 0;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v14 & 1;
}

void sub_10050C0A8()
{
  uint64_t v1 = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_listener;
  if (!*(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_listener])
  {
    uint64_t v2 = v0;
    if (qword_100969F28 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000B47C(v3, (uint64_t)qword_1009781E0);
    uint64_t v4 = v0;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v17 = v8;
      type metadata accessor for UUID();
      sub_10000BB30((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_100254634(v9, v10, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Starting AirDrop Near Field Server for transaction %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_100666978(*(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_localIdentity]);
    int v11 = NWParameters.nw.getter();
    nw_listener_t v12 = nw_listener_create(v11);
    swift_unknownObjectRelease();
    if (v12)
    {
      type metadata accessor for NWListener();
      swift_unknownObjectRetain();
      uint64_t v13 = NWListener.__allocating_init(_:)();
      *(void *)&v2[v1] = v13;
      swift_retain();
      swift_release();
      *(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_networkListener] = v12;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v4;
      *(void *)(v14 + 24) = v13;
      uint64_t v15 = v4;
      swift_retain();
      NWListener.stateUpdateHandler.setter();
      *(void *)(swift_allocObject() + 16) = v15;
      char v16 = v15;
      NWListener.newConnectionHandler.setter();
      NWListener.start(queue:)();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

uint64_t sub_10050C434()
{
  return sub_10050C45C(&OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBonjourServer_serverType, &OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBonjourServer_connections);
}

uint64_t sub_10050C448()
{
  return sub_10050C45C(&OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropApplicationServiceServer_serverType, &OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropApplicationServiceServer_connections);
}

uint64_t sub_10050C45C(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for NWConnection.State();
  unint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int v11 = (char *)&v31 - v10;
  if (qword_100969D10 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000B47C(v12, (uint64_t)qword_1009709E8);
  uint64_t v13 = v2;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v33 = a2;
    unint64_t v34 = v6;
    char v16 = (uint8_t *)swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)char v16 = 136315138;
    unint64_t v17 = 0xEE00726576726553;
    uint64_t v18 = 0x2072756F6A6E6F42;
    if (v13[*a1] != 1)
    {
      uint64_t v18 = 0x656946207261654ELL;
      unint64_t v17 = 0xEA0000000000646CLL;
    }
    if (v13[*a1]) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0xD00000000000001ALL;
    }
    if (v13[*a1]) {
      unint64_t v20 = v17;
    }
    else {
      unint64_t v20 = 0x80000001007BA550;
    }
    NSString v35 = (void *)sub_100254634(v19, v20, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Cleaning up connections for %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v33;
    unint64_t v6 = v34;
  }
  else
  {
  }
  uint64_t v21 = (unint64_t *)&v13[*a2];
  swift_beginAccess();
  unint64_t v34 = *v21;
  unint64_t v22 = v34;
  NSString v35 = _swiftEmptyArrayStorage;
  if (!(v34 >> 62))
  {
    uint64_t v23 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v23) {
      goto LABEL_16;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t v30 = _swiftEmptyArrayStorage;
LABEL_28:
    unint64_t *v21 = (unint64_t)v30;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  unint64_t v22 = v34;
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v23 = result;
  if (!result) {
    goto LABEL_27;
  }
LABEL_16:
  if (v23 >= 1)
  {
    uint64_t v33 = (void *)v23;
    uint64_t v31 = v21;
    uint64_t v25 = 0;
    unint64_t v32 = v22 & 0xC000000000000001;
    uint64_t v26 = enum case for NWConnection.State.cancelled(_:);
    char v27 = (void (**)(char *, uint64_t))(v6 + 8);
    do
    {
      if (v32) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      NWConnection.state.getter();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 104))(v9, v26, v5);
      sub_10000BB30(&qword_100978290, (void (*)(uint64_t))&type metadata accessor for NWConnection.State);
      char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v29 = *v27;
      (*v27)(v9, v5);
      v29(v11, v5);
      if (v28)
      {
        swift_release();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      uint64_t v25 = (void *)((char *)v25 + 1);
    }
    while (v33 != v25);
    swift_bridgeObjectRelease();
    uint64_t v30 = v35;
    uint64_t v21 = v31;
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t sub_10050C900()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_1009781E0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_1009781E0);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10050C9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for NWListener.State();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = 0;
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = v12;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  *(void *)&v14[(v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8] = a3;
  swift_retain();
  sub_10028CFD4((uint64_t)v10, (uint64_t)&unk_1009782A0, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_10050CBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a1;
  v6[6] = a4;
  return _swift_task_switch(sub_10050CC00, 0, 0);
}

uint64_t sub_10050CC00()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 72) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10050CD00;
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v3 = *(void *)(v0 + 64);
    return sub_10050CE14(v4, v3);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_10050CD00()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 72);
  swift_task_dealloc();

  return _swift_task_switch(sub_1003532B8, 0, 0);
}

uint64_t sub_10050CE14(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for NWError();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NWListener.State();
  v3[16] = v5;
  v3[17] = *(void *)(v5 - 8);
  v3[18] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  v3[19] = static AirDropActor.shared;
  return _swift_task_switch(sub_10050CF98, v6, 0);
}

uint64_t sub_10050CF98()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[16];
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 16))(v2, v0[7], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(v2, v3);
  if (v4 == enum case for NWListener.State.waiting(_:))
  {
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[15];
    uint64_t v8 = v0[10];
    uint64_t v7 = v0[11];
    (*(void (**)(uint64_t, void))(v0[17] + 96))(v5, v0[16]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v6, v5, v8);
    if (qword_100969F28 != -1) {
      swift_once();
    }
    uint64_t v10 = v0[14];
    uint64_t v9 = v0[15];
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[11];
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B47C(v13, (uint64_t)qword_1009781E0);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    v14(v10, v9, v11);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[14];
    uint64_t v20 = v0[10];
    uint64_t v19 = v0[11];
    if (v17)
    {
      os_log_type_t type = v16;
      NSString v69 = v14;
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      id v70 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      sub_10000BB30(&qword_10096E020, (void (*)(uint64_t))&type metadata accessor for NWError);
      swift_allocError();
      v69(v22, v18, v20);
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      v0[6] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v70 = v23;
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v24(v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v15, type, "AirDrop Near Field server waiting with error %@", v21, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v24(v18, v20);
    }
    v24(v0[15], v0[10]);
    goto LABEL_40;
  }
  if (v4 == enum case for NWListener.State.failed(_:))
  {
    uint64_t v25 = v0[18];
    uint64_t v26 = v0[13];
    uint64_t v27 = v0[10];
    uint64_t v28 = v0[11];
    (*(void (**)(uint64_t, void))(v0[17] + 96))(v25, v0[16]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v26, v25, v27);
    if (qword_100969F28 != -1) {
      swift_once();
    }
    uint64_t v29 = v0[12];
    uint64_t v30 = v0[13];
    uint64_t v31 = v0[10];
    uint64_t v32 = v0[11];
    uint64_t v33 = type metadata accessor for Logger();
    sub_10000B47C(v33, (uint64_t)qword_1009781E0);
    unint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v34(v29, v30, v31);
    NSString v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v39 = v0[11];
    uint64_t v38 = v0[12];
    uint64_t v40 = v0[10];
    if (v37)
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 138412290;
      sub_10000BB30(&qword_10096E020, (void (*)(uint64_t))&type metadata accessor for NWError);
      swift_allocError();
      v34(v42, v38, v40);
      uint64_t v43 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v71 = v43;
      id v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v44(v38, v40);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "AirDrop Near Field server failed with error %@", v41, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v44(v0[12], v0[10]);
    }

    v0[21] = v44;
    NWListener.cancel()();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[22] = Strong;
    if (Strong)
    {
      uint64_t v51 = (void *)swift_task_alloc();
      v0[23] = v51;
      *uint64_t v51 = v0;
      v51[1] = sub_1003DD8E4;
      uint64_t v52 = v0[13];
      return sub_1003497CC(0, v52);
    }
    ((void (*)(void, void))v0[21])(v0[13], v0[10]);
LABEL_40:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v61 = (uint64_t (*)(void))v0[1];
    return v61();
  }
  if (v4 == enum case for NWListener.State.setup(_:))
  {
    if (qword_100969F28 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_10000B47C(v45, (uint64_t)qword_1009781E0);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v46, v47)) {
      goto LABEL_39;
    }
    id v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v48 = 0;
    double v49 = "AirDrop Near Field server setting up";
LABEL_38:
    _os_log_impl((void *)&_mh_execute_header, v46, v47, v49, v48, 2u);
    swift_slowDealloc();
LABEL_39:

    goto LABEL_40;
  }
  if (v4 != enum case for NWListener.State.ready(_:))
  {
    if (v4 != enum case for NWListener.State.cancelled(_:))
    {
      if (qword_100969F28 != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      sub_10000B47C(v62, (uint64_t)qword_1009781E0);
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        double v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v65 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Unknown AirDrop Near Field server state", v65, 2u);
        swift_slowDealloc();
      }
      uint64_t v67 = v0[17];
      uint64_t v66 = v0[18];
      uint64_t v68 = v0[16];

      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
      goto LABEL_40;
    }
    if (qword_100969F28 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_10000B47C(v60, (uint64_t)qword_1009781E0);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v46, v47)) {
      goto LABEL_39;
    }
    id v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v48 = 0;
    double v49 = "AirDrop Near Field server stopped";
    goto LABEL_38;
  }
  if (qword_100969F28 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_10000B47C(v54, (uint64_t)qword_1009781E0);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "AirDrop Near Field server ready", v57, 2u);
    swift_slowDealloc();
  }

  sub_10050E1BC();
  uint64_t v58 = swift_unknownObjectWeakLoadStrong();
  v0[20] = v58;
  if (!v58) {
    goto LABEL_40;
  }
  uint64_t v59 = static AirDropActor.shared;
  return _swift_task_switch(sub_1003DD7AC, v59, 0);
}

uint64_t sub_10050D9AC(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v6;
  v7[5] = a1;
  swift_retain();
  sub_10028CFD4((uint64_t)v4, (uint64_t)&unk_100978268, (uint64_t)v7);
  return swift_release();
}

uint64_t sub_10050DAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  return _swift_task_switch(sub_10050DAF8, 0, 0);
}

uint64_t sub_10050DAF8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    if (qword_100969B90 != -1) {
      swift_once();
    }
    uint64_t v2 = static AirDropActor.shared;
    return _swift_task_switch(sub_10050DBF8, v2, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

uint64_t sub_10050DBF8()
{
  uint64_t v1 = *(void **)(v0 + 64);
  sub_10050DC64(*(void *)(v0 + 56));

  return _swift_task_switch(sub_1002D1768, 0, 0);
}

uint64_t sub_10050DC64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10050C45C(&OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_serverType, &OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_connections);
  uint64_t v11 = (void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_connections);
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  uint64_t v12 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_transactionID;
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12, v4);
  uint64_t v15 = qword_100969B90;
  swift_retain();
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = static AirDropActor.shared;
  uint64_t v17 = sub_10000BB30((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = v16;
  *((void *)v19 + 3) = v17;
  *((void *)v19 + 4) = a1;
  *((void *)v19 + 5) = v14;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v19[v18], v7, v4);
  swift_retain();
  swift_release();
  sub_10028CFA8((uint64_t)v10, (uint64_t)&unk_100978280, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_10050DF84()
{
  if (qword_100969F28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_1009781E0);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v11 = v6;
    type metadata accessor for UUID();
    sub_10000BB30((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_100254634(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping AirDrop Near Field Server for transaction %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10035A454();
  uint64_t v9 = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_listener;
  if (*(void *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_listener])
  {
    swift_retain();
    NWListener.cancel()();
    swift_release();
  }
  *(void *)&v2[v9] = 0;
  return swift_release();
}

void sub_10050E1BC()
{
  if (*(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_networkListener])
  {
    uint64_t v1 = qword_100969F28;
    swift_unknownObjectRetain();
    if (v1 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B47C(v2, (uint64_t)qword_1009781E0);
    uint64_t v3 = v0;
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138412290;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = isa;

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Setting Near Field server advertised remote public keys to %@", v6, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    UUID.uuidString.getter();
    uint64_t v11 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    nw_endpoint_create_bonjour_service((const char *)(v11 + 32), "_asquic._udp", "local");
    swift_release();
    sub_10000A844(&qword_10096EE80);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10076E7A0;
    uint64_t v13 = *(void *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_remotePublicKey];
    unint64_t v14 = *(void *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_remotePublicKey + 8];
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v14;
    sub_10025ADCC(v13, v14);
    Class v15 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    nw_endpoint_set_public_keys();

    nw_array_create();
    sub_10017F05C();
    nw_listener_set_advertise_endpoints();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100969F28 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B47C(v8, (uint64_t)qword_1009781E0);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "No listener available to add advertised endpoints", v10, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10050E53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  v6[10] = type metadata accessor for SDAirDropServerConnection(0);
  v6[11] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  return _swift_task_switch(sub_10050E60C, v7, 0);
}

uint64_t sub_10050E60C()
{
  uint64_t v22 = v0;
  if (qword_100969F28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_1009781E0);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[7];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[5] = v5;
    type metadata accessor for NWConnection();
    swift_retain();
    uint64_t v7 = String.init<A>(describing:)();
    v0[6] = sub_100254634(v7, v8, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AirDrop Near Field server received connection: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong && (v10 = (void *)Strong, uint64_t v11 = swift_unknownObjectWeakLoadStrong(), v0[12] = v11, v10, v11))
  {
    uint64_t v12 = (void *)v0[11];
    uint64_t v13 = v0[9];
    uint64_t v14 = v0[7];
    Class v15 = (char *)v12 + *(int *)(sub_10000A844(&qword_100970300) + 48);
    *uint64_t v12 = v14;
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v15, v13, v16);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    v0[13] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10050E978;
    uint64_t v18 = v0[11];
    return sub_1003448AC(v18);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_10050E978()
{
  uint64_t v1 = *(void *)(*v0 + 88);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  sub_10035B15C(v1);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_10050EBF8()
{
  return type metadata accessor for SDAirDropNearFieldServer();
}

uint64_t type metadata accessor for SDAirDropNearFieldServer()
{
  uint64_t result = qword_100978250;
  if (!qword_100978250) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10050EC4C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10050ED2C()
{
  return swift_retain();
}

uint64_t sub_10050ED3C()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_serverType);
}

id sub_10050ED50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v34 = a6;
  unint64_t v35 = a7;
  uint64_t v32 = a3;
  uint64_t v33 = a5;
  uint64_t v36 = a4;
  uint64_t v30 = a2;
  uint64_t v31 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_listener] = 0;
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_networkListener] = 0;
  v7[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_serverType] = 2;
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_connections] = &_swiftEmptyArrayStorage;
  uint64_t v13 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_delegate];
  *((void *)v13 + 1) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v28 = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_queue;
  unint64_t v27 = sub_1002B62F0();
  uint64_t v14 = v7;
  static DispatchQoS.default.getter();
  uint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000BB30((unint64_t *)&unk_100974840, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A844((uint64_t *)&unk_10096A1B0);
  sub_1002477E4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v29);
  *(void *)&v7[v28] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *((void *)v13 + 1) = v30;
  swift_unknownObjectWeakAssign();
  Class v15 = &v14[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_transactionID];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v19 = v32;
  v18(v15, v32, v16);
  uint64_t v20 = v34;
  *(void *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_localIdentity] = v33;
  uint64_t v21 = (uint64_t *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_remotePublicKey];
  unint64_t v22 = v35;
  uint64_t v23 = v36;
  uint64_t *v21 = v20;
  v21[1] = v22;
  v18(&v14[OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropNearFieldServer_listenerUUID], v23, v16);
  swift_unknownObjectRetain();
  sub_10025ADCC(v20, v22);

  v38.receiver = v14;
  v38.super_class = ObjectType;
  id v24 = [super init];
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v25(v23, v16);
  v25(v19, v16);
  return v24;
}

uint64_t sub_10050F124()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10050F164(uint64_t a1)
{
  return sub_10050C9C8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10050F16C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10050F1A4(uint64_t a1)
{
  return sub_10050D9AC(a1);
}

uint64_t sub_10050F1AC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10050F1E4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10050F22C(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10000A6F0;
  *(_OWORD *)(v4 + 48) = v5;
  *(void *)(v4 + 40) = a1;
  return _swift_task_switch(sub_10050DAF8, 0, 0);
}

uint64_t sub_10050F2E0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10050F3BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10000A6F4;
  return sub_10050E53C(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_10050F4BC()
{
  uint64_t v1 = type metadata accessor for NWListener.State();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10050F5AC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for NWListener.State() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = v1 + v5;
  uint64_t v8 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000A6F0;
  v9[7] = v7;
  v9[8] = v8;
  v9[5] = a1;
  v9[6] = v6;
  return _swift_task_switch(sub_10050CC00, 0, 0);
}

Swift::Int sub_10050F6D0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void sub_10050F720()
{
  id v1 = *v0;
  NSObject.hash(into:)();
}

ValueMetadata *_s17ClassroomEndpointVMa()
{
  return &_s17ClassroomEndpointVN;
}

Swift::Int sub_10050F788()
{
  id v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void sub_10050F7D4(uint64_t *a1@<X8>)
{
  id v3 = [*v1 identifier];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    *a1 = v5;
    a1[1] = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10050F834()
{
  return static NSObject.== infix(_:_:)() & 1;
}

unint64_t sub_10050F87C()
{
  unint64_t result = qword_1009782B0;
  if (!qword_1009782B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009782B0);
  }
  return result;
}

uint64_t sub_10050F8D0()
{
  uint64_t v0 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v5 = qword_100969B90;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  uint64_t v7 = sub_10053BB90((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = v4;
  swift_retain();
  swift_release();
  sub_10028CFD4((uint64_t)v2, (uint64_t)&unk_1009786C8, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_10050FAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a1;
  v4[6] = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  v4[7] = static AirDropActor.shared;
  return _swift_task_switch(sub_10050FB54, v5, 0);
}

uint64_t sub_10050FB54()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    id v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v2;
    *id v2 = v0;
    v2[1] = sub_10050FC4C;
    return sub_10050FD78();
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_10050FC4C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1002D1768, v1, 0);
}

uint64_t sub_10050FD78()
{
  v1[3] = v0;
  uint64_t v2 = sub_10000A844((uint64_t *)&unk_1009723F0);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = sub_10000A844(&qword_10096B2C0);
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v1[10] = v4;
  v1[11] = *(void *)(v4 - 8);
  v1[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v1[13] = v5;
  v1[14] = *(void *)(v5 - 8);
  v1[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer();
  v1[16] = v6;
  v1[17] = *(void *)(v6 - 8);
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  v1[20] = static AirDropActor.shared;
  return _swift_task_switch(sub_10050FFFC, v7, 0);
}

uint64_t sub_10050FFFC()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Failure();
  sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  uint64_t v2 = swift_allocError();
  *(void *)(v0 + 168) = v2;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, enum case for SFAirDropReceive.Failure.receiverCancelled(_:), v1);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10051013C;
  return sub_100672230(v2);
}

uint64_t sub_10051013C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_100510268, v1, 0);
}

uint64_t sub_100510268()
{
  uint64_t v60 = v0;
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  CurrentValueSubject.value.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v56 = v0[18];
    uint64_t v57 = v0[17];
    uint64_t v7 = v0[15];
    uint64_t v58 = v0[16];
    uint64_t v8 = v0[13];
    uint64_t v9 = v0[14];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    SFAirDropReceive.Transfer.id.getter();
    sub_10053BB90(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v0[2] = sub_100254634(v11, v13, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v14(v56, v58);
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Receiver cancelled transfer %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = v0[17];
    uint64_t v15 = v0[18];
    uint64_t v17 = v0[16];

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v14(v15, v17);
  }
  uint64_t v19 = v0[11];
  uint64_t v18 = v0[12];
  uint64_t v20 = v0[10];
  SFAirDropReceive.Transfer.state.getter();
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v18, v20);
  if (v21 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:)) {
    goto LABEL_9;
  }
  if (v21 == enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:))
  {
    uint64_t v22 = v0[19];
    uint64_t v23 = v0[16];
    uint64_t v24 = v0[12];
    uint64_t v26 = v0[5];
    uint64_t v25 = v0[6];
    uint64_t v27 = v0[4];
    (*(void (**)(uint64_t, void))(v0[11] + 96))(v24, v0[10]);
    uint64_t v28 = &qword_100972418;
LABEL_7:
    uint64_t v29 = sub_10000A844(v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v24 + *(int *)(v29 + 48), v27);
    SFAirDrop.PermissionRequest.cancel()();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    v14(v22, v23);
    uint64_t v30 = type metadata accessor for SFAirDrop.ContactInfo();
LABEL_17:
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v24, v30);
    goto LABEL_18;
  }
  if (v21 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:))
  {
LABEL_9:
    uint64_t v31 = v0[19];
    uint64_t v32 = v0[16];
    uint64_t v33 = v0[12];
    uint64_t v34 = v0[9];
    uint64_t v35 = v0[7];
    uint64_t v36 = v0[8];
    (*(void (**)(uint64_t, void))(v0[11] + 96))(v33, v0[10]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v34, v33, v35);
    SFAirDrop.PermissionRequest.cancel()();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    v14(v31, v32);
    goto LABEL_18;
  }
  if (v21 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:)
    || v21 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:))
  {
    uint64_t v37 = v0[19];
    uint64_t v38 = v0[16];
    uint64_t v24 = v0[12];
    uint64_t v39 = v0[9];
    uint64_t v40 = v0[7];
    uint64_t v41 = v0[8];
    (*(void (**)(uint64_t, void))(v0[11] + 96))(v24, v0[10]);
    uint64_t v42 = sub_10000A844(&qword_10096B2D0);
    swift_bridgeObjectRelease();
    uint64_t v43 = *(int *)(v42 + 64);
LABEL_16:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v39, v24 + v43, v40);
    SFAirDrop.PermissionRequest.cancel()();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    v14(v37, v38);
    uint64_t v30 = type metadata accessor for SFAirDropReceive.ItemDestination();
    goto LABEL_17;
  }
  if (v21 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:)
    || v21 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenDestinationResponse(_:))
  {
    uint64_t v37 = v0[19];
    uint64_t v38 = v0[16];
    uint64_t v24 = v0[12];
    uint64_t v39 = v0[9];
    uint64_t v40 = v0[7];
    uint64_t v41 = v0[8];
    (*(void (**)(uint64_t, void))(v0[11] + 96))(v24, v0[10]);
    uint64_t v44 = sub_10000A844((uint64_t *)&unk_100972400);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = *(int *)(v44 + 80);
    goto LABEL_16;
  }
  if (v21 == enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:))
  {
    uint64_t v22 = v0[19];
    uint64_t v23 = v0[16];
    uint64_t v24 = v0[12];
    uint64_t v25 = v0[9];
    uint64_t v27 = v0[7];
    uint64_t v26 = v0[8];
    (*(void (**)(uint64_t, void))(v0[11] + 96))(v24, v0[10]);
    uint64_t v28 = (uint64_t *)&unk_100974560;
    goto LABEL_7;
  }
  if (v21 == enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:))
  {
    uint64_t v22 = v0[19];
    uint64_t v23 = v0[16];
    uint64_t v24 = v0[12];
    uint64_t v26 = v0[5];
    uint64_t v25 = v0[6];
    uint64_t v27 = v0[4];
    (*(void (**)(uint64_t, void))(v0[11] + 96))(v24, v0[10]);
    uint64_t v28 = &qword_1009723E8;
    goto LABEL_7;
  }
  os_log_type_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    double v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Nothing to cancel for transfer state", v49, 2u);
    swift_slowDealloc();
  }
  uint64_t v50 = v0[19];
  uint64_t v51 = v0[16];
  uint64_t v53 = v0[11];
  uint64_t v52 = v0[12];
  uint64_t v54 = v0[10];

  v14(v50, v51);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = (uint64_t (*)(void))v0[1];
  return v45();
}

uint64_t sub_100510994(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_10000A844(&qword_100978668);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SFAirDropReceive.Transfer();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.AskResponse();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.AcceptContext();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v2[14] = v6;
  uint64_t v7 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v2[15] = v7;
  v2[16] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  v2[17] = v8;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  v2[18] = static AirDropActor.shared;
  uint64_t v9 = (void *)swift_task_alloc();
  v2[19] = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100510C30;
  return sub_100511278(v8, v6);
}

uint64_t sub_100510C30()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100511020;
  }
  else {
    uint64_t v3 = sub_100510D58;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100510D58()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v18 = v1;
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[11];
  uint64_t v17 = v0[10];
  uint64_t v7 = v0[9];
  uint64_t v14 = v0[14];
  uint64_t v15 = v0[8];
  uint64_t v16 = v0[7];
  uint64_t v21 = v0[6];
  uint64_t v8 = v0[4];
  uint64_t v19 = v0[2];
  uint64_t v20 = v0[5];
  uint64_t v9 = v6 + *(int *)(sub_10000A844(&qword_10096C950) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, v14, v4);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for SFAirDropReceive.AskResponse.accept(_:), v15);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v10(v8, v6, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v8, 0, 1, v15);
  sub_1006BED14(v8);
  sub_10000A7E8(v8, &qword_100978668);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v16, v20);
  v10(v17, v6, v15);
  CurrentValueSubject.value.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v15);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v14, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v18, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v19, v17, v15);
  uint64_t v11 = _s6RunnerC19PreAcceptRunResultsVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v19 + *(int *)(v11 + 20), v16, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100511020()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[21] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1005110B8;
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[2];
  return sub_100517E28(v3, v2);
}

uint64_t sub_1005110B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  return _swift_task_switch(sub_1005111C8, v1, 0);
}

uint64_t sub_1005111C8()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100511278(uint64_t a1, uint64_t a2)
{
  v3[62] = a2;
  v3[63] = v2;
  v3[61] = a1;
  sub_10000A844(&qword_10096CCA0);
  v3[64] = swift_task_alloc();
  sub_10000A844(&qword_10096CC70);
  v3[65] = swift_task_alloc();
  v3[66] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v3[67] = v4;
  v3[68] = *(void *)(v4 - 8);
  v3[69] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.AskRequest();
  v3[70] = v5;
  v3[71] = *(void *)(v5 - 8);
  v3[72] = swift_task_alloc();
  v3[73] = swift_task_alloc();
  v3[74] = swift_task_alloc();
  v3[75] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer();
  v3[76] = v6;
  v3[77] = *(void *)(v6 - 8);
  v3[78] = swift_task_alloc();
  v3[79] = swift_task_alloc();
  v3[80] = swift_task_alloc();
  v3[81] = swift_task_alloc();
  v3[82] = swift_task_alloc();
  v3[83] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDrop.TransferType();
  v3[84] = v7;
  v3[85] = *(void *)(v7 - 8);
  v3[86] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v3[87] = v8;
  v3[88] = *(void *)(v8 - 8);
  v3[89] = swift_task_alloc();
  v3[90] = swift_task_alloc();
  v3[91] = swift_task_alloc();
  v3[92] = swift_task_alloc();
  v3[93] = swift_task_alloc();
  v3[94] = swift_task_alloc();
  v3[95] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v9 = static AirDropActor.shared;
  v3[96] = static AirDropActor.shared;
  return _swift_task_switch(sub_10051160C, v9, 0);
}

uint64_t sub_10051160C()
{
  uint64_t v216 = v0;
  *(void *)(v0 + 776) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ask request START", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 504);

  sub_100394300();
  uint64_t v5 = (void *)static NSUserDefaults.airdrop.getter();
  char v6 = SFAirDropUserDefaults.alwaysAutoAccept.getter();

  v202 = (unsigned char *)(v0 + 1116);
  unsigned int v187 = [*(id *)(v4+ OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_deviceStatus) disableAutoAccept];
  if (v6)
  {
    char v189 = 1;
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 504)
       + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
    swift_beginAccess();
    sub_100278C8C(v7, v0 + 16);
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 48);
    sub_10026BB6C((void *)(v0 + 16), v8);
    char v189 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    sub_10024D338(v0 + 16);
  }
  uint64_t v10 = *(void *)(v0 + 688);
  uint64_t v11 = *(void *)(v0 + 680);
  uint64_t v12 = *(void *)(v0 + 672);
  uint64_t v13 = *(void *)(v0 + 664);
  uint64_t v14 = *(void *)(v0 + 616);
  uint64_t v205 = *(void *)(v0 + 608);
  uint64_t v15 = *(void *)(v0 + 504);
  *(void *)(v0 + 784) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_askRequest;
  SFAirDropReceive.AskRequest.type.getter();
  char v197 = SFAirDrop.TransferType.isOnlyExchange.getter();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(void *)(v0 + 792) = v16;
  *(void *)(v0 + 800) = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v10, v12);
  *(void *)(v0 + 808) = *(void *)(v15
                                    + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_subject);
  CurrentValueSubject.value.getter();
  char v193 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  *(void *)(v0 + 816) = v17;
  *(void *)(v0 + 824) = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v18 = v205;
  v206 = v17;
  v17(v13, v18);
  BOOL v191 = sub_10053BA34();
  SFAirDropReceive.AskRequest.type.getter();
  char v19 = SFAirDrop.TransferType.isCustom.getter();
  int v20 = v19 & 1;
  unsigned char *v202 = v19 & 1;
  v16(v10, v12);
  uint64_t v21 = (void *)v0;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 67110144;
    *(_DWORD *)(v0 + 1092) = v189 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 8) = 1024;
    *(_DWORD *)(v0 + 1096) = v197 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 14) = 1024;
    *(_DWORD *)(v0 + 1100) = v193 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 20) = 1024;
    *(_DWORD *)(v0 + 1104) = v191;
    uint64_t v21 = (void *)v0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 26) = 1024;
    *(_DWORD *)(v0 + 1108) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "contentCanAutoAccept: %{BOOL}d isOnlyExchange: %{BOOL}d isPreviewSensitive: %{BOOL}d isDeviceLocked: %{BOOL}d isCustom: %{BOOL}d", (uint8_t *)v24, 0x20u);
    swift_slowDealloc();
  }
  uint64_t v25 = v21[82];
  uint64_t v26 = v21[76];
  uint64_t v27 = v21[75];

  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v206(v25, v26);
  sub_100534498(v27);
  uint64_t v184 = (uint64_t)(v21 + 12);
  uint64_t v185 = (uint64_t)(v21 + 22);
  uint64_t v29 = v21[81];
  uint64_t v30 = v21;
  uint64_t v31 = v21[76];
  uint64_t v32 = v21[75];
  uint64_t v33 = v21[74];
  uint64_t v34 = v21[71];
  uint64_t v35 = v21[70];
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v30[104] = v36;
  v30[105] = (v34 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v36(v32, v35);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v206(v29, v31);
  char v37 = SFAirDropReceive.AskRequest.canAutoAccept.getter();
  v36(v33, v35);
  uint64_t v38 = v30[63];
  if (v37) {
    int v39 = 1;
  }
  else {
    int v39 = *(unsigned __int8 *)(v38
  }
                             + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_delegateCanAutoAccept);
  uint64_t v40 = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  *(void *)(v0 + 848) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  uint64_t v41 = v38 + v40;
  swift_beginAccess();
  sub_100278C8C(v41, v184);
  *(void *)(v0 + 856) = sub_10000A844(&qword_10097F210);
  sub_10000A844(&qword_100978680);
  if (swift_dynamicCast())
  {
    sub_10000A7E8(v185, &qword_100978688);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Content overrides canAutoAccept - checking...", v44, 2u);
      swift_slowDealloc();
    }
    uint64_t v45 = *(void *)(v0 + 640);
    uint64_t v46 = *(void *)(v0 + 608);

    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v206(v45, v46);
    v210 = (char *)&dword_100974688 + dword_100974688;
    os_log_type_t v47 = (void *)swift_task_alloc();
    *(void *)(v0 + 864) = v47;
    *os_log_type_t v47 = v0;
    v47[1] = sub_1005131B4;
    uint64_t v48 = *(void *)(v0 + 584);
    goto LABEL_19;
  }
  *(void *)(v185 + 32) = 0;
  *(_OWORD *)uint64_t v185 = 0u;
  *(_OWORD *)(v185 + 16) = 0u;
  sub_10000A7E8(v185, &qword_100978688);
  if ((v187 | v39 ^ 1) & 1 | ((v189 & 1) == 0) | ((v197 | v193) | v191) & 1)
  {
    double v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Waiting for permission request task", v51, 2u);
      swift_slowDealloc();
    }
    uint64_t v52 = *(void *)(v0 + 848);
    uint64_t v54 = *(void *)(v0 + 504);
    uint64_t v53 = *(void *)(v0 + 512);

    sub_100278C8C(v54 + v52, v0 + 216);
    uint64_t v55 = *(void *)(v0 + 240);
    uint64_t v56 = *(void *)(v0 + 248);
    sub_10026BB6C((void *)(v0 + 216), v55);
    CurrentValueSubject.value.getter();
    uint64_t v57 = *(void *)(v54 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler)
        + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation;
    uint64_t v58 = sub_10000A844(&qword_10096BBA8);
    uint64_t v59 = *(void *)(v58 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v53, v57, v58);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v53, 0, 1, v58);
    uint64_t v60 = (void *)swift_task_alloc();
    *(void *)(v0 + 880) = v60;
    *uint64_t v60 = v0;
    v60[1] = sub_100514A6C;
    uint64_t v61 = *(void *)(v0 + 632);
    uint64_t v62 = *(void *)(v0 + 528);
    uint64_t v63 = *(void *)(v0 + 512);
    return sub_1005AE41C(v62, v61, v63, v55, v56);
  }
  os_log_type_t v64 = (long long *)(v0 + 336);
  v194 = *(NSObject **)(v0 + 816);
  uint64_t v207 = *(void *)(v0 + 760);
  uint64_t v65 = *(void *)(v0 + 704);
  uint64_t v200 = *(void *)(v0 + 696);
  uint64_t v66 = *(void *)(v0 + 664);
  uint64_t v67 = *(void *)(v0 + 608);
  uint64_t v68 = *(void *)(v0 + 552);
  uint64_t v69 = *(void *)(v0 + 544);
  uint64_t v70 = *(void *)(v0 + 536);
  uint64_t v71 = *(void (**)(uint64_t, void, uint64_t))(v69 + 104);
  v71(v68, enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:), v70);
  sub_1006BE3BC(v68, v66);
  uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
  uint64_t v73 = v70;
  uint64_t v74 = v0;
  v72(v68, v73);
  ((void (*)(uint64_t, uint64_t))v194)(v66, v67);
  (*(void (**)(uint64_t, void, uint64_t))(v65 + 104))(v207, enum case for SFAirDropReceive.ItemDestination.default(_:), v200);
  *(_DWORD *)(v0 + 1112) = 1;
  *(void *)(v0 + 952) = v71;
  *(void *)(v0 + 944) = v72;
  sub_100278C8C(*(void *)(v0 + 504) + *(void *)(v0 + 848), v0 + 296);
  sub_10000A844(&qword_100978698);
  if (swift_dynamicCast())
  {
    v198 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    int v208 = *v202;
    v188 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v75 = *(void *)(v0 + 760);
    uint64_t v76 = *(void *)(v0 + 744);
    uint64_t v77 = *(void *)(v0 + 704);
    uint64_t v78 = *(void *)(v0 + 696);
    uint64_t v79 = *(void *)(v0 + 664);
    uint64_t v186 = *(void *)(v0 + 608);
    uint64_t v80 = *(void *)(v0 + 576);
    uint64_t v192 = *(void *)(v0 + 560);
    sub_1002AF688(v64, v0 + 256);
    uint64_t v81 = *(void *)(v0 + 280);
    uint64_t v82 = *(void *)(v0 + 288);
    sub_10026BB6C((void *)(v0 + 256), v81);
    v211 = *(char **)(v77 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v211)(v76, v75, v78);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v188(v79, v186);
    char v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 8))(v76, v80, v81, v82);
    v198(v80, v192);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
    sub_10024D338(v0 + 256);
    if (v208 != 1)
    {
      uint64_t v90 = 0;
      unint64_t v91 = 0xF000000000000000;
      uint64_t v85 = v0 + 1116;
      uint64_t v74 = v0;
      goto LABEL_40;
    }
    uint64_t v84 = *(void *)(v0 + 704);
    uint64_t v85 = v0 + 1116;
    uint64_t v74 = v0;
  }
  else
  {
    uint64_t v85 = v0 + 1116;
    int v86 = *v202;
    *os_log_type_t v64 = 0u;
    *(_OWORD *)(v0 + 352) = 0u;
    *(void *)(v0 + 368) = 0;
    sub_10000A7E8((uint64_t)v64, &qword_1009786A0);
    if (v86 != 1)
    {
      uint64_t v90 = 0;
      char v83 = 0;
      unint64_t v91 = 0xF000000000000000;
      goto LABEL_40;
    }
    char v83 = 0;
    uint64_t v84 = *(void *)(v0 + 704);
    v211 = *(char **)(v84 + 16);
  }
  *(unsigned char *)(v85 + 2) = v83 & 1;
  uint64_t v87 = *(void *)(v74 + 736);
  uint64_t v88 = *(void *)(v74 + 696);
  ((void (*)(uint64_t, void, uint64_t))v211)(v87, *(void *)(v74 + 760), v88);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v84 + 88))(v87, v88) != enum case for SFAirDropReceive.ItemDestination.metadata(_:))
  {
    uint64_t v133 = *(void *)(v74 + 736);
    uint64_t v134 = *(void *)(v74 + 704);
    uint64_t v135 = *(void *)(v74 + 696);
    uint64_t v136 = *(void *)(v74 + 504) + *(void *)(v74 + 848);
    v137 = *(void (**)(uint64_t, uint64_t))(v134 + 8);
    *(void *)(v74 + 960) = v137;
    *(void *)(v74 + 968) = (v134 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v137(v133, v135);
    sub_100278C8C(v136, v74 + 136);
    sub_10000A844(&qword_1009786B0);
    if (swift_dynamicCast())
    {
      uint64_t v138 = *(void *)(v74 + 784);
      uint64_t v139 = *(void *)(v74 + 504);
      sub_10000A7E8(v74 + 376, &qword_1009786B8);
      v210 = (char *)&dword_100974690 + dword_100974690;
      v140 = (void *)swift_task_alloc();
      *(void *)(v74 + 976) = v140;
      void *v140 = v74;
      v140[1] = sub_100516448;
      uint64_t v48 = v139 + v138;
LABEL_19:
      return ((uint64_t (*)(uint64_t))v210)(v48);
    }
    *(void *)(v74 + 408) = 0;
    *(_OWORD *)(v74 + 376) = 0u;
    *(_OWORD *)(v74 + 392) = 0u;
    sub_10000A7E8(v74 + 376, &qword_1009786B8);
    uint64_t v90 = 0;
    unint64_t v91 = 0xF000000000000000;
    goto LABEL_57;
  }
  uint64_t v89 = *(uint64_t **)(v74 + 736);
  (*(void (**)(uint64_t *, void))(*(void *)(v74 + 704) + 96))(v89, *(void *)(v74 + 696));
  uint64_t v90 = *v89;
  unint64_t v91 = v89[1];
  sub_100278C78(*v89, v91);
  char v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    id v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Retrieved receiverMetadata via destination", v94, 2u);
    swift_slowDealloc();
  }
  sub_100250CB0(v90, v91);

  if (v91 >> 60 == 15)
  {
LABEL_57:
    uint64_t v157 = SFAirDropReceive.AskRequest.customPayload.getter();
    unint64_t v159 = v158;
    sub_100250CB0(v157, v158);
    v160 = Logger.logObject.getter();
    os_log_type_t v161 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v160, v161))
    {
      if (v159 >> 60 == 15) {
        v162 = "Failed to receive senderMetadata";
      }
      else {
        v162 = "Receiver metadata was not found";
      }
      v163 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v163 = 0;
      _os_log_impl((void *)&_mh_execute_header, v160, v161, v162, v163, 2u);
      swift_slowDealloc();
    }
    uint64_t v164 = *(void *)(v74 + 760);
    uint64_t v165 = *(void *)(v74 + 704);
    uint64_t v166 = *(void *)(v74 + 696);

    uint64_t v167 = type metadata accessor for SFAirDropReceive.Failure();
    sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v167 - 8) + 104))(v168, enum case for SFAirDropReceive.Failure.badRequest(_:), v167);
    swift_willThrow();
    sub_100250CB0(v90, v91);
    (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v164, v166);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v132 = *(uint64_t (**)(void))(v74 + 8);
    goto LABEL_9;
  }
LABEL_40:
  uint64_t v95 = v74;
  int v96 = v83 & 1;
  *(unsigned char *)(v85 + 3) = v96;
  *(void *)(v74 + 1016) = v91;
  *(void *)(v74 + 1008) = v90;
  uint64_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v97, v98))
  {
    int v99 = *(_DWORD *)(v74 + 1112);
    uint64_t v100 = swift_slowAlloc();
    *(_DWORD *)uint64_t v100 = 67109376;
    *(_DWORD *)(v74 + 1072) = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v100 + 8) = 1024;
    *(_DWORD *)(v74 + 1076) = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "Ask request END - Accept {didAutoAccept: %{BOOL}d, shouldExtractMedia: %{BOOL}d}", (uint8_t *)v100, 0xEu);
    swift_slowDealloc();
  }
  v190 = *(void (**)(uint64_t, uint64_t))(v74 + 832);
  v101 = *(void (**)(uint64_t, uint64_t))(v74 + 816);
  v199 = *(void (**)(uint64_t, NSObject *))(v74 + 792);
  uint64_t v102 = *(void *)(v74 + 688);
  v195 = *(NSObject **)(v74 + 672);
  uint64_t v103 = *(void *)(v74 + 664);
  uint64_t v104 = *(void *)(v74 + 608);
  uint64_t v105 = *(void *)(v74 + 576);
  uint64_t v106 = *(void *)(v95 + 560);

  v203._countAndFlagsBits = sub_10048C2F0();
  v203._object = v107;
  char v212 = v108;
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v101(v103, v104);
  SFAirDropReceive.AskRequest.type.getter();
  v190(v105, v106);
  char v109 = SFAirDrop.TransferType.isFiles.getter();
  v199(v102, v195);
  if ((v109 & 1) == 0) {
    goto LABEL_44;
  }
  uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v95 + 832);
  uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v95 + 816);
  uint64_t v112 = *(void *)(v95 + 664);
  uint64_t v113 = *(void *)(v95 + 608);
  uint64_t v114 = *(void *)(v95 + 576);
  uint64_t v115 = *(void *)(v95 + 560);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v111(v112, v113);
  char v116 = SFAirDropReceive.AskRequest.senderIsMe.getter();
  v110(v114, v115);
  if (v116) {
    goto LABEL_44;
  }
  v141 = *(void (**)(uint64_t, uint64_t))(v95 + 816);
  uint64_t v142 = *(void *)(v95 + 664);
  uint64_t v143 = *(void *)(v95 + 608);
  CurrentValueSubject.value.getter();
  char v144 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
  v141(v142, v143);
  if ((v144 & 1) == 0) {
    goto LABEL_44;
  }
  if (v212 != 2) {
    goto LABEL_44;
  }
  uint64_t v145 = *(void *)(v95 + 744);
  uint64_t v146 = *(void *)(v95 + 704);
  uint64_t v147 = *(void *)(v95 + 696);
  (*(void (**)(uint64_t, void, uint64_t))(v146 + 104))(v145, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v147);
  sub_10053BB90(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  char v148 = dispatch thunk of static Equatable.== infix(_:_:)();
  v149 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
  *(void *)(v95 + 1024) = v149;
  *(void *)(v95 + 1032) = (v146 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v149(v145, v147);
  if (v148)
  {
LABEL_44:
    v201 = *(void (**)(void, void, void))(*(void *)(v95 + 704) + 16);
    v201(*(void *)(v95 + 712), *(void *)(v95 + 760), *(void *)(v95 + 696));
    swift_retain_n();
    sub_1003950CC(v203._countAndFlagsBits, (uint64_t)v203._object, v212);
    uint64_t v117 = Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v117, v118))
    {
      v179 = *(void (**)(uint64_t, uint64_t))(v95 + 832);
      v177 = *(void (**)(uint64_t, uint64_t))(v95 + 816);
      uint64_t v183 = *(void *)(v95 + 704);
      uint64_t v180 = *(void *)(v95 + 696);
      uint64_t v181 = *(void *)(v95 + 712);
      uint64_t v119 = *(void *)(v95 + 664);
      uint64_t v176 = *(void *)(v95 + 608);
      uint64_t v120 = *(void *)(v95 + 576);
      uint64_t v178 = *(void *)(v95 + 560);
      v196 = v117;
      uint64_t v121 = swift_slowAlloc();
      v215[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v121 = 67109890;
      os_log_type_t type = v118;
      CurrentValueSubject.value.getter();
      char v122 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
      v177(v119, v176);
      swift_release();
      *(_DWORD *)(v95 + 1084) = v122 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v121 + 8) = 1024;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v177(v119, v176);
      char v123 = SFAirDropReceive.AskRequest.senderIsMe.getter();
      v179(v120, v178);
      swift_release();
      *(_DWORD *)(v95 + 1080) = v123 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v121 + 14) = 2080;
      sub_1003950CC(v203._countAndFlagsBits, (uint64_t)v203._object, v212);
      unint64_t v124 = sub_100485954(v203, v212);
      unint64_t v126 = v125;
      sub_1003950E4(v203._countAndFlagsBits, (uint64_t)v203._object, v212);
      *(void *)(v95 + 472) = sub_100254634(v124, v126, v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003950E4(v203._countAndFlagsBits, (uint64_t)v203._object, v212);
      sub_1003950E4(v203._countAndFlagsBits, (uint64_t)v203._object, v212);
      *(_WORD *)(v121 + 24) = 2080;
      sub_10053BB90(&qword_100978608, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
      uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v95 + 464) = sub_100254634(v127, v128, v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v213 = *(char **)(v183 + 8);
      ((void (*)(uint64_t, uint64_t))v213)(v181, v180);
      _os_log_impl((void *)&_mh_execute_header, v196, type, "Ask sensitive preview SKIP. {transfer.isPreviewSensitive: %{BOOL}d, isSenderMe: %{BOOL}d, userSafetyMode: %s, askStepDestination: %s}", (uint8_t *)v121, 0x22u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v129 = *(void *)(v95 + 712);
      uint64_t v130 = *(void *)(v95 + 704);
      uint64_t v131 = *(void *)(v95 + 696);
      swift_release_n();

      sub_1003950E4(v203._countAndFlagsBits, (uint64_t)v203._object, v212);
      sub_1003950E4(v203._countAndFlagsBits, (uint64_t)v203._object, v212);
      v213 = *(char **)(v130 + 8);
      ((void (*)(uint64_t, uint64_t))v213)(v129, v131);
    }
    v201(*(void *)(v95 + 488), *(void *)(v95 + 760), *(void *)(v95 + 696));
    SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)();
    ((void (*)(void, void))v213)(*(void *)(v95 + 760), *(void *)(v95 + 696));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v132 = *(uint64_t (**)(void))(v95 + 8);
LABEL_9:
    return v132();
  }
  v214 = (char *)(v95 + 56);
  sub_1003950E4(v203._countAndFlagsBits, (uint64_t)v203._object, 2u);
  v150 = Logger.logObject.getter();
  os_log_type_t v151 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v150, v151))
  {
    v152 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v152 = 0;
    _os_log_impl((void *)&_mh_execute_header, v150, v151, "Ask sensitive preview START", v152, 2u);
    swift_slowDealloc();
  }
  uint64_t v153 = *(void *)(v95 + 848);
  uint64_t v154 = *(void *)(v95 + 760);
  uint64_t v155 = *(void *)(v95 + 520);
  uint64_t v156 = *(void *)(v95 + 504);

  sub_100278C8C(v156 + v153, (uint64_t)v214);
  sub_10026BB6C(v214, *(void *)(v95 + 80));
  CurrentValueSubject.value.getter();
  sub_1005B0F3C(v154, v155);
  v204 = *(void (**)(uint64_t, void, uint64_t))(v95 + 952);
  v209 = *(void (**)(uint64_t, uint64_t))(v95 + 944);
  v169 = *(void (**)(uint64_t, uint64_t))(v95 + 816);
  uint64_t v170 = *(void *)(v95 + 664);
  uint64_t v171 = *(void *)(v95 + 608);
  uint64_t v172 = *(void *)(v95 + 552);
  uint64_t v173 = *(void *)(v95 + 536);
  uint64_t v174 = *(void *)(v95 + 520);
  v169(*(void *)(v95 + 624), v171);
  sub_10024D338((uint64_t)v214);
  uint64_t v175 = sub_10000A844(&qword_10096B2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v175 - 8) + 16))(v172, v174, v175);
  v204(v172, enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:), v173);
  sub_1006BE3BC(v172, v170);
  v209(v172, v173);
  v169(v170, v171);
  return _swift_task_switch(sub_100517430, 0, 0);
}

uint64_t sub_1005131B4(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(unsigned char *)(v4 + 1117) = a1;
  *(void *)(v4 + 872) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 768);
  (*(void (**)(void, void))(v3 + 832))(*(void *)(v3 + 584), *(void *)(v3 + 560));
  if (v1) {
    char v6 = sub_1005148CC;
  }
  else {
    char v6 = sub_100513344;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100513344()
{
  uint64_t v167 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = *(unsigned __int8 *)(v0 + 1117);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 1088) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Content overrides canAutoAccept - willAutoAccept = %{BOOL}d", v4, 8u);
    swift_slowDealloc();

    if ((v3 & 1) == 0)
    {
LABEL_3:
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Waiting for permission request task", v7, 2u);
        swift_slowDealloc();
      }
      uint64_t v8 = *(void *)(v0 + 848);
      uint64_t v10 = *(void *)(v0 + 504);
      uint64_t v9 = *(void *)(v0 + 512);

      sub_100278C8C(v10 + v8, v0 + 216);
      uint64_t v11 = *(void *)(v0 + 240);
      uint64_t v12 = *(void *)(v0 + 248);
      sub_10026BB6C((void *)(v0 + 216), v11);
      CurrentValueSubject.value.getter();
      uint64_t v13 = *(void *)(v10 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler)
          + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation;
      uint64_t v14 = sub_10000A844(&qword_10096BBA8);
      uint64_t v15 = *(void *)(v14 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v9, v13, v14);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 880) = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_100514A6C;
      uint64_t v17 = *(void *)(v0 + 632);
      uint64_t v18 = *(void *)(v0 + 528);
      uint64_t v19 = *(void *)(v0 + 512);
      return sub_1005AE41C(v18, v17, v19, v11, v12);
    }
  }
  else
  {
    int v21 = *(unsigned __int8 *)(v0 + 1117);

    if (v21 != 1) {
      goto LABEL_3;
    }
  }
  os_log_type_t v161 = (unsigned __int8 *)(v0 + 1116);
  uint64_t v140 = *(void *)(v0 + 872);
  uint64_t v147 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
  uint64_t v22 = *(void *)(v0 + 704);
  uint64_t v152 = *(void *)(v0 + 696);
  uint64_t v156 = *(void *)(v0 + 760);
  uint64_t v23 = *(void *)(v0 + 664);
  uint64_t v24 = *(void *)(v0 + 608);
  uint64_t v25 = *(void *)(v0 + 552);
  uint64_t v26 = *(void *)(v0 + 544);
  uint64_t v27 = *(void *)(v0 + 536);
  uint64_t v28 = *(void (**)(uint64_t, void, uint64_t))(v26 + 104);
  v28(v25, enum case for SFAirDropReceive.Transfer.State.autoAccepted(_:), v27);
  sub_1006BE3BC(v25, v23);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v29(v25, v27);
  v147(v23, v24);
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v156, enum case for SFAirDropReceive.ItemDestination.default(_:), v152);
  *(_DWORD *)(v0 + 1112) = 1;
  *(void *)(v0 + 952) = v28;
  *(void *)(v0 + 944) = v29;
  sub_100278C8C(*(void *)(v0 + 504) + *(void *)(v0 + 848), v0 + 296);
  sub_10000A844(&qword_100978698);
  if (swift_dynamicCast())
  {
    uint64_t v153 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    int v159 = *v161;
    uint64_t v145 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v30 = *(void *)(v0 + 760);
    uint64_t v31 = *(void *)(v0 + 744);
    uint64_t v32 = *(void *)(v0 + 704);
    uint64_t v33 = *(void *)(v0 + 696);
    uint64_t v34 = *(void *)(v0 + 664);
    uint64_t v143 = *(void *)(v0 + 608);
    uint64_t v35 = *(void *)(v0 + 576);
    uint64_t v148 = *(void *)(v0 + 560);
    sub_1002AF688((long long *)(v0 + 336), v0 + 256);
    uint64_t v36 = *(void *)(v0 + 280);
    uint64_t v37 = *(void *)(v0 + 288);
    sub_10026BB6C((void *)(v0 + 256), v36);
    uint64_t v139 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v139(v31, v30, v33);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v145(v34, v143);
    char v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8))(v31, v35, v36, v37);
    v153(v35, v148);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    sub_10024D338(v0 + 256);
    if (v159 == 1)
    {
      uint64_t v39 = *(void *)(v0 + 704);
      uint64_t v40 = v0 + 1116;
      uint64_t v41 = v139;
      goto LABEL_14;
    }
    uint64_t v46 = 0;
    unint64_t v47 = 0xF000000000000000;
    uint64_t v40 = v0 + 1116;
LABEL_21:
    int v51 = v38 & 1;
    *(unsigned char *)(v40 + 3) = v51;
    unint64_t v142 = v47;
    uint64_t v144 = v46;
    *(void *)(v0 + 1016) = v47;
    *(void *)(v0 + 1008) = v46;
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      int v54 = *(_DWORD *)(v0 + 1112);
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 67109376;
      *(_DWORD *)(v0 + 1072) = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 8) = 1024;
      *(_DWORD *)(v0 + 1076) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Ask request END - Accept {didAutoAccept: %{BOOL}d, shouldExtractMedia: %{BOOL}d}", (uint8_t *)v55, 0xEu);
      swift_slowDealloc();
    }
    uint64_t v146 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    os_log_type_t v151 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    uint64_t v57 = *(void *)(v0 + 688);
    uint64_t v149 = *(void *)(v0 + 672);
    uint64_t v58 = *(void *)(v0 + 664);
    uint64_t v59 = *(void *)(v0 + 608);
    uint64_t v60 = *(void *)(v0 + 576);
    uint64_t v61 = *(void *)(v0 + 560);

    v157._countAndFlagsBits = sub_10048C2F0();
    v157._object = v62;
    char v162 = v63;
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v56(v58, v59);
    SFAirDropReceive.AskRequest.type.getter();
    v146(v60, v61);
    char v64 = SFAirDrop.TransferType.isFiles.getter();
    v151(v57, v149);
    if ((v64 & 1) == 0) {
      goto LABEL_25;
    }
    uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v67 = *(void *)(v0 + 664);
    uint64_t v68 = *(void *)(v0 + 608);
    uint64_t v69 = *(void *)(v0 + 576);
    uint64_t v70 = *(void *)(v0 + 560);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v66(v67, v68);
    char v71 = SFAirDropReceive.AskRequest.senderIsMe.getter();
    v65(v69, v70);
    if (v71) {
      goto LABEL_25;
    }
    int v96 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v97 = *(void *)(v0 + 664);
    uint64_t v98 = *(void *)(v0 + 608);
    CurrentValueSubject.value.getter();
    char v99 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
    v96(v97, v98);
    if ((v99 & 1) == 0) {
      goto LABEL_25;
    }
    if (v162 != 2) {
      goto LABEL_25;
    }
    uint64_t v100 = *(void *)(v0 + 744);
    uint64_t v101 = *(void *)(v0 + 704);
    uint64_t v102 = *(void *)(v0 + 696);
    (*(void (**)(uint64_t, void, uint64_t))(v101 + 104))(v100, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v102);
    sub_10053BB90(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
    char v103 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
    *(void *)(v0 + 1024) = v104;
    *(void *)(v0 + 1032) = (v101 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v104(v100, v102);
    if (v103)
    {
LABEL_25:
      uint64_t v154 = *(void (**)(void, void, void))(*(void *)(v0 + 704) + 16);
      v154(*(void *)(v0 + 712), *(void *)(v0 + 760), *(void *)(v0 + 696));
      swift_retain_n();
      sub_1003950CC(v157._countAndFlagsBits, (uint64_t)v157._object, v162);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v135 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
        uint64_t v133 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
        uint64_t v141 = *(void *)(v0 + 704);
        uint64_t v136 = *(void *)(v0 + 696);
        uint64_t v137 = *(void *)(v0 + 712);
        uint64_t v74 = *(void *)(v0 + 664);
        uint64_t v132 = *(void *)(v0 + 608);
        uint64_t v75 = *(void *)(v0 + 576);
        uint64_t v134 = *(void *)(v0 + 560);
        v150 = v72;
        uint64_t v76 = swift_slowAlloc();
        v166[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v76 = 67109890;
        os_log_type_t type = v73;
        CurrentValueSubject.value.getter();
        char v77 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
        v133(v74, v132);
        swift_release();
        *(_DWORD *)(v0 + 1084) = v77 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v76 + 8) = 1024;
        CurrentValueSubject.value.getter();
        SFAirDropReceive.Transfer.askRequest.getter();
        v133(v74, v132);
        char v78 = SFAirDropReceive.AskRequest.senderIsMe.getter();
        v135(v75, v134);
        swift_release();
        *(_DWORD *)(v0 + 1080) = v78 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v76 + 14) = 2080;
        sub_1003950CC(v157._countAndFlagsBits, (uint64_t)v157._object, v162);
        unint64_t v79 = sub_100485954(v157, v162);
        unint64_t v81 = v80;
        sub_1003950E4(v157._countAndFlagsBits, (uint64_t)v157._object, v162);
        *(void *)(v0 + 472) = sub_100254634(v79, v81, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003950E4(v157._countAndFlagsBits, (uint64_t)v157._object, v162);
        sub_1003950E4(v157._countAndFlagsBits, (uint64_t)v157._object, v162);
        *(_WORD *)(v76 + 24) = 2080;
        sub_10053BB90(&qword_100978608, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
        uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 464) = sub_100254634(v82, v83, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v163 = *(unsigned __int8 **)(v141 + 8);
        ((void (*)(uint64_t, uint64_t))v163)(v137, v136);
        _os_log_impl((void *)&_mh_execute_header, v150, type, "Ask sensitive preview SKIP. {transfer.isPreviewSensitive: %{BOOL}d, isSenderMe: %{BOOL}d, userSafetyMode: %s, askStepDestination: %s}", (uint8_t *)v76, 0x22u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v84 = *(void *)(v0 + 712);
        uint64_t v85 = *(void *)(v0 + 704);
        uint64_t v86 = *(void *)(v0 + 696);
        swift_release_n();

        sub_1003950E4(v157._countAndFlagsBits, (uint64_t)v157._object, v162);
        sub_1003950E4(v157._countAndFlagsBits, (uint64_t)v157._object, v162);
        v163 = *(unsigned __int8 **)(v85 + 8);
        ((void (*)(uint64_t, uint64_t))v163)(v84, v86);
      }
      v154(*(void *)(v0 + 488), *(void *)(v0 + 760), *(void *)(v0 + 696));
      SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)();
      ((void (*)(void, void))v163)(*(void *)(v0 + 760), *(void *)(v0 + 696));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v87 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_48;
    }
    uint64_t v155 = v104;
    sub_1003950E4(v157._countAndFlagsBits, (uint64_t)v157._object, 2u);
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v105, v106))
    {
      id v107 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v107 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Ask sensitive preview START", v107, 2u);
      swift_slowDealloc();
    }
    uint64_t v108 = *(void *)(v0 + 848);
    uint64_t v109 = *(void *)(v0 + 760);
    uint64_t v110 = *(void *)(v0 + 520);
    uint64_t v111 = *(void *)(v0 + 504);

    sub_100278C8C(v111 + v108, v0 + 56);
    sub_10026BB6C((void *)(v0 + 56), *(void *)(v0 + 80));
    CurrentValueSubject.value.getter();
    sub_1005B0F3C(v109, v110);
    if (v140)
    {
      uint64_t v112 = *(void *)(v0 + 760);
      uint64_t v113 = *(void *)(v0 + 696);
      (*(void (**)(void, void))(v0 + 816))(*(void *)(v0 + 624), *(void *)(v0 + 608));
      sub_100250CB0(v144, v142);
      v155(v112, v113);
      sub_10024D338(v0 + 56);
LABEL_47:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v87 = *(uint64_t (**)(void))(v0 + 8);
LABEL_48:
      return v87();
    }
    v160 = *(void (**)(uint64_t, void, uint64_t))(v0 + 952);
    uint64_t v165 = *(unsigned __int8 **)(v0 + 944);
    unint64_t v126 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v158 = *(void *)(v0 + 664);
    uint64_t v127 = *(void *)(v0 + 608);
    uint64_t v128 = *(void *)(v0 + 552);
    uint64_t v129 = *(void *)(v0 + 536);
    uint64_t v130 = *(void *)(v0 + 520);
    v126(*(void *)(v0 + 624), v127);
    sub_10024D338(v0 + 56);
    uint64_t v131 = sub_10000A844(&qword_10096B2C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 16))(v128, v130, v131);
    v160(v128, enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:), v129);
    sub_1006BE3BC(v128, v158);
    ((void (*)(uint64_t, uint64_t))v165)(v128, v129);
    v126(v158, v127);
    return _swift_task_switch(sub_100517430, 0, 0);
  }
  uint64_t v40 = v0 + 1116;
  int v42 = *v161;
  *(_OWORD *)(v0 + 336) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  *(void *)(v0 + 368) = 0;
  sub_10000A7E8(v0 + 336, &qword_1009786A0);
  if (v42 != 1)
  {
    uint64_t v46 = 0;
    char v38 = 0;
    unint64_t v47 = 0xF000000000000000;
    goto LABEL_21;
  }
  char v38 = 0;
  uint64_t v39 = *(void *)(v0 + 704);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
LABEL_14:
  *(unsigned char *)(v40 + 2) = v38 & 1;
  uint64_t v43 = *(void *)(v0 + 736);
  uint64_t v44 = *(void *)(v0 + 696);
  v41(v43, *(void *)(v0 + 760), v44);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v39 + 88))(v43, v44) == enum case for SFAirDropReceive.ItemDestination.metadata(_:))
  {
    uint64_t v45 = *(uint64_t **)(v0 + 736);
    (*(void (**)(uint64_t *, void))(*(void *)(v0 + 704) + 96))(v45, *(void *)(v0 + 696));
    uint64_t v46 = *v45;
    unint64_t v47 = v45[1];
    sub_100278C78(*v45, v47);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      os_log_type_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Retrieved receiverMetadata via destination", v50, 2u);
      swift_slowDealloc();
    }
    sub_100250CB0(v46, v47);

    if (v47 >> 60 == 15) {
      goto LABEL_41;
    }
    goto LABEL_21;
  }
  uint64_t v88 = *(void *)(v0 + 736);
  uint64_t v89 = *(void *)(v0 + 704);
  uint64_t v90 = *(void *)(v0 + 696);
  uint64_t v91 = *(void *)(v0 + 504) + *(void *)(v0 + 848);
  char v92 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
  *(void *)(v0 + 960) = v92;
  *(void *)(v0 + 968) = (v89 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v92(v88, v90);
  sub_100278C8C(v91, v0 + 136);
  sub_10000A844(&qword_1009786B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(v0 + 408) = 0;
    *(_OWORD *)(v0 + 376) = 0u;
    *(_OWORD *)(v0 + 392) = 0u;
    sub_10000A7E8(v0 + 376, &qword_1009786B8);
    uint64_t v46 = 0;
    unint64_t v47 = 0xF000000000000000;
LABEL_41:
    uint64_t v114 = SFAirDropReceive.AskRequest.customPayload.getter();
    unint64_t v116 = v115;
    sub_100250CB0(v114, v115);
    uint64_t v117 = Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v117, v118))
    {
      if (v116 >> 60 == 15) {
        uint64_t v119 = "Failed to receive senderMetadata";
      }
      else {
        uint64_t v119 = "Receiver metadata was not found";
      }
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, v118, v119, v120, 2u);
      swift_slowDealloc();
    }
    uint64_t v121 = *(void *)(v0 + 760);
    uint64_t v122 = *(void *)(v0 + 704);
    uint64_t v123 = *(void *)(v0 + 696);

    uint64_t v124 = type metadata accessor for SFAirDropReceive.Failure();
    sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v124 - 8) + 104))(v125, enum case for SFAirDropReceive.Failure.badRequest(_:), v124);
    swift_willThrow();
    sub_100250CB0(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v123);
    goto LABEL_47;
  }
  uint64_t v93 = *(void *)(v0 + 784);
  uint64_t v94 = *(void *)(v0 + 504);
  sub_10000A7E8(v0 + 376, &qword_1009786B8);
  uint64_t v164 = (unsigned __int8 *)&dword_100974690 + dword_100974690;
  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 976) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_100516448;
  return ((uint64_t (*)(uint64_t))v164)(v94 + v93);
}

uint64_t sub_1005148CC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100514A6C()
{
  os_log_type_t v2 = *v1;
  (*v1)[111] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[102];
  uint64_t v4 = v2[96];
  uint64_t v5 = v2[79];
  uint64_t v6 = v2[76];
  sub_10000A7E8(v2[64], &qword_10096CCA0);
  v3(v5, v6);
  if (v0) {
    uint64_t v7 = sub_100517C80;
  }
  else {
    uint64_t v7 = sub_100514C28;
  }
  return _swift_task_switch(v7, v4, 0);
}

uint64_t sub_100514C28()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[102];
  uint64_t v2 = v0[83];
  uint64_t v3 = v0[76];
  uint64_t v4 = v0[69];
  uint64_t v5 = v0[68];
  uint64_t v6 = v0[67];
  uint64_t v7 = v0[66];
  sub_10024D338((uint64_t)(v0 + 27));
  uint64_t v8 = sub_10000A844(&qword_10096B2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v4, v7, v8);
  uint64_t v9 = enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
  v0[112] = v10;
  v10(v4, v9, v6);
  sub_1006BE3BC(v4, v2);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v0[113] = v11;
  v11(v4, v6);
  v1(v2, v3);
  return _swift_task_switch(sub_100514D74, 0, 0);
}

uint64_t sub_100514D74()
{
  uint64_t v1 = v0[66];
  uint64_t v2 = swift_task_alloc();
  v0[114] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[115] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[116] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100514E7C;
  uint64_t v5 = v0[94];
  uint64_t v6 = v0[87];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_100978690, v2, sub_10053C358, v3, 0, 0, v6);
}

uint64_t sub_100514E7C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 936) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100516220;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 768);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_100514FB0;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100514FB0()
{
  uint64_t v141 = v0;
  uint64_t v1 = (unsigned __int8 *)(v0 + 1116);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = *(void *)(v0 + 752);
  uint64_t v4 = *(void *)(v0 + 704);
  uint64_t v5 = *(void *)(v0 + 696);
  sub_10000A7E8(*(void *)(v0 + 528), &qword_10096CC70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v3, v5);
  uint64_t v6 = *(void *)(v0 + 936);
  *(_DWORD *)(v0 + 1112) = 0;
  *(int8x16_t *)(v0 + 944) = vextq_s8(*(int8x16_t *)(v0 + 896), *(int8x16_t *)(v0 + 896), 8uLL);
  sub_100278C8C(*(void *)(v0 + 504) + *(void *)(v0 + 848), v0 + 296);
  sub_10000A844(&qword_100978698);
  uint64_t v118 = v6;
  if (swift_dynamicCast())
  {
    uint64_t v131 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    int v135 = *v1;
    uint64_t v7 = *(void *)(v0 + 760);
    uint64_t v8 = *(void *)(v0 + 744);
    uint64_t v9 = *(void *)(v0 + 704);
    uint64_t v10 = *(void *)(v0 + 696);
    uint64_t v11 = *(void *)(v0 + 664);
    uint64_t v122 = *(void *)(v0 + 608);
    uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v12 = *(void *)(v0 + 576);
    uint64_t v127 = *(void *)(v0 + 560);
    sub_1002AF688((long long *)(v0 + 336), v0 + 256);
    uint64_t v14 = *(void *)(v0 + 280);
    uint64_t v13 = *(void *)(v0 + 288);
    sub_10026BB6C((void *)(v0 + 256), v14);
    uint64_t v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v117(v8, v7, v10);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v124(v11, v122);
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(v8, v12, v14, v13);
    v131(v12, v127);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    sub_10024D338(v0 + 256);
    if (v135 == 1)
    {
      uint64_t v16 = *(void *)(v0 + 704);
      uint64_t v1 = (unsigned __int8 *)(v0 + 1116);
      uint64_t v17 = v117;
      goto LABEL_6;
    }
    uint64_t v25 = 0;
    unint64_t v26 = 0xF000000000000000;
    uint64_t v1 = (unsigned __int8 *)(v0 + 1116);
LABEL_13:
    int v30 = v15 & 1;
    v1[3] = v15 & 1;
    unint64_t v120 = v26;
    uint64_t v121 = v25;
    *(void *)(v0 + 1016) = v26;
    *(void *)(v0 + 1008) = v25;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      int v33 = *(_DWORD *)(v0 + 1112);
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 67109376;
      *(_DWORD *)(v0 + 1072) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 8) = 1024;
      *(_DWORD *)(v0 + 1076) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Ask request END - Accept {didAutoAccept: %{BOOL}d, shouldExtractMedia: %{BOOL}d}", (uint8_t *)v34, 0xEu);
      swift_slowDealloc();
    }
    uint64_t v123 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v128 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    uint64_t v36 = *(void *)(v0 + 688);
    uint64_t v125 = *(void *)(v0 + 672);
    uint64_t v37 = *(void *)(v0 + 664);
    uint64_t v38 = *(void *)(v0 + 608);
    uint64_t v39 = *(void *)(v0 + 576);
    uint64_t v40 = *(void *)(v0 + 560);

    v132._countAndFlagsBits = sub_10048C2F0();
    v132._object = v41;
    char v136 = v42;
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v35(v37, v38);
    SFAirDropReceive.AskRequest.type.getter();
    v123(v39, v40);
    char v43 = SFAirDrop.TransferType.isFiles.getter();
    v128(v36, v125);
    if ((v43 & 1) == 0) {
      goto LABEL_17;
    }
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v46 = *(void *)(v0 + 664);
    uint64_t v47 = *(void *)(v0 + 608);
    uint64_t v48 = *(void *)(v0 + 576);
    uint64_t v49 = *(void *)(v0 + 560);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v45(v46, v47);
    char v50 = SFAirDropReceive.AskRequest.senderIsMe.getter();
    v44(v48, v49);
    if (v50) {
      goto LABEL_17;
    }
    os_log_type_t v73 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v74 = *(void *)(v0 + 664);
    uint64_t v75 = *(void *)(v0 + 608);
    CurrentValueSubject.value.getter();
    char v76 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
    v73(v74, v75);
    if ((v76 & 1) == 0) {
      goto LABEL_17;
    }
    if (v136 != 2) {
      goto LABEL_17;
    }
    uint64_t v77 = *(void *)(v0 + 744);
    uint64_t v78 = *(void *)(v0 + 704);
    uint64_t v79 = *(void *)(v0 + 696);
    (*(void (**)(uint64_t, void, uint64_t))(v78 + 104))(v77, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v79);
    sub_10053BB90(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
    char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v81 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    *(void *)(v0 + 1024) = v81;
    *(void *)(v0 + 1032) = (v78 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v81(v77, v79);
    if (v80)
    {
LABEL_17:
      uint64_t v129 = *(void (**)(void, void, void))(*(void *)(v0 + 704) + 16);
      v129(*(void *)(v0 + 712), *(void *)(v0 + 760), *(void *)(v0 + 696));
      swift_retain_n();
      sub_1003950CC(v132._countAndFlagsBits, (uint64_t)v132._object, v136);
      int v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
        uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
        uint64_t v119 = *(void *)(v0 + 704);
        uint64_t v114 = *(void *)(v0 + 696);
        uint64_t v115 = *(void *)(v0 + 712);
        uint64_t v53 = *(void *)(v0 + 664);
        uint64_t v110 = *(void *)(v0 + 608);
        uint64_t v54 = *(void *)(v0 + 576);
        uint64_t v112 = *(void *)(v0 + 560);
        unint64_t v126 = v51;
        uint64_t v55 = swift_slowAlloc();
        v140[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 67109890;
        os_log_type_t type = v52;
        CurrentValueSubject.value.getter();
        char v56 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
        v111(v53, v110);
        swift_release();
        *(_DWORD *)(v0 + 1084) = v56 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v55 + 8) = 1024;
        CurrentValueSubject.value.getter();
        SFAirDropReceive.Transfer.askRequest.getter();
        v111(v53, v110);
        char v57 = SFAirDropReceive.AskRequest.senderIsMe.getter();
        v113(v54, v112);
        swift_release();
        *(_DWORD *)(v0 + 1080) = v57 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v55 + 14) = 2080;
        sub_1003950CC(v132._countAndFlagsBits, (uint64_t)v132._object, v136);
        unint64_t v58 = sub_100485954(v132, v136);
        unint64_t v60 = v59;
        sub_1003950E4(v132._countAndFlagsBits, (uint64_t)v132._object, v136);
        *(void *)(v0 + 472) = sub_100254634(v58, v60, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003950E4(v132._countAndFlagsBits, (uint64_t)v132._object, v136);
        sub_1003950E4(v132._countAndFlagsBits, (uint64_t)v132._object, v136);
        *(_WORD *)(v55 + 24) = 2080;
        sub_10053BB90(&qword_100978608, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 464) = sub_100254634(v61, v62, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v137 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
        v137(v115, v114);
        _os_log_impl((void *)&_mh_execute_header, v126, type, "Ask sensitive preview SKIP. {transfer.isPreviewSensitive: %{BOOL}d, isSenderMe: %{BOOL}d, userSafetyMode: %s, askStepDestination: %s}", (uint8_t *)v55, 0x22u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v63 = *(void *)(v0 + 712);
        uint64_t v64 = *(void *)(v0 + 704);
        uint64_t v65 = *(void *)(v0 + 696);
        swift_release_n();

        sub_1003950E4(v132._countAndFlagsBits, (uint64_t)v132._object, v136);
        sub_1003950E4(v132._countAndFlagsBits, (uint64_t)v132._object, v136);
        uint64_t v137 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
        v137(v63, v65);
      }
      v129(*(void *)(v0 + 488), *(void *)(v0 + 760), *(void *)(v0 + 696));
      SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)();
      v137(*(void *)(v0 + 760), *(void *)(v0 + 696));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v66 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_40;
    }
    uint64_t v130 = v81;
    sub_1003950E4(v132._countAndFlagsBits, (uint64_t)v132._object, 2u);
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Ask sensitive preview START", v84, 2u);
      swift_slowDealloc();
    }
    uint64_t v85 = *(void *)(v0 + 848);
    uint64_t v86 = *(void *)(v0 + 760);
    uint64_t v87 = *(void *)(v0 + 520);
    uint64_t v88 = *(void *)(v0 + 504);

    sub_100278C8C(v88 + v85, v0 + 56);
    sub_10026BB6C((void *)(v0 + 56), *(void *)(v0 + 80));
    CurrentValueSubject.value.getter();
    sub_1005B0F3C(v86, v87);
    if (v118)
    {
      uint64_t v89 = *(void *)(v0 + 760);
      uint64_t v90 = *(void *)(v0 + 696);
      (*(void (**)(void, void))(v0 + 816))(*(void *)(v0 + 624), *(void *)(v0 + 608));
      sub_100250CB0(v121, v120);
      v130(v89, v90);
      sub_10024D338(v0 + 56);
LABEL_39:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v66 = *(uint64_t (**)(void))(v0 + 8);
LABEL_40:
      return v66();
    }
    uint64_t v134 = *(void (**)(uint64_t, void, uint64_t))(v0 + 952);
    uint64_t v139 = *(void (**)(uint64_t, uint64_t))(v0 + 944);
    uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v133 = *(void *)(v0 + 664);
    uint64_t v105 = *(void *)(v0 + 608);
    uint64_t v106 = *(void *)(v0 + 552);
    uint64_t v107 = *(void *)(v0 + 536);
    uint64_t v108 = *(void *)(v0 + 520);
    v104(*(void *)(v0 + 624), v105);
    sub_10024D338(v0 + 56);
    uint64_t v109 = sub_10000A844(&qword_10096B2C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16))(v106, v108, v109);
    v134(v106, enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:), v107);
    sub_1006BE3BC(v106, v133);
    v139(v106, v107);
    v104(v133, v105);
    return _swift_task_switch(sub_100517430, 0, 0);
  }
  int v18 = *v1;
  *(_OWORD *)(v0 + 336) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  *(void *)(v0 + 368) = 0;
  sub_10000A7E8(v0 + 336, &qword_1009786A0);
  if (v18 != 1)
  {
    uint64_t v25 = 0;
    char v15 = 0;
    unint64_t v26 = 0xF000000000000000;
    goto LABEL_13;
  }
  char v15 = 0;
  uint64_t v16 = *(void *)(v0 + 704);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
LABEL_6:
  v1[2] = v15 & 1;
  uint64_t v19 = *(void *)(v0 + 736);
  uint64_t v20 = *(void *)(v0 + 696);
  v17(v19, *(void *)(v0 + 760), v20);
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v19, v20);
  uint64_t v22 = *(uint64_t **)(v0 + 736);
  uint64_t v23 = *(void *)(v0 + 704);
  uint64_t v24 = *(void *)(v0 + 696);
  if (v21 == enum case for SFAirDropReceive.ItemDestination.metadata(_:))
  {
    (*(void (**)(void, uint64_t))(v23 + 96))(*(void *)(v0 + 736), v24);
    uint64_t v25 = *v22;
    unint64_t v26 = v22[1];
    sub_100278C78(*v22, v26);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Retrieved receiverMetadata via destination", v29, 2u);
      swift_slowDealloc();
    }
    sub_100250CB0(v25, v26);

    if (v26 >> 60 == 15) {
      goto LABEL_33;
    }
    goto LABEL_13;
  }
  uint64_t v67 = *(void *)(v0 + 504) + *(void *)(v0 + 848);
  uint64_t v68 = *(void (**)(uint64_t *, uint64_t))(v23 + 8);
  *(void *)(v0 + 960) = v68;
  *(void *)(v0 + 968) = (v23 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v68(v22, v24);
  sub_100278C8C(v67, v0 + 136);
  sub_10000A844(&qword_1009786B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)(v0 + 408) = 0;
    *(_OWORD *)(v0 + 376) = 0u;
    *(_OWORD *)(v0 + 392) = 0u;
    sub_10000A7E8(v0 + 376, &qword_1009786B8);
    uint64_t v25 = 0;
    unint64_t v26 = 0xF000000000000000;
LABEL_33:
    uint64_t v91 = v25;
    uint64_t v92 = SFAirDropReceive.AskRequest.customPayload.getter();
    unint64_t v94 = v93;
    sub_100250CB0(v92, v93);
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      if (v94 >> 60 == 15) {
        uint64_t v97 = "Failed to receive senderMetadata";
      }
      else {
        uint64_t v97 = "Receiver metadata was not found";
      }
      uint64_t v98 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v98 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, v97, v98, 2u);
      swift_slowDealloc();
    }
    uint64_t v99 = *(void *)(v0 + 760);
    uint64_t v100 = *(void *)(v0 + 704);
    uint64_t v101 = *(void *)(v0 + 696);

    uint64_t v102 = type metadata accessor for SFAirDropReceive.Failure();
    sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v102 - 8) + 104))(v103, enum case for SFAirDropReceive.Failure.badRequest(_:), v102);
    swift_willThrow();
    sub_100250CB0(v91, v26);
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v101);
    goto LABEL_39;
  }
  uint64_t v69 = *(void *)(v0 + 784);
  uint64_t v70 = *(void *)(v0 + 504);
  sub_10000A7E8(v0 + 376, &qword_1009786B8);
  uint64_t v138 = (uint64_t (*)(uint64_t))((char *)&dword_100974690 + dword_100974690);
  char v71 = (void *)swift_task_alloc();
  *(void *)(v0 + 976) = v71;
  *char v71 = v0;
  v71[1] = sub_100516448;
  return v138(v70 + v69);
}

uint64_t sub_100516220()
{
  uint64_t v1 = *(void *)(v0 + 768);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100516298, v1, 0);
}

uint64_t sub_100516298()
{
  sub_10000A7E8(*(void *)(v0 + 528), &qword_10096CC70);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100516448(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[123] = a1;
  v5[124] = a2;
  v5[125] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[96];
  if (v2) {
    uint64_t v7 = sub_10051727C;
  }
  else {
    uint64_t v7 = sub_100516584;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100516584()
{
  uint64_t v95 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Retrieved receiverMetadata via content handler", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v78 = *(void *)(v0 + 1000);
  unint64_t v4 = *(void *)(v0 + 992);
  uint64_t v5 = *(void *)(v0 + 984);
  int v6 = *(unsigned __int8 *)(v0 + 1118);
  *(unsigned char *)(v0 + 1119) = v6;
  uint64_t v79 = v5;
  unint64_t v80 = v4;
  *(void *)(v0 + 1016) = v4;
  *(void *)(v0 + 1008) = v5;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    int v9 = *(_DWORD *)(v0 + 1112);
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109376;
    *(_DWORD *)(v0 + 1072) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 1024;
    *(_DWORD *)(v0 + 1076) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ask request END - Accept {didAutoAccept: %{BOOL}d, shouldExtractMedia: %{BOOL}d}", (uint8_t *)v10, 0xEu);
    swift_slowDealloc();
  }
  unint64_t v81 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
  uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
  uint64_t v12 = *(void *)(v0 + 688);
  uint64_t v83 = *(void *)(v0 + 672);
  uint64_t v13 = *(void *)(v0 + 664);
  uint64_t v14 = *(void *)(v0 + 608);
  uint64_t v15 = *(void *)(v0 + 576);
  uint64_t v16 = *(void *)(v0 + 560);

  unint64_t v89 = sub_10048C2F0();
  int v18 = v17;
  char v91 = v19;
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v11(v13, v14);
  SFAirDropReceive.AskRequest.type.getter();
  v81(v15, v16);
  char v20 = SFAirDrop.TransferType.isFiles.getter();
  v84(v12, v83);
  if ((v20 & 1) == 0) {
    goto LABEL_7;
  }
  int v21 = v18;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
  uint64_t v24 = *(void *)(v0 + 664);
  uint64_t v25 = *(void *)(v0 + 608);
  uint64_t v26 = *(void *)(v0 + 576);
  uint64_t v27 = *(void *)(v0 + 560);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v23(v24, v25);
  char v28 = SFAirDropReceive.AskRequest.senderIsMe.getter();
  v22(v26, v27);
  int v18 = v21;
  if (v28) {
    goto LABEL_7;
  }
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
  uint64_t v48 = *(void *)(v0 + 664);
  uint64_t v49 = *(void *)(v0 + 608);
  CurrentValueSubject.value.getter();
  char v50 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
  v47(v48, v49);
  if ((v50 & 1) == 0) {
    goto LABEL_7;
  }
  if (v91 != 2) {
    goto LABEL_7;
  }
  uint64_t v51 = *(void *)(v0 + 744);
  uint64_t v52 = *(void *)(v0 + 704);
  uint64_t v53 = *(void *)(v0 + 696);
  (*(void (**)(uint64_t, void, uint64_t))(v52 + 104))(v51, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v53);
  sub_10053BB90(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
  *(void *)(v0 + 1024) = v55;
  *(void *)(v0 + 1032) = (v52 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v55(v51, v53);
  if (v54)
  {
LABEL_7:
    uint64_t v86 = *(void (**)(void, void, void))(*(void *)(v0 + 704) + 16);
    v86(*(void *)(v0 + 712), *(void *)(v0 + 760), *(void *)(v0 + 696));
    swift_retain_n();
    sub_1003950CC(v89, (uint64_t)v18, v91);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      os_log_type_t v73 = *(void (**)(uint64_t, uint64_t))(v0 + 832);
      uint64_t v85 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
      uint64_t v77 = *(void *)(v0 + 704);
      uint64_t v74 = *(void *)(v0 + 696);
      uint64_t v75 = *(void *)(v0 + 712);
      uint64_t v31 = *(void *)(v0 + 664);
      uint64_t v32 = *(void *)(v0 + 608);
      log = v29;
      uint64_t v33 = *(void *)(v0 + 576);
      uint64_t v72 = *(void *)(v0 + 560);
      uint64_t v34 = swift_slowAlloc();
      v94[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 67109890;
      os_log_type_t type = v30;
      CurrentValueSubject.value.getter();
      char v35 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
      v85(v31, v32);
      swift_release();
      *(_DWORD *)(v0 + 1084) = v35 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v34 + 8) = 1024;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v85(v31, v32);
      char v36 = SFAirDropReceive.AskRequest.senderIsMe.getter();
      v73(v33, v72);
      swift_release();
      *(_DWORD *)(v0 + 1080) = v36 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v34 + 14) = 2080;
      sub_1003950CC(v89, (uint64_t)v18, v91);
      v97._countAndFlagsBits = v89;
      v97._object = v18;
      unint64_t v37 = sub_100485954(v97, v91);
      unint64_t v39 = v38;
      sub_1003950E4(v89, (uint64_t)v18, v91);
      *(void *)(v0 + 472) = sub_100254634(v37, v39, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003950E4(v89, (uint64_t)v18, v91);
      sub_1003950E4(v89, (uint64_t)v18, v91);
      *(_WORD *)(v34 + 24) = 2080;
      sub_10053BB90(&qword_100978608, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 464) = sub_100254634(v40, v41, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
      v92(v75, v74);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Ask sensitive preview SKIP. {transfer.isPreviewSensitive: %{BOOL}d, isSenderMe: %{BOOL}d, userSafetyMode: %s, askStepDestination: %s}", (uint8_t *)v34, 0x22u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v42 = *(void *)(v0 + 712);
      uint64_t v43 = *(void *)(v0 + 704);
      uint64_t v44 = *(void *)(v0 + 696);
      swift_release_n();

      sub_1003950E4(v89, (uint64_t)v18, v91);
      sub_1003950E4(v89, (uint64_t)v18, v91);
      uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v92(v42, v44);
    }
    v86(*(void *)(v0 + 488), *(void *)(v0 + 760), *(void *)(v0 + 696));
    SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)();
    v92(*(void *)(v0 + 760), *(void *)(v0 + 696));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  uint64_t v87 = v55;
  sub_1003950E4(v89, (uint64_t)v18, 2u);
  char v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    unint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Ask sensitive preview START", v58, 2u);
    swift_slowDealloc();
  }
  uint64_t v59 = *(void *)(v0 + 848);
  uint64_t v60 = *(void *)(v0 + 760);
  uint64_t v61 = *(void *)(v0 + 520);
  uint64_t v62 = *(void *)(v0 + 504);

  sub_100278C8C(v62 + v59, v0 + 56);
  uint64_t v93 = v0 + 56;
  sub_10026BB6C((void *)(v0 + 56), *(void *)(v0 + 80));
  CurrentValueSubject.value.getter();
  sub_1005B0F3C(v60, v61);
  if (v78)
  {
    uint64_t v63 = *(void *)(v0 + 760);
    uint64_t v64 = *(void *)(v0 + 696);
    (*(void (**)(void, void))(v0 + 816))(*(void *)(v0 + 624), *(void *)(v0 + 608));
    sub_100250CB0(v79, v80);
    v87(v63, v64);
    sub_10024D338(v93);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v45();
  }
  uint64_t v88 = *(void (**)(uint64_t, void, uint64_t))(v0 + 952);
  uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v0 + 944);
  uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
  uint64_t v66 = *(void *)(v0 + 664);
  uint64_t v67 = *(void *)(v0 + 608);
  uint64_t v68 = *(void *)(v0 + 552);
  uint64_t v69 = *(void *)(v0 + 536);
  uint64_t v70 = *(void *)(v0 + 520);
  v65(*(void *)(v0 + 624), v67);
  sub_10024D338(v93);
  uint64_t v71 = sub_10000A844(&qword_10096B2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16))(v68, v70, v71);
  v88(v68, enum case for SFAirDropReceive.Transfer.State.waitingForSensitivePreviewIntervention(_:), v69);
  sub_1006BE3BC(v68, v66);
  v90(v68, v69);
  v65(v66, v67);
  return _swift_task_switch(sub_100517430, 0, 0);
}

uint64_t sub_10051727C()
{
  (*(void (**)(void, void))(v0 + 960))(*(void *)(v0 + 760), *(void *)(v0 + 696));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100517430()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = swift_task_alloc();
  v0[130] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[131] = v3;
  *(void *)(v3 + 16) = v1;
  unint64_t v4 = (void *)swift_task_alloc();
  v0[132] = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_100517538;
  uint64_t v5 = v0[91];
  uint64_t v6 = v0[87];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_1009786A8, v2, sub_10053C358, v3, 0, 0, v6);
}

uint64_t sub_100517538()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1064) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100517A2C;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 768);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_10051766C;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_10051766C()
{
  uint64_t v22 = v0;
  char v20 = (void (**)(uint64_t, uint64_t, uint64_t))(v0[88] + 16);
  char v19 = *v20;
  (*v20)(v0[90], v0[91], v0[87]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v18 = (void (*)(uint64_t, uint64_t))v0[128];
    uint64_t v3 = v0[93];
    uint64_t v4 = v0[90];
    uint64_t v5 = v0[87];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v19(v3, v4, v5);
    uint64_t v7 = String.init<A>(describing:)();
    v0[60] = sub_100254634(v7, v8, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ask sensitive preview END. Accepting transfer for sensitive content {destination: %s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int v9 = (void (*)(uint64_t, uint64_t))v0[128];
    uint64_t v10 = v0[90];
    uint64_t v11 = v0[87];

    v9(v10, v11);
  }
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[128];
  uint64_t v13 = v0[91];
  uint64_t v14 = v0[87];
  uint64_t v15 = v0[65];
  v19(v0[61], v13, v14);
  SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)();
  v12(v13, v14);
  sub_10000A7E8(v15, &qword_10096CC70);
  ((void (*)(void, void))v0[128])(v0[95], v0[87]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100517A2C()
{
  uint64_t v1 = *(void *)(v0 + 768);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100517AA4, v1, 0);
}

uint64_t sub_100517AA4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[128];
  uint64_t v2 = v0[95];
  uint64_t v3 = v0[87];
  uint64_t v4 = v0[65];
  sub_100250CB0(v0[126], v0[127]);
  sub_10000A7E8(v4, &qword_10096CC70);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100517C80()
{
  sub_10024D338(v0 + 216);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100517E28(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Transfer();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Failure();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  v3[11] = static AirDropActor.shared;
  return _swift_task_switch(sub_100517F84, v6, 0);
}

uint64_t sub_100517F84()
{
  uint64_t v1 = v0[4];
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  v0[12] = *(void *)(v1 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10051804C;
  uint64_t v3 = v0[3];
  return sub_100672CC8(v3);
}

uint64_t sub_10051804C()
{
  swift_task_dealloc();
  uint64_t v0 = static AirDropActor.shared;
  return _swift_task_switch(sub_100518150, v0, 0);
}

uint64_t sub_100518150()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  uint64_t v4 = swift_allocError();
  v0[14] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100518260;
  return sub_100672230(v4);
}

uint64_t sub_100518260()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  swift_errorRelease();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[16] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1005183E8;
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[7];
  return sub_1006C5AA8(v5, v4);
}

uint64_t sub_1005183E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  return _swift_task_switch(sub_1005184F8, v1, 0);
}

uint64_t sub_1005184F8()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[2];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  uint64_t v5 = enum case for SFAirDropReceive.AskResponse.error(_:);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  uint64_t v7 = _s6RunnerC19PreAcceptRunResultsVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4 + *(int *)(v7 + 20), v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100518604(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Failure();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Transfer();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  sub_10000A844(&qword_100978508);
  v3[12] = swift_task_alloc();
  sub_10000A844(&qword_100970BD0);
  v3[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  v3[14] = v6;
  v3[15] = *(void *)(v6 - 8);
  v3[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v3[17] = v7;
  v3[18] = *(void *)(v7 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v8 = static AirDropActor.shared;
  v3[22] = static AirDropActor.shared;
  return _swift_task_switch(sub_1005188A4, v8, 0);
}

uint64_t sub_1005188A4()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[3], v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3) == enum case for SFAirDropReceive.AskResponse.accept(_:))
  {
    uint64_t v4 = v0[21];
    uint64_t v5 = v0[17];
    uint64_t v6 = v0[18];
    uint64_t v7 = v0[16];
    (*(void (**)(uint64_t, void))(v0[15] + 96))(v7, v0[14]);
    uint64_t v8 = v7 + *(int *)(sub_10000A844(&qword_10096C950) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v7, v5);
    uint64_t v9 = type metadata accessor for SFAirDropReceive.AcceptContext();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[23] = v10;
    void *v10 = v0;
    v10[1] = sub_100518C3C;
    uint64_t v11 = v0[13];
    return sub_10051A684(v11);
  }
  else
  {
    uint64_t v13 = v0[15];
    uint64_t v14 = type metadata accessor for SFError();
    sub_10053BB90(&qword_10096C568, (void (*)(uint64_t))&type metadata accessor for SFError);
    uint64_t v15 = swift_allocError();
    uint64_t v17 = v16;
    _StringGuts.grow(_:)(60);
    v18._object = (void *)0x80000001007C0E50;
    v18._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v18);
    sub_10053BB90(&qword_100978510, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskResponse);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 125;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    *uint64_t v17 = 0;
    v17[1] = 0xE000000000000000;
    v17[2] = 0xD00000000000006ALL;
    v17[3] = 0x80000001007C0E90;
    v17[4] = 97;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v17, enum case for SFError.unexpected(_:), v14);
    swift_willThrow();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    uint64_t v22 = v0[16];
    uint64_t v23 = v0[14];
    v0[46] = v15;
    v21(v22, v23);
    swift_errorRetain();
    SFAirDropReceive.Failure.init(_:)();
    uint64_t v24 = static AirDropActor.shared;
    return _swift_task_switch(sub_100519D18, v24, 0);
  }
}

uint64_t sub_100518C3C()
{
  uint64_t v2 = (void *)*v1;
  v2[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[22];
    return _swift_task_switch(sub_10051A1CC, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[25] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_100518DB0;
    uint64_t v5 = v2[21];
    return sub_10051C1EC(v5);
  }
}

uint64_t sub_100518DB0(uint64_t a1, double a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *v3;
  *(void *)(v5 + 208) = a1;
  *(double *)(v5 + 216) = a2;
  *(void *)(v5 + 224) = v2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 176);
  if (v2) {
    uint64_t v7 = sub_10051A26C;
  }
  else {
    uint64_t v7 = sub_100518EEC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100518EEC()
{
  sub_1006C63D4();
  _s6RunnerC19PreAcceptRunResultsVMa(0);
  char v1 = SFAirDropReceive.Transfer.isPreviewSensitive.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[29] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100518FAC;
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[21];
  return sub_10051F840(v4, v3, v5, v1 & 1);
}

uint64_t sub_100518FAC(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 400) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(void *)(v3 + 176);
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_10051A328, v4, 0);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v3 + 248) = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_100519134;
    uint64_t v6 = *(void *)(v3 + 160);
    uint64_t v7 = *(void *)(v3 + 208);
    return sub_1006BEEC4(v7, v6);
  }
}

uint64_t sub_100519134(uint64_t a1, double a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  *(void *)(v6 + 256) = a1;
  *(void *)(v6 + 264) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(void *)(v6 + 176);
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_10051A3E4, v8, 0);
  }
  else
  {
    double v9 = *(double *)(v6 + 216) + a2;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v6 + 272) = v10;
    void *v10 = v7;
    v10[1] = sub_1005192F0;
    char v11 = *(unsigned char *)(v6 + 400);
    uint64_t v12 = *(void *)(v6 + 208);
    uint64_t v13 = *(void *)(v6 + 152);
    uint64_t v14 = *(void *)(v6 + 160);
    uint64_t v15 = *(void *)(v6 + 96);
    return sub_10052319C(v13, v15, v11, v12, a1, v14, v9);
  }
}

uint64_t sub_1005192F0(char a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  *(unsigned char *)(v4 + 401) = a1;
  *(void *)(v4 + 280) = a2;
  *(void *)(v4 + 288) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = *(void *)(v4 + 176);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_10051A4B4, v5, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v4 + 296) = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_100519480;
    uint64_t v7 = *(void *)(v4 + 104);
    uint64_t v8 = *(void *)(v4 + 96);
    return sub_100528948(v8, v7);
  }
}

uint64_t sub_100519480(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *v3;
  *(void *)(v5 + 304) = a2;
  *(void *)(v5 + 312) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = *(void *)(v5 + 176);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_10051A584, v7, 0);
  }
  else
  {
    *(void *)(v5 + 320) = static AirDropActor.shared;
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v5 + 328) = v8;
    *uint64_t v8 = v6;
    v8[1] = sub_10051966C;
    uint64_t v9 = *(void *)(v5 + 280);
    uint64_t v10 = *(unsigned __int8 *)(v5 + 401);
    uint64_t v11 = *(void *)(v5 + 256);
    uint64_t v12 = *(unsigned __int8 *)(v5 + 400);
    uint64_t v13 = *(void *)(v5 + 208);
    uint64_t v14 = *(void *)(v5 + 152);
    uint64_t v15 = *(void *)(v5 + 80);
    return sub_1006C4510(v15, v13, v11, v9, v12, v10, v14, a1);
  }
}

uint64_t sub_10051966C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 320);
  if (v0) {
    uint64_t v4 = sub_100519B80;
  }
  else {
    uint64_t v4 = sub_100519798;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100519798()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100519838;
  return sub_100672230(0);
}

uint64_t sub_100519838()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  return _swift_task_switch(sub_100519948, v1, 0);
}

uint64_t sub_100519948()
{
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v0[44] = v6;
  v0[45] = (v5 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v6(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100519A10, v1, 0);
}

uint64_t sub_100519A10()
{
  uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[44];
  uint64_t v1 = v0[20];
  uint64_t v12 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[2];
  sub_10000A7E8(v0[12], &qword_100978508);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(v2, v4);
  v9(v1, v4);
  sub_10000A7E8(v5, &qword_100970BD0);
  v9(v12, v4);
  v13(v8, v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100519B80()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100519C18, v1, 0);
}

uint64_t sub_100519C18()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[13];
  sub_10000A7E8(v0[12], &qword_100978508);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v1, v3);
  v6(v2, v3);
  sub_10000A7E8(v5, &qword_100970BD0);
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[17];
  v0[46] = v0[42];
  v6(v7, v8);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v9 = static AirDropActor.shared;
  return _swift_task_switch(sub_100519D18, v9, 0);
}

uint64_t sub_100519D18()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  uint64_t v4 = swift_allocError();
  v0[47] = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[48] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100519E38;
  return sub_100672230(v4);
}

uint64_t sub_100519E38()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  swift_errorRelease();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[49] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100519FC8;
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[2];
  return sub_1006C5AA8(v5, v4);
}

uint64_t sub_100519FC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_task_dealloc();
  return _swift_task_switch(sub_10051A0D8, v1, 0);
}

uint64_t sub_10051A0D8()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10051A1CC()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0[18] + 8);
  uint64_t v3 = v0[21];
  v0[46] = v0[24];
  v2(v3, v1);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v4 = static AirDropActor.shared;
  return _swift_task_switch(sub_100519D18, v4, 0);
}

uint64_t sub_10051A26C()
{
  uint64_t v1 = v0[18];
  sub_10000A7E8(v0[13], &qword_100970BD0);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[17];
  v0[46] = v0[28];
  v2(v3, v4);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_100519D18, v5, 0);
}

uint64_t sub_10051A328()
{
  uint64_t v1 = v0[18];
  sub_10000A7E8(v0[13], &qword_100970BD0);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[17];
  v0[46] = v0[30];
  v2(v3, v4);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_100519D18, v5, 0);
}

uint64_t sub_10051A3E4()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0[18] + 8);
  v2(v0[20], v0[17]);
  sub_10000A7E8(v1, &qword_100970BD0);
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[17];
  v0[46] = v0[33];
  v2(v3, v4);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_100519D18, v5, 0);
}

uint64_t sub_10051A4B4()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0[18] + 8);
  v2(v0[20], v0[17]);
  sub_10000A7E8(v1, &qword_100970BD0);
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[17];
  v0[46] = v0[36];
  v2(v3, v4);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_100519D18, v5, 0);
}

uint64_t sub_10051A584()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[13];
  sub_10000A7E8(v0[12], &qword_100978508);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v1, v3);
  v6(v2, v3);
  sub_10000A7E8(v5, &qword_100970BD0);
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[17];
  v0[46] = v0[39];
  v6(v7, v8);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v9 = static AirDropActor.shared;
  return _swift_task_switch(sub_100519D18, v9, 0);
}

uint64_t sub_10051A684(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.Failure();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  sub_10000A844(&qword_10096C920);
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDrop.ContactRequest();
  v2[19] = v4;
  v2[20] = *(void *)(v4 - 8);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v2[24] = v5;
  v2[25] = *(void *)(v5 - 8);
  v2[26] = swift_task_alloc();
  uint64_t v6 = *(void *)(sub_10000A844(&qword_100970C58) - 8);
  v2[27] = v6;
  v2[28] = *(void *)(v6 + 64);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
  v2[31] = v7;
  v2[32] = *(void *)(v7 - 8);
  v2[33] = swift_task_alloc();
  sub_10000A844(&qword_100970BA8);
  v2[34] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDrop.ContactInfo();
  v2[35] = v8;
  v2[36] = *(void *)(v8 - 8);
  v2[37] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferType();
  v2[38] = v9;
  v2[39] = *(void *)(v9 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDropReceive.AskRequest();
  v2[42] = v10;
  v2[43] = *(void *)(v10 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer();
  v2[46] = v11;
  v2[47] = *(void *)(v11 - 8);
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v12 = static AirDropActor.shared;
  v2[51] = static AirDropActor.shared;
  return _swift_task_switch(sub_10051AB30, v12, 0);
}

uint64_t sub_10051AB30()
{
  uint64_t v70 = v0;
  uint64_t v1 = v0[50];
  uint64_t v3 = v0[46];
  uint64_t v2 = v0[47];
  uint64_t v4 = v0[45];
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[41];
  uint64_t v8 = v0[39];
  uint64_t v68 = v0[38];
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v67(v1, v3);
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v5);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v7, v68);
  uint64_t v11 = v0[38];
  uint64_t v12 = v0[39];
  if (v10 == enum case for SFAirDrop.TransferType.exchange(_:))
  {
    uint64_t v14 = v0[35];
    uint64_t v13 = v0[36];
    uint64_t v15 = v0[34];
    (*(void (**)(void, uint64_t))(v12 + 96))(v0[41], v11);
    swift_bridgeObjectRelease();
    sub_1004ED104(v15);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v14) == 1)
    {
      uint64_t v17 = (void *)v0[33];
      uint64_t v16 = v0[34];
      uint64_t v18 = v0[31];
      uint64_t v19 = v0[32];
      *uint64_t v17 = 0xD000000000000012;
      v17[1] = 0x80000001007BAFC0;
      (*(void (**)(void *, void, uint64_t))(v19 + 104))(v17, enum case for SFAirDrop.ContactInfo.Handle.email(_:), v18);
      SFAirDrop.ContactInfo.init(givenName:fullName:handle:vcard:)();
      sub_10000A7E8(v16, &qword_100970BA8);
    }
    else
    {
      (*(void (**)(void, void, void))(v0[36] + 32))(v0[37], v0[34], v0[35]);
    }
    v0[52] = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Share Contacts Permission START", v32, 2u);
      swift_slowDealloc();
    }
    uint64_t v33 = v0[49];
    uint64_t v34 = v0[37];
    uint64_t v35 = v0[30];
    uint64_t v36 = v0[14];

    uint64_t v37 = v36 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
    swift_beginAccess();
    sub_100278C8C(v37, (uint64_t)(v0 + 2));
    sub_10026BB6C(v0 + 2, v0[5]);
    CurrentValueSubject.value.getter();
    sub_1005B186C(v33, v34, v35);
    uint64_t v61 = v0[46];
    uint64_t v63 = v0[48];
    uint64_t v40 = v0[36];
    uint64_t v41 = v0[37];
    uint64_t v42 = v0[35];
    uint64_t v43 = v0[26];
    uint64_t v65 = v0[29];
    uint64_t v66 = v0[27];
    uint64_t v45 = v0[24];
    uint64_t v44 = v0[25];
    buf = (uint8_t *)v0[18];
    uint64_t v59 = v0[30];
    ((void (*)(void))v67)(v0[49]);
    sub_10024D338((uint64_t)(v0 + 2));
    uint64_t v46 = v43 + *(int *)(sub_10000A844(&qword_100972418) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v43, v41, v42);
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_1009723F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(v46, v59, v47);
    (*(void (**)(uint64_t, void, uint64_t))(v44 + 104))(v43, enum case for SFAirDropReceive.Transfer.State.waitingForShareContactPermissionResponse(_:), v45);
    sub_1006BE3BC(v43, v63);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    v67(v63, v61);
    uint64_t v48 = type metadata accessor for TaskPriority();
    (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(buf, 1, 1, v48);
    sub_10024A330(v59, v65, &qword_100970C58);
    unint64_t v49 = (*(unsigned __int8 *)(v66 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    uint64_t v50 = swift_allocObject();
    v0[53] = v50;
    sub_10024D388(v65, v50 + v49, &qword_100970C58);
    swift_retain();
    uint64_t v51 = (void *)swift_task_alloc();
    v0[54] = v51;
    *uint64_t v51 = v0;
    v51[1] = sub_10051B590;
    uint64_t v52 = v0[22];
    uint64_t v53 = v0[18];
    uint64_t v54 = v0[19];
    uint64_t v55 = v0[14];
    return concurrentRace<A>(priority:operation:against:)(v52, v53, &unk_100978630, v50, &unk_100978640, v55, v54);
  }
  else
  {
    Swift::String v20 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v20(v0[41], v11);
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = v0[48];
      uint64_t v24 = v0[44];
      uint64_t v56 = v0[46];
      uint64_t v57 = v0[42];
      unint64_t v58 = v9;
      uint64_t v25 = v0[40];
      uint64_t v60 = v0[38];
      uint64_t v62 = v20;
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v67(v23, v56);
      SFAirDropReceive.AskRequest.type.getter();
      v58(v24, v57);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v29 = v28;
      v62(v25, v60);
      v0[10] = sub_100254634(v27, v29, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Share Contacts Permission SKIP. {type: %s}", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[20] + 56))(v0[13], 1, 1, v0[19]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
}

uint64_t sub_10051B590()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 408);
  sub_10000A7E8(*(void *)(v2 + 144), &qword_10096C920);
  swift_release();
  swift_release();
  if (v0) {
    uint64_t v4 = sub_10051BAF8;
  }
  else {
    uint64_t v4 = sub_10051B720;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10051B720()
{
  unint64_t v28 = v0;
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v26 = *(void (**)(uint64_t, void, uint64_t))(v3 + 32);
  v26(v1, v0[22], v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v24 = v0[35];
    uint64_t v25 = v0[37];
    uint64_t v22 = v0[30];
    uint64_t v23 = v0[36];
    uint64_t v8 = v0[20];
    uint64_t v7 = v0[21];
    uint64_t v21 = v0[19];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_10053BB90(&qword_100970C80, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[12] = sub_100254634(v10, v11, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v21);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Share Contacts Permission END {response: %s}", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10000A7E8(v22, &qword_100970C58);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    uint64_t v13 = v0[36];
    uint64_t v12 = v0[37];
    uint64_t v14 = v0[35];
    uint64_t v15 = v0[30];
    uint64_t v17 = v0[20];
    uint64_t v16 = v0[21];
    uint64_t v18 = v0[19];

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    sub_10000A7E8(v15, &qword_100970C58);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v26(v0[13], v0[23], v0[19]);
  (*(void (**)(void, void, uint64_t, void))(v0[20] + 56))(v0[13], 0, 1, v0[19]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_10051BAF8()
{
  *(void *)(v0 + 88) = *(void *)(v0 + 440);
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    int v1 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 128) + 88))(*(void *)(v0 + 136), *(void *)(v0 + 120));
    *(_DWORD *)(v0 + 464) = v1;
    if (v1 == enum case for SFAirDropReceive.Failure.receiverCancelled(_:))
    {
      swift_errorRelease();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Share Contacts Permission END - Cancelling exchange", v4, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for CancellationError();
      sub_10053BB90(&qword_10096CCB8, (void (*)(uint64_t))&type metadata accessor for CancellationError);
      uint64_t v5 = swift_allocError();
      *(void *)(v0 + 448) = v5;
      CancellationError.init()();
      os_log_type_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 456) = v6;
      *os_log_type_t v6 = v0;
      v6[1] = sub_10051BEB8;
      return sub_100672230(v5);
    }
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 296);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v15 = *(void *)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 120);
    sub_10000A7E8(*(void *)(v0 + 240), &qword_100970C58);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 288);
    uint64_t v8 = *(void *)(v0 + 296);
    uint64_t v10 = *(void *)(v0 + 280);
    sub_10000A7E8(*(void *)(v0 + 240), &qword_100970C58);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_10051BEB8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 408);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_10051BFE4, v1, 0);
}

uint64_t sub_10051BFE4()
{
  uint64_t v1 = *(unsigned int *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 128);
  sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v8, v1, v6);
  swift_willThrow();
  sub_10000A7E8(v5, &qword_100970C58);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10051C1EC(uint64_t a1)
{
  v2[26] = a1;
  v2[27] = v1;
  uint64_t v3 = type metadata accessor for CancellationError();
  v2[28] = v3;
  v2[29] = *(void *)(v3 - 8);
  v2[30] = swift_task_alloc();
  v2[31] = sub_10000A844((uint64_t *)&unk_10097F230);
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = sub_10000A844(&qword_10096CC50);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFNWInterfaceTypeCategory();
  v2[37] = v4;
  v2[38] = *(void *)(v4 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  sub_10000A844(&qword_10097F260);
  v2[41] = swift_task_alloc();
  sub_10000A844(&qword_100978540);
  v2[42] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SDAirDropServerConnection(0);
  v2[43] = v5;
  v2[44] = *(void *)(v5 - 8);
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDrop.Progress();
  v2[47] = v6;
  v2[48] = *(void *)(v6 - 8);
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  sub_10000A844(&qword_100970D30);
  v2[51] = swift_task_alloc();
  uint64_t v7 = sub_10000A844(&qword_100970D38);
  v2[52] = v7;
  v2[53] = *(void *)(v7 - 8);
  v2[54] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v2[55] = v8;
  v2[56] = *(void *)(v8 - 8);
  v2[57] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFNWInterfaceType();
  v2[58] = v9;
  v2[59] = *(void *)(v9 - 8);
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDrop.DeclineAction();
  v2[63] = v10;
  v2[64] = *(void *)(v10 - 8);
  v2[65] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_100975040);
  v2[66] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  v2[67] = v11;
  v2[68] = *(void *)(v11 - 8);
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  uint64_t v12 = sub_10000A844(&qword_10096BBA8);
  v2[71] = v12;
  v2[72] = *(void *)(v12 - 8);
  v2[73] = swift_task_alloc();
  uint64_t v13 = sub_10000A844(&qword_10096CC58);
  v2[74] = v13;
  v2[75] = *(void *)(v13 - 8);
  v2[76] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for SFAirDrop.TransferType();
  v2[77] = v14;
  v2[78] = *(void *)(v14 - 8);
  v2[79] = swift_task_alloc();
  v2[80] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SFAirDropReceive.AskRequest();
  v2[81] = v15;
  v2[82] = *(void *)(v15 - 8);
  v2[83] = swift_task_alloc();
  v2[84] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for SFAirDropReceive.Transfer();
  v2[85] = v16;
  v2[86] = *(void *)(v16 - 8);
  v2[87] = swift_task_alloc();
  v2[88] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v17 = static AirDropActor.shared;
  v2[89] = static AirDropActor.shared;
  return _swift_task_switch(sub_10051C974, v17, 0);
}

uint64_t sub_10051C974()
{
  uint64_t v109 = v0;
  uint64_t v1 = *(void *)(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 680);
  uint64_t v4 = *(void *)(v0 + 672);
  uint64_t v5 = *(void *)(v0 + 656);
  uint64_t v6 = *(void *)(v0 + 648);
  uint64_t v7 = *(void *)(v0 + 640);
  uint64_t v8 = *(void *)(v0 + 624);
  uint64_t v104 = *(void *)(v0 + 616);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 720) = v9;
  *(void *)(v0 + 728) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v106 = v9;
  v9(v1, v3);
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(v4, v6);
  uint64_t v11 = v10;
  LOBYTE(v10) = SFAirDrop.TransferType.isFiles.getter();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v7, v104);
  if (v10) {
    goto LABEL_3;
  }
  uint64_t v13 = *(void *)(v0 + 696);
  uint64_t v14 = *(void *)(v0 + 680);
  uint64_t v15 = *(void *)(v0 + 664);
  uint64_t v16 = *(void *)(v0 + 648);
  uint64_t v17 = *(void *)(v0 + 632);
  uint64_t v18 = *(void *)(v0 + 616);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v106(v13, v14);
  SFAirDropReceive.AskRequest.type.getter();
  v11(v15, v16);
  char v19 = SFAirDrop.TransferType.isCustom.getter();
  v12(v17, v18);
  if (v19)
  {
LABEL_3:
    uint64_t v101 = v11;
    *(void *)(v0 + 736) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
    Swift::String v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Monitoring Transfer START", v22, 2u);
      swift_slowDealloc();
    }
    uint64_t v23 = *(void *)(v0 + 584);
    uint64_t v24 = *(void *)(v0 + 576);
    uint64_t v25 = *(void *)(v0 + 568);
    uint64_t v26 = *(void *)(v0 + 544);
    uint64_t v27 = *(void *)(v0 + 536);
    uint64_t v28 = *(void *)(v0 + 528);
    uint64_t v29 = *(void *)(v0 + 216);

    uint64_t v30 = *(void *)(v29 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler);
    *(void *)(v0 + 744) = v30;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v30 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation, v25);
    SFProgressContinuation.task.getter();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    uint64_t v31 = v30 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferStart;
    swift_beginAccess();
    sub_10024A330(v31, v28, (uint64_t *)&unk_100975040);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v27) == 1)
    {
      uint64_t v32 = *(void *)(v0 + 528);
      static Date.now.getter();
      sub_10000A7E8(v32, (uint64_t *)&unk_100975040);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 544) + 32))(*(void *)(v0 + 560), *(void *)(v0 + 528), *(void *)(v0 + 536));
    }
    uint64_t v33 = *(void *)(v0 + 696);
    uint64_t v102 = *(void *)(v0 + 680);
    uint64_t v87 = *(void *)(v0 + 664);
    uint64_t v89 = *(void *)(v0 + 648);
    uint64_t v105 = *(void *)(v0 + 608);
    uint64_t v34 = *(void *)(v0 + 520);
    uint64_t v94 = *(void *)(v0 + 512);
    uint64_t v95 = *(void *)(v0 + 504);
    uint64_t v90 = *(void *)(v0 + 496);
    uint64_t v91 = *(void *)(v0 + 456);
    uint64_t v97 = *(void *)(v0 + 440);
    uint64_t v35 = *(void *)(v0 + 376);
    uint64_t v88 = v35;
    uint64_t v96 = *(void *)(v0 + 448);
    uint64_t v92 = *(void *)(v0 + 208);
    uint64_t v93 = *(void *)(v0 + 384);
    uint64_t v36 = *(void *)(v0 + 216)
        + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
    swift_beginAccess();
    sub_100278C8C(v36, v0 + 16);
    uint64_t v38 = *(void *)(v0 + 40);
    uint64_t v37 = *(void *)(v0 + 48);
    sub_10026BB6C((void *)(v0 + 16), v38);
    CurrentValueSubject.value.getter();
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_10096C8B0);
    sub_1005AFD80(v33, 0x726566736E617274, (void *)0xEC000000676E6972, v105, v38, v35, v39, v37, v34);
    v106(v33, v102);
    sub_10024D338(v0 + 16);
    sub_100278C8C(v36, v0 + 56);
    uint64_t v40 = *(void *)(v0 + 80);
    uint64_t v41 = *(void *)(v0 + 88);
    sub_10026BB6C((void *)(v0 + 56), v40);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v106(v33, v102);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 64))(v87, v40, v41);
    uint64_t v44 = v43;
    *(void *)(v0 + 752) = v42;
    *(void *)(v0 + 760) = v43;
    v101(v87, v89);
    sub_10024D338(v0 + 56);
    sub_10066940C(v90);
    uint64_t v45 = (int *)sub_10000A844(&qword_100972410);
    *(void *)(v0 + 768) = v45;
    uint64_t v46 = v91 + v45[12];
    uint64_t v47 = (uint64_t *)(v91 + v45[16]);
    uint64_t v48 = v91 + v45[20];
    uint64_t v49 = type metadata accessor for SFAirDropReceive.ItemDestination();
    *(void *)(v0 + 776) = v49;
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
    *(void *)(v0 + 784) = v51;
    *(void *)(v0 + 792) = (v50 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v51(v91, v92, v49);
    uint64_t v52 = enum case for SFAirDrop.Progress.notStarted(_:);
    uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 104);
    *(void *)(v0 + 800) = v53;
    *(void *)(v0 + 808) = (v93 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v53(v46, v52, v88);
    *uint64_t v47 = sub_10031FA1C(v42, v44);
    v47[1] = v54;
    uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16);
    *(void *)(v0 + 816) = v55;
    *(void *)(v0 + 824) = (v94 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v55(v48, v34, v95);
    *(_DWORD *)(v0 + 928) = enum case for SFAirDropReceive.Transfer.State.transferring(_:);
    uint64_t v56 = *(void (**)(uint64_t))(v96 + 104);
    *(void *)(v0 + 832) = v56;
    *(void *)(v0 + 840) = (v96 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v56(v91);
    sub_1006BE3BC(v91, v33);
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
    *(void *)(v0 + 848) = v57;
    *(void *)(v0 + 856) = (v96 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v57(v91, v97);
    v106(v33, v102);
    SFProgressTask.makeAsyncIterator()();
    *(void *)(v0 + 864) = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadConnection;
    swift_beginAccess();
    *(_DWORD *)(v0 + 932) = enum case for SFNWInterfaceType.other(_:);
    *(_DWORD *)(v0 + 936) = enum case for SFAirDrop.Progress.completed(_:);
    *(_DWORD *)(v0 + 940) = enum case for SFNWInterfaceTypeCategory.regular(_:);
    uint64_t v58 = static AirDropActor.shared;
    uint64_t v59 = sub_10053BB90((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
    uint64_t v60 = (void *)swift_task_alloc();
    *(void *)(v0 + 872) = v60;
    *uint64_t v60 = v0;
    v60[1] = sub_10051D6C0;
    uint64_t v61 = *(void *)(v0 + 408);
    uint64_t v62 = *(void *)(v0 + 416);
    return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v61, v58, v59, v62, v0 + 176);
  }
  else
  {
    swift_retain_n();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = *(void *)(v0 + 696);
      uint64_t v66 = *(void *)(v0 + 664);
      uint64_t v98 = *(void *)(v0 + 680);
      uint64_t v99 = *(void *)(v0 + 648);
      uint64_t v67 = *(void *)(v0 + 632);
      uint64_t v100 = *(void *)(v0 + 616);
      os_log_type_t v103 = v64;
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      uint64_t v108 = swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 136315138;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v106(v65, v98);
      SFAirDropReceive.AskRequest.type.getter();
      v11(v66, v99);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v71 = v70;
      v12(v67, v100);
      *(void *)(v0 + 168) = sub_100254634(v69, v71, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v63, v103, "Monitoring Transfer SKIP. {type: %s}", v68, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v72 = *(void *)(v0 + 696);
    uint64_t v73 = *(void *)(v0 + 680);
    uint64_t v74 = *(void *)(v0 + 664);
    uint64_t v75 = *(void *)(v0 + 648);
    uint64_t v76 = *(void *)(v0 + 632);
    uint64_t v77 = *(void *)(v0 + 616);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v106(v72, v73);
    SFAirDropReceive.AskRequest.type.getter();
    v11(v74, v75);
    char v78 = SFAirDrop.TransferType.isLinks.getter();
    v12(v76, v77);
    if (v78)
    {
      uint64_t v79 = *(void *)(v0 + 696);
      uint64_t v80 = *(void *)(v0 + 680);
      uint64_t v81 = *(void *)(v0 + 664);
      uint64_t v82 = *(void *)(v0 + 648);
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v106(v79, v80);
      uint64_t v83 = SFAirDropReceive.AskRequest.urlItems.getter();
      v11(v81, v82);
      uint64_t v107 = sub_100254AAC(v83);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v107 = _swiftEmptyArrayStorage;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v84 = *(uint64_t (**)(void *, __n128))(v0 + 8);
    v85.n128_u64[0] = 0;
    return v84(v107, v85);
  }
}

uint64_t sub_10051D6C0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 712);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10051F39C;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 712);
    uint64_t v4 = sub_10051D7E4;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10051D7E4()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 384);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 424) + 8))(*(void *)(v0 + 432), *(void *)(v0 + 416));
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 880) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10051E1CC;
    uint64_t v5 = *(void *)(v0 + 592);
    return SFProgressTask.finalValue.getter(v0 + 200, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 344);
    uint64_t v7 = *(void *)(v0 + 352);
    uint64_t v8 = *(void *)(v0 + 336);
    uint64_t v9 = *(void *)(v0 + 744) + *(void *)(v0 + 864);
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 400), v1, v2);
    sub_10024A330(v9, v8, &qword_100978540);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1)
    {
      sub_10000A7E8(*(void *)(v0 + 336), &qword_100978540);
      if (qword_10096A0E0 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_10000B47C(v10, (uint64_t)qword_10097D8F0);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "UPLOAD connection is not active", v13, 2u);
        swift_slowDealloc();
      }
      uint64_t v14 = *(unsigned int *)(v0 + 932);
      uint64_t v15 = *(void *)(v0 + 488);
      uint64_t v16 = *(void *)(v0 + 464);
      uint64_t v17 = *(void *)(v0 + 472);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(v15, v14, v16);
    }
    else
    {
      uint64_t v18 = *(void *)(v0 + 360);
      uint64_t v19 = *(void *)(v0 + 368);
      sub_10053A9A0(*(void *)(v0 + 336), v19, type metadata accessor for SDAirDropServerConnection);
      sub_10053A93C(v19, v18);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        uint64_t v20 = *(void *)(v0 + 360);
        uint64_t v21 = v20 + *(int *)(sub_10000A844(&qword_100970300) + 48);
        uint64_t v22 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
      }
      uint64_t v23 = *(void *)(v0 + 368);
      sub_10065D92C(*(void *)(v0 + 488));
      swift_release();
      sub_10053A8DC(v23, type metadata accessor for SDAirDropServerConnection);
    }
    int v24 = *(_DWORD *)(v0 + 936);
    uint64_t v25 = *(void *)(v0 + 392);
    uint64_t v26 = *(void *)(v0 + 376);
    uint64_t v27 = *(void *)(v0 + 384);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
    v28(v25, *(void *)(v0 + 400), v26);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v27 + 88))(v25, v26) == v24)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 384) + 96))(*(void *)(v0 + 392), *(void *)(v0 + 376));
      swift_bridgeObjectRelease();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      BOOL v31 = os_log_type_enabled(v29, v30);
      uint64_t v32 = *(void *)(v0 + 496);
      uint64_t v33 = *(void *)(v0 + 464);
      uint64_t v34 = *(void *)(v0 + 472);
      uint64_t v35 = *(void *)(v0 + 400);
      uint64_t v36 = *(void *)(v0 + 376);
      uint64_t v37 = *(void *)(v0 + 384);
      if (v31)
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Pipelined UPLOAD already complete", v38, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    }
    else
    {
      uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
      uint64_t v90 = *(void (**)(uint64_t, void, uint64_t))(v0 + 832);
      unsigned int v89 = *(_DWORD *)(v0 + 928);
      uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
      uint64_t v39 = *(int **)(v0 + 768);
      uint64_t v83 = *(void *)(v0 + 760);
      uint64_t v40 = *(void *)(v0 + 752);
      uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v0 + 720);
      uint64_t v87 = *(void *)(v0 + 696);
      uint64_t v91 = *(void *)(v0 + 680);
      uint64_t v85 = *(void *)(v0 + 520);
      uint64_t v84 = *(void *)(v0 + 504);
      uint64_t v41 = *(void *)(v0 + 456);
      uint64_t v86 = *(void *)(v0 + 440);
      uint64_t v42 = *(void *)(v0 + 400);
      uint64_t v43 = *(void *)(v0 + 376);
      uint64_t v44 = v41 + v39[12];
      uint64_t v45 = (uint64_t *)(v41 + v39[16]);
      uint64_t v46 = v41 + v39[20];
      (*(void (**)(uint64_t, void, void))(v0 + 784))(v41, *(void *)(v0 + 208), *(void *)(v0 + 776));
      v28(v44, v42, v43);
      *uint64_t v45 = sub_10031FA1C(v40, v83);
      v45[1] = v47;
      v88(v46, v85, v84);
      v90(v41, v89, v86);
      sub_1006BE3BC(v41, v87);
      v93(v41, v86);
      v92(v87, v91);
      sub_10053BB90(&qword_1009709A8, (void (*)(uint64_t))&type metadata accessor for SFNWInterfaceType);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v0 + 720);
        uint64_t v49 = *(void *)(v0 + 696);
        uint64_t v50 = *(void *)(v0 + 680);
        uint64_t v51 = *(void *)(v0 + 464);
        uint64_t v52 = *(void *)(v0 + 472);
        uint64_t v53 = *(void *)(v0 + 328);
        (*(void (**)(uint64_t, void, uint64_t))(v52 + 16))(v53, *(void *)(v0 + 488), v51);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v51);
        sub_1006BE908(v53, v49);
        sub_10000A7E8(v53, &qword_10097F260);
        v48(v49, v50);
      }
      uint64_t v54 = *(unsigned int *)(v0 + 940);
      uint64_t v55 = *(void *)(v0 + 488);
      uint64_t v56 = *(void *)(v0 + 472);
      uint64_t v94 = *(void *)(v0 + 464);
      uint64_t v96 = *(void *)(v0 + 480);
      uint64_t v58 = *(void *)(v0 + 312);
      uint64_t v57 = *(void *)(v0 + 320);
      uint64_t v59 = *(void *)(v0 + 296);
      uint64_t v60 = *(void *)(v0 + 304);
      SFNWInterfaceType.category()();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 104))(v58, v54, v59);
      sub_10053BB90(&qword_100970D48, (void (*)(uint64_t))&type metadata accessor for SFNWInterfaceTypeCategory);
      char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
      v62(v58, v59);
      v62(v57, v59);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v96, v55, v94);
      if (v61)
      {
        uint64_t v63 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 472) + 8);
        v63(*(void *)(v0 + 480), *(void *)(v0 + 464));
      }
      else
      {
        uint64_t v64 = *(void *)(v0 + 472);
        uint64_t v95 = *(void *)(v0 + 480);
        uint64_t v97 = *(void *)(v0 + 464);
        uint64_t v66 = *(void *)(v0 + 312);
        uint64_t v65 = *(void *)(v0 + 320);
        uint64_t v67 = *(void *)(v0 + 296);
        SFNWInterfaceType.category()();
        SFNWInterfaceType.category()();
        char v68 = dispatch thunk of static Equatable.== infix(_:_:)();
        v62(v66, v67);
        v62(v65, v67);
        uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
        v63(v95, v97);
        if ((v68 & 1) == 0)
        {
          uint64_t v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v69, v70))
          {
            unint64_t v71 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v71 = 0;
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "AirDrop interface changed to high priority category", v71, 2u);
            swift_slowDealloc();
          }

          sub_1006C65B8(3.0);
        }
      }
      uint64_t v72 = *(void *)(v0 + 496);
      uint64_t v73 = *(void *)(v0 + 464);
      uint64_t v74 = *(void *)(v0 + 392);
      uint64_t v75 = *(void *)(v0 + 376);
      uint64_t v76 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 384) + 8);
      v76(*(void *)(v0 + 400), v75);
      v63(v72, v73);
      v76(v74, v75);
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 472) + 32))(*(void *)(v0 + 496), *(void *)(v0 + 488), *(void *)(v0 + 464));
    uint64_t v77 = static AirDropActor.shared;
    uint64_t v78 = sub_10053BB90((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
    uint64_t v79 = (void *)swift_task_alloc();
    *(void *)(v0 + 872) = v79;
    *uint64_t v79 = v0;
    v79[1] = sub_10051D6C0;
    uint64_t v80 = *(void *)(v0 + 408);
    uint64_t v81 = *(void *)(v0 + 416);
    return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v80, v77, v78, v81, v0 + 176);
  }
}

uint64_t sub_10051E1CC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 888) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 712);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10051F600;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 712);
    uint64_t v4 = sub_10051E2F4;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10051E2F4()
{
  unsigned int v41 = *(_DWORD *)(v0 + 936);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  uint64_t v45 = *(void (**)(uint64_t, void, uint64_t))(v0 + 832);
  unsigned int v44 = *(_DWORD *)(v0 + 928);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
  uint64_t v40 = *(void (**)(void *, void, uint64_t))(v0 + 800);
  uint64_t v1 = *(int **)(v0 + 768);
  uint64_t v39 = *(void *)(v0 + 760);
  uint64_t v38 = *(void *)(v0 + 752);
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v0 + 720);
  uint64_t v43 = *(void *)(v0 + 696);
  uint64_t v48 = *(void *)(v0 + 680);
  uint64_t v37 = *(void *)(v0 + 520);
  uint64_t v36 = *(void *)(v0 + 504);
  uint64_t v47 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v51 = *(void *)(v0 + 464);
  uint64_t v3 = (void *)(v2 + v1[12]);
  uint64_t v4 = (void *)(v2 + v1[16]);
  uint64_t v5 = v2 + v1[20];
  uint64_t v6 = *(void *)(v0 + 440);
  uint64_t v7 = *(void *)(v0 + 376);
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v9 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, void, void))(v0 + 784))(v2, *(void *)(v0 + 208), *(void *)(v0 + 776));
  *uint64_t v3 = v9;
  v40(v3, v41, v7);
  *uint64_t v4 = v38;
  v4[1] = v39;
  v42(v5, v37, v36);
  v45(v2, v44, v6);
  uint64_t v46 = v9;
  swift_bridgeObjectRetain();
  sub_1006BE3BC(v2, v43);
  v54(v2, v6);
  v49(v43, v48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v8, 1, 1, v51);
  sub_1006BE908(v8, v43);
  sub_10000A7E8(v8, &qword_10097F260);
  v49(v43, v48);
  static Date.now.getter();
  sub_10053BB90((unint64_t *)&unk_100974490, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v50 = *(void *)(v0 + 552);
    uint64_t v11 = *(void **)(v0 + 544);
    uint64_t v12 = *(void *)(v0 + 536);
    uint64_t v55 = *(void *)(v0 + 280);
    uint64_t v57 = *(void *)(v0 + 288);
    uint64_t v14 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 256);
    uint64_t v60 = *(void *)(v0 + 272);
    uint64_t v53 = v14;
    uint64_t v62 = *(void *)(v0 + 264);
    uint64_t v15 = v62 + *(int *)(v14 + 48);
    uint64_t v16 = (void (*)(void))v11[2];
    v16();
    uint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))v11[4];
    uint64_t v52 = v15;
    v17(v15, v50, v12);
    uint64_t v18 = v13 + *(int *)(v14 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v16)(v13, v62, v12);
    ((void (*)(uint64_t, uint64_t, uint64_t))v16)(v18, v15, v12);
    v17(v55, v13, v12);
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v11[1];
    v19(v18, v12);
    uint64_t v20 = v13 + *(int *)(v53 + 48);
    v17(v13, v62, v12);
    v17(v20, v52, v12);
    v17(v55 + *(int *)(v60 + 36), v20, v12);
    char v61 = v19;
    v19(v13, v12);
    sub_10024D388(v55, v57, &qword_10096CC50);
    ClosedRange<>.interval.getter();
    unint64_t v22 = v21;
    sub_10000A7E8(v57, &qword_10096CC50);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Monitoring Transfer END", v25, 2u);
      swift_slowDealloc();
    }
    uint64_t v26 = *(void *)(v0 + 600);
    uint64_t v58 = *(void *)(v0 + 592);
    uint64_t v59 = *(void *)(v0 + 608);
    uint64_t v56 = *(void *)(v0 + 560);
    uint64_t v27 = *(void *)(v0 + 536);
    uint64_t v28 = *(void *)(v0 + 520);
    uint64_t v30 = *(void *)(v0 + 504);
    uint64_t v29 = *(void *)(v0 + 512);
    uint64_t v31 = *(void *)(v0 + 496);
    uint64_t v33 = *(void *)(v0 + 464);
    uint64_t v32 = *(void *)(v0 + 472);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    v61(v56, v27);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v59, v58);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(uint64_t, __n128))(v0 + 8);
    v35.n128_u64[0] = v22;
    return v34(v46, v35);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10051E9CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 712);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_10051EAF8, v1, 0);
}

uint64_t sub_10051EAF8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[90];
  uint64_t v2 = v0[87];
  uint64_t v3 = v0[85];
  uint64_t v4 = v0[41];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[59] + 56))(v4, 1, 1, v0[58]);
  sub_1006BE908(v4, v2);
  sub_10000A7E8(v4, &qword_10097F260);
  v1(v2, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Monitoring Transfer END - Cancelled.", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[29];
  uint64_t v8 = v0[30];
  uint64_t v10 = v0[28];

  uint64_t v11 = type metadata accessor for SFAirDropReceive.Failure();
  sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for SFAirDropReceive.Failure.senderCancelled(_:), v11);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10051EEAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 712);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_10051EFD8, v1, 0);
}

uint64_t sub_10051EFD8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[90];
  uint64_t v2 = v0[87];
  uint64_t v3 = v0[85];
  uint64_t v4 = v0[41];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[59] + 56))(v4, 1, 1, v0[58]);
  sub_1006BE908(v4, v2);
  sub_10000A7E8(v4, &qword_10097F260);
  v1(v2, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[24] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Monitoring Transfer END - Failure {%@}", v7, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10051F39C()
{
  uint64_t v1 = v0[75];
  uint64_t v17 = v0[74];
  uint64_t v18 = v0[76];
  uint64_t v16 = v0[70];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[65];
  uint64_t v6 = v0[63];
  uint64_t v5 = v0[64];
  uint64_t v7 = v0[62];
  uint64_t v9 = v0[58];
  uint64_t v8 = v0[59];
  (*(void (**)(void, void))(v0[53] + 8))(v0[54], v0[52]);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v16, v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v18, v17);
  uint64_t v10 = v0[22];
  v0[23] = v10;
  v0[112] = v10;
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    sub_10053BB90(&qword_10096CCB8, (void (*)(uint64_t))&type metadata accessor for CancellationError);
    uint64_t v11 = swift_allocError();
    v0[113] = v11;
    CancellationError.init()();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[114] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10051E9CC;
    uint64_t v13 = v11;
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[115] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10051EEAC;
    uint64_t v13 = v10;
  }
  return sub_100672230(v13);
}

uint64_t sub_10051F600()
{
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  uint64_t v4 = v0[70];
  uint64_t v5 = v0[68];
  uint64_t v6 = v0[67];
  uint64_t v7 = v0[65];
  uint64_t v8 = v0[63];
  uint64_t v9 = v0[64];
  (*(void (**)(void, void))(v0[59] + 8))(v0[62], v0[58]);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v10 = v0[111];
  v0[23] = v10;
  v0[112] = v10;
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    sub_10053BB90(&qword_10096CCB8, (void (*)(uint64_t))&type metadata accessor for CancellationError);
    uint64_t v11 = swift_allocError();
    v0[113] = v11;
    CancellationError.init()();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[114] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10051E9CC;
    uint64_t v13 = v11;
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[115] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10051EEAC;
    uint64_t v13 = v10;
  }
  return sub_100672230(v13);
}

uint64_t sub_10051F840(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 194) = a4;
  *(void *)(v5 + 264) = a3;
  *(void *)(v5 + 272) = v4;
  *(void *)(v5 + 248) = a1;
  *(void *)(v5 + 256) = a2;
  sub_10000A844(&qword_10096CC70);
  *(void *)(v5 + 280) = swift_task_alloc();
  *(void *)(v5 + 288) = swift_task_alloc();
  uint64_t v6 = sub_10000A844((uint64_t *)&unk_10097F200);
  *(void *)(v5 + 296) = v6;
  *(void *)(v5 + 304) = *(void *)(v6 - 8);
  *(void *)(v5 + 312) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDropReceive.Transfer.State();
  *(void *)(v5 + 320) = v7;
  *(void *)(v5 + 328) = *(void *)(v7 - 8);
  *(void *)(v5 + 336) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDrop.DeclineAction();
  *(void *)(v5 + 344) = v8;
  *(void *)(v5 + 352) = *(void *)(v8 - 8);
  *(void *)(v5 + 360) = swift_task_alloc();
  uint64_t v9 = sub_10000A844(&qword_10096CC68);
  *(void *)(v5 + 368) = v9;
  *(void *)(v5 + 376) = *(void *)(v9 - 8);
  *(void *)(v5 + 384) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDropReceive.ItemDestination();
  *(void *)(v5 + 392) = v10;
  *(void *)(v5 + 400) = *(void *)(v10 - 8);
  *(void *)(v5 + 408) = swift_task_alloc();
  *(void *)(v5 + 416) = swift_task_alloc();
  *(void *)(v5 + 424) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDrop.TransferType();
  *(void *)(v5 + 432) = v11;
  *(void *)(v5 + 440) = *(void *)(v11 - 8);
  *(void *)(v5 + 448) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDropReceive.AskRequest();
  *(void *)(v5 + 456) = v12;
  *(void *)(v5 + 464) = *(void *)(v12 - 8);
  *(void *)(v5 + 472) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SFAirDropReceive.Transfer();
  *(void *)(v5 + 480) = v13;
  *(void *)(v5 + 488) = *(void *)(v13 - 8);
  *(void *)(v5 + 496) = swift_task_alloc();
  *(void *)(v5 + 504) = swift_task_alloc();
  *(void *)(v5 + 512) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v14 = static AirDropActor.shared;
  *(void *)(v5 + 520) = static AirDropActor.shared;
  return _swift_task_switch(sub_10051FC48, v14, 0);
}

uint64_t sub_10051FC48()
{
  uint64_t v94 = v0;
  type metadata accessor for SDAirDropUserSafetyContentHandler();
  *(void *)(v0 + 528) = swift_allocObject();
  unint64_t v2 = sub_10048C2F0();
  uint64_t v4 = v3;
  *(void *)(v0 + 536) = v2;
  *(void *)(v0 + 544) = v3;
  *(unsigned char *)(v0 + 195) = v1;
  if (v1)
  {
    unsigned __int8 v5 = v1;
    if ((*(unsigned char *)(v0 + 194) & 1) == 0)
    {
      uint64_t v6 = *(void *)(v0 + 512);
      uint64_t v7 = *(void *)(v0 + 480);
      uint64_t v8 = *(void *)(v0 + 488);
      uint64_t v9 = *(void *)(v0 + 464);
      uint64_t v10 = *(void *)(v0 + 472);
      uint64_t v89 = *(void *)(v0 + 456);
      *(void *)(v0 + 552) = *(void *)(*(void *)(v0 + 272)
                                        + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_subject);
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      *(void *)(v0 + 560) = v11;
      *(void *)(v0 + 568) = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v12 = v7;
      uint64_t v13 = v11;
      v11(v6, v12);
      char v14 = SFAirDropReceive.AskRequest.senderIsMe.getter();
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v15(v10, v89);
      if ((v14 & 1) == 0)
      {
        uint64_t v90 = v13;
        uint64_t v16 = *(void *)(v0 + 512);
        uint64_t v17 = *(void *)(v0 + 472);
        uint64_t v83 = *(void *)(v0 + 456);
        uint64_t v79 = *(void *)(v0 + 480);
        os_log_t log = *(os_log_t *)(v0 + 448);
        uint64_t v85 = *(void *)(v0 + 440);
        uint64_t v87 = *(void *)(v0 + 432);
        CurrentValueSubject.value.getter();
        SFAirDropReceive.Transfer.askRequest.getter();
        v90(v16, v79);
        SFAirDropReceive.AskRequest.type.getter();
        v15(v17, v83);
        char v18 = SFAirDrop.TransferType.isFiles.getter();
        (*(void (**)(os_log_t, uint64_t))(v85 + 8))(log, v87);
        if (v18)
        {
          uint64_t v19 = *(void *)(v0 + 424);
          uint64_t v20 = *(void *)(v0 + 392);
          uint64_t v21 = *(void *)(v0 + 400);
          uint64_t v22 = *(void *)(v0 + 264);
          uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
          *(void *)(v0 + 576) = v23;
          *(void *)(v0 + 584) = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          uint64_t v78 = v23;
          v23(v19, v22, v20);
          *(void *)(v0 + 592) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
          os_log_type_t v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v26 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v26 = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "Analyzing full content START", v26, 2u);
            swift_slowDealloc();
          }
          uint64_t v68 = *(void *)(v0 + 512);
          uint64_t v88 = *(void *)(v0 + 480);
          uint64_t v27 = *(void *)(v0 + 384);
          uint64_t v28 = *(void *)(v0 + 360);
          uint64_t v71 = *(void *)(v0 + 392);
          uint64_t v72 = *(void *)(v0 + 352);
          uint64_t v29 = *(void *)(v0 + 336);
          uint64_t v74 = *(void *)(v0 + 328);
          uint64_t v75 = *(void *)(v0 + 320);
          uint64_t v30 = *(void *)(v0 + 272);
          uint64_t v73 = *(void *)(v0 + 344);
          uint64_t v31 = *(void *)(v0 + 256);
          uint64_t v69 = v31;
          uint64_t v70 = *(void *)(v0 + 264);

          sub_100485A68(v31);
          uint64_t v32 = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
          *(void *)(v0 + 600) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
          uint64_t v33 = v30 + v32;
          swift_beginAccess();
          sub_100278C8C(v33, v0 + 96);
          uint64_t v34 = *(void *)(v0 + 120);
          uint64_t v35 = *(void *)(v0 + 128);
          sub_10026BB6C((void *)(v0 + 96), v34);
          CurrentValueSubject.value.getter();
          sub_1005AFD80(v68, 0xD000000000000014, (void *)0x80000001007C0FB0, v27, v34, (uint64_t)&type metadata for Double, (uint64_t)&type metadata for Bool, v35, v28);
          v90(v68, v88);
          sub_10024D338(v0 + 96);
          uint64_t v36 = (int *)sub_10000A844(&qword_10096B2D8);
          *(void *)(v0 + 608) = v36;
          uint64_t v37 = v36[12];
          uint64_t v38 = v36[16];
          uint64_t v39 = v29 + v36[20];
          v78(v29, v70, v71);
          *(void *)(v29 + v37) = v69;
          *(void *)(v29 + v38) = 0;
          uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
          *(void *)(v0 + 616) = v40;
          *(void *)(v0 + 624) = (v72 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          v40(v39, v28, v73);
          *(_DWORD *)(v0 + 832) = enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:);
          unsigned int v41 = *(void (**)(uint64_t))(v74 + 104);
          *(void *)(v0 + 632) = v41;
          *(void *)(v0 + 640) = (v74 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
          v41(v29);
          swift_bridgeObjectRetain();
          sub_1006BE3BC(v29, v68);
          uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
          *(void *)(v0 + 648) = v42;
          *(void *)(v0 + 656) = (v74 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          v42(v29, v75);
          v90(v68, v88);
          SFProgressTask.makeAsyncIterator()();
          uint64_t v43 = static AirDropActor.shared;
          uint64_t v44 = sub_10053BB90((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
          uint64_t v45 = (void *)swift_task_alloc();
          *(void *)(v0 + 664) = v45;
          *uint64_t v45 = v0;
          v45[1] = sub_100520790;
          uint64_t v46 = *(void *)(v0 + 296);
          return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 184, v43, v44, v46, v0 + 200);
        }
      }
    }
    sub_1003950E4(v2, (uint64_t)v4, v5);
    swift_retain_n();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = *(void *)(v0 + 512);
      os_log_type_t v91 = v48;
      uint64_t v51 = *(void *)(v0 + 480);
      uint64_t v50 = *(void *)(v0 + 488);
      uint64_t v52 = *(void *)(v0 + 472);
      uint64_t v92 = *(void *)(v0 + 464);
      uint64_t v77 = *(void *)(v0 + 456);
      uint64_t v80 = *(void *)(v0 + 448);
      uint64_t v86 = *(void *)(v0 + 440);
      uint64_t v84 = *(void *)(v0 + 432);
      int v53 = *(unsigned __int8 *)(v0 + 194);
      uint64_t v54 = swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 67109634;
      *(_DWORD *)(v0 + 828) = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v54 + 8) = 1024;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v76(v49, v51);
      char v55 = SFAirDropReceive.AskRequest.senderIsMe.getter();
      loga = v47;
      uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
      v56(v52, v77);
      *(_DWORD *)(v0 + 820) = v55 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v54 + 14) = 2080;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v76(v49, v51);
      SFAirDropReceive.AskRequest.type.getter();
      v56(v52, v77);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v59 = v58;
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v80, v84);
      *(void *)(v0 + 240) = sub_100254634(v57, v59, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, loga, v91, "Analyzing full content SKIP {isPreviewSensitive: %{BOOL}d, senderIsMe: %{BOOL}d, askRequest.type: %s", (uint8_t *)v54, 0x18u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 136315138;
      swift_bridgeObjectRetain();
      v96._countAndFlagsBits = v2;
      v96._object = v4;
      unint64_t v63 = sub_100485954(v96, 0);
      unint64_t v65 = v64;
      sub_1003950E4(v2, (uint64_t)v4, 0);
      *(void *)(v0 + 224) = sub_100254634(v63, v65, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003950E4(v2, (uint64_t)v4, 0);
      sub_1003950E4(v2, (uint64_t)v4, 0);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Analyzing full content SKIP {userSafetyMode: %s}", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1003950E4(v2, (uint64_t)v4, 0);
      sub_1003950E4(v2, (uint64_t)v4, 0);
    }
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 400) + 16))(*(void *)(v0 + 248), *(void *)(v0 + 264), *(void *)(v0 + 392));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v66 = *(uint64_t (**)(void))(v0 + 8);
  return v66(0);
}

uint64_t sub_100520790()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 520);
    sub_1003950E4(*(void *)(v2 + 536), *(void *)(v2 + 544), *(unsigned char *)(v2 + 195));
    uint64_t v4 = sub_100522BEC;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 520);
    uint64_t v4 = sub_1005208BC;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1005208BC()
{
  uint64_t v1 = *(void *)(v0 + 184);
  if (*(unsigned char *)(v0 + 192))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 304) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 296));
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 672) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100520B8C;
    uint64_t v3 = *(void *)(v0 + 368);
    return SFProgressTask.finalValue.getter(v0 + 193, v3);
  }
  else
  {
    os_log_type_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
    uint64_t v21 = *(void (**)(uint64_t, void, uint64_t))(v0 + 632);
    unsigned int v19 = *(_DWORD *)(v0 + 832);
    char v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 616);
    uint64_t v4 = *(int **)(v0 + 608);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    uint64_t v20 = *(void *)(v0 + 512);
    uint64_t v22 = *(void *)(v0 + 480);
    uint64_t v5 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v6 = *(void *)(v0 + 344);
    uint64_t v8 = *(void *)(v0 + 320);
    uint64_t v9 = *(void *)(v0 + 256);
    uint64_t v10 = v4[12];
    uint64_t v11 = v7 + v4[20];
    uint64_t v12 = v4[16];
    (*(void (**)(uint64_t, void, void))(v0 + 576))(v7, *(void *)(v0 + 264), *(void *)(v0 + 392));
    *(void *)(v7 + v10) = v9;
    *(void *)(v7 + v12) = v1;
    v18(v11, v5, v6);
    v21(v7, v19, v8);
    swift_bridgeObjectRetain();
    sub_1006BE3BC(v7, v20);
    v24(v7, v8);
    v23(v20, v22);
    uint64_t v13 = static AirDropActor.shared;
    uint64_t v14 = sub_10053BB90((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 664) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100520790;
    uint64_t v16 = *(void *)(v0 + 296);
    return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 184, v13, v14, v16, v0 + 200);
  }
}

uint64_t sub_100520B8C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 680) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 520);
    sub_1003950E4(*(void *)(v2 + 536), *(void *)(v2 + 544), *(unsigned char *)(v2 + 195));
    uint64_t v4 = sub_100522ED4;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 520);
    uint64_t v4 = sub_100520CBC;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100520CBC()
{
  uint64_t v69 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 193);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 824) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Analyzing full content END {isSensitive: %{BOOL}d}", v4, 8u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  SFAirDropReceive.Transfer.Metrics.sensitive.setter();
  swift_endAccess();
  if (!v1)
  {
    sub_1003950CC(*(void *)(v0 + 536), *(void *)(v0 + 544), *(unsigned char *)(v0 + 195));
    os_log_t log = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.default.getter();
    BOOL v20 = os_log_type_enabled(log, type);
    char v21 = *(unsigned char *)(v0 + 195);
    uint64_t v22 = *(void **)(v0 + 544);
    uint64_t v23 = *(void *)(v0 + 536);
    uint64_t v24 = *(void *)(v0 + 400);
    uint64_t v64 = *(void *)(v0 + 392);
    uint64_t v67 = *(void *)(v0 + 424);
    uint64_t v25 = *(void *)(v0 + 384);
    uint64_t v26 = *(void *)(v0 + 360);
    uint64_t v28 = *(void *)(v0 + 344);
    uint64_t v27 = *(void *)(v0 + 352);
    uint64_t v60 = *(void *)(v0 + 368);
    if (v20)
    {
      uint64_t v57 = *(void *)(v0 + 384);
      uint64_t v55 = *(void *)(v0 + 360);
      uint64_t v29 = *(void *)(v0 + 376);
      uint64_t v53 = *(void *)(v0 + 400);
      uint64_t v30 = swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      sub_1003950CC(v23, (uint64_t)v22, v21);
      v71._countAndFlagsBits = v23;
      v71._object = v22;
      unint64_t v31 = sub_100485954(v71, v21);
      unint64_t v33 = v32;
      sub_1003950E4(v23, (uint64_t)v22, v21);
      *(void *)(v0 + 232) = sub_100254634(v31, v33, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003950E4(v23, (uint64_t)v22, v21);
      sub_1003950E4(v23, (uint64_t)v22, v21);
      *(_WORD *)(v30 + 12) = 1024;
      *(_DWORD *)(v0 + 196) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Sensitive preview step SKIP {userSafetyMode: %s, isSensitive: %{BOOL}d}", (uint8_t *)v30, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v55, v28);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v57, v60);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v67, v64);
    }
    else
    {
      uint64_t v34 = *(void *)(v0 + 376);

      sub_1003950E4(v23, (uint64_t)v22, v21);
      sub_1003950E4(v23, (uint64_t)v22, v21);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v25, v60);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v67, v64);
    }
    (*(void (**)(void, void, void))(v0 + 576))(*(void *)(v0 + 248), *(void *)(v0 + 264), *(void *)(v0 + 392));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)(v0 + 680);
  uint64_t v6 = *(void *)(v0 + 504);
  uint64_t v7 = *(void *)(v0 + 288);
  sub_100278C8C(*(void *)(v0 + 272) + *(void *)(v0 + 600), v0 + 56);
  sub_10026BB6C((void *)(v0 + 56), *(void *)(v0 + 80));
  CurrentValueSubject.value.getter();
  sub_1005B287C(v6, v7);
  if (v5)
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v10 = *(void *)(v0 + 480);
    uint64_t v11 = *(void *)(v0 + 376);
    uint64_t v66 = *(void *)(v0 + 384);
    uint64_t v12 = *(void *)(v0 + 360);
    uint64_t v63 = *(void *)(v0 + 368);
    uint64_t v14 = *(void *)(v0 + 344);
    uint64_t v13 = *(void *)(v0 + 352);
    sub_1003950E4(*(void *)(v0 + 536), *(void *)(v0 + 544), *(unsigned char *)(v0 + 195));
    v8(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v66, v63);
    sub_10024D338(v0 + 56);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      char v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 208) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Analyzing full content END - Failure {%@}", v17, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v48 = *(void *)(v0 + 424);
    uint64_t v49 = *(void *)(v0 + 400);
    uint64_t v50 = *(void *)(v0 + 392);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
LABEL_16:
    return v35(0);
  }
  unint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
  uint64_t v56 = *(void (**)(uint64_t, void, uint64_t))(v0 + 632);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 576);
  uint64_t v37 = *(void (**)(void))(v0 + 560);
  uint64_t v61 = *(void *)(v0 + 512);
  *(void *)typea = *(void *)(v0 + 480);
  uint64_t v38 = *(void *)(v0 + 392);
  uint64_t v39 = *(void *)(v0 + 336);
  uint64_t v52 = *(void *)(v0 + 288);
  uint64_t v54 = *(void *)(v0 + 320);
  uint64_t v40 = *(void *)(v0 + 264);
  uint64_t v41 = *(void *)(v0 + 256);
  v37(*(void *)(v0 + 504));
  sub_10024D338(v0 + 56);
  uint64_t v42 = sub_10000A844(&qword_10096B2D0);
  *(void *)(v0 + 688) = v42;
  uint64_t v43 = *(int *)(v42 + 48);
  uint64_t v44 = v39 + *(int *)(v42 + 64);
  v36(v39, v40, v38);
  *(void *)(v39 + v43) = v41;
  uint64_t v45 = sub_10000A844(&qword_10096B2C0);
  *(void *)(v0 + 696) = v45;
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
  *(void *)(v0 + 704) = v47;
  *(void *)(v0 + 712) = (v46 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v47(v44, v52, v45);
  v56(v39, enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:), v54);
  swift_bridgeObjectRetain();
  sub_1006BE3BC(v39, v61);
  v65(v39, v54);
  ((void (*)(uint64_t, void))v37)(v61, *(void *)typea);
  return _swift_task_switch(sub_1005215FC, 0, 0);
}

uint64_t sub_1005215FC()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = swift_task_alloc();
  v0[90] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[91] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[92] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100521704;
  uint64_t v5 = v0[52];
  uint64_t v6 = v0[49];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_100978618, v2, sub_10053C358, v3, 0, 0, v6);
}

uint64_t sub_100521704()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 744) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1005220EC;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 520);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_100521838;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100521838()
{
  uint64_t v69 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 195);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 392);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v0 + 752) = v6;
  *(void *)(v0 + 760) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v3, v4);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(void *)(v0 + 768) = v7;
  *(void *)(v0 + 776) = (v5 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v7(v3, v2, v4);
  if (v1 != 2)
  {
    sub_1003950CC(*(void *)(v0 + 536), *(void *)(v0 + 544), *(unsigned char *)(v0 + 195));
    os_log_t log = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(log, type);
    char v25 = *(unsigned char *)(v0 + 195);
    uint64_t v26 = *(void **)(v0 + 544);
    uint64_t v27 = *(void *)(v0 + 536);
    uint64_t v28 = *(void *)(v0 + 376);
    uint64_t v67 = *(void *)(v0 + 384);
    uint64_t v29 = *(void *)(v0 + 360);
    uint64_t v65 = *(void *)(v0 + 368);
    uint64_t v62 = *(void *)(v0 + 344);
    if (v24)
    {
      uint64_t v56 = *(void *)(v0 + 352);
      uint64_t v57 = *(void *)(v0 + 360);
      uint64_t v54 = *(void *)(v0 + 288);
      uint64_t v59 = *(void *)(v0 + 376);
      uint64_t v30 = swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      sub_1003950CC(v27, (uint64_t)v26, v25);
      v71._countAndFlagsBits = v27;
      v71._object = v26;
      unint64_t v31 = sub_100485954(v71, v25);
      unint64_t v33 = v32;
      sub_1003950E4(v27, (uint64_t)v26, v25);
      *(void *)(v0 + 216) = sub_100254634(v31, v33, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003950E4(v27, (uint64_t)v26, v25);
      sub_1003950E4(v27, (uint64_t)v26, v25);
      *(_WORD *)(v30 + 12) = 1024;
      *(_DWORD *)(v0 + 816) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Intervention step SKIP {userSafetyMode: %s, isSensitive: %{BOOL}d}", (uint8_t *)v30, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10000A7E8(v54, &qword_10096CC70);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v62);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v67, v65);
    }
    else
    {
      uint64_t v34 = *(void *)(v0 + 352);
      uint64_t v35 = *(void *)(v0 + 288);

      sub_1003950E4(v27, (uint64_t)v26, v25);
      sub_1003950E4(v27, (uint64_t)v26, v25);
      sub_10000A7E8(v35, &qword_10096CC70);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v29, v62);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v67, v65);
    }
    v7(*(void *)(v0 + 248), *(void *)(v0 + 424), *(void *)(v0 + 392));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v37 = 1;
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(v0 + 744);
  uint64_t v9 = *(void *)(v0 + 424);
  uint64_t v10 = *(void *)(v0 + 280);
  uint64_t v11 = *(void *)(v0 + 272) + *(void *)(v0 + 600);
  sub_1003950E4(*(void *)(v0 + 536), *(void *)(v0 + 544), 2u);
  sub_100278C8C(v11, v0 + 16);
  sub_10026BB6C((void *)(v0 + 16), *(void *)(v0 + 40));
  CurrentValueSubject.value.getter();
  sub_1005B0F3C(v9, v10);
  if (v8)
  {
    uint64_t v13 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 384);
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v16 = *(void *)(v0 + 344);
    uint64_t v17 = *(void *)(v0 + 352);
    uint64_t v18 = *(void *)(v0 + 288);
    (*(void (**)(void, void))(v0 + 560))(*(void *)(v0 + 496), *(void *)(v0 + 480));
    sub_10000A7E8(v18, &qword_10096CC70);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_10024D338(v0 + 16);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      char v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)char v21 = 138412290;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 208) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Analyzing full content END - Failure {%@}", v21, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v47 = *(void *)(v0 + 424);
    uint64_t v48 = *(void *)(v0 + 400);
    uint64_t v49 = *(void *)(v0 + 392);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v37 = 0;
LABEL_14:
    return v36(v37);
  }
  uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
  uint64_t v53 = *(void *)(v0 + 696);
  uint64_t v38 = *(void *)(v0 + 688);
  unint64_t v58 = *(void (**)(uint64_t, void, uint64_t))(v0 + 632);
  uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 576);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 648);
  uint64_t v39 = *(void (**)(void))(v0 + 560);
  *(void *)typea = *(void *)(v0 + 480);
  uint64_t v63 = *(void *)(v0 + 512);
  uint64_t v40 = *(void *)(v0 + 424);
  uint64_t v41 = *(void *)(v0 + 392);
  uint64_t v42 = *(void *)(v0 + 336);
  uint64_t v43 = *(void *)(v0 + 280);
  uint64_t v52 = *(void *)(v0 + 320);
  uint64_t v44 = *(void *)(v0 + 256);
  v39(*(void *)(v0 + 496));
  sub_10024D338(v0 + 16);
  uint64_t v45 = *(int *)(v38 + 48);
  uint64_t v46 = v42 + *(int *)(v38 + 64);
  v51(v42, v40, v41);
  *(void *)(v42 + v45) = v44;
  v55(v46, v43, v53);
  v58(v42, enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:), v52);
  swift_bridgeObjectRetain();
  sub_1006BE3BC(v42, v63);
  v66(v42, v52);
  ((void (*)(uint64_t, void))v39)(v63, *(void *)typea);
  return _swift_task_switch(sub_100522460, 0, 0);
}

uint64_t sub_1005220EC()
{
  uint64_t v1 = *(void *)(v0 + 520);
  sub_1003950E4(*(void *)(v0 + 536), *(void *)(v0 + 544), *(unsigned char *)(v0 + 195));
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100522180, v1, 0);
}

uint64_t sub_100522180()
{
  uint64_t v2 = v0[47];
  uint64_t v1 = v0[48];
  uint64_t v4 = v0[45];
  uint64_t v3 = v0[46];
  uint64_t v5 = v0[43];
  uint64_t v6 = v0[44];
  sub_10000A7E8(v0[36], &qword_10096CC70);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[26] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v10 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Analyzing full content END - Failure {%@}", v9, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = v0[53];
  uint64_t v13 = v0[50];
  uint64_t v14 = v0[49];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15(0);
}

uint64_t sub_100522460()
{
  uint64_t v1 = v0[35];
  uint64_t v2 = swift_task_alloc();
  v0[98] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[99] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[100] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100522568;
  uint64_t v5 = v0[51];
  uint64_t v6 = v0[49];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_100978620, v2, sub_10053C358, v3, 0, 0, v6);
}

uint64_t sub_100522568()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 808) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100522884;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = (void (*)(uint64_t, uint64_t))v2[94];
    uint64_t v6 = v2[65];
    uint64_t v7 = v2[51];
    uint64_t v8 = v2[49];
    swift_task_dealloc();
    swift_task_dealloc();
    v5(v7, v8);
    uint64_t v3 = sub_1005226C8;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_1005226C8()
{
  uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[96];
  uint64_t v1 = v0[48];
  uint64_t v11 = v0[49];
  uint64_t v12 = v0[53];
  uint64_t v3 = v0[46];
  uint64_t v2 = v0[47];
  uint64_t v4 = v0[44];
  uint64_t v5 = v0[45];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[36];
  uint64_t v8 = v0[31];
  sub_10000A7E8(v0[35], &qword_10096CC70);
  sub_10000A7E8(v7, &qword_10096CC70);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v13(v8, v12, v11);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(1);
}

uint64_t sub_100522884()
{
  uint64_t v1 = *(void *)(v0 + 520);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1005228FC, v1, 0);
}

uint64_t sub_1005228FC()
{
  uint64_t v2 = v0[47];
  uint64_t v1 = v0[48];
  uint64_t v4 = v0[45];
  uint64_t v3 = v0[46];
  uint64_t v5 = v0[43];
  uint64_t v6 = v0[44];
  uint64_t v7 = v0[36];
  sub_10000A7E8(v0[35], &qword_10096CC70);
  sub_10000A7E8(v7, &qword_10096CC70);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[26] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Analyzing full content END - Failure {%@}", v10, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = v0[53];
  uint64_t v14 = v0[50];
  uint64_t v15 = v0[49];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16(0);
}

uint64_t sub_100522BEC()
{
  uint64_t v2 = v0[47];
  uint64_t v1 = v0[48];
  uint64_t v4 = v0[45];
  uint64_t v3 = v0[46];
  uint64_t v5 = v0[43];
  uint64_t v6 = v0[44];
  (*(void (**)(void, void))(v0[38] + 8))(v0[39], v0[37]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v9 = 138412290;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[26] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v10 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Analyzing full content END - Failure {%@}", v9, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = v0[53];
  uint64_t v13 = v0[50];
  uint64_t v14 = v0[49];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15(0);
}

uint64_t sub_100522ED4()
{
  uint64_t v2 = v0[47];
  uint64_t v1 = v0[48];
  uint64_t v3 = v0[46];
  (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[26] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Analyzing full content END - Failure {%@}", v6, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = v0[53];
  uint64_t v10 = v0[50];
  uint64_t v11 = v0[49];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12(0);
}

uint64_t sub_10052319C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  *(void *)(v8 + 632) = v7;
  *(void *)(v8 + 624) = a6;
  *(void *)(v8 + 616) = a5;
  *(void *)(v8 + 608) = a4;
  *(double *)(v8 + 600) = a7;
  *(unsigned char *)(v8 + 1191) = a3;
  *(void *)(v8 + 592) = a2;
  *(void *)(v8 + 584) = a1;
  uint64_t v9 = type metadata accessor for SFAirDropReceive.Failure();
  *(void *)(v8 + 640) = v9;
  *(void *)(v8 + 648) = *(void *)(v9 - 8);
  *(void *)(v8 + 656) = swift_task_alloc();
  *(void *)(v8 + 664) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFPlatform();
  *(void *)(v8 + 672) = v10;
  *(void *)(v8 + 680) = *(void *)(v10 - 8);
  *(void *)(v8 + 688) = swift_task_alloc();
  sub_10000A844(&qword_100978508);
  *(void *)(v8 + 696) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer.State();
  *(void *)(v8 + 704) = v11;
  *(void *)(v8 + 712) = *(void *)(v11 - 8);
  *(void *)(v8 + 720) = swift_task_alloc();
  *(void *)(v8 + 728) = swift_task_alloc();
  sub_10000A844(&qword_10096CC70);
  *(void *)(v8 + 736) = swift_task_alloc();
  uint64_t v12 = sub_10000A844(&qword_10096CC68);
  *(void *)(v8 + 744) = v12;
  *(void *)(v8 + 752) = *(void *)(v12 - 8);
  *(void *)(v8 + 760) = swift_task_alloc();
  *(void *)(v8 + 768) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SFAirDropReceive.ItemDestination();
  *(void *)(v8 + 776) = v13;
  *(void *)(v8 + 784) = *(void *)(v13 - 8);
  *(void *)(v8 + 792) = swift_task_alloc();
  *(void *)(v8 + 800) = swift_task_alloc();
  *(void *)(v8 + 808) = swift_task_alloc();
  *(void *)(v8 + 816) = swift_task_alloc();
  *(void *)(v8 + 824) = swift_task_alloc();
  *(void *)(v8 + 832) = swift_task_alloc();
  *(void *)(v8 + 840) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for SFAirDrop.TransferType();
  *(void *)(v8 + 848) = v14;
  *(void *)(v8 + 856) = *(void *)(v14 - 8);
  *(void *)(v8 + 864) = swift_task_alloc();
  *(void *)(v8 + 872) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SFAirDropReceive.AskRequest();
  *(void *)(v8 + 880) = v15;
  *(void *)(v8 + 888) = *(void *)(v15 - 8);
  *(void *)(v8 + 896) = swift_task_alloc();
  *(void *)(v8 + 904) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for SFAirDropReceive.Transfer();
  *(void *)(v8 + 912) = v16;
  *(void *)(v8 + 920) = *(void *)(v16 - 8);
  *(void *)(v8 + 928) = swift_task_alloc();
  *(void *)(v8 + 936) = swift_task_alloc();
  *(void *)(v8 + 944) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v17 = static AirDropActor.shared;
  *(void *)(v8 + 952) = static AirDropActor.shared;
  return _swift_task_switch(sub_100523654, v17, 0);
}

uint64_t sub_100523654()
{
  uint64_t v153 = v0;
  uint64_t v1 = *(void *)(v0 + 944);
  uint64_t v2 = *(void *)(v0 + 920);
  uint64_t v3 = *(void *)(v0 + 912);
  uint64_t v4 = *(void *)(v0 + 904);
  uint64_t v137 = *(void *)(v0 + 936);
  *(void *)os_log_type_t type = *(void *)(v0 + 896);
  uint64_t v5 = *(void *)(v0 + 888);
  uint64_t v149 = *(void *)(v0 + 880);
  uint64_t v131 = *(void *)(v0 + 872);
  uint64_t v144 = *(void *)(v0 + 864);
  uint64_t v6 = *(void *)(v0 + 856);
  uint64_t v134 = *(void *)(v0 + 848);
  *(void *)(v0 + 960) = *(void *)(*(void *)(v0 + 632)
                                    + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_subject);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 968) = v7;
  *(void *)(v0 + 976) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v1, v3);
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v146 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v146(v4, v149);
  int v129 = SFAirDrop.TransferType.isPeerPayment.getter();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v8(v131, v134);
  uint64_t v9 = v137;
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  uint64_t v138 = v7;
  v7(v9, v3);
  SFAirDropReceive.AskRequest.type.getter();
  v146(*(void *)type, v149);
  char v10 = SFAirDrop.TransferType.isLinks.getter();
  v8(v144, v134);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = *(void *)(v0 + 944);
    uint64_t v12 = *(void *)(v0 + 912);
    uint64_t v13 = *(void *)(v0 + 904);
    uint64_t v14 = *(void *)(v0 + 872);
    *(void *)typea = *(void *)(v0 + 880);
    uint64_t v145 = *(void *)(v0 + 848);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v138(v11, v12);
    SFAirDropReceive.AskRequest.type.getter();
    v146(v13, *(void *)typea);
    int v15 = SFAirDrop.TransferType.isFiles.getter();
    v8(v14, v145);
    if (((v15 | v129) & 1) == 0)
    {
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = *(void *)(v0 + 944);
        uint64_t v122 = *(void *)(v0 + 912);
        uint64_t v46 = *(void *)(v0 + 904);
        uint64_t v124 = *(void *)(v0 + 880);
        uint64_t v47 = *(void *)(v0 + 872);
        uint64_t v126 = *(void *)(v0 + 848);
        os_log_type_t typeb = v44;
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        v152[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 136315138;
        CurrentValueSubject.value.getter();
        SFAirDropReceive.Transfer.askRequest.getter();
        v138(v45, v122);
        SFAirDropReceive.AskRequest.type.getter();
        v146(v46, v124);
        sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
        uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v51 = v50;
        v8(v47, v126);
        *(void *)(v0 + 520) = sub_100254634(v49, v51, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v43, typeb, "Ask open/move SKIP. {type: %s}", v48, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_23;
      }

LABEL_22:
      swift_release_n();
      goto LABEL_23;
    }
  }
  uint64_t v16 = *(void *)(v0 + 632);
  uint64_t v17 = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  *(void *)(v0 + 984) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  uint64_t v18 = v16 + v17;
  swift_beginAccess();
  sub_100278C8C(v18, v0 + 96);
  *(void *)(v0 + 992) = sub_10000A844(&qword_10097F210);
  sub_10000A844(&qword_10096CC78);
  if (!swift_dynamicCast())
  {
    *(_OWORD *)(v0 + 176) = 0u;
    *(_OWORD *)(v0 + 192) = 0u;
    *(void *)(v0 + 208) = 0;
    sub_10000A7E8(v0 + 176, &qword_10096CC80);
    swift_retain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      v152[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      sub_100278C8C(v18, v0 + 216);
      sub_10026BB6C((void *)(v0 + 216), *(void *)(v0 + 240));
      uint64_t DynamicType = swift_getDynamicType();
      uint64_t v40 = *(void *)(v0 + 248);
      sub_10024D338(v0 + 216);
      *(void *)(v0 + 504) = DynamicType;
      *(void *)(v0 + 512) = v40;
      sub_10000A844(&qword_10096CC88);
      uint64_t v41 = String.init<A>(describing:)();
      *(void *)(v0 + 528) = sub_100254634(v41, v42, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Ask open/move SKIP. {handler: %s}", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_23:
      uint64_t v61 = *(void *)(v0 + 592);
      (*(void (**)(void, void, void))(*(void *)(v0 + 784) + 16))(*(void *)(v0 + 584), *(void *)(v0 + 624), *(void *)(v0 + 776));
      uint64_t v62 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 1, 1, v62);
      swift_bridgeObjectRetain();
      unsigned int v125 = 0;
LABEL_24:
      uint64_t v123 = *(void *)(v0 + 616);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v63 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
      return v63(v125, v123);
    }

    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v0 + 624);
  double v20 = *(double *)(v0 + 600);
  int v147 = *(unsigned __int8 *)(v0 + 1191);
  sub_1002AF688((long long *)(v0 + 176), v0 + 56);
  *(unsigned char *)(v0 + 1188) = 0;
  sub_100278C8C(v18, v0 + 376);
  uint64_t v21 = *(void *)(v0 + 400);
  uint64_t v22 = *(void *)(v0 + 408);
  sub_10026BB6C((void *)(v0 + 376), v21);
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
  *(unsigned char *)(v0 + 1192) = v21 & 1;
  sub_10024D338(v0 + 376);
  sub_100278C8C(v18, v0 + 416);
  uint64_t v23 = *(void *)(v0 + 440);
  uint64_t v24 = *(void *)(v0 + 448);
  sub_10026BB6C((void *)(v0 + 416), v23);
  int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
  v150 = (unsigned __int8 *)(v0 + 1188);
  *(unsigned char *)(v0 + 1193) = v25 & 1;
  sub_10024D338(v0 + 416);
  int v26 = sub_1003AFA44(v19, v20);
  uint64_t v27 = *(void *)(v0 + 632);
  if ((v21 & 1) == 0 && ((v25 | v147) & v26 & 1) == 0)
  {
    uint64_t v148 = (void *)(v0 + 336);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = *(void *)(v0 + 600);
      int v31 = *(unsigned __int8 *)(v0 + 1191);
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 67109888;
      *(_DWORD *)(v0 + 1160) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 8) = 1024;
      *(_DWORD *)(v0 + 1180) = v25 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 14) = 1024;
      *(_DWORD *)(v0 + 1168) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 20) = 2048;
      *(void *)(v0 + 552) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Not auto-opening URLs {shouldEndAfterAutoOpen: %{BOOL}d, supportsAutoOpen: %{BOOL}d, requestedAutoOpen: %{BOOL}d, transferImportSeconds: %f}", (uint8_t *)v32, 0x1Eu);
      swift_slowDealloc();
    }

    sub_100278C8C(*(void *)(v0 + 632) + *(void *)(v0 + 984), v0 + 136);
    sub_10000A844(&qword_100978598);
    if (swift_dynamicCast())
    {
      uint64_t v33 = *(void *)(v0 + 616);
      sub_1002AF688((long long *)(v0 + 296), v0 + 256);
      uint64_t v34 = *(void *)(v0 + 280);
      uint64_t v35 = *(void *)(v0 + 288);
      sub_10026BB6C((void *)(v0 + 256), v34);
      char v135 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 8))(v33, v34, v35);
      sub_10024D338(v0 + 256);
    }
    else
    {
      *(void *)(v0 + 328) = 0;
      *(_OWORD *)(v0 + 296) = 0u;
      *(_OWORD *)(v0 + 312) = 0u;
      sub_10000A7E8(v0 + 296, &qword_1009785A0);
      char v135 = 0;
    }
    int v64 = *(unsigned __int8 *)(v0 + 1192);
    uint64_t v139 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
    uint64_t v65 = *(void *)(v0 + 944);
    uint64_t v66 = *(void *)(v0 + 912);
    sub_100278C8C(*(void *)(v0 + 632) + *(void *)(v0 + 984), (uint64_t)v148);
    uint64_t v67 = *(void *)(v0 + 360);
    uint64_t v68 = *(void *)(v0 + 368);
    sub_10026BB6C(v148, v67);
    CurrentValueSubject.value.getter();
    char v69 = sub_1005B40B0(v65, v64, *v150, v135 & 1, v67, v68);
    v139(v65, v66);
    sub_10024D338((uint64_t)v148);
    if (v69)
    {
      uint64_t v70 = (void *)(v0 + 16);
      uint64_t v71 = *(void *)(v0 + 832);
      uint64_t v72 = *(void *)(v0 + 784);
      uint64_t v73 = *(void *)(v0 + 776);
      uint64_t v74 = *(void *)(v0 + 624);
      *(void *)(v0 + 1048) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
      int v75 = *v150;
      uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
      *(void *)(v0 + 1056) = v76;
      *(void *)(v0 + 1064) = (v72 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v76(v71, v74, v73);
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.default.getter();
      BOOL v79 = os_log_type_enabled(v77, v78);
      uint64_t v80 = *(void *)(v0 + 832);
      char v136 = v76;
      if (v79)
      {
        int v127 = v75;
        uint64_t v81 = *(void *)(v0 + 824);
        uint64_t v82 = *(void *)(v0 + 784);
        uint64_t v83 = *(void *)(v0 + 776);
        uint64_t v84 = swift_slowAlloc();
        v152[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v84 = 67109378;
        *(_DWORD *)(v0 + 1164) = v127;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v84 + 8) = 2080;
        v76(v81, v80, v83);
        uint64_t v85 = String.init<A>(describing:)();
        *(void *)(v0 + 576) = sub_100254634(v85, v86, v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
        uint64_t v88 = v83;
        uint64_t v70 = (void *)(v0 + 16);
        v87(v80, v88);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Ask open/move START. {alreadyViewed: %{BOOL}d, destination: %s}", (uint8_t *)v84, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v96 = *(void *)(v0 + 784);
        uint64_t v97 = *(void *)(v0 + 776);

        uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
        v87(v80, v97);
      }
      *(void *)(v0 + 1072) = v87;
      uint64_t v98 = *(void *)(v0 + 928);
      uint64_t v99 = *(void *)(v0 + 736);
      uint64_t v100 = *(void **)(v0 + 624);
      uint64_t v101 = *(void *)(v0 + 616);
      sub_100278C8C(*(void *)(v0 + 632) + *(void *)(v0 + 984), (uint64_t)v70);
      uint64_t v102 = *(void *)(v0 + 40);
      uint64_t v103 = *(void *)(v0 + 48);
      sub_10026BB6C(v70, v102);
      CurrentValueSubject.value.getter();
      swift_beginAccess();
      sub_1005B023C(v98, v101, *v150, v100, v102, v103, v99);
      uint64_t v104 = *(void (**)(void))(v0 + 968);
      uint64_t v151 = *(void *)(v0 + 944);
      uint64_t v130 = *(void *)(v0 + 776);
      uint64_t v132 = *(void *)(v0 + 736);
      uint64_t v105 = *(void *)(v0 + 728);
      uint64_t v106 = *(void *)(v0 + 712);
      uint64_t v133 = *(void *)(v0 + 704);
      *(void *)typec = *(void *)(v0 + 912);
      uint64_t v107 = *(void *)(v0 + 624);
      uint64_t v128 = *(void *)(v0 + 616);
      uint64_t v108 = *(void *)(v0 + 608);
      v104(*(void *)(v0 + 928));
      sub_10024D338(v0 + 16);
      uint64_t v109 = (int *)sub_10000A844((uint64_t *)&unk_100972400);
      uint64_t v110 = v109[12];
      uint64_t v111 = v109[16];
      uint64_t v112 = v105 + v109[20];
      v136(v105, v107, v130);
      *(void *)(v105 + v110) = v108;
      *(void *)(v105 + v111) = v128;
      uint64_t v113 = sub_10000A844(&qword_10096B2C0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 16))(v112, v132, v113);
      uint64_t v114 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
      uint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 104);
      *(void *)(v0 + 1080) = v115;
      *(void *)(v0 + 1088) = (v106 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
      v115(v105, v114, v133);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1006BE3BC(v105, v151);
      ((void (*)(uint64_t, void))v104)(v151, *(void *)typec);
      unint64_t v116 = (void *)swift_task_alloc();
      *(void *)(v0 + 1096) = v116;
      void *v116 = v0;
      v116[1] = sub_100526030;
      uint64_t v117 = *(void *)(v0 + 816);
      uint64_t v118 = *(void *)(v0 + 736);
      uint64_t v119 = *(void *)(v0 + 696);
      uint64_t v120 = *(void *)(v0 + 624);
      return sub_100538310(v117, v119, v118, v120);
    }
    uint64_t v94 = *(void *)(v0 + 592);
    unsigned int v125 = *v150;
    (*(void (**)(void, void, void))(*(void *)(v0 + 784) + 16))(*(void *)(v0 + 584), *(void *)(v0 + 624), *(void *)(v0 + 776));
    uint64_t v95 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v94, 1, 1, v95);
    swift_bridgeObjectRetain();
    sub_10024D338(v0 + 56);
    goto LABEL_24;
  }
  uint64_t v52 = *(void *)(v27
                  + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_lockStateManager
                  + 24);
  uint64_t v53 = *(void *)(v27
                  + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_lockStateManager
                  + 32);
  sub_10026BB6C((void *)(v27 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_lockStateManager), v52);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53))
  {
    *(void *)(v0 + 1000) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Waiting for unlock before auto-opening...", v56, 2u);
      swift_slowDealloc();
    }

    uint64_t v57 = static AirDropActor.shared;
    uint64_t v58 = sub_10053BB90((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
    uint64_t v59 = (void *)swift_task_alloc();
    *(void *)(v0 + 1008) = v59;
    *uint64_t v59 = v0;
    v59[1] = sub_100524D60;
    uint64_t v60 = *(void *)(v0 + 632);
    return withCheckedContinuation<A>(isolation:function:_:)(v59, v57, v58, 0xD00000000000005BLL, 0x80000001007C0F50, sub_10053B184, v60, (char *)&type metadata for () + 8);
  }
  else
  {
    uint64_t v89 = (void *)swift_task_alloc();
    *(void *)(v0 + 1016) = v89;
    *uint64_t v89 = v0;
    v89[1] = sub_100524F94;
    uint64_t v90 = *(void *)(v0 + 840);
    uint64_t v91 = *(void *)(v0 + 624);
    uint64_t v92 = *(void *)(v0 + 616);
    uint64_t v93 = *(void *)(v0 + 608);
    return sub_1005376B0(v90, v93, v92, v91);
  }
}

uint64_t sub_100524D60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 952);
  swift_task_dealloc();
  return _swift_task_switch(sub_100524E70, v1, 0);
}

uint64_t sub_100524E70()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Finished waiting for unlock", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = (void *)swift_task_alloc();
  v0[127] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100524F94;
  uint64_t v5 = v0[105];
  uint64_t v6 = v0[78];
  uint64_t v7 = v0[77];
  uint64_t v8 = v0[76];
  return sub_1005376B0(v5, v8, v7, v6);
}

uint64_t sub_100524F94()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1024) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 952);
  if (v0) {
    uint64_t v4 = sub_100526E80;
  }
  else {
    uint64_t v4 = sub_1005250C0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005250C0()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = *(unsigned __int8 *)(v0 + 1193);
    int v4 = *(unsigned __int8 *)(v0 + 1192);
    uint64_t v5 = *(void *)(v0 + 600);
    int v6 = *(unsigned __int8 *)(v0 + 1191);
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109888;
    *(_DWORD *)(v0 + 1184) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 8) = 1024;
    *(_DWORD *)(v0 + 1176) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 14) = 1024;
    *(_DWORD *)(v0 + 1172) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 20) = 2048;
    *(void *)(v0 + 568) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Opening autoOpen URLs {shouldEndAfterAutoOpen: %{BOOL}d, supportsAutoOpen: %{BOOL}d, requestedAutoOpen: %{BOOL}d, transferImportSeconds: %f}", (uint8_t *)v7, 0x1Eu);
    swift_slowDealloc();
  }
  uint64_t v8 = *(void *)(v0 + 840);
  uint64_t v9 = *(void *)(v0 + 616);

  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 88);
  sub_10026BB6C((void *)(v0 + 56), v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v9, v8, v10, v11);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 1032) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1005252F8;
  uint64_t v13 = *(void *)(v0 + 744);
  return SFProgressTask.finalValue.getter(v0 + 1190, v13);
}

uint64_t sub_1005252F8()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1040) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[119];
  (*(void (**)(void, void))(v2[94] + 8))(v2[96], v2[93]);
  if (v0) {
    int v4 = sub_100527360;
  }
  else {
    int v4 = sub_100525474;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100525474()
{
  uint64_t v88 = v0;
  uint64_t v1 = (unsigned __int8 *)(v0 + 1188);
  (*(void (**)(void, void))(*(void *)(v0 + 784) + 8))(*(void *)(v0 + 840), *(void *)(v0 + 776));
  *(unsigned char *)(v0 + 1188) = *(unsigned char *)(v0 + 1190);
  uint64_t v2 = *(void *)(v0 + 1040);
  sub_100278C8C(*(void *)(v0 + 632) + *(void *)(v0 + 984), v0 + 136);
  sub_10000A844(&qword_100978598);
  uint64_t v79 = v2;
  uint64_t v81 = v0 + 56;
  if (swift_dynamicCast())
  {
    uint64_t v3 = *(void *)(v0 + 616);
    sub_1002AF688((long long *)(v0 + 296), v0 + 256);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 288);
    sub_10026BB6C((void *)(v0 + 256), v4);
    char v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(v3, v4, v5);
    sub_10024D338(v0 + 256);
  }
  else
  {
    *(void *)(v0 + 328) = 0;
    *(_OWORD *)(v0 + 296) = 0u;
    *(_OWORD *)(v0 + 312) = 0u;
    sub_10000A7E8(v0 + 296, &qword_1009785A0);
    char v83 = 0;
  }
  int v6 = *(unsigned __int8 *)(v0 + 1192);
  uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
  uint64_t v7 = *(void *)(v0 + 944);
  uint64_t v8 = *(void *)(v0 + 912);
  sub_100278C8C(*(void *)(v0 + 632) + *(void *)(v0 + 984), v0 + 336);
  uint64_t v9 = *(void *)(v0 + 360);
  uint64_t v10 = *(void *)(v0 + 368);
  sub_10026BB6C((void *)(v0 + 336), v9);
  CurrentValueSubject.value.getter();
  char v11 = sub_1005B40B0(v7, v6, *v1, v83 & 1, v9, v10);
  v84(v7, v8);
  sub_10024D338(v0 + 336);
  if ((v11 & 1) == 0)
  {
    uint64_t v29 = *(void *)(v0 + 592);
    unsigned int v73 = *v1;
    (*(void (**)(void, void, void))(*(void *)(v0 + 784) + 16))(*(void *)(v0 + 584), *(void *)(v0 + 624), *(void *)(v0 + 776));
    uint64_t v30 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
    swift_bridgeObjectRetain();
    sub_10024D338(v81);
    int v31 = *(void **)(v0 + 616);
LABEL_8:
    uint64_t v72 = v31;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void, void *))(v0 + 8);
    return v32(v73, v72);
  }
  uint64_t v12 = v0 + 16;
  uint64_t v13 = *(void *)(v0 + 832);
  uint64_t v14 = *(void *)(v0 + 784);
  uint64_t v15 = *(void *)(v0 + 776);
  uint64_t v16 = *(void *)(v0 + 624);
  *(void *)(v0 + 1048) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  int v17 = *v1;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  *(void *)(v0 + 1056) = v18;
  *(void *)(v0 + 1064) = (v14 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v18(v13, v16, v15);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = *(void *)(v0 + 832);
  uint64_t v86 = v0 + 16;
  os_log_type_t v78 = v18;
  if (v21)
  {
    uint64_t v23 = *(void *)(v0 + 824);
    uint64_t v75 = *(void *)(v0 + 784);
    uint64_t v24 = *(void *)(v0 + 776);
    uint64_t v25 = swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 67109378;
    *(_DWORD *)(v0 + 1164) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 8) = 2080;
    v18(v23, v22, v24);
    uint64_t v26 = String.init<A>(describing:)();
    *(void *)(v0 + 576) = sub_100254634(v26, v27, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    v28(v22, v24);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Ask open/move START. {alreadyViewed: %{BOOL}d, destination: %s}", (uint8_t *)v25, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v0 + 16;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v34 = *(void *)(v0 + 784);
    uint64_t v35 = *(void *)(v0 + 776);

    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v28(v22, v35);
  }
  *(void *)(v0 + 1072) = v28;
  uint64_t v36 = *(void *)(v0 + 928);
  uint64_t v37 = *(void *)(v0 + 736);
  uint64_t v38 = *(void **)(v0 + 624);
  uint64_t v39 = *(void *)(v0 + 616);
  sub_100278C8C(*(void *)(v0 + 632) + *(void *)(v0 + 984), v12);
  uint64_t v40 = (void *)v12;
  uint64_t v41 = *(void *)(v0 + 40);
  uint64_t v42 = *(void *)(v0 + 48);
  sub_10026BB6C(v40, v41);
  CurrentValueSubject.value.getter();
  swift_beginAccess();
  sub_1005B023C(v36, v39, *(unsigned __int8 *)(v0 + 1188), v38, v41, v42, v37);
  uint64_t v43 = *(void (**)(void))(v0 + 968);
  if (v79)
  {
    ((void (*)(void, void))v43)(*(void *)(v0 + 928), *(void *)(v0 + 912));
    sub_10024D338(v86);
    *(void *)(v0 + 544) = v79;
    swift_errorRetain();
    sub_10000A844(&qword_10096BAF0);
    if (swift_dynamicCast())
    {
      int v44 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 648) + 88))(*(void *)(v0 + 656), *(void *)(v0 + 640));
      if (v44 == enum case for SFAirDropReceive.Failure.declined(_:))
      {
        swift_errorRelease();
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v47 = 0;
          uint64_t v48 = "Ask open/move END - Declined. Not opening or moving";
LABEL_23:
          _os_log_impl((void *)&_mh_execute_header, v45, v46, v48, v47, 2u);
          swift_slowDealloc();
          goto LABEL_24;
        }
        goto LABEL_24;
      }
      if (v44 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
      {
        swift_errorRelease();
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v47 = 0;
          uint64_t v48 = "Ask open/move END - Not handled. Not opening or moving";
          goto LABEL_23;
        }
LABEL_24:
        uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1056);
        uint64_t v66 = *(void *)(v0 + 776);
        uint64_t v67 = *(void *)(v0 + 624);
        uint64_t v68 = *(void *)(v0 + 592);
        uint64_t v69 = *(void *)(v0 + 584);

        v65(v69, v67, v66);
        uint64_t v70 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v68, 1, 1, v70);
        swift_errorRelease();
        sub_10024D338(v81);
        unsigned int v73 = 0;
        int v31 = _swiftEmptyArrayStorage;
        goto LABEL_8;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 648) + 8))(*(void *)(v0 + 656), *(void *)(v0 + 640));
    }
    swift_errorRelease();
    sub_10024D338(v81);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v71 = *(uint64_t (**)(void))(v0 + 8);
    return v71(0);
  }
  else
  {
    uint64_t v85 = *(void *)(v0 + 944);
    uint64_t v76 = *(void *)(v0 + 776);
    uint64_t v77 = *(void *)(v0 + 736);
    uint64_t v49 = *(void *)(v0 + 728);
    uint64_t v50 = *(void *)(v0 + 712);
    uint64_t v80 = *(void *)(v0 + 704);
    uint64_t v82 = *(void *)(v0 + 912);
    uint64_t v51 = *(void *)(v0 + 624);
    uint64_t v74 = *(void *)(v0 + 616);
    uint64_t v52 = *(void *)(v0 + 608);
    v43(*(void *)(v0 + 928));
    sub_10024D338(v86);
    uint64_t v53 = (int *)sub_10000A844((uint64_t *)&unk_100972400);
    uint64_t v54 = v53[12];
    uint64_t v55 = v53[16];
    uint64_t v56 = v49 + v53[20];
    v78(v49, v51, v76);
    *(void *)(v49 + v54) = v52;
    *(void *)(v49 + v55) = v74;
    uint64_t v57 = sub_10000A844(&qword_10096B2C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(v56, v77, v57);
    uint64_t v58 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
    uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 104);
    *(void *)(v0 + 1080) = v59;
    *(void *)(v0 + 1088) = (v50 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
    v59(v49, v58, v80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1006BE3BC(v49, v85);
    ((void (*)(uint64_t, uint64_t))v43)(v85, v82);
    uint64_t v60 = (void *)swift_task_alloc();
    *(void *)(v0 + 1096) = v60;
    *uint64_t v60 = v0;
    v60[1] = sub_100526030;
    uint64_t v61 = *(void *)(v0 + 816);
    uint64_t v62 = *(void *)(v0 + 736);
    uint64_t v63 = *(void *)(v0 + 696);
    uint64_t v64 = *(void *)(v0 + 624);
    return sub_100538310(v61, v63, v62, v64);
  }
}

uint64_t sub_100526030()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1104) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 952);
  if (v0) {
    uint64_t v4 = sub_10052785C;
  }
  else {
    uint64_t v4 = sub_10052615C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10052615C()
{
  uint64_t v21 = v0;
  (*(void (**)(void, void, void))(v0 + 1056))(*(void *)(v0 + 808), *(void *)(v0 + 816), *(void *)(v0 + 776));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1056);
    uint64_t v3 = *(void *)(v0 + 824);
    uint64_t v4 = *(void *)(v0 + 808);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 1072);
    uint64_t v5 = *(void *)(v0 + 776);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v18(v3, v4, v5);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 560) = sub_100254634(v7, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ask open/move END - accepted {destination: %s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 1072);
    uint64_t v10 = *(void *)(v0 + 808);
    uint64_t v11 = *(void *)(v0 + 776);

    v9(v10, v11);
  }
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 1112) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1005263C4;
  uint64_t v13 = *(void *)(v0 + 816);
  uint64_t v14 = *(void *)(v0 + 800);
  uint64_t v15 = *(void *)(v0 + 616);
  uint64_t v16 = *(void *)(v0 + 608);
  return sub_1005376B0(v14, v16, v15, v13);
}

uint64_t sub_1005263C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1120) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 952);
  if (v0) {
    uint64_t v4 = sub_100527DC8;
  }
  else {
    uint64_t v4 = sub_1005264F0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005264F0()
{
  uint64_t v1 = (unsigned char *)(v0 + 1188);
  uint64_t v2 = *(void *)(v0 + 792);
  uint64_t v3 = *(void *)(v0 + 784);
  uint64_t v4 = *(void *)(v0 + 776);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1056))(v2, *(void *)(v0 + 800), v4);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == enum case for SFAirDropReceive.ItemDestination.customApp(_:))
  {
    uint64_t v6 = *(uint64_t **)(v0 + 792);
    (*(void (**)(uint64_t *, void))(*(void *)(v0 + 784) + 96))(v6, *(void *)(v0 + 776));
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (v7 == 0xD000000000000034 && v8 == 0x80000001007B7D20)
    {
      swift_bridgeObjectRelease();
      char v9 = 0;
    }
    else
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v9 = v10 ^ 1;
    }
  }
  else
  {
    if (v5 != enum case for SFAirDropReceive.ItemDestination.noItem(_:))
    {
      (*(void (**)(void, void))(v0 + 1072))(*(void *)(v0 + 792), *(void *)(v0 + 776));
      if (*v1 != 1)
      {
LABEL_14:
        uint64_t v39 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1080);
        uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1056);
        uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
        uint64_t v40 = *(void *)(v0 + 944);
        uint64_t v41 = *(void *)(v0 + 912);
        uint64_t v15 = *(void *)(v0 + 800);
        uint64_t v16 = *(void *)(v0 + 776);
        uint64_t v17 = *(void *)(v0 + 720);
        uint64_t v18 = *(void *)(v0 + 712);
        uint64_t v19 = *(void *)(v0 + 704);
        uint64_t v20 = *(void *)(v0 + 616);
        uint64_t v21 = *(void *)(v0 + 608);
        uint64_t v22 = sub_10000A844((uint64_t *)&unk_10096B2B0);
        uint64_t v23 = *(int *)(v22 + 48);
        uint64_t v24 = *(int *)(v22 + 64);
        v38(v17, v15, v16);
        *(void *)(v17 + v23) = v21;
        *(void *)(v17 + v24) = v20;
        v39(v17, enum case for SFAirDropReceive.Transfer.State.opening(_:), v19);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1006BE3BC(v17, v40);
        uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
        *(void *)(v0 + 1128) = v25;
        *(void *)(v0 + 1136) = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v25(v17, v19);
        v42(v40, v41);
        uint64_t v26 = *(void *)(v0 + 80);
        uint64_t v27 = *(void *)(v0 + 88);
        sub_10026BB6C((void *)(v0 + 56), v26);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(v20, v15, v26, v27);
        uint64_t v28 = (void *)swift_task_alloc();
        *(void *)(v0 + 1144) = v28;
        *uint64_t v28 = v0;
        v28[1] = sub_100526AA0;
        uint64_t v29 = *(void *)(v0 + 744);
        return SFProgressTask.finalValue.getter(v0 + 1189, v29);
      }
      char v9 = 1;
LABEL_12:
      uint64_t v11 = *(void *)(v0 + 688);
      uint64_t v12 = *(void *)(v0 + 680);
      uint64_t v13 = *(void *)(v0 + 672);
      static SFPlatform.macOS.getter();
      char v14 = static SFPlatform.isPlatform(_:)();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      if ((v14 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_13;
    }
    char v9 = 0;
  }
  if (*v1) {
    goto LABEL_12;
  }
LABEL_13:
  if (v9) {
    goto LABEL_14;
  }
LABEL_17:
  uint64_t v30 = *(void *)(v0 + 736);
  uint64_t v31 = *(void *)(v0 + 728);
  uint64_t v32 = *(void *)(v0 + 712);
  uint64_t v33 = *(void *)(v0 + 704);
  (*(void (**)(void, void))(v0 + 1072))(*(void *)(v0 + 816), *(void *)(v0 + 776));
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  sub_10000A7E8(v30, &qword_10096CC70);
  uint64_t v34 = *(void *)(v0 + 696);
  uint64_t v35 = *(void *)(v0 + 592);
  (*(void (**)(void, void, void))(*(void *)(v0 + 784) + 32))(*(void *)(v0 + 584), *(void *)(v0 + 800), *(void *)(v0 + 776));
  sub_10024D388(v34, v35, &qword_100978508);
  swift_bridgeObjectRetain();
  sub_10024D338(v0 + 56);
  uint64_t v43 = *(void *)(v0 + 616);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v36(1, v43);
}

uint64_t sub_100526AA0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1152) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[119];
  (*(void (**)(void, void))(v2[94] + 8))(v2[95], v2[93]);
  if (v0) {
    uint64_t v4 = sub_10052837C;
  }
  else {
    uint64_t v4 = sub_100526C1C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100526C1C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1128);
  uint64_t v2 = *(void *)(v0 + 736);
  uint64_t v3 = *(void *)(v0 + 728);
  uint64_t v4 = *(void *)(v0 + 704);
  (*(void (**)(void, void))(v0 + 1072))(*(void *)(v0 + 816), *(void *)(v0 + 776));
  v1(v3, v4);
  sub_10000A7E8(v2, &qword_10096CC70);
  unsigned int v10 = *(unsigned __int8 *)(v0 + 1189);
  uint64_t v5 = *(void *)(v0 + 696);
  uint64_t v6 = *(void *)(v0 + 592);
  (*(void (**)(void, void, void))(*(void *)(v0 + 784) + 32))(*(void *)(v0 + 584), *(void *)(v0 + 800), *(void *)(v0 + 776));
  sub_10024D388(v5, v6, &qword_100978508);
  swift_bridgeObjectRetain();
  sub_10024D338(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 616);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
  return v7(v10, v9);
}

uint64_t sub_100526E80()
{
  v0[67] = v0[128];
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(v0[81] + 88))(v0[83], v0[80]) == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      swift_errorRelease();
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v1, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ask open/move END - Declined. Not opening or moving", v3, 2u);
        swift_slowDealloc();
      }
      uint64_t v4 = v0[98];
      uint64_t v5 = v0[97];
      uint64_t v6 = v0[78];
      uint64_t v7 = v0[74];
      uint64_t v8 = v0[73];

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v6, v5);
      uint64_t v9 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
      swift_errorRelease();
      sub_10024D338((uint64_t)(v0 + 7));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unsigned int v10 = (uint64_t (*)(void, void *))v0[1];
      return v10(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(void, void))(v0[81] + 8))(v0[83], v0[80]);
  }
  swift_errorRelease();
  sub_10024D338((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12(0);
}

uint64_t sub_100527360()
{
  (*(void (**)(void, void))(v0[98] + 8))(v0[105], v0[97]);
  v0[67] = v0[130];
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    if ((*(unsigned int (**)(void, void))(v0[81] + 88))(v0[83], v0[80]) == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      swift_errorRelease();
      uint64_t v1 = Logger.logObject.getter();
      os_log_type_t v2 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v1, v2))
      {
        uint64_t v3 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ask open/move END - Declined. Not opening or moving", v3, 2u);
        swift_slowDealloc();
      }
      uint64_t v4 = v0[98];
      uint64_t v5 = v0[97];
      uint64_t v6 = v0[78];
      uint64_t v7 = v0[74];
      uint64_t v8 = v0[73];

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v6, v5);
      uint64_t v9 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
      swift_errorRelease();
      sub_10024D338((uint64_t)(v0 + 7));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unsigned int v10 = (uint64_t (*)(void, void *))v0[1];
      return v10(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(void, void))(v0[81] + 8))(v0[83], v0[80]);
  }
  swift_errorRelease();
  sub_10024D338((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12(0);
}

uint64_t sub_10052785C()
{
  uint64_t v1 = v0[92];
  (*(void (**)(void, void))(v0[89] + 8))(v0[91], v0[88]);
  sub_10000A7E8(v1, &qword_10096CC70);
  v0[68] = v0[138];
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    int v2 = (*(uint64_t (**)(void, void))(v0[81] + 88))(v0[82], v0[80]);
    if (v2 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      swift_errorRelease();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        uint64_t v6 = "Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v3, v4, v6, v5, 2u);
        swift_slowDealloc();
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    if (v2 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      swift_errorRelease();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        uint64_t v6 = "Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }
LABEL_9:
      uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v0[132];
      uint64_t v8 = v0[97];
      uint64_t v9 = v0[78];
      uint64_t v10 = v0[74];
      uint64_t v11 = v0[73];

      v7(v11, v9, v8);
      uint64_t v12 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
      swift_errorRelease();
      sub_10024D338((uint64_t)(v0 + 7));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = (uint64_t (*)(void, void *))v0[1];
      return v13(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(void, void))(v0[81] + 8))(v0[82], v0[80]);
  }
  swift_errorRelease();
  sub_10024D338((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15(0);
}

uint64_t sub_100527DC8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[134];
  uint64_t v22 = (uint64_t)(v0 + 7);
  uint64_t v2 = v0[102];
  uint64_t v3 = v0[97];
  uint64_t v4 = v0[92];
  uint64_t v5 = v0[91];
  uint64_t v6 = v0[89];
  uint64_t v7 = v0[88];
  sub_10000A7E8(v0[87], &qword_100978508);
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_10000A7E8(v4, &qword_10096CC70);
  v0[68] = v0[140];
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    int v8 = (*(uint64_t (**)(void, void))(v0[81] + 88))(v0[82], v0[80]);
    if (v8 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      swift_errorRelease();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        uint64_t v12 = "Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
        swift_slowDealloc();
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    if (v8 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      swift_errorRelease();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        uint64_t v12 = "Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }
LABEL_9:
      uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[132];
      uint64_t v14 = v0[97];
      uint64_t v15 = v0[78];
      uint64_t v16 = v0[74];
      uint64_t v17 = v0[73];

      v13(v17, v15, v14);
      uint64_t v18 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 1, 1, v18);
      swift_errorRelease();
      sub_10024D338(v22);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v19 = (uint64_t (*)(void, void *))v0[1];
      return v19(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(void, void))(v0[81] + 8))(v0[82], v0[80]);
  }
  swift_errorRelease();
  sub_10024D338(v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21(0);
}

uint64_t sub_10052837C()
{
  uint64_t v23 = (uint64_t)(v0 + 7);
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[141];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[134];
  uint64_t v3 = v0[102];
  uint64_t v4 = v0[97];
  uint64_t v5 = v0[92];
  uint64_t v6 = v0[91];
  uint64_t v7 = v0[88];
  uint64_t v8 = v0[87];
  v2(v0[100], v4);
  sub_10000A7E8(v8, &qword_100978508);
  v2(v3, v4);
  v1(v6, v7);
  sub_10000A7E8(v5, &qword_10096CC70);
  v0[68] = v0[144];
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    int v9 = (*(uint64_t (**)(void, void))(v0[81] + 88))(v0[82], v0[80]);
    if (v9 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      swift_errorRelease();
      os_log_type_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        uint64_t v13 = "Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 2u);
        swift_slowDealloc();
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    if (v9 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      swift_errorRelease();
      os_log_type_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        uint64_t v13 = "Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }
LABEL_9:
      uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[132];
      uint64_t v15 = v0[97];
      uint64_t v16 = v0[78];
      uint64_t v17 = v0[74];
      uint64_t v18 = v0[73];

      v14(v18, v16, v15);
      uint64_t v19 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
      swift_errorRelease();
      sub_10024D338(v23);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v20 = (uint64_t (*)(void, void *))v0[1];
      return v20(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(void, void))(v0[81] + 8))(v0[82], v0[80]);
  }
  swift_errorRelease();
  sub_10024D338(v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22(0);
}

uint64_t sub_100528948(uint64_t a1, uint64_t a2)
{
  v3[98] = v2;
  v3[97] = a2;
  v3[96] = a1;
  sub_10000A844(&qword_100970C58);
  v3[99] = swift_task_alloc();
  sub_10000A844(&qword_100978540);
  v3[100] = swift_task_alloc();
  v3[101] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SDAirDropServerConnection(0);
  v3[102] = v4;
  v3[103] = *(void *)(v4 - 8);
  v3[104] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v3[105] = v5;
  v3[106] = *(void *)(v5 - 8);
  v3[107] = swift_task_alloc();
  v3[108] = swift_task_alloc();
  sub_10000A844(&qword_10096CC70);
  v3[109] = swift_task_alloc();
  type metadata accessor for SFAirDrop.TransferIdentifier();
  v3[110] = swift_task_alloc();
  _s14descr1008C9A51V16ExchangeResponseVMa(0);
  v3[111] = swift_task_alloc();
  v3[112] = swift_task_alloc();
  v3[113] = swift_task_alloc();
  sub_10000A844(&qword_100970BD0);
  v3[114] = swift_task_alloc();
  v3[115] = swift_task_alloc();
  v3[116] = swift_task_alloc();
  v3[117] = swift_task_alloc();
  sub_10000A844(&qword_100970BA8);
  v3[118] = swift_task_alloc();
  v3[119] = swift_task_alloc();
  v3[120] = swift_task_alloc();
  v3[121] = swift_task_alloc();
  v3[122] = swift_task_alloc();
  v3[123] = swift_task_alloc();
  v3[124] = swift_task_alloc();
  v3[125] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDrop.ContactInfo();
  v3[126] = v6;
  v3[127] = *(void *)(v6 - 8);
  v3[128] = swift_task_alloc();
  v3[129] = swift_task_alloc();
  v3[130] = swift_task_alloc();
  v3[131] = swift_task_alloc();
  v3[132] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDrop.TransferType();
  v3[133] = v7;
  v3[134] = *(void *)(v7 - 8);
  v3[135] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDropReceive.AskRequest();
  v3[136] = v8;
  v3[137] = *(void *)(v8 - 8);
  v3[138] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDrop.ContactRequest();
  v3[139] = v9;
  v3[140] = *(void *)(v9 - 8);
  v3[141] = swift_task_alloc();
  v3[142] = swift_task_alloc();
  v3[143] = swift_task_alloc();
  v3[144] = swift_task_alloc();
  v3[145] = swift_task_alloc();
  v3[146] = swift_task_alloc();
  v3[147] = swift_task_alloc();
  v3[148] = swift_task_alloc();
  v3[149] = swift_task_alloc();
  v3[150] = swift_task_alloc();
  v3[151] = swift_task_alloc();
  v3[152] = swift_task_alloc();
  v3[153] = swift_task_alloc();
  v3[154] = swift_task_alloc();
  v3[155] = swift_task_alloc();
  v3[156] = swift_task_alloc();
  sub_10000A844(&qword_100978508);
  v3[157] = swift_task_alloc();
  uint64_t v10 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
  v3[158] = v10;
  v3[159] = *(void *)(v10 - 8);
  v3[160] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v3[161] = v11;
  v3[162] = *(void *)(v11 - 8);
  v3[163] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDropReceive.Transfer();
  v3[164] = v12;
  v3[165] = *(void *)(v12 - 8);
  v3[166] = swift_task_alloc();
  sub_10000A844(&qword_100978548);
  v3[167] = swift_task_alloc();
  uint64_t v13 = sub_10000A844(&qword_100978550);
  v3[168] = v13;
  v3[169] = *(void *)(v13 - 8);
  v3[170] = swift_task_alloc();
  v3[171] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v14 = static AirDropActor.shared;
  v3[172] = static AirDropActor.shared;
  return _swift_task_switch(sub_1005290EC, v14, 0);
}

uint64_t sub_1005290EC()
{
  uint64_t v243 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 784)
                 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler);
  uint64_t v2 = *(void *)(v0 + 1336);
  *(void *)(v0 + 1384) = v1;
  uint64_t v3 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation;
  swift_beginAccess();
  sub_10024A330(v3, v2, &qword_100978548);
  uint64_t v4 = sub_10000A844(&qword_100978558);
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v4) == 1)
  {
    sub_10000A7E8(*(void *)(v0 + 1336), &qword_100978548);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Exchange Contact Request SKIP - No contact request task", v8, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void, void))(v0 + 8);
    return v9(0, 0);
  }
  uint64_t v11 = *(void *)(v0 + 1368);
  uint64_t v12 = *(void *)(v0 + 1360);
  uint64_t v13 = *(void *)(v0 + 1352);
  uint64_t v14 = *(void *)(v0 + 1344);
  uint64_t v15 = *(void *)(v0 + 1336);
  SFProgressContinuation.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v12, v14);
  *(void *)(v0 + 1392) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Exchange Contact START", v18, 2u);
    swift_slowDealloc();
  }
  uint64_t v19 = *(void *)(v0 + 1328);
  uint64_t v20 = *(void *)(v0 + 1320);
  uint64_t v21 = *(void *)(v0 + 1304);
  uint64_t v22 = *(void *)(v0 + 1296);
  uint64_t v23 = *(void *)(v0 + 1288);
  uint64_t v24 = *(void *)(v0 + 1272);
  uint64_t v236 = *(void *)(v0 + 1312);
  uint64_t v241 = *(void *)(v0 + 1264);
  uint64_t v25 = *(void *)(v0 + 768);

  uint64_t v26 = enum case for SFAirDropReceive.Transfer.State.waitingForContactExchangeRequest(_:);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 104);
  *(void *)(v0 + 1400) = v27;
  *(void *)(v0 + 1408) = (v22 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v27(v21, v26, v23);
  sub_1006BE3BC(v21, v19);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  *(void *)(v0 + 1416) = v28;
  *(void *)(v0 + 1424) = (v22 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v28(v21, v23);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  *(void *)(v0 + 1432) = v29;
  *(void *)(v0 + 1440) = (v20 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v29(v19, v236);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v30(v25, 1, v241) == 1)
  {
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 1448) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_10052AC1C;
    uint64_t v32 = *(void *)(v0 + 1344);
    uint64_t v33 = *(void *)(v0 + 1280);
    return SFProgressTask.finalValue.getter(v33, v32);
  }
  uint64_t v34 = *(void *)(v0 + 1264);
  uint64_t v35 = *(void *)(v0 + 1256);
  sub_10024A330(*(void *)(v0 + 768), v35, &qword_100978508);
  uint64_t v33 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v30)(v35, 1, v34);
  if (v33 == 1)
  {
    __break(1u);
    return SFProgressTask.finalValue.getter(v33, v32);
  }
  sub_10053A9A0(*(void *)(v0 + 1256), *(void *)(v0 + 1280), _s14descr1008C9A51V15ExchangeRequestVMa);
  uint64_t v217 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
  uint64_t v36 = *(void *)(v0 + 1328);
  uint64_t v37 = *(void *)(v0 + 1312);
  uint64_t v38 = *(void *)(v0 + 1104);
  uint64_t v39 = *(void *)(v0 + 1096);
  uint64_t v222 = *(void *)(v0 + 1088);
  uint64_t v40 = *(void *)(v0 + 1080);
  uint64_t v41 = *(void *)(v0 + 1072);
  uint64_t v42 = *(void *)(v0 + 1016);
  uint64_t v237 = *(void *)(v0 + 1008);
  uint64_t v227 = *(void *)(v0 + 1064);
  uint64_t v231 = *(void *)(v0 + 1000);
  uint64_t v43 = *(void *)(v0 + 784);
  sub_1005A9FDC(*(void *)(v0 + 1248));
  *(void *)(v0 + 1464) = *(void *)(v43
                                     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_subject);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v217(v36, v37);
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  *(void *)(v0 + 1472) = v44;
  *(void *)(v0 + 1480) = (v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v44(v38, v222);
  *(unsigned char *)(v0 + 2112) = SFAirDrop.TransferType.isOnlyExchange.getter() & 1;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  *(void *)(v0 + 1488) = v45;
  *(void *)(v0 + 1496) = (v41 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v220 = v45;
  v45(v40, v227);
  SFAirDrop.ContactRequest.contact.getter();
  os_log_type_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  *(void *)(v0 + 1504) = v46;
  *(void *)(v0 + 1512) = (v42 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v46(v231, 1, v237) == 1)
  {
    uint64_t v47 = *(void *)(v0 + 1120);
    uint64_t v48 = *(void *)(v0 + 1112);
    uint64_t v49 = *(void *)(v0 + 912);
    uint64_t v50 = *(void *)(v0 + 776);
    sub_10000A7E8(*(void *)(v0 + 1000), &qword_100970BA8);
    sub_10024A330(v50, v49, &qword_100970BD0);
    int v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v49, 1, v48);
    uint64_t v52 = *(void *)(v0 + 1144);
    uint64_t v53 = *(void *)(v0 + 1120);
    uint64_t v54 = *(void *)(v0 + 1112);
    uint64_t v55 = *(void *)(v0 + 912);
    if (v51 == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v53 + 104))(v52, enum case for SFAirDrop.ContactRequest.notNeeded(_:), v54);
      sub_10000A7E8(v55, &qword_100970BD0);
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(v53 + 32))(v52, *(void *)(v0 + 912), v54);
    }
    uint64_t v76 = *(void *)(v0 + 1144);
    uint64_t v77 = *(void *)(v0 + 1128);
    uint64_t v78 = *(void *)(v0 + 1112);
    uint64_t v79 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 1120) + 16);
    v79(*(void *)(v0 + 1136), *(void *)(v0 + 1248), v78);
    v225 = v79;
    v79(v77, v76, v78);
    swift_retain_n();
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, v81))
    {
      unsigned int v187 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v82 = *(void *)(v0 + 1328);
      uint64_t v185 = *(void *)(v0 + 1312);
      os_log_type_t v206 = v81;
      uint64_t v83 = *(void *)(v0 + 1136);
      uint64_t v199 = *(void *)(v0 + 1128);
      uint64_t v219 = *(void *)(v0 + 1120);
      uint64_t v84 = *(void *)(v0 + 1112);
      uint64_t v85 = *(void *)(v0 + 1104);
      uint64_t v190 = *(void *)(v0 + 1088);
      uint64_t v184 = *(void *)(v0 + 1080);
      uint64_t v193 = *(void *)(v0 + 1064);
      v233 = v44;
      uint64_t v86 = swift_slowAlloc();
      v242[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 141559043;
      *(void *)(v0 + 712) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v86 + 12) = 2081;
      sub_10053BB90(&qword_100970C80, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
      uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 592) = sub_100254634(v87, v88, v242);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v214 = v80;
      uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v219 + 8);
      v89(v83, v84);
      *(_WORD *)(v86 + 22) = 2080;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v187(v82, v185);
      SFAirDropReceive.AskRequest.type.getter();
      v233(v85, v190);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v92 = v91;
      v220(v184, v193);
      *(void *)(v0 + 600) = sub_100254634(v90, v92, v242);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v86 + 32) = 2160;
      *(void *)(v0 + 608) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v86 + 42) = 2081;
      uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 616) = sub_100254634(v93, v94, v242);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v89(v199, v84);
      _os_log_impl((void *)&_mh_execute_header, v214, v206, "Exchange Contact END - Sender did not send contact {contactRequest: %{private,mask.hash}s, type: %s, contactToSend: %{private,mask.hash}s}", (uint8_t *)v86, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v99 = *(void *)(v0 + 1136);
      uint64_t v100 = *(void *)(v0 + 1128);
      uint64_t v101 = *(void *)(v0 + 1120);
      uint64_t v102 = *(void *)(v0 + 1112);

      uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
      v89(v99, v102);
      swift_release_n();
      v89(v100, v102);
    }
    *(void *)(v0 + 2072) = v89;
    uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v104 = *(void *)(v0 + 1328);
    uint64_t v105 = *(void *)(v0 + 1312);
    uint64_t v106 = *(void *)(v0 + 1216);
    uint64_t v107 = *(void *)(v0 + 888);
    uint64_t v108 = *(void *)(v0 + 880);
    v225(v106, *(void *)(v0 + 1144), *(void *)(v0 + 1112));
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.id.getter();
    v103(v104, v105);
    *(void *)(v0 + 96) = 0;
    *(_OWORD *)(v0 + 64) = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    sub_1005AA2C0(v106, v108, v0 + 16, v107);
    uint64_t v109 = (void *)swift_task_alloc();
    *(void *)(v0 + 2080) = v109;
    *uint64_t v109 = v0;
    v109[1] = sub_100532A8C;
    uint64_t v110 = *(void *)(v0 + 888);
LABEL_42:
    return sub_100673594(v110);
  }
  v232 = v44;
  uint64_t v56 = *(void *)(v0 + 1248);
  uint64_t v57 = *(void *)(v0 + 1240);
  uint64_t v58 = *(void *)(v0 + 1120);
  uint64_t v59 = *(void *)(v0 + 1112);
  uint64_t v60 = *(void *)(v0 + 1056);
  uint64_t v61 = *(void *)(v0 + 1016);
  uint64_t v62 = *(void *)(v0 + 1008);
  uint64_t v63 = *(void *)(v0 + 1000);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
  *(void *)(v0 + 1520) = v64;
  *(void *)(v0 + 1528) = (v61 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v64(v60, v63, v62);
  uint64_t v65 = *(void (**)(void))(v58 + 16);
  *(void *)(v0 + 1536) = v65;
  *(void *)(v0 + 1544) = (v58 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  ((void (*)(uint64_t, uint64_t, uint64_t))v65)(v57, v56, v59);
  swift_retain_n();
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.default.getter();
  BOOL v68 = os_log_type_enabled(v66, v67);
  uint64_t v69 = *(void *)(v0 + 1240);
  v218 = v65;
  if (v68)
  {
    uint64_t v70 = *(void *)(v0 + 1008);
    uint64_t v71 = *(void *)(v0 + 992);
    uint64_t v72 = v46;
    uint64_t v73 = swift_slowAlloc();
    v242[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v73 = 141558531;
    *(void *)(v0 + 720) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v73 + 12) = 2081;
    SFAirDrop.ContactRequest.contact.getter();
    char v212 = v72;
    uint64_t v205 = v66;
    os_log_type_t v202 = v67;
    if (v72(v71, 1, v70) == 1)
    {
      sub_10000A7E8(*(void *)(v0 + 992), &qword_100970BA8);
      unint64_t v74 = 0x80000001007C0F00;
      uint64_t v75 = 0xD000000000000020;
    }
    else
    {
      uint64_t v111 = *(void *)(v0 + 1016);
      uint64_t v112 = *(void *)(v0 + 1008);
      uint64_t v113 = *(void *)(v0 + 992);
      uint64_t v114 = SFAirDrop.ContactInfo.description.getter();
      unint64_t v74 = v115;
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v113, v112);
      uint64_t v75 = v114;
    }
    BOOL v191 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v116 = *(void *)(v0 + 1328);
    uint64_t v188 = *(void *)(v0 + 1312);
    uint64_t v117 = *(void *)(v0 + 1240);
    uint64_t v118 = *(void *)(v0 + 1120);
    uint64_t v119 = *(void *)(v0 + 1112);
    uint64_t v120 = *(void *)(v0 + 1104);
    uint64_t v194 = *(void *)(v0 + 1088);
    uint64_t v121 = *(void *)(v0 + 1080);
    uint64_t v196 = *(void *)(v0 + 1064);
    *(void *)(v0 + 704) = sub_100254634(v75, v74, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v122 = v119;
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v118 + 8);
    v98(v117, v122);
    *(_WORD *)(v73 + 22) = 2080;
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v191(v116, v188);
    SFAirDropReceive.AskRequest.type.getter();
    v232(v120, v194);
    sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
    uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v125 = v124;
    v220(v121, v196);
    *(void *)(v0 + 696) = sub_100254634(v123, v125, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v205, v202, "Exchange Contact CONTINUE {senderContact: %{private,mask.hash}s, type: %s}", (uint8_t *)v73, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v65 = v218;
    os_log_type_t v46 = v212;
  }
  else
  {
    uint64_t v95 = *(void *)(v0 + 1120);
    uint64_t v96 = *(void *)(v0 + 1112);

    uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v97(v69, v96);
    uint64_t v98 = v97;
    swift_release_n();
  }
  *(void *)(v0 + 1552) = v98;
  uint64_t v126 = *(void *)(v0 + 1120);
  uint64_t v127 = *(void *)(v0 + 1112);
  uint64_t v128 = *(void *)(v0 + 936);
  sub_10024A330(*(void *)(v0 + 776), v128, &qword_100970BD0);
  int v129 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48);
  *(void *)(v0 + 1560) = v129;
  *(void *)(v0 + 1568) = (v126 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v129(v128, 1, v127) != 1)
  {
    v215 = v98;
    v210 = (void *)(v0 + 456);
    uint64_t v140 = *(void *)(v0 + 1232);
    uint64_t v141 = *(void *)(v0 + 1224);
    uint64_t v142 = *(void *)(v0 + 1112);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 1120) + 32))(v140, *(void *)(v0 + 936), v142);
    ((void (*)(uint64_t, uint64_t, uint64_t))v65)(v141, v140, v142);
    swift_retain_n();
    uint64_t v143 = Logger.logObject.getter();
    os_log_type_t v144 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v143, v144))
    {
      uint64_t v145 = *(void *)(v0 + 1328);
      uint64_t v189 = *(void *)(v0 + 1312);
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      os_log_type_t v207 = v144;
      uint64_t v146 = *(void *)(v0 + 1224);
      uint64_t v147 = *(void *)(v0 + 1112);
      uint64_t v148 = *(void *)(v0 + 1104);
      uint64_t v195 = *(void *)(v0 + 1088);
      uint64_t v186 = *(void *)(v0 + 1080);
      uint64_t v197 = *(void *)(v0 + 1064);
      uint64_t v149 = swift_slowAlloc();
      v242[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v149 = 141558531;
      *(void *)(v0 + 752) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v149 + 12) = 2081;
      sub_10053BB90(&qword_100970C80, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
      uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 760) = sub_100254634(v150, v151, v242);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v215(v146, v147);
      *(_WORD *)(v149 + 22) = 2080;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v192(v145, v189);
      SFAirDropReceive.AskRequest.type.getter();
      v232(v148, v195);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v152 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v154 = v153;
      v220(v186, v197);
      *(void *)(v0 + 744) = sub_100254634(v152, v154, v242);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v143, v207, "Exchange Contact CONTINUE. Respond to sender {contactToSend: %{private,mask.hash}s, type: %s}", (uint8_t *)v149, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v155 = *(void *)(v0 + 1224);
      uint64_t v156 = *(void *)(v0 + 1112);

      v215(v155, v156);
      swift_release_n();
    }
    uint64_t v157 = *(void *)(v0 + 1008);
    uint64_t v158 = *(void *)(v0 + 984);
    SFAirDrop.ContactRequest.contact.getter();
    if (v46(v158, 1, v157) == 1)
    {
      sub_10000A7E8(*(void *)(v0 + 984), &qword_100970BA8);
      uint64_t v159 = 0;
      uint64_t v160 = 0;
    }
    else
    {
      uint64_t v161 = *(void *)(v0 + 1016);
      uint64_t v162 = *(void *)(v0 + 1008);
      uint64_t v163 = *(void *)(v0 + 984);
      uint64_t v159 = SFAirDrop.ContactInfo.accountHandle.getter();
      uint64_t v160 = v164;
      (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v163, v162);
    }
    uint64_t v165 = *(void *)(v0 + 1216);
    uint64_t v166 = *(void *)(v0 + 1120);
    uint64_t v167 = *(void *)(v0 + 1112);
    sub_100460D10(v159, v160, v210);
    uint64_t v168 = *(void *)(v0 + 456);
    uint64_t v169 = *(void *)(v0 + 464);
    uint64_t v213 = *(void *)(v0 + 472);
    uint64_t v203 = *(void *)(v0 + 488);
    unint64_t v208 = *(void *)(v0 + 480);
    uint64_t v234 = *(void *)(v0 + 504);
    unint64_t v239 = *(void *)(v0 + 496);
    unint64_t v229 = *(void *)(v0 + 512);
    uint64_t v223 = *(void *)(v0 + 520);
    uint64_t v198 = *(void *)(v0 + 536);
    uint64_t v200 = *(void *)(v0 + 528);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v166 + 104))(v165, enum case for SFAirDrop.ContactRequest.notNeeded(_:), v167);
    char v170 = static SFAirDrop.ContactRequest.== infix(_:_:)();
    *(void *)(v0 + 1576) = (v166 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v215(v165, v167);
    if (v170)
    {
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      uint64_t v171 = 0;
      unint64_t v172 = 0;
      uint64_t v173 = 0;
      unint64_t v174 = 0;
      uint64_t v175 = 0;
      unint64_t v176 = 0;
      uint64_t v177 = 0;
      uint64_t v178 = 0;
      uint64_t v179 = 0;
    }
    else
    {
      sub_10039463C(v210, (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_1003944E4);
      uint64_t v171 = v213;
      uint64_t v173 = v203;
      unint64_t v172 = v208;
      uint64_t v175 = v234;
      unint64_t v174 = v239;
      unint64_t v176 = v229;
      uint64_t v177 = v223;
      uint64_t v179 = v198;
      uint64_t v178 = v200;
    }
    uint64_t v224 = v177;
    uint64_t v235 = v175;
    unint64_t v240 = v174;
    unint64_t v230 = v176;
    *(void *)(v0 + 1664) = v179;
    *(void *)(v0 + 1656) = v178;
    *(void *)(v0 + 1648) = v177;
    *(void *)(v0 + 1640) = v176;
    *(void *)(v0 + 1632) = v175;
    *(void *)(v0 + 1624) = v174;
    *(void *)(v0 + 1616) = v173;
    *(void *)(v0 + 1608) = v172;
    *(void *)(v0 + 1600) = v171;
    *(void *)(v0 + 1592) = v169;
    *(void *)(v0 + 1584) = v168;
    v211 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v180 = *(void *)(v0 + 1328);
    uint64_t v201 = v168;
    uint64_t v204 = *(void *)(v0 + 1312);
    uint64_t v209 = *(void *)(v0 + 1216);
    uint64_t v216 = *(void *)(v0 + 904);
    uint64_t v181 = *(void *)(v0 + 880);
    *(void *)(v0 + 104) = v168;
    *(void *)(v0 + 112) = v169;
    *(void *)(v0 + 120) = v171;
    *(void *)(v0 + 128) = v172;
    *(void *)(v0 + 136) = v173;
    *(void *)(v0 + 144) = v174;
    *(void *)(v0 + 152) = v175;
    *(void *)(v0 + 160) = v176;
    *(void *)(v0 + 168) = v177;
    *(void *)(v0 + 176) = v178;
    *(void *)(v0 + 184) = v179;
    uint64_t v182 = v178;
    v218();
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.id.getter();
    v211(v180, v204);
    sub_1003944E4(v201, v169, v171, v172, v173, v240, v235, v230, v224, v182);
    sub_1005AA2C0(v209, v181, v0 + 104, v216);
    uint64_t v183 = (void *)swift_task_alloc();
    *(void *)(v0 + 1672) = v183;
    *uint64_t v183 = v0;
    v183[1] = sub_10052C16C;
    uint64_t v110 = *(void *)(v0 + 904);
    goto LABEL_42;
  }
  sub_10000A7E8(*(void *)(v0 + 936), &qword_100970BD0);
  v238 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
  v228 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
  v221 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
  uint64_t v130 = *(void *)(v0 + 1328);
  uint64_t v226 = *(void *)(v0 + 1312);
  uint64_t v131 = *(void *)(v0 + 1304);
  uint64_t v132 = *(void *)(v0 + 1288);
  uint64_t v133 = *(void *)(v0 + 1056);
  uint64_t v134 = *(void *)(v0 + 1016);
  uint64_t v135 = *(void *)(v0 + 1008);
  uint64_t v136 = *(void *)(v0 + 872);
  sub_1005353A8(v133, v136);
  uint64_t v137 = v131 + *(int *)(sub_10000A844((uint64_t *)&unk_100974560) + 48);
  uint64_t v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 16);
  *(void *)(v0 + 1688) = v138;
  *(void *)(v0 + 1696) = (v134 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v138(v131, v133, v135);
  uint64_t v139 = sub_10000A844(&qword_10096B2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 16))(v137, v136, v139);
  v221(v131, enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:), v132);
  sub_1006BE3BC(v131, v130);
  v228(v131, v132);
  v238(v130, v226);
  return _swift_task_switch(sub_10052C4C8, 0, 0);
}

uint64_t sub_10052AC1C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1456) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1376);
  if (v0) {
    uint64_t v4 = sub_100532FAC;
  }
  else {
    uint64_t v4 = sub_10052AD48;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10052AD48()
{
  uint64_t v213 = v0;
  uint64_t v184 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
  uint64_t v1 = *(void *)(v0 + 1328);
  uint64_t v2 = *(void *)(v0 + 1312);
  uint64_t v3 = *(void *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 1096);
  uint64_t v196 = *(void *)(v0 + 1088);
  uint64_t v5 = *(void *)(v0 + 1080);
  uint64_t v6 = *(void *)(v0 + 1072);
  uint64_t v7 = *(void *)(v0 + 1016);
  uint64_t v207 = *(void *)(v0 + 1008);
  uint64_t v201 = *(void *)(v0 + 1064);
  uint64_t v205 = *(void *)(v0 + 1000);
  uint64_t v8 = *(void *)(v0 + 784);
  sub_1005A9FDC(*(void *)(v0 + 1248));
  *(void *)(v0 + 1464) = *(void *)(v8
                                     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_subject);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v184(v1, v2);
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(void *)(v0 + 1472) = v9;
  *(void *)(v0 + 1480) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v3, v196);
  *(unsigned char *)(v0 + 2112) = SFAirDrop.TransferType.isOnlyExchange.getter() & 1;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 1488) = v10;
  *(void *)(v0 + 1496) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v5, v201);
  SFAirDrop.ContactRequest.contact.getter();
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  *(void *)(v0 + 1504) = v11;
  *(void *)(v0 + 1512) = (v7 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v11(v205, 1, v207) == 1)
  {
    uint64_t v12 = *(void *)(v0 + 1120);
    uint64_t v13 = *(void *)(v0 + 1112);
    uint64_t v14 = *(void *)(v0 + 912);
    uint64_t v15 = *(void *)(v0 + 776);
    sub_10000A7E8(*(void *)(v0 + 1000), &qword_100970BA8);
    sub_10024A330(v15, v14, &qword_100970BD0);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13);
    uint64_t v17 = *(void *)(v0 + 1144);
    uint64_t v18 = *(void *)(v0 + 1120);
    uint64_t v19 = *(void *)(v0 + 1112);
    uint64_t v20 = *(void *)(v0 + 912);
    if (v16 == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, enum case for SFAirDrop.ContactRequest.notNeeded(_:), v19);
      sub_10000A7E8(v20, &qword_100970BD0);
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(v18 + 32))(v17, *(void *)(v0 + 912), v19);
    }
    uint64_t v40 = *(void *)(v0 + 1144);
    uint64_t v41 = *(void *)(v0 + 1128);
    uint64_t v42 = *(void *)(v0 + 1112);
    uint64_t v43 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 1120) + 16);
    v43(*(void *)(v0 + 1136), *(void *)(v0 + 1248), v42);
    unint64_t v208 = v43;
    v43(v41, v40, v42);
    swift_retain_n();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = *(void *)(v0 + 1328);
      uint64_t v153 = *(void *)(v0 + 1312);
      uint64_t v156 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      os_log_type_t typeb = v45;
      uint64_t v47 = *(void *)(v0 + 1136);
      os_log_t v169 = *(os_log_t *)(v0 + 1128);
      uint64_t v206 = *(void *)(v0 + 1120);
      uint64_t v48 = *(void *)(v0 + 1112);
      uint64_t v186 = v9;
      uint64_t v49 = *(void *)(v0 + 1104);
      uint64_t v159 = *(void *)(v0 + 1088);
      uint64_t v151 = *(void *)(v0 + 1080);
      uint64_t v162 = *(void *)(v0 + 1064);
      BOOL v191 = v10;
      uint64_t v50 = swift_slowAlloc();
      v212[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 141559043;
      *(void *)(v0 + 712) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2081;
      sub_10053BB90(&qword_100970C80, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 592) = sub_100254634(v51, v52, v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      loga = v44;
      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v206 + 8);
      v53(v47, v48);
      *(_WORD *)(v50 + 22) = 2080;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v156(v46, v153);
      SFAirDropReceive.AskRequest.type.getter();
      v186(v49, v159);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v56 = v55;
      v191(v151, v162);
      *(void *)(v0 + 600) = sub_100254634(v54, v56, v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v50 + 32) = 2160;
      *(void *)(v0 + 608) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 42) = 2081;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 616) = sub_100254634(v57, v58, v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v53((uint64_t)v169, v48);
      _os_log_impl((void *)&_mh_execute_header, loga, typeb, "Exchange Contact END - Sender did not send contact {contactRequest: %{private,mask.hash}s, type: %s, contactToSend: %{private,mask.hash}s}", (uint8_t *)v50, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v62 = *(void *)(v0 + 1136);
      uint64_t v63 = *(void *)(v0 + 1128);
      uint64_t v64 = *(void *)(v0 + 1120);
      uint64_t v65 = *(void *)(v0 + 1112);

      uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      v53(v62, v65);
      swift_release_n();
      v53(v63, v65);
    }
    *(void *)(v0 + 2072) = v53;
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v67 = *(void *)(v0 + 1328);
    uint64_t v68 = *(void *)(v0 + 1312);
    uint64_t v69 = *(void *)(v0 + 1216);
    uint64_t v70 = *(void *)(v0 + 888);
    uint64_t v71 = *(void *)(v0 + 880);
    v208(v69, *(void *)(v0 + 1144), *(void *)(v0 + 1112));
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.id.getter();
    v66(v67, v68);
    *(void *)(v0 + 96) = 0;
    *(_OWORD *)(v0 + 64) = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    sub_1005AA2C0(v69, v71, v0 + 16, v70);
    uint64_t v72 = (void *)swift_task_alloc();
    *(void *)(v0 + 2080) = v72;
    *uint64_t v72 = v0;
    v72[1] = sub_100532A8C;
    uint64_t v73 = *(void *)(v0 + 888);
LABEL_29:
    return sub_100673594(v73);
  }
  uint64_t v21 = *(void *)(v0 + 1248);
  uint64_t v22 = *(void *)(v0 + 1240);
  uint64_t v23 = *(void *)(v0 + 1120);
  uint64_t v24 = *(void *)(v0 + 1112);
  uint64_t v25 = *(void *)(v0 + 1056);
  uint64_t v26 = *(void *)(v0 + 1016);
  uint64_t v27 = *(void *)(v0 + 1008);
  uint64_t v28 = *(void *)(v0 + 1000);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
  *(void *)(v0 + 1520) = v29;
  *(void *)(v0 + 1528) = (v26 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v29(v25, v28, v27);
  uint64_t v30 = *(void (**)(void))(v23 + 16);
  *(void *)(v0 + 1536) = v30;
  *(void *)(v0 + 1544) = (v23 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v199 = v30;
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(v22, v21, v24);
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 1240);
  if (v33)
  {
    os_log_type_t v165 = v32;
    uint64_t v168 = v31;
    uint64_t v35 = *(void *)(v0 + 1008);
    uint64_t v36 = *(void *)(v0 + 992);
    uint64_t v37 = swift_slowAlloc();
    v212[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 141558531;
    *(void *)(v0 + 720) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2081;
    SFAirDrop.ContactRequest.contact.getter();
    uint64_t v190 = v10;
    uint64_t v185 = v9;
    *(void *)os_log_type_t type = v11;
    if (v11(v36, 1, v35) == 1)
    {
      sub_10000A7E8(*(void *)(v0 + 992), &qword_100970BA8);
      unint64_t v38 = 0x80000001007C0F00;
      uint64_t v39 = 0xD000000000000020;
    }
    else
    {
      uint64_t v74 = *(void *)(v0 + 1016);
      uint64_t v75 = *(void *)(v0 + 1008);
      uint64_t v76 = *(void *)(v0 + 992);
      uint64_t v77 = SFAirDrop.ContactInfo.description.getter();
      unint64_t v38 = v78;
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v76, v75);
      uint64_t v39 = v77;
    }
    uint64_t v157 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v79 = *(void *)(v0 + 1328);
    uint64_t v154 = *(void *)(v0 + 1312);
    uint64_t v80 = *(void *)(v0 + 1240);
    uint64_t v81 = *(void *)(v0 + 1120);
    uint64_t v82 = *(void *)(v0 + 1112);
    uint64_t v83 = *(void *)(v0 + 1104);
    uint64_t v84 = *(void *)(v0 + 1080);
    uint64_t v160 = *(void *)(v0 + 1088);
    uint64_t v163 = *(void *)(v0 + 1064);
    *(void *)(v0 + 704) = sub_100254634(v39, v38, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v85 = v82;
    uint64_t v61 = *(NSObject **)(v81 + 8);
    ((void (*)(uint64_t, uint64_t))v61)(v80, v85);
    *(_WORD *)(v37 + 22) = 2080;
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v157(v79, v154);
    SFAirDropReceive.AskRequest.type.getter();
    uint64_t v9 = v185;
    v185(v83, v160);
    sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
    uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v88 = v87;
    uint64_t v10 = v190;
    v190(v84, v163);
    *(void *)(v0 + 696) = sub_100254634(v86, v88, v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v168, v165, "Exchange Contact CONTINUE {senderContact: %{private,mask.hash}s, type: %s}", (uint8_t *)v37, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))type;
  }
  else
  {
    uint64_t v59 = *(void *)(v0 + 1120);
    uint64_t v60 = *(void *)(v0 + 1112);

    uint64_t v61 = *(NSObject **)(v59 + 8);
    ((void (*)(uint64_t, uint64_t))v61)(v34, v60);
    swift_release_n();
  }
  *(void *)(v0 + 1552) = v61;
  uint64_t v89 = *(void *)(v0 + 1120);
  uint64_t v90 = *(void *)(v0 + 1112);
  uint64_t v91 = *(void *)(v0 + 936);
  sub_10024A330(*(void *)(v0 + 776), v91, &qword_100970BD0);
  unint64_t v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  *(void *)(v0 + 1560) = v92;
  *(void *)(v0 + 1568) = (v89 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v92(v91, 1, v90) != 1)
  {
    os_log_t log = v61;
    uint64_t v103 = *(void *)(v0 + 1232);
    uint64_t v104 = *(void *)(v0 + 1224);
    uint64_t v105 = *(void *)(v0 + 1112);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 1120) + 32))(v103, *(void *)(v0 + 936), v105);
    ((void (*)(uint64_t, uint64_t, uint64_t))v199)(v104, v103, v105);
    swift_retain_n();
    uint64_t v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v106, v107))
    {
      uint64_t v158 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      *(void *)typec = v11;
      uint64_t v108 = *(void *)(v0 + 1328);
      uint64_t v155 = *(void *)(v0 + 1312);
      os_log_type_t v172 = v107;
      uint64_t v109 = *(void *)(v0 + 1224);
      uint64_t v193 = v10;
      uint64_t v110 = *(void *)(v0 + 1112);
      unsigned int v187 = v9;
      uint64_t v111 = *(void *)(v0 + 1104);
      uint64_t v161 = *(void *)(v0 + 1088);
      uint64_t v152 = *(void *)(v0 + 1080);
      uint64_t v164 = *(void *)(v0 + 1064);
      uint64_t v112 = swift_slowAlloc();
      v212[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v112 = 141558531;
      *(void *)(v0 + 752) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v112 + 12) = 2081;
      sub_10053BB90(&qword_100970C80, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
      uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 760) = sub_100254634(v113, v114, v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))log)(v109, v110);
      *(_WORD *)(v112 + 22) = 2080;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      uint64_t v115 = v108;
      uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))typec;
      v158(v115, v155);
      SFAirDropReceive.AskRequest.type.getter();
      v187(v111, v161);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v118 = v117;
      v193(v152, v164);
      *(void *)(v0 + 744) = sub_100254634(v116, v118, v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v106, v172, "Exchange Contact CONTINUE. Respond to sender {contactToSend: %{private,mask.hash}s, type: %s}", (uint8_t *)v112, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v119 = *(void *)(v0 + 1224);
      uint64_t v120 = *(void *)(v0 + 1112);

      ((void (*)(uint64_t, uint64_t))log)(v119, v120);
      swift_release_n();
    }
    uint64_t v121 = *(void *)(v0 + 1008);
    uint64_t v122 = *(void *)(v0 + 984);
    SFAirDrop.ContactRequest.contact.getter();
    uint64_t v180 = (void *)(v0 + 456);
    if (v11(v122, 1, v121) == 1)
    {
      sub_10000A7E8(*(void *)(v0 + 984), &qword_100970BA8);
      uint64_t v123 = 0;
      uint64_t v124 = 0;
    }
    else
    {
      uint64_t v125 = *(void *)(v0 + 1016);
      uint64_t v126 = *(void *)(v0 + 1008);
      uint64_t v127 = *(void *)(v0 + 984);
      uint64_t v123 = SFAirDrop.ContactInfo.accountHandle.getter();
      uint64_t v124 = v128;
      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v127, v126);
    }
    uint64_t v129 = *(void *)(v0 + 1216);
    uint64_t v130 = *(void *)(v0 + 1120);
    uint64_t v131 = *(void *)(v0 + 1112);
    sub_100460D10(v123, v124, v180);
    uint64_t v133 = *(NSObject **)(v0 + 456);
    uint64_t v132 = *(void *)(v0 + 464);
    uint64_t v188 = *(void *)(v0 + 472);
    *(void *)typea = *(void *)(v0 + 480);
    uint64_t v210 = *(void *)(v0 + 488);
    unint64_t v203 = *(void *)(v0 + 496);
    unint64_t v194 = *(void *)(v0 + 512);
    uint64_t v197 = *(void *)(v0 + 504);
    os_log_t v170 = *(os_log_t *)(v0 + 528);
    *(void *)uint64_t v173 = *(void *)(v0 + 520);
    uint64_t v166 = *(void *)(v0 + 536);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void, uint64_t))(v130 + 104))(v129, enum case for SFAirDrop.ContactRequest.notNeeded(_:), v131);
    char v134 = static SFAirDrop.ContactRequest.== infix(_:_:)();
    *(void *)(v0 + 1576) = (v130 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    ((void (*)(uint64_t, uint64_t))log)(v129, v131);
    if (v134)
    {
      uint64_t v133 = 0;
      uint64_t v132 = 0;
      uint64_t v135 = 0;
      unint64_t v136 = 0;
      uint64_t v137 = 0;
      unint64_t v138 = 0;
      uint64_t v139 = 0;
      unint64_t v140 = 0;
      uint64_t v141 = 0;
      uint64_t v142 = 0;
      uint64_t v143 = 0;
    }
    else
    {
      sub_10039463C(v180, (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_1003944E4);
      uint64_t v135 = v188;
      uint64_t v141 = *(void *)v173;
      unint64_t v136 = *(void *)typea;
      uint64_t v137 = v210;
      unint64_t v138 = v203;
      unint64_t v140 = v194;
      uint64_t v139 = v197;
      uint64_t v143 = v166;
      uint64_t v142 = (uint64_t)v170;
    }
    uint64_t v211 = v137;
    unint64_t v204 = v138;
    unint64_t v195 = v140;
    uint64_t v198 = v139;
    *(void *)(v0 + 1664) = v143;
    *(void *)(v0 + 1656) = v142;
    *(void *)(v0 + 1648) = v141;
    *(void *)(v0 + 1640) = v140;
    *(void *)(v0 + 1632) = v139;
    *(void *)(v0 + 1624) = v138;
    *(void *)(v0 + 1616) = v137;
    *(void *)(v0 + 1608) = v136;
    *(void *)(v0 + 1600) = v135;
    *(void *)(v0 + 1592) = v132;
    *(void *)(v0 + 1584) = v133;
    os_log_type_t v144 = v133;
    os_log_t v171 = v133;
    uint64_t v174 = v132;
    uint64_t v145 = v132;
    uint64_t v181 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v146 = *(void *)(v0 + 1328);
    uint64_t v167 = *(void *)(v0 + 1312);
    uint64_t typed = *(void *)(v0 + 1216);
    uint64_t v147 = v135;
    uint64_t v189 = *(void *)(v0 + 904);
    uint64_t v148 = *(void *)(v0 + 880);
    *(void *)(v0 + 104) = v144;
    *(void *)(v0 + 112) = v145;
    *(void *)(v0 + 120) = v135;
    *(void *)(v0 + 128) = v136;
    *(void *)(v0 + 136) = v137;
    *(void *)(v0 + 144) = v138;
    *(void *)(v0 + 152) = v139;
    *(void *)(v0 + 160) = v140;
    *(void *)(v0 + 168) = v141;
    *(void *)(v0 + 176) = v142;
    *(void *)(v0 + 184) = v143;
    v199();
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.id.getter();
    v181(v146, v167);
    sub_1003944E4((uint64_t)v171, v174, v147, v136, v211, v204, v198, v195, v141, v142);
    sub_1005AA2C0(typed, v148, v0 + 104, v189);
    uint64_t v149 = (void *)swift_task_alloc();
    *(void *)(v0 + 1672) = v149;
    *uint64_t v149 = v0;
    v149[1] = sub_10052C16C;
    uint64_t v73 = *(void *)(v0 + 904);
    goto LABEL_29;
  }
  sub_10000A7E8(*(void *)(v0 + 936), &qword_100970BD0);
  uint64_t v209 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
  os_log_type_t v202 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
  uint64_t v192 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
  uint64_t v93 = *(void *)(v0 + 1328);
  uint64_t v200 = *(void *)(v0 + 1312);
  uint64_t v94 = *(void *)(v0 + 1304);
  uint64_t v95 = *(void *)(v0 + 1288);
  uint64_t v96 = *(void *)(v0 + 1056);
  uint64_t v97 = *(void *)(v0 + 1016);
  uint64_t v98 = *(void *)(v0 + 1008);
  uint64_t v99 = *(void *)(v0 + 872);
  sub_1005353A8(v96, v99);
  uint64_t v100 = v94 + *(int *)(sub_10000A844((uint64_t *)&unk_100974560) + 48);
  uint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16);
  *(void *)(v0 + 1688) = v101;
  *(void *)(v0 + 1696) = (v97 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v101(v94, v96, v98);
  uint64_t v102 = sub_10000A844(&qword_10096B2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 16))(v100, v99, v102);
  v192(v94, enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:), v95);
  sub_1006BE3BC(v94, v93);
  v202(v94, v95);
  v209(v93, v200);
  return _swift_task_switch(sub_10052C4C8, 0, 0);
}

uint64_t sub_10052C16C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1680) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1376);
  if (v0) {
    uint64_t v4 = sub_100533710;
  }
  else {
    uint64_t v4 = sub_10052C298;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10052C298()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[194];
  uint64_t v2 = v0[154];
  uint64_t v3 = v0[139];
  uint64_t v4 = v0[113];
  sub_100394590(v0[198], v0[199], v0[200], v0[201], v0[202], v0[203], v0[204], v0[205], v0[206], v0[207]);
  sub_10039463C(v0 + 57, (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_100394590);
  sub_10053A8DC(v4, _s14descr1008C9A51V16ExchangeResponseVMa);
  v1(v2, v3);
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[179];
  uint64_t v18 = (void (*)(uint64_t, uint64_t))v0[177];
  int v16 = (void (*)(uint64_t, void, uint64_t))v0[175];
  uint64_t v5 = v0[166];
  uint64_t v17 = v0[164];
  uint64_t v6 = v0[163];
  uint64_t v7 = v0[161];
  uint64_t v8 = v0[132];
  uint64_t v9 = v0[127];
  uint64_t v10 = v0[126];
  uint64_t v11 = v0[109];
  sub_1005353A8(v8, v11);
  uint64_t v12 = v6 + *(int *)(sub_10000A844((uint64_t *)&unk_100974560) + 48);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v0[211] = v13;
  v0[212] = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13(v6, v8, v10);
  uint64_t v14 = sub_10000A844(&qword_10096B2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v11, v14);
  v16(v6, enum case for SFAirDropReceive.Transfer.State.waitingForShouldImportContactResponse(_:), v7);
  sub_1006BE3BC(v6, v5);
  v18(v6, v7);
  v19(v5, v17);
  return _swift_task_switch(sub_10052C4C8, 0, 0);
}

uint64_t sub_10052C4C8()
{
  uint64_t v1 = v0[109];
  uint64_t v2 = swift_task_alloc();
  v0[213] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[214] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[215] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10052C5D0;
  uint64_t v5 = v0[108];
  uint64_t v6 = v0[105];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_10096CC90, v2, sub_10053A85C, v3, 0, 0, v6);
}

uint64_t sub_10052C5D0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1728) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10052DE48;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1376);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_10052C704;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_10052C704()
{
  uint64_t v202 = v0;
  uint64_t v1 = *(void *)(v0 + 856);
  uint64_t v2 = *(void *)(v0 + 848);
  uint64_t v3 = *(void *)(v0 + 840);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v3);
  sub_10053BB90(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 1736) = v5;
  *(void *)(v0 + 1744) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109120;
    *(_DWORD *)(v0 + 2096) = (v4 & 1) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Exchange Contact CONTINUE. Accept permission {shouldAcceptSenderContact: %{BOOL}d}", v8, 8u);
    swift_slowDealloc();
  }
  char v195 = v4;
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
  uint64_t v10 = *(void *)(v0 + 1008);
  uint64_t v11 = *(void *)(v0 + 976);

  SFAirDrop.ContactRequest.contact.getter();
  if (v9(v11, 1, v10) == 1)
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1536);
    uint64_t v13 = *(void *)(v0 + 1248);
    uint64_t v14 = *(void *)(v0 + 1192);
    uint64_t v15 = *(void *)(v0 + 1112);
    sub_10000A7E8(*(void *)(v0 + 976), &qword_100970BA8);
    v12(v14, v13, v15);
    int v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
    if (v18)
    {
      int v179 = *(unsigned __int8 *)(v0 + 2112);
      uint64_t v20 = *(void *)(v0 + 1192);
      uint64_t v21 = *(void *)(v0 + 1112);
      uint64_t v22 = swift_slowAlloc();
      v201[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 141558787;
      *(void *)(v0 + 680) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2081;
      sub_10053BB90(&qword_100970C80, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 688) = sub_100254634(v23, v24, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v19(v20, v21);
      *(_WORD *)(v22 + 22) = 1024;
      *(_DWORD *)(v0 + 2108) = (v195 & 1) == 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 28) = 1024;
      *(_DWORD *)(v0 + 2104) = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Exchange Contact IMPORT SKIP {contactRequest: %{private,mask.hash}s, shouldAcceptSenderContact: %{BOOL}d, isExchangeType: %{BOOL}d}", (uint8_t *)v22, 0x22u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v39 = *(void *)(v0 + 1192);
      uint64_t v40 = *(void *)(v0 + 1112);

      v19(v39, v40);
    }
    *(_OWORD *)(v0 + 1912) = 0u;
    uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1560);
    uint64_t v42 = *(void *)(v0 + 1112);
    uint64_t v43 = *(void *)(v0 + 920);
    sub_10024A330(*(void *)(v0 + 776), v43, &qword_100970BD0);
    LODWORD(v42) = v41(v43, 1, v42);
    sub_10000A7E8(v43, &qword_100970BD0);
    if (v42 == 1)
    {
      uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
      uint64_t v45 = *(void *)(v0 + 1008);
      uint64_t v46 = *(void *)(v0 + 968);
      SFAirDrop.ContactRequest.contact.getter();
      if (v44(v46, 1, v45) == 1)
      {
        uint64_t v47 = (uint64_t *)(v0 + 968);
LABEL_20:
        uint64_t v151 = (void *)(v0 + 368);
        uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1536);
        uint64_t v72 = *(void *)(v0 + 1248);
        uint64_t v73 = *(void *)(v0 + 1160);
        uint64_t v74 = *(void *)(v0 + 1112);
        sub_10000A7E8(*v47, &qword_100970BA8);
        v71(v73, v72, v74);
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.default.getter();
        BOOL v77 = os_log_type_enabled(v75, v76);
        uint64_t v78 = *(void *)(v0 + 1160);
        if (v77)
        {
          uint64_t v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
          uint64_t v80 = *(void *)(v0 + 1008);
          uint64_t v81 = *(void *)(v0 + 952);
          uint64_t v82 = swift_slowAlloc();
          v201[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v82 = 141558275;
          *(void *)(v0 + 640) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v82 + 12) = 2081;
          SFAirDrop.ContactRequest.contact.getter();
          if (v79(v81, 1, v80) == 1)
          {
            sub_10000A7E8(*(void *)(v0 + 952), &qword_100970BA8);
            unint64_t v83 = 0x80000001007C0F00;
            unint64_t v84 = 0xD000000000000020;
          }
          else
          {
            uint64_t v110 = *(void *)(v0 + 1016);
            uint64_t v111 = *(void *)(v0 + 1008);
            uint64_t v112 = *(void *)(v0 + 952);
            unint64_t v84 = SFAirDrop.ContactInfo.description.getter();
            unint64_t v83 = v113;
            (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v112, v111);
          }
          unint64_t v114 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
          uint64_t v115 = *(void *)(v0 + 1160);
          uint64_t v116 = *(void *)(v0 + 1112);
          *(void *)(v0 + 648) = sub_100254634(v84, v83, v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v114(v115, v116);
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Exchange Contact SHARE BACK PERMISSION SKIP. No senderContact or no receiverContact {senderContact: %{private,mask.hash}s}", (uint8_t *)v82, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
          uint64_t v99 = *(void *)(v0 + 1112);

          v98(v78, v99);
        }
        unsigned int v170 = enum case for SFAirDrop.ContactRequest.notNeeded(_:);
        (*(void (**)(void))(*(void *)(v0 + 1120) + 104))(*(void *)(v0 + 1184));
        unint64_t v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1536);
        uint64_t v192 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
        unint64_t v176 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
        uint64_t v152 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
        uint64_t v155 = *(void *)(v0 + 1328);
        uint64_t v157 = *(void *)(v0 + 1312);
        uint64_t v161 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
        uint64_t v118 = *(void *)(v0 + 1304);
        uint64_t v119 = *(void *)(v0 + 1288);
        uint64_t v120 = *(void *)(v0 + 1248);
        uint64_t v121 = *(void *)(v0 + 1184);
        uint64_t v122 = *(void *)(v0 + 1112);
        uint64_t v185 = *(void *)(v0 + 1008);
        uint64_t v165 = *(void *)(v0 + 944);
        uint64_t v123 = v118 + *(int *)(sub_10000A844(&qword_1009723E0) + 48);
        v117(v118, v120, v122);
        v117(v123, v121, v122);
        v152(v118, enum case for SFAirDropReceive.Transfer.State.sharingContactBack(_:), v119);
        sub_1006BE3BC(v118, v155);
        v161(v118, v119);
        v176(v155, v157);
        SFAirDrop.ContactRequest.contact.getter();
        if (v192(v165, 1, v185) == 1)
        {
          sub_10000A7E8(*(void *)(v0 + 944), &qword_100970BA8);
          uint64_t v124 = 0;
          uint64_t v125 = 0;
        }
        else
        {
          uint64_t v126 = *(void *)(v0 + 1016);
          uint64_t v127 = *(void *)(v0 + 1008);
          uint64_t v128 = *(void *)(v0 + 944);
          uint64_t v124 = SFAirDrop.ContactInfo.accountHandle.getter();
          uint64_t v125 = v129;
          (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v128, v127);
        }
        uint64_t v168 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
        uint64_t v130 = *(void *)(v0 + 1216);
        uint64_t v131 = *(void *)(v0 + 1120);
        uint64_t v132 = *(void *)(v0 + 1112);
        sub_100460D10(v124, v125, v151);
        uint64_t v133 = *(void *)(v0 + 368);
        uint64_t v134 = *(void *)(v0 + 376);
        unint64_t v162 = *(void *)(v0 + 392);
        uint64_t v166 = *(void *)(v0 + 384);
        uint64_t v193 = *(void *)(v0 + 416);
        unint64_t v199 = *(void *)(v0 + 408);
        uint64_t v182 = *(void *)(v0 + 432);
        unint64_t v186 = *(void *)(v0 + 424);
        uint64_t v177 = *(void *)(v0 + 440);
        uint64_t v156 = *(void *)(v0 + 448);
        uint64_t v158 = *(void *)(v0 + 400);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t))(v131 + 104))(v130, v170, v132);
        char v135 = static SFAirDrop.ContactRequest.== infix(_:_:)();
        *(void *)(v0 + 1960) = (v131 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v168(v130, v132);
        if (v135)
        {
          uint64_t v133 = 0;
          uint64_t v134 = 0;
          uint64_t v136 = 0;
          unint64_t v137 = 0;
          uint64_t v138 = 0;
          unint64_t v139 = 0;
          uint64_t v140 = 0;
          unint64_t v141 = 0;
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          uint64_t v144 = 0;
        }
        else
        {
          sub_10039463C(v151, (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_1003944E4);
          unint64_t v137 = v162;
          uint64_t v136 = v166;
          uint64_t v144 = v156;
          uint64_t v138 = v158;
          uint64_t v140 = v193;
          unint64_t v139 = v199;
          uint64_t v142 = v182;
          unint64_t v141 = v186;
          uint64_t v143 = v177;
        }
        uint64_t v194 = v140;
        unint64_t v200 = v139;
        uint64_t v183 = v142;
        unint64_t v187 = v141;
        *(void *)(v0 + 2048) = v144;
        *(void *)(v0 + 2040) = v143;
        *(void *)(v0 + 2032) = v142;
        *(void *)(v0 + 2024) = v141;
        *(void *)(v0 + 2016) = v140;
        *(void *)(v0 + 2008) = v139;
        *(void *)(v0 + 2000) = v138;
        *(void *)(v0 + 1992) = v137;
        *(void *)(v0 + 1984) = v136;
        *(void *)(v0 + 1976) = v134;
        *(void *)(v0 + 1968) = v133;
        uint64_t v145 = v143;
        uint64_t v178 = v143;
        uint64_t v146 = *(void (**)(void))(v0 + 1536);
        uint64_t v167 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
        uint64_t v147 = *(void *)(v0 + 1328);
        uint64_t v159 = *(void *)(v0 + 1312);
        uint64_t v163 = *(void *)(v0 + 1216);
        uint64_t v171 = *(void *)(v0 + 896);
        uint64_t v148 = *(void *)(v0 + 880);
        *(void *)(v0 + 280) = v133;
        *(void *)(v0 + 288) = v134;
        *(void *)(v0 + 296) = v136;
        *(void *)(v0 + 304) = v137;
        *(void *)(v0 + 312) = v138;
        *(void *)(v0 + 320) = v139;
        *(void *)(v0 + 328) = v140;
        *(void *)(v0 + 336) = v141;
        *(void *)(v0 + 344) = v142;
        *(void *)(v0 + 352) = v145;
        *(void *)(v0 + 360) = v144;
        v146();
        CurrentValueSubject.value.getter();
        SFAirDropReceive.Transfer.id.getter();
        v167(v147, v159);
        sub_1003944E4(v133, v134, v136, v137, v138, v200, v194, v187, v183, v178);
        sub_1005AA2C0(v163, v148, v0 + 280, v171);
        uint64_t v149 = (void *)swift_task_alloc();
        *(void *)(v0 + 2056) = v149;
        *uint64_t v149 = v0;
        v149[1] = sub_10053217C;
        uint64_t v150 = *(void *)(v0 + 896);
        return sub_100673594(v150);
      }
      uint64_t v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
      uint64_t v69 = *(void *)(v0 + 1008);
      uint64_t v70 = *(void *)(v0 + 960);
      (*(void (**)(void, void, uint64_t))(v0 + 1520))(*(void *)(v0 + 1032), *(void *)(v0 + 968), v69);
      sub_1004ED104(v70);
      if (v68(v70, 1, v69) == 1)
      {
        uint64_t v47 = (uint64_t *)(v0 + 960);
        (*(void (**)(void, void))(*(void *)(v0 + 1016) + 8))(*(void *)(v0 + 1032), *(void *)(v0 + 1008));
        goto LABEL_20;
      }
      uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1688);
      BOOL v191 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v181 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
      os_log_t v169 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
      uint64_t v101 = *(void *)(v0 + 1328);
      uint64_t v175 = *(void *)(v0 + 1312);
      uint64_t v102 = *(void *)(v0 + 1304);
      uint64_t v103 = *(void *)(v0 + 1288);
      unint64_t v104 = *(void *)(v0 + 1032);
      uint64_t v105 = *(void *)(v0 + 1024);
      uint64_t v106 = *(void *)(v0 + 1008);
      uint64_t v107 = *(void *)(v0 + 792);
      (*(void (**)(uint64_t, void, uint64_t))(v0 + 1520))(v105, *(void *)(v0 + 960), v106);
      sub_100536550(v104, v105, v107);
      uint64_t v108 = v102 + *(int *)(sub_10000A844(&qword_1009723E8) + 48);
      v100(v102, v105, v106);
      uint64_t v109 = sub_10000A844((uint64_t *)&unk_1009723F0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 16))(v108, v107, v109);
      v169(v102, enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:), v103);
      sub_1006BE3BC(v102, v101);
      v181(v102, v103);
      v191(v101, v175);
      return _swift_task_switch(sub_10053131C, 0, 0);
    }
    else
    {
      swift_retain_n();
      unint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        os_log_type_t v172 = *(void (**)(uint64_t, uint64_t))(v0 + 1488);
        uint64_t v164 = *(void (**)(uint64_t, uint64_t))(v0 + 1472);
        uint64_t v154 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
        uint64_t v60 = *(void *)(v0 + 1328);
        uint64_t v153 = *(void *)(v0 + 1312);
        uint64_t v61 = *(void *)(v0 + 1104);
        uint64_t v160 = *(void *)(v0 + 1088);
        uint64_t v62 = *(void *)(v0 + 1080);
        uint64_t v63 = *(void *)(v0 + 1064);
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        v201[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v64 = 136315138;
        CurrentValueSubject.value.getter();
        SFAirDropReceive.Transfer.askRequest.getter();
        v154(v60, v153);
        SFAirDropReceive.AskRequest.type.getter();
        v164(v61, v160);
        sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
        uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v67 = v66;
        v172(v62, v63);
        *(void *)(v0 + 672) = sub_100254634(v65, v67, v201);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Exchange Contact SHARE BACK SKIP. Already responded with contact {type: %s}", v64, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v85, v86))
      {
        unint64_t v87 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v87 = 0;
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "Exchange Contact END", v87, 2u);
        swift_slowDealloc();
      }
      unint64_t v88 = *(void (**)(uint64_t, uint64_t))(v0 + 1736);
      uint64_t v89 = *(void *)(v0 + 1352);
      uint64_t v189 = *(void *)(v0 + 1344);
      uint64_t v197 = *(char **)(v0 + 1368);
      uint64_t v180 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
      uint64_t v184 = *(void *)(v0 + 1280);
      uint64_t v173 = *(void *)(v0 + 1112);
      uint64_t v174 = *(void *)(v0 + 1248);
      uint64_t v90 = *(void *)(v0 + 1056);
      uint64_t v91 = v85;
      uint64_t v92 = *(void *)(v0 + 1016);
      uint64_t v93 = *(void *)(v0 + 1008);
      uint64_t v94 = *(void *)(v0 + 872);
      uint64_t v95 = *(void *)(v0 + 864);
      uint64_t v96 = *(void *)(v0 + 840);

      v88(v95, v96);
      sub_10000A7E8(v94, &qword_10096CC70);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v90, v93);
      v180(v174, v173);
      sub_10053A8DC(v184, _s14descr1008C9A51V15ExchangeRequestVMa);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v197, v189);
      uint64_t v190 = *(void *)(v0 + 1912);
      uint64_t v198 = *(char **)(v0 + 1920);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v97 = *(uint64_t (**)(uint64_t, char *))(v0 + 8);
      return v97(v190, v198);
    }
  }
  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1688);
    uint64_t v26 = *(void *)(v0 + 1048);
    uint64_t v27 = *(void *)(v0 + 1040);
    uint64_t v28 = *(void *)(v0 + 1008);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 1520))(v26, *(void *)(v0 + 976), v28);
    v25(v27, v26, v28);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = *(void *)(v0 + 1040);
    uint64_t v33 = *(void *)(v0 + 1016);
    uint64_t v34 = *(void *)(v0 + 1008);
    if (v31)
    {
      uint64_t v35 = swift_slowAlloc();
      v201[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 67109635;
      *(_DWORD *)(v0 + 2100) = (v195 & 1) == 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 8) = 2160;
      *(void *)(v0 + 728) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 18) = 2081;
      sub_10053BB90(&qword_100978570, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 736) = sub_100254634(v36, v37, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v38 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v38(v32, v34);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Exchange Contact CONTINUE. Importing contact {shouldAcceptSenderContact: %{BOOL}d, senderContact: %{private,mask.hash}s}", (uint8_t *)v35, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v38 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v38(v32, v34);
    }
    *(void *)(v0 + 1752) = v38;
    uint64_t v188 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
    uint64_t v49 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
    uint64_t v50 = *(void *)(v0 + 1328);
    uint64_t v51 = *(void *)(v0 + 1312);
    uint64_t v52 = *(void *)(v0 + 1304);
    uint64_t v53 = *(void *)(v0 + 1288);
    (*(void (**)(uint64_t, void, void))(v0 + 1688))(v52, *(void *)(v0 + 1048), *(void *)(v0 + 1008));
    v49(v52, enum case for SFAirDropReceive.Transfer.State.importingReceivedContact(_:), v53);
    sub_1006BE3BC(v52, v50);
    v48(v52, v53);
    v188(v50, v51);
    uint64_t v196 = (char *)&dword_10096FEF8 + dword_10096FEF8;
    uint64_t v54 = (void *)swift_task_alloc();
    *(void *)(v0 + 1760) = v54;
    *uint64_t v54 = v0;
    v54[1] = sub_10052E2B0;
    uint64_t v55 = *(unsigned __int8 *)(v0 + 2112);
    uint64_t v56 = *(void *)(v0 + 1048);
    return ((uint64_t (*)(uint64_t, uint64_t))v196)(v56, v55);
  }
}

uint64_t sub_10052DE48()
{
  uint64_t v1 = *(void *)(v0 + 1376);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10052DEC0, v1, 0);
}

uint64_t sub_10052DEC0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[194];
  uint64_t v2 = v0[160];
  uint64_t v3 = v0[156];
  uint64_t v4 = v0[139];
  uint64_t v5 = v0[132];
  uint64_t v6 = v0[127];
  uint64_t v7 = v0[126];
  sub_10000A7E8(v0[109], &qword_10096CC70);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v1(v3, v4);
  sub_10053A8DC(v2, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(void, void))(v0[169] + 8))(v0[171], v0[168]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10052E2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[221] = a1;
  v5[222] = a2;
  v5[223] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[172];
  if (v2) {
    uint64_t v7 = sub_10052FAE4;
  }
  else {
    uint64_t v7 = sub_10052E3EC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10052E3EC()
{
  uint64_t v223 = v0;
  uint64_t v1 = *(void *)(v0 + 824);
  uint64_t v2 = *(void *)(v0 + 816);
  uint64_t v3 = *(void *)(v0 + 808);
  uint64_t v4 = *(void *)(v0 + 1384) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeConnection;
  swift_beginAccess();
  sub_10024A330(v4, v3, &qword_100978540);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10000A7E8(*(void *)(v0 + 808), &qword_100978540);
LABEL_7:
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Exchange Contact IDENTITY IMPORT SKIP. Not provided", v25, 2u);
      swift_slowDealloc();
    }

    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v0 + 1280);
  uint64_t v6 = *(void *)(v0 + 1264);
  sub_10053A9A0(*(void *)(v0 + 808), *(void *)(v0 + 832), type metadata accessor for SDAirDropServerConnection);
  uint64_t v7 = (uint64_t *)(v5 + *(int *)(v6 + 36));
  uint64_t v8 = *v7;
  *(void *)(v0 + 1792) = *v7;
  uint64_t v9 = v7[1];
  *(void *)(v0 + 1800) = v9;
  uint64_t v10 = v7[2];
  *(void *)(v0 + 1808) = v10;
  unint64_t v11 = v7[3];
  *(void *)(v0 + 1816) = v11;
  uint64_t v12 = v7[4];
  *(void *)(v0 + 1824) = v12;
  unint64_t v13 = v7[5];
  *(void *)(v0 + 1832) = v13;
  uint64_t v14 = v7[6];
  *(void *)(v0 + 1840) = v14;
  unint64_t v217 = v7[7];
  *(void *)(v0 + 1848) = v217;
  uint64_t v15 = v7[8];
  *(void *)(v0 + 1856) = v15;
  uint64_t v16 = v7[9];
  *(void *)(v0 + 1864) = v16;
  uint64_t v17 = v7[10];
  *(void *)(v0 + 1872) = v17;
  uint64_t v211 = v16;
  if (!v16)
  {
    sub_10053A8DC(*(void *)(v0 + 832), type metadata accessor for SDAirDropServerConnection);
    goto LABEL_7;
  }
  uint64_t v195 = v8;
  uint64_t v200 = v14;
  uint64_t v181 = v17;
  uint64_t v185 = v15;
  BOOL v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1560);
  uint64_t v19 = *(void *)(v0 + 1112);
  uint64_t v20 = *(void *)(v0 + 928);
  sub_10024A330(*(void *)(v0 + 776), v20, &qword_100970BD0);
  uint64_t v189 = v12;
  uint64_t v193 = v10;
  unint64_t v206 = v13;
  if (v18(v20, 1, v19) == 1)
  {
    uint64_t v21 = *(void *)(v0 + 928);
    uint64_t v162 = v9;
    swift_bridgeObjectRetain();
    unint64_t v22 = v11;
    sub_100278C78(v10, v11);
    sub_10025ADCC(v12, v13);
    sub_10025ADCC(v200, v217);
    swift_bridgeObjectRetain();
    sub_10000A7E8(v21, &qword_100970BD0);
LABEL_37:
    uint64_t v108 = v10;
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Exchange Contact CONTINUE. Attempting identity import", v111, 2u);
      swift_slowDealloc();
    }
    uint64_t v165 = *(void *)(v0 + 1264);
    uint64_t v169 = *(void *)(v0 + 1280);
    uint64_t v164 = *(void *)(v0 + 832);
    uint64_t v112 = *(void *)(v0 + 824);
    uint64_t v174 = *(void *)(v0 + 816);
    uint64_t v113 = *(void *)(v0 + 800);

    *(void *)(v0 + 192) = v195;
    *(void *)(v0 + 200) = v162;
    *(void *)(v0 + 208) = v108;
    *(void *)(v0 + 216) = v22;
    *(void *)(v0 + 224) = v189;
    *(void *)(v0 + 232) = v206;
    *(void *)(v0 + 240) = v200;
    *(void *)(v0 + 248) = v217;
    *(void *)(v0 + 256) = v185;
    *(void *)(v0 + 264) = v211;
    *(void *)(v0 + 272) = v181;
    unint64_t v114 = (uint64_t *)(v169 + *(int *)(v165 + 32));
    uint64_t v115 = *v114;
    *(void *)(v0 + 1880) = *v114;
    unint64_t v166 = v114[1];
    uint64_t v170 = v115;
    *(void *)(v0 + 1888) = v166;
    sub_10053A93C(v164, v113);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v112 + 56))(v113, 0, 1, v174);
    sub_1003944E4(v195, v162, v193, v22, v189, v206, v200, v217, v185, v211);
    sub_100278C78(v170, v166);
    uint64_t v116 = (void *)swift_task_alloc();
    *(void *)(v0 + 1896) = v116;
    void *v116 = v0;
    v116[1] = sub_10052FF18;
    uint64_t v117 = *(void *)(v0 + 1776);
    uint64_t v118 = *(void *)(v0 + 1768);
    uint64_t v119 = *(void *)(v0 + 800);
    return sub_100674154(v0 + 192, v170, v166, v118, v117, v119);
  }
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1536);
  uint64_t v81 = *(void *)(v0 + 1208);
  uint64_t v82 = *(void *)(v0 + 1200);
  unint64_t v83 = v13;
  uint64_t v84 = *(void *)(v0 + 1120);
  uint64_t v85 = *(void *)(v0 + 1112);
  (*(void (**)(uint64_t, void, uint64_t))(v84 + 32))(v81, *(void *)(v0 + 928), v85);
  v80(v82, v81, v85);
  uint64_t v10 = v193;
  LODWORD(v81) = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 88))(v82, v85);
  LODWORD(v82) = enum case for SFAirDrop.ContactRequest.notNeeded(_:);
  swift_bridgeObjectRetain();
  sub_100278C78(v193, v11);
  sub_10025ADCC(v12, v83);
  sub_10025ADCC(v200, v217);
  swift_bridgeObjectRetain();
  os_log_type_t v86 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
  if (v81 != v82)
  {
    unint64_t v22 = v11;
    uint64_t v162 = v9;
    uint64_t v106 = *(void *)(v0 + 1200);
    uint64_t v107 = *(void *)(v0 + 1112);
    v86(*(void *)(v0 + 1208), v107);
    v86(v106, v107);
    goto LABEL_37;
  }
  v86(*(void *)(v0 + 1200), *(void *)(v0 + 1112));
  unint64_t v87 = Logger.logObject.getter();
  os_log_type_t v88 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v87, v88))
  {
    uint64_t v89 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v89 = 0;
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "Exchange Contact IDENTITY IMPORT SKIP. User chose to only receive", v89, 2u);
    swift_slowDealloc();
  }
  uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
  uint64_t v91 = *(void *)(v0 + 1208);
  uint64_t v92 = *(void *)(v0 + 1112);
  uint64_t v93 = *(void *)(v0 + 832);

  sub_100394590(v195, v9, v193, v11, v189, v206, v200, v217, v185, v211);
  v90(v91, v92);
  sub_10053A8DC(v93, type metadata accessor for SDAirDropServerConnection);
LABEL_10:
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Exchange Contact CONTINUE. Imported contact", v28, 2u);
    swift_slowDealloc();
  }
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 1752);
  uint64_t v30 = *(void *)(v0 + 1048);
  uint64_t v31 = *(void *)(v0 + 1008);

  v29(v30, v31);
  *(_OWORD *)(v0 + 1912) = *(_OWORD *)(v0 + 1768);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1560);
  uint64_t v33 = *(void *)(v0 + 1112);
  uint64_t v34 = *(void *)(v0 + 920);
  sub_10024A330(*(void *)(v0 + 776), v34, &qword_100970BD0);
  LODWORD(v33) = v32(v34, 1, v33);
  sub_10000A7E8(v34, &qword_100970BD0);
  if (v33 == 1)
  {
    uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
    uint64_t v36 = *(void *)(v0 + 1008);
    uint64_t v37 = *(void *)(v0 + 968);
    SFAirDrop.ContactRequest.contact.getter();
    if (v35(v37, 1, v36) == 1)
    {
      unint64_t v38 = (uint64_t *)(v0 + 968);
LABEL_19:
      uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1536);
      uint64_t v53 = *(void *)(v0 + 1248);
      uint64_t v54 = *(void *)(v0 + 1160);
      uint64_t v55 = *(void *)(v0 + 1112);
      sub_10000A7E8(*v38, &qword_100970BA8);
      v52(v54, v53, v55);
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.default.getter();
      BOOL v58 = os_log_type_enabled(v56, v57);
      uint64_t v59 = *(void *)(v0 + 1160);
      if (v58)
      {
        uint64_t v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
        uint64_t v61 = *(void *)(v0 + 1008);
        uint64_t v62 = *(void *)(v0 + 952);
        uint64_t v63 = swift_slowAlloc();
        v222[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 141558275;
        *(void *)(v0 + 640) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v63 + 12) = 2081;
        SFAirDrop.ContactRequest.contact.getter();
        if (v60(v62, 1, v61) == 1)
        {
          sub_10000A7E8(*(void *)(v0 + 952), &qword_100970BA8);
          unint64_t v64 = 0x80000001007C0F00;
          unint64_t v65 = 0xD000000000000020;
        }
        else
        {
          uint64_t v120 = *(void *)(v0 + 1016);
          uint64_t v121 = *(void *)(v0 + 1008);
          uint64_t v122 = *(void *)(v0 + 952);
          unint64_t v65 = SFAirDrop.ContactInfo.description.getter();
          unint64_t v64 = v123;
          (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v122, v121);
        }
        uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
        uint64_t v125 = *(void *)(v0 + 1160);
        uint64_t v126 = *(void *)(v0 + 1112);
        *(void *)(v0 + 648) = sub_100254634(v65, v64, v222);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v124(v125, v126);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Exchange Contact SHARE BACK PERMISSION SKIP. No senderContact or no receiverContact {senderContact: %{private,mask.hash}s}", (uint8_t *)v63, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
        uint64_t v95 = *(void *)(v0 + 1112);

        v94(v59, v95);
      }
      unsigned int v191 = enum case for SFAirDrop.ContactRequest.notNeeded(_:);
      (*(void (**)(void))(*(void *)(v0 + 1120) + 104))(*(void *)(v0 + 1184));
      uint64_t v127 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1536);
      unint64_t v208 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
      unint64_t v187 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v163 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
      uint64_t v167 = *(void *)(v0 + 1328);
      uint64_t v171 = *(void *)(v0 + 1312);
      uint64_t v175 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
      uint64_t v128 = *(void *)(v0 + 1304);
      uint64_t v129 = *(void *)(v0 + 1288);
      uint64_t v130 = *(void *)(v0 + 1248);
      uint64_t v131 = *(void *)(v0 + 1184);
      uint64_t v132 = *(void *)(v0 + 1112);
      uint64_t v203 = *(void *)(v0 + 1008);
      uint64_t v178 = *(void *)(v0 + 944);
      uint64_t v133 = v128 + *(int *)(sub_10000A844(&qword_1009723E0) + 48);
      v127(v128, v130, v132);
      v127(v133, v131, v132);
      v163(v128, enum case for SFAirDropReceive.Transfer.State.sharingContactBack(_:), v129);
      sub_1006BE3BC(v128, v167);
      v175(v128, v129);
      v187(v167, v171);
      SFAirDrop.ContactRequest.contact.getter();
      if (v208(v178, 1, v203) == 1)
      {
        sub_10000A7E8(*(void *)(v0 + 944), &qword_100970BA8);
        uint64_t v134 = 0;
        uint64_t v135 = 0;
      }
      else
      {
        uint64_t v136 = *(void *)(v0 + 1016);
        uint64_t v137 = *(void *)(v0 + 1008);
        uint64_t v138 = *(void *)(v0 + 944);
        uint64_t v134 = SFAirDrop.ContactInfo.accountHandle.getter();
        uint64_t v135 = v139;
        (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v138, v137);
      }
      uint64_t v188 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
      uint64_t v140 = *(void *)(v0 + 1216);
      uint64_t v141 = *(void *)(v0 + 1120);
      uint64_t v142 = *(void *)(v0 + 1112);
      sub_100460D10(v134, v135, (void *)(v0 + 368));
      uint64_t v143 = *(void *)(v0 + 376);
      uint64_t v179 = *(void *)(v0 + 384);
      uint64_t v183 = *(void *)(v0 + 368);
      uint64_t v172 = *(void *)(v0 + 400);
      unint64_t v176 = *(void *)(v0 + 392);
      uint64_t v215 = *(void *)(v0 + 416);
      unint64_t v220 = *(void *)(v0 + 408);
      uint64_t v204 = *(void *)(v0 + 432);
      unint64_t v209 = *(void *)(v0 + 424);
      uint64_t v144 = *(void *)(v0 + 440);
      uint64_t v199 = *(void *)(v0 + 448);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v141 + 104))(v140, v191, v142);
      char v145 = static SFAirDrop.ContactRequest.== infix(_:_:)();
      *(void *)(v0 + 1960) = (v141 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v188(v140, v142);
      if (v145)
      {
        uint64_t v146 = 0;
        uint64_t v143 = 0;
        uint64_t v147 = 0;
        unint64_t v148 = 0;
        uint64_t v149 = 0;
        unint64_t v150 = 0;
        uint64_t v151 = 0;
        unint64_t v152 = 0;
        uint64_t v153 = 0;
        uint64_t v154 = 0;
        uint64_t v155 = 0;
      }
      else
      {
        sub_10039463C((void *)(v0 + 368), (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_1003944E4);
        uint64_t v154 = v144;
        uint64_t v147 = v179;
        uint64_t v146 = v183;
        uint64_t v149 = v172;
        unint64_t v148 = v176;
        uint64_t v151 = v215;
        unint64_t v150 = v220;
        uint64_t v153 = v204;
        unint64_t v152 = v209;
        uint64_t v155 = v199;
      }
      uint64_t v216 = v151;
      unint64_t v221 = v150;
      uint64_t v205 = v153;
      unint64_t v210 = v152;
      *(void *)(v0 + 2048) = v155;
      *(void *)(v0 + 2040) = v154;
      *(void *)(v0 + 2032) = v153;
      *(void *)(v0 + 2024) = v152;
      *(void *)(v0 + 2016) = v151;
      *(void *)(v0 + 2008) = v150;
      *(void *)(v0 + 2000) = v149;
      *(void *)(v0 + 1992) = v148;
      *(void *)(v0 + 1984) = v147;
      *(void *)(v0 + 1976) = v143;
      *(void *)(v0 + 1968) = v146;
      uint64_t v156 = v155;
      uint64_t v157 = *(void (**)(void))(v0 + 1536);
      uint64_t v184 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v158 = *(void *)(v0 + 1328);
      uint64_t v177 = *(void *)(v0 + 1312);
      uint64_t v180 = *(void *)(v0 + 1216);
      uint64_t v192 = *(void *)(v0 + 896);
      uint64_t v159 = *(void *)(v0 + 880);
      *(void *)(v0 + 280) = v146;
      *(void *)(v0 + 288) = v143;
      *(void *)(v0 + 296) = v147;
      *(void *)(v0 + 304) = v148;
      *(void *)(v0 + 312) = v149;
      *(void *)(v0 + 320) = v150;
      *(void *)(v0 + 328) = v151;
      *(void *)(v0 + 336) = v152;
      *(void *)(v0 + 344) = v153;
      *(void *)(v0 + 352) = v154;
      *(void *)(v0 + 360) = v156;
      v157();
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.id.getter();
      v184(v158, v177);
      sub_1003944E4(v146, v143, v147, v148, v149, v221, v216, v210, v205, v154);
      sub_1005AA2C0(v180, v159, v0 + 280, v192);
      uint64_t v160 = (void *)swift_task_alloc();
      *(void *)(v0 + 2056) = v160;
      void *v160 = v0;
      v160[1] = sub_10053217C;
      uint64_t v161 = *(void *)(v0 + 896);
      return sub_100673594(v161);
    }
    uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
    uint64_t v50 = *(void *)(v0 + 1008);
    uint64_t v51 = *(void *)(v0 + 960);
    (*(void (**)(void, void, uint64_t))(v0 + 1520))(*(void *)(v0 + 1032), *(void *)(v0 + 968), v50);
    sub_1004ED104(v51);
    if (v49(v51, 1, v50) == 1)
    {
      unint64_t v38 = (uint64_t *)(v0 + 960);
      (*(void (**)(void, void))(*(void *)(v0 + 1016) + 8))(*(void *)(v0 + 1032), *(void *)(v0 + 1008));
      goto LABEL_19;
    }
    uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1688);
    uint64_t v214 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v202 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
    uint64_t v190 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
    uint64_t v97 = *(void *)(v0 + 1328);
    uint64_t v198 = *(void *)(v0 + 1312);
    uint64_t v98 = *(void *)(v0 + 1304);
    uint64_t v99 = *(void *)(v0 + 1288);
    unint64_t v100 = *(void *)(v0 + 1032);
    uint64_t v101 = *(void *)(v0 + 1024);
    uint64_t v102 = *(void *)(v0 + 1008);
    uint64_t v103 = *(void *)(v0 + 792);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 1520))(v101, *(void *)(v0 + 960), v102);
    sub_100536550(v100, v101, v103);
    uint64_t v104 = v98 + *(int *)(sub_10000A844(&qword_1009723E8) + 48);
    v96(v98, v101, v102);
    uint64_t v105 = sub_10000A844((uint64_t *)&unk_1009723F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16))(v104, v103, v105);
    v190(v98, enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:), v99);
    sub_1006BE3BC(v98, v97);
    v202(v98, v99);
    v214(v97, v198);
    return _swift_task_switch(sub_10053131C, 0, 0);
  }
  else
  {
    swift_retain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v196 = *(void (**)(uint64_t, uint64_t))(v0 + 1488);
      unint64_t v186 = *(void (**)(uint64_t, uint64_t))(v0 + 1472);
      uint64_t v173 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v41 = *(void *)(v0 + 1328);
      uint64_t v168 = *(void *)(v0 + 1312);
      uint64_t v42 = *(void *)(v0 + 1104);
      uint64_t v182 = *(void *)(v0 + 1088);
      uint64_t v43 = *(void *)(v0 + 1080);
      uint64_t v44 = *(void *)(v0 + 1064);
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      v222[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315138;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v173(v41, v168);
      SFAirDropReceive.AskRequest.type.getter();
      v186(v42, v182);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v48 = v47;
      v196(v43, v44);
      *(void *)(v0 + 672) = sub_100254634(v46, v48, v222);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Exchange Contact SHARE BACK SKIP. Already responded with contact {type: %s}", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    unint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Exchange Contact END", v68, 2u);
      swift_slowDealloc();
    }
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 1736);
    uint64_t v70 = *(void *)(v0 + 1352);
    uint64_t v212 = *(void *)(v0 + 1344);
    uint64_t v218 = *(void *)(v0 + 1368);
    uint64_t v201 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
    uint64_t v207 = *(void *)(v0 + 1280);
    uint64_t v194 = *(void *)(v0 + 1112);
    uint64_t v197 = *(void *)(v0 + 1248);
    uint64_t v71 = *(void *)(v0 + 1056);
    uint64_t v72 = v66;
    uint64_t v73 = *(void *)(v0 + 1016);
    uint64_t v74 = *(void *)(v0 + 1008);
    uint64_t v75 = *(void *)(v0 + 872);
    uint64_t v76 = *(void *)(v0 + 864);
    uint64_t v77 = *(void *)(v0 + 840);

    v69(v76, v77);
    sub_10000A7E8(v75, &qword_10096CC70);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v74);
    v201(v197, v194);
    sub_10053A8DC(v207, _s14descr1008C9A51V15ExchangeRequestVMa);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v218, v212);
    uint64_t v213 = *(void *)(v0 + 1912);
    uint64_t v219 = *(void *)(v0 + 1920);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v78(v213, v219);
  }
}

uint64_t sub_10052FAE4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[219];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[217];
  uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[194];
  uint64_t v13 = v0[160];
  uint64_t v10 = v0[139];
  uint64_t v11 = v0[156];
  uint64_t v3 = v0[132];
  uint64_t v4 = v0[126];
  uint64_t v5 = v0[109];
  uint64_t v6 = v0[108];
  uint64_t v7 = v0[105];
  v1(v0[131], v4);
  v2(v6, v7);
  sub_10000A7E8(v5, &qword_10096CC70);
  v1(v3, v4);
  v12(v11, v10);
  sub_10053A8DC(v13, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(void, void))(v0[169] + 8))(v0[171], v0[168]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10052FF18()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 800);
  v2[238] = v0;
  swift_task_dealloc();
  sub_10000A7E8(v3, &qword_100978540);
  unint64_t v4 = v2[236];
  uint64_t v5 = v2[235];
  uint64_t v15 = v2[233];
  uint64_t v14 = v2[232];
  unint64_t v18 = v2[231];
  uint64_t v17 = v2[230];
  unint64_t v16 = v2[229];
  uint64_t v6 = v2[228];
  unint64_t v7 = v2[227];
  uint64_t v8 = v2[226];
  uint64_t v9 = v2[225];
  uint64_t v10 = v2[224];
  if (v0)
  {
    uint64_t v11 = v2[172];
    swift_bridgeObjectRelease();
    sub_100250CB0(v5, v4);
    sub_100394590(v10, v9, v8, v7, v6, v16, v17, v18, v14, v15);
    uint64_t v12 = sub_100533B6C;
  }
  else
  {
    uint64_t v11 = v2[172];
    sub_100250CB0(v5, v4);
    sub_100394590(v10, v9, v8, v7, v6, v16, v17, v18, v14, v15);
    uint64_t v12 = sub_100530214;
  }
  return _swift_task_switch(v12, v11, 0);
}

uint64_t sub_100530214()
{
  uint64_t v157 = v0;
  uint64_t v1 = *(void *)(v0 + 832);
  sub_100394590(*(void *)(v0 + 1792), *(void *)(v0 + 1800), *(void *)(v0 + 1808), *(void *)(v0 + 1816), *(void *)(v0 + 1824), *(void *)(v0 + 1832), *(void *)(v0 + 1840), *(void *)(v0 + 1848), *(void *)(v0 + 1856), *(void *)(v0 + 1864));
  sub_10053A8DC(v1, type metadata accessor for SDAirDropServerConnection);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Exchange Contact CONTINUE. Imported contact", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1752);
  uint64_t v6 = *(void *)(v0 + 1048);
  uint64_t v7 = *(void *)(v0 + 1008);

  v5(v6, v7);
  *(_OWORD *)(v0 + 1912) = *(_OWORD *)(v0 + 1768);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1560);
  uint64_t v9 = *(void *)(v0 + 1112);
  uint64_t v10 = *(void *)(v0 + 920);
  sub_10024A330(*(void *)(v0 + 776), v10, &qword_100970BD0);
  LODWORD(v9) = v8(v10, 1, v9);
  sub_10000A7E8(v10, &qword_100970BD0);
  if (v9 == 1)
  {
    uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
    uint64_t v12 = *(void *)(v0 + 1008);
    uint64_t v13 = *(void *)(v0 + 968);
    SFAirDrop.ContactRequest.contact.getter();
    if (v11(v13, 1, v12) == 1)
    {
      uint64_t v14 = (uint64_t *)(v0 + 968);
LABEL_10:
      uint64_t v109 = (void *)(v0 + 368);
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1536);
      uint64_t v29 = *(void *)(v0 + 1248);
      uint64_t v30 = *(void *)(v0 + 1160);
      uint64_t v31 = *(void *)(v0 + 1112);
      sub_10000A7E8(*v14, &qword_100970BA8);
      v28(v30, v29, v31);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      BOOL v34 = os_log_type_enabled(v32, v33);
      uint64_t v35 = *(void *)(v0 + 1160);
      if (v34)
      {
        os_log_type_t v151 = v33;
        uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
        uint64_t v37 = *(void *)(v0 + 1008);
        uint64_t v38 = *(void *)(v0 + 952);
        uint64_t v39 = swift_slowAlloc();
        v156[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 141558275;
        *(void *)(v0 + 640) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 12) = 2081;
        SFAirDrop.ContactRequest.contact.getter();
        if (v36(v38, 1, v37) == 1)
        {
          sub_10000A7E8(*(void *)(v0 + 952), &qword_100970BA8);
          unint64_t v40 = 0x80000001007C0F00;
          unint64_t v41 = 0xD000000000000020;
        }
        else
        {
          uint64_t v68 = *(void *)(v0 + 1016);
          uint64_t v69 = *(void *)(v0 + 1008);
          uint64_t v70 = *(void *)(v0 + 952);
          unint64_t v41 = SFAirDrop.ContactInfo.description.getter();
          unint64_t v40 = v71;
          (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v69);
        }
        uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
        uint64_t v73 = *(void *)(v0 + 1160);
        uint64_t v74 = *(void *)(v0 + 1112);
        *(void *)(v0 + 648) = sub_100254634(v41, v40, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v72(v73, v74);
        _os_log_impl((void *)&_mh_execute_header, v32, v151, "Exchange Contact SHARE BACK PERMISSION SKIP. No senderContact or no receiverContact {senderContact: %{private,mask.hash}s}", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
        uint64_t v57 = *(void *)(v0 + 1112);

        v56(v35, v57);
      }
      unsigned int v128 = enum case for SFAirDrop.ContactRequest.notNeeded(_:);
      (*(void (**)(void))(*(void *)(v0 + 1120) + 104))(*(void *)(v0 + 1184));
      uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1536);
      unint64_t v148 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
      uint64_t v134 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      os_log_type_t v110 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
      uint64_t v112 = *(void *)(v0 + 1328);
      uint64_t v115 = *(void *)(v0 + 1312);
      uint64_t v118 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
      uint64_t v76 = *(void *)(v0 + 1304);
      uint64_t v77 = *(void *)(v0 + 1288);
      uint64_t v78 = *(void *)(v0 + 1248);
      uint64_t v79 = *(void *)(v0 + 1184);
      uint64_t v80 = *(void *)(v0 + 1112);
      uint64_t v142 = *(void *)(v0 + 1008);
      uint64_t v122 = *(void *)(v0 + 944);
      uint64_t v81 = v76 + *(int *)(sub_10000A844(&qword_1009723E0) + 48);
      v75(v76, v78, v80);
      v75(v81, v79, v80);
      v110(v76, enum case for SFAirDropReceive.Transfer.State.sharingContactBack(_:), v77);
      sub_1006BE3BC(v76, v112);
      v118(v76, v77);
      v134(v112, v115);
      SFAirDrop.ContactRequest.contact.getter();
      if (v148(v122, 1, v142) == 1)
      {
        sub_10000A7E8(*(void *)(v0 + 944), &qword_100970BA8);
        uint64_t v82 = 0;
        uint64_t v83 = 0;
      }
      else
      {
        uint64_t v84 = *(void *)(v0 + 1016);
        uint64_t v85 = *(void *)(v0 + 1008);
        uint64_t v86 = *(void *)(v0 + 944);
        uint64_t v82 = SFAirDrop.ContactInfo.accountHandle.getter();
        uint64_t v83 = v87;
        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v86, v85);
      }
      uint64_t v126 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
      uint64_t v88 = *(void *)(v0 + 1216);
      uint64_t v89 = *(void *)(v0 + 1120);
      uint64_t v90 = *(void *)(v0 + 1112);
      sub_100460D10(v82, v83, v109);
      uint64_t v91 = *(void *)(v0 + 368);
      uint64_t v92 = *(void *)(v0 + 376);
      unint64_t v119 = *(void *)(v0 + 392);
      uint64_t v123 = *(void *)(v0 + 384);
      uint64_t v149 = *(void *)(v0 + 416);
      unint64_t v154 = *(void *)(v0 + 408);
      uint64_t v139 = *(void *)(v0 + 432);
      unint64_t v143 = *(void *)(v0 + 424);
      uint64_t v135 = *(void *)(v0 + 440);
      uint64_t v113 = *(void *)(v0 + 448);
      uint64_t v116 = *(void *)(v0 + 400);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t))(v89 + 104))(v88, v128, v90);
      char v93 = static SFAirDrop.ContactRequest.== infix(_:_:)();
      *(void *)(v0 + 1960) = (v89 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v126(v88, v90);
      if (v93)
      {
        uint64_t v91 = 0;
        uint64_t v92 = 0;
        uint64_t v94 = 0;
        unint64_t v95 = 0;
        uint64_t v96 = 0;
        unint64_t v97 = 0;
        uint64_t v98 = 0;
        unint64_t v99 = 0;
        uint64_t v100 = 0;
        uint64_t v101 = 0;
        uint64_t v102 = 0;
      }
      else
      {
        sub_10039463C(v109, (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_1003944E4);
        unint64_t v95 = v119;
        uint64_t v94 = v123;
        uint64_t v102 = v113;
        uint64_t v96 = v116;
        uint64_t v98 = v149;
        unint64_t v97 = v154;
        uint64_t v100 = v139;
        unint64_t v99 = v143;
        uint64_t v101 = v135;
      }
      uint64_t v150 = v98;
      unint64_t v155 = v97;
      uint64_t v140 = v100;
      unint64_t v144 = v99;
      *(void *)(v0 + 2048) = v102;
      *(void *)(v0 + 2040) = v101;
      *(void *)(v0 + 2032) = v100;
      *(void *)(v0 + 2024) = v99;
      *(void *)(v0 + 2016) = v98;
      *(void *)(v0 + 2008) = v97;
      *(void *)(v0 + 2000) = v96;
      *(void *)(v0 + 1992) = v95;
      *(void *)(v0 + 1984) = v94;
      *(void *)(v0 + 1976) = v92;
      *(void *)(v0 + 1968) = v91;
      uint64_t v103 = v101;
      uint64_t v136 = v101;
      uint64_t v104 = *(void (**)(void))(v0 + 1536);
      uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v105 = *(void *)(v0 + 1328);
      uint64_t v117 = *(void *)(v0 + 1312);
      uint64_t v120 = *(void *)(v0 + 1216);
      uint64_t v129 = *(void *)(v0 + 896);
      uint64_t v106 = *(void *)(v0 + 880);
      *(void *)(v0 + 280) = v91;
      *(void *)(v0 + 288) = v92;
      *(void *)(v0 + 296) = v94;
      *(void *)(v0 + 304) = v95;
      *(void *)(v0 + 312) = v96;
      *(void *)(v0 + 320) = v97;
      *(void *)(v0 + 328) = v98;
      *(void *)(v0 + 336) = v99;
      *(void *)(v0 + 344) = v100;
      *(void *)(v0 + 352) = v103;
      *(void *)(v0 + 360) = v102;
      v104();
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.id.getter();
      v124(v105, v117);
      sub_1003944E4(v91, v92, v94, v95, v96, v155, v150, v144, v140, v136);
      sub_1005AA2C0(v120, v106, v0 + 280, v129);
      uint64_t v107 = (void *)swift_task_alloc();
      *(void *)(v0 + 2056) = v107;
      *uint64_t v107 = v0;
      v107[1] = sub_10053217C;
      uint64_t v108 = *(void *)(v0 + 896);
      return sub_100673594(v108);
    }
    uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1504);
    uint64_t v26 = *(void *)(v0 + 1008);
    uint64_t v27 = *(void *)(v0 + 960);
    (*(void (**)(void, void, uint64_t))(v0 + 1520))(*(void *)(v0 + 1032), *(void *)(v0 + 968), v26);
    sub_1004ED104(v27);
    if (v25(v27, 1, v26) == 1)
    {
      uint64_t v14 = (uint64_t *)(v0 + 960);
      (*(void (**)(void, void))(*(void *)(v0 + 1016) + 8))(*(void *)(v0 + 1032), *(void *)(v0 + 1008));
      goto LABEL_10;
    }
    BOOL v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1688);
    uint64_t v147 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    uint64_t v138 = *(void (**)(uint64_t, uint64_t))(v0 + 1416);
    uint64_t v127 = *(void (**)(uint64_t, void, uint64_t))(v0 + 1400);
    uint64_t v59 = *(void *)(v0 + 1328);
    uint64_t v133 = *(void *)(v0 + 1312);
    uint64_t v60 = *(void *)(v0 + 1304);
    uint64_t v61 = *(void *)(v0 + 1288);
    unint64_t v62 = *(void *)(v0 + 1032);
    uint64_t v63 = *(void *)(v0 + 1024);
    uint64_t v64 = *(void *)(v0 + 1008);
    uint64_t v65 = *(void *)(v0 + 792);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 1520))(v63, *(void *)(v0 + 960), v64);
    sub_100536550(v62, v63, v65);
    uint64_t v66 = v60 + *(int *)(sub_10000A844(&qword_1009723E8) + 48);
    v58(v60, v63, v64);
    uint64_t v67 = sub_10000A844((uint64_t *)&unk_1009723F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v66, v65, v67);
    v127(v60, enum case for SFAirDropReceive.Transfer.State.waitingForContactShareBackResponse(_:), v61);
    sub_1006BE3BC(v60, v59);
    v138(v60, v61);
    v147(v59, v133);
    return _swift_task_switch(sub_10053131C, 0, 0);
  }
  else
  {
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v131 = *(void (**)(uint64_t, uint64_t))(v0 + 1488);
      uint64_t v125 = *(void (**)(uint64_t, uint64_t))(v0 + 1472);
      unint64_t v114 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v17 = *(void *)(v0 + 1328);
      uint64_t v111 = *(void *)(v0 + 1312);
      uint64_t v18 = *(void *)(v0 + 1104);
      uint64_t v121 = *(void *)(v0 + 1088);
      uint64_t v19 = *(void *)(v0 + 1080);
      uint64_t v20 = *(void *)(v0 + 1064);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v156[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      CurrentValueSubject.value.getter();
      SFAirDropReceive.Transfer.askRequest.getter();
      v114(v17, v111);
      SFAirDropReceive.AskRequest.type.getter();
      v125(v18, v121);
      sub_10053BB90((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v24 = v23;
      v131(v19, v20);
      *(void *)(v0 + 672) = sub_100254634(v22, v24, v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Exchange Contact SHARE BACK SKIP. Already responded with contact {type: %s}", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Exchange Contact END", v44, 2u);
      swift_slowDealloc();
    }
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 1736);
    uint64_t v46 = *(void *)(v0 + 1352);
    uint64_t v145 = *(void *)(v0 + 1344);
    unint64_t v152 = *(void *)(v0 + 1368);
    uint64_t v137 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
    uint64_t v141 = *(void *)(v0 + 1280);
    uint64_t v130 = *(void *)(v0 + 1112);
    uint64_t v132 = *(void *)(v0 + 1248);
    uint64_t v47 = *(void *)(v0 + 1056);
    unint64_t v48 = v42;
    uint64_t v49 = *(void *)(v0 + 1016);
    uint64_t v50 = *(void *)(v0 + 1008);
    uint64_t v51 = *(void *)(v0 + 872);
    uint64_t v52 = *(void *)(v0 + 864);
    uint64_t v53 = *(void *)(v0 + 840);

    v45(v52, v53);
    sub_10000A7E8(v51, &qword_10096CC70);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v50);
    v137(v132, v130);
    sub_10053A8DC(v141, _s14descr1008C9A51V15ExchangeRequestVMa);
    (*(void (**)(unint64_t, uint64_t))(v46 + 8))(v152, v145);
    uint64_t v146 = *(void *)(v0 + 1912);
    unint64_t v153 = *(void *)(v0 + 1920);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v54(v146, v153);
  }
}

uint64_t sub_10053131C()
{
  uint64_t v1 = v0[99];
  uint64_t v2 = swift_task_alloc();
  v0[241] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[242] = v3;
  *(void *)(v3 + 16) = v1;
  unint64_t v4 = (void *)swift_task_alloc();
  v0[243] = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_100531424;
  uint64_t v5 = v0[147];
  uint64_t v6 = v0[139];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_100970C68, v2, sub_10053A89C, v3, 0, 0, v6);
}

uint64_t sub_100531424()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1952) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100531C8C;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1376);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_100531558;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100531558()
{
  uint64_t v91 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[192];
  uint64_t v2 = v0[148];
  uint64_t v3 = v0[146];
  uint64_t v4 = v0[139];
  (*(void (**)(uint64_t, void, uint64_t))(v0[140] + 32))(v2, v0[147], v4);
  v1(v3, v2, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[146];
    uint64_t v70 = (void (*)(uint64_t, uint64_t))v0[194];
    uint64_t v8 = v0[139];
    uint64_t v84 = v0[129];
    uint64_t v65 = v0[127];
    uint64_t v76 = v0[126];
    uint64_t v80 = v0[128];
    uint64_t v73 = v0[99];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558275;
    v0[82] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    sub_10053BB90(&qword_100970C80, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[83] = sub_100254634(v10, v11, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v70(v7, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Exchange Contact CONTINUE. Share back permission {contactToSend: %{private,mask.hash}s}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10000A7E8(v73, &qword_100970C58);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v12(v80, v76);
    v12(v84, v76);
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[194];
    uint64_t v14 = v0[146];
    uint64_t v15 = v0[139];
    uint64_t v85 = v0[129];
    uint64_t v16 = v0[128];
    uint64_t v17 = v0[127];
    uint64_t v18 = v0[126];
    uint64_t v19 = v0[99];

    v13(v14, v15);
    sub_10000A7E8(v19, &qword_100970C58);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v20(v16, v18);
    v20(v85, v18);
  }
  uint64_t v21 = (void (*)(uint64_t, uint64_t, uint64_t))v0[192];
  uint64_t v81 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[188];
  unint64_t v71 = (void (*)(uint64_t, uint64_t))v0[179];
  uint64_t v56 = (void (*)(uint64_t, void, uint64_t))v0[175];
  uint64_t v57 = v0[166];
  uint64_t v59 = v0[164];
  unint64_t v62 = (void (*)(uint64_t, uint64_t))v0[177];
  uint64_t v22 = v0[163];
  uint64_t v23 = v0[161];
  uint64_t v24 = v0[156];
  uint64_t v25 = v0[148];
  uint64_t v26 = v0[139];
  uint64_t v77 = v0[126];
  uint64_t v66 = v0[118];
  uint64_t v27 = v22 + *(int *)(sub_10000A844(&qword_1009723E0) + 48);
  v21(v22, v24, v26);
  v21(v27, v25, v26);
  v56(v22, enum case for SFAirDropReceive.Transfer.State.sharingContactBack(_:), v23);
  sub_1006BE3BC(v22, v57);
  v62(v22, v23);
  v71(v57, v59);
  SFAirDrop.ContactRequest.contact.getter();
  if (v81(v66, 1, v77) == 1)
  {
    sub_10000A7E8(v0[118], &qword_100970BA8);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v30 = v0[127];
    uint64_t v31 = v0[126];
    uint64_t v32 = v0[118];
    uint64_t v28 = SFAirDrop.ContactInfo.accountHandle.getter();
    uint64_t v29 = v33;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
  }
  uint64_t v72 = (void (*)(uint64_t, uint64_t))v0[194];
  uint64_t v34 = v0[152];
  uint64_t v35 = v0[140];
  uint64_t v36 = v0[139];
  sub_100460D10(v28, v29, v0 + 46);
  uint64_t v38 = v0[46];
  uint64_t v37 = v0[47];
  unint64_t v67 = v0[49];
  uint64_t v68 = v0[48];
  uint64_t v63 = v0[50];
  uint64_t v86 = v0[52];
  unint64_t v88 = v0[51];
  uint64_t v78 = v0[54];
  unint64_t v82 = v0[53];
  uint64_t v74 = v0[55];
  uint64_t v60 = v0[56];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))(v34, enum case for SFAirDrop.ContactRequest.notNeeded(_:), v36);
  char v39 = static SFAirDrop.ContactRequest.== infix(_:_:)();
  v0[245] = (v35 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v72(v34, v36);
  if (v39)
  {
    uint64_t v38 = 0;
    uint64_t v37 = 0;
    uint64_t v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
  }
  else
  {
    sub_10039463C(v0 + 46, (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_1003944E4);
    unint64_t v41 = v67;
    uint64_t v40 = v68;
    uint64_t v48 = v60;
    uint64_t v42 = v63;
    uint64_t v44 = v86;
    unint64_t v43 = v88;
    uint64_t v46 = v78;
    unint64_t v45 = v82;
    uint64_t v47 = v74;
  }
  uint64_t v87 = v44;
  unint64_t v89 = v43;
  uint64_t v79 = v46;
  unint64_t v83 = v45;
  uint64_t v75 = v47;
  v0[256] = v48;
  v0[255] = v47;
  v0[254] = v46;
  v0[253] = v45;
  v0[252] = v44;
  v0[251] = v43;
  v0[250] = v42;
  v0[249] = v41;
  v0[248] = v40;
  v0[247] = v37;
  v0[246] = v38;
  uint64_t v49 = v47;
  uint64_t v50 = (void (*)(void))v0[192];
  uint64_t v64 = (void (*)(uint64_t, uint64_t))v0[179];
  uint64_t v51 = v0[166];
  uint64_t v58 = v0[164];
  uint64_t v61 = v0[152];
  uint64_t v69 = v0[112];
  uint64_t v52 = v0[110];
  v0[35] = v38;
  v0[36] = v37;
  v0[37] = v40;
  v0[38] = v41;
  v0[39] = v42;
  v0[40] = v43;
  v0[41] = v44;
  v0[42] = v45;
  v0[43] = v46;
  v0[44] = v49;
  v0[45] = v48;
  v50();
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.id.getter();
  v64(v51, v58);
  sub_1003944E4(v38, v37, v40, v41, v42, v89, v87, v83, v79, v75);
  sub_1005AA2C0(v61, v52, (uint64_t)(v0 + 35), v69);
  uint64_t v53 = (void *)swift_task_alloc();
  v0[257] = v53;
  *uint64_t v53 = v0;
  v53[1] = sub_10053217C;
  uint64_t v54 = v0[112];
  return sub_100673594(v54);
}

uint64_t sub_100531C8C()
{
  uint64_t v1 = *(void *)(v0 + 1376);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100531D18, v1, 0);
}

uint64_t sub_100531D18()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[217];
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[194];
  uint64_t v16 = v0[160];
  uint64_t v13 = v0[139];
  uint64_t v14 = v0[156];
  uint64_t v12 = v0[132];
  uint64_t v2 = v0[129];
  uint64_t v3 = v0[128];
  uint64_t v4 = v0[127];
  uint64_t v5 = v0[126];
  uint64_t v6 = v0[109];
  uint64_t v7 = v0[108];
  uint64_t v8 = v0[105];
  sub_10000A7E8(v0[99], &qword_100970C58);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(v3, v5);
  v9(v2, v5);
  v1(v7, v8);
  sub_10000A7E8(v6, &qword_10096CC70);
  v9(v12, v5);
  v15(v14, v13);
  sub_10053A8DC(v16, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(void, void))(v0[169] + 8))(v0[171], v0[168]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10053217C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2064) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 1376);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100534000;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1376);
    uint64_t v4 = sub_1005322A4;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1005322A4()
{
  uint64_t v58 = v0;
  (*(void (**)(void, void, void))(v0 + 1536))(*(void *)(v0 + 1152), *(void *)(v0 + 1184), *(void *)(v0 + 1112));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  uint64_t v54 = v1;
  if (os_log_type_enabled(v1, v2))
  {
    long long v34 = *(_OWORD *)(v0 + 2032);
    unint64_t v39 = *(void *)(v0 + 2008);
    uint64_t v42 = *(void *)(v0 + 2016);
    uint64_t v37 = *(void *)(v0 + 2000);
    uint64_t v32 = *(void *)(v0 + 1984);
    unint64_t v33 = *(void *)(v0 + 1992);
    uint64_t v30 = *(void *)(v0 + 1968);
    uint64_t v31 = *(void *)(v0 + 1976);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
    unint64_t v48 = *(void *)(v0 + 2024);
    uint64_t v51 = *(void *)(v0 + 1184);
    uint64_t v3 = *(void *)(v0 + 1152);
    uint64_t v4 = *(void *)(v0 + 1112);
    uint64_t v45 = *(void *)(v0 + 896);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 141558275;
    *(void *)(v0 + 624) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_10053BB90(&qword_100970C80, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 632) = sub_100254634(v6, v7, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v54, v2, "Exchange Contact CONTINUE. Shared back {contactToSend: %{private,mask.hash}s}", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100394590(v30, v31, v32, v33, v37, v39, v42, v48, v34, *((uint64_t *)&v34 + 1));
    sub_10039463C((void *)(v0 + 368), (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_100394590);
    sub_10053A8DC(v45, _s14descr1008C9A51V16ExchangeResponseVMa);
    v29(v51, v4);
  }
  else
  {
    long long v35 = *(_OWORD *)(v0 + 2032);
    unint64_t v38 = *(void *)(v0 + 2008);
    uint64_t v40 = *(void *)(v0 + 2016);
    uint64_t v36 = *(void *)(v0 + 2000);
    unint64_t v8 = *(void *)(v0 + 1992);
    uint64_t v9 = *(void *)(v0 + 1984);
    uint64_t v10 = *(void *)(v0 + 1976);
    uint64_t v11 = *(void *)(v0 + 1968);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
    unint64_t v46 = *(void *)(v0 + 2024);
    uint64_t v49 = *(void *)(v0 + 1184);
    uint64_t v13 = *(void *)(v0 + 1152);
    uint64_t v14 = *(void *)(v0 + 1112);
    uint64_t v43 = *(void *)(v0 + 896);

    v12(v13, v14);
    sub_100394590(v11, v10, v9, v8, v36, v38, v40, v46, v35, *((uint64_t *)&v35 + 1));
    sub_10039463C((void *)(v0 + 368), (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_100394590);
    sub_10053A8DC(v43, _s14descr1008C9A51V16ExchangeResponseVMa);
    v12(v49, v14);
  }
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Exchange Contact END", v17, 2u);
    swift_slowDealloc();
  }
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1736);
  uint64_t v19 = *(void *)(v0 + 1352);
  uint64_t v52 = *(void *)(v0 + 1344);
  uint64_t v55 = *(void *)(v0 + 1368);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
  uint64_t v50 = *(void *)(v0 + 1280);
  uint64_t v41 = *(void *)(v0 + 1112);
  uint64_t v44 = *(void *)(v0 + 1248);
  uint64_t v20 = *(void *)(v0 + 1056);
  uint64_t v21 = v15;
  uint64_t v22 = *(void *)(v0 + 1016);
  uint64_t v23 = *(void *)(v0 + 1008);
  uint64_t v24 = *(void *)(v0 + 872);
  uint64_t v25 = *(void *)(v0 + 864);
  uint64_t v26 = *(void *)(v0 + 840);

  v18(v25, v26);
  sub_10000A7E8(v24, &qword_10096CC70);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v23);
  v47(v44, v41);
  sub_10053A8DC(v50, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v55, v52);
  uint64_t v53 = *(void *)(v0 + 1912);
  uint64_t v56 = *(void *)(v0 + 1920);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v27(v53, v56);
}

uint64_t sub_100532A8C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2088) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1376);
  if (v0) {
    uint64_t v4 = sub_100533320;
  }
  else {
    uint64_t v4 = sub_100532BB8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100532BB8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[259];
  uint64_t v2 = v0[171];
  uint64_t v3 = v0[169];
  uint64_t v4 = v0[168];
  uint64_t v5 = v0[160];
  uint64_t v6 = v0[156];
  uint64_t v7 = v0[143];
  uint64_t v8 = v0[139];
  sub_10053A8DC(v0[111], _s14descr1008C9A51V16ExchangeResponseVMa);
  v1(v7, v8);
  v1(v6, v8);
  sub_10053A8DC(v5, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void, void))v0[1];
  return v9(0, 0);
}

uint64_t sub_100532FAC()
{
  (*(void (**)(void, void))(v0[169] + 8))(v0[171], v0[168]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100533320()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[259];
  uint64_t v2 = v0[160];
  uint64_t v3 = v0[156];
  uint64_t v4 = v0[143];
  uint64_t v5 = v0[139];
  sub_10053A8DC(v0[111], _s14descr1008C9A51V16ExchangeResponseVMa);
  v1(v4, v5);
  v1(v3, v5);
  sub_10053A8DC(v2, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(void, void))(v0[169] + 8))(v0[171], v0[168]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100533710()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[194];
  uint64_t v10 = v0[156];
  uint64_t v11 = v0[160];
  uint64_t v2 = v0[154];
  uint64_t v3 = v0[139];
  uint64_t v4 = v0[132];
  uint64_t v5 = v0[127];
  uint64_t v6 = v0[126];
  uint64_t v7 = v0[113];
  sub_100394590(v0[198], v0[199], v0[200], v0[201], v0[202], v0[203], v0[204], v0[205], v0[206], v0[207]);
  sub_10039463C(v0 + 57, (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_100394590);
  sub_10053A8DC(v7, _s14descr1008C9A51V16ExchangeResponseVMa);
  v1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v10, v3);
  sub_10053A8DC(v11, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(void, void))(v0[169] + 8))(v0[171], v0[168]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100533B6C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[219];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[217];
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[194];
  uint64_t v15 = v0[160];
  uint64_t v12 = v0[139];
  uint64_t v13 = v0[156];
  uint64_t v11 = v0[132];
  uint64_t v3 = v0[131];
  uint64_t v4 = v0[126];
  uint64_t v5 = v0[109];
  uint64_t v6 = v0[108];
  uint64_t v7 = v0[105];
  uint64_t v8 = v0[104];
  sub_100394590(v0[224], v0[225], v0[226], v0[227], v0[228], v0[229], v0[230], v0[231], v0[232], v0[233]);
  sub_10053A8DC(v8, type metadata accessor for SDAirDropServerConnection);
  v1(v3, v4);
  v2(v6, v7);
  sub_10000A7E8(v5, &qword_10096CC70);
  v1(v11, v4);
  v14(v13, v12);
  sub_10053A8DC(v15, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(void, void))(v0[169] + 8))(v0[171], v0[168]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100534000()
{
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[217];
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[194];
  uint64_t v14 = v0[156];
  uint64_t v15 = v0[160];
  uint64_t v2 = v0[148];
  uint64_t v3 = v0[139];
  uint64_t v4 = v0[127];
  uint64_t v12 = v0[126];
  uint64_t v13 = v0[132];
  uint64_t v5 = v0[112];
  uint64_t v10 = v0[109];
  uint64_t v6 = v0[108];
  uint64_t v7 = v0[105];
  sub_100394590(v0[246], v0[247], v0[248], v0[249], v0[250], v0[251], v0[252], v0[253], v0[254], v0[255]);
  sub_10039463C(v0 + 46, (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_100394590);
  sub_10053A8DC(v5, _s14descr1008C9A51V16ExchangeResponseVMa);
  v1(v2, v3);
  v11(v6, v7);
  sub_10000A7E8(v10, &qword_10096CC70);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v13, v12);
  v1(v14, v3);
  sub_10053A8DC(v15, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(void, void))(v0[169] + 8))(v0[171], v0[168]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_100534498(uint64_t a1)
{
  uint64_t v50 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v52 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  unint64_t v48 = (char *)v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for SFPlatform();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFAirDrop.TransferType();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v44 - v12;
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t))(v8 + 88);
  uint64_t v49 = v7;
  if (v14(v13, v7) == enum case for SFAirDrop.TransferType.peerPayment(_:))
  {
    static SFPlatform.macOS.getter();
    char v15 = static SFPlatform.isPlatform(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v15)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Verifying peerPayment support", v18, 2u);
        swift_slowDealloc();
      }

      id v19 = [self verifyReceiverEligibility];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = type metadata accessor for SFAirDropReceive.Failure();
        sub_10053BB90(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
        swift_allocError();
        uint64_t v23 = v22;
        id v24 = v20;
        CodableError.init(_:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, enum case for SFAirDropReceive.Failure.unexpected(_:), v21);
        swift_willThrow();
      }
      else
      {
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Device supports peerPayment", v43, 2u);
          swift_slowDealloc();
        }
      }
    }
  }
  else
  {
    uint64_t v25 = v48;
    uint64_t v26 = a1;
    uint64_t v27 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v48, v26, v50);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      os_log_t v51 = v28;
      uint64_t v31 = swift_slowAlloc();
      int v46 = v30;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v54 = v47;
      *(_DWORD *)uint64_t v32 = 136315138;
      v44[1] = v32 + 4;
      uint64_t v45 = v32;
      SFAirDropReceive.AskRequest.type.getter();
      uint64_t v33 = SFAirDrop.TransferType.description.getter();
      unint64_t v35 = v34;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v37 = v11;
      unint64_t v38 = v25;
      uint64_t v39 = v49;
      v36(v37, v49);
      uint64_t v53 = sub_100254634(v33, v35, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v38, v50);
      os_log_t v40 = v51;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v46, "Transfer type %s is supported", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v36(v13, v39);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v52 + 8))(v25, v27);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v49);
    }
  }
}

uint64_t sub_100534B00(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  return _swift_task_switch(sub_100534B94, 0, 0);
}

uint64_t sub_100534B94()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = type metadata accessor for SFAirDrop.ContactRequest();
  *uint64_t v4 = v0;
  v4[1] = sub_100534CA4;
  uint64_t v6 = v0[2];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v6, &unk_100978658, v2, sub_10053C35C, v3, 0, 0, v5);
}

uint64_t sub_100534CA4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100534DEC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100534DEC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100534E58(uint64_t a1, uint64_t a2)
{
  v2[2] = a2;
  uint64_t v3 = sub_10000A844(&qword_100978648);
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  uint64_t v4 = sub_10000A844(&qword_100978650);
  v2[6] = v4;
  v2[7] = *(void *)(v4 - 8);
  v2[8] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  v2[9] = static AirDropActor.shared;
  return _swift_task_switch(sub_100534FB8, v5, 0);
}

uint64_t sub_100534FB8()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, *(void *)(v0[2] + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler)+ OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_handlerContinuation, v3);
  SFProgressContinuation.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005350D4;
  uint64_t v5 = v0[3];
  return SFProgressTask.finalValue.getter(v0 + 12, v5);
}

uint64_t sub_1005350D4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void *)(*v1 + 24);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 72);
  if (v0) {
    uint64_t v7 = sub_100535338;
  }
  else {
    uint64_t v7 = sub_10053525C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10053525C()
{
  type metadata accessor for CancellationError();
  sub_10053BB90(&qword_10096CCB8, (void (*)(uint64_t))&type metadata accessor for CancellationError);
  swift_allocError();
  CancellationError.init()();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100535338()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1005353A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v101 = a1;
  uint64_t v112 = a2;
  uint64_t v2 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v2 - 8);
  uint64_t v111 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  __chkstk_darwin(v4 - 8);
  uint64_t v107 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  uint64_t v106 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_10000A844(&qword_10096B2C0);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v129 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v100 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v121 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_10000A844(&qword_10096B368);
  uint64_t v108 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v138 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = (void (*)(uint64_t, char *, uint64_t))type metadata accessor for SFAirDrop.ButtonConfiguration();
  uint64_t v130 = *((void *)v120 - 1);
  __chkstk_darwin(v120);
  unint64_t v114 = (uint64_t *)((char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v127 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v105 = *(void *)(v127 - 8);
  uint64_t v13 = __chkstk_darwin(v127);
  uint64_t v103 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v137 = (char *)&v91 - v15;
  uint64_t v131 = type metadata accessor for SFAirDrop.TransferType();
  uint64_t v139 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  os_log_type_t v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v18 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v20 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for SFAirDropReceive.Transfer();
  uint64_t v117 = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v24 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000A844(&qword_100973298);
  uint64_t v25 = *(void *)(v136 - 8);
  uint64_t v26 = *(void *)(v25 + 64);
  uint64_t v27 = __chkstk_darwin(v136);
  uint64_t v135 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  os_log_type_t v29 = (char *)&v91 - v28;
  uint64_t v125 = (char *)&v91 - v28;
  SFProgressContinuation.init(_:initialProgress:file:line:)();
  uint64_t v133 = *(void *)(v134 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_subject);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  int v30 = *(void (**)(char *, uint64_t))(v22 + 8);
  unint64_t v134 = v22 + 8;
  uint64_t v118 = v30;
  v30(v24, v21);
  uint64_t v113 = v17;
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v119 = v18 + 8;
  uint64_t v116 = v31;
  uint64_t v32 = v132;
  v31(v20, v132);
  char v33 = SFAirDrop.TransferType.isOnlyExchange.getter();
  unint64_t v34 = *(void (**)(char *, uint64_t))(v139 + 8);
  v139 += 8;
  uint64_t v115 = v34;
  v34(v17, v131);
  uint64_t v35 = 1885693259;
  if ((v33 & 1) == 0) {
    uint64_t v35 = 0x656E696C636544;
  }
  unint64_t v36 = 0xE700000000000000;
  if (v33) {
    unint64_t v36 = 0xE400000000000000;
  }
  uint64_t v37 = v114;
  *unint64_t v114 = v35;
  v37[1] = v36;
  unsigned int v96 = enum case for SFAirDrop.ButtonConfiguration.text(_:);
  unint64_t v38 = *(void (**)(void))(v130 + 104);
  v130 += 104;
  unint64_t v97 = (void (*)(uint64_t *, void, void *))v38;
  v38(v37);
  uint64_t v39 = v25 + 16;
  uint64_t v122 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  os_log_t v40 = v135;
  uint64_t v41 = v29;
  uint64_t v42 = v136;
  v122(v135, v41, v136);
  uint64_t v43 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v102 = v26;
  uint64_t v98 = ((v43 + 16) & ~v43) + v26;
  uint64_t v99 = (v43 + 16) & ~v43;
  uint64_t v123 = v43;
  uint64_t v124 = v43 | 7;
  uint64_t v44 = swift_allocObject() + v99;
  uint64_t v104 = v25;
  uint64_t v47 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 32);
  uint64_t v46 = v25 + 32;
  uint64_t v45 = v47;
  v47(v44, v40, v42);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)();
  CurrentValueSubject.value.getter();
  unint64_t v95 = v20;
  SFAirDropReceive.Transfer.askRequest.getter();
  v118(v24, v117);
  unint64_t v48 = v113;
  SFAirDropReceive.AskRequest.type.getter();
  v116(v20, v32);
  char v49 = SFAirDrop.TransferType.isOnlyExchange.getter();
  v115(v48, v131);
  uint64_t v50 = 0x747065636341;
  if (v49) {
    uint64_t v50 = 0x6574656C6544;
  }
  uint64_t *v37 = v50;
  v37[1] = 0xE600000000000000;
  v97(v37, v96, v120);
  (*(void (**)(char *, void, uint64_t))(v100 + 104))(v121, enum case for SFAirDropReceive.ItemDestination.default(_:), v126);
  os_log_t v51 = v135;
  uint64_t v52 = v136;
  uint64_t v100 = v39;
  v122(v135, v125, v136);
  uint64_t v53 = swift_allocObject();
  uint64_t v130 = v46;
  uint64_t v120 = v45;
  v45(v53 + v99, v51, v52);
  uint64_t v54 = v95;
  uint64_t v55 = sub_10053BB90(&qword_1009732A0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  uint64_t v56 = sub_10053BB90(&qword_1009732A8, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  unint64_t v97 = (void (*)(uint64_t *, void, void *))sub_10053BB90(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  uint64_t v98 = v56;
  uint64_t v99 = v55;
  uint64_t v57 = v113;
  SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)();
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  uint64_t v58 = v117;
  uint64_t v59 = v118;
  ((void (*)(char *))v118)(v24);
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v60 = v116;
  v116(v54, v132);
  char v61 = SFAirDrop.TransferType.isOnlyExchange.getter();
  uint64_t v62 = v131;
  uint64_t v63 = v115;
  ((void (*)(char *))v115)(v57);
  if (v61)
  {
    uint64_t v121 = (char *)0x80000001007BAED0;
    unint64_t v114 = (uint64_t *)0xD000000000000012;
  }
  else
  {
    unint64_t v114 = (uint64_t *)SFAirDrop.ContactInfo.fullName.getter();
    uint64_t v121 = v64;
  }
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  v59(v24, v58);
  SFAirDropReceive.AskRequest.type.getter();
  v60(v54, v132);
  char v65 = SFAirDrop.TransferType.isOnlyExchange.getter();
  v63(v57, v62);
  if (v65)
  {
    uint64_t v140 = SFAirDrop.ContactInfo.fullName.getter();
    uint64_t v141 = v66;
    v67._countAndFlagsBits = 10;
    v67._object = (void *)0xE100000000000000;
    String.append(_:)(v67);
    uint64_t v68 = v92;
    SFAirDrop.ContactInfo.handle.getter();
    sub_10053BB90(&qword_100970CA8, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle);
    uint64_t v69 = v94;
    v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v68, v69);
    unint64_t v134 = v140;
  }
  else
  {
    unint64_t v134 = 0xD000000000000013;
  }
  uint64_t v71 = v128;
  uint64_t v139 = ~v123;
  UUID.init()();
  static Date.now.getter();
  sub_10000A844(&qword_10096B2F0);
  uint64_t v72 = sub_10000A844(&qword_10096B2F8);
  uint64_t v73 = *(void *)(v72 - 8);
  unint64_t v74 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  uint64_t v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_10076E7A0;
  unint64_t v76 = v75 + v74;
  sub_10000A844(&qword_100970B50);
  uint64_t v77 = v108;
  (*(void (**)(unint64_t, char *, uint64_t))(v108 + 16))(v76, v138, v71);
  UUID.init()();
  (*(void (**)(unint64_t, void, uint64_t))(v73 + 104))(v76, enum case for SFAirDrop.AcceptAction.single<A>(_:), v72);
  uint64_t v78 = v105;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v103, v137, v127);
  SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)();
  uint64_t v79 = type metadata accessor for TaskPriority();
  uint64_t v80 = (uint64_t)v111;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v111, 1, 1, v79);
  unint64_t v82 = v135;
  uint64_t v81 = v136;
  unint64_t v83 = v125;
  v122(v135, v125, v136);
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v84 = static AirDropActor.shared;
  uint64_t v85 = sub_10053BB90((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v86 = (v123 + 32) & v139;
  uint64_t v87 = swift_allocObject();
  *(void *)(v87 + 16) = v84;
  *(void *)(v87 + 24) = v85;
  v120(v87 + v86, v82, v81);
  swift_retain();
  uint64_t v88 = sub_10028CAD4(v80, (uint64_t)&unk_100978590, v87);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v138, v128);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v137, v127);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v83, v81);
  uint64_t v89 = v112;
  (*(void (**)(uint64_t, char *, uint64_t))(v109 + 32))(v112, v129, v110);
  uint64_t result = sub_10000A844(&qword_10096CC70);
  *(void *)(v89 + *(int *)(result + 52)) = v88;
  return result;
}

uint64_t sub_100536550@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v72 = a2;
  unint64_t v83 = a1;
  uint64_t v92 = a3;
  uint64_t v3 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v3 - 8);
  uint64_t v89 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  __chkstk_darwin(v5 - 8);
  uint64_t v86 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7 - 8);
  uint64_t v85 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A844((uint64_t *)&unk_1009723F0);
  uint64_t v90 = *(void *)(v9 - 8);
  uint64_t v91 = v9;
  __chkstk_darwin(v9);
  uint64_t v87 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
  uint64_t v82 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v73 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for SFAirDrop.ContactRequest();
  uint64_t v78 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v94 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A844(&qword_100970CD8);
  uint64_t v99 = *(void *)(v13 - 8);
  uint64_t v100 = v13;
  __chkstk_darwin(v13);
  uint64_t v102 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SFAirDrop.ButtonConfiguration();
  uint64_t v75 = (void (*)(uint64_t, char *, uint64_t))v15;
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v80 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v98 = *(void *)(v80 - 8);
  uint64_t v19 = __chkstk_darwin(v80);
  uint64_t v81 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v101 = (char *)&v68 - v21;
  uint64_t v22 = sub_10000A844(&qword_100970CE0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v25 = __chkstk_darwin(v22);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v68 - v26;
  unint64_t v95 = (char *)&v68 - v26;
  SFProgressContinuation.init(_:initialProgress:file:line:)();
  *uint64_t v18 = 0x776F4E20746F4ELL;
  v18[1] = 0xE700000000000000;
  uint64_t v28 = enum case for SFAirDrop.ButtonConfiguration.text(_:);
  os_log_type_t v29 = *(void (**)(void *, uint64_t, uint64_t))(v16 + 104);
  uint64_t v69 = v16 + 104;
  v29(v18, enum case for SFAirDrop.ButtonConfiguration.text(_:), v15);
  int v30 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  uint64_t v96 = v23 + 16;
  unint64_t v97 = v30;
  uint64_t v31 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30(v31, v27, v22);
  uint64_t v32 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v74 = ~v32;
  uint64_t v33 = (v32 + 16) & ~v32;
  uint64_t v84 = v24;
  uint64_t v77 = v33 + v24;
  uint64_t v76 = v32;
  uint64_t v34 = v32 | 7;
  uint64_t v35 = swift_allocObject();
  uint64_t v88 = v23;
  unint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
  v36(v35 + v33, v31, v22);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)();
  *uint64_t v18 = 0x6572616853;
  v18[1] = 0xE500000000000000;
  v29(v18, v28, (uint64_t)v75);
  uint64_t v37 = type metadata accessor for SFAirDrop.ContactInfo();
  unint64_t v38 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v94, v72, v37);
  (*(void (**)(char *, void, uint64_t))(v78 + 104))(v38, enum case for SFAirDrop.ContactRequest.contact(_:), v93);
  uint64_t v71 = v31;
  uint64_t v70 = v22;
  v97(v31, v95, v22);
  uint64_t v78 = v34;
  uint64_t v39 = swift_allocObject();
  uint64_t v77 = v23 + 32;
  uint64_t v75 = v36;
  v36(v39 + v33, v31, v22);
  sub_10053BB90(&qword_100970CE8, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
  uint64_t v69 = sub_10053BB90(&qword_100970CF0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
  uint64_t v68 = sub_10053BB90(&qword_100970CF8, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest);
  SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)();
  uint64_t v103 = 0x6977206572616853;
  unint64_t v104 = 0xEB00000000206874;
  v40._countAndFlagsBits = SFAirDrop.ContactInfo.fullName.getter();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 63;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  uint64_t v94 = (char *)v103;
  unint64_t v83 = v104;
  uint64_t v103 = SFAirDrop.ContactInfo.fullName.getter();
  unint64_t v104 = v42;
  v43._countAndFlagsBits = 10272;
  v43._object = (void *)0xE200000000000000;
  String.append(_:)(v43);
  uint64_t v44 = v73;
  SFAirDrop.ContactInfo.handle.getter();
  sub_10053BB90(&qword_100970CA8, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle);
  uint64_t v45 = v79;
  v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v45);
  v47._countAndFlagsBits = 41;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  UUID.init()();
  static Date.now.getter();
  sub_10000A844(&qword_100970D00);
  uint64_t v48 = sub_10000A844(&qword_100970D08);
  uint64_t v49 = *(void *)(v48 - 8);
  unint64_t v50 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_10076E7A0;
  unint64_t v52 = v51 + v50;
  sub_10000A844(&qword_100970D10);
  (*(void (**)(unint64_t, char *, uint64_t))(v99 + 16))(v52, v102, v100);
  uint64_t v53 = v80;
  UUID.init()();
  unint64_t v54 = v52;
  uint64_t v55 = v87;
  (*(void (**)(unint64_t, void, uint64_t))(v49 + 104))(v54, enum case for SFAirDrop.AcceptAction.single<A>(_:), v48);
  (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v81, v101, v53);
  uint64_t v56 = v95;
  uint64_t v57 = v70;
  uint64_t v58 = v71;
  uint64_t v59 = (uint64_t)v89;
  SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)();
  uint64_t v60 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 1, 1, v60);
  v97(v58, v56, v57);
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v61 = static AirDropActor.shared;
  uint64_t v62 = sub_10053BB90((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v63 = (v76 + 32) & v74;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v61;
  *(void *)(v64 + 24) = v62;
  v75(v64 + v63, v58, v57);
  swift_retain();
  uint64_t v65 = sub_10028CC74(v59, (uint64_t)&unk_100978580, v64);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v102, v100);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v101, v53);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v56, v57);
  uint64_t v66 = v92;
  (*(void (**)(uint64_t, char *, uint64_t))(v90 + 32))(v92, v55, v91);
  uint64_t result = sub_10000A844(&qword_100970C58);
  *(void *)(v66 + *(int *)(result + 52)) = v65;
  return result;
}

uint64_t sub_10053727C(uint64_t a1, uint64_t (*a2)(void), unsigned int *a3, uint64_t *a4)
{
  uint64_t v6 = a2(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))((char *)&v11 - v8, *a3, v6);
  sub_10000A844(a4);
  SFProgressContinuation.finish(with:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100537380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v5 = sub_10000A844(&qword_100970D28);
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  v4[7] = static AirDropActor.shared;
  return _swift_task_switch(sub_100537480, v6, 0);
}

uint64_t sub_100537480()
{
  sub_10000A844(&qword_100970CE0);
  SFProgressContinuation.task.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100391CE4;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  return SFProgressTask.finalValue.getter(v3, v2);
}

uint64_t sub_10053753C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_1009785B8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = sub_10000A844((uint64_t *)&unk_10097EFA0);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  sub_10024D388((uint64_t)v9, (uint64_t)v7, &qword_1009785B8);
  uint64_t v12 = a2 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_lockStateContinuation;
  swift_beginAccess();
  sub_10053B18C((uint64_t)v7, v12);
  return swift_endAccess();
}

uint64_t sub_1005376B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[24] = a4;
  v5[25] = v4;
  v5[22] = a2;
  v5[23] = a3;
  v5[21] = a1;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v5[26] = v6;
  v5[27] = *(void *)(v6 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v5[31] = v7;
  v5[32] = *(void *)(v7 - 8);
  v5[33] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDropReceive.Transfer();
  v5[34] = v8;
  v5[35] = *(void *)(v8 - 8);
  v5[36] = swift_task_alloc();
  sub_10000A844(&qword_10096CC70);
  v5[37] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v9 = static AirDropActor.shared;
  v5[38] = static AirDropActor.shared;
  return _swift_task_switch(sub_1005378B8, v9, 0);
}

uint64_t sub_1005378B8()
{
  uint64_t v1 = *(void *)(v0 + 200)
     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess();
  sub_100278C8C(v1, v0 + 56);
  sub_10000A844(&qword_10097F210);
  sub_10000A844(&qword_1009785C0);
  if (swift_dynamicCast())
  {
    uint64_t v3 = *(void *)(v0 + 184);
    uint64_t v2 = *(void *)(v0 + 192);
    sub_1002AF688((long long *)(v0 + 96), v0 + 16);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    sub_10026BB6C((void *)(v0 + 16), v4);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8))(v3, v2, v4, v5))
    {
      *(void *)(v0 + 312) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Ask open destination START", v8, 2u);
        swift_slowDealloc();
      }
      uint64_t v9 = *(void *)(v0 + 184);

      uint64_t v10 = *(void *)(v0 + 40);
      uint64_t v11 = *(void *)(v0 + 48);
      sub_10026BB6C((void *)(v0 + 16), v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v10, v11);
      uint64_t v12 = *(void *)(v0 + 288);
      uint64_t v13 = *(void *)(v0 + 296);
      uint64_t v16 = *(void *)(v0 + 264);
      uint64_t v30 = *(void *)(v0 + 280);
      uint64_t v31 = *(void *)(v0 + 272);
      uint64_t v17 = *(void *)(v0 + 256);
      uint64_t v18 = *(void *)(v0 + 216);
      uint64_t v19 = *(void *)(v0 + 192);
      uint64_t v29 = *(void *)(v0 + 248);
      uint64_t v20 = *(void *)(v0 + 176);
      uint64_t v26 = *(void *)(v0 + 208);
      uint64_t v27 = *(void *)(v0 + 184);
      uint64_t v21 = (int *)sub_10000A844((uint64_t *)&unk_100972400);
      uint64_t v22 = v21[12];
      uint64_t v23 = v21[16];
      uint64_t v28 = v16 + v21[20];
      uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
      *(void *)(v0 + 320) = v24;
      *(void *)(v0 + 328) = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v24(v16, v19, v26);
      *(void *)(v16 + v22) = v20;
      *(void *)(v16 + v23) = v27;
      uint64_t v25 = sub_10000A844(&qword_10096B2C0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v28, v13, v25);
      (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v16, enum case for SFAirDropReceive.Transfer.State.waitingForOpenDestinationResponse(_:), v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1006BE3BC(v16, v12);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v29);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v12, v31);
      return _swift_task_switch(sub_100537D18, 0, 0);
    }
    sub_10024D338(v0 + 16);
  }
  else
  {
    *(void *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    sub_10000A7E8(v0 + 96, &qword_1009785C8);
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 216) + 16))(*(void *)(v0 + 168), *(void *)(v0 + 192), *(void *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100537D18()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = swift_task_alloc();
  v0[42] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[43] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[44] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100537E20;
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[26];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_1009785D0, v2, sub_10053C358, v3, 0, 0, v6);
}

uint64_t sub_100537E20()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100537F50;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 304);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_100538094;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100537F50()
{
  uint64_t v1 = *(void *)(v0 + 304);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100537FC4, v1, 0);
}

uint64_t sub_100537FC4()
{
  sub_10000A7E8(*(void *)(v0 + 296), &qword_10096CC70);
  sub_10024D338(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100538094()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 208));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
    uint64_t v15 = *(void *)(v0 + 296);
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    v14(v4, v3, v6);
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 160) = sub_100254634(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ask open destination END {destination: %s}", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = v15;
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 296);
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 208));

    uint64_t v10 = v11;
  }
  sub_10000A7E8(v10, &qword_10096CC70);
  (*(void (**)(void, void, void))(*(void *)(v0 + 216) + 32))(*(void *)(v0 + 168), *(void *)(v0 + 240), *(void *)(v0 + 208));
  sub_10024D338(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100538310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v5[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[11] = v7;
  v5[12] = *(void *)(v7 + 64);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  uint64_t v8 = *(void *)(sub_10000A844(&qword_10096CC70) - 8);
  v5[15] = v8;
  v5[16] = *(void *)(v8 + 64);
  v5[17] = swift_task_alloc();
  sub_10000A844(&qword_10096C920);
  v5[18] = swift_task_alloc();
  v5[19] = sub_10000A844(&qword_1009785D8);
  v5[20] = swift_task_alloc();
  sub_10000A844(&qword_100978548);
  v5[21] = swift_task_alloc();
  uint64_t v9 = sub_10000A844(&qword_100978550);
  v5[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[23] = v10;
  v5[24] = *(void *)(v10 + 64);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v11 = static AirDropActor.shared;
  v5[28] = static AirDropActor.shared;
  return _swift_task_switch(sub_1005385A8, v11, 0);
}

uint64_t sub_1005385A8()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = *(void *)(v0[9] + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler)
     + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation;
  swift_beginAccess();
  sub_10024A330(v2, v1, &qword_100978548);
  uint64_t v3 = sub_10000A844(&qword_100978558);
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) == 1)
  {
    sub_10000A7E8(v0[21], &qword_100978548);
    return _swift_task_switch(sub_100538C74, 0, 0);
  }
  else
  {
    uint64_t v6 = v0[26];
    unint64_t v5 = v0[27];
    unint64_t v28 = v5;
    uint64_t v32 = v0[25];
    uint64_t v7 = v0[23];
    uint64_t v35 = v0[24];
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[22];
    uint64_t v10 = v0[17];
    uint64_t v26 = v0[18];
    uint64_t v27 = v0[15];
    uint64_t v11 = v0[11];
    uint64_t v30 = v0[10];
    uint64_t v31 = v0[14];
    uint64_t v36 = v0[9];
    uint64_t v29 = v0[8];
    uint64_t v25 = v0[7];
    SFProgressContinuation.task.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
    uint64_t v33 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32);
    uint64_t v24 = v9;
    v33(v5, v6, v9);
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v26, 1, 1, v12);
    sub_10024A330(v25, v10, &qword_10096CC70);
    unint64_t v13 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v34 = swift_allocObject();
    v0[29] = v34;
    sub_10024D388(v10, v34 + v13, &qword_10096CC70);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v32, v28, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v31, v29, v30);
    unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v15 = (v35 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (*(unsigned __int8 *)(v11 + 80) + v15 + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = swift_allocObject();
    v0[30] = v17;
    v33(v17 + v14, v32, v24);
    *(void *)(v17 + v15) = v36;
    uint64_t v18 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32);
    v0[31] = v18;
    v0[32] = (v11 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v18(v17 + v16, v31, v30);
    swift_retain();
    uint64_t v19 = (void *)swift_task_alloc();
    v0[33] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1005389C4;
    uint64_t v21 = v0[19];
    uint64_t v20 = v0[20];
    uint64_t v22 = v0[18];
    return concurrentRace<A>(priority:operation:against:)(v20, v22, &unk_1009785F0, v34, &unk_100978600, v17, v21);
  }
}

uint64_t sub_1005389C4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  sub_10000A7E8(v3, &qword_10096C920);
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(v2 + 224);
  if (v0) {
    unint64_t v5 = sub_10053911C;
  }
  else {
    unint64_t v5 = sub_100538B54;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100538B54()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[31];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  (*(void (**)(void, void))(v0[23] + 8))(v0[27], v0[22]);
  uint64_t v7 = v2 + *(int *)(v3 + 48);
  v1(v6, v2, v4);
  sub_10024D388(v7, v5, &qword_100978508);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100538C74()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = swift_task_alloc();
  v0[35] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[36] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[37] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100538D7C;
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[10];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_1009785E0, v2, sub_10053C358, v3, 0, 0, v6);
}

uint64_t sub_100538D7C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100538FD4;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 224);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_100538EAC;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100538EAC()
{
  uint64_t v1 = v0[6];
  (*(void (**)(void, void, void))(v0[11] + 32))(v0[5], v0[13], v0[10]);
  uint64_t v2 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100538FD4()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100539048, v1, 0);
}

uint64_t sub_100539048()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10053911C()
{
  (*(void (**)(void, void))(v0[23] + 8))(v0[27], v0[22]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100539208(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  v2[7] = static AirDropActor.shared;
  return _swift_task_switch(sub_100539308, 0, 0);
}

uint64_t sub_100539308()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[8] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[9] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100539410;
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[4];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_100978610, v2, sub_10053C358, v3, 0, 0, v6);
}

uint64_t sub_100539410()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_100539630;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 56);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_100539540;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100539540()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  uint64_t v5 = v4 + *(int *)(sub_10000A844(&qword_1009785D8) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  uint64_t v6 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100539630()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1005396A4, v1, 0);
}

uint64_t sub_1005396A4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100539708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a1;
  uint64_t v5 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  v4[11] = v7;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  v4[12] = static AirDropActor.shared;
  uint64_t v8 = (void *)swift_task_alloc();
  v4[13] = v8;
  uint64_t v9 = sub_10000A844(&qword_100978550);
  *uint64_t v8 = v4;
  v8[1] = sub_1005398C0;
  return SFProgressTask.finalValue.getter(v7, v9);
}

uint64_t sub_1005398C0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100539CA0;
  }
  else {
    uint64_t v3 = sub_1005399E8;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_1005399E8()
{
  uint64_t v23 = v0;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[7] + 16);
  v21(v0[8], v0[5], v0[6]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[7];
    uint64_t v3 = v0[8];
    uint64_t v20 = v0[6];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_10053BB90(&qword_100978608, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_100254634(v6, v7, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v20);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Got contact exchange request before user chose to open/move, picking default destination: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = v0[7];
    uint64_t v8 = v0[8];
    uint64_t v10 = v0[6];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v12 = v0[10];
  uint64_t v11 = v0[11];
  uint64_t v13 = v0[9];
  uint64_t v15 = v0[5];
  uint64_t v14 = v0[6];
  uint64_t v16 = v0[3];
  uint64_t v17 = v16 + *(int *)(sub_10000A844(&qword_1009785D8) + 48);
  v21(v16, v15, v14);
  sub_10053A9A0(v11, v17, _s14descr1008C9A51V15ExchangeRequestVMa);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100539CA0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100539D10()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler);
}

uint64_t sub_100539D50()
{
  uint64_t v0 = sub_1006BE258();

  return swift_deallocClassInstance();
}

uint64_t sub_100539DD4()
{
  return _s6RunnerCMa_0(0);
}

uint64_t _s6RunnerCMa_0(uint64_t a1)
{
  return sub_10000B93C(a1, qword_1009782E0);
}

uint64_t sub_100539DFC()
{
  return swift_updateClassMetadata2();
}

uint64_t _s6RunnerC19PreAcceptRunResultsVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_100978730);
}

uint64_t sub_100539E70(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100539E90, 0, 0);
}

uint64_t sub_100539E90()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + *(int *)(sub_10000A844(&qword_10096CC70) + 52));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  uint64_t v4 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v5 = sub_10000A844(&qword_10096BAF0);
  *uint64_t v3 = v0;
  v3[1] = sub_100539F74;
  uint64_t v6 = v0[2];
  return Task.value.getter(v6, v2, v4, v5, &protocol self-conformance witness table for Error);
}

uint64_t sub_100539F74()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10053A068(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10053A088, 0, 0);
}

uint64_t sub_10053A088()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v1 + *(int *)(sub_10000A844(&qword_100970C58) + 52));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  uint64_t v4 = type metadata accessor for SFAirDrop.ContactRequest();
  uint64_t v5 = sub_10000A844(&qword_10096BAF0);
  *uint64_t v3 = v0;
  v3[1] = sub_10053C354;
  uint64_t v6 = v0[2];
  return Task.value.getter(v6, v2, v4, v5, &protocol self-conformance witness table for Error);
}

void sub_10053A16C(uint64_t a1)
{
}

void sub_10053A194(uint64_t a1)
{
}

void sub_10053A1BC(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v27 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A844(a2);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969F38 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000B47C(v13, (uint64_t)qword_100978948);
  sub_10024A330(a1, (uint64_t)v12, a2);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v25 = v10;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v30 = v24;
    uint64_t v26 = a1;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v23 = v17 + 4;
    sub_10000A844(v27);
    SFAirDrop.PermissionRequest.id.getter();
    sub_10053BB90((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v19 = v7;
    uint64_t v20 = a4;
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v19);
    uint64_t v29 = sub_100254634(v18, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v20;
    swift_bridgeObjectRelease();
    sub_10000A7E8((uint64_t)v12, a2);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SDAirDropPermissionRequestTask[%s] was cancelled", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10000A7E8((uint64_t)v12, a2);
  }

  a4(0);
  sub_10000A844(&qword_10096BAF0);
  Task.cancel()();
}

void sub_10053A514(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A844(&qword_100970C48);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969F38 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000B47C(v9, (uint64_t)qword_100978948);
  sub_10024A330(a1, (uint64_t)v8, &qword_100970C48);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = a1;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v18;
    *(_DWORD *)uint64_t v13 = 136315138;
    v17[1] = v13 + 4;
    sub_10000A844((uint64_t *)&unk_10097C390);
    SFAirDrop.PermissionRequest.id.getter();
    sub_10053BB90((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v20 = sub_100254634(v14, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000A7E8((uint64_t)v8, &qword_100970C48);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "SDAirDropPermissionRequestTask[%s] was cancelled", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10000A7E8((uint64_t)v8, &qword_100970C48);
  }

  sub_10000A844(&qword_10096BAF0);
  Task.cancel()();
}

void sub_10053A85C()
{
  sub_10053A1BC(*(void *)(v0 + 16), &qword_10096CC70, &qword_10096B2C0, (void (*)(void))&type metadata accessor for SFAirDropReceive.ItemDestination);
}

void sub_10053A89C()
{
  sub_10053A1BC(*(void *)(v0 + 16), &qword_100970C58, (uint64_t *)&unk_1009723F0, (void (*)(void))&type metadata accessor for SFAirDrop.ContactRequest);
}

uint64_t sub_10053A8DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10053A93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropServerConnection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10053A9A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10053AA08()
{
  return sub_100395108(&qword_100970CE0);
}

uint64_t sub_10053AA14()
{
  return sub_10053AB84(&qword_100970CE0, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.ContactRequest, (unsigned int *)&enum case for SFAirDrop.ContactRequest.notNeeded(_:));
}

uint64_t sub_10053AA3C()
{
  return sub_100395108(&qword_100970CE0);
}

uint64_t sub_10053AA48(uint64_t a1)
{
  return sub_10053AC14(a1, &qword_100970CE0);
}

uint64_t sub_10053AA54()
{
  return sub_100394A2C(&qword_100970CE0);
}

uint64_t sub_10053AA60(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000A844(&qword_100970CE0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000A6F0;
  return sub_100537380(a1, v5, v6, v7);
}

uint64_t sub_10053AB50()
{
  return sub_100395108(&qword_100973298);
}

uint64_t sub_10053AB5C()
{
  return sub_10053AB84(&qword_100973298, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.ItemDestination, (unsigned int *)&enum case for SFAirDropReceive.ItemDestination.noItem(_:));
}

uint64_t sub_10053AB84(uint64_t *a1, uint64_t (*a2)(void), unsigned int *a3)
{
  uint64_t v7 = *(void *)(sub_10000A844(a1) - 8);
  return sub_10053727C(v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a2, a3, a1);
}

uint64_t sub_10053ABFC()
{
  return sub_100395108(&qword_100973298);
}

uint64_t sub_10053AC08(uint64_t a1)
{
  return sub_10053AC14(a1, &qword_100973298);
}

uint64_t sub_10053AC14(uint64_t a1, uint64_t *a2)
{
  return SFProgressContinuation.finish(with:)();
}

uint64_t sub_10053AC80()
{
  return sub_100394A2C(&qword_100973298);
}

uint64_t sub_10053AC8C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000A844(&qword_100973298) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000A6F0;
  return sub_100411540(a1, v5, v6, v7);
}

uint64_t sub_10053AD7C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v33 = a6;
  uint64_t v34 = a1;
  uint64_t v28 = a5;
  uint64_t v35 = a2;
  uint64_t v30 = type metadata accessor for SFAirDrop.ButtonConfiguration();
  uint64_t v27 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for SFAirDrop.DeclineAction();
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  __chkstk_darwin(v11);
  uint64_t v29 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SFAirDropReceive.Transfer();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v6 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_delegateCanAutoAccept) = 0;
  *(void *)(v6 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_nearbyAgent) = a4;
  *(void *)(v6 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler) = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v34, v17);
  sub_100278C8C(v35, (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v33, v13);
  id v21 = a4;
  id v22 = a3;
  uint64_t v23 = sub_1006C8AB0((uint64_t)v20, (uint64_t)v36, v28, (uint64_t)v16);
  void *v10 = 0x662E657261757173;
  v10[1] = 0xEB000000006C6C69;
  (*(void (**)(void *, void, uint64_t))(v27 + 104))(v10, enum case for SFAirDrop.ButtonConfiguration.symbol(_:), v30);
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  uint64_t v24 = (uint64_t)v29;
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)();
  swift_retain();
  sub_1006BE8E8(v24);
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v33, v13);
  sub_10024D338(v35);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v25(v34, v17);
  v25((uint64_t)v20, v17);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v24, v32);
  return v23;
}

uint64_t sub_10053B184(uint64_t a1)
{
  return sub_10053753C(a1, v1);
}

uint64_t sub_10053B18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_1009785B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10053B1F4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_10000A6F0;
  return _swift_task_switch(sub_100539E90, 0, 0);
}

uint64_t sub_10053B2A4()
{
  return sub_10053B71C(&qword_10096CC70, &qword_10096B2C0);
}

uint64_t sub_10053B2B8(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000A844(&qword_10096CC70) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10000A6F0;
  return sub_100539208(a1, v5);
}

uint64_t sub_10053B394()
{
  uint64_t v1 = sub_10000A844(&qword_100978550);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10053B4FC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000A844(&qword_100978550) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SFAirDropReceive.ItemDestination() - 8) + 80);
  uint64_t v9 = v7 + v8 + 8;
  uint64_t v10 = v1 + v6;
  uint64_t v11 = *(void *)(v1 + v7);
  uint64_t v12 = v1 + (v9 & ~v8);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v13;
  *uint64_t v13 = v3;
  v13[1] = sub_10000A6F0;
  return sub_100539708(a1, v10, v11, v12);
}

uint64_t sub_10053B658(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_10000A6F4;
  return _swift_task_switch(sub_100539E90, 0, 0);
}

uint64_t sub_10053B708()
{
  return sub_10053B71C(&qword_100970C58, (uint64_t *)&unk_1009723F0);
}

uint64_t sub_10053B71C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_10000A844(a1) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  uint64_t v9 = v2 + v6;
  uint64_t v10 = sub_10000A844(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();

  return _swift_deallocObject(v2, v7, v8);
}

uint64_t sub_10053B80C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000A844(&qword_100970C58) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10000A6F0;
  return sub_100534B00(a1, v5);
}

uint64_t sub_10053B8E8(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000A6F0;
  return sub_100534E58(a1, v1);
}

uint64_t sub_10053B984(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_10000A6F0;
  return _swift_task_switch(sub_10053A088, 0, 0);
}

BOOL sub_10053BA34()
{
  return MKBGetDeviceLockState() - 1 < 2;
}

uint64_t sub_10053BA5C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10053BA94()
{
  return sub_10050F8D0();
}

uint64_t sub_10053BA9C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10053BADC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F4;
  return sub_10050FAB4(a1, v4, v5, v6);
}

uint64_t sub_10053BB90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10053BBD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SFAirDropReceive.AskResponse();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10053BCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_10053BD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SFAirDropReceive.Transfer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10053BE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SFAirDropReceive.Transfer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10053BEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SFAirDropReceive.Transfer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10053BFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for SFAirDropReceive.Transfer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10053C068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10053C07C);
}

uint64_t sub_10053C07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for SFAirDropReceive.Transfer();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10053C174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10053C188);
}

uint64_t sub_10053C188(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SFAirDropReceive.AskResponse();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for SFAirDropReceive.Transfer();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_10053C28C()
{
  uint64_t result = type metadata accessor for SFAirDropReceive.AskResponse();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SFAirDropReceive.Transfer();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10053C360()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100978770);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100978770);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10053C428()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  v12[1] = sub_1002B62F0();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 0;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100448DAC((unint64_t *)&unk_100974840, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A844((uint64_t *)&unk_10096A1B0);
  sub_100442CA0((unint64_t *)&qword_100974850, (uint64_t *)&unk_10096A1B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  uint64_t v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v1 + 40) = v8;
  uint64_t v9 = nw_path_monitor_create();
  *(void *)(v1 + 48) = v9;
  *(unsigned char *)(v1 + 56) = 2;
  nw_path_monitor_set_queue(v9, v8);
  aBlock[4] = sub_10053CEA0;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10053C7A8;
  aBlock[3] = &unk_1008DEB10;
  uint64_t v10 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  nw_path_monitor_set_update_handler(v9, v10);
  _Block_release(v10);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_10053C730(NSObject *a1, uint64_t a2)
{
  uint64_t result = nw_path_get_status(a1);
  int v4 = result;
  uint64_t v5 = *(void (**)(uint64_t))(a2 + 16);
  if (v5) {
    BOOL v6 = result == 1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6 && (*(unsigned char *)(a2 + 56) & 1) == 0)
  {
    uint64_t v7 = swift_retain();
    v5(v7);
    uint64_t result = sub_1002CA430((uint64_t)v5);
  }
  *(unsigned char *)(a2 + 56) = v4 == 1;
  return result;
}

uint64_t sub_10053C7A8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10053C808()
{
  return sub_10053C9E0((uint64_t)sub_10053CE78, (uint64_t)&unk_1008DEAC0);
}

void sub_10053C828(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    if (qword_100969F30 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000B47C(v1, (uint64_t)qword_100978770);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      int v4 = "Network path monitor already started";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, v4, v3, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    nw_path_monitor_start(*(nw_path_monitor_t *)(a1 + 48));
    *(unsigned char *)(a1 + 32) = 1;
    if (qword_100969F30 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000B47C(v6, (uint64_t)qword_100978770);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      int v4 = "Network path monitor started";
      goto LABEL_10;
    }
  }
}

uint64_t sub_10053C9C0()
{
  return sub_10053C9E0((uint64_t)sub_10053CE98, (uint64_t)&unk_1008DEAE8);
}

uint64_t sub_10053C9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(v2 + 40);
  aBlock[4] = a1;
  uint64_t v17 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_100448DAC((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_100442CA0((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_10053CC60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    nw_path_monitor_cancel(*(nw_path_monitor_t *)(a1 + 48));
    *(unsigned char *)(a1 + 32) = 0;
    if (qword_100969F30 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B47C(v2, (uint64_t)qword_100978770);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      int v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v4 = 0;
      uint64_t v5 = "Network path monitor stopped";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, v5, v4, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_100969F30 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000B47C(v6, (uint64_t)qword_100978770);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      int v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v4 = 0;
      uint64_t v5 = "Network path monitor already stopped";
      goto LABEL_10;
    }
  }
}

uint64_t sub_10053CDF4()
{
  sub_1002CA430(*(void *)(v0 + 16));

  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SDPseudonymNetworkPathMonitor()
{
  return self;
}

uint64_t sub_10053CE60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 16);
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  return sub_1002CA430(v4);
}

void sub_10053CE78()
{
  sub_10053C828(v0);
}

uint64_t sub_10053CE80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10053CE90()
{
  return swift_release();
}

void sub_10053CE98()
{
  sub_10053CC60(v0);
}

uint64_t sub_10053CEA0(NSObject *a1)
{
  return sub_10053C730(a1, v1);
}

uint64_t sub_10053CEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v119 = a6;
  uint64_t v115 = a5;
  uint64_t v116 = a4;
  uint64_t v130 = a1;
  uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975078);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = &v94[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v113 = type metadata accessor for SFAirDropClient.Identifier();
  uint64_t v111 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v110 = &v94[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_10000A844(&qword_10097F260);
  __chkstk_darwin(v14 - 8);
  uint64_t v109 = &v94[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v105 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v104 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v108 = &v94[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v102 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v106 = &v94[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for Date();
  __chkstk_darwin(v18 - 8);
  uint64_t v103 = &v94[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = type metadata accessor for SFAirDropSend.Transfer();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v126 = &v94[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v127 = &v94[-v25];
  uint64_t v114 = v26;
  __chkstk_darwin(v24);
  uint64_t v28 = &v94[-v27];
  uint64_t v133 = type metadata accessor for SFAirDropSend.Request();
  uint64_t v125 = *(void *)(v133 - 8);
  uint64_t v29 = __chkstk_darwin(v133);
  uint64_t v132 = &v94[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v112 = v30;
  __chkstk_darwin(v29);
  uint64_t v32 = &v94[-v31];
  uint64_t v131 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v136 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v135 = &v94[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v128 = type metadata accessor for Logger();
  uint64_t v117 = *(void *)(v128 - 8);
  uint64_t v34 = __chkstk_darwin(v128);
  uint64_t v124 = &v94[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v107 = v35;
  __chkstk_darwin(v34);
  unint64_t v134 = &v94[-v36];
  uint64_t v37 = sub_10000A844(&qword_10096D8B8);
  __chkstk_darwin(v37 - 8);
  uint64_t v39 = (id *)&v94[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v40 = a2;
  sub_1002E5BCC(a2, (uint64_t)v39);
  uint64_t v41 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  int v42 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v39, 1, v41);
  uint64_t v129 = v28;
  uint64_t v123 = v21;
  if (v42 == 1)
  {
    uint64_t v97 = a3;
    uint64_t v98 = v20;
    uint64_t v100 = v12;
    sub_10000A7E8((uint64_t)v39, &qword_10096D8B8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {

      return sub_10053E3D8(v130, a2, 0, 0, v119, a7);
    }
    uint64_t v97 = a3;
    uint64_t v98 = v20;
    uint64_t v100 = v12;
    sub_10025AEF0((uint64_t)v39);
  }
  uint64_t v99 = a7;
  uint64_t v44 = v135;
  uint64_t v45 = v130;
  SFAirDropSend.Request.id.getter();
  SFAirDrop.TransferIdentifier.stringValue.getter();
  sub_10054D6A8(8);
  swift_bridgeObjectRelease();
  uint64_t v46 = static String._fromSubstring(_:)();
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  strcpy((char *)v138, "AirDrop.");
  BYTE1(v138[1]) = 0;
  WORD1(v138[1]) = 0;
  HIDWORD(v138[1]) = -402653184;
  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  Logger.init(subsystem:category:)();
  unint64_t v50 = *(void (**)(unsigned char *, uint64_t))(v136 + 8);
  v136 += 8;
  uint64_t v118 = v50;
  v50(v44, v131);
  uint64_t v51 = v125;
  unint64_t v52 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v125 + 16);
  uint64_t v53 = v133;
  uint64_t v122 = v125 + 16;
  uint64_t v121 = v52;
  v52(v32, v45, v133);
  swift_bridgeObjectRetain_n();
  unint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  int v56 = v55;
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v57 = v32;
    uint64_t v58 = v51;
    uint64_t v59 = swift_slowAlloc();
    uint64_t v96 = swift_slowAlloc();
    v138[0] = v96;
    *(_DWORD *)uint64_t v59 = 136315394;
    int v95 = v56;
    SFAirDropSend.Request.id.getter();
    uint64_t v60 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
    unint64_t v62 = v61;
    v118(v135, v131);
    uint64_t v137 = sub_100254634(v60, v62, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v63 = v57;
    uint64_t v64 = v53;
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v63, v53);
    *(_WORD *)(v59 + 12) = 2080;
    sub_1005438CC(&qword_10096B4F0, (void (*)(uint64_t))type metadata accessor for SDAirDropDiscoveredEndpoint);
    swift_bridgeObjectRetain();
    uint64_t v65 = Set.description.getter();
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v68 = v65;
    uint64_t v44 = v135;
    uint64_t v137 = sub_100254634(v68, v67, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v95, "Send StateMachine START %s {initialEndpoints: %s}", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v32, v53);
    swift_bridgeObjectRelease_n();
    uint64_t v64 = v53;
  }
  uint64_t v69 = v130;
  uint64_t v96 = sub_100542CAC(v130, v40);
  SFAirDropSend.Request.id.getter();
  v121(v132, v69, v64);
  static Date.now.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v101 + 104))(v106, enum case for SFAirDropSend.Transfer.State.created(_:), v102);
  (*(void (**)(unsigned char *, void, uint64_t))(v104 + 104))(v108, enum case for SFAirDrop.DisplayPriority.normal(_:), v105);
  uint64_t v70 = type metadata accessor for SFNWInterfaceType();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v109, 1, 1, v70);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v111 + 16))(v110, v119, v113);
  swift_bridgeObjectRetain();
  uint64_t v71 = v129;
  SFAirDropSend.Transfer.init(id:sendRequest:receiverName:startDate:state:displayPriority:bundleIdentifier:activeInterfaceType:presenter:)();
  v138[0] = 0;
  v138[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v138, "AirDrop Send [");
  HIBYTE(v138[1]) = -18;
  SFAirDropSend.Request.id.getter();
  sub_1005438CC(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  uint64_t v72 = v131;
  v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v73);
  swift_bridgeObjectRelease();
  v118(v44, v72);
  v74._countAndFlagsBits = 93;
  v74._object = (void *)0xE100000000000000;
  String.append(_:)(v74);
  uint64_t v136 = v138[0];
  uint64_t v131 = v138[1];
  uint64_t v75 = v123;
  uint64_t v76 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v123 + 16);
  uint64_t v77 = v98;
  v76(v127, v71, v98);
  v76(v126, v71, v77);
  v121(v132, v69, v133);
  uint64_t v78 = v117;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v117 + 16))(v124, v134, v128);
  sub_100542FEC(v97, (uint64_t)v138);
  unint64_t v79 = (*(unsigned __int8 *)(v75 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
  uint64_t v80 = v125;
  unint64_t v81 = (v114 + *(unsigned __int8 *)(v125 + 80) + v79) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
  unint64_t v82 = (v112 + *(unsigned __int8 *)(v78 + 80) + v81) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  unint64_t v83 = (v107 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = v120;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v75 + 32))(v84 + v79, v126, v77);
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v80 + 32))(v84 + v81, v132, v133);
  unint64_t v85 = v84 + v82;
  uint64_t v86 = v128;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v78 + 32))(v85, v124, v128);
  sub_100543250((uint64_t)v138, v84 + v83);
  swift_retain();
  uint64_t v87 = v77;
  uint64_t v88 = v99;
  SFProgressTask.init(_:initialProgress:operation:file:line:)();
  uint64_t v89 = (uint64_t)v135;
  uint64_t v90 = v129;
  SFAirDropSend.Transfer.id.getter();
  uint64_t v91 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  uint64_t v92 = *(void *)(v91 - 8);
  uint64_t v93 = (uint64_t)v100;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v92 + 16))(v100, v88, v91);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v93, 0, 1, v91);
  swift_beginAccess();
  sub_100466E7C(v93, v89);
  swift_endAccess();
  (*(void (**)(unsigned char *, uint64_t))(v123 + 8))(v90, v87);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v78 + 8))(v134, v86);
}

uint64_t sub_10053DE50(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v29 - v11;
  swift_beginAccess();
  uint64_t v13 = *(void *)(v1 + 72);
  if (*(void *)(v13 + 16) && (unint64_t v14 = sub_10058392C(a1), (v15 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(void *)(v13 + 56) + *(void *)(v7 + 72) * v14, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v10, v6);
    swift_endAccess();
    SFProgressTask.cancel(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  else
  {
    swift_endAccess();
    SFAirDrop.TransferIdentifier.stringValue.getter();
    sub_10054D6A8(8);
    swift_bridgeObjectRelease();
    uint64_t v17 = static String._fromSubstring(_:)();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    v33[0] = 0x2E706F7244726941;
    v33[1] = 0xE800000000000000;
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    Logger.init(subsystem:category:)();
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v33[0] = v30;
      *(_DWORD *)uint64_t v23 = 136315138;
      v29[1] = v23 + 4;
      type metadata accessor for SFAirDrop.TransferIdentifier();
      sub_1005438CC(&qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
      swift_bridgeObjectRetain();
      uint64_t v24 = Dictionary.Keys.description.getter();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      v33[4] = sub_100254634(v24, v26, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No send transfer to cancel. Current transfer IDs: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v32);
    uint64_t v27 = type metadata accessor for SFAirDropSend.Failure();
    sub_1005438CC(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104))(v28, enum case for SFAirDropSend.Failure.badRequest(_:), v27);
    return swift_willThrow();
  }
}

void *sub_10053E360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = &_swiftEmptyDictionarySingleton;
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = a5;
  type metadata accessor for SDAirDropiOSHapticsManager();
  uint64_t v6 = (void *)swift_allocObject();
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = 0;
  v5[7] = v6;
  v5[8] = &off_1008D5508;
  swift_retain();
  sub_1002B57F4();
  swift_release();
  return v5;
}

uint64_t sub_10053E3D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v102 = a5;
  uint64_t v118 = a3;
  uint64_t v119 = a4;
  uint64_t v123 = a2;
  uint64_t v109 = a1;
  uint64_t v105 = a6;
  uint64_t v6 = sub_10000A844((uint64_t *)&unk_100975078);
  __chkstk_darwin(v6 - 8);
  uint64_t v106 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for SFAirDropClient.Identifier();
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v98 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A844(&qword_10097F260);
  __chkstk_darwin(v9 - 8);
  uint64_t v96 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for SFAirDrop.DisplayPriority();
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  int v95 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v94 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  __chkstk_darwin(v13 - 8);
  uint64_t v90 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for SFAirDropSend.Transfer();
  uint64_t v117 = *(void *)(v104 - 8);
  uint64_t v15 = __chkstk_darwin(v104);
  uint64_t v103 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v114 = (char *)&v84 - v18;
  uint64_t v101 = v19;
  __chkstk_darwin(v17);
  uint64_t v116 = (char *)&v84 - v20;
  uint64_t v124 = type metadata accessor for SFAirDropSend.Request();
  uint64_t v122 = *(void *)(v124 - 8);
  uint64_t v21 = __chkstk_darwin(v124);
  uint64_t v121 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v84 - v23;
  uint64_t v25 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for Logger();
  uint64_t v113 = *(void *)(v115 - 8);
  uint64_t v29 = __chkstk_darwin(v115);
  uint64_t v111 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = v30;
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v84 - v31;
  SFAirDropSend.Request.id.getter();
  SFAirDrop.TransferIdentifier.stringValue.getter();
  sub_10054D6A8(8);
  swift_bridgeObjectRelease();
  uint64_t v33 = static String._fromSubstring(_:)();
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  uint64_t v126 = 0x2E706F7244726941;
  unint64_t v127 = 0xE800000000000000;
  v36._countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  Logger.init(subsystem:category:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v108 = v25;
  uint64_t v107 = v37;
  v37(v28, v25);
  uint64_t v38 = v122 + 16;
  uint64_t v39 = v109;
  uint64_t v110 = *(void (**)(char *))(v122 + 16);
  v110(v24);
  swift_bridgeObjectRetain_n();
  uint64_t v112 = v32;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  int v42 = v41;
  BOOL v43 = os_log_type_enabled(v40, v41);
  uint64_t v87 = v26 + 8;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    uint64_t v126 = v86;
    *(_DWORD *)uint64_t v44 = 136315394;
    SFAirDropSend.Request.id.getter();
    uint64_t v45 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
    LODWORD(v84) = v42;
    uint64_t v46 = v28;
    unint64_t v48 = v47;
    v107(v46, v108);
    uint64_t v125 = sub_100254634(v45, v48, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v24, v124);
    *(_WORD *)(v44 + 12) = 2080;
    type metadata accessor for SDAirDropDiscoveredEndpoint(0);
    sub_1005438CC(&qword_10096B4F0, (void (*)(uint64_t))type metadata accessor for SDAirDropDiscoveredEndpoint);
    swift_bridgeObjectRetain();
    uint64_t v49 = Set.description.getter();
    unint64_t v51 = v50;
    swift_bridgeObjectRelease();
    uint64_t v52 = v49;
    uint64_t v28 = v46;
    uint64_t v125 = sub_100254634(v52, v51, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v39 = v109;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v84, "Classroom Send StateMachine START %s {initialEndpoints: %s}", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v122 + 8))(v24, v124);
    swift_bridgeObjectRelease_n();
  }
  unint64_t v85 = v28;
  uint64_t v53 = v39;
  uint64_t v84 = sub_100542CAC(v39, v123);
  SFAirDropSend.Request.id.getter();
  ((void (*)(char *, uint64_t, uint64_t))v110)(v121, v39, v124);
  uint64_t v86 = v38;
  static Date.now.getter();
  (*(void (**)(char *, void, uint64_t))(v88 + 104))(v94, enum case for SFAirDropSend.Transfer.State.created(_:), v89);
  (*(void (**)(char *, void, uint64_t))(v91 + 104))(v95, enum case for SFAirDrop.DisplayPriority.normal(_:), v92);
  uint64_t v54 = type metadata accessor for SFNWInterfaceType();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v96, 1, 1, v54);
  (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v98, v102, v100);
  swift_bridgeObjectRetain();
  os_log_type_t v55 = v116;
  SFAirDropSend.Transfer.init(id:sendRequest:receiverName:startDate:state:displayPriority:bundleIdentifier:activeInterfaceType:presenter:)();
  uint64_t v126 = 0;
  unint64_t v127 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v126 = 0xD000000000000018;
  unint64_t v127 = 0x80000001007C1220;
  SFAirDropSend.Request.id.getter();
  sub_1005438CC(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  uint64_t v56 = v108;
  v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  v107(v28, v56);
  v58._countAndFlagsBits = 93;
  v58._object = (void *)0xE100000000000000;
  String.append(_:)(v58);
  uint64_t v108 = v126;
  uint64_t v107 = (void (*)(char *, uint64_t))v127;
  uint64_t v59 = v117;
  uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
  uint64_t v61 = v104;
  v60(v114, v55, v104);
  unint64_t v62 = v103;
  v60(v103, v55, v61);
  ((void (*)(char *, uint64_t, uint64_t))v110)(v121, v53, v124);
  uint64_t v63 = v113;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v111, v112, v115);
  unint64_t v64 = (*(unsigned __int8 *)(v59 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  unint64_t v65 = (v101 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v66 = v122;
  unint64_t v67 = (*(unsigned __int8 *)(v122 + 80) + v65 + 8) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
  unint64_t v68 = (v97 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v69 = (*(unsigned __int8 *)(v63 + 80) + v68 + 16) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = v120;
  (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v70 + v64, v62, v61);
  uint64_t v71 = v124;
  *(void *)(v70 + v65) = v123;
  (*(void (**)(unint64_t, char *, uint64_t))(v66 + 32))(v70 + v67, v121, v71);
  uint64_t v72 = (void *)(v70 + v68);
  uint64_t v73 = v119;
  *uint64_t v72 = v118;
  v72[1] = v73;
  unint64_t v74 = v70 + v69;
  uint64_t v75 = v113;
  uint64_t v76 = v115;
  (*(void (**)(unint64_t, char *, uint64_t))(v113 + 32))(v74, v111, v115);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v77 = v105;
  SFProgressTask.init(_:initialProgress:operation:file:line:)();
  uint64_t v78 = (uint64_t)v85;
  unint64_t v79 = v116;
  SFAirDropSend.Transfer.id.getter();
  uint64_t v80 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v82 = (uint64_t)v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v106, v77, v80);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v82, 0, 1, v80);
  swift_beginAccess();
  sub_100466E7C(v82, v78);
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v117 + 8))(v79, v61);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v112, v76);
}

uint64_t sub_10053F250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[38] = a7;
  v8[39] = a8;
  v8[36] = a5;
  v8[37] = a6;
  v8[34] = a3;
  v8[35] = a4;
  v8[32] = a1;
  v8[33] = a2;
  type metadata accessor for SFAirDropClient.Identifier();
  v8[40] = swift_task_alloc();
  sub_10000A844(&qword_10097F260);
  v8[41] = swift_task_alloc();
  type metadata accessor for SFAirDrop.DisplayPriority();
  v8[42] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDropSend.Transfer.State();
  v8[43] = v9;
  v8[44] = *(void *)(v9 - 8);
  v8[45] = swift_task_alloc();
  type metadata accessor for Date();
  v8[46] = swift_task_alloc();
  v8[47] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_100975078);
  v8[48] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v8[49] = v10;
  v8[50] = *(void *)(v10 - 8);
  v8[51] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v8[52] = v11;
  v8[53] = *(void *)(v11 - 8);
  v8[54] = swift_task_alloc();
  v8[55] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  v8[56] = v12;
  v8[57] = *(void *)(v12 - 8);
  v8[58] = swift_task_alloc();
  sub_10000A844(&qword_100970BA8);
  v8[59] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SFAirDropSend.Transfer();
  v8[60] = v13;
  v8[61] = *(void *)(v13 - 8);
  v8[62] = swift_task_alloc();
  v8[63] = swift_task_alloc();
  sub_10000A844(&qword_100978938);
  v8[64] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for SFAirDropSend.Request();
  v8[65] = v14;
  v8[66] = *(void *)(v14 - 8);
  v8[67] = swift_task_alloc();
  v8[68] = swift_task_alloc();
  v8[69] = swift_task_alloc();
  v8[70] = swift_task_alloc();
  v8[71] = swift_task_alloc();
  v8[72] = swift_task_alloc();
  v8[73] = swift_task_alloc();
  v8[74] = swift_task_alloc();
  v8[75] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SFAirDrop.TransferType();
  v8[76] = v15;
  v8[77] = *(void *)(v15 - 8);
  v8[78] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v16 = static AirDropActor.shared;
  v8[79] = static AirDropActor.shared;
  return _swift_task_switch(sub_10053F758, v16, 0);
}

uint64_t sub_10053F758()
{
  unint64_t v134 = v0;
  uint64_t v1 = v0[78];
  uint64_t v2 = v0[77];
  uint64_t v3 = v0[76];
  SFAirDropSend.Request.type.getter();
  char v4 = SFAirDrop.TransferType.isOnlyExchange.getter();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[80] = v5;
  v0[81] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  if (v4)
  {
    uint64_t v6 = v0[66];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v8 = v6 + 16;
    uint64_t v7 = v9;
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    goto LABEL_7;
  }
  uint64_t v11 = v0[66];
  uint64_t v126 = v0[65];
  uint64_t v131 = v0[75];
  uint64_t v12 = v0[37];
  uint64_t v13 = *(void *)(v0[35] + 64);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v15(0, ObjectType, v13);
  uint64_t v16 = SFAirDropSend.Request.urls.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v8 = v11 + 16;
  uint64_t v7 = v17;
  v17(v131, v12, v126);
  uint64_t v18 = v0[75];
  if (v16)
  {
    uint64_t v19 = v0[73];
    uint64_t v20 = v0[65];
    uint64_t v21 = v0[37];
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0[66] + 8);
    v22(v0[75], v20);
    v7(v19, v21, v20);
LABEL_5:
    v22(v0[73], v0[65]);
LABEL_6:
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
LABEL_7:
    v0[83] = v7;
    v0[82] = v8;
    uint64_t v123 = v0[72];
    uint64_t v23 = v0[63];
    uint64_t v119 = v23;
    uint64_t v24 = v0[60];
    uint64_t v25 = v0[61];
    uint64_t v27 = v0[58];
    uint64_t v26 = v0[59];
    uint64_t v112 = v27;
    os_log_t log = v26;
    uint64_t v28 = v0[57];
    *(void *)os_log_type_t type = v0[56];
    uint64_t v127 = v0[39];
    uint64_t v106 = v7;
    uint64_t v108 = v0[38];
    uint64_t v30 = (void *)v0[35];
    uint64_t v29 = v0[36];
    uint64_t v117 = v0[34];
    uint64_t v122 = v0[33];
    v0[84] = v10;
    ((void (*)(void))v7)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v23, v29, v24);
    uint64_t v31 = type metadata accessor for SFAirDrop.ContactInfo();
    (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v26, 1, 1, v31);
    (*(void (**)(uint64_t, uint64_t, os_log_type_t *))(v28 + 16))(v27, v108, *(os_log_type_t **)type);
    uint64_t v32 = v30[7];
    v0[85] = v32;
    uint64_t v33 = v30[8];
    v0[86] = v33;
    uint64_t v34 = v30[5];
    uint64_t v35 = (void *)v30[6];
    uint64_t v37 = (void *)v30[2];
    Swift::String v36 = (void *)v30[3];
    uint64_t v38 = (void *)v30[4];
    v0[87] = v38;
    id v39 = objc_allocWithZone((Class)_s6RunnerCMa(0));
    swift_unknownObjectRetain();
    id v40 = v36;
    swift_retain();
    id v41 = v35;
    id v42 = v37;
    id v43 = v38;
    swift_retain();
    id v44 = sub_100393618(&_swiftEmptySetSingleton, v123, v119, (uint64_t)log, v112, v32, v33, v40, v34, v41, v122, v117, v42, v43);
    v0[88] = v44;

    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    sub_100542FEC(v127, (uint64_t)(v0 + 7));
    if (v0[10])
    {
      sub_10000A844((uint64_t *)&unk_100974ED0);
      type metadata accessor for SDAirDropDiscoveredPerson();
      if (swift_dynamicCast())
      {
        uint64_t v45 = v0[23] + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropDiscoveredPerson_connectableUUID;
        id v46 = v44;
        sub_10054266C((uint64_t)v46, v45, (uint64_t)v43);

        swift_release();
        v106(v0[71], v0[37], v0[65]);
LABEL_16:
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        BOOL v51 = os_log_type_enabled(v49, v50);
        uint64_t v52 = v0[71];
        uint64_t v53 = v0[66];
        uint64_t v54 = v0[65];
        if (v51)
        {
          uint64_t v55 = v0[55];
          uint64_t v124 = v0[65];
          uint64_t v56 = v0[53];
          uint64_t v120 = v0[52];
          os_log_type_t v128 = v50;
          Swift::String v57 = (uint8_t *)swift_slowAlloc();
          v133[0] = swift_slowAlloc();
          *(_DWORD *)Swift::String v57 = 136315138;
          SFAirDropSend.Request.id.getter();
          uint64_t v58 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
          unint64_t v60 = v59;
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v120);
          v0[30] = sub_100254634(v58, v60, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
          v61(v52, v124);
          _os_log_impl((void *)&_mh_execute_header, v49, v128, "%s Starting to resolve endpoints", v57, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
          v61(v52, v54);
        }
        v0[89] = v61;
        SFAirDropSend.Request.endpointID.getter();
        unint64_t v62 = (void *)swift_task_alloc();
        v0[90] = v62;
        *unint64_t v62 = v0;
        v62[1] = sub_100540658;
        uint64_t v63 = v0[51];
        return sub_1004798F8(v63);
      }
    }
    else
    {
      sub_10000A7E8((uint64_t)(v0 + 7), &qword_100974FE0);
    }
    sub_100542FEC(v0[39], (uint64_t)(v0 + 2));
    if (v0[5])
    {
      sub_10000A844((uint64_t *)&unk_100974ED0);
      type metadata accessor for SDAirDropDiscoveredDevice();
      if (swift_dynamicCast())
      {
        uint64_t v47 = v0[31] + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropDiscoveredDevice_connectableUUID;
        id v48 = v44;
        sub_10054266C((uint64_t)v48, v47, (uint64_t)v43);

        swift_release();
      }
    }
    else
    {
      sub_10000A7E8((uint64_t)(v0 + 2), &qword_100974FE0);
    }
    v106(v0[71], v0[37], v0[65]);
    goto LABEL_16;
  }
  uint64_t v129 = v15;
  uint64_t v125 = v13;
  uint64_t v65 = v0[74];
  uint64_t v66 = v0[65];
  uint64_t v67 = v0[64];
  SFAirDropSend.Request.urlsPromise.getter();
  uint64_t v68 = sub_10000A844(&qword_100978940);
  int v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48))(v67, 1, v68);
  sub_10000A7E8(v67, &qword_100978938);
  v7(v65, v18, v66);
  uint64_t v70 = v0[75];
  uint64_t v71 = v0[74];
  uint64_t v72 = v0[73];
  uint64_t v73 = v0[66];
  uint64_t v74 = v0[65];
  uint64_t v132 = v0[37];
  if (v69 == 1)
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v22(v71, v74);
    v22(v70, v74);
    v7(v72, v132, v74);
  }
  else
  {
    uint64_t v121 = v0[73];
    uint64_t v75 = SFAirDropSend.Request.urlsMetadata.getter();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v22(v71, v74);
    v22(v70, v74);
    swift_bridgeObjectRelease();
    v7(v121, v132, v74);
    if (v75) {
      goto LABEL_5;
    }
  }
  uint64_t v76 = v0[73];
  uint64_t v77 = v0[65];
  uint64_t v78 = SFAirDropSend.Request.customPayload.getter();
  unint64_t v80 = v79;
  v22(v76, v77);
  sub_100250CB0(v78, v80);
  if (v80 >> 60 != 15) {
    goto LABEL_6;
  }
  uint64_t v81 = type metadata accessor for SFAirDropSend.Failure();
  sub_1005438CC(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v81 - 8) + 104))(v82, enum case for SFAirDropSend.Failure.badRequest(_:), v81);
  swift_willThrow();
  v7(v0[67], v0[37], v0[65]);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.default.getter();
  BOOL v85 = os_log_type_enabled(v83, v84);
  uint64_t v86 = v0[67];
  uint64_t v87 = v0[65];
  if (v85)
  {
    uint64_t v88 = v0[55];
    uint64_t v113 = v0[65];
    uint64_t v89 = v0[53];
    uint64_t v107 = v0[52];
    uint64_t v90 = swift_slowAlloc();
    uint64_t v118 = (void *)swift_slowAlloc();
    v133[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v90 = 136315394;
    loga = v83;
    SFAirDropSend.Request.id.getter();
    uint64_t v91 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
    os_log_type_t typea = v84;
    unint64_t v93 = v92;
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v88, v107);
    v0[24] = sub_100254634(v91, v93, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22(v86, v113);
    *(_WORD *)(v90 + 12) = 2112;
    swift_errorRetain();
    uint64_t v94 = _swift_stdlib_bridgeErrorToNSError();
    v0[18] = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v118 = v94;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, loga, typea, "Send StateMachine FAILED %s {error: %@}", (uint8_t *)v90, 0x16u);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    v22(v86, v87);
    swift_errorRelease();
    swift_errorRelease();
  }
  int v95 = (void (*)(uint64_t, uint64_t))v0[80];
  uint64_t v96 = v0[78];
  uint64_t v97 = v0[76];
  SFAirDropSend.Request.type.getter();
  char v98 = SFAirDrop.TransferType.isOnlyExchange.getter();
  v95(v96, v97);
  if ((v98 & 1) == 0)
  {
    uint64_t v99 = swift_getObjectType();
    v129(4, v99, v125);
  }
  uint64_t v100 = v0[55];
  uint64_t v130 = v0[48];
  uint64_t v101 = v0[45];
  uint64_t v102 = v0[44];
  uint64_t v109 = v0[43];
  os_log_t logb = (os_log_t)v0[41];
  SFAirDropSend.Transfer.id.getter();
  SFAirDropSend.Transfer.sendRequest.getter();
  SFAirDropSend.Transfer.receiverName.getter();
  SFAirDropSend.Transfer.startDate.getter();
  sub_10000A844(&qword_10096EFF8);
  SFAirDropSend.Transfer.id.getter();
  SFAirDropSend.Transfer.startDate.getter();
  SFAirDropSend.Transfer.Metrics.init(id:startDate:)();
  swift_errorRetain();
  SFAirDropSend.Failure.init(_:)();
  (*(void (**)(uint64_t, void, uint64_t))(v102 + 104))(v101, enum case for SFAirDropSend.Transfer.State.transferFailed(_:), v109);
  SFAirDropSend.Transfer.displayPriority.getter();
  SFAirDropSend.Transfer.bundleIdentifier.getter();
  uint64_t v103 = type metadata accessor for SFNWInterfaceType();
  (*(void (**)(os_log_t, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56))(logb, 1, 1, v103);
  SFAirDropSend.Transfer.presenter.getter();
  SFAirDropSend.Transfer.init(id:sendRequest:receiverName:startDate:state:displayPriority:bundleIdentifier:activeInterfaceType:presenter:)();
  swift_errorRelease();
  SFAirDropSend.Transfer.id.getter();
  uint64_t v104 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v130, 1, 1, v104);
  swift_beginAccess();
  sub_100466E7C(v130, v100);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v105 = (uint64_t (*)(void))v0[1];
  return v105();
}

uint64_t sub_100540658(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 632);
  uint64_t v5 = *(void *)(*v2 + 408);
  uint64_t v6 = *(void *)(*v2 + 400);
  uint64_t v7 = *(void *)(*v2 + 392);
  *(void *)(v3 + 728) = a1;
  *(void *)(v3 + 736) = a2;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  return _swift_task_switch(sub_1005407D0, v4, 0);
}

uint64_t sub_1005407D0()
{
  uint64_t v88 = v0;
  sub_1003BBEB8(*(void *)(v0 + 296), *(void *)(v0 + 728), *(void *)(*(void *)(v0 + 696) + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_bonjourBrowser) != 0);
  if (static Task<>.isCancelled.getter())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Transfer cancelled at resolve step", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v4 = *(void **)(v0 + 704);

    type metadata accessor for CancellationError();
    sub_1005438CC(&qword_10096CCB8, (void (*)(uint64_t))&type metadata accessor for CancellationError);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();

    goto LABEL_16;
  }
  (*(void (**)(void, void, void))(v0 + 664))(*(void *)(v0 + 560), *(void *)(v0 + 296), *(void *)(v0 + 520));
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v9 = *(void *)(v0 + 560);
  uint64_t v10 = *(void *)(v0 + 520);
  if (v7)
  {
    uint64_t v11 = *(void *)(v0 + 440);
    unint64_t v79 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v12 = *(void *)(v0 + 424);
    uint64_t v76 = *(void *)(v0 + 416);
    os_log_type_t v83 = v6;
    uint64_t v13 = swift_slowAlloc();
    v87[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    os_log_t log = v5;
    SFAirDropSend.Request.id.getter();
    uint64_t v14 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
    unint64_t v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v76);
    *(void *)(v0 + 224) = sub_100254634(v14, v16, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v79(v9, v10);
    *(_WORD *)(v13 + 12) = 2080;
    type metadata accessor for SDAirDropDiscoveredEndpoint(0);
    sub_1005438CC(&qword_10096B4F0, (void (*)(uint64_t))type metadata accessor for SDAirDropDiscoveredEndpoint);
    swift_bridgeObjectRetain();
    uint64_t v17 = Set.description.getter();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 232) = sub_100254634(v17, v19, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v83, "%s Resolved endpoints to %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    v8(v9, v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(void, void, void))(v0 + 664))(*(void *)(v0 + 552), *(void *)(v0 + 296), *(void *)(v0 + 520));
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v24 = *(void *)(v0 + 552);
  uint64_t v25 = *(void *)(v0 + 520);
  if (v22)
  {
    os_log_type_t v85 = v21;
    uint64_t v26 = *(void *)(v0 + 440);
    unint64_t v80 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v27 = *(void *)(v0 + 424);
    os_log_t v73 = *(os_log_t *)(v0 + 416);
    uint64_t v28 = swift_slowAlloc();
    v87[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    loga = v20;
    SFAirDropSend.Request.id.getter();
    uint64_t v29 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
    unint64_t v31 = v30;
    (*(void (**)(uint64_t, os_log_t))(v27 + 8))(v26, v73);
    *(void *)(v0 + 208) = sub_100254634(v29, v31, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v80(v24, v25);
    *(_WORD *)(v28 + 12) = 2080;
    type metadata accessor for SDAirDropDiscoveredEndpoint(0);
    sub_1005438CC(&qword_10096B4F0, (void (*)(uint64_t))type metadata accessor for SDAirDropDiscoveredEndpoint);
    swift_bridgeObjectRetain();
    uint64_t v32 = Set.description.getter();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 216) = sub_100254634(v32, v34, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, loga, v85, "%s Resolved backup endpoints to %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    v23(v24, v25);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v35 = *(void *)(v0 + 728);
  if (!*(void *)(v35 + 16))
  {
    id v42 = *(void **)(v0 + 704);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = type metadata accessor for SFAirDropSend.Failure();
    sub_1005438CC(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    *id v44 = 0;
    (*(void (**)(unsigned char *, void, uint64_t))(*(void *)(v43 - 8) + 104))(v44, enum case for SFAirDropSend.Failure.resolveFailure(_:), v43);
    swift_willThrow();

LABEL_16:
    uint64_t v45 = *(void *)(v0 + 688);
    id v46 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    (*(void (**)(void, void, void))(v0 + 664))(*(void *)(v0 + 536), *(void *)(v0 + 296), *(void *)(v0 + 520));
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v50 = *(void *)(v0 + 536);
    uint64_t v51 = *(void *)(v0 + 520);
    if (v49)
    {
      uint64_t v77 = v46;
      uint64_t v52 = *(void *)(v0 + 440);
      uint64_t v53 = *(void *)(v0 + 424);
      uint64_t v72 = *(void *)(v0 + 416);
      uint64_t v86 = v45;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v78 = (void *)swift_slowAlloc();
      v87[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315394;
      uint64_t v74 = v47;
      SFAirDropSend.Request.id.getter();
      uint64_t v55 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
      uint64_t v70 = v51;
      unint64_t v57 = v56;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v72);
      *(void *)(v0 + 192) = sub_100254634(v55, v57, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v77(v50, v70);
      *(_WORD *)(v54 + 12) = 2112;
      swift_errorRetain();
      uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 144) = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v78 = v58;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v74, v48, "Send StateMachine FAILED %s {error: %@}", (uint8_t *)v54, 0x16u);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v45 = v86;
      swift_slowDealloc();
    }
    else
    {

      v46(v50, v51);
      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v59 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    uint64_t v60 = *(void *)(v0 + 624);
    uint64_t v61 = *(void *)(v0 + 608);
    SFAirDropSend.Request.type.getter();
    char v62 = SFAirDrop.TransferType.isOnlyExchange.getter();
    v59(v60, v61);
    if ((v62 & 1) == 0)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(4, ObjectType, v45);
    }
    uint64_t v64 = *(void *)(v0 + 440);
    uint64_t v84 = *(void *)(v0 + 384);
    uint64_t v65 = *(void *)(v0 + 360);
    uint64_t v66 = *(void *)(v0 + 352);
    uint64_t v71 = *(void *)(v0 + 344);
    os_log_t v75 = *(os_log_t *)(v0 + 328);
    SFAirDropSend.Transfer.id.getter();
    SFAirDropSend.Transfer.sendRequest.getter();
    SFAirDropSend.Transfer.receiverName.getter();
    SFAirDropSend.Transfer.startDate.getter();
    sub_10000A844(&qword_10096EFF8);
    SFAirDropSend.Transfer.id.getter();
    SFAirDropSend.Transfer.startDate.getter();
    SFAirDropSend.Transfer.Metrics.init(id:startDate:)();
    swift_errorRetain();
    SFAirDropSend.Failure.init(_:)();
    (*(void (**)(uint64_t, void, uint64_t))(v66 + 104))(v65, enum case for SFAirDropSend.Transfer.State.transferFailed(_:), v71);
    SFAirDropSend.Transfer.displayPriority.getter();
    SFAirDropSend.Transfer.bundleIdentifier.getter();
    uint64_t v67 = type metadata accessor for SFNWInterfaceType();
    (*(void (**)(os_log_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v75, 1, 1, v67);
    SFAirDropSend.Transfer.presenter.getter();
    SFAirDropSend.Transfer.init(id:sendRequest:receiverName:startDate:state:displayPriority:bundleIdentifier:activeInterfaceType:presenter:)();
    swift_errorRelease();
    SFAirDropSend.Transfer.id.getter();
    uint64_t v68 = sub_10000A844((uint64_t *)&unk_10096C7C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v84, 1, 1, v68);
    swift_beginAccess();
    sub_100466E7C(v84, v64);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v69 = *(uint64_t (**)(void))(v0 + 8);
    return v69();
  }
  uint64_t v36 = *(void *)(v0 + 736);
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  uint64_t v37 = *(void *)(v0 + 152);
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)(v0 + 160) = sub_1006CC3B0(v35, v37);
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  uint64_t v38 = *(void *)(v0 + 168);
  swift_bridgeObjectRetain();
  swift_retain();
  *(void *)(v0 + 176) = sub_1006CC3B0(v36, v38);
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 744) = v39;
  *id v39 = v0;
  v39[1] = sub_10054172C;
  uint64_t v40 = *(void *)(v0 + 496);
  return sub_100374050(v40);
}

uint64_t sub_10054172C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 632);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054183C, v1, 0);
}

uint64_t sub_10054183C()
{
  uint64_t v27 = v0;
  (*(void (**)(void, void, void))(v0 + 664))(*(void *)(v0 + 544), *(void *)(v0 + 296), *(void *)(v0 + 520));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v22 = *(void *)(v0 + 544);
    uint64_t v24 = *(void *)(v0 + 520);
    uint64_t v3 = *(void *)(v0 + 440);
    uint64_t v4 = *(void *)(v0 + 424);
    uint64_t v23 = *(void *)(v0 + 416);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    SFAirDropSend.Request.id.getter();
    uint64_t v6 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
    unint64_t v8 = v7;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v23);
    *(void *)(v0 + 200) = sub_100254634(v6, v8, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v25(v22, v24);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Send StateMachine END %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    uint64_t v10 = *(void *)(v0 + 544);
    uint64_t v11 = *(void *)(v0 + 520);

    v9(v10, v11);
  }
  uint64_t v12 = *(void **)(v0 + 704);
  uint64_t v13 = *(void *)(v0 + 488);
  uint64_t v14 = *(void *)(v0 + 496);
  uint64_t v15 = *(void *)(v0 + 480);
  uint64_t v16 = *(void *)(v0 + 440);
  uint64_t v17 = *(void *)(v0 + 384);
  uint64_t v18 = *(void *)(v0 + 256);
  *(unsigned char *)(v0 + 752) = 1;
  CurrentValueSubject.send(completion:)();
  sub_100322B14();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v18, v14, v15);
  SFAirDropSend.Transfer.id.getter();
  uint64_t v19 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v17, 1, 1, v19);
  swift_beginAccess();
  sub_100466E7C(v17, v16);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_100541CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = v16;
  v8[15] = v17;
  v8[12] = a7;
  v8[13] = a8;
  v8[10] = a5;
  v8[11] = a6;
  v8[8] = a3;
  v8[9] = a4;
  v8[6] = a1;
  v8[7] = a2;
  sub_10000A844((uint64_t *)&unk_100975078);
  v8[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v8[17] = v9;
  v8[18] = *(void *)(v9 - 8);
  v8[19] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v8[20] = v10;
  v8[21] = *(void *)(v10 - 8);
  v8[22] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDropSend.Transfer();
  v8[23] = v11;
  v8[24] = *(void *)(v11 - 8);
  v8[25] = swift_task_alloc();
  v8[26] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDropSend.Request();
  v8[27] = v12;
  v8[28] = *(void *)(v12 - 8);
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v13 = static AirDropActor.shared;
  v8[31] = static AirDropActor.shared;
  return _swift_task_switch(sub_100541F18, v13, 0);
}

uint64_t sub_100541F18()
{
  uint64_t v1 = v0[28];
  uint64_t v18 = v0[30];
  uint64_t v19 = v0[27];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[21];
  uint64_t v22 = v0[22];
  uint64_t v23 = v0[20];
  uint64_t v20 = v0[23];
  uint64_t v21 = v0[15];
  uint64_t v25 = v0[14];
  uint64_t v5 = v0[12];
  uint64_t v29 = v0[13];
  uint64_t v27 = (void *)v0[11];
  uint64_t v6 = (void *)v0[9];
  uint64_t v17 = v0[10];
  uint64_t v26 = v0[8];
  uint64_t v28 = v0[7];
  uint64_t v7 = v6[7];
  uint64_t v8 = v6[8];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void, uint64_t, uint64_t))(v8 + 16))(0, ObjectType, v8);
  uint64_t v10 = (void *)v6[2];
  uint64_t v24 = (void *)v6[3];
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v0[32] = v11;
  v0[33] = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v18, v5, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v17, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v22, v21, v23);
  objc_allocWithZone((Class)_s15ClassroomRunnerCMa_0());
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  id v12 = v10;
  swift_bridgeObjectRetain();
  id v13 = v24;
  v0[34] = sub_10065D0BC(v27, v13, v18, v29, v25, v2, v7, v8, v28, v26, v12, v22);

  swift_release();
  swift_unknownObjectRelease();

  uint64_t v14 = (void *)swift_task_alloc();
  v0[35] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100542164;
  uint64_t v15 = v0[25];
  return sub_10065729C(v15);
}

uint64_t sub_100542164()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 248);
  swift_task_dealloc();
  return _swift_task_switch(sub_100542274, v1, 0);
}

uint64_t sub_100542274()
{
  uint64_t v27 = v0;
  (*(void (**)(void, void, void))(v0 + 256))(*(void *)(v0 + 232), *(void *)(v0 + 96), *(void *)(v0 + 216));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v23 = *(void *)(v0 + 136);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    SFAirDropSend.Request.id.getter();
    uint64_t v7 = SFAirDrop.TransferIdentifier.shortIdentifier.getter();
    unint64_t v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v23);
    *(void *)(v0 + 40) = sub_100254634(v7, v9, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v24, v25);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Send StateMachine END %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 216);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  id v13 = *(void **)(v0 + 272);
  uint64_t v14 = *(void *)(v0 + 200);
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 152);
  uint64_t v18 = *(void *)(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 48);
  *(unsigned char *)(v0 + 288) = 1;
  CurrentValueSubject.send(completion:)();
  sub_100322B14();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v19, v14, v16);
  SFAirDropSend.Transfer.id.getter();
  uint64_t v20 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 1, 1, v20);
  swift_beginAccess();
  sub_100466E7C(v18, v17);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

id *sub_1005425C4()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100542614()
{
  sub_1005425C4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SDAirDropSendStateMachine()
{
  return self;
}

uint64_t sub_10054266C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v29 - v11;
  id v13 = (uint64_t *)(a3 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_transferringConnectables);
  swift_beginAccess();
  uint64_t v14 = *v13;
  swift_bridgeObjectRetain();
  char v15 = sub_10057BC0C(a2, v14);
  uint64_t result = swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v34 = a1;
    if (qword_100969E30 != -1) {
      swift_once();
    }
    uint64_t v33 = a3;
    uint64_t v17 = type metadata accessor for Logger();
    sub_10000B47C(v17, (uint64_t)qword_100974DB0);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v32(v12, a2, v6);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v36[0] = v31;
      uint64_t v30 = v20;
      *(_DWORD *)uint64_t v20 = 136315138;
      v29[1] = v20 + 4;
      sub_1005438CC((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = sub_100254634(v21, v22, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
      v23(v12, v6);
      uint64_t v24 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Adding delegate for connectable: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
      v25(v12, v6);
      uint64_t v24 = v25;
    }

    v32(v10, a2, v6);
    uint64_t v26 = (uint64_t *)(v33 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_delegateByConnectableID);
    swift_beginAccess();
    uint64_t v27 = v34;
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v35 = *v26;
    *uint64_t v26 = 0x8000000000000000;
    sub_100542A38(v27, (uint64_t)v10, isUniquelyReferenced_nonNull_native, &v35);
    *uint64_t v26 = v35;
    swift_bridgeObjectRelease();
    v24(v10, v6);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_100542A38(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*a4;
  unint64_t v14 = sub_100583A00(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = (void *)*a4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t *v21 = a1;
      v21[1] = (uint64_t)&off_1008D7F90;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10058E064();
    goto LABEL_7;
  }
  sub_100588264(v17, a3 & 1);
  unint64_t v23 = sub_100583A00(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*a4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100542BE8(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100542BE8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v11 = (void *)(a4[7] + 16 * a1);
  *uint64_t v11 = a3;
  v11[1] = &off_1008D7F90;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

uint64_t sub_100542CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000A844(&qword_10096D8B8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002E5BCC(a2, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000A7E8((uint64_t)v5, &qword_10096D8B8);
    if (qword_100969C50 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000B47C(v10, (uint64_t)qword_100994540);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      BOOL v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)BOOL v13 = 136315138;
      sub_1005438CC(&qword_10096B4F0, (void (*)(uint64_t))type metadata accessor for SDAirDropDiscoveredEndpoint);
      swift_bridgeObjectRetain();
      uint64_t v14 = Set.description.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_100254634(v14, v16, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Could not find endpoint. Current endpoints: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  else
  {
    sub_10025AF4C((uint64_t)v5, (uint64_t)v9);
    uint64_t v17 = sub_1003DEDDC();
    sub_10025AEF0((uint64_t)v9);
  }
  return v17;
}

uint64_t sub_100542FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_100974FE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100543054()
{
  uint64_t v1 = type metadata accessor for SFAirDropSend.Transfer();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v15 = v1;
  uint64_t v16 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v14 = type metadata accessor for SFAirDropSend.Request();
  uint64_t v4 = *(void *)(v14 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (((v16 + 24) & ~v16) + v3 + v5) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v6 + v7 + v10) & ~v10;
  unint64_t v12 = (*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v16 + 24) & ~v16), v15);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v14);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v8);
  if (*(void *)(v0 + v12 + 24)) {
    sub_10024D338(v0 + v12);
  }

  return _swift_deallocObject(v0, v12 + 40, v16 | v5 | v10 | 7);
}

uint64_t sub_100543250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_100974FE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005432B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v4;
  uint64_t v9 = *(void *)(type metadata accessor for SFAirDropSend.Transfer() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(type metadata accessor for SFAirDropSend.Request() - 8);
  unint64_t v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v16 = (v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = *(void *)(v3 + 16);
  uint64_t v18 = v3 + v10;
  uint64_t v19 = v3 + v13;
  uint64_t v20 = v3 + v16;
  uint64_t v21 = v3 + ((*(void *)(v15 + 64) + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v22;
  *unint64_t v22 = v7;
  v22[1] = sub_10000A6F0;
  return sub_10053F250(a1, a2, a3, v17, v18, v19, v20, v21);
}

uint64_t sub_1005434B4()
{
  uint64_t v17 = type metadata accessor for SFAirDropSend.Transfer();
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  unint64_t v13 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = type metadata accessor for SFAirDropSend.Request();
  uint64_t v4 = *(void *)(v16 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v13 + v5 + 8) & ~v5;
  unint64_t v7 = (*(void *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v15 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v7 + v9 + 16) & ~v9;
  uint64_t v14 = v10 + *(void *)(v8 + 64);
  uint64_t v11 = v2 | v5 | v9 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v15);

  return _swift_deallocObject(v0, v14, v11);
}

uint64_t sub_1005436C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v4;
  uint64_t v8 = *(void *)(type metadata accessor for SFAirDropSend.Transfer() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(type metadata accessor for SFAirDropSend.Request() - 8);
  unint64_t v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v13 = (*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v3 + 16);
  uint64_t v15 = *(void *)(v3 + v10);
  uint64_t v16 = *(void *)(v3 + v13);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v17;
  *uint64_t v17 = v6;
  v17[1] = sub_10000A6F4;
  return sub_100541CA0(a1, a2, a3, v14, v3 + v9, v15, v3 + v12, v16);
}

uint64_t sub_1005438CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100543914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[32] = a5;
  v6[33] = v5;
  v6[30] = a3;
  v6[31] = a4;
  v6[28] = a1;
  v6[29] = a2;
  sub_10000A844(&qword_10096C920);
  v6[34] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v6[35] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[36] = v8;
  v6[37] = *(void *)(v8 + 64);
  v6[38] = swift_task_alloc();
  v6[39] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDropReceive.AskResponse();
  v6[40] = v9;
  v6[41] = *(void *)(v9 - 8);
  v6[42] = swift_task_alloc();
  v6[43] = swift_task_alloc();
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  sub_10000A844(&qword_10096C908);
  v6[46] = swift_task_alloc();
  uint64_t v10 = sub_10000A844(&qword_10096BBA8);
  v6[47] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[48] = v11;
  v6[49] = *(void *)(v11 + 64);
  v6[50] = swift_task_alloc();
  v6[51] = swift_task_alloc();
  v6[52] = swift_task_alloc();
  uint64_t v12 = sub_10000A844(&qword_100970918);
  v6[53] = v12;
  v6[54] = *(void *)(v12 - 8);
  v6[55] = swift_task_alloc();
  sub_10000A844(&qword_10097F260);
  v6[56] = swift_task_alloc();
  sub_10000A844(&qword_1009709E0);
  v6[57] = swift_task_alloc();
  sub_10000A844(&qword_100978668);
  v6[58] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SFAirDropReceive.AskRequest();
  v6[59] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v6[60] = v14;
  v6[61] = *(void *)(v14 + 64);
  v6[62] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SFAirDrop.DisplayPriority();
  v6[63] = v15;
  v6[64] = *(void *)(v15 - 8);
  v6[65] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v6[66] = v16;
  v6[67] = *(void *)(v16 - 8);
  v6[68] = swift_task_alloc();
  type metadata accessor for UUID();
  v6[69] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for SFAirDropReceive.Transfer();
  v6[70] = v17;
  v6[71] = *(void *)(v17 - 8);
  v6[72] = swift_task_alloc();
  v6[73] = swift_task_alloc();
  v6[74] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for SFPlatform();
  v6[75] = v18;
  v6[76] = *(void *)(v18 - 8);
  v6[77] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for SFAirDropClient.Identifier();
  v6[78] = v19;
  v6[79] = *(void *)(v19 - 8);
  v6[80] = swift_task_alloc();
  v6[81] = swift_task_alloc();
  uint64_t v20 = type metadata accessor for Date();
  v6[82] = v20;
  v6[83] = *(void *)(v20 - 8);
  v6[84] = swift_task_alloc();
  v6[85] = swift_task_alloc();
  uint64_t v21 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v6[86] = v21;
  v6[87] = *(void *)(v21 - 8);
  v6[88] = swift_task_alloc();
  uint64_t v22 = type metadata accessor for Logger();
  v6[89] = v22;
  v6[90] = *(void *)(v22 - 8);
  v6[91] = swift_task_alloc();
  v6[92] = swift_task_alloc();
  v6[93] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v23 = static AirDropActor.shared;
  v6[94] = static AirDropActor.shared;
  return _swift_task_switch(sub_100544050, v23, 0);
}

uint64_t sub_100544050()
{
  uint64_t v1 = v0[88];
  uint64_t v2 = v0[87];
  uint64_t v3 = v0[86];
  SFAirDropReceive.AskRequest.id.getter();
  SFAirDrop.TransferIdentifier.stringValue.getter();
  sub_10054D6A8(8);
  swift_bridgeObjectRelease();
  uint64_t v4 = static String._fromSubstring(_:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  static Date.now.getter();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ClassroomReceive StateMachine PreChecks START", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[95] = Strong;
  if (Strong)
  {
    uint64_t v45 = v0[84];
    uint64_t v12 = v0[83];
    uint64_t v46 = v0[82];
    uint64_t v47 = v0[85];
    uint64_t v42 = v0[81];
    uint64_t v58 = v0[80];
    uint64_t v13 = v0[79];
    uint64_t v59 = v0[78];
    uint64_t v14 = v0[77];
    uint64_t v15 = v0[76];
    uint64_t v41 = v0[75];
    uint64_t v16 = v0[67];
    uint64_t v43 = v0[68];
    uint64_t v44 = v0[66];
    uint64_t v17 = v0[64];
    uint64_t v48 = v0[65];
    uint64_t v49 = v0[63];
    uint64_t v18 = v0[60];
    uint64_t v52 = v0[62];
    uint64_t v53 = v0[59];
    uint64_t v55 = v0[58];
    uint64_t v56 = v0[57];
    uint64_t v57 = v0[56];
    uint64_t v54 = v0[40];
    uint64_t v50 = v0[30];
    uint64_t v51 = v0[41];
    uint64_t v19 = *(void *)(v0[33] + 56);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(3, ObjectType, v19);
    static SFPlatform.iOS.getter();
    char v21 = static SFPlatform.isPlatform(_:)();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v41);
    uint64_t v22 = (unsigned int *)&enum case for SFAirDropClient.Identifier.airdropUI(_:);
    if ((v21 & 1) == 0) {
      uint64_t v22 = (unsigned int *)&enum case for SFAirDropClient.Identifier.daemon(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v42, *v22, v59);
    UUID.init()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v45, v47, v46);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v43, enum case for SFAirDropReceive.Transfer.State.created(_:), v44);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v48, enum case for SFAirDrop.DisplayPriority.normal(_:), v49);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v0[96] = v23;
    v0[97] = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v23(v52, v50, v53);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v55, 1, 1, v54);
    uint64_t v24 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v56, 1, 1, v24);
    uint64_t v25 = type metadata accessor for SFNWInterfaceType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v57, 1, 1, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v58, v42, v59);
    SFAirDropReceive.Transfer.init(receiveID:startDate:state:displayPriority:askRequest:isPreviewSensitive:askResponse:didAutoAccept:cancelAction:activeInterfaceType:presenter:)();
    type metadata accessor for SDAirDropContentHandlerFactory();
    uint64_t v26 = (void *)swift_task_alloc();
    v0[98] = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_100544830;
    uint64_t v27 = v0[74];
    return sub_1005ACA28((uint64_t)(v0 + 7), v27);
  }
  else
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "ClassroomReceive StateMachine PreChecks FAILED. Delegate is nil - returning .error", v31, 2u);
      swift_slowDealloc();
    }
    uint64_t v32 = v0[93];
    uint64_t v33 = v0[90];
    uint64_t v34 = v0[89];
    uint64_t v35 = v0[85];
    uint64_t v36 = v0[83];
    uint64_t v37 = v0[82];
    uint64_t v38 = v0[41];
    uint64_t v60 = v0[40];
    uint64_t v39 = v0[28];

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    (*(void (**)(uint64_t, void, uint64_t))(v38 + 104))(v39, enum case for SFAirDropReceive.AskResponse.error(_:), v60);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = (uint64_t (*)(void))v0[1];
    return v40();
  }
}

uint64_t sub_100544830()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 752);
  swift_task_dealloc();
  return _swift_task_switch(sub_100544940, v1, 0);
}

uint64_t sub_100544940()
{
  uint64_t v1 = (long long *)(v0 + 7);
  if (v0[10])
  {
    uint64_t v31 = v0[93];
    uint64_t v2 = v0[92];
    uint64_t v33 = v2;
    uint64_t v3 = v0[90];
    uint64_t v44 = v0[91];
    uint64_t v4 = v0[89];
    uint64_t v5 = v0[74];
    uint64_t v6 = v0[73];
    uint64_t v38 = v0[72];
    uint64_t v7 = v0[71];
    uint64_t v8 = v0[70];
    uint64_t v39 = v0[33];
    uint64_t v36 = v0[31];
    uint64_t v37 = v0[32];
    uint64_t v35 = (void *)v0[29];
    sub_1002AF688(v1, (uint64_t)(v0 + 2));
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v34(v6, v5, v8);
    sub_100278C8C((uint64_t)(v0 + 2), (uint64_t)(v0 + 12));
    uint64_t v40 = *(void **)(v39 + 32);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v32(v2, v31, v4);
    _s15ClassroomRunnerCMa();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_classroomHandler) = v35;
    uint64_t v10 = (void *)(v9 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_recordID);
    void *v10 = v36;
    v10[1] = v37;
    v34(v38, v6, v8);
    sub_100278C8C((uint64_t)(v0 + 12), (uint64_t)(v0 + 17));
    v32(v44, v2, v4);
    id v11 = v35;
    swift_bridgeObjectRetain();
    id v12 = v40;
    uint64_t v13 = sub_1006C8AB0(v38, (uint64_t)(v0 + 17), v12, v44);
    v0[99] = v13;

    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v0[100] = v14;
    v0[101] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v14(v33, v4);
    sub_10024D338((uint64_t)(v0 + 12));
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v0[102] = v15;
    v0[103] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v15(v6, v8);
    v0[25] = *(void *)(v13 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_subject);
    swift_retain();
    sub_10000A844(&qword_10097F1A0);
    sub_10054E1CC();
    SFNoThrowAsyncSequence.init<A>(_:)();
    uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100970910 + dword_100970910);
    uint64_t v16 = (void *)swift_task_alloc();
    v0[104] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100544FA8;
    uint64_t v17 = v0[74];
    uint64_t v18 = v0[55];
    return v49(v17, v18);
  }
  else
  {
    sub_10000A7E8((uint64_t)v1, &qword_100978A28);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "ClassroomReceive StateMachine PreChecks FAILED. Mixed types - returning .mixedTypes", v22, 2u);
      swift_slowDealloc();
    }
    uint64_t v23 = v0[90];
    uint64_t v48 = v0[89];
    uint64_t v50 = v0[93];
    uint64_t v45 = v0[85];
    uint64_t v24 = v0[83];
    uint64_t v42 = v0[81];
    uint64_t v43 = v0[82];
    uint64_t v25 = v0[79];
    uint64_t v41 = v0[78];
    uint64_t v26 = v0[74];
    uint64_t v27 = v0[71];
    uint64_t v28 = v0[70];
    uint64_t v29 = v0[41];
    uint64_t v46 = v0[28];
    uint64_t v47 = v0[40];

    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v42, v41);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v45, v43);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v50, v48);
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v46, enum case for SFAirDropReceive.AskResponse.mixedTypes(_:), v47);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v30 = (uint64_t (*)(void))v0[1];
    return v30();
  }
}

uint64_t sub_100544FA8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 840) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 752);
  if (v1)
  {
    uint64_t v6 = sub_10054643C;
  }
  else
  {
    *(unsigned char *)(v4 + 888) = a1 & 1;
    uint64_t v6 = sub_1005450E8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1005450E8()
{
  uint64_t v172 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 888);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v170 = v0 + 16;
  if (v1 != 1)
  {
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v17, "ClassroomReceive StateMachine PreChecks FAILED. Delegate.shouldStart returned false - returning .decline", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v135 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v164 = *(void (**)(uint64_t, uint64_t))(v0 + 800);
    uint64_t v156 = *(void *)(v0 + 712);
    uint64_t v160 = *(void *)(v0 + 744);
    uint64_t v19 = *(void *)(v0 + 664);
    uint64_t v141 = *(void *)(v0 + 656);
    uint64_t v145 = *(void *)(v0 + 680);
    uint64_t v20 = *(void *)(v0 + 632);
    uint64_t v130 = *(void *)(v0 + 624);
    uint64_t v133 = *(void *)(v0 + 648);
    uint64_t v123 = *(void *)(v0 + 560);
    uint64_t v126 = *(void *)(v0 + 592);
    uint64_t v21 = *(void *)(v0 + 432);
    uint64_t v22 = *(void *)(v0 + 440);
    uint64_t v23 = *(void *)(v0 + 424);
    uint64_t v24 = *(void *)(v0 + 328);
    uint64_t v152 = *(void *)(v0 + 320);
    uint64_t v148 = *(void *)(v0 + 224);

    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    sub_10024D338(v170);
    v135(v126, v123);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v133, v130);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v145, v141);
    v164(v160, v156);
    (*(void (**)(uint64_t, void, uint64_t))(v24 + 104))(v148, enum case for SFAirDropReceive.AskResponse.decline(_:), v152);
    goto LABEL_16;
  }
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ClassroomReceive StateMachine PreChecks END", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 232);

  uint64_t v6 = (uint64_t *)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (!*(void *)(v7 + 16))
  {
    uint64_t v25 = *(void *)(v0 + 368);
    uint64_t v26 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
LABEL_13:
    sub_10000A7E8(*(void *)(v0 + 368), &qword_10096C908);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing transfer continuation for classroom transfer", v30, 2u);
      swift_slowDealloc();
    }
    uint64_t v136 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
    uint64_t v165 = *(void (**)(uint64_t, uint64_t))(v0 + 800);
    uint64_t v157 = *(void *)(v0 + 712);
    uint64_t v161 = *(void *)(v0 + 744);
    uint64_t v31 = *(void *)(v0 + 664);
    uint64_t v142 = *(void *)(v0 + 656);
    uint64_t v146 = *(void *)(v0 + 680);
    uint64_t v32 = *(void *)(v0 + 632);
    uint64_t v131 = *(void *)(v0 + 624);
    uint64_t v134 = *(void *)(v0 + 648);
    uint64_t v124 = *(void *)(v0 + 560);
    uint64_t v127 = *(void *)(v0 + 592);
    uint64_t v33 = *(void *)(v0 + 432);
    uint64_t v34 = *(void *)(v0 + 440);
    uint64_t v35 = *(void *)(v0 + 424);
    uint64_t v36 = *(void *)(v0 + 328);
    uint64_t v153 = *(void *)(v0 + 320);
    uint64_t v149 = *(void *)(v0 + 224);

    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    sub_10024D338(v170);
    v136(v127, v124);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v134, v131);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v146, v142);
    v165(v161, v157);
    (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v149, enum case for SFAirDropReceive.AskResponse.error(_:), v153);
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1005838BC(v9, v8);
  uint64_t v11 = *(void *)(v0 + 368);
  if (v12)
  {
    uint64_t v13 = v10;
    uint64_t v14 = *(void *)(v7 + 56);
    uint64_t v15 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
    uint64_t v16 = *(void *)(v15 - 8);
    sub_10054EC94(v14 + *(void *)(v16 + 72) * v13, v11, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
  }
  else
  {
    uint64_t v15 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
  }
  uint64_t v27 = *(void *)(v0 + 368);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v27, 1, v15) == 1) {
    goto LABEL_13;
  }
  uint64_t v40 = *(void *)(v0 + 408);
  uint64_t v39 = *(void *)(v0 + 416);
  uint64_t v42 = *(void *)(v0 + 376);
  uint64_t v41 = *(void *)(v0 + 384);
  uint64_t v43 = *(void *)(v0 + 368);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
  *(void *)(v0 + 848) = v44;
  *(void *)(v0 + 856) = (v41 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v44(v40, v43, v42);
  sub_10054E748(v43, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32);
  *(void *)(v0 + 864) = v45;
  *(void *)(v0 + 872) = (v41 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v45(v39, v40, v42);
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "ClassroomReceive StateMachine PreAccept START", v48, 2u);
    swift_slowDealloc();
  }

  if (SFAirDropReceive.AskRequest.canAutoAccept.getter())
  {
    uint64_t v49 = *(void *)(v0 + 360);
    uint64_t v51 = *(void *)(v0 + 320);
    uint64_t v50 = *(void *)(v0 + 328);
    uint64_t v53 = *(void *)(v0 + 280);
    uint64_t v52 = *(void *)(v0 + 288);
    sub_10000A844(&qword_10096C950);
    (*(void (**)(uint64_t, void, uint64_t))(v52 + 104))(v49, enum case for SFAirDropReceive.ItemDestination.default(_:), v53);
    SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)();
    LODWORD(v52) = enum case for SFAirDropReceive.AskResponse.accept(_:);
    (*(void (**)(uint64_t, void, uint64_t))(v50 + 104))(v49, enum case for SFAirDropReceive.AskResponse.accept(_:), v51);
    unint64_t v166 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 328) + 16);
    v166(*(void *)(v0 + 352), *(void *)(v0 + 360), *(void *)(v0 + 320));
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = *(void *)(v0 + 352);
    uint64_t v59 = *(void *)(v0 + 320);
    uint64_t v58 = *(void *)(v0 + 328);
    int v168 = v52;
    if (v56)
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      v171[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136315138;
      sub_10054F354(&qword_100978510, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskResponse);
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 216) = sub_100254634(v61, v62, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v63(v57, v59);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "ClassroomReceive StateMachine PreAccept END {response: %s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v63(v57, v59);
    }
    uint64_t v66 = *(void *)(v0 + 344);
    uint64_t v68 = *(void *)(v0 + 320);
    uint64_t v67 = *(void *)(v0 + 328);
    v166(v66, *(void *)(v0 + 360), v68);
    int v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 88))(v66, v68);
    uint64_t v70 = *(void *)(v0 + 344);
    uint64_t v71 = *(void *)(v0 + 320);
    if (v69 == v168)
    {
      uint64_t v169 = v63;
      uint64_t v72 = *(void *)(v0 + 304);
      unint64_t v73 = *(void *)(v0 + 312);
      uint64_t v74 = *(void *)(v0 + 280);
      uint64_t v75 = *(void *)(v0 + 288);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 328) + 96))(v70, v71);
      uint64_t v76 = v70 + *(int *)(sub_10000A844(&qword_10096C950) + 48);
      unint64_t v154 = *(void (**)(unint64_t, uint64_t, uint64_t))(v75 + 32);
      v154(v73, v70, v74);
      uint64_t v77 = type metadata accessor for SFAirDropReceive.AcceptContext();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v77 - 8) + 8))(v76, v77);
      (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v72, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v74);
      sub_10054F354(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
      LOBYTE(v76) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v78(v72, v74);
      if ((v76 & 1) == 0)
      {
        unint64_t v143 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 864);
        uint64_t v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 848);
        uint64_t v139 = *(void *)(v0 + 792);
        uint64_t v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 768);
        uint64_t v159 = *(void *)(v0 + 496);
        uint64_t v128 = *(void *)(v0 + 480);
        uint64_t v167 = *(void *)(v0 + 472);
        uint64_t v109 = *(void *)(v0 + 416);
        uint64_t v89 = *(void *)(v0 + 400);
        uint64_t v121 = *(void *)(v0 + 392);
        uint64_t v90 = *(void *)(v0 + 376);
        uint64_t v115 = *(void *)(v0 + 384);
        uint64_t v112 = v90;
        uint64_t v91 = *(void *)(v0 + 304);
        uint64_t v162 = *(void *)(v0 + 312);
        uint64_t v92 = *(void *)(v0 + 288);
        uint64_t v119 = *(void *)(v0 + 296);
        uint64_t v93 = *(void *)(v0 + 272);
        uint64_t v94 = *(void *)(v0 + 280);
        uint64_t v137 = v93;
        uint64_t v150 = v78;
        uint64_t v95 = *(void *)(v0 + 240);
        uint64_t v88 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v93, 1, 1, v88);
        v110(v89, v109, v90);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v91, v162, v94);
        v117(v159, v95, v167);
        unint64_t v96 = (*(unsigned __int8 *)(v115 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
        unint64_t v97 = (v121 + *(unsigned __int8 *)(v92 + 80) + v96) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
        unint64_t v98 = (v119 + *(unsigned __int8 *)(v128 + 80) + v97) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
        uint64_t v99 = swift_allocObject();
        *(void *)(v99 + 16) = v139;
        v143(v99 + v96, v89, v112);
        v154(v99 + v97, v91, v94);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v128 + 32))(v99 + v98, v159, v167);
        _s10BaseRunnerC11FinishTokenVMa(0);
        swift_retain();
        uint64_t v158 = static Task<>.noThrow(priority:operation:)();
        swift_release();
        sub_10000A7E8(v137, &qword_10096C920);
        v150(v162, v94);
LABEL_37:
        uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
        uint64_t v163 = *(void (**)(uint64_t, uint64_t))(v0 + 800);
        uint64_t v155 = *(void *)(v0 + 744);
        uint64_t v147 = *(void *)(v0 + 680);
        uint64_t v151 = *(void *)(v0 + 712);
        uint64_t v100 = *(void *)(v0 + 664);
        uint64_t v144 = *(void *)(v0 + 656);
        uint64_t v101 = *(void *)(v0 + 632);
        uint64_t v122 = *(void *)(v0 + 624);
        uint64_t v125 = *(void *)(v0 + 648);
        uint64_t v118 = *(void *)(v0 + 560);
        uint64_t v120 = *(void *)(v0 + 592);
        uint64_t v102 = *(void *)(v0 + 432);
        uint64_t v114 = *(void *)(v0 + 424);
        uint64_t v116 = *(void *)(v0 + 440);
        uint64_t v103 = *(void *)(v0 + 384);
        uint64_t v111 = *(void *)(v0 + 376);
        uint64_t v113 = *(void *)(v0 + 416);
        uint64_t v104 = *(void *)(v0 + 328);
        uint64_t v138 = *(void *)(v0 + 320);
        uint64_t v140 = *(void *)(v0 + 360);
        uint64_t v105 = *(void *)(v0 + 272);
        uint64_t v129 = *(void *)(v0 + 224);
        type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v105, 1, 1, v88);
        uint64_t v106 = static AirDropActor.shared;
        uint64_t v107 = sub_10054F354((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
        uint64_t v108 = (void *)swift_allocObject();
        v108[2] = v106;
        v108[3] = v107;
        v108[4] = v158;
        swift_retain();
        swift_retain();
        sub_10028CFA8(v105, (uint64_t)&unk_100978A88, (uint64_t)v108);
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v113, v111);
        (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v116, v114);
        sub_10024D338(v170);
        v132(v120, v118);
        (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v125, v122);
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v147, v144);
        v163(v155, v151);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 32))(v129, v140, v138);
LABEL_16:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
        return v37();
      }
      v78(*(void *)(v0 + 312), *(void *)(v0 + 280));
      uint64_t v63 = v169;
    }
    else
    {
      v63(*(void *)(v0 + 344), v71);
    }
    v166(*(void *)(v0 + 336), *(void *)(v0 + 360), *(void *)(v0 + 320));
    unint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.default.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    uint64_t v82 = *(void *)(v0 + 336);
    uint64_t v83 = *(void *)(v0 + 320);
    if (v81)
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      v171[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 136315138;
      sub_10054F354(&qword_100978510, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskResponse);
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 208) = sub_100254634(v85, v86, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v63(v82, v83);
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "ClassroomReceive StateMachine PostAccept SKIPPED. {askResult.response: %s}", v84, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v63(v82, v83);
    }
    uint64_t v87 = *(void *)(v0 + 272);
    uint64_t v88 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
    _s10BaseRunnerC11FinishTokenVMa(0);
    swift_retain();
    uint64_t v158 = static Task<>.noThrow(priority:operation:)();
    swift_release();
    sub_10000A7E8(v87, &qword_10096C920);
    goto LABEL_37;
  }
  uint64_t v64 = (void *)swift_task_alloc();
  *(void *)(v0 + 880) = v64;
  *uint64_t v64 = v0;
  v64[1] = sub_1005467D4;
  uint64_t v65 = *(void *)(v0 + 360);
  return sub_1002B6428(v65);
}

uint64_t sub_10054643C()
{
  int v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ClassroomReceive StateMachine PreCheck FAILED. Delegate.shouldStart threw and error - returning .error", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[102];
  uint64_t v23 = (void (*)(uint64_t, uint64_t))v0[100];
  uint64_t v21 = v0[89];
  uint64_t v22 = v0[93];
  uint64_t v4 = v0[83];
  uint64_t v17 = v0[82];
  uint64_t v18 = v0[85];
  uint64_t v5 = v0[79];
  uint64_t v14 = v0[78];
  uint64_t v15 = v0[81];
  uint64_t v12 = v0[70];
  uint64_t v13 = v0[74];
  uint64_t v6 = v0[54];
  uint64_t v7 = v0[55];
  uint64_t v8 = v0[53];
  uint64_t v9 = v0[41];
  uint64_t v20 = v0[40];
  uint64_t v19 = v0[28];
  swift_errorRelease();

  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  sub_10024D338((uint64_t)(v0 + 2));
  v16(v13, v12);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v14);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v18, v17);
  v23(v22, v21);
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v19, enum case for SFAirDropReceive.AskResponse.error(_:), v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1005467D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 752);
  swift_task_dealloc();
  return _swift_task_switch(sub_1005468E4, v1, 0);
}

uint64_t sub_1005468E4()
{
  unint64_t v97 = v0;
  uint64_t v1 = *(void (**)(void, void, void))(v0[41] + 16);
  v1(v0[44], v0[45], v0[40]);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[44];
    uint64_t v93 = v1;
    uint64_t v5 = v0[41];
    uint64_t v88 = v0[40];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v96[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_10054F354(&qword_100978510, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskResponse);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[27] = sub_100254634(v7, v8, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v9(v4, v88);
    uint64_t v1 = v93;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ClassroomReceive StateMachine PreAccept END {response: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v10 = v0[44];
    uint64_t v11 = v0[40];
    uint64_t v12 = v0[41];

    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v9(v10, v11);
  }
  uint64_t v13 = v0[43];
  uint64_t v14 = v0[40];
  uint64_t v15 = v0[41];
  v1(v13, v0[45], v14);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 88))(v13, v14);
  uint64_t v17 = v0[43];
  uint64_t v18 = v0[40];
  if (v16 != enum case for SFAirDropReceive.AskResponse.accept(_:))
  {
    v9(v0[43], v18);
    goto LABEL_8;
  }
  uint64_t v94 = v9;
  uint64_t v19 = v0[38];
  uint64_t v20 = v0[39];
  uint64_t v21 = v0[35];
  uint64_t v22 = v0[36];
  (*(void (**)(uint64_t, uint64_t))(v0[41] + 96))(v17, v18);
  uint64_t v23 = v17 + *(int *)(sub_10000A844(&qword_10096C950) + 48);
  unint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
  v86(v20, v17, v21);
  uint64_t v24 = type metadata accessor for SFAirDropReceive.AcceptContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v19, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v21);
  sub_10054F354(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  LOBYTE(v20) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v25(v19, v21);
  if (v20)
  {
    v25(v0[39], v0[35]);
    uint64_t v9 = v94;
LABEL_8:
    v1(v0[42], v0[45], v0[40]);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = v0[42];
    uint64_t v30 = v0[40];
    if (v28)
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v96[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      sub_10054F354(&qword_100978510, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskResponse);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[26] = sub_100254634(v32, v33, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v9(v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "ClassroomReceive StateMachine PostAccept SKIPPED. {askResult.response: %s}", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v9(v29, v30);
    }
    uint64_t v34 = v0[34];
    uint64_t v35 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
    _s10BaseRunnerC11FinishTokenVMa(0);
    swift_retain();
    uint64_t v91 = static Task<>.noThrow(priority:operation:)();
    swift_release();
    sub_10000A7E8(v34, &qword_10096C920);
    goto LABEL_13;
  }
  BOOL v81 = (void (*)(unint64_t, uint64_t, uint64_t))v0[108];
  uint64_t v60 = (void (*)(uint64_t, uint64_t, uint64_t))v0[106];
  uint64_t v78 = v0[99];
  int v69 = (void (*)(uint64_t, uint64_t, uint64_t))v0[96];
  uint64_t v92 = v0[62];
  uint64_t v84 = v25;
  uint64_t v75 = v0[60];
  uint64_t v89 = v0[59];
  uint64_t v57 = v0[52];
  uint64_t v36 = v0[50];
  uint64_t v73 = v0[49];
  uint64_t v37 = v0[47];
  uint64_t v65 = v36;
  uint64_t v67 = v0[48];
  uint64_t v62 = v37;
  uint64_t v38 = v0[38];
  uint64_t v95 = v0[39];
  uint64_t v63 = v38;
  uint64_t v39 = v0[36];
  uint64_t v71 = v0[37];
  uint64_t v40 = v0[34];
  uint64_t v41 = v0[35];
  uint64_t v58 = v0[30];
  uint64_t v35 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v40, 1, 1, v35);
  v60(v36, v57, v37);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v95, v41);
  v69(v92, v58, v89);
  unint64_t v42 = (*(unsigned __int8 *)(v67 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
  unint64_t v43 = (v73 + *(unsigned __int8 *)(v39 + 80) + v42) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  unint64_t v44 = (v71 + *(unsigned __int8 *)(v75 + 80) + v43) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = v78;
  v81(v45 + v42, v65, v62);
  v86(v45 + v43, v63, v41);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v75 + 32))(v45 + v44, v92, v89);
  _s10BaseRunnerC11FinishTokenVMa(0);
  swift_retain();
  uint64_t v91 = static Task<>.noThrow(priority:operation:)();
  swift_release();
  sub_10000A7E8(v40, &qword_10096C920);
  v84(v95, v41);
LABEL_13:
  uint64_t v77 = (void (*)(uint64_t, uint64_t))v0[102];
  uint64_t v90 = (void (*)(uint64_t, uint64_t))v0[100];
  uint64_t v85 = v0[89];
  uint64_t v87 = v0[93];
  uint64_t v83 = v0[85];
  uint64_t v46 = v0[83];
  uint64_t v82 = v0[82];
  uint64_t v47 = v0[79];
  uint64_t v72 = v0[78];
  uint64_t v74 = v0[81];
  uint64_t v68 = v0[70];
  uint64_t v70 = v0[74];
  uint64_t v48 = v0[54];
  uint64_t v64 = v0[53];
  uint64_t v66 = v0[55];
  uint64_t v49 = v0[48];
  uint64_t v59 = v0[47];
  uint64_t v61 = v0[52];
  uint64_t v50 = v0[41];
  uint64_t v79 = v0[40];
  uint64_t v80 = v0[45];
  uint64_t v51 = v0[34];
  uint64_t v76 = v0[28];
  type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v51, 1, 1, v35);
  uint64_t v52 = static AirDropActor.shared;
  uint64_t v53 = sub_10054F354((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v54 = (void *)swift_allocObject();
  v54[2] = v52;
  v54[3] = v53;
  v54[4] = v91;
  swift_retain();
  swift_retain();
  sub_10028CFA8(v51, (uint64_t)&unk_100978A88, (uint64_t)v54);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v61, v59);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v66, v64);
  sub_10024D338((uint64_t)(v0 + 2));
  v77(v70, v68);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v74, v72);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v83, v82);
  v90(v87, v85);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v76, v80, v79);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v55 = (uint64_t (*)(void))v0[1];
  return v55();
}

uint64_t sub_1005474E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_10054D5BC(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = sub_10054D540(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x10054764CLL);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_100250CC4(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

int64_t sub_10054767C(int64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (!result) {
      unint64_t v3 = 0;
    }
    if (v2 >= v3) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1005476C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100978948);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100978948);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100547788()
{
  return SFAirDrop.PermissionRequest.id.getter();
}

void *sub_1005477D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  v3[3] = 0;
  swift_unknownObjectWeakInit();
  v3[4] = a1;
  v3[5] = a2;
  type metadata accessor for SDAirDropiOSHapticsManager();
  uint64_t v6 = (void *)swift_allocObject();
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = 0;
  v3[6] = v6;
  v3[7] = &off_1008D5508;
  swift_retain();
  sub_1002B57F4();
  swift_release();
  return v3;
}

uint64_t sub_100547854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[31] = a3;
  v4[32] = v3;
  v4[29] = a1;
  v4[30] = a2;
  sub_10000A844(&qword_10096C920);
  v4[33] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.AskResponse();
  v4[34] = v5;
  v4[35] = *(void *)(v5 - 8);
  v4[36] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v4[37] = v6;
  v4[38] = *(void *)(v6 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  uint64_t v7 = _s6RunnerC19PreAcceptRunResultsVMa(0);
  v4[41] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[42] = v8;
  v4[43] = *(void *)(v8 + 64);
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  uint64_t v9 = sub_10000A844(&qword_100970918);
  v4[49] = v9;
  v4[50] = *(void *)(v9 - 8);
  v4[51] = swift_task_alloc();
  sub_10000A844(&qword_10097F260);
  v4[52] = swift_task_alloc();
  sub_10000A844(&qword_1009709E0);
  v4[53] = swift_task_alloc();
  sub_10000A844(&qword_100978668);
  v4[54] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDropReceive.AskRequest();
  v4[55] = v10;
  v4[56] = *(void *)(v10 - 8);
  v4[57] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDrop.DisplayPriority();
  v4[58] = v11;
  v4[59] = *(void *)(v11 - 8);
  v4[60] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v4[61] = v12;
  v4[62] = *(void *)(v12 - 8);
  v4[63] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  v4[64] = v13;
  v4[65] = *(void *)(v13 - 8);
  v4[66] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for SFAirDropReceive.Transfer();
  v4[67] = v14;
  v4[68] = *(void *)(v14 - 8);
  v4[69] = swift_task_alloc();
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for SFAirDropClient.Identifier();
  v4[72] = v15;
  v4[73] = *(void *)(v15 - 8);
  v4[74] = swift_task_alloc();
  v4[75] = swift_task_alloc();
  v4[76] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for SFAirDrop.TransferType();
  v4[77] = v16;
  v4[78] = *(void *)(v16 - 8);
  v4[79] = swift_task_alloc();
  v4[80] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for Date();
  v4[81] = v17;
  v4[82] = *(void *)(v17 - 8);
  v4[83] = swift_task_alloc();
  v4[84] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v4[85] = v18;
  v4[86] = *(void *)(v18 - 8);
  v4[87] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for Logger();
  v4[88] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[89] = v20;
  v4[90] = *(void *)(v20 + 64);
  v4[91] = swift_task_alloc();
  v4[92] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v21 = static AirDropActor.shared;
  v4[93] = static AirDropActor.shared;
  return _swift_task_switch(sub_100547F80, v21, 0);
}

uint64_t sub_100547F80()
{
  uint64_t v1 = v0[87];
  uint64_t v2 = v0[86];
  uint64_t v3 = v0[85];
  SFAirDropReceive.AskRequest.id.getter();
  SFAirDrop.TransferIdentifier.stringValue.getter();
  sub_10054D6A8(8);
  swift_bridgeObjectRelease();
  uint64_t v4 = static String._fromSubstring(_:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  static Date.now.getter();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Receive StateMachine PreChecks START", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[94] = Strong;
  if (Strong)
  {
    uint64_t v12 = v0[80];
    uint64_t v13 = v0[78];
    uint64_t v14 = v0[77];
    SFAirDropReceive.AskRequest.type.getter();
    char v15 = SFAirDrop.TransferType.isOnlyExchange.getter();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v0[95] = v16;
    v0[96] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v16(v12, v14);
    if ((v15 & 1) == 0)
    {
      uint64_t v17 = *(void *)(v0[32] + 56);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(3, ObjectType, v17);
    }
    uint64_t v34 = (uint64_t (*)(uint64_t))((char *)&dword_100978A20 + dword_100978A20);
    uint64_t v19 = (void *)swift_task_alloc();
    v0[97] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1005484F4;
    uint64_t v20 = v0[31];
    return v34(v20);
  }
  else
  {
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Receive StateMachine PreChecks FAILED. Delegate is nil - returning .error", v24, 2u);
      swift_slowDealloc();
    }
    uint64_t v25 = v0[92];
    uint64_t v26 = v0[89];
    uint64_t v27 = v0[88];
    uint64_t v28 = v0[84];
    uint64_t v29 = v0[82];
    uint64_t v30 = v0[81];
    uint64_t v31 = v0[35];
    uint64_t v35 = v0[34];
    uint64_t v32 = v0[29];

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v32, enum case for SFAirDropReceive.AskResponse.error(_:), v35);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v33 = (uint64_t (*)(void))v0[1];
    return v33();
  }
}

uint64_t sub_1005484F4(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 744);
  *(unsigned char *)(*(void *)v1 + 880) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10054860C, v2, 0);
}

uint64_t sub_10054860C()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v2 = v0[76];
  if (Strong)
  {
    uint64_t v3 = v0[75];
    uint64_t v4 = v0[73];
    uint64_t v5 = v0[72];
    sub_10042D258(v3);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v3, v5);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[73] + 104))(v0[76], enum case for SFAirDropClient.Identifier.daemon(_:), v0[72]);
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[95];
  uint64_t v7 = v0[80];
  uint64_t v8 = v0[79];
  uint64_t v9 = v0[78];
  uint64_t v10 = v0[77];
  SFAirDropReceive.AskRequest.type.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for SFAirDrop.TransferType.peerPayment(_:), v10);
  char v11 = static SFAirDrop.TransferType.== infix(_:_:)();
  v6(v8, v10);
  v6(v7, v10);
  if (v11)
  {
    uint64_t v12 = v0[76];
    uint64_t v13 = v0[73];
    uint64_t v14 = v0[72];
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v12, enum case for SFAirDropClient.Identifier.wallet(_:), v14);
  }
  uint64_t v29 = v0[84];
  uint64_t v15 = v0[83];
  uint64_t v16 = v0[82];
  uint64_t v17 = v0[81];
  uint64_t v42 = v0[76];
  uint64_t v40 = v0[74];
  uint64_t v39 = v0[73];
  uint64_t v41 = v0[72];
  uint64_t v18 = v0[63];
  uint64_t v20 = v0[61];
  uint64_t v19 = v0[62];
  uint64_t v21 = v0[59];
  uint64_t v31 = v0[60];
  uint64_t v32 = v0[58];
  uint64_t v22 = v0[56];
  uint64_t v33 = v0[57];
  uint64_t v34 = v0[55];
  uint64_t v36 = v0[54];
  uint64_t v37 = v0[53];
  uint64_t v38 = v0[52];
  uint64_t v23 = v0[35];
  uint64_t v35 = v0[34];
  uint64_t v30 = v0[31];
  (*(void (**)(void))(v0[65] + 16))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v29, v17);
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for SFAirDropReceive.Transfer.State.created(_:), v20);
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v31, enum case for SFAirDrop.DisplayPriority.normal(_:), v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v33, v30, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v36, 1, 1, v35);
  uint64_t v24 = type metadata accessor for SFAirDrop.DeclineAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v37, 1, 1, v24);
  uint64_t v25 = type metadata accessor for SFNWInterfaceType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v38, 1, 1, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v40, v42, v41);
  SFAirDropReceive.Transfer.init(receiveID:startDate:state:displayPriority:askRequest:isPreviewSensitive:askResponse:didAutoAccept:cancelAction:activeInterfaceType:presenter:)();
  type metadata accessor for SDAirDropContentHandlerFactory();
  uint64_t v26 = (void *)swift_task_alloc();
  v0[98] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_100548A48;
  uint64_t v27 = v0[71];
  return sub_1005ACA28((uint64_t)(v0 + 7), v27);
}

uint64_t sub_100548A48()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 744);
  swift_task_dealloc();
  return _swift_task_switch(sub_100548B58, v1, 0);
}

uint64_t sub_100548B58()
{
  uint64_t v1 = (long long *)(v0 + 7);
  if (v0[10])
  {
    uint64_t v2 = v0[91];
    uint64_t v3 = v0[89];
    uint64_t v46 = v0[88];
    uint64_t v48 = v0[92];
    uint64_t v4 = v0[71];
    uint64_t v5 = v0[70];
    uint64_t v6 = v0[68];
    uint64_t v7 = v0[67];
    uint64_t v8 = v0[32];
    uint64_t v52 = v5;
    uint64_t v50 = (void *)v0[30];
    sub_1002AF688(v1, (uint64_t)(v0 + 2));
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v0[99] = v9;
    v0[100] = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v9(v5, v4, v7);
    sub_100278C8C((uint64_t)(v0 + 2), (uint64_t)(v0 + 12));
    uint64_t v12 = v8 + 32;
    uint64_t v10 = *(void **)(v8 + 32);
    char v11 = *(void **)(v12 + 8);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v0[101] = v13;
    v0[102] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v14 = v2;
    v13(v2, v48, v46);
    _s6RunnerCMa_0(0);
    swift_allocObject();
    id v15 = v50;
    id v16 = v11;
    id v17 = v10;
    uint64_t v18 = sub_10053AD7C(v52, (uint64_t)(v0 + 12), v15, v16, v17, v14);
    v0[103] = v18;

    uint64_t v19 = SFAirDropReceive.AskRequest.contactIdentifier.getter();
    if (v20)
    {
      uint64_t v21 = v19;
      uint64_t v22 = v20;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v24 = Strong + OBJC_IVAR____TtC16DaemoniOSLibrary16SDAirDropService_nearFieldService;
        swift_beginAccess();
        sub_100278C8C(v24, (uint64_t)(v0 + 17));
        uint64_t v25 = v0[20];
        uint64_t v26 = v0[21];
        sub_10026BB6C(v0 + 17, v25);
        char v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 104))(v21, v22, v25, v26);
        sub_10024D338((uint64_t)(v0 + 17));
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        char v27 = 0;
      }
      *(unsigned char *)(v18 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_delegateCanAutoAccept) = v27 & 1;
    }
    v0[27] = *(void *)(v18 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_subject);
    swift_retain();
    sub_10000A844(&qword_10097F1A0);
    sub_10054E1CC();
    SFNoThrowAsyncSequence.init<A>(_:)();
    os_log_type_t v55 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100970910 + dword_100970910);
    uint64_t v40 = (void *)swift_task_alloc();
    v0[104] = v40;
    *uint64_t v40 = v0;
    v40[1] = sub_100549188;
    uint64_t v41 = v0[71];
    uint64_t v42 = v0[51];
    return v55(v41, v42);
  }
  else
  {
    sub_10000A7E8((uint64_t)v1, &qword_100978A28);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Receive StateMachine PreChecks FAILED. Mixed types - returning .mixedTypes", v30, 2u);
      swift_slowDealloc();
    }
    uint64_t v31 = v0[89];
    uint64_t v53 = v0[88];
    uint64_t v54 = v0[92];
    uint64_t v47 = v0[84];
    uint64_t v32 = v0[82];
    uint64_t v44 = v0[76];
    uint64_t v45 = v0[81];
    uint64_t v33 = v0[73];
    uint64_t v43 = v0[72];
    uint64_t v34 = v0[71];
    uint64_t v35 = v0[68];
    uint64_t v36 = v0[67];
    uint64_t v37 = v0[35];
    uint64_t v49 = v0[29];
    uint64_t v51 = v0[34];

    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v44, v43);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v47, v45);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v54, v53);
    (*(void (**)(uint64_t, void, uint64_t))(v37 + 104))(v49, enum case for SFAirDropReceive.AskResponse.mixedTypes(_:), v51);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
}

uint64_t sub_100549188(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 840) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 744);
  if (v1)
  {
    uint64_t v6 = sub_1005497B0;
  }
  else
  {
    *(unsigned char *)(v4 + 881) = a1 & 1;
    uint64_t v6 = sub_1005492C8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1005492C8()
{
  int v1 = *(unsigned __int8 *)(v0 + 881);
  uint64_t v2 = Logger.logObject.getter();
  if (v1 == 1)
  {
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Receive StateMachine PreChecks END", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Receive StateMachine PreAccept START", v7, 2u);
      swift_slowDealloc();
    }

    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100549B40;
    uint64_t v9 = *(void *)(v0 + 384);
    return sub_100510994(v9);
  }
  else
  {
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v11, "Receive StateMachine PreChecks FAILED. Delegate.shouldStart returned false - returning .decline", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = *(void *)(v0 + 712);
    uint64_t v30 = *(void *)(v0 + 704);
    uint64_t v31 = *(void *)(v0 + 736);
    uint64_t v27 = *(void *)(v0 + 672);
    uint64_t v14 = *(void *)(v0 + 656);
    uint64_t v25 = *(void *)(v0 + 608);
    uint64_t v26 = *(void *)(v0 + 648);
    uint64_t v15 = *(void *)(v0 + 584);
    uint64_t v24 = *(void *)(v0 + 576);
    uint64_t v16 = *(void *)(v0 + 544);
    uint64_t v22 = *(void *)(v0 + 536);
    uint64_t v23 = *(void *)(v0 + 568);
    uint64_t v17 = *(void *)(v0 + 400);
    uint64_t v18 = *(void *)(v0 + 408);
    uint64_t v19 = *(void *)(v0 + 392);
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v28 = *(void *)(v0 + 232);
    uint64_t v29 = *(void *)(v0 + 272);

    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    sub_10024D338(v0 + 16);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v23, v22);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v25, v24);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v27, v26);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v31, v30);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v28, enum case for SFAirDropReceive.AskResponse.decline(_:), v29);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
}

uint64_t sub_1005497B0()
{
  int v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Receive StateMachine PreCheck FAILED. Delegate.shouldStart threw and error - returning .error", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[89];
  uint64_t v22 = v0[88];
  uint64_t v23 = v0[92];
  uint64_t v19 = v0[84];
  uint64_t v5 = v0[82];
  uint64_t v17 = v0[76];
  uint64_t v18 = v0[81];
  uint64_t v6 = v0[73];
  uint64_t v16 = v0[72];
  uint64_t v7 = v0[68];
  uint64_t v14 = v0[67];
  uint64_t v15 = v0[71];
  uint64_t v9 = v0[50];
  uint64_t v8 = v0[51];
  uint64_t v10 = v0[49];
  uint64_t v11 = v0[35];
  uint64_t v20 = v0[29];
  uint64_t v21 = v0[34];
  swift_errorRelease();

  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  sub_10024D338((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v14);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v16);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v19, v18);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v23, v22);
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v20, enum case for SFAirDropReceive.AskResponse.error(_:), v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100549B40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 744);
  swift_task_dealloc();
  return _swift_task_switch(sub_100549C50, v1, 0);
}

uint64_t sub_100549C50()
{
  uint64_t v104 = v0;
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[46];
  sub_10054EC94(v1, v0[47], _s6RunnerC19PreAcceptRunResultsVMa);
  sub_10054EC94(v1, v2, _s6RunnerC19PreAcceptRunResultsVMa);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[63];
    uint64_t v6 = v0[61];
    os_log_type_t v102 = v4;
    uint64_t v7 = v0[47];
    uint64_t v94 = v0[46];
    uint64_t v99 = v0[62];
    uint64_t v8 = swift_slowAlloc();
    v103[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    sub_10054F354(&qword_100978510, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskResponse);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[25] = sub_100254634(v9, v10, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10054E748(v7, _s6RunnerC19PreAcceptRunResultsVMa);
    *(_WORD *)(v8 + 12) = 2080;
    SFAirDropReceive.Transfer.state.getter();
    sub_10054F354(&qword_100970950, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v5, v6);
    v0[26] = sub_100254634(v11, v13, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10054E748(v94, _s6RunnerC19PreAcceptRunResultsVMa);
    _os_log_impl((void *)&_mh_execute_header, v3, v102, "Receive StateMachine PreAccept END {response: %s, transfer.state: %s}", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = v0[46];
    uint64_t v14 = v0[47];

    sub_10054E748(v14, _s6RunnerC19PreAcceptRunResultsVMa);
    sub_10054E748(v15, _s6RunnerC19PreAcceptRunResultsVMa);
  }
  uint64_t v16 = v0[48];
  uint64_t v18 = v0[35];
  uint64_t v17 = v0[36];
  uint64_t v19 = v0[34];
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v0[107] = v20;
  v0[108] = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v20(v17, v16, v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19) != enum case for SFAirDropReceive.AskResponse.accept(_:))
  {
    (*(void (**)(void, void))(v0[35] + 8))(v0[36], v0[34]);
    goto LABEL_9;
  }
  unint64_t v96 = (void (*)(uint64_t, uint64_t, uint64_t))v0[99];
  uint64_t v21 = v0[71];
  uint64_t v22 = v0[69];
  uint64_t v23 = v0[67];
  uint64_t v24 = v0[39];
  uint64_t v25 = v0[40];
  uint64_t v26 = v0[37];
  uint64_t v27 = v0[38];
  uint64_t v28 = v0[36];
  (*(void (**)(uint64_t, void))(v0[35] + 96))(v28, v0[34]);
  uint64_t v29 = v28 + *(int *)(sub_10000A844(&qword_10096C950) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v25, v28, v26);
  uint64_t v30 = type metadata accessor for SFAirDropReceive.AcceptContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v29, v30);
  (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))(v24, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v26);
  sub_10054F354(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  LOBYTE(v25) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v31(v24, v26);
  v96(v22, v21, v23);
  uint64_t v100 = v31;
  if (v25)
  {
    uint64_t v32 = (void (*)(uint64_t, uint64_t))v0[95];
    uint64_t v33 = v0[80];
    uint64_t v34 = v0[77];
    uint64_t v35 = v0[69];
    uint64_t v36 = v0[68];
    uint64_t v97 = v0[67];
    uint64_t v37 = v0[56];
    uint64_t v38 = v0[57];
    uint64_t v39 = v0[55];
    SFAirDropReceive.Transfer.askRequest.getter();
    SFAirDropReceive.AskRequest.type.getter();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    char v40 = SFAirDrop.TransferType.isOnlyExchange.getter();
    v32(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v97);
    if ((v40 & 1) == 0)
    {
      v100(v0[40], v0[37]);
LABEL_9:
      sub_10054EC94(v0[48], v0[44], _s6RunnerC19PreAcceptRunResultsVMa);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = v0[44];
      if (v43)
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        v103[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136315138;
        sub_10054F354(&qword_100978510, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskResponse);
        uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[28] = sub_100254634(v46, v47, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10054E748(v44, _s6RunnerC19PreAcceptRunResultsVMa);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Receive StateMachine PostAccept SKIPPED. {preResults.response: %s}", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10054E748(v44, _s6RunnerC19PreAcceptRunResultsVMa);
      }
      uint64_t v48 = (void *)swift_task_alloc();
      v0[109] = v48;
      *uint64_t v48 = v0;
      v48[1] = sub_10054A96C;
      return sub_1006C4B08();
    }
  }
  else
  {
    (*(void (**)(void, void))(v0[68] + 8))(v0[69], v0[67]);
  }
  uint64_t v50 = (void (*)(uint64_t, uint64_t, uint64_t))v0[101];
  uint64_t v51 = v0[92];
  uint64_t v52 = v0[91];
  uint64_t v53 = v0[89];
  uint64_t v54 = v0[88];
  uint64_t v55 = v0[48];
  uint64_t v56 = v0[45];
  uint64_t v82 = v0[90];
  uint64_t v84 = v0[43];
  uint64_t v80 = v0[42];
  uint64_t v92 = v0[40];
  uint64_t v88 = v0[103];
  uint64_t v90 = v0[37];
  uint64_t v57 = v0[33];
  unint64_t v86 = (void *)v0[30];
  uint64_t v98 = type metadata accessor for TaskPriority();
  uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56);
  v95(v57, 1, 1, v98);
  v50(v52, v51, v54);
  sub_10054EC94(v55, v56, _s6RunnerC19PreAcceptRunResultsVMa);
  unint64_t v58 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  unint64_t v59 = (v82 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = (*(unsigned __int8 *)(v80 + 80) + v59 + 8) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  uint64_t v61 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v53 + 32))(v61 + v58, v52, v54);
  *(void *)(v61 + v59) = v88;
  sub_10054E554(v56, v61 + v60);
  *(void *)(v61 + ((v84 + v60 + 7) & 0xFFFFFFFFFFFFFFF8)) = v86;
  _s10BaseRunnerC11FinishTokenVMa(0);
  id v62 = v86;
  swift_retain();
  uint64_t v63 = static Task<>.noThrow(priority:operation:)();
  swift_release();
  sub_10000A7E8(v57, &qword_10096C920);
  v100(v92, v90);
  uint64_t v101 = (void (*)(uint64_t, uint64_t, uint64_t))v0[107];
  uint64_t v89 = v0[89];
  uint64_t v91 = v0[88];
  uint64_t v93 = v0[92];
  uint64_t v64 = v0[82];
  uint64_t v81 = v0[81];
  uint64_t v83 = v0[84];
  uint64_t v65 = v0[73];
  uint64_t v77 = v0[72];
  uint64_t v78 = v0[76];
  uint64_t v66 = v0[68];
  uint64_t v75 = v0[67];
  uint64_t v76 = v0[71];
  uint64_t v67 = v0[50];
  uint64_t v74 = v0[51];
  uint64_t v73 = v0[49];
  uint64_t v68 = v0[33];
  uint64_t v85 = v0[48];
  uint64_t v87 = v0[34];
  uint64_t v79 = v0[29];
  v95(v68, 1, 1, v98);
  uint64_t v69 = static AirDropActor.shared;
  uint64_t v70 = sub_10054F354((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v71 = (void *)swift_allocObject();
  v71[2] = v69;
  v71[3] = v70;
  v71[4] = v63;
  swift_retain();
  swift_retain();
  sub_10028CFA8(v68, (uint64_t)&unk_100978A50, (uint64_t)v71);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v74, v73);
  sub_10024D338((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v76, v75);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v78, v77);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v83, v81);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v93, v91);
  v101(v79, v85, v87);
  sub_10054E748(v85, _s6RunnerC19PreAcceptRunResultsVMa);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v72 = (uint64_t (*)(void))v0[1];
  return v72();
}

uint64_t sub_10054A96C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 744);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054AA7C, v1, 0);
}

uint64_t sub_10054AA7C()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = type metadata accessor for TaskPriority();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  _s10BaseRunnerC11FinishTokenVMa(0);
  swift_retain();
  uint64_t v4 = static Task<>.noThrow(priority:operation:)();
  swift_release();
  sub_10000A7E8(v1, &qword_10096C920);
  uint64_t v29 = (void (*)(uint64_t, uint64_t, uint64_t))v0[107];
  uint64_t v28 = v0[92];
  uint64_t v26 = v0[89];
  uint64_t v27 = v0[88];
  uint64_t v5 = v0[82];
  uint64_t v22 = v0[81];
  uint64_t v23 = v0[84];
  uint64_t v6 = v0[73];
  uint64_t v19 = v0[72];
  uint64_t v20 = v0[76];
  uint64_t v7 = v0[68];
  uint64_t v17 = v0[67];
  uint64_t v18 = v0[71];
  uint64_t v8 = v0[50];
  uint64_t v16 = v0[51];
  uint64_t v15 = v0[49];
  uint64_t v9 = v0[33];
  uint64_t v24 = v0[48];
  uint64_t v25 = v0[34];
  uint64_t v21 = v0[29];
  v3(v9, 1, 1, v2);
  uint64_t v10 = static AirDropActor.shared;
  uint64_t v11 = sub_10054F354((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  unint64_t v12 = (void *)swift_allocObject();
  void v12[2] = v10;
  v12[3] = v11;
  v12[4] = v4;
  swift_retain();
  swift_retain();
  sub_10028CFA8(v9, (uint64_t)&unk_100978A50, (uint64_t)v12);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v15);
  sub_10024D338((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v17);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v19);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v23, v22);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  v29(v21, v24, v25);
  sub_10054E748(v24, _s6RunnerC19PreAcceptRunResultsVMa);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_10054AF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Failure();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v5[13] = v7;
  v5[14] = *(void *)(v7 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  uint64_t v8 = sub_10000A844(&qword_10096CC58);
  v5[17] = v8;
  v5[18] = *(void *)(v8 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v9 = sub_10000A844(&qword_10096BBA8);
  v5[20] = v9;
  v5[21] = *(void *)(v9 - 8);
  v5[22] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDropReceive.Transfer();
  v5[23] = v10;
  v5[24] = *(void *)(v10 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v11 = static AirDropActor.shared;
  v5[29] = static AirDropActor.shared;
  return _swift_task_switch(sub_10054B1D8, v11, 0);
}

uint64_t sub_10054B1D8()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Receive StateMachine PostAccept START", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[21];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[9];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation, v6);
  SFProgressContinuation.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[30] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10054B354;
  uint64_t v9 = v0[28];
  uint64_t v10 = v0[8];
  return sub_100518604(v9, v10);
}

uint64_t sub_10054B354()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  uint64_t v2 = *(void *)(*(void *)v0 + 152);
  uint64_t v3 = *(void *)(*(void *)v0 + 144);
  uint64_t v4 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_10054B4C0, v1, 0);
}

uint64_t sub_10054B4C0()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  SFAirDropReceive.Transfer.state.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  if (v4 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(void, void))(v0[14] + 96))(v0[16], v0[13]);
    v0[31] = sub_10000A844((uint64_t *)&unk_100974550);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[32] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10054B7E0;
    uint64_t v6 = 0;
  }
  else if (v4 == enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
  {
    uint64_t v7 = v0[16];
    uint64_t v9 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[10];
    (*(void (**)(uint64_t, void))(v0[14] + 96))(v7, v0[13]);
    uint64_t v11 = sub_10000A844(&qword_100970340);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v7 + *(int *)(v11 + 48), v10);
    sub_10054F354(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
    uint64_t v12 = swift_allocError();
    v0[33] = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v13, v8, v10);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[34] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10054BC00;
    uint64_t v6 = v12;
  }
  else
  {
    type metadata accessor for CancellationError();
    sub_10054F354(&qword_10096CCB8, (void (*)(uint64_t))&type metadata accessor for CancellationError);
    uint64_t v15 = swift_allocError();
    v0[35] = v15;
    CancellationError.init()();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[36] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10054C03C;
    uint64_t v6 = v15;
  }
  return sub_100672230(v6);
}

uint64_t sub_10054B7E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054B8F0, v1, 0);
}

uint64_t sub_10054B8F0()
{
  uint64_t v24 = v0;
  (*(void (**)(void, void, void))(v0[24] + 16))(v0[27], v0[28], v0[23]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = v0[27];
    uint64_t v21 = v0[24];
    uint64_t v22 = v0[23];
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[13];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    SFAirDropReceive.Transfer.state.getter();
    sub_10054F354(&qword_100970950, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
    v0[4] = sub_100254634(v7, v9, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v10(v20, v22);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Receive StateMachine PostAccept END {transfer.state: %s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v11 = v0[27];
    uint64_t v12 = v0[23];
    uint64_t v13 = v0[24];

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }
  uint64_t v14 = v0[16];
  uint64_t v15 = v14 + *(int *)(v0[31] + 48);
  uint64_t v16 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v14, v17);
  v0[37] = v10;
  uint64_t v18 = (void *)swift_task_alloc();
  v0[38] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_10054C424;
  return sub_1006C4B08();
}

uint64_t sub_10054BC00()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_10054BD2C, v1, 0);
}

uint64_t sub_10054BD2C()
{
  uint64_t v25 = v0;
  (*(void (**)(void, void, void))(v0[24] + 16))(v0[26], v0[28], v0[23]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = v0[26];
    uint64_t v19 = v0[24];
    uint64_t v20 = v0[23];
    uint64_t v4 = v0[14];
    uint64_t v3 = v0[15];
    uint64_t v5 = v0[13];
    uint64_t v21 = v0[11];
    uint64_t v22 = v0[10];
    uint64_t v23 = v0[12];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    SFAirDropReceive.Transfer.state.getter();
    sub_10054F354(&qword_100970950, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v0[3] = sub_100254634(v7, v9, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v10(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Receive StateMachine PostAccept FAILED {transfer.state: %s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }
  else
  {
    uint64_t v12 = v0[11];
    uint64_t v11 = v0[12];
    uint64_t v13 = v0[10];
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0[24] + 8);
    v10(v0[26], v0[23]);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  uint64_t v14 = v0[16];
  uint64_t v15 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  v0[37] = v10;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[38] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10054C424;
  return sub_1006C4B08();
}

uint64_t sub_10054C03C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_10054C168, v1, 0);
}

uint64_t sub_10054C168()
{
  uint64_t v24 = v0;
  (*(void (**)(void, void, void))(v0[24] + 16))(v0[25], v0[28], v0[23]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = v0[25];
    uint64_t v20 = v0[24];
    uint64_t v21 = v0[23];
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[13];
    os_log_type_t type = v2;
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    buf = v6;
    *(_DWORD *)uint64_t v6 = 136315138;
    SFAirDropReceive.Transfer.state.getter();
    sub_10054F354(&qword_100970950, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Transfer.State);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v8;
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v10(v4, v5);
    v0[2] = sub_100254634(v7, v9, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v11(v19, v21);
    _os_log_impl((void *)&_mh_execute_header, v1, type, "Receive StateMachine PostAccept INCOMPLETE {transfer.state: %s}", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v13 = v0[24];
    uint64_t v12 = v0[25];
    uint64_t v14 = v0[23];
    uint64_t v15 = v0[14];

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v11(v12, v14);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  }
  v10(v0[16], v0[13]);
  v0[37] = v11;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[38] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10054C424;
  return sub_1006C4B08();
}

uint64_t sub_10054C424()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054C534, v1, 0);
}

uint64_t sub_10054C534()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  *(unsigned char *)(v0 + 312) = 1;
  CurrentValueSubject.send(completion:)();
  sub_1006C63D4();
  uint64_t v6 = v4 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  _s10BaseRunnerC11FinishTokenVMa(0);
  CurrentValueSubject.value.getter();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10054C6D8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v3 = static AirDropActor.shared;
  return _swift_task_switch(sub_10054C774, v3, 0);
}

uint64_t sub_10054C774()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  *(unsigned char *)(v0 + 32) = 1;
  CurrentValueSubject.send(completion:)();
  sub_1006C63D4();
  uint64_t v3 = v1 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v2, v3, v4);
  _s10BaseRunnerC11FinishTokenVMa(0);
  CurrentValueSubject.value.getter();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10054C868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = _s10BaseRunnerC11FinishTokenVMa(0);
  uint64_t v7 = swift_task_alloc();
  v4[2] = v7;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  v4[3] = static AirDropActor.shared;
  unint64_t v8 = (void *)swift_task_alloc();
  v4[4] = v8;
  *unint64_t v8 = v4;
  v8[1] = sub_10054C98C;
  return Task<>.value.getter(v7, a4, v6);
}

uint64_t sub_10054C98C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054F39C, v1, 0);
}

uint64_t sub_10054CA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  v5[7] = static AirDropActor.shared;
  return _swift_task_switch(sub_10054CB44, v6, 0);
}

uint64_t sub_10054CB44()
{
  SFAirDropReceive.AskRequest.canAutoAccept.getter();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10096CC48 + dword_10096CC48);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10054CBF8;
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  return v5(v3, v2);
}

uint64_t sub_10054CBF8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 72) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10054CD38;
  return sub_1006C4B08();
}

uint64_t sub_10054CD38()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054CE48, v1, 0);
}

uint64_t sub_10054CE48()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  *(unsigned char *)(v0 + 80) = 1;
  CurrentValueSubject.send(completion:)();
  sub_1006C63D4();
  uint64_t v3 = v1 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v2, v3, v4);
  _s10BaseRunnerC11FinishTokenVMa(0);
  CurrentValueSubject.value.getter();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10054CF3C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  v2[4] = static AirDropActor.shared;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[5] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10054D010;
  return sub_1006C4B08();
}

uint64_t sub_10054D010()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054D120, v1, 0);
}

uint64_t sub_10054D120()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  *(unsigned char *)(v0 + 48) = 1;
  CurrentValueSubject.send(completion:)();
  sub_1006C63D4();
  uint64_t v3 = v1 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(v2, v3, v4);
  _s10BaseRunnerC11FinishTokenVMa(0);
  CurrentValueSubject.value.getter();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10054D214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = _s10BaseRunnerC11FinishTokenVMa(0);
  uint64_t v7 = swift_task_alloc();
  v4[2] = v7;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  v4[3] = static AirDropActor.shared;
  uint64_t v8 = (void *)swift_task_alloc();
  v4[4] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_10054D338;
  return Task<>.value.getter(v7, a4, v6);
}

uint64_t sub_10054D338()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_10054D448, v1, 0);
}

uint64_t sub_10054D448()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1006C77C4();
  sub_10054E748(v1, _s10BaseRunnerC11FinishTokenVMa);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10054D4CC()
{
  sub_100261080(v0 + 16);

  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SDAirDropReceiveStateMachine()
{
  return self;
}

uint64_t sub_10054D540(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x10054D5ACLL);
  }
  return result;
}

uint64_t sub_10054D5BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x10054D688);
  }
  return result;
}

uint64_t sub_10054D6A8(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t sub_10054D744(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v2 = static AirDropActor.shared;
  *(void *)(v1 + 80) = static AirDropActor.shared;
  return _swift_task_switch(sub_10054D7E4, v2, 0);
}

uint64_t sub_10054D7E4()
{
  uint64_t v32 = v0;
  uint64_t v1 = SFAirDropReceive.AskRequest.previewImage.getter();
  v0[11] = v1;
  if (!v1) {
    goto LABEL_4;
  }
  uint64_t v2 = (void *)v1;
  if (SFAirDropReceive.AskRequest.senderIsMe.getter())
  {

LABEL_4:
    if (qword_100969F38 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000B47C(v3, (uint64_t)qword_100978948);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Receive StateMachine PreChecks isPreviewSensitive SKIP. No previewImage or senderIsMe", v6, 2u);
      swift_slowDealloc();
    }
LABEL_8:

    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7(0);
  }
  unint64_t v10 = sub_10048C2F0();
  uint64_t v12 = v11;
  if (!v9)
  {
    if (qword_100969F38 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000B47C(v21, (uint64_t)qword_100978948);
    swift_bridgeObjectRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v22))
    {
      loga = v4;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v28 = v23;
      swift_bridgeObjectRetain();
      v35._countAndFlagsBits = v10;
      v35._object = v12;
      unint64_t v24 = sub_100485954(v35, 0);
      unint64_t v26 = v25;
      sub_1003950E4(v10, (uint64_t)v12, 0);
      v0[8] = sub_100254634(v24, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003950E4(v10, (uint64_t)v12, 0);
      sub_1003950E4(v10, (uint64_t)v12, 0);
      uint64_t v4 = loga;
      _os_log_impl((void *)&_mh_execute_header, loga, v22, "Receive StateMachine PreChecks isPreviewSensitive SKIP {userSafetyMode: %s}", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1003950E4(v10, (uint64_t)v12, 0);
      sub_1003950E4(v10, (uint64_t)v12, 0);
    }
    goto LABEL_8;
  }
  char v13 = v9;
  if (qword_100969F38 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  v0[12] = sub_10000B47C(v14, (uint64_t)qword_100978948);
  sub_1003950CC(v10, (uint64_t)v12, v13);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    sub_1003950CC(v10, (uint64_t)v12, v13);
    v34._countAndFlagsBits = v10;
    v34._object = v12;
    unint64_t v18 = sub_100485954(v34, v13);
    unint64_t v20 = v19;
    sub_1003950E4(v10, (uint64_t)v12, v13);
    v0[7] = sub_100254634(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003950E4(v10, (uint64_t)v12, v13);
    sub_1003950E4(v10, (uint64_t)v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Receive StateMachine PreChecks isPreviewSensitive START {userSafetyMode: %s}", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1003950E4(v10, (uint64_t)v12, v13);
    sub_1003950E4(v10, (uint64_t)v12, v13);
  }

  os_log_t log = (uint64_t (*)(uint64_t))((char *)&dword_100975330 + dword_100975330);
  uint64_t v27 = (void *)swift_task_alloc();
  v0[13] = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_10054DD84;
  return log((uint64_t)v2);
}

uint64_t sub_10054DD84(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(unsigned char *)(v4 + 124) = a1;
  *(void *)(v4 + 112) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 80);
  if (v1) {
    uint64_t v6 = sub_10054DFE4;
  }
  else {
    uint64_t v6 = sub_10054DEBC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10054DEBC()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = *(unsigned __int8 *)(v0 + 124);
    uint64_t v4 = *(void **)(v0 + 88);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 120) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Receive StateMachine PreChecks isPreviewSensitive END {isPreviewSensitive: %{BOOL}d}", v5, 8u);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v0 + 88);

    uint64_t v1 = v6;
  }

  uint64_t v7 = *(unsigned __int8 *)(v0 + 124);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v8(v7);
}

uint64_t sub_10054DFE4()
{
  uint64_t v9 = v0;

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)int v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_100254634(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Receive StateMachine PreChecks FAILED. Error analyzing preview - returning .error {error: %s}", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6(0);
}

unint64_t sub_10054E1CC()
{
  unint64_t result = qword_100978A30;
  if (!qword_100978A30)
  {
    sub_100247840(&qword_10097F1A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100978A30);
  }
  return result;
}

uint64_t sub_10054E228(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000A6F0;
  return sub_10054C6D8(a1, v1);
}

uint64_t sub_10054E2C8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10054C868(a1, v4, v5, v6);
}

uint64_t sub_10054E37C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = (int *)(_s6RunnerC19PreAcceptRunResultsVMa(0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v5 + v7 + 8) & ~v7;
  uint64_t v9 = v3 | v7 | 7;
  unint64_t v10 = (*(void *)(*(void *)v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v8, v11);
  uint64_t v12 = v0 + v8 + v6[7];
  uint64_t v13 = type metadata accessor for SFAirDropReceive.Transfer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  return _swift_deallocObject(v0, v10 + 8, v9);
}

uint64_t sub_10054E554(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s6RunnerC19PreAcceptRunResultsVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10054E5B8(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(_s6RunnerC19PreAcceptRunResultsVMa(0) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = v1 + v6;
  uint64_t v12 = v1 + v9;
  uint64_t v13 = *(void *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_10000A6F0;
  return sub_10054AF24(a1, v11, v10, v12, v13);
}

uint64_t sub_10054E748(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10054E7A8(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000A6F4;
  return sub_10054CF3C(a1, v1);
}

uint64_t sub_10054E848(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10054D214(a1, v4, v5, v6);
}

uint64_t sub_10054E8FC()
{
  uint64_t v17 = sub_10000A844(&qword_10096BBA8);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v6 | v11 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);

  return _swift_deallocObject(v0, v15, v13);
}

uint64_t sub_10054EAE0(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000A844(&qword_10096BBA8) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for SFAirDropReceive.ItemDestination() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SFAirDropReceive.AskRequest() - 8) + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = v1 + v5;
  uint64_t v14 = v1 + v8;
  uint64_t v15 = v1 + (v11 & ~v10);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v16;
  *uint64_t v16 = v2;
  v16[1] = sub_10000A6F0;
  return sub_10054CA9C(a1, v12, v13, v14, v15);
}

uint64_t sub_10054EC94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10054ECFC()
{
  uint64_t result = type metadata accessor for SFAirDrop.PermissionRequest();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10054EDA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SFAirDrop.PermissionRequest();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 52)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 52));
  }
  swift_retain();
  return a1;
}

uint64_t sub_10054EE80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDrop.PermissionRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_10054EEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.PermissionRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 52)) = *(void *)(a2 + *(int *)(a3 + 52));
  swift_retain();
  return a1;
}

uint64_t sub_10054EF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.PermissionRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 52)) = *(void *)(a2 + *(int *)(a3 + 52));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10054F030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.PermissionRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 52)) = *(void *)(a2 + *(int *)(a3 + 52));
  return a1;
}

uint64_t sub_10054F0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.PermissionRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 52)) = *(void *)(a2 + *(int *)(a3 + 52));
  swift_release();
  return a1;
}

uint64_t sub_10054F158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10054F16C);
}

uint64_t sub_10054F16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.PermissionRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 52));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_10054F228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10054F23C);
}

uint64_t sub_10054F23C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SFAirDrop.PermissionRequest();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 52)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SDPermissionRequestTask()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10054F30C()
{
  return sub_10054F354(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10054F354(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10054F3A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100978B20);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100978B20);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10054F468(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.AskRequest();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  return _swift_task_switch(sub_10054F628, v6, 0);
}

uint64_t sub_10054F628()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[12];
  uint64_t v8 = v0[13];
  if (v5)
  {
    uint64_t v9 = *(void *)(SFAirDropReceive.AskRequest.urlItems.getter() + 16);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    if (v9)
    {
      BOOL v10 = 0;
    }
    else
    {
      uint64_t v11 = SFAirDropReceive.AskRequest.files.getter();
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        uint64_t v13 = v0[10];
        os_log_type_t type = *(void (**)(void, unint64_t, void))(v13 + 16);
        unint64_t v14 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
        uint64_t v15 = (void (**)(uint64_t, uint64_t))(v13 + 8);
        uint64_t v28 = *(void *)(v13 + 72);
        while (1)
        {
          type(v0[11], v14, v0[9]);
          SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
          NSString v16 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          SFAirDropReceive.AskRequest.ItemInfo.fileName.getter();
          NSString v17 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v18 = [v17 pathExtension];

          if (!v18)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v18 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          uint64_t v19 = v0[11];
          uint64_t v20 = v0[9];
          char v21 = SFIsContact();

          (*v15)(v19, v20);
          if ((v21 & 1) == 0) {
            break;
          }
          v14 += v28;
          if (!--v12) {
            goto LABEL_11;
          }
        }
        swift_bridgeObjectRelease();
        BOOL v10 = 0;
      }
      else
      {
LABEL_11:
        swift_bridgeObjectRelease();
        id v22 = objc_allocWithZone((Class)LSApplicationRecord);
        id v23 = sub_1006A5458(0xD00000000000001BLL, 0x80000001007C12E0, 1);
        uint64_t v24 = v0[5];
        unint64_t v25 = *(void **)(v24 + 16);
        *(void *)(v24 + 16) = v23;

        BOOL v10 = *(void *)(v0[5] + 16) != 0;
      }
    }
  }
  else
  {
    (*(void (**)(void, void))(v8 + 8))(v0[15], v0[12]);
    BOOL v10 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v26 = (uint64_t (*)(BOOL))v0[1];
  return v26(v10);
}

uint64_t sub_10054FBC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10097F1D0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v10 = *(void **)(v3 + 16);
  type metadata accessor for SDAirDropContentHandlerUtilities();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  id v13 = v10;
  sub_10039FAA0(a1, v10, 1, a3);

  return sub_10024DFE8((uint64_t)v9);
}

uint64_t type metadata accessor for SDAirDropContentHandlerContacts()
{
  return self;
}

uint64_t sub_10054FD28@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SDAirDropContentHandlerContacts();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_10054FD60(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10024DEC4;
  return sub_10054F468(a1);
}

uint64_t sub_10054FDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10054FBC0(a1, a2, a3);
}

void sub_10054FE20(uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  sub_10000A844(&qword_10096D760);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)(inited + 32) = 0x544341544E4F43;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(void *)(inited + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 95;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x544341544E4F43;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  if (v3 > 1)
  {
    v7._countAndFlagsBits = 0x4C4152554C505FLL;
    v7._object = (void *)0xE700000000000000;
    String.append(_:)(v7);
  }
  swift_bridgeObjectRelease();
  if (a2)
  {
    v8._countAndFlagsBits = 0x4C4154495041435FLL;
    v8._object = (void *)0xEC00000044455A49;
    String.append(_:)(v8);
  }
  v9._countAndFlagsBits = 0x545845545FLL;
  v9._object = (void *)0xE500000000000000;
  String.append(_:)(v9);
  swift_setDeallocating();
  sub_10000A844((uint64_t *)&unk_100977CB0);
  swift_arrayDestroy();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = (id)SFLocalizedStringForKey();

  if (v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000A844((uint64_t *)&unk_10096EE60);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10076E7A0;
    *(void *)(v12 + 56) = &type metadata for Int;
    *(void *)(v12 + 64) = &protocol witness table for Int;
    *(void *)(v12 + 32) = v3;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100550068(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  sub_10000A844(&qword_100978938);
  v3[6] = swift_task_alloc();
  uint64_t v4 = sub_10000A844(&qword_100978940);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDrop.TransferType();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1005501BC, 0, 0);
}

uint64_t sub_1005501BC()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  SFAirDropSend.Request.type.getter();
  char v4 = SFAirDrop.TransferType.isOnlyExchange.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    NSString v10 = (uint64_t (*)(void *))v0[1];
    return v10(v5);
  }
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[6];
  SFAirDropSend.Request.urlsPromise.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1)
  {
    sub_1005506F4(v0[6]);
    uint64_t v9 = SFAirDropSend.Request.urls.getter();
    if (v9)
    {
      uint64_t v5 = (void *)v9;
      goto LABEL_6;
    }
    uint64_t v17 = type metadata accessor for SFAirDropSend.Failure();
    sub_10039C4D0();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 8) + 104))(v18, enum case for SFAirDropSend.Failure.badRequest(_:), v17);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  else
  {
    uint64_t v13 = v0[3];
    unint64_t v12 = v0[4];
    (*(void (**)(void, void, void))(v0[8] + 32))(v0[9], v0[6], v0[7]);
    sub_10000A844(&qword_100978C28);
    uint64_t v14 = swift_allocObject();
    v0[13] = v14;
    *(_OWORD *)(v14 + 16) = xmmword_10076E7A0;
    *(void *)(v14 + 32) = v13;
    *(void *)(v14 + 40) = v12;
    sub_100278C78(v13, v12);
    uint64_t v15 = (void *)swift_task_alloc();
    v0[14] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100550480;
    uint64_t v16 = v0[7];
    return SFXPCBlock.dynamicallyCall(withArguments:)(v0 + 2, v14, v16);
  }
}

uint64_t sub_100550480()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_100550658;
  }
  else {
    uint64_t v2 = sub_1005505B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005505B4()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  uint64_t v1 = v0[2];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_100550658()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1005506F4(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_100978938);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100550754()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100978C30);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100978C30);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10055081C(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.AskRequest();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  return _swift_task_switch(sub_1005509DC, v6, 0);
}

uint64_t sub_1005509DC()
{
  uint64_t v61 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v1, v3);
  uint64_t v7 = v0[15];
  uint64_t v8 = v0[12];
  uint64_t v9 = v0[13];
  if (!v5)
  {
    (*(void (**)(void, void))(v9 + 8))(v0[15], v0[12]);
    BOOL v12 = 0;
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)(SFAirDropReceive.AskRequest.urlItems.getter() + 16);
  swift_bridgeObjectRelease();
  id v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v11(v7, v8);
  if (v10)
  {
    BOOL v12 = 0;
    goto LABEL_18;
  }
  uint64_t v49 = v6;
  uint64_t v51 = v11;
  uint64_t v13 = SFAirDropReceive.AskRequest.files.getter();
  *(void *)os_log_type_t type = *(void *)(v13 + 16);
  if (*(void *)type)
  {
    uint64_t v15 = v0[10];
    uint64_t v14 = v0[11];
    uint64_t v16 = v0[9];
    uint64_t v17 = v13;
    unint64_t v55 = v13 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v53 = *(void (**)(uint64_t))(v15 + 16);
    v53(v14);
    SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    int v19 = SFIsCalendarEvent();

    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v20(v14, v16);
    if (!v19)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      BOOL v12 = 0;
      goto LABEL_18;
    }
    uint64_t v57 = v17;
    uint64_t v52 = v0[10];
    unint64_t v21 = 1;
    while (*(void *)type != v21)
    {
      if (v21 >= *(void *)(v57 + 16))
      {
        __break(1u);
        swift_once();
        uint64_t v28 = v0[14];
        uint64_t v29 = v0[12];
        uint64_t v30 = v0[4];
        uint64_t v31 = type metadata accessor for Logger();
        sub_10000B47C(v31, (uint64_t)qword_100978C30);
        v49(v28, v30, v29);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.error.getter();
        BOOL v34 = os_log_type_enabled(v32, v33);
        uint64_t v35 = v0[14];
        uint64_t v36 = v0[12];
        if (v34)
        {
          os_log_type_t typea = v33;
          uint64_t v38 = v0[7];
          uint64_t v37 = v0[8];
          uint64_t v39 = v0[6];
          uint64_t v50 = v0[12];
          uint64_t v40 = swift_slowAlloc();
          uint64_t v56 = (void *)swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 136315394;
          os_log_t log = v32;
          SFAirDropReceive.AskRequest.id.getter();
          sub_100552908(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
          uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v43 = v42;
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
          v0[2] = sub_100254634(v41, v43, &v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v51(v35, v50);
          *(_WORD *)(v40 + 12) = 2112;
          swift_errorRetain();
          uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
          v0[3] = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v56 = v44;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, log, typea, "Failed to get Calendar app for ask request %s: %@", (uint8_t *)v40, 0x16u);
          sub_10000A844(&qword_10096B850);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          v51(v35, v36);
          swift_errorRelease();
          swift_errorRelease();
        }
        goto LABEL_17;
      }
      uint64_t v22 = v0[11];
      uint64_t v23 = v0[9];
      ((void (*)(uint64_t, unint64_t, uint64_t))v53)(v22, v55 + *(void *)(v52 + 72) * v21++, v23);
      SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v25 = SFIsCalendarEvent();

      v20(v22, v23);
      if ((v25 & 1) == 0) {
        goto LABEL_15;
      }
    }
  }
  swift_bridgeObjectRelease();
  id v26 = objc_allocWithZone((Class)LSApplicationRecord);
  id v27 = sub_1006A5458(0xD000000000000013, 0x80000001007C13E0, 1);
  uint64_t v45 = v0[5];
  uint64_t v46 = *(void **)(v45 + 16);
  *(void *)(v45 + 16) = v27;

LABEL_17:
  BOOL v12 = *(void *)(v0[5] + 16) != 0;
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v47 = (uint64_t (*)(BOOL))v0[1];
  return v47(v12);
}

uint64_t sub_100550FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  sub_10000A844(&qword_100970D80);
  v4[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CodableError();
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v6 = sub_10000A844(&qword_1009700B0);
  v4[18] = v6;
  v4[19] = *(void *)(v6 - 8);
  v4[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v4[21] = v7;
  v4[22] = *(void *)(v7 - 8);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  sub_10000A844(&qword_1009700B8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096AC10);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v8 = static AirDropActor.shared;
  return _swift_task_switch(sub_100551280, v8, 0);
}

uint64_t sub_100551280()
{
  uint64_t v130 = v0;
  uint64_t v111 = (_OWORD *)(v0 + 16);
  uint64_t v115 = (id *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v6 = *(void **)(*(void *)(v0 + 104) + 16);
  id v7 = [objc_allocWithZone((Class)EKEventStore) init];
  uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v118(v1, 1, 1, v2);
  uint64_t v119 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v120 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  uint64_t v8 = (void (**)(void, char *, void))(v3 + 32);
  uint64_t v116 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v117 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  double v9 = (double)((uint64_t)v6 + 1);
  uint64_t v109 = v3;
  uint64_t v10 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  id v11 = v6;
  uint64_t v12 = v5;
  uint64_t v125 = v10;
  swift_bridgeObjectRetain();
  uint64_t v108 = 0;
  id v13 = 0;
  uint64_t v110 = v7;
  id v113 = v11;
  uint64_t v114 = v8;
  uint64_t v112 = v5;
  BOOL v14 = v11 == 0;
  if (v11) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v15 = v12;
  v118(*(void *)(v0 + 264), 1, 1, *(void *)(v0 + 168));
  id v16 = v11;
LABEL_6:
  uint64_t v19 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 144);
  sub_10000A7E8(*(void *)(v0 + 264), (uint64_t *)&unk_10096AC10);
  (*v116)(v19, 1, 1, v20);
  while (1)
  {
    uint64_t v31 = *(void *)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 144);
    sub_10024D388(*(void *)(v0 + 224), v31, &qword_1009700B8);
    if ((*v117)(v31, 1, v32) == 1) {
      break;
    }
    os_log_type_t v33 = *(char **)(v0 + 232);
    uint64_t v122 = *(void *)v33;
    id v124 = v16;
    (*v8)(*(void *)(v0 + 200), &v33[*(int *)(v15 + 48)], *(void *)(v0 + 168));
    uint64_t v34 = Data.init(contentsOf:options:)();
    unint64_t v36 = v35;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v38 = [v7 defaultCalendarForNewEvents];
    id v39 = [v7 importICSData:isa intoCalendar:v38 options:0];

    if (v39)
    {
      uint64_t v127 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v127 = 0;
    }
    if (qword_100969F48 != -1) {
      swift_once();
    }
    uint64_t v40 = *(void *)(v0 + 192);
    uint64_t v41 = *(void *)(v0 + 200);
    uint64_t v42 = *(void *)(v0 + 168);
    uint64_t v43 = type metadata accessor for Logger();
    sub_10000B47C(v43, (uint64_t)qword_100978C30);
    (*v119)(v40, v41, v42);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = *(void *)(v0 + 192);
    uint64_t v48 = *(void *)(v0 + 168);
    if (v46)
    {
      uint64_t v49 = swift_slowAlloc();
      v129[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136315138;
      sub_100552908((unint64_t *)&qword_10096B590, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v49 + 4) = sub_100254634(v50, v51, v129);
      swift_bridgeObjectRelease();
      uint64_t v121 = *v125;
      (*v125)(v47, v48);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Calendar Events data was imported from %s", (uint8_t *)v49, 0xCu);
      swift_arrayDestroy();
      id v7 = v110;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v121 = *v125;
      (*v125)(*(void *)(v0 + 192), *(void *)(v0 + 168));
    }

    id v11 = v113;
    uint64_t v52 = *(void *)(v0 + 248);
    uint64_t v53 = *(void *)(v0 + 168);
    sub_1003AFF3C(*(void *)(v0 + 272), v52);
    int v54 = (*v120)(v52, 1, v53);
    uint64_t v55 = *(void *)(v0 + 248);
    uint64_t v8 = v114;
    if (v54 != 1)
    {
      sub_100250CC4(v34, v36);
      swift_bridgeObjectRelease();
      uint64_t v56 = v55;
      uint64_t v57 = (uint64_t *)&unk_10096AC10;
      goto LABEL_30;
    }
    sub_10000A7E8(*(void *)(v0 + 248), (uint64_t *)&unk_10096AC10);
    if (!v127)
    {
      uint64_t v58 = v0 + 16;
      *uint64_t v111 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
LABEL_29:
      sub_100250CC4(v34, v36);
      uint64_t v56 = v58;
      uint64_t v57 = (uint64_t *)&unk_10096AC20;
LABEL_30:
      sub_10000A7E8(v56, v57);
      goto LABEL_31;
    }
    if (*(void *)(v127 + 16))
    {
      sub_10024D2D4(v127 + 32, (uint64_t)v111);
    }
    else
    {
      *uint64_t v111 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease();
    uint64_t v58 = v0 + 16;
    if (!*(void *)(v0 + 40)) {
      goto LABEL_29;
    }
    sub_1005528C8();
    if (swift_dynamicCast())
    {
      id v59 = *v115;
      id v60 = [*v115 externalURL];
      if (v60)
      {
        uint64_t v61 = v60;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        sub_100250CC4(v34, v36);

        uint64_t v62 = 0;
      }
      else
      {
        sub_100250CC4(v34, v36);
        uint64_t v62 = 1;
      }
      uint64_t v66 = *(void *)(v0 + 272);
      uint64_t v67 = *(void *)(v0 + 240);
      uint64_t v68 = *(void *)(v0 + 168);

      sub_10000A7E8(v66, (uint64_t *)&unk_10096AC10);
      v118(v67, v62, 1, v68);
      sub_10024D388(v67, v66, (uint64_t *)&unk_10096AC10);
    }
    else
    {
      sub_100250CC4(v34, v36);
    }
LABEL_31:
    uint64_t v12 = v112;
    id v13 = v124;
    if (__OFADD__(v122, 1))
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      swift_once();
      uint64_t v73 = *(void *)(v0 + 200);
      uint64_t v74 = *(void *)(v0 + 184);
      uint64_t v75 = *(void *)(v0 + 168);
      uint64_t v76 = type metadata accessor for Logger();
      sub_10000B47C(v76, (uint64_t)qword_100978C30);
      (*v119)(v74, v73, v75);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      BOOL v79 = os_log_type_enabled(v77, v78);
      uint64_t v80 = *(void *)(v0 + 184);
      uint64_t v81 = *(void *)(v0 + 168);
      if (v79)
      {
        uint64_t v82 = swift_slowAlloc();
        uint64_t v123 = (void *)swift_slowAlloc();
        v129[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v82 = 136315394;
        sub_100552908((unint64_t *)&qword_10096B590, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 56) = sub_100254634(v83, v84, v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v128 = *v125;
        (*v125)(v80, v81);
        *(_WORD *)(v82 + 12) = 2112;
        swift_errorRetain();
        uint64_t v85 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 64) = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v123 = v85;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "processCalendarEvents failed to load data for file: %s with error: %@", (uint8_t *)v82, 0x16u);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        id v7 = v110;
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v128 = *v125;
        (*v125)(*(void *)(v0 + 184), *(void *)(v0 + 168));
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v93 = *(void *)(v0 + 128);
      *(void *)(v0 + 48) = v12;
      swift_errorRetain();
      sub_10000A844(&qword_10096BAF0);
      char v94 = swift_dynamicCast();
      uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56);
      if (v94)
      {
        uint64_t v97 = *(void *)(v0 + 128);
        uint64_t v96 = *(void *)(v0 + 136);
        uint64_t v98 = *(void *)(v0 + 112);
        uint64_t v99 = *(void *)(v0 + 120);
        v95(v98, 0, 1, v99);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32))(v96, v98, v99);
        uint64_t v100 = type metadata accessor for SFAirDropReceive.Failure();
        sub_100552908(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
        swift_allocError();
        uint64_t v102 = v101;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v101, v96, v99);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v100 - 8) + 104))(v102, enum case for SFAirDropReceive.Failure.unexpected(_:), v100);
        swift_willThrow();

        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v96, v99);
      }
      else
      {
        uint64_t v103 = *(void *)(v0 + 112);
        v95(v103, 1, 1, *(void *)(v0 + 120));
        sub_10000A7E8(v103, &qword_100970D80);
        uint64_t v104 = type metadata accessor for SFAirDropReceive.Failure();
        sub_100552908(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v104 - 8) + 104))(v105, enum case for SFAirDropReceive.Failure.moveToAppFailed(_:), v104);
        swift_willThrow();

        swift_errorRelease();
      }
      uint64_t v106 = *(void *)(v0 + 272);
      v128(*(void *)(v0 + 200), *(void *)(v0 + 168));
      sub_10000A7E8(v106, (uint64_t *)&unk_10096AC10);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v92 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_48;
    }
    uint64_t v63 = *(void *)(v0 + 200);
    uint64_t v64 = *(void *)(v0 + 168);
    uint64_t v65 = *(void (**)(uint64_t *))(v0 + 88);
    *(double *)uint64_t v129 = (double)(v122 + 1) / v9;
    v65(v129);
    v121(v63, v64);
    BOOL v14 = v124 >= v113;
    if (v124 == v113) {
      goto LABEL_2;
    }
LABEL_3:
    if (v14) {
      goto LABEL_52;
    }
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v18 = *(void *)(v0 + 168);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v109 + 16))(v17, *(void *)(v0 + 104)+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(void *)(v109 + 72) * (void)v13, v18);
    id v16 = (char *)v13 + 1;
    v118(v17, 0, 1, v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v17, 1, v18) == 1)
    {
      uint64_t v15 = v12;
      goto LABEL_6;
    }
    id v21 = v7;
    id v7 = v16;
    uint64_t v22 = *(char **)(v0 + 216);
    uint64_t v23 = *(void *)(v0 + 160);
    uint64_t v24 = *(void *)(v0 + 168);
    char v25 = (void (*)(char *, char *, uint64_t))*v8;
    (*v8)(v22, *(char **)(v0 + 264), v24);
    id v26 = (char *)(v23 + *(int *)(v12 + 48));
    v25(v26, v22, v24);
    uint64_t v27 = v12;
    uint64_t v12 = v108 + 1;
    if (__OFADD__(v108, 1)) {
      goto LABEL_53;
    }
    uint64_t v28 = *(void **)(v0 + 224);
    uint64_t v29 = *(void *)(v0 + 168);
    uint64_t v126 = *(void *)(v0 + 144);
    uint64_t v15 = v27;
    uint64_t v30 = (char *)v28 + *(int *)(v27 + 48);
    *uint64_t v28 = v108;
    v25(v30, v26, v29);
    (*v116)((uint64_t)v28, 0, 1, v126);
    ++v108;
    id v16 = v7;
    id v7 = v21;
  }
  uint64_t v69 = *(void *)(v0 + 272);
  uint64_t v70 = *(void *)(v0 + 256);
  uint64_t v71 = *(void *)(v0 + 168);
  swift_bridgeObjectRelease();
  sub_1003AFF3C(v69, v70);
  if ((*v120)(v70, 1, v71) == 1)
  {
    sub_10000A7E8(*(void *)(v0 + 256), (uint64_t *)&unk_10096AC10);
    uint64_t v72 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v86 = *(void *)(v0 + 208);
    uint64_t v87 = *(void *)(v0 + 168);
    uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 32);
    v88(v86, *(void *)(v0 + 256), v87);
    sub_10000A844(&qword_10096B358);
    unint64_t v89 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
    uint64_t v72 = (void *)swift_allocObject();
    *((_OWORD *)v72 + 1) = xmmword_10076E7A0;
    v88((uint64_t)v72 + v89, v86, v87);
  }
  uint64_t v90 = *(void *)(v0 + 272);
  uint64_t v91 = *(void **)(v0 + 80);

  sub_10000A7E8(v90, (uint64_t *)&unk_10096AC10);
  *uint64_t v91 = v72;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v92 = *(uint64_t (**)(void))(v0 + 8);
LABEL_48:
  return v92();
}

uint64_t sub_100552250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10097F1D0);
  __chkstk_darwin(v7 - 8);
  double v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v3 + 16);
  type metadata accessor for SDAirDropContentHandlerUtilities();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  id v13 = v10;
  sub_10039FAA0(a1, v10, 1, a3);

  return sub_10000A7E8((uint64_t)v9, (uint64_t *)&unk_10097F1D0);
}

uint64_t type metadata accessor for SDAirDropContentHandlerCalendarEvents()
{
  return self;
}

uint64_t sub_1005523C8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SDAirDropContentHandlerCalendarEvents();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_100552400(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10024DEC4;
  return sub_10055081C(a1);
}

uint64_t sub_10055249C(uint64_t a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  sub_10000A844((uint64_t *)&unk_10096C8B0);
  return SFProgressTask.init(_:initialProgress:operation:file:line:)();
}

uint64_t sub_10055256C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100552250(a1, a2, a3);
}

void sub_100552590(uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  sub_10000A844(&qword_10096D760);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)(inited + 32) = 0x5241444E454C4143;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 95;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x5241444E454C4143;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  if (v3 > 1)
  {
    v7._countAndFlagsBits = 0x4C4152554C505FLL;
    v7._object = (void *)0xE700000000000000;
    String.append(_:)(v7);
  }
  swift_bridgeObjectRelease();
  if (a2)
  {
    v8._countAndFlagsBits = 0x4C4154495041435FLL;
    v8._object = (void *)0xEC00000044455A49;
    String.append(_:)(v8);
  }
  v9._countAndFlagsBits = 0x545845545FLL;
  v9._object = (void *)0xE500000000000000;
  String.append(_:)(v9);
  swift_setDeallocating();
  sub_10000A844((uint64_t *)&unk_100977CB0);
  swift_arrayDestroy();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = (id)SFLocalizedStringForKey();

  if (v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000A844((uint64_t *)&unk_10096EE60);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10076E7A0;
    *(void *)(v12 + 56) = &type metadata for Int;
    *(void *)(v12 + 64) = &protocol witness table for Int;
    *(void *)(v12 + 32) = v3;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1005527D8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100552810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  Swift::String v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *Swift::String v9 = v4;
  v9[1] = sub_10000A6F4;
  return sub_100550FC0(a1, a2, a3, v8);
}

unint64_t sub_1005528C8()
{
  unint64_t result = qword_100978D50;
  if (!qword_100978D50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100978D50);
  }
  return result;
}

uint64_t sub_100552908(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100552950(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    Swift::String v9 = (char *)a1 + v8;
    NSString v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CodableError();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_100552A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CodableError();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_100552B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_100552BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_100552C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_100552D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100552DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100552DF4);
}

uint64_t sub_100552DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for CodableError();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100552EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100552F00);
}

uint64_t sub_100552F00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for CodableError();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t _s14descr1008C9841V12ErrorRequestVMa()
{
  uint64_t result = qword_100978DB0;
  if (!qword_100978DB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100553050()
{
  uint64_t result = type metadata accessor for SFAirDrop.TransferIdentifier();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CodableError();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100553118(char *a1, char *a2)
{
  return sub_1005E8A8C(*a1, *a2);
}

Swift::Int sub_100553124()
{
  return Hasher._finalize()();
}

uint64_t sub_1005531A8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100553218()
{
  return Hasher._finalize()();
}

uint64_t sub_100553298@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008D31B0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1005532F8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x726566736E617254;
  if (*v1) {
    uint64_t v2 = 0x726F727245;
  }
  unint64_t v3 = 0xEA00000000004449;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100553338()
{
  if (*v0) {
    return 0x726F727245;
  }
  else {
    return 0x726566736E617254;
  }
}

uint64_t sub_100553374@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008D31B0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1005533D8(uint64_t a1)
{
  unint64_t v2 = sub_100553D54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100553414(uint64_t a1)
{
  unint64_t v2 = sub_100553D54();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100553450()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_100553E68(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 2108704;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  _s14descr1008C9841V12ErrorRequestVMa();
  type metadata accessor for CodableError();
  sub_100553E68(&qword_100978DE8, (void (*)(uint64_t))&type metadata accessor for CodableError);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

uint64_t sub_1005535A4(void *a1)
{
  uint64_t v3 = sub_10000A844(&qword_100978E08);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10026BB6C(a1, a1[3]);
  sub_100553D54();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_100553E68(&qword_100974D38, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    _s14descr1008C9841V12ErrorRequestVMa();
    v8[14] = 1;
    type metadata accessor for CodableError();
    sub_100553E68(&qword_100978E10, (void (*)(uint64_t))&type metadata accessor for CodableError);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1005537A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for CodableError();
  uint64_t v21 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v23 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  char v25 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000A844(&qword_100978DF0);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _s14descr1008C9841V12ErrorRequestVMa();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10026BB6C(a1, a1[3]);
  sub_100553D54();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10024D338((uint64_t)a1);
  }
  uint64_t v20 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v23;
  uint64_t v13 = v24;
  char v30 = 0;
  sub_100553E68(&qword_100974D28, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  uint64_t v15 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  id v16 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v19 = (uint64_t)v12;
  v16(v12, v15, v27);
  char v29 = 1;
  sub_100553E68(&qword_100978E00, (void (*)(uint64_t))&type metadata accessor for CodableError);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v28);
  uint64_t v17 = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v19 + *(int *)(v20 + 20), v5, v13);
  sub_100553DA8(v17, v22);
  sub_10024D338((uint64_t)a1);
  return sub_100553E0C(v17);
}

uint64_t sub_100553BC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005537A4(a1, a2);
}

uint64_t sub_100553BD8(void *a1)
{
  return sub_1005535A4(a1);
}

uint64_t sub_100553BF0()
{
  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x80000001007C1400;
  v0._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v0);
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_100553E68(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 2108704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  type metadata accessor for CodableError();
  sub_100553E68(&qword_100978DE8, (void (*)(uint64_t))&type metadata accessor for CodableError);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return 0;
}

unint64_t sub_100553D54()
{
  unint64_t result = qword_100978DF8;
  if (!qword_100978DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978DF8);
  }
  return result;
}

uint64_t sub_100553DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s14descr1008C9841V12ErrorRequestVMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100553E0C(uint64_t a1)
{
  uint64_t v2 = _s14descr1008C9841V12ErrorRequestVMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100553E68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s14descr1008C9841V12ErrorRequestV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100553F7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s14descr1008C9841V12ErrorRequestV10CodingKeysOMa()
{
  return &_s14descr1008C9841V12ErrorRequestV10CodingKeysON;
}

unint64_t sub_100553FB8()
{
  unint64_t result = qword_100978E18;
  if (!qword_100978E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978E18);
  }
  return result;
}

unint64_t sub_100554010()
{
  unint64_t result = qword_100978E20;
  if (!qword_100978E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978E20);
  }
  return result;
}

unint64_t sub_100554068()
{
  unint64_t result = qword_100978E28;
  if (!qword_100978E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100978E28);
  }
  return result;
}

uint64_t sub_1005540BC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100978E30);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100978E30);
  if (qword_100969CD8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_1009946D8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100554184()
{
  return sub_100554200(_s27GuestModeUnlockRegistrationV18InitialLockContextVMa, (Class *)off_1008C6900);
}

uint64_t sub_1005541B8(uint64_t a1, uint64_t a2)
{
  return sub_100555508(a1, a2, (uint64_t)_s27GuestModeUnlockRegistrationV18InitialLockContextVMa, (uint64_t)off_1008C6900, (uint64_t (*)(uint64_t, uint64_t))sub_100554200);
}

id sub_100554200(uint64_t (*a1)(void), Class *a2)
{
  uint64_t v4 = *(int *)(a1(0) + 24);
  uint64_t v5 = *(void **)(v2 + v4);
  if (v5)
  {
    id v6 = *(id *)(v2 + v4);
LABEL_5:
    id v8 = v5;
    return v6;
  }
  id result = [objc_allocWithZone(*a2) init];
  if (result)
  {
    *(void *)(v2 + v4) = result;
    id v6 = result;
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100554280@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1007709D0;
  if (qword_100969F58 != -1) {
    swift_once();
  }
  *(void *)(v4 + 56) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v4 + 64) = &off_100971848;
  *(void *)(v4 + 96) = &type metadata for SDAuthentication.Operation.IncludeAKSTokenInRegistrationResponseMessage;
  *(void *)(v4 + 104) = &off_100971688;
  *(void *)(v4 + 136) = &type metadata for SDAuthentication.Operation.BuildMessageHeader;
  *(void *)(v4 + 144) = &off_100971928;
  *a2 = v4;
  uint64_t v5 = (int *)_s27GuestModeUnlockRegistrationV17InitialKeyContextVMa(0);
  *(uint64_t *)((char *)a2 + v5[6]) = 0;
  *((unsigned char *)a2 + v5[7]) = 4;
  if (qword_100969F50 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000B47C(v6, (uint64_t)qword_100978E30);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Start authentication Key registration", v9, 2u);
    swift_slowDealloc();
  }

  return sub_100556944(a1, (uint64_t)a2 + v5[5], (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_100978FD0);
}

id sub_100554464()
{
  return sub_100554200(_s27GuestModeUnlockRegistrationV17InitialKeyContextVMa, (Class *)off_1008C6908);
}

uint64_t sub_100554498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005569AC(v2 + *(int *)(a1 + 20), a2, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t sub_1005544D0(uint64_t a1, uint64_t a2)
{
  return sub_100555508(a1, a2, (uint64_t)_s27GuestModeUnlockRegistrationV17InitialKeyContextVMa, (uint64_t)off_1008C6908, (uint64_t (*)(uint64_t, uint64_t))sub_100554200);
}

void sub_100554518(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v6 = type metadata accessor for SDAuthenticationSessionMetrics();
  __chkstk_darwin(v6 - 8);
  uint64_t v33 = (uint64_t)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096BBB0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100770AD0;
  if (qword_100969F58 != -1) {
    swift_once();
  }
  *(void *)(v8 + 56) = &type metadata for SDAuthentication.Operation.StepRegisterResponseToken;
  *(void *)(v8 + 64) = &off_100971E68;
  *(void *)(v8 + 96) = &type metadata for SDAuthentication.Operation.BuildMessageHeader;
  *(void *)(v8 + 104) = &off_100971928;
  *a3 = v8;
  uint64_t v9 = (int *)_s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa(0);
  uint64_t v10 = v9[7];
  *(uint64_t *)((char *)a3 + v10) = 0;
  *((unsigned char *)a3 + v9[8]) = 6;
  if (qword_100969F50 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000B47C(v11, (uint64_t)qword_100978E30);
  id v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v32 = v3;
    id v16 = (uint8_t *)v15;
    char v29 = (void *)swift_slowAlloc();
    *(_DWORD *)id v16 = 138412290;
    uint64_t v30 = v10;
    id v35 = v12;
    id v17 = v12;
    uint64_t v31 = v9;
    id v18 = v17;
    uint64_t v10 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v29 = v12;

    uint64_t v9 = v31;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Handling authentication registration pairing response: %@", v16, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v19 = [v12 token];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    uint64_t v24 = (uint64_t *)((char *)a3 + v9[6]);
    *uint64_t v24 = v21;
    v24[1] = v23;
    uint64_t v25 = _s27GuestModeUnlockRegistrationV18InitialLockContextVMa(0);
    uint64_t v27 = v33;
    uint64_t v26 = v34;
    sub_1005569AC(v34 + *(int *)(v25 + 20), v33, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    sub_100556A14(v26, _s27GuestModeUnlockRegistrationV18InitialLockContextVMa);
    sub_100556944(v27, (uint64_t)a3 + v9[5], (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v28 = 10;
    strcpy((char *)(v28 + 8), "Missing token");
    *(_WORD *)(v28 + 22) = -4864;
    swift_willThrow();

    sub_100556A14(v34, _s27GuestModeUnlockRegistrationV18InitialLockContextVMa);
    swift_bridgeObjectRelease();
  }
}

id sub_100554910()
{
  return sub_10055498C(_s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa, (Class *)off_1008C68F0);
}

uint64_t sub_100554944(uint64_t a1, uint64_t a2)
{
  return sub_100555508(a1, a2, (uint64_t)_s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa, (uint64_t)off_1008C68F0, (uint64_t (*)(uint64_t, uint64_t))sub_10055498C);
}

id sub_10055498C(uint64_t (*a1)(void), Class *a2)
{
  uint64_t v4 = *(int *)(a1(0) + 28);
  uint64_t v5 = *(void **)(v2 + v4);
  if (v5)
  {
    id v6 = *(id *)(v2 + v4);
LABEL_5:
    id v8 = v5;
    return v6;
  }
  id result = [objc_allocWithZone(*a2) init];
  if (result)
  {
    *(void *)(v2 + v4) = result;
    id v6 = result;
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_100554A0C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics();
  __chkstk_darwin(v7 - 8);
  uint64_t v40 = (uint64_t)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096BBB0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100770AD0;
  if (qword_100969F58 != -1) {
    swift_once();
  }
  *(void *)(v9 + 56) = &type metadata for SDAuthentication.Operation.StepRegistrationCreateSecret;
  *(void *)(v9 + 64) = &off_100971E48;
  *(void *)(v9 + 96) = &type metadata for SDAuthentication.Operation.BuildMessageHeader;
  *(void *)(v9 + 104) = &off_100971928;
  *a3 = v9;
  uint64_t SecretContextVMa = _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa(0);
  uint64_t v11 = *(int *)(SecretContextVMa + 28);
  *(uint64_t *)((char *)a3 + v11) = 0;
  uint64_t v39 = SecretContextVMa;
  *((unsigned char *)a3 + *(int *)(SecretContextVMa + 32)) = 5;
  if (qword_100969F50 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000B47C(v12, (uint64_t)qword_100978E30);
  id v13 = a1;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v34[0] = a3;
    uint64_t v36 = v11;
    uint64_t v37 = a2;
    uint64_t v38 = v3;
    uint64_t v16 = swift_slowAlloc();
    id v17 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v43 = v35;
    *(_DWORD *)uint64_t v16 = 138412546;
    uint64_t v41 = (uint64_t)v13;
    id v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v34[1] = v17;
    *id v17 = v13;

    *(_WORD *)(v16 + 12) = 2080;
    id v19 = [v18 sessionID];
    if (v19)
    {
      uint64_t v20 = v19;
      unint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;
    }
    else
    {
      uint64_t v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v23 = 0x80000001007B7770;
      unint64_t v21 = 0xD000000000000015;
    }
    uint64_t v41 = sub_100254634(v21, v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Received authentication registration create secret: %@ for sessionID %s", (uint8_t *)v16, 0x16u);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v37;
    uint64_t v11 = v36;
    a3 = (uint64_t *)v34[0];
  }
  else
  {
  }
  id v24 = [v13 token];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    uint64_t v29 = v39;
    uint64_t v30 = (uint64_t *)((char *)a3 + *(int *)(v39 + 24));
    *uint64_t v30 = v26;
    v30[1] = v28;
    uint64_t v31 = _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa(0);
    uint64_t v32 = v40;
    sub_1005569AC(a2 + *(int *)(v31 + 20), v40, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    sub_100556A14(a2, _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa);
    sub_100556944(v32, (uint64_t)a3 + *(int *)(v29 + 20), (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v33 = 10;
    strcpy((char *)(v33 + 8), "Missing token");
    *(_WORD *)(v33 + 22) = -4864;
    swift_willThrow();

    sub_100556A14(a2, _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa);
    swift_bridgeObjectRelease();
  }
}

id sub_100554EFC()
{
  return sub_10055498C(_s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa, (Class *)off_1008C68E8);
}

uint64_t sub_100554F30(uint64_t a1, uint64_t a2)
{
  return sub_100555508(a1, a2, (uint64_t)_s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa, (uint64_t)off_1008C68E8, (uint64_t (*)(uint64_t, uint64_t))sub_10055498C);
}

void sub_100554F78(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics();
  __chkstk_darwin(v7 - 8);
  uint64_t v40 = (uint64_t)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096BBB0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100771F40;
  if (qword_100969F58 != -1) {
    swift_once();
  }
  *(void *)(v9 + 56) = &type metadata for SDAuthentication.Operation.FinalizeRegistration;
  *(void *)(v9 + 64) = &off_100971E28;
  *(void *)(v9 + 96) = &type metadata for SDAuthentication.Operation.SendConfirmation;
  *(void *)(v9 + 104) = &off_100971EC8;
  *(void *)(v9 + 136) = &type metadata for SDAuthentication.Operation.NotifyRegistrationSucceeded;
  *(void *)(v9 + 144) = &off_100971E08;
  *(void *)(v9 + 176) = &type metadata for SDAuthentication.Operation.RecordLastRegistration;
  *(void *)(v9 + 184) = &off_100971DE8;
  *a3 = v9;
  uint64_t RecordContextVMa = _s27GuestModeUnlockRegistrationV32HandlePairingCreateRecordContextVMa(0);
  uint64_t v11 = *(int *)(RecordContextVMa + 28);
  *(uint64_t *)((char *)a3 + v11) = 0;
  uint64_t v39 = RecordContextVMa;
  *((unsigned char *)a3 + *(int *)(RecordContextVMa + 32)) = 2;
  if (qword_100969F50 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000B47C(v12, (uint64_t)qword_100978E30);
  id v13 = a1;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v34[0] = a3;
    uint64_t v36 = v11;
    uint64_t v37 = a2;
    uint64_t v38 = v3;
    uint64_t v16 = swift_slowAlloc();
    id v17 = (void *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v43 = v35;
    *(_DWORD *)uint64_t v16 = 138412546;
    uint64_t v41 = (uint64_t)v13;
    id v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v34[1] = v17;
    *id v17 = v13;

    *(_WORD *)(v16 + 12) = 2080;
    id v19 = [v18 sessionID];
    if (v19)
    {
      uint64_t v20 = v19;
      unint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;
    }
    else
    {
      unint64_t v21 = 0xD000000000000015;
      uint64_t v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v23 = 0x80000001007B7770;
    }
    uint64_t v41 = sub_100254634(v21, v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Received authentication registration create record: %@ for sessionID %s", (uint8_t *)v16, 0x16u);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v37;
    uint64_t v11 = v36;
    a3 = (uint64_t *)v34[0];
  }
  else
  {
  }
  id v24 = [v13 token];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    uint64_t v29 = v39;
    uint64_t v30 = (uint64_t *)((char *)a3 + *(int *)(v39 + 24));
    *uint64_t v30 = v26;
    v30[1] = v28;
    uint64_t v31 = _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa(0);
    uint64_t v32 = v40;
    sub_1005569AC(a2 + *(int *)(v31 + 20), v40, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    sub_100556A14(a2, _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa);
    sub_100556944(v32, (uint64_t)a3 + *(int *)(v29 + 20), (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v33 = 10;
    *(void *)(v33 + 8) = 0xD000000000000058;
    *(void *)(v33 + 16) = 0x80000001007C1580;
    swift_willThrow();

    sub_100556A14(a2, _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa);
    swift_bridgeObjectRelease();
  }
}

id sub_10055548C()
{
  return sub_10055498C(_s27GuestModeUnlockRegistrationV32HandlePairingCreateRecordContextVMa, (Class *)off_1008C68E0);
}

uint64_t sub_1005554C0(uint64_t a1, uint64_t a2)
{
  return sub_100555508(a1, a2, (uint64_t)_s27GuestModeUnlockRegistrationV32HandlePairingCreateRecordContextVMa, (uint64_t)off_1008C68E0, (uint64_t (*)(uint64_t, uint64_t))sub_10055498C);
}

uint64_t sub_100555508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = (void *)a5(a3, a4);
  id v6 = [v5 data];

  if (v6)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return v7;
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 10;
    *(void *)(v9 + 8) = 0xD00000000000001ALL;
    *(void *)(v9 + 16) = 0x80000001007B72F0;
    return swift_willThrow();
  }
}

uint64_t sub_1005555D4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1007709D0;
  if (qword_100969F58 != -1) {
    swift_once();
  }
  *(void *)(v6 + 56) = &type metadata for SDAuthentication.Operation.HandleSucceededResult;
  *(void *)(v6 + 64) = &off_100971EA8;
  *(void *)(v6 + 96) = &type metadata for SDAuthentication.Operation.NotifyRegistrationSucceeded;
  *(void *)(v6 + 104) = &off_100971E08;
  *(void *)(v6 + 136) = &type metadata for SDAuthentication.Operation.RecordLastRegistration;
  *(void *)(v6 + 144) = &off_100971DE8;
  *a3 = v6;
  if ([a1 hasSuccess])
  {
    uint64_t v7 = a2 + *(int *)(_s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa(0) + 20);
    uint64_t v8 = _s27GuestModeUnlockRegistrationV25HandleConfirmationContextVMa(0);
    sub_1005569AC(v7, (uint64_t)a3 + *(int *)(v8 + 20), (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    LOBYTE(v7) = [a1 success];

    uint64_t result = sub_100556A14(a2, _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa);
    *((unsigned char *)a3 + *(int *)(v8 + 24)) = v7;
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 1;
    *(void *)(v10 + 8) = 0xD000000000000016;
    *(void *)(v10 + 16) = 0x80000001007B72D0;
    swift_willThrow();

    sub_100556A14(a2, _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1005557B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v101 = a2;
  uint64_t v96 = a3;
  uint64_t v80 = _s27GuestModeUnlockRegistrationV25HandleConfirmationContextVMa(0);
  __chkstk_darwin(v80);
  unint64_t v84 = (uint64_t *)((char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000A844(&qword_100979060);
  __chkstk_darwin(v5 - 8);
  unint64_t v89 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RecordContextVMa = _s27GuestModeUnlockRegistrationV32HandlePairingCreateRecordContextVMa(0);
  __chkstk_darwin(RecordContextVMa);
  uint64_t v88 = (uint64_t *)((char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000A844(&qword_100979068);
  __chkstk_darwin(v8 - 8);
  uint64_t v95 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SecretContextVMa = _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa(0);
  uint64_t v87 = *(void *)(SecretContextVMa - 8);
  uint64_t v10 = __chkstk_darwin(SecretContextVMa);
  uint64_t v82 = (uint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v83 = (uint64_t)&v80 - v13;
  __chkstk_darwin(v12);
  char v94 = (uint64_t *)((char *)&v80 - v14);
  uint64_t v15 = sub_10000A844(&qword_100979070);
  __chkstk_darwin(v15 - 8);
  id v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa(0);
  uint64_t v98 = *(void *)(v18 - 8);
  uint64_t v99 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v92 = (uint64_t)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v93 = (uint64_t)&v80 - v21;
  uint64_t v97 = _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa(0);
  uint64_t v91 = *(void *)(v97 - 8);
  uint64_t v22 = __chkstk_darwin(v97);
  uint64_t v85 = (uint64_t)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v86 = (uint64_t)&v80 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (uint64_t *)((char *)&v80 - v26);
  uint64_t v28 = sub_10000A844(&qword_100979078);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = _s27GuestModeUnlockRegistrationV18InitialLockContextVMa(0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v80 - v36;
  sub_100278C8C(a1, (uint64_t)v102);
  sub_10000A844(&qword_100977940);
  sub_10000B740(0, &qword_100979080);
  if (swift_dynamicCast())
  {
    id v38 = v103;
    sub_100278C8C(v101, (uint64_t)v102);
    sub_10000A844(&qword_10096BDF0);
    int v39 = swift_dynamicCast();
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    if (v39)
    {
      v40(v30, 0, 1, v31);
      sub_100556944((uint64_t)v30, (uint64_t)v37, _s27GuestModeUnlockRegistrationV18InitialLockContextVMa);
      sub_1005569AC((uint64_t)v37, (uint64_t)v35, _s27GuestModeUnlockRegistrationV18InitialLockContextVMa);
      id v38 = v38;
      uint64_t v41 = v100;
      sub_100554518(v38, (uint64_t)v35, v27);
      if (!v41)
      {
        uint64_t v70 = v96;
        v96[3] = v97;
        v70[4] = (uint64_t)&off_1008DF170;
        uint64_t v71 = sub_100278AE4(v70);
        sub_100556944((uint64_t)v27, (uint64_t)v71, _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa);

        sub_100556A14((uint64_t)v37, _s27GuestModeUnlockRegistrationV18InitialLockContextVMa);
        return;
      }
      unint64_t v42 = _s27GuestModeUnlockRegistrationV18InitialLockContextVMa;
      uint64_t v43 = (uint64_t)v37;
      goto LABEL_20;
    }
    v40(v30, 1, 1, v31);
    sub_10000A7E8((uint64_t)v30, &qword_100979078);
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v53 = 10;
    unint64_t v54 = 0xD000000000000047;
    uint64_t v55 = "Invalid previous context as InitialLockContext, message may be replayed";
LABEL_26:
    *(void *)(v53 + 8) = v54;
    *(void *)(v53 + 16) = (unint64_t)(v55 - 32) | 0x8000000000000000;
    swift_willThrow();
    goto LABEL_27;
  }
  uint64_t v44 = v101;
  sub_100278C8C(a1, (uint64_t)v102);
  sub_10000B740(0, &qword_100979088);
  if (!swift_dynamicCast())
  {
    sub_100278C8C(a1, (uint64_t)v102);
    sub_10000B740(0, &qword_100979090);
    if (swift_dynamicCast())
    {
      id v38 = v103;
      sub_100278C8C(v44, (uint64_t)v102);
      sub_10000A844(&qword_10096BDF0);
      uint64_t v56 = (uint64_t)v95;
      uint64_t v57 = v97;
      int v58 = swift_dynamicCast();
      id v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56);
      if (!v58)
      {
        v59(v56, 1, 1, v57);
        sub_10000A7E8(v56, &qword_100979068);
        sub_10024D280();
        swift_allocError();
        *(_DWORD *)uint64_t v53 = 10;
        unint64_t v54 = 0xD000000000000051;
        uint64_t v55 = "Invalid previous context as HandlePairingResponseContext, message may be replayed";
        goto LABEL_26;
      }
      v59(v56, 0, 1, v57);
      uint64_t v48 = v86;
      sub_100556944(v56, v86, _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa);
      uint64_t v60 = v85;
      sub_1005569AC(v48, v85, _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa);
      id v38 = v38;
      uint64_t v61 = v88;
      uint64_t v62 = v100;
      sub_100554F78(v38, v60, v88);
      if (v62)
      {
        uint64_t v52 = _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa;
        goto LABEL_19;
      }
      uint64_t v76 = v96;
      v96[3] = RecordContextVMa;
      v76[4] = (uint64_t)&off_1008DF1A0;
      uint64_t v77 = sub_100278AE4(v76);
      sub_100556944((uint64_t)v61, (uint64_t)v77, _s27GuestModeUnlockRegistrationV32HandlePairingCreateRecordContextVMa);

      uint64_t v75 = _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa;
    }
    else
    {
      sub_100278C8C(a1, (uint64_t)v102);
      sub_10000B740(0, &qword_10096BDE8);
      if (!swift_dynamicCast())
      {
        sub_10024D280();
        swift_allocError();
        *(_DWORD *)uint64_t v72 = 10;
        *(void *)(v72 + 8) = 0xD00000000000003FLL;
        *(void *)(v72 + 16) = 0x80000001007C1420;
        swift_willThrow();
        return;
      }
      id v38 = v103;
      sub_100278C8C(v44, (uint64_t)v102);
      sub_10000A844(&qword_10096BDF0);
      uint64_t v64 = (uint64_t)v89;
      uint64_t v63 = SecretContextVMa;
      int v65 = swift_dynamicCast();
      uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56);
      if (!v65)
      {
        v66(v64, 1, 1, v63);
        sub_10000A7E8(v64, &qword_100979060);
        sub_10024D280();
        swift_allocError();
        *(_DWORD *)uint64_t v53 = 10;
        unint64_t v54 = 0xD000000000000055;
        uint64_t v55 = "Invalid previous context as HandlePairingCreateSecretContext, message may be replayed";
        goto LABEL_26;
      }
      v66(v64, 0, 1, v63);
      uint64_t v48 = v83;
      sub_100556944(v64, v83, _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa);
      uint64_t v67 = v82;
      sub_1005569AC(v48, v82, _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa);
      id v38 = v38;
      uint64_t v68 = v84;
      uint64_t v69 = v100;
      sub_1005555D4(v38, v67, v84);
      if (v69)
      {
        uint64_t v52 = _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa;
        goto LABEL_19;
      }
      os_log_type_t v78 = v96;
      v96[3] = v80;
      v78[4] = (uint64_t)&off_1008DF1B8;
      BOOL v79 = sub_100278AE4(v78);
      sub_100556944((uint64_t)v68, (uint64_t)v79, _s27GuestModeUnlockRegistrationV25HandleConfirmationContextVMa);

      uint64_t v75 = _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa;
    }
LABEL_31:
    sub_100556A14(v48, v75);
    return;
  }
  id v38 = v103;
  sub_100278C8C(v44, (uint64_t)v102);
  sub_10000A844(&qword_10096BDF0);
  uint64_t v45 = v99;
  int v46 = swift_dynamicCast();
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
  if (!v46)
  {
    v47(v17, 1, 1, v45);
    sub_10000A7E8((uint64_t)v17, &qword_100979070);
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v53 = 10;
    unint64_t v54 = 0xD000000000000050;
    uint64_t v55 = "Invalid previous context as HandlePairingRequestContext, message may be replayed";
    goto LABEL_26;
  }
  v47(v17, 0, 1, v45);
  uint64_t v48 = v93;
  sub_100556944((uint64_t)v17, v93, _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa);
  uint64_t v49 = v92;
  sub_1005569AC(v48, v92, _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa);
  id v38 = v38;
  uint64_t v50 = v94;
  uint64_t v51 = v100;
  sub_100554A0C(v38, v49, v94);
  if (!v51)
  {
    uint64_t v73 = v96;
    v96[3] = SecretContextVMa;
    v73[4] = (uint64_t)&off_1008DF188;
    uint64_t v74 = sub_100278AE4(v73);
    sub_100556944((uint64_t)v50, (uint64_t)v74, _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa);

    uint64_t v75 = _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa;
    goto LABEL_31;
  }
  uint64_t v52 = _s27GuestModeUnlockRegistrationV17InitialKeyContextVMa;
LABEL_19:
  unint64_t v42 = v52;
  uint64_t v43 = v48;
LABEL_20:
  sub_100556A14(v43, v42);
LABEL_27:
}

uint64_t sub_1005564BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1005569AC(v1, a1, (uint64_t (*)(void))type metadata accessor for SDAuthenticationCommonOperationInput);
}

void sub_1005564F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t sub_100556508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10055651C);
}

uint64_t sub_10055651C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1005565E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005565F4);
}

uint64_t sub_1005565F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t _s27GuestModeUnlockRegistrationV4FlowVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_100978EA0);
}

uint64_t sub_1005566D4()
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100556790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005567A4);
}

uint64_t sub_1005567A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005567BC);
}

uint64_t _s27GuestModeUnlockRegistrationV18InitialLockContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_100978F38);
}

uint64_t sub_1005567E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005567F8);
}

uint64_t sub_1005567FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100556810);
}

uint64_t sub_100556814()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s27GuestModeUnlockRegistrationV25HandleConfirmationContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_1009792D0);
}

uint64_t _s27GuestModeUnlockRegistrationV32HandlePairingCreateRecordContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_100979190);
}

uint64_t _s27GuestModeUnlockRegistrationV32HandlePairingCreateSecretContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_100979230);
}

uint64_t _s27GuestModeUnlockRegistrationV28HandlePairingResponseContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_1009790F0);
}

uint64_t sub_100556944(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1005569AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100556A14(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100556A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100556AA0);
}

uint64_t sub_100556AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100556AB8);
}

uint64_t sub_100556AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100556AD4);
}

uint64_t sub_100556AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100556AEC);
}

ValueMetadata *_s27GuestModeUnlockRegistrationVMa()
{
  return &_s27GuestModeUnlockRegistrationVN;
}

uint64_t sub_100556B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100556B14);
}

uint64_t sub_100556B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100556B2C);
}

uint64_t sub_100556B30()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100556BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100556BFC);
}

uint64_t sub_100556C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100556C14);
}

uint64_t sub_100556C18()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100556CC4()
{
  [v0 airdropHash1];
  sub_100557624();
  uint64_t v1 = FixedWidthInteger.bigEndianBytes.getter();
  [v0 airdropHash2];
  uint64_t v2 = FixedWidthInteger.bigEndianBytes.getter();
  sub_1003D4A38(v2);
  [v0 airdropHash3];
  uint64_t v3 = FixedWidthInteger.bigEndianBytes.getter();
  sub_1003D4A38(v3);
  [v0 airdropHash4];
  uint64_t v4 = FixedWidthInteger.bigEndianBytes.getter();
  sub_1003D4A38(v4);
  uint64_t v5 = sub_1005A532C(v1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100556DF0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100556CC4();
  unint64_t v8 = v7;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  LODWORD(a1) = [a1 contactsContainsShortHashes:isa];

  if (a1)
  {
    if (qword_100969F60 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000B47C(v10, (uint64_t)qword_100979360);
    sub_10025ADCC(v6, v8);
    sub_10025ADCC(v6, v8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136380675;
      sub_10045E0B4(v6, v8);
      sub_10000A844((uint64_t *)&unk_100974C30);
      sub_1002FE630();
      uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      sub_100254634(v14, v16, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100250CC4(v6, v8);
      sub_100250CC4(v6, v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Device hashes %{private}s recognized", v13, 0xCu);
      uint64_t v17 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_18:
      sub_100250CC4(v6, v8);
      return v17;
    }
    sub_100250CC4(v6, v8);
    sub_100250CC4(v6, v8);
    sub_100250CC4(v6, v8);
  }
  else
  {
    if (qword_100969F60 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B47C(v18, (uint64_t)qword_100979360);
    sub_10025ADCC(v6, v8);
    sub_10025ADCC(v6, v8);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136380675;
      sub_10045E0B4(v6, v8);
      sub_10000A844((uint64_t *)&unk_100974C30);
      uint64_t v43 = a2;
      sub_1002FE630();
      uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      sub_100254634(v22, v24, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a2 = v43;
      swift_bridgeObjectRelease();
      sub_100250CC4(v6, v8);
      sub_100250CC4(v6, v8);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Device hashes %{private}s unrecognized", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100250CC4(v6, v8);
      sub_100250CC4(v6, v8);
    }

    uint64_t v17 = (uint64_t)[v3 airdropTempAuthTagData];
    if (!v17) {
      goto LABEL_18;
    }
    uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v17 = (uint64_t)[v3 btAddressData];
    if (!v17)
    {
      sub_100250CC4(v6, v8);
      sub_100250CC4(v25, v27);
      return v17;
    }
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    Class v31 = Data._bridgeToObjectiveC()().super.isa;
    Class v32 = Data._bridgeToObjectiveC()().super.isa;
    unsigned __int8 v33 = [a2 isTempAuthTagKnown:v31 bluetoothAddressData:v32];

    if ((v33 & 1) == 0)
    {
      sub_100250CC4(v6, v8);
      sub_100250CC4(v28, v30);
      sub_100250CC4(v25, v27);
      return 0;
    }
    sub_10025ADCC(v25, v27);
    sub_10025ADCC(v25, v27);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      os_log_t log = v34;
      os_log_type_t type = v35;
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315138;
      buf = v36;
      sub_10045E0B4(v25, v27);
      sub_10000A844((uint64_t *)&unk_100974C30);
      sub_1002FE630();
      uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      sub_100254634(v37, v39, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100250CC4(v25, v27);
      sub_100250CC4(v25, v27);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Device temp auth tag %s recognized", buf, 0xCu);
      uint64_t v17 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100250CC4(v28, v30);

      sub_100250CC4(v25, v27);
      sub_100250CC4(v6, v8);
      return v17;
    }
    sub_100250CC4(v6, v8);
    sub_100250CC4(v25, v27);
    sub_100250CC4(v25, v27);
    sub_100250CC4(v25, v27);
    sub_100250CC4(v28, v30);
  }
  return 1;
}

uint64_t sub_10055755C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100979360);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100979360);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100557624()
{
  unint64_t result = qword_100979378;
  if (!qword_100979378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979378);
  }
  return result;
}

uint64_t sub_100557678(uint64_t a1)
{
  uint64_t v20 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  unint64_t v8 = (char *)_swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v9 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v7 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 32 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100253208(0, *((void *)v8 + 2) + 1, 1, v8);
      unint64_t v8 = (char *)result;
    }
    unint64_t v18 = *((void *)v8 + 2);
    unint64_t v17 = *((void *)v8 + 3);
    if (v18 >= v17 >> 1)
    {
      uint64_t result = (uint64_t)sub_100253208((char *)(v17 > 1), v18 + 1, 1, v8);
      unint64_t v8 = (char *)result;
    }
    *((void *)v8 + 2) = v18 + 1;
    uint64_t v19 = &v8[16 * v18];
    *((void *)v19 + 4) = v15;
    *((void *)v19 + 5) = v16;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v5) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v20 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v5) {
        goto LABEL_27;
      }
      unint64_t v12 = *(void *)(v20 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v5) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v20 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 3;
          if (v11 + 3 >= v5) {
            goto LABEL_27;
          }
          unint64_t v12 = *(void *)(v20 + 8 * v7);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v5)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v8;
  }
  unint64_t v12 = *(void *)(v20 + 8 * v13);
  if (v12)
  {
    int64_t v7 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v20 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_100557874(int64_t *a1)
{
  void (*v35)(uint64_t *__return_ptr, int64_t *);
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  void *v40;

  int64_t v2 = 0;
  int64_t v3 = *a1;
  int64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  int64_t v6 = *a1;
  while (1)
  {
    BOOL v7 = v4 >= v6;
    if (v5 > 0) {
      BOOL v7 = v6 >= v4;
    }
    if (v7) {
      break;
    }
    BOOL v8 = __OFADD__(v6, v5);
    v6 += v5;
    if (v8) {
      int64_t v6 = (v6 >> 63) ^ 0x8000000000000000;
    }
    BOOL v8 = __OFADD__(v2++, 1);
    if (v8)
    {
      __break(1u);
      break;
    }
  }
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_10025583C(0, v2, 0);
  unint64_t v9 = _swiftEmptyArrayStorage;
  os_log_type_t v35 = (void (*)(uint64_t *__return_ptr, int64_t *))a1[3];
  if (v2)
  {
    swift_retain();
    int64_t v10 = v3;
    while (1)
    {
      BOOL v11 = v4 >= v10;
      if (v5 > 0) {
        BOOL v11 = v10 >= v4;
      }
      if (v11)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        JUMPOUT(0x100557C50);
      }
      unint64_t v12 = v10 + v5;
      if (__OFADD__(v10, v5)) {
        unint64_t v12 = ((v10 + v5) >> 63) ^ 0x8000000000000000;
      }
      uint64_t v36 = v12;
      unint64_t v39 = v10;
      v35(&v37, &v39);
      uint64_t v13 = v37;
      unint64_t v14 = v38;
      switch(v38 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v37), v37)) {
            goto LABEL_55;
          }
          uint64_t v15 = HIDWORD(v37) - (int)v37;
LABEL_22:
          sub_10025ADCC(v37, v38);
LABEL_23:
          if (v15 != 2) {
            goto LABEL_59;
          }
          __int16 v18 = sub_1002C8C2C(v13, v14);
          if (v1)
          {
            sub_100250CC4(v13, v14);
            sub_100567858((uint64_t)a1);
            swift_release();
            sub_100250CC4(v13, v14);
            return v9;
          }
          __int16 v19 = v18;
          sub_100250CC4(v13, v14);
          sub_100250CC4(v13, v14);
          uint64_t v40 = v9;
          unint64_t v21 = v9[2];
          unint64_t v20 = v9[3];
          if (v21 >= v20 >> 1)
          {
            sub_10025583C(v20 > 1, v21 + 1, 1);
            unint64_t v9 = v40;
          }
          v9[2] = v21 + 1;
          *((_WORD *)v9 + v21 + 16) = v19;
          int64_t v3 = v36;
          int64_t v10 = v36;
          if (!--v2) {
            goto LABEL_30;
          }
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v37 + 16);
          uint64_t v16 = *(void *)(v37 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_22;
          }
          goto LABEL_56;
        case 3uLL:
          goto LABEL_59;
        default:
          uint64_t v15 = BYTE6(v38);
          goto LABEL_23;
      }
    }
  }
  swift_retain();
LABEL_30:
  BOOL v22 = v4 >= v3;
  if (v5 > 0) {
    BOOL v22 = v3 >= v4;
  }
  if (!v22)
  {
    while (1)
    {
      unint64_t v39 = v3;
      if (__OFADD__(v3, v5)) {
        int64_t v3 = ((v3 + v5) >> 63) ^ 0x8000000000000000;
      }
      else {
        v3 += v5;
      }
      v35(&v37, &v39);
      uint64_t v23 = v37;
      unint64_t v24 = v38;
      switch(v38 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v37), v37)) {
            goto LABEL_57;
          }
          uint64_t v25 = HIDWORD(v37) - (int)v37;
LABEL_42:
          sub_10025ADCC(v37, v38);
LABEL_43:
          if (v25 != 2) {
            goto LABEL_60;
          }
          __int16 v28 = sub_1002C8C2C(v23, v24);
          if (v1)
          {
            sub_100250CC4(v23, v24);
            sub_100250CC4(v23, v24);
            sub_100567858((uint64_t)a1);
            swift_release();
            return v9;
          }
          __int16 v29 = v28;
          sub_100250CC4(v23, v24);
          sub_100250CC4(v23, v24);
          uint64_t v40 = v9;
          unint64_t v31 = v9[2];
          unint64_t v30 = v9[3];
          if (v31 >= v30 >> 1)
          {
            sub_10025583C(v30 > 1, v31 + 1, 1);
            unint64_t v9 = v40;
          }
          v9[2] = v31 + 1;
          *((_WORD *)v9 + v31 + 16) = v29;
          BOOL v32 = v4 >= v3;
          if (v5 > 0) {
            BOOL v32 = v3 >= v4;
          }
          if (v32) {
            goto LABEL_33;
          }
          break;
        case 2uLL:
          uint64_t v27 = *(void *)(v37 + 16);
          uint64_t v26 = *(void *)(v37 + 24);
          uint64_t v25 = v26 - v27;
          if (!__OFSUB__(v26, v27)) {
            goto LABEL_42;
          }
          goto LABEL_58;
        case 3uLL:
          goto LABEL_60;
        default:
          uint64_t v25 = BYTE6(v38);
          goto LABEL_43;
      }
    }
  }
LABEL_33:
  sub_100567858((uint64_t)a1);
  return v9;
}

void *sub_100557C70(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      int64_t v2 = (void *)a2;
    }
    else {
      int64_t v2 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      if (v6 < 1)
      {
        __break(1u);
        goto LABEL_46;
      }
      if ((a2 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = 0;
        int64_t v2 = _swiftEmptyArrayStorage;
        while (1)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          int64_t v3 = _swiftEmptyArrayStorage;
          if ((unint64_t)_swiftEmptyArrayStorage >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v10 > a1)
            {
LABEL_12:
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                int64_t v2 = sub_10025425C(0, v2[2] + 1, 1, v2);
              }
              unint64_t v9 = v2[2];
              unint64_t v8 = v2[3];
              if (v9 >= v8 >> 1) {
                int64_t v2 = sub_10025425C((void *)(v8 > 1), v9 + 1, 1, v2);
              }
              v2[2] = v9 + 1;
              v2[v9 + 4] = _swiftEmptyArrayStorage;
              swift_bridgeObjectRelease();
              int64_t v3 = _swiftEmptyArrayStorage;
            }
          }
          else if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
          {
            goto LABEL_12;
          }
          if (v6 == ++v7) {
            goto LABEL_31;
          }
        }
      }
      uint64_t v11 = 0;
      int64_t v2 = _swiftEmptyArrayStorage;
      while (1)
      {
        swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        int64_t v3 = _swiftEmptyArrayStorage;
        if ((unint64_t)_swiftEmptyArrayStorage >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v14 > a1)
          {
LABEL_25:
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int64_t v2 = sub_10025425C(0, v2[2] + 1, 1, v2);
            }
            unint64_t v13 = v2[2];
            unint64_t v12 = v2[3];
            if (v13 >= v12 >> 1) {
              int64_t v2 = sub_10025425C((void *)(v12 > 1), v13 + 1, 1, v2);
            }
            v2[2] = v13 + 1;
            v2[v13 + 4] = _swiftEmptyArrayStorage;
            swift_bridgeObjectRelease();
            int64_t v3 = _swiftEmptyArrayStorage;
          }
        }
        else if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
        {
          goto LABEL_25;
        }
        if (v6 == ++v11)
        {
LABEL_31:
          swift_bridgeObjectRelease();
          if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
            goto LABEL_32;
          }
LABEL_42:
          swift_bridgeObjectRetain();
          uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v17) {
            goto LABEL_43;
          }
LABEL_33:
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_34:
            unint64_t v16 = v2[2];
            unint64_t v15 = v2[3];
            if (v16 >= v15 >> 1) {
              int64_t v2 = sub_10025425C((void *)(v15 > 1), v16 + 1, 1, v2);
            }
            v2[2] = v16 + 1;
            v2[v16 + 4] = v3;
            return v2;
          }
LABEL_46:
          int64_t v2 = sub_10025425C(0, v2[2] + 1, 1, v2);
          goto LABEL_34;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  int64_t v3 = _swiftEmptyArrayStorage;
  int64_t v2 = _swiftEmptyArrayStorage;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
    goto LABEL_42;
  }
LABEL_32:
  if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_33;
  }
LABEL_43:
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100558088()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100979380);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100979380);
  if (qword_100969CA0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994630);
  int64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100558150()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for SDAirDropContactHashManager()) init];
  sub_100558190();
  qword_100979398 = (uint64_t)v0;
}

void sub_100558190()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SFPlatform();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969F68 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10000B47C(v6, (uint64_t)qword_100979380);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "HashManager: activate called", v9, 2u);
    swift_slowDealloc();
  }

  static SFPlatform.watchOS.getter();
  char v10 = static SFPlatform.isPlatform(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v10)
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "AirDrop hashes not needed for watchOS", v13, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v14 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_systemMonitor];
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v0;
    __int16 v29 = sub_100567600;
    uint64_t v30 = v15;
    aBlock = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256;
    uint64_t v27 = sub_100296520;
    __int16 v28 = &unk_1008DF270;
    unint64_t v16 = _Block_copy(&aBlock);
    id v17 = v1;
    swift_release();
    [v14 setFirstUnlockHandler:v16];
    _Block_release(v16);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    __int16 v29 = sub_100567624;
    uint64_t v30 = v18;
    aBlock = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256;
    uint64_t v27 = sub_100296520;
    __int16 v28 = &unk_1008DF2C0;
    __int16 v19 = _Block_copy(&aBlock);
    id v20 = v17;
    swift_release();
    [v14 setPowerUnlimitedChangedHandler:v19];
    _Block_release(v19);
    __int16 v29 = sub_100559944;
    uint64_t v30 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256;
    uint64_t v27 = sub_100296520;
    __int16 v28 = &unk_1008DF2E8;
    unint64_t v21 = _Block_copy(&aBlock);
    [v14 setMeDeviceChangedHandler:v21];
    _Block_release(v21);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v20;
    __int16 v29 = sub_10056762C;
    uint64_t v30 = v22;
    aBlock = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256;
    uint64_t v27 = sub_100296520;
    __int16 v28 = &unk_1008DF338;
    uint64_t v23 = _Block_copy(&aBlock);
    id v24 = v20;
    swift_release();
    [v14 activateWithCompletion:v23];
    _Block_release(v23);
    sub_10056653C();
    sub_100566834();
  }
}

uint64_t sub_100558608@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10024A250((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10000A7E8((uint64_t)v10, (uint64_t *)&unk_10096AC20);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

char *sub_100558780(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v29 = *(void *)(v2 - 8);
  *(void *)&long long v30 = v2;
  __chkstk_darwin(v2);
  id v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactUpdateCoalescer;
  id v8 = objc_allocWithZone((Class)CUCoalescer);
  unint64_t v9 = v1;
  *(void *)&v1[v7] = [v8 init];
  uint64_t v10 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardUpdateCoalescer;
  *(void *)&v9[v10] = [objc_allocWithZone((Class)CUCoalescer) init];
  uint64_t v11 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ;
  sub_10000B740(0, (unint64_t *)&qword_10096A1A0);
  static DispatchQoS.utility.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_100565E78((unint64_t *)&unk_100974840, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A844((uint64_t *)&unk_10096A1B0);
  sub_100442CA0((unint64_t *)&qword_100974850, (uint64_t *)&unk_10096A1B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v29 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v30);
  uint64_t v12 = v31;
  *(void *)&v9[v11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v13 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_bucket;
  id v14 = [objc_allocWithZone((Class)SFTokenBucket) initWithBucketSize:100 tokenDurationSec:1.0];
  id v15 = [objc_allocWithZone((Class)SFTokenBucketWithDups) initWithBucket:v14 dupHistoryLength:100];

  *(void *)&v9[v13] = v15;
  v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated] = 0;
  unint64_t v16 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo];
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully] = 1;
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactChangeBatchSize] = 1000;
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_osTransaction] = 0;
  id v17 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_osStateHandler];
  *(void *)id v17 = 0;
  v17[8] = 1;
  sub_100278C8C(v12 + 8, (uint64_t)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore]);
  long long v30 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB] = v30;
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_systemMonitor] = *(void *)v12;
  uint64_t v18 = *(void **)(v12 + 64);
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_notificationCenter] = v18;
  __int16 v19 = *(void **)(v12 + 72);
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_distributedNotificationCenter] = v19;
  sub_100567A8C(v12, (uint64_t)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_context]);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v20 = v18;
  id v21 = v19;

  if (qword_100969F68 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_10000B47C(v22, (uint64_t)qword_100979380);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "HashManager: init.", v25, 2u);
    swift_slowDealloc();
  }

  v33.receiver = v9;
  v33.super_class = ObjectType;
  uint64_t v26 = (char *)[super init];
  [*(id *)&v26[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_systemMonitor] setDispatchQueue:*(void *)&v26[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ]];
  sub_100567AE8(v12);
  return v26;
}

void sub_100558CF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v5 = v6;
  uint64_t v7 = enum case for DispatchPredicate.onQueue(_:);
  id v8 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v8(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v9 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v3 + 8);
  v10(v5, v2);
  if (v6)
  {
    id v26 = v9;
    uint64_t v27 = v10;
    if (qword_100969F68 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000B47C(v11, (uint64_t)qword_100979380);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = v2;
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "HashManager: internal activate called", v14, 2u);
    uint64_t v2 = v25;
    swift_slowDealloc();
  }

  if ([*(id *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_systemMonitor) firstUnlocked])
  {
    uint64_t v15 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated;
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) & 1) == 0)
    {
      sub_10055A6F0();
      unint64_t v16 = v26;
      *uint64_t v5 = v26;
      v8(v5, v7, v2);
      id v17 = v16;
      LOBYTE(v16) = _dispatchPreconditionTest(_:)();
      v27(v5, v2);
      if (v16)
      {
        if ((*(unsigned char *)(v1 + v15) & 1) == 0)
        {
          sub_10055AA34(&OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactUpdateCoalescer, (uint64_t)&unk_1008DF410, (uint64_t)sub_100567698, (uint64_t)&unk_1008DF428);
          sub_10055AA34(&OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardUpdateCoalescer, (uint64_t)&unk_1008DF3C0, (uint64_t)sub_100567674, (uint64_t)&unk_1008DF3D8);
        }
        sub_100559204(0);
        sub_10055AC58();
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          id v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "HashManager: activated", v20, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(v1 + v15) = 1;
        sub_100559FD8();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Device has not been unlocked. Don't activate hash manager.", v23, 2u);
      swift_slowDealloc();
    }
  }
}

id sub_100559100(uint64_t a1)
{
  id result = [*(id *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_systemMonitor) powerUnlimited];
  if (result)
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B47C(v2, (uint64_t)qword_100979380);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Power handler called", v5, 2u);
      swift_slowDealloc();
    }

    return (id)sub_100559204(0);
  }
  return result;
}

uint64_t sub_100559204(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (qword_100969F68 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_100979380);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Hash update requested.", v13, 2u);
    swift_slowDealloc();
  }

  if (a1)
  {
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Force rebuild requested", v16, 2u);
      swift_slowDealloc();
    }
  }
  id v17 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo];
  if (v17)
  {
    id v18 = [v17 identifier];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  os_log_type_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Begin AirDropContactHashManager OSTransaction", v24, 2u);
    swift_slowDealloc();
  }

  uint64_t v25 = os_transaction_create();
  uint64_t v26 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_osTransaction;
  *(void *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_osTransaction] = v25;
  swift_unknownObjectRelease();
  sub_10055EBCC(v2, a1 & 1, &v32, &v34, &v33, v19, v21);
  uint64_t result = swift_bridgeObjectRelease();
  v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully] = 1;
  if (*(void *)&v2[v26])
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      long long v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Clearing AirDropContactHashManager OSTransaction", v30, 2u);
      swift_slowDealloc();
    }

    *(void *)&v2[v26] = 0;
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_100559944()
{
  if (qword_100969F68 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10000B47C(v0, (uint64_t)qword_100979380);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Device change handler called", v2, 2u);
    swift_slowDealloc();
  }
}

void sub_100559A2C(uint64_t a1, const char *a2)
{
  if (qword_100969F68 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000B47C(v3, (uint64_t)qword_100979380);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, a2, v6, 2u);
    swift_slowDealloc();
  }

  sub_100558CF8();
}

void sub_100559B18()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v14 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v14];

  id v5 = v14;
  if (v4)
  {
    id v6 = v5;
  }
  else
  {
    id v7 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B47C(v8, (uint64_t)qword_100979380);
    swift_errorRetain();
    swift_errorRetain();
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      swift_errorRetain();
      os_log_type_t v13 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v14 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v12 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to delete url %@", v11, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_100559DC8(const char *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *id v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (qword_100969F68 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_100979380);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a1, v13, 2u);
    swift_slowDealloc();
  }

  id v14 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_notificationCenter);
  NSString v15 = String._bridgeToObjectiveC()();
  [v14 postNotificationName:v15 object:0];
}

void sub_100559FD8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (void *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  char v7 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v7)
  {
    sub_100559DC8("Posting contacts hashes changed notification");
    sub_100559DC8("Posting meCard changed notification");
    uint64_t v8 = &v0[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_osStateHandler];
    if (v0[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_osStateHandler + 8] == 1)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v0;
      aBlock[4] = sub_100567650;
      void aBlock[5] = v9;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10055B178;
      aBlock[3] = &unk_1008DF388;
      uint64_t v10 = _Block_copy(aBlock);
      uint64_t v11 = v0;
      swift_release();
      uint64_t v12 = os_state_add_handler();
      _Block_release(v10);
      *(void *)uint64_t v8 = v12;
      v8[8] = 0;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10055A200()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_100969F68 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B47C(v8, (uint64_t)qword_100979380);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Contact update coalescer fired", v11, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) == 1)
  {
    sub_100559204(0);
    sub_100559DC8("Posting contacts hashes changed notification");
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "HashManager: not activated yet.", v14, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10055A47C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_100969F68 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_10000B47C(v8, (uint64_t)qword_100979380);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "MeCard update coalescer fired", v11, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) == 1)
  {
    sub_100559DC8("Posting meCard changed notification");
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "HashManager: not activated yet.", v14, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10055A6F0()
{
  uint64_t v2 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, void *))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_5;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated)) {
    return;
  }
  uint64_t v2 = self;
  uint64_t v1 = &selRef_shouldNotify;
  id v8 = [v2 standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  uint64_t v5 = [v8 integerForKey:v9];

  if (v5 == (void *)3) {
    return;
  }
  if (qword_100969F68 != -1) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_100979380);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134218240;
    uint64_t v19 = (uint64_t)v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2048;
    uint64_t v19 = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Database version mismatch: %ld!=%ld. Clearing history token to rebuild database", (uint8_t *)v13, 0x16u);
    swift_slowDealloc();
  }

  id v14 = [v2 v1[91]];
  NSString v15 = String._bridgeToObjectiveC()();
  [v14 setObject:0 forKey:v15];

  id v16 = [v2 v1[91]];
  NSString v17 = String._bridgeToObjectiveC()();
  [v16 setInteger:3 forKey:v17];
}

void sub_10055AA34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v12 = *(void **)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v14)
  {
    if ((v4[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated] & 1) == 0)
    {
      NSString v15 = *(void **)&v4[*a1];
      [v15 setDispatchQueue:v13];
      id v16 = (double *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_context];
      [v15 setMinDelay:*(double *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_context + 80]];
      [v15 setMaxDelay:v16[11]];
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v4;
      aBlock[4] = a3;
      void aBlock[5] = v17;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100296520;
      aBlock[3] = a4;
      uint64_t v18 = _Block_copy(aBlock);
      uint64_t v19 = v4;
      swift_release();
      [v15 setActionHandler:v18];
      _Block_release(v18);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10055AC58()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) & 1) == 0)
    {
      id v7 = *(void **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_notificationCenter);
      uint64_t v8 = (void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore);
      [v7 addObserver:v0 selector:@selector(contactStoreDidChange) name:nil object:nil];
      [v7 addObserver:v0 selector:@selector(meCardDidChange) name:nil object:nil];
      uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_distributedNotificationCenter);
      NSString v10 = String._bridgeToObjectiveC()();
      [v9 addObserver:v0 selector:"cmfSyncAgentBlockListDidChange" name:v10 object:0];
    }
  }
  else
  {
    __break(1u);
  }
}

char *sub_10055AE50()
{
  sub_10055B1C8();
  uint64_t v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = 0;
  id v2 = [v0 dataWithPropertyList:v1 format:200 options:0 error:&v19];

  id v3 = v19;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    unint64_t v7 = v6 >> 62;
    uint64_t v8 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        LODWORD(v8) = HIDWORD(v4) - v4;
        if (__OFSUB__(HIDWORD(v4), v4)) {
          goto LABEL_30;
        }
        uint64_t v8 = (int)v8;
LABEL_8:
        if (__OFADD__(v8, 200))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
        }
        char v14 = (char *)calloc(v8 + 200, 1uLL);
        NSString v10 = v14;
        if (v14)
        {
          *(_DWORD *)char v14 = 1;
          switch((int)v7)
          {
            case 1:
              LODWORD(v17) = HIDWORD(v4) - v4;
              if (__OFSUB__(HIDWORD(v4), v4)) {
                goto LABEL_32;
              }
              unint64_t v17 = (int)v17;
LABEL_19:
              if ((v17 & 0x8000000000000000) != 0 || HIDWORD(v17))
              {
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x10055B158);
              }
              *((_DWORD *)v14 + 1) = v17;
              strcpy(v14 + 136, "SDAirDropContactHashManager State");
              if (v7 != 2) {
                goto LABEL_25;
              }
              if (__OFSUB__(*(void *)(v4 + 24), *(void *)(v4 + 16)))
              {
                __break(1u);
LABEL_25:
                if (__OFSUB__(HIDWORD(v4), v4)) {
                  goto LABEL_33;
                }
              }
LABEL_26:
              Data.copyBytes(to:count:)();
              break;
            case 2:
              uint64_t v16 = *(void *)(v4 + 16);
              uint64_t v15 = *(void *)(v4 + 24);
              BOOL v13 = __OFSUB__(v15, v16);
              unint64_t v17 = v15 - v16;
              if (!v13) {
                goto LABEL_19;
              }
              __break(1u);
LABEL_15:
              *((_DWORD *)v14 + 1) = 0;
LABEL_16:
              strcpy(v14 + 136, "SDAirDropContactHashManager State");
              goto LABEL_26;
            case 3:
              goto LABEL_15;
            default:
              *((_DWORD *)v14 + 1) = BYTE6(v6);
              goto LABEL_16;
          }
        }
        sub_100250CC4(v4, v6);
        break;
      case 2uLL:
        uint64_t v12 = *(void *)(v4 + 16);
        uint64_t v11 = *(void *)(v4 + 24);
        BOOL v13 = __OFSUB__(v11, v12);
        uint64_t v8 = v11 - v12;
        if (!v13) {
          goto LABEL_8;
        }
        goto LABEL_31;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v8 = BYTE6(v6);
        goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  return v10;
}

uint64_t sub_10055B178(uint64_t a1, uint64_t a2)
{
  id v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t sub_10055B1C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v55 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v52 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_100975040);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v50 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  BOOL v13 = (uint64_t *)((char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v14 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *BOOL v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v16)
  {
    uint64_t v53 = v7;
    uint64_t v54 = v2;
    uint64_t v57 = 10;
    unint64_t v58 = 0xE100000000000000;
    sub_10000A844((uint64_t *)&unk_10096EE60);
    uint64_t v18 = swift_allocObject();
    long long v56 = xmmword_10076E7A0;
    *(_OWORD *)(v18 + 16) = xmmword_10076E7A0;
    uint64_t v19 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated;
    int v20 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated);
    unint64_t v21 = sub_1002E695C();
    unint64_t v22 = v21;
    uint64_t v23 = 28526;
    if (v20) {
      uint64_t v23 = 7562617;
    }
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = v21;
    if (v20) {
      unint64_t v24 = 0xE300000000000000;
    }
    else {
      unint64_t v24 = 0xE200000000000000;
    }
    *(void *)(v18 + 32) = v23;
    *(void *)(v18 + 40) = v24;
    v25._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v1 + v19) != 1) {
      return v57;
    }
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v56;
    uint64_t v27 = 28526;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully))
    {
      uint64_t v27 = 7562617;
      unint64_t v28 = 0xE300000000000000;
    }
    else
    {
      unint64_t v28 = 0xE200000000000000;
    }
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = v22;
    *(void *)(v26 + 32) = v27;
    *(void *)(v26 + 40) = v28;
    v29._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = v56;
    sub_100558608((uint64_t)v9);
    uint64_t v32 = v54;
    uint64_t v31 = v55;
    uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
    if (v51(v9, 1, v54))
    {
      sub_10000A7E8((uint64_t)v9, (uint64_t *)&unk_100975040);
      uint64_t v33 = 0;
      unint64_t v34 = 0;
    }
    else
    {
      os_log_type_t v35 = v52;
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v52, v9, v32);
      sub_10000A7E8((uint64_t)v9, (uint64_t *)&unk_100975040);
      uint64_t v33 = Date.description.getter();
      unint64_t v34 = v36;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v35, v32);
    }
    uint64_t v37 = 0x3E6C696E3CLL;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = v22;
    if (v34) {
      uint64_t v38 = v33;
    }
    else {
      uint64_t v38 = 0x3E6C696E3CLL;
    }
    unint64_t v39 = 0xE500000000000000;
    if (v34) {
      unint64_t v39 = v34;
    }
    *(void *)(v30 + 32) = v38;
    *(void *)(v30 + 40) = v39;
    v40._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = v56;
    uint64_t v42 = (uint64_t)v53;
    sub_100558608((uint64_t)v53);
    if (v51((char *)v42, 1, v32))
    {
      sub_10000A7E8(v42, (uint64_t *)&unk_100975040);
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = v22;
    }
    else
    {
      uint64_t v44 = v55;
      uint64_t v45 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v52, v42, v32);
      sub_10000A7E8(v42, (uint64_t *)&unk_100975040);
      uint64_t v46 = Date.description.getter();
      unint64_t v43 = v47;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v32);
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = v22;
      if (v43)
      {
        uint64_t v37 = v46;
        goto LABEL_24;
      }
    }
    unint64_t v43 = 0xE500000000000000;
LABEL_24:
    *(void *)(v41 + 32) = v37;
    *(void *)(v41 + 40) = v43;
    v48._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0xD000000000000027;
    v49._object = (void *)0x80000001007C1AC0;
    String.append(_:)(v49);
    return v57;
  }
  __break(1u);
  return result;
}

uint64_t sub_10055B880(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  BOOL v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969F68 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B47C(v14, (uint64_t)qword_100979380);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, a1, v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v6;
  aBlock[4] = v22;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = v23;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v6;
  static DispatchQoS.unspecified.getter();
  Swift::String v25 = _swiftEmptyArrayStorage;
  sub_100565E78((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_100442CA0((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v24);
  return swift_release();
}

uint64_t sub_10055BC4C(int a1)
{
  uint64_t v3 = v1;
  int v45 = a1;
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_100975040);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v50 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  BOOL v13 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v15)
  {
    if (qword_100969F68 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v46 = v7;
  uint64_t v16 = type metadata accessor for Logger();
  sub_10000B47C(v16, (uint64_t)qword_100979380);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Persist requested.", v19, 2u);
    swift_slowDealloc();
  }

  uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 56);
  swift_unknownObjectRetain();
  v22(ObjectType, v20);
  uint64_t result = swift_unknownObjectRelease();
  if (!v2)
  {
    uint64_t v24 = v50;
    Date.init()();
    uint64_t v25 = v47;
    uint64_t v26 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 16);
    uint64_t v27 = v24;
    uint64_t v28 = v46;
    v26(v6, v27, v46);
    Swift::String v29 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56);
    v29(v6, 0, 1, v28);
    sub_1005671B4((uint64_t)v6);
    if (v45)
    {
      v26(v6, v50, v28);
      v29(v6, 0, 1, v28);
      sub_1005671B4((uint64_t)v6);
    }
    id v30 = [*(id *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_systemMonitor) meDeviceIDSDeviceID];
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;

      uint64_t v48 = v32;
      uint64_t v49 = v34;
      sub_10024A1FC();
      uint64_t v35 = StringProtocol.hash.getter();
      swift_bridgeObjectRelease();
      unint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 134217984;
        uint64_t v28 = v46;
        uint64_t v48 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Persist completed for deviceID hash %ld", v38, 0xCu);
        swift_slowDealloc();
      }

      id v39 = [self standardUserDefaults];
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      uint64_t v41 = String._bridgeToObjectiveC()();
      [v39 setObject:isa forKey:v41];
    }
    else
    {
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        unint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Missing deviceID hash", v43, 2u);
        swift_slowDealloc();
      }
    }

    return (*(uint64_t (**)(unsigned char *, uint64_t))(v47 + 8))(v50, v28);
  }
  return result;
}

void sub_10055C210(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  id v39 = a4;
  uint64_t v38 = a5;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (uint64_t **)((char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v15 = *(void **)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *id v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    type metadata accessor for SDContactChangeHistoryUpdateEvent();
    uint64_t v17 = swift_dynamicCastClass();
    if (v17)
    {
      os_log_type_t v18 = *(void **)(v17 + 16);
      swift_retain();
      id v19 = v18;
      uint64_t v20 = v40;
      sub_10055C694(v19, a2, a6, a7);
      if (!v20)
      {

        swift_release();
        swift_beginAccess();
        if (!__OFADD__(*a3, 1))
        {
          ++*a3;
          return;
        }
        goto LABEL_22;
      }
LABEL_8:
      swift_release();

      return;
    }
    type metadata accessor for SDContactChangeHistoryAddEvent();
    uint64_t v21 = swift_dynamicCastClass();
    if (v21)
    {
      uint64_t v22 = *(void **)(v21 + 16);
      swift_retain();
      id v19 = v22;
      uint64_t v23 = v40;
      sub_10055C974(v19, a2, a6, a7);
      if (v23) {
        goto LABEL_8;
      }

      swift_release();
      Swift::String v29 = v39;
      swift_beginAccess();
      uint64_t v30 = *v29 + 1;
      if (!__OFADD__(*v29, 1))
      {
LABEL_19:
        *Swift::String v29 = v30;
        return;
      }
      __break(1u);
    }
    else
    {
      type metadata accessor for SDContactChangeHistoryDeleteEvent();
      uint64_t v24 = swift_dynamicCastClass();
      if (v24)
      {
        uint64_t v25 = *(void *)(v24 + 16);
        uint64_t v26 = *(void *)(v24 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v27 = v25;
        uint64_t v28 = v40;
        sub_10055CC50(v27, v26, a2, a6, a7);
        if (v28)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        swift_bridgeObjectRelease();
        swift_release();
        Swift::String v29 = v38;
        swift_beginAccess();
        uint64_t v30 = *v29 + 1;
        if (__OFADD__(*v29, 1))
        {
          __break(1u);
          return;
        }
        goto LABEL_19;
      }
    }
    if (qword_100969F68 == -1) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  swift_once();
LABEL_16:
  uint64_t v31 = type metadata accessor for Logger();
  sub_10000B47C(v31, (uint64_t)qword_100979380);
  swift_retain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315138;
    v41[0] = v35;
    uint64_t v36 = _typeName(_:qualified:)();
    v41[4] = sub_100254634(v36, v37, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unexpected event: %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

void sub_10055C694(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  id v15 = [a1 identifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (a4)
  {
    if (v16 == a3 && v18 == a4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_13:
      if (qword_100969F68 == -1)
      {
LABEL_14:
        uint64_t v25 = type metadata accessor for Logger();
        sub_10000B47C(v25, (uint64_t)qword_100979380);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Skip meCard change", v28, 2u);
          swift_slowDealloc();
        }

        return;
      }
LABEL_19:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v21 = [a1 identifier];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  sub_10055CC50(v22, v24, a2, a3, a4);
  swift_bridgeObjectRelease();
  if (!v4) {
    sub_10055C974(a1, a2, a3, a4);
  }
}

void sub_10055C974(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  id v15 = [a1 identifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (a4)
  {
    if (v16 == a3 && v18 == a4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_13:
      if (qword_100969F68 == -1)
      {
LABEL_14:
        uint64_t v26 = type metadata accessor for Logger();
        sub_10000B47C(v26, (uint64_t)qword_100979380);
        os_log_type_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Skip meCard change", v29, 2u);
          swift_slowDealloc();
        }

        return;
      }
LABEL_19:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_10055CEE0(a1);
  if (!v4)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 24);
    swift_unknownObjectRetain();
    v25(v22, ObjectType, v23);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

void sub_10055CC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = *(void **)(a3 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_7;
  }
  _s16DaemoniOSLibrary21SDXPCHelperImageCacheC5evict17contactIdentifierySS_tFZ_0(a1, a2);
  if (!a5 || (a1 != a4 || a2 != a5) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v20 = *(void *)(a3 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 32);
    swift_unknownObjectRetain();
    v22(a1, a2, ObjectType, v20);
    swift_unknownObjectRelease();
    return;
  }
  if (qword_100969F68 != -1) {
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v16 = type metadata accessor for Logger();
  sub_10000B47C(v16, (uint64_t)qword_100979380);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Skip meCard change", v19, 2u);
    swift_slowDealloc();
  }
}

void sub_10055CEE0(void *a1)
{
  id v3 = [a1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t v169 = (void *)v4;
  uint64_t v170 = v6;
  uint64_t v176 = 44;
  unint64_t v177 = 0xE100000000000000;
  sub_10024A1FC();
  LOBYTE(v3) = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    id v7 = [a1 emailAddresses];
    sub_10000A844(&qword_10096FF18);
    unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v1 >> 62))
    {
      uint64_t v8 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  id v168 = a1;
  if (v8)
  {
    uint64_t v169 = _swiftEmptyArrayStorage;
    sub_100255510(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_106;
    }
    uint64_t v9 = 0;
    uint64_t v10 = v169;
    unint64_t v11 = v1 & 0xC000000000000001;
    unint64_t v12 = v1;
    do
    {
      uint64_t v13 = v10;
      if (v11) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(v1 + 8 * v9 + 32);
      }
      id v15 = v14;
      Swift::String v16 = String.init(_:)([v14 value]);

      uint64_t v10 = v13;
      uint64_t v169 = v13;
      unint64_t v17 = v13[2];
      unint64_t v18 = v10[3];
      if (v17 >= v18 >> 1)
      {
        sub_100255510(v18 > 1, v17 + 1, 1);
        uint64_t v10 = v169;
      }
      ++v9;
      v10[2] = v17 + 1;
      *(Swift::String *)&v10[2 * v17 + 4] = v16;
      unint64_t v1 = v12;
    }
    while (v8 != v9);
    uint64_t v151 = v10;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v151 = _swiftEmptyArrayStorage;
  }
  id v19 = [a1 instantMessageAddresses];
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v20 >> 62))
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21) {
      goto LABEL_17;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_29;
  }
LABEL_17:
  uint64_t v176 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100255510(0, v21 & ~(v21 >> 63), 0);
  if (v21 < 0)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  uint64_t v22 = 0;
  uint64_t v23 = (void *)v176;
  unint64_t v162 = v20 & 0xC000000000000001;
  unint64_t v24 = v20;
  do
  {
    if (v162) {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v25 = *(id *)(v20 + 8 * v22 + 32);
    }
    uint64_t v26 = v25;
    id v27 = [v25 value];
    id v28 = [v27 username];

    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    uint64_t v169 = (void *)v29;
    uint64_t v170 = v31;
    uint64_t v32 = String.init<A>(_:)();
    uint64_t v34 = v33;

    uint64_t v176 = (uint64_t)v23;
    unint64_t v36 = v23[2];
    unint64_t v35 = v23[3];
    if (v36 >= v35 >> 1)
    {
      sub_100255510(v35 > 1, v36 + 1, 1);
      uint64_t v23 = (void *)v176;
    }
    ++v22;
    v23[2] = v36 + 1;
    unint64_t v37 = &v23[2 * v36];
    v37[4] = v32;
    v37[5] = v34;
    unint64_t v20 = v24;
  }
  while (v21 != v22);
  swift_bridgeObjectRelease();
LABEL_30:
  uint64_t v38 = v23[2];
  id v39 = _swiftEmptyArrayStorage;
  if (v38)
  {
    uint64_t v40 = v23 + 5;
    do
    {
      uint64_t v41 = (void *)*(v40 - 1);
      uint64_t v42 = *v40;
      uint64_t v169 = v41;
      uint64_t v170 = v42;
      uint64_t v176 = 64;
      unint64_t v177 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      if (StringProtocol.contains<A>(_:)())
      {
        uint64_t v178 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100255510(0, v39[2] + 1, 1);
          id v39 = v178;
        }
        unint64_t v44 = v39[2];
        unint64_t v43 = v39[3];
        if (v44 >= v43 >> 1)
        {
          sub_100255510(v43 > 1, v44 + 1, 1);
          id v39 = v178;
        }
        v39[2] = v44 + 1;
        int v45 = &v39[2 * v44];
        v45[4] = v41;
        v45[5] = v42;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v40 += 2;
      --v38;
    }
    while (v38);
  }
  swift_bridgeObjectRelease();
  uint64_t v169 = v151;
  sub_1003D514C((uint64_t)v39);
  int64_t v46 = v151[2];
  if (v46)
  {
    uint64_t v176 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10025579C(0, v46, 0);
    uint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v48 = v151 + 5;
    while (1)
    {
      int64_t v163 = v46;
      swift_bridgeObjectRetain();
      NSString v49 = String._bridgeToObjectiveC()();
      id v50 = sub_1001B3C88(v49, 0);

      if (!v50) {
        goto LABEL_108;
      }
      uint64_t v51 = v47;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v54 = v53;

      NSString v55 = String._bridgeToObjectiveC()();
      id v56 = sub_1001B3C88(v55, 1);

      if (!v56) {
        goto LABEL_109;
      }
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v58;

      sub_10045B57C(v52, v54, &v169);
      uint64_t v143 = v170;
      uint64_t v147 = v169;
      long long v152 = v172;
      long long v157 = v171;
      int v60 = v173 | (v174 << 16);
      char v61 = v175;
      if (v52 == v57 && v54 == v59) {
        break;
      }
      char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v63 & 1) == 0)
      {
        sub_10045B57C(v57, v59, &v169);
        int v60 = v173 | (v174 << 16);
        char v62 = v175;
        goto LABEL_50;
      }
      char v62 = v61;
LABEL_51:
      uint64_t v47 = v51;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v176 = (uint64_t)v51;
      unint64_t v65 = v51[2];
      unint64_t v64 = v51[3];
      if (v65 >= v64 >> 1)
      {
        sub_10025579C(v64 > 1, v65 + 1, 1);
        uint64_t v47 = (void *)v176;
      }
      v48 += 2;
      v47[2] = v65 + 1;
      uint64_t v66 = &v47[7 * v65];
      v66[4] = v147;
      v66[5] = v143;
      *((_OWORD *)v66 + 3) = v157;
      *((_OWORD *)v66 + 4) = v152;
      *((unsigned char *)v66 + 82) = BYTE2(v60);
      *((_WORD *)v66 + 40) = v60;
      *((unsigned char *)v66 + 83) = v62;
      int64_t v46 = v163 - 1;
      if (v163 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }
    char v62 = v175;
LABEL_50:
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  swift_bridgeObjectRelease();
  uint64_t v47 = _swiftEmptyArrayStorage;
LABEL_56:
  uint64_t v67 = v47[2];
  uint64_t v68 = _swiftEmptyArrayStorage;
  if (v67)
  {
    uint64_t v69 = v47 + 6;
    do
    {
      uint64_t v70 = *(v69 - 1);
      uint64_t v158 = *(v69 - 2);
      uint64_t v148 = v69[1];
      uint64_t v153 = *v69;
      uint64_t v140 = v69[3];
      uint64_t v144 = v69[2];
      int v71 = *((unsigned __int8 *)v69 + 34);
      int v72 = *((unsigned __int16 *)v69 + 16);
      char v164 = *((unsigned char *)v69 + 35);
      swift_bridgeObjectRetain();
      id v73 = [v168 identifier];
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v76 = v75;

      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v77 = v68;
      }
      else {
        uint64_t v77 = sub_10025438C(0, v68[2] + 1, 1, v68);
      }
      unint64_t v79 = v77[2];
      unint64_t v78 = v77[3];
      if (v79 >= v78 >> 1) {
        uint64_t v77 = sub_10025438C((void *)(v78 > 1), v79 + 1, 1, v77);
      }
      v77[2] = v79 + 1;
      uint64_t v80 = &v77[9 * v79];
      v80[4] = v74;
      v80[5] = v76;
      v80[6] = v158;
      v80[7] = v70;
      v80[8] = v153;
      v80[9] = v148;
      v80[10] = v144;
      v80[11] = v140;
      *((unsigned char *)v80 + 98) = (v72 | (v71 << 16)) >> 16;
      *((_WORD *)v80 + 48) = v72;
      *((unsigned char *)v80 + 99) = v164;
      v69 += 7;
      --v67;
      uint64_t v68 = v77;
    }
    while (v67);
  }
  uint64_t v141 = v68;
  swift_bridgeObjectRelease();
  id v81 = [v168 phoneNumbers];
  unint64_t v82 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v82 >> 62))
  {
    uint64_t v83 = *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v83) {
      goto LABEL_67;
    }
LABEL_77:
    swift_bridgeObjectRelease();
    uint64_t v85 = _swiftEmptyArrayStorage;
    goto LABEL_78;
  }
  swift_bridgeObjectRetain();
  uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v83) {
    goto LABEL_77;
  }
LABEL_67:
  uint64_t v176 = (uint64_t)_swiftEmptyArrayStorage;
  sub_100255510(0, v83 & ~(v83 >> 63), 0);
  if ((v83 & 0x8000000000000000) == 0)
  {
    uint64_t v84 = 0;
    uint64_t v85 = (void *)v176;
    unint64_t v165 = v82 & 0xC000000000000001;
    unint64_t v86 = v82;
    do
    {
      if (v165) {
        id v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v87 = *(id *)(v82 + 8 * v84 + 32);
      }
      uint64_t v88 = v87;
      id v89 = [v87 value];
      id v90 = [v89 stringValue];

      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v93 = v92;

      uint64_t v169 = (void *)v91;
      uint64_t v170 = v93;
      uint64_t v94 = String.init<A>(_:)();
      uint64_t v96 = v95;

      uint64_t v176 = (uint64_t)v85;
      unint64_t v98 = v85[2];
      unint64_t v97 = v85[3];
      if (v98 >= v97 >> 1)
      {
        sub_100255510(v97 > 1, v98 + 1, 1);
        uint64_t v85 = (void *)v176;
      }
      ++v84;
      v85[2] = v98 + 1;
      uint64_t v99 = &v85[2 * v98];
      v99[4] = v94;
      v99[5] = v96;
      unint64_t v82 = v86;
    }
    while (v83 != v84);
    swift_bridgeObjectRelease();
LABEL_78:
    sub_100278C8C(v138 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore, (uint64_t)&v169);
    sub_10026BB6C(&v169, *((uint64_t *)&v171 + 1));
    uint64_t DynamicType = swift_getDynamicType();
    uint64_t v101 = v172;
    sub_10024D338((uint64_t)&v169);
    uint64_t v102 = v85[2];
    if (v102)
    {
      uint64_t v159 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 40);
      swift_bridgeObjectRetain();
      uint64_t v103 = v85 + 5;
      uint64_t v104 = (char *)_swiftEmptyArrayStorage;
      uint64_t v154 = v101;
      do
      {
        uint64_t v106 = *(v103 - 1);
        uint64_t v107 = *v103;
        swift_bridgeObjectRetain();
        uint64_t v108 = v159(v106, v107, DynamicType, v101);
        uint64_t v110 = v109;
        swift_bridgeObjectRelease();
        if (v110)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v104 = sub_100253208(0, *((void *)v104 + 2) + 1, 1, v104);
          }
          unint64_t v112 = *((void *)v104 + 2);
          unint64_t v111 = *((void *)v104 + 3);
          if (v112 >= v111 >> 1) {
            uint64_t v104 = sub_100253208((char *)(v111 > 1), v112 + 1, 1, v104);
          }
          *((void *)v104 + 2) = v112 + 1;
          uint64_t v105 = &v104[16 * v112];
          *((void *)v105 + 4) = v108;
          *((void *)v105 + 5) = v110;
          uint64_t v101 = v154;
        }
        v103 += 2;
        --v102;
      }
      while (v102);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v104 = (char *)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    int64_t v113 = *((void *)v104 + 2);
    if (v113)
    {
      uint64_t v176 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10025579C(0, v113, 0);
      uint64_t v114 = (void *)v176;
      uint64_t v115 = (uint64_t *)(v104 + 40);
      do
      {
        uint64_t v116 = *(v115 - 1);
        uint64_t v117 = *v115;
        swift_bridgeObjectRetain();
        sub_10045B57C(v116, v117, &v169);
        uint64_t v118 = v169;
        uint64_t v119 = v170;
        uint64_t v160 = v171;
        uint64_t v149 = v172;
        uint64_t v155 = *((void *)&v171 + 1);
        uint64_t v145 = *((void *)&v172 + 1);
        int v120 = v174;
        int v121 = v173;
        char v166 = v175;
        swift_bridgeObjectRelease();
        uint64_t v176 = (uint64_t)v114;
        unint64_t v123 = v114[2];
        unint64_t v122 = v114[3];
        if (v123 >= v122 >> 1)
        {
          sub_10025579C(v122 > 1, v123 + 1, 1);
          uint64_t v114 = (void *)v176;
        }
        v115 += 2;
        v114[2] = v123 + 1;
        id v124 = &v114[7 * v123];
        v124[4] = v118;
        v124[5] = v119;
        v124[6] = v160;
        v124[7] = v155;
        v124[8] = v149;
        v124[9] = v145;
        *((unsigned char *)v124 + 82) = (v121 | (v120 << 16)) >> 16;
        *((_WORD *)v124 + 40) = v121;
        *((unsigned char *)v124 + 83) = v166;
        --v113;
      }
      while (v113);
      swift_bridgeObjectRelease();
      uint64_t v125 = v114[2];
      if (!v125) {
        goto LABEL_104;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v114 = _swiftEmptyArrayStorage;
      uint64_t v125 = _swiftEmptyArrayStorage[2];
      if (!v125)
      {
LABEL_104:
        swift_bridgeObjectRelease();
        return;
      }
    }
    uint64_t v126 = v114 + 6;
    uint64_t v127 = v141;
    do
    {
      uint64_t v128 = *(v126 - 1);
      uint64_t v161 = *(v126 - 2);
      uint64_t v150 = v126[1];
      uint64_t v156 = *v126;
      uint64_t v142 = v126[3];
      uint64_t v146 = v126[2];
      int v139 = *((unsigned __int8 *)v126 + 34);
      int v129 = *((unsigned __int16 *)v126 + 16);
      char v167 = *((unsigned char *)v126 + 35);
      swift_bridgeObjectRetain();
      id v130 = [v168 identifier];
      uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v133 = v132;

      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v134 = v127;
      }
      else {
        uint64_t v134 = sub_10025438C(0, v127[2] + 1, 1, v127);
      }
      unint64_t v136 = v134[2];
      unint64_t v135 = v134[3];
      if (v136 >= v135 >> 1) {
        uint64_t v134 = sub_10025438C((void *)(v135 > 1), v136 + 1, 1, v134);
      }
      v134[2] = v136 + 1;
      uint64_t v137 = &v134[9 * v136];
      v137[4] = v131;
      v137[5] = v133;
      v137[6] = v161;
      v137[7] = v128;
      v137[8] = v156;
      v137[9] = v150;
      v137[10] = v146;
      v137[11] = v142;
      *((unsigned char *)v137 + 98) = (v129 | (v139 << 16)) >> 16;
      *((_WORD *)v137 + 48) = v129;
      *((unsigned char *)v137 + 99) = v167;
      v126 += 7;
      --v125;
      uint64_t v127 = v134;
    }
    while (v125);
    goto LABEL_104;
  }
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
}

uint64_t sub_10055DCF0(uint64_t a1)
{
  uint64_t v75 = type metadata accessor for Calendar.Component();
  uint64_t v71 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  os_log_t v73 = (os_log_t)((char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Calendar();
  uint64_t v72 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844((uint64_t *)&unk_100975040);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v74 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v63 - v11;
  uint64_t v13 = type metadata accessor for Date();
  id v14 = *(void **)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v68 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v67 = (char *)&v63 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v70 = (char *)&v63 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v69 = (char *)&v63 - v22;
  __chkstk_darwin(v21);
  uint64_t v76 = (char *)&v63 - v23;
  uint64_t v24 = type metadata accessor for DispatchPredicate();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  id v27 = (void (**)(char *, char *, uint64_t))((char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v28 = *(void **)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *id v27 = v28;
  (*(void (**)(void *, void, uint64_t))(v25 + 104))(v27, enum case for DispatchPredicate.onQueue(_:), v24);
  id v29 = v28;
  uint64_t v30 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v25 + 8))(v27, v24);
  if ((v30 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_7;
  }
  sub_100558608((uint64_t)v12);
  uint64_t v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v14[6];
  if (v31(v12, 1, v13) == 1)
  {
LABEL_5:
    sub_10000A7E8((uint64_t)v12, (uint64_t *)&unk_100975040);
    char v39 = 0;
    return v39 & 1;
  }
  unint64_t v65 = v14;
  uint64_t v32 = v76;
  char v63 = (void (*)(char *, char *, uint64_t))v14[4];
  v63(v76, v12, v13);
  uint64_t v33 = v7;
  static Calendar.current.getter();
  uint64_t v34 = v71;
  unint64_t v35 = *(void (**)(os_log_t, void, uint64_t))(v71 + 104);
  os_log_t v36 = v73;
  uint64_t v64 = v5;
  uint64_t v37 = v75;
  v35(v73, enum case for Calendar.Component.day(_:), v75);
  unint64_t v12 = v74;
  uint64_t v66 = v13;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v38 = v66;
  (*(void (**)(os_log_t, uint64_t))(v34 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v33, v64);
  if (v31(v12, 1, v38) == 1)
  {
    ((void (*)(char *, uint64_t))v65[1])(v32, v38);
    goto LABEL_5;
  }
  id v14 = v65;
  uint64_t v5 = (uint64_t)v69;
  v63(v69, v12, v38);
  Date.init()();
  sub_100565E78((unint64_t *)&unk_100974490, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v30 = v38;
  LODWORD(v7) = dispatch thunk of static Comparable.< infix(_:_:)();
  Date.timeIntervalSinceReferenceDate.getter();
  double v1 = v40;
  Date.timeIntervalSinceReferenceDate.getter();
  double v2 = v41;
  if (qword_100969F68 != -1) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v42 = type metadata accessor for Logger();
  sub_10000B47C(v42, (uint64_t)qword_100979380);
  unint64_t v43 = v14;
  unint64_t v44 = (void (*)(char *, uint64_t, uint64_t))v14[2];
  int v45 = v67;
  v44(v67, v5, v30);
  int64_t v46 = v68;
  uint64_t v47 = v76;
  v44(v68, (uint64_t)v76, v30);
  uint64_t v48 = Logger.logObject.getter();
  int v49 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v48, (os_log_type_t)v49))
  {

    char v62 = (void (*)(char *, uint64_t))v43[1];
    v62(v46, v30);
    v62(v45, v30);
    v62(v70, v30);
    v62((char *)v5, v30);
    v62(v47, v30);
    goto LABEL_13;
  }
  LODWORD(v74) = v49;
  os_log_t v73 = v48;
  LODWORD(v75) = v7;
  double v50 = v1 - v2;
  uint64_t v51 = swift_slowAlloc();
  uint64_t v72 = swift_slowAlloc();
  uint64_t v78 = v72;
  *(_DWORD *)uint64_t v51 = 136315650;
  sub_100565E78(&qword_100974530, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v77 = sub_100254634(v52, v53, &v78);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v54 = (void (*)(char *, uint64_t))v43[1];
  v54(v45, v30);
  *(_WORD *)(v51 + 12) = 2080;
  uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v77 = sub_100254634(v55, v56, &v78);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v54)(v46, v30);
  *(_WORD *)(v51 + 22) = 2048;
  if ((~*(void *)&v50 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v50 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  LOBYTE(v7) = v75;
  os_log_type_t v58 = v74;
  if (v50 < 9.22337204e18)
  {
    uint64_t v77 = (uint64_t)v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v59 = v58;
    os_log_t v60 = v73;
    _os_log_impl((void *)&_mh_execute_header, v73, v59, "Next hash store rebuild: %s, last: %s, secs to next rebuild: %ld", (uint8_t *)v51, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v61 = v66;
    v54(v70, v66);
    v54(v69, v61);
    v54(v76, v61);
LABEL_13:
    char v39 = v7 ^ 1;
    return v39 & 1;
  }
LABEL_19:
  __break(1u);
  return result;
}

BOOL sub_10055E608(uint64_t a1)
{
  uint64_t v2 = sub_10056733C();
  if ((v3 & 1) != 0
    || (uint64_t v4 = v2,
        (id v5 = [*(id *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_context) meDeviceIDSDeviceID]) == 0))
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B47C(v13, (uint64_t)qword_100979380);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Last deviceID hash not populated", v16, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    uint64_t v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10024A1FC();
    uint64_t v7 = StringProtocol.hash.getter();
    swift_bridgeObjectRelease();
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B47C(v8, (uint64_t)qword_100979380);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Comparing deviceID hashes %ld - %ld", (uint8_t *)v11, 0x16u);
      swift_slowDealloc();
    }

    return v4 == v7;
  }
}

uint64_t sub_10055E86C(int a1, unsigned char *a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v10 = *(void **)&a2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_8;
  }
  LODWORD(v9) = sub_10055DCF0((uint64_t)a2);
  uint64_t v12 = *(void *)&a2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8];
  uint64_t ObjectType = swift_getObjectType();
  id v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  swift_unknownObjectRetain();
  LOBYTE(v12) = v14(ObjectType, v12);
  swift_unknownObjectRelease();
  if (v12)
  {
    char v2 = 1;
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = !sub_10055E608((uint64_t)a2);
    char v2 = 1;
    if (((a1 | v9) & 1) == 0 && !v3)
    {
      BOOL v3 = 0;
      LOBYTE(a1) = 0;
      char v2 = a2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully] ^ 1;
    }
  }
  if (qword_100969F68 != -1) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000B47C(v15, (uint64_t)qword_100979380);
  uint64_t v16 = a2;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 67110144;
    int v22 = v2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 8) = 1024;
    int v22 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 14) = 1024;
    int v22 = v9 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 20) = 1024;
    int v22 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 26) = 1024;
    int v22 = (*((unsigned char *)&v16->isa
           + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully) & 1) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Should regenerate database: %{BOOL}d (forceRebuild: %{BOOL}d rebuild due: %{BOOL}d storeRebuildRequired: %{BOOL}d hashesFailedToUpdate: %{BOOL}d", (uint8_t *)v19, 0x20u);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v17 = v16;
  }

  return v2 & 1;
}

void sub_10055EBCC(char *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v97 = a6;
  uint64_t v98 = a7;
  uint64_t v99 = a4;
  uint64_t v100 = a5;
  uint64_t v96 = a3;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char **)((char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *id v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a1;
    uint64_t v105 = sub_1005675C8;
    uint64_t v106 = v17;
    uint64_t v18 = qword_100969F68;
    uint64_t v8 = a1;
    if (v18 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = sub_10000B47C(v19, (uint64_t)qword_100979380);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Start updating hashes.", v23, 2u);
    swift_slowDealloc();
  }

  char v107 = sub_10055E86C(a2 & 1, v8) & 1;
  if (v107)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0xF000000000000000;
  }
  else
  {
    uint64_t v24 = sub_100567090();
    unint64_t v25 = v26;
    if (v26 >> 60 != 15) {
      goto LABEL_11;
    }
  }
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    id v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "History token is nil. Will regenerate hash database", v29, 2u);
    swift_slowDealloc();
  }

LABEL_11:
  sub_10026BB6C(&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore], *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore + 24]);
  uint64_t v30 = sub_1005CAAD8(v24, v25);
  if (v7)
  {
    sub_100250CB0(v24, v25);
    sub_1002CA430((uint64_t)v105);

    return;
  }
  uint64_t v33 = v30;
  unint64_t v94 = v32;
  uint64_t v95 = v20;
  uint64_t v93 = v31;
  uint64_t v34 = (uint64_t)sub_100557C70(1000, (uint64_t)v30);
  uint64_t v35 = *(void *)(v34 + 16);
  if (v35)
  {
    if (v107)
    {
      os_log_t v36 = v105;
      if (v105)
      {
        uint64_t v37 = swift_retain();
        ((void (*)(uint64_t))v36)(v37);
        sub_1002CA430((uint64_t)v36);
        sub_1002CA430((uint64_t)v36);
      }
      uint64_t v105 = 0;
      uint64_t v106 = 0;
    }
    uint64_t v89 = v35;
    id v90 = v33;
    uint64_t v92 = v24;
    unint64_t v91 = v25;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      os_log_type_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Load hash db from disk", v59, 2u);
      swift_slowDealloc();
    }

    os_log_t v60 = &v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB];
    uint64_t v61 = *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8];
    uint64_t ObjectType = swift_getObjectType();
    char v63 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    swift_unknownObjectRetain();
    v63(ObjectType, v61);

    swift_unknownObjectRelease();
    uint64_t v64 = *(NSObject **)v60;
    uint64_t v65 = *((void *)v60 + 1);
    uint64_t v66 = (void *)swift_getObjectType();
    uint64_t v67 = *(void (**)(void *, uint64_t))(v65 + 40);
    swift_unknownObjectRetain();
    v67(v66, v65);
    uint64_t v88 = v60;
    swift_unknownObjectRelease();
    uint64_t v68 = 0;
    uint64_t v69 = v96;
    uint64_t v70 = v89;
    do
    {
      uint64_t v71 = v68 + 1;
      if (__OFADD__(v68, 1))
      {
        __break(1u);
        goto LABEL_43;
      }
      uint64_t v64 = *(NSObject **)(v34 + 8 * v68 + 32);
      swift_bridgeObjectRetain();
      sub_10055FA2C((unint64_t)v64, (uint64_t *)&v105, &v107, (uint64_t)v8, v69, v99, v100, v97, v98);
      swift_bridgeObjectRelease();
      ++v68;
    }
    while (v71 != v70);
    swift_bridgeObjectRelease();
    unint64_t v72 = (unint64_t)v90;
    swift_bridgeObjectRetain();
    uint64_t v64 = Logger.logObject.getter();
    LOBYTE(v66) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, (os_log_type_t)v66))
    {
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 134218752;
      if (!(v72 >> 62))
      {
        uint64_t v73 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_31:
        unint64_t v25 = v91;
        swift_bridgeObjectRelease();
        uint64_t v104 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2048;
        uint64_t v74 = v99;
        swift_beginAccess();
        uint64_t v103 = *v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v34 + 22) = 2048;
        uint64_t v75 = v100;
        swift_beginAccess();
        uint64_t v102 = *v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v34 + 32) = 2048;
        swift_beginAccess();
        uint64_t v101 = *v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v66, "Processed %ld contact change events (add=%ld,delete=%ld,update=%ld)", (uint8_t *)v34, 0x2Au);
        swift_slowDealloc();

        goto LABEL_35;
      }
LABEL_43:
      swift_bridgeObjectRetain();
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }

    swift_bridgeObjectRelease_n();
    unint64_t v25 = v91;
LABEL_35:
    uint64_t v77 = *((void *)v88 + 1);
    uint64_t v78 = swift_getObjectType();
    unint64_t v79 = *(void (**)(uint64_t, uint64_t))(v77 + 48);
    swift_unknownObjectRetain();
    v79(v78, v77);
    uint64_t v81 = v93;
    unint64_t v80 = v94;
    swift_unknownObjectRelease();
    unint64_t v82 = self;
    sub_10025ADCC(v81, v80);
    id v83 = [v82 standardUserDefaults];
    sub_10025ADCC(v81, v80);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100250CC4(v81, v80);
    NSString v85 = String._bridgeToObjectiveC()();
    [v83 setObject:isa forKey:v85];
    sub_100250CC4(v81, v80);

    double v50 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v86))
    {
      id v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v87 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v86, "Updating hashes completed.", v87, 2u);
      swift_slowDealloc();
      sub_100250CB0(v92, v25);

      uint64_t v55 = v81;
      unint64_t v56 = v80;
      goto LABEL_21;
    }
    sub_100250CC4(v81, v80);
    uint64_t v76 = v92;
LABEL_33:
    sub_100250CB0(v76, v25);

    goto LABEL_36;
  }
  uint64_t v92 = v24;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    double v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Load hash db from disk", v40, 2u);
    swift_slowDealloc();
  }

  uint64_t v41 = *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8];
  uint64_t v42 = swift_getObjectType();
  unint64_t v43 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  swift_unknownObjectRetain();
  v43(v42, v41);
  uint64_t v45 = v93;
  unint64_t v44 = v94;

  swift_unknownObjectRelease();
  int64_t v46 = self;
  sub_10025ADCC(v45, v44);
  id v47 = [v46 standardUserDefaults];
  sub_10025ADCC(v45, v44);
  Class v48 = Data._bridgeToObjectiveC()().super.isa;
  sub_100250CC4(v45, v44);
  NSString v49 = String._bridgeToObjectiveC()();
  [v47 setObject:v48 forKey:v49];
  sub_100250CC4(v45, v44);

  double v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v53 = v92;
  if (!v52)
  {
    sub_100250CC4(v45, v44);
    uint64_t v76 = v53;
    goto LABEL_33;
  }
  uint64_t v54 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v54 = 0;
  _os_log_impl((void *)&_mh_execute_header, v50, v51, "No hash updates needed.", v54, 2u);
  swift_slowDealloc();
  sub_100250CB0(v53, v25);

  uint64_t v55 = v45;
  unint64_t v56 = v44;
LABEL_21:
  sub_100250CC4(v55, v56);
LABEL_36:
  sub_1002CA430((uint64_t)v105);
}

void sub_10055F840(uint64_t a1)
{
  char v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB);
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8);
  uint64_t ObjectType = swift_getObjectType();
  id v5 = *(void (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  v5(ObjectType, v3);
  swift_unknownObjectRelease();
  if (!v1)
  {
    type metadata accessor for SDAirDropHashStoreCDB();
    uint64_t v6 = swift_allocObject();
    sub_10000B740(0, (unint64_t *)&qword_10096A1C0);
    id v7 = objc_allocWithZone((Class)CUKeyValueStoreReader);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    *(void *)(v6 + 16) = [v7 initWithKeyType:ObjCClassFromMetadata valueType:ObjCClassFromMetadata];
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = _swiftEmptyArrayStorage;
    *(void *)(v6 + 40) = &_swiftEmptySetSingleton;
    *(_WORD *)(v6 + 48) = 0;
    *char v2 = v6;
    v2[1] = (uint64_t)&protocol witness table for SDAirDropHashStoreCDB;
    swift_retain();
    swift_unknownObjectRelease();
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B47C(v9, (uint64_t)qword_100979380);
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "HashManager: database set.", v12, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
}

uint64_t sub_10055FA2C(unint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  unint64_t v13 = a1;
  if (a1 >> 62)
  {
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14)
    {
LABEL_3:
      unint64_t v49 = v13 & 0xC000000000000001;
      uint64_t v15 = 4;
      uint64_t v42 = a4;
      unint64_t v43 = a3;
      unint64_t v48 = v13;
      do
      {
        uint64_t v16 = v15 - 4;
        if (v49)
        {
          uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v18 = v15 - 3;
          if (__OFADD__(v16, 1)) {
            goto LABEL_34;
          }
        }
        else
        {
          uint64_t v17 = *(void *)(v13 + 8 * v15);
          swift_retain();
          uint64_t v18 = v15 - 3;
          if (__OFADD__(v16, 1))
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
        type metadata accessor for SDContactChangeHistoryDropEverythingEvent();
        if (swift_dynamicCastClass())
        {
          if (qword_100969F68 != -1) {
            swift_once();
          }
          uint64_t v19 = type metadata accessor for Logger();
          sub_10000B47C(v19, (uint64_t)qword_100979380);
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v20, v21))
          {
            os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_type_t v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "Change event is DropEverything. Request regenerate entire db.", v22, 2u);
            unint64_t v13 = v48;
            swift_slowDealloc();
          }

          uint64_t v23 = (void (*)(uint64_t))*a2;
          if (*a2)
          {
            uint64_t v24 = swift_retain();
            v23(v24);
            if (v10)
            {
              swift_bridgeObjectRelease();
              sub_1002CA430((uint64_t)v23);
              return swift_release();
            }
            swift_release();
            sub_1002CA430((uint64_t)v23);
          }
          else
          {
            swift_release();
          }
          uint64_t v31 = *a2;
          *a2 = 0;
          a2[1] = 0;
          sub_1002CA430(v31);
          *a3 = 1;
        }
        else
        {
          if (qword_100969F68 != -1) {
            swift_once();
          }
          uint64_t v25 = type metadata accessor for Logger();
          sub_10000B47C(v25, (uint64_t)qword_100979380);
          swift_retain_n();
          unint64_t v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v26, v27))
          {
            uint64_t v28 = swift_slowAlloc();
            uint64_t v51 = swift_slowAlloc();
            *(_DWORD *)uint64_t v28 = 136315138;
            uint64_t v29 = _typeName(_:qualified:)();
            *(void *)(v28 + 4) = sub_100254634(v29, v30, &v51);
            swift_release_n();
            a4 = v42;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v26, v27, "Processing event: %s", (uint8_t *)v28, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            a3 = v43;
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }
          unint64_t v13 = v48;
          if (*a3 != 1 || (type metadata accessor for SDContactChangeHistoryAddEvent(), swift_dynamicCastClass()))
          {
            sub_10055C210(v17, a4, a5, a6, a7, a8, a9);
            swift_release();
            if (v10) {
              return swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_retain_n();
            unint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v32, v33))
            {
              uint64_t v34 = swift_slowAlloc();
              uint64_t v51 = swift_slowAlloc();
              *(_DWORD *)uint64_t v34 = 136315138;
              uint64_t v35 = _typeName(_:qualified:)();
              *(void *)(v34 + 4) = sub_100254634(v35, v36, &v51);
              swift_release_n();
              a4 = v42;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unexpected change event %s when regenerating database", (uint8_t *)v34, 0xCu);
              swift_arrayDestroy();
              unint64_t v13 = v48;
              swift_slowDealloc();
              swift_slowDealloc();
              swift_release();
            }
            else
            {

              swift_release_n();
            }
            a3 = v43;
          }
        }
        ++v15;
      }
      while (v18 != v14);
    }
  }
  swift_bridgeObjectRelease();
  if (qword_100969F68 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_10000B47C(v38, (uint64_t)qword_100979380);
  os_log_type_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Persisting change event batch", v41, 2u);
    swift_slowDealloc();
  }

  return sub_10055BC4C(*a3);
}

uint64_t sub_10056008C(void *a1, void *a2)
{
  uint64_t v93 = a1;
  unint64_t v94 = a2;
  uint64_t v3 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(v3 - 1);
  __chkstk_darwin(v3);
  uint64_t v6 = (id *)((char *)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v95 = v2;
  id v7 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  int64_t v10 = v4 + 104;
  uint64_t v9 = *(void *)(v4 + 104);
  ((void (*)(void *, void, void *))v9)(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  os_log_type_t v11 = v7;
  uint64_t v12 = _dispatchPreconditionTest(_:)();
  unint64_t v13 = *(void (**)(void *, void *))(v4 + 8);
  v13(v6, v3);
  if ((v12 & 1) == 0) {
    goto LABEL_81;
  }
  *uint64_t v6 = v11;
  ((void (*)(void *, uint64_t, void *))v9)(v6, v8, v3);
  uint64_t v14 = v11;
  char v15 = _dispatchPreconditionTest(_:)();
  v13(v6, v3);
  if ((v15 & 1) == 0)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v95[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully] != 1)
  {
    sub_1005676DC();
    swift_allocError();
    *unint64_t v26 = 0;
    swift_willThrow();
    return v9;
  }
  uint64_t v98 = v93;
  uint64_t v99 = v94;
  uint64_t v96 = 44;
  unint64_t v97 = 0xE100000000000000;
  sub_10024A1FC();
  uint64_t v16 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 + 16);
  os_log_type_t v11 = _swiftEmptyArrayStorage;
  if (v18)
  {
    uint64_t v19 = v16 + 40;
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = Data.init(base64Encoded:options:)();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      if (v23 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_100254118(0, v3[2] + 1, 1, v3);
        }
        unint64_t v25 = v3[2];
        unint64_t v24 = v3[3];
        if (v25 >= v24 >> 1) {
          uint64_t v3 = sub_100254118((void *)(v24 > 1), v25 + 1, 1, v3);
        }
        v3[2] = v25 + 1;
        uint64_t v20 = &v3[2 * v25];
        v20[4] = v21;
        v20[5] = v23;
      }
      v19 += 16;
      --v18;
    }
    while (v18);
    uint64_t v18 = *(void *)(v17 + 16);
  }
  else
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  int64_t v10 = v3[2];
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t)v100;
  if (v10 != v18)
  {
    if (qword_100969F68 == -1)
    {
LABEL_18:
      uint64_t v27 = type metadata accessor for Logger();
      sub_10000B47C(v27, (uint64_t)qword_100979380);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v28, v29))
      {
        unint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Decoded base64 count test failed", v30, 2u);
        swift_slowDealloc();
      }

      goto LABEL_21;
    }
LABEL_83:
    swift_once();
    goto LABEL_18;
  }
LABEL_21:
  if (v10)
  {
    uint64_t v98 = v11;
    sub_1002557DC(0, v10, 0);
    uint64_t v31 = v98;
    unint64_t v94 = v3;
    unint64_t v32 = v3 + 5;
    while (1)
    {
      uint64_t v3 = v31;
      uint64_t v9 = *(v32 - 1);
      unint64_t v33 = *v32;
      unint64_t v34 = *v32 >> 62;
      uint64_t v35 = v32 + 2;
      switch(v34)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v9), v9)) {
            goto LABEL_79;
          }
          uint64_t v36 = HIDWORD(v9) - (int)v9;
LABEL_28:
          sub_10025ADCC(v9, v33);
          sub_10025ADCC(v9, v33);
LABEL_29:
          if (v36 != 32)
          {
LABEL_84:
            __break(1u);
            JUMPOUT(0x100560A2CLL);
          }
          uint64_t v39 = v12;
          os_log_type_t v40 = sub_10045AFDC(v9, v33, 8);
          if (v12)
          {
            sub_100250CC4(v9, v33);
            sub_100250CC4(v9, v33);
            swift_bridgeObjectRelease();
            swift_release();
            return v9;
          }
          unint64_t v41 = v40[2];
          if (!v41)
          {
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
            goto LABEL_82;
          }
          if (v41 == 1) {
            goto LABEL_76;
          }
          if (v41 < 3) {
            goto LABEL_77;
          }
          if (v41 == 3) {
            goto LABEL_78;
          }
          uint64_t v100 = v35;
          os_log_type_t v11 = (void *)v10;
          uint64_t v42 = v40[4];
          uint64_t v43 = v40[5];
          uint64_t v45 = v40[6];
          uint64_t v44 = v40[7];
          swift_bridgeObjectRelease();
          sub_100250CC4(v9, v33);
          sub_100250CC4(v9, v33);
          uint64_t v31 = v3;
          uint64_t v98 = v3;
          unint64_t v46 = v3[2];
          unint64_t v47 = v31[3];
          if (v46 >= v47 >> 1)
          {
            sub_1002557DC(v47 > 1, v46 + 1, 1);
            uint64_t v31 = v98;
          }
          v31[2] = v46 + 1;
          unint64_t v48 = &v31[4 * v46];
          v48[4] = v42;
          v48[5] = v43;
          v48[6] = v45;
          v48[7] = v44;
          int64_t v10 = (int64_t)v11 - 1;
          uint64_t v12 = v39;
          unint64_t v32 = v100;
          if (v11 == (void *)1)
          {
            swift_bridgeObjectRelease();
            goto LABEL_42;
          }
          break;
        case 2uLL:
          uint64_t v38 = *(void *)(v9 + 16);
          uint64_t v37 = *(void *)(v9 + 24);
          uint64_t v36 = v37 - v38;
          if (!__OFSUB__(v37, v38)) {
            goto LABEL_28;
          }
          goto LABEL_80;
        case 3uLL:
          goto LABEL_84;
        default:
          uint64_t v36 = BYTE6(v33);
          goto LABEL_29;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_42:
  if (*(void *)&v95[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo])
  {
    swift_bridgeObjectRetain();
    Swift::Int v50 = swift_bridgeObjectRetain();
    Swift::Int v51 = sub_1005662A0(v50, (uint64_t)v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v51 + 16))
    {
      uint64_t v9 = *(void *)(v51 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    swift_bridgeObjectRelease();
  }
  BOOL v52 = (void *)v31[2];
  if (v52)
  {
    uint64_t v100 = (unint64_t *)v12;
    uint64_t v53 = v95;
    uint64_t v92 = (uint64_t *)&v95[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB];
    swift_bridgeObjectRetain();
    v91[0] = v53;
    v91[1] = v31;
    uint64_t v54 = (void **)(v31 + 7);
    uint64_t v55 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v95 = *v54;
      uint64_t v58 = (uint64_t)*(v54 - 2);
      uint64_t v57 = *(v54 - 1);
      uint64_t v93 = v52;
      unint64_t v94 = v57;
      uint64_t v59 = (uint64_t)*(v54 - 3);
      uint64_t v61 = *v92;
      uint64_t v60 = v92[1];
      uint64_t ObjectType = swift_getObjectType();
      char v63 = *(uint64_t (**)(uint64_t, uint64_t, void *, unsigned char *, uint64_t, uint64_t))(v60 + 80);
      swift_unknownObjectRetain();
      uint64_t v64 = v58;
      uint64_t v9 = v61;
      uint64_t v65 = v100;
      uint64_t v66 = v63(v59, v64, v94, v95, ObjectType, v60);
      uint64_t v100 = v65;
      if (v65)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease();
        return v9;
      }
      uint64_t v70 = v66;
      uint64_t v71 = v67;
      uint64_t v72 = v68;
      uint64_t v73 = v69;
      swift_unknownObjectRelease();
      if (v71)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v55 = sub_1002544B4(0, v55[2] + 1, 1, v55);
        }
        unint64_t v75 = v55[2];
        unint64_t v74 = v55[3];
        if (v75 >= v74 >> 1) {
          uint64_t v55 = sub_1002544B4((void *)(v74 > 1), v75 + 1, 1, v55);
        }
        v55[2] = v75 + 1;
        unint64_t v56 = &v55[4 * v75];
        v56[4] = v70;
        v56[5] = v71;
        v56[6] = v72;
        v56[7] = v73;
      }
      v54 += 4;
      BOOL v52 = (void *)((char *)v93 - 1);
    }
    while (v93 != (void *)1);

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v55 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  int64_t v76 = v55[2];
  uint64_t v77 = _swiftEmptyArrayStorage;
  if (v76)
  {
    uint64_t v98 = _swiftEmptyArrayStorage;
    sub_100255510(0, v76, 0);
    uint64_t v77 = v98;
    uint64_t v78 = v55;
    unint64_t v79 = v55 + 5;
    do
    {
      uint64_t v80 = *(v79 - 1);
      uint64_t v81 = *v79;
      uint64_t v98 = v77;
      unint64_t v83 = v77[2];
      unint64_t v82 = v77[3];
      swift_bridgeObjectRetain();
      if (v83 >= v82 >> 1)
      {
        sub_100255510(v82 > 1, v83 + 1, 1);
        uint64_t v77 = v98;
      }
      v79 += 4;
      v77[2] = v83 + 1;
      uint64_t v84 = &v77[2 * v83];
      v84[4] = v80;
      v84[5] = v81;
      --v76;
    }
    while (v76);
  }
  else
  {
    uint64_t v78 = v55;
  }
  uint64_t v85 = sub_100259968((uint64_t)v77);
  swift_bridgeObjectRelease();
  unint64_t v86 = *(void *)(v85 + 16);
  swift_bridgeObjectRelease();
  if (v86 > 1)
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    sub_10000B47C(v87, (uint64_t)qword_100979380);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      id v90 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v90 = 134217984;
      uint64_t v98 = (void *)v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "%ld contacts match this set of hashes", v90, 0xCu);
      swift_slowDealloc();
    }
  }
  if (v78[2])
  {
    uint64_t v9 = v78[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

uint64_t sub_100560A3C(Swift::Int a1, Swift::Int a2)
{
  Swift::Int v91 = a1;
  Swift::Int v92 = a2;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (unint64_t **)((char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v93 = v2;
  id v7 = *(unint64_t **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v6 = v7;
  unint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v10 = v4 + 104;
  uint64_t v9 = *(void (**)(unint64_t **, unint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  os_log_type_t v11 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(unint64_t **, uint64_t))(v4 + 8);
  v12(v6, v3);
  if ((v7 & 1) == 0) {
    goto LABEL_75;
  }
  *uint64_t v6 = v11;
  v9(v6, v8, v3);
  unint64_t v13 = v11;
  char v14 = _dispatchPreconditionTest(_:)();
  v12(v6, v3);
  if ((v14 & 1) == 0)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v93[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully] != 1)
  {
    sub_1005676DC();
    swift_allocError();
    *unint64_t v26 = 0;
    return swift_willThrow();
  }
  uint64_t v96 = &_swiftEmptySetSingleton;
  v95[0] = v91;
  v95[1] = v92;
  v95[4] = 44;
  v95[5] = 0xE100000000000000;
  sub_10024A1FC();
  uint64_t v15 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 + 16);
  os_log_type_t v11 = _swiftEmptyArrayStorage;
  if (v17)
  {
    uint64_t v18 = v15 + 40;
    uint64_t v19 = (unint64_t **)_swiftEmptyArrayStorage;
    unint64_t v10 = v94;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = Data.init(base64Encoded:options:)();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      if (v23 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = (unint64_t **)sub_100254118(0, (int64_t)v19[2] + 1, 1, v19);
        }
        unint64_t v25 = (unint64_t)v19[2];
        unint64_t v24 = (unint64_t)v19[3];
        if (v25 >= v24 >> 1) {
          uint64_t v19 = (unint64_t **)sub_100254118((void *)(v24 > 1), v25 + 1, 1, v19);
        }
        v19[2] = (unint64_t *)(v25 + 1);
        uint64_t v20 = &v19[2 * v25];
        v20[4] = (unint64_t *)v21;
        v20[5] = (unint64_t *)v23;
      }
      v18 += 16;
      --v17;
    }
    while (v17);
    uint64_t v28 = *(void *)(v16 + 16);
    os_log_type_t v11 = _swiftEmptyArrayStorage;
    uint64_t v6 = v19;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v6 = (unint64_t **)_swiftEmptyArrayStorage;
    unint64_t v10 = v94;
  }
  unint64_t v8 = (unint64_t)v6[2];
  swift_bridgeObjectRelease();
  if (v8 != v28)
  {
    if (qword_100969F68 == -1)
    {
LABEL_18:
      uint64_t v29 = type metadata accessor for Logger();
      sub_10000B47C(v29, (uint64_t)qword_100979380);
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v30, v31))
      {
        unint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Decoded base64 count test failed", v32, 2u);
        swift_slowDealloc();
      }

      goto LABEL_21;
    }
LABEL_77:
    swift_once();
    goto LABEL_18;
  }
LABEL_21:
  if (v8)
  {
    v95[0] = (Swift::Int)v11;
    sub_1002557DC(0, v8, 0);
    unint64_t v33 = (void *)v95[0];
    Swift::Int v92 = (Swift::Int)v6;
    os_log_type_t v11 = (unint64_t *)(v6 + 5);
    while (1)
    {
      unint64_t v94 = v8;
      uint64_t v34 = *(v11 - 1);
      unint64_t v8 = *v11;
      unint64_t v35 = *v11 >> 62;
      v11 += 2;
      switch(v35)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v34), v34)) {
            goto LABEL_73;
          }
          uint64_t v36 = HIDWORD(v34) - (int)v34;
LABEL_28:
          sub_10025ADCC(v34, v8);
          sub_10025ADCC(v34, v8);
LABEL_29:
          if (v36 != 32)
          {
LABEL_78:
            __break(1u);
            JUMPOUT(0x100561328);
          }
          unint64_t v39 = v10;
          os_log_type_t v40 = sub_10045AFDC(v34, v8, 8);
          if (v10)
          {
            sub_100250CC4(v34, v8);
            sub_100250CC4(v34, v8);
            swift_release();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          unint64_t v41 = v40[2];
          if (!v41)
          {
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          if (v41 == 1) {
            goto LABEL_70;
          }
          if (v41 < 3) {
            goto LABEL_71;
          }
          if (v41 == 3) {
            goto LABEL_72;
          }
          uint64_t v6 = 0;
          uint64_t v42 = v40[4];
          uint64_t v43 = v40[5];
          uint64_t v44 = v40[6];
          uint64_t v45 = v40[7];
          swift_bridgeObjectRelease();
          sub_100250CC4(v34, v8);
          sub_100250CC4(v34, v8);
          v95[0] = (Swift::Int)v33;
          unint64_t v47 = v33[2];
          unint64_t v46 = v33[3];
          Swift::Int v48 = (Swift::Int)v33;
          if (v47 >= v46 >> 1)
          {
            sub_1002557DC(v46 > 1, v47 + 1, 1);
            Swift::Int v48 = v95[0];
          }
          *(void *)(v48 + 16) = v47 + 1;
          unint64_t v49 = (void *)(v48 + 32 * v47);
          v49[4] = v42;
          v49[5] = v43;
          v49[6] = v44;
          v49[7] = v45;
          unint64_t v8 = v94 - 1;
          unint64_t v10 = v39;
          unint64_t v33 = (void *)v48;
          if (v94 == 1)
          {
            swift_bridgeObjectRelease();
            os_log_type_t v11 = _swiftEmptyArrayStorage;
            goto LABEL_41;
          }
          break;
        case 2uLL:
          uint64_t v38 = *(void *)(v34 + 16);
          uint64_t v37 = *(void *)(v34 + 24);
          uint64_t v36 = v37 - v38;
          if (!__OFSUB__(v37, v38)) {
            goto LABEL_28;
          }
          goto LABEL_74;
        case 3uLL:
          goto LABEL_78;
        default:
          uint64_t v36 = BYTE6(v8);
          goto LABEL_29;
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v33 = _swiftEmptyArrayStorage;
LABEL_41:
  uint64_t v50 = *(void *)&v93[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo];
  os_log_type_t v89 = v33;
  if (!v50) {
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  Swift::Int v51 = swift_bridgeObjectRetain();
  Swift::Int v52 = sub_1005662A0(v51, (uint64_t)v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v53 = *(void *)(v52 + 16);
  if (v53)
  {
    unint64_t v94 = v10;
    v95[0] = (Swift::Int)v11;
    sub_1002557FC(0, v53, 0);
    uint64_t v54 = (void *)v95[0];
    Swift::Int v92 = v52;
    uint64_t v55 = (uint64_t *)(v52 + 56);
    do
    {
      uint64_t v56 = *(v55 - 3);
      uint64_t v57 = *(v55 - 2);
      uint64_t v58 = *(v55 - 1);
      uint64_t v59 = *v55;
      v95[0] = (Swift::Int)v54;
      unint64_t v61 = v54[2];
      unint64_t v60 = v54[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v61 >= v60 >> 1)
      {
        sub_1002557FC(v60 > 1, v61 + 1, 1);
        uint64_t v54 = (void *)v95[0];
      }
      v54[2] = v61 + 1;
      char v62 = &v54[4 * v61];
      v62[4] = v56;
      v62[5] = v57;
      v62[6] = v58;
      v62[7] = v59;
      v55 += 9;
      --v53;
    }
    while (v53);
    swift_bridgeObjectRelease();
    unint64_t v10 = v94;
    uint64_t v63 = v54[2];
    if (!v63) {
      goto LABEL_52;
    }
    goto LABEL_50;
  }
  swift_bridgeObjectRelease();
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v63 = _swiftEmptyArrayStorage[2];
  if (v63)
  {
LABEL_50:
    uint64_t v64 = v54 + 7;
    do
    {
      Swift::Int v65 = *(v64 - 3);
      Swift::Int v66 = *(v64 - 2);
      Swift::Int v67 = *(v64 - 1);
      Swift::Int v68 = *v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100597E48(v95, v65, v66, v67, v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64 += 4;
      --v63;
    }
    while (v63);
  }
LABEL_52:
  swift_bridgeObjectRelease();
  unint64_t v33 = v89;
LABEL_53:
  Swift::Int v69 = v33[2];
  if (v69)
  {
    uint64_t v70 = v93;
    id v90 = &v93[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB];
    swift_bridgeObjectRetain();
    id v88 = v70;
    uint64_t v71 = (void **)(v33 + 7);
    uint64_t v72 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v93 = *v71;
      unint64_t v94 = v10;
      uint64_t v74 = (uint64_t)*(v71 - 2);
      Swift::Int v73 = (Swift::Int)*(v71 - 1);
      Swift::Int v91 = v69;
      Swift::Int v92 = v73;
      uint64_t v75 = (uint64_t)*(v71 - 3);
      uint64_t v76 = *((void *)v90 + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t, Swift::Int, unsigned char *, uint64_t, uint64_t))(v76 + 88);
      swift_unknownObjectRetain();
      unint64_t v79 = v94;
      uint64_t v80 = v78(v75, v74, v92, v93, ObjectType, v76);
      unint64_t v10 = v79;
      if (v79) {
        break;
      }
      uint64_t v81 = v80;
      swift_unknownObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v72 = sub_1002545C4(0, v72[2] + 1, 1, v72);
      }
      unint64_t v83 = v72[2];
      unint64_t v82 = v72[3];
      if (v83 >= v82 >> 1) {
        uint64_t v72 = sub_1002545C4((void *)(v82 > 1), v83 + 1, 1, v72);
      }
      v71 += 4;
      v72[2] = v83 + 1;
      v72[v83 + 4] = v81;
      Swift::Int v69 = v91 - 1;
      if (v91 == 1)
      {

        swift_bridgeObjectRelease();
        goto LABEL_65;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v72 = _swiftEmptyArrayStorage;
LABEL_65:
    swift_bridgeObjectRelease();
    uint64_t v84 = v72[2];
    if (v84)
    {
      uint64_t v85 = v72 + 4;
      do
      {
        ++v85;
        uint64_t v86 = swift_bridgeObjectRetain();
        sub_10057CE18(v86);
        --v84;
      }
      while (v84);
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v96;
  }
}

uint64_t sub_100561338(void (*a1)(void *, uint64_t, uint64_t))
{
  unint64_t v25 = a1;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = v1;
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v5 = v6;
  uint64_t v7 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v8 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v8(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v9 = v6;
  char v10 = _dispatchPreconditionTest(_:)();
  os_log_type_t v11 = *(uint64_t (**)(void *, uint64_t))(v3 + 8);
  uint64_t result = v11(v5, v2);
  if (v10)
  {
    *uint64_t v5 = v9;
    v8(v5, v7, v2);
    id v13 = v9;
    char v14 = _dispatchPreconditionTest(_:)();
    uint64_t result = v11(v5, v2);
    if (v14)
    {
      uint64_t v15 = v26;
      if (*(unsigned char *)(v26 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully) == 1)
      {
        unint64_t v8 = v25;
        if ([*(id *)(v26 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_bucket) acquireTokenForIdentifier:(unsigned __int16)v25])
        {
          if (*(void *)(v15 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo))
          {
            uint64_t v16 = *(void *)(*(void *)(v15
                                        + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo
                                        + 8)
                            + 16);
            uint64_t v17 = swift_bridgeObjectRetain();
            if (v16)
            {
              uint64_t v18 = (unsigned char *)(v17 + 99);
              while ((*v18 & 1) != 0 || *(unsigned __int16 *)(v18 - 3) != (unsigned __int16)v8)
              {
                v18 += 72;
                if (!--v16) {
                  goto LABEL_16;
                }
              }
              swift_bridgeObjectRelease();
              LOBYTE(v8) = 1;
              return v8 & 1;
            }
LABEL_16:
            swift_bridgeObjectRelease();
          }
          uint64_t v21 = *(void *)(v15 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8);
          uint64_t ObjectType = swift_getObjectType();
          unint64_t v23 = *(uint64_t (**)(void, uint64_t, uint64_t))(v21 + 112);
          swift_unknownObjectRetain();
          LOBYTE(v8) = v23(v8, ObjectType, v21);
          swift_unknownObjectRelease();
          return v8 & 1;
        }
        char v19 = 5;
      }
      else
      {
        char v19 = 0;
      }
      sub_1005676DC();
      swift_allocError();
      *uint64_t v20 = v19;
      swift_willThrow();
      return v8 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1005615F8(void *a1, void *a2)
{
  unint64_t v25 = a2;
  uint64_t v24 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = v2;
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t))(v4 + 8);
  uint64_t result = v12(v6, v3);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  *uint64_t v6 = v10;
  v9(v6, v8, v3);
  id v14 = v10;
  char v15 = _dispatchPreconditionTest(_:)();
  uint64_t result = v12(v6, v3);
  if ((v15 & 1) == 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v16 = v27;
  if (*(unsigned char *)(v27 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully) == 1)
  {
    uint64_t v17 = v26;
    uint64_t v18 = sub_10056008C(v24, v25);
    if (!v17)
    {
      unint64_t v20 = v19;
      if (v19)
      {
        uint64_t v21 = v18;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_100561828(v21, v20);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    sub_1005676DC();
    swift_allocError();
    *unint64_t v22 = 0;
    swift_willThrow();
  }
  return v16;
}

uint64_t sub_100561828(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = a1;
  unint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v32 = v2;
  uint64_t v7 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t))(v4 + 8);
  uint64_t result = v12(v6, v3);
  if (v11)
  {
    *uint64_t v6 = v10;
    v9(v6, v8, v3);
    id v14 = v10;
    char v15 = _dispatchPreconditionTest(_:)();
    uint64_t result = v12(v6, v3);
    if (v15)
    {
      uint64_t v16 = v32;
      if (v32[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully] != 1)
      {
        sub_1005676DC();
        swift_allocError();
        *uint64_t v27 = 0;
        swift_willThrow();
        return (uint64_t)v16;
      }
      uint64_t v17 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo;
      uint64_t v18 = *(void **)&v32[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo];
      uint64_t v20 = v30;
      unint64_t v19 = v31;
      if (v18)
      {
        id v21 = [v18 identifier];
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;

        if (v22 == v20 && v24 == v19)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0) {
            goto LABEL_10;
          }
        }
        uint64_t v16 = *(char **)&v16[v17];
        if (v16) {
          uint64_t v28 = v16;
        }
        return (uint64_t)v16;
      }
LABEL_10:
      sub_10026BB6C(&v16[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore], *(void *)&v16[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore + 24]);
      return sub_1005CAC30(v20, v19);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100561AAC(Swift::Int a1, Swift::Int a2)
{
  Swift::Int v27 = a2;
  Swift::Int v26 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = v2;
  uint64_t v7 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  id v14 = *(uint64_t (**)(void *, uint64_t))(v4 + 8);
  uint64_t v12 = v4 + 8;
  id v13 = v14;
  uint64_t result = v14(v6, v3);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  *uint64_t v6 = v10;
  v9(v6, v8, v3);
  id v16 = v10;
  char v17 = _dispatchPreconditionTest(_:)();
  uint64_t result = v13(v6, v3);
  if ((v17 & 1) == 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v18 = v29;
  if (*((unsigned char *)v29 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully) == 1)
  {
    uint64_t v19 = v28;
    uint64_t v20 = sub_100560A3C(v26, v27);
    if (!v19)
    {
      uint64_t v21 = sub_100557678(v20);
      swift_bridgeObjectRelease();
      id v22 = v18;
      uint64_t v23 = sub_100566054(v21);
      swift_bridgeObjectRelease();

      uint64_t v12 = sub_100259A00((unint64_t)v23);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1005676DC();
    swift_allocError();
    *uint64_t v24 = 0;
    swift_willThrow();
  }
  return v12;
}

uint64_t sub_100561CF0(void *a1, void *a2)
{
  uint64_t v23 = a2;
  id v22 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = v2;
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t))(v4 + 8);
  uint64_t result = v12(v6, v3);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  *uint64_t v6 = v10;
  v9(v6, v8, v3);
  id v14 = v10;
  char v15 = _dispatchPreconditionTest(_:)();
  uint64_t result = v12(v6, v3);
  if ((v15 & 1) == 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v16 = v25;
  if (*(unsigned char *)(v25 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully) == 1)
  {
    uint64_t v17 = v24;
    sub_10056008C(v22, v23);
    if (!v17)
    {
      if (v18)
      {
        uint64_t v16 = v19;
        swift_bridgeObjectRelease();
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    sub_1005676DC();
    swift_allocError();
    *uint64_t v20 = 0;
    swift_willThrow();
  }
  return v16;
}

id sub_100561EF8(uint64_t a1, unint64_t a2)
{
  uint64_t v64 = (char *)a1;
  unint64_t v65 = a2;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (id *)((char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v62 = v2;
  uint64_t v7 = *(void **)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v4 + 8);
  v12(v6, v3);
  if ((v11 & 1) == 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  *uint64_t v6 = v10;
  v9(v6, v8, v3);
  id v13 = v10;
  char v14 = _dispatchPreconditionTest(_:)();
  v12(v6, v3);
  if ((v14 & 1) == 0)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    JUMPOUT(0x10056258CLL);
  }
  char v15 = v62;
  if (v62[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully] != 1)
  {
    sub_1005676DC();
    swift_allocError();
    *uint64_t v18 = 0;
    swift_willThrow();
    return v10;
  }
  id v10 = 0;
  uint64_t v16 = v63;
  switch(v65 >> 62)
  {
    case 1uLL:
      LODWORD(v17) = HIDWORD(v64) - v64;
      if (__OFSUB__(HIDWORD(v64), v64)) {
        goto LABEL_63;
      }
      uint64_t v17 = (int)v17;
LABEL_10:
      if (v17 < 9) {
        return 0;
      }
      uint64_t v23 = sub_1006666F4(0, 9, 3);
      id v10 = *(id *)(v23 + 16);
      uint64_t v24 = _swiftEmptyArrayStorage;
      if (!v10) {
        goto LABEL_27;
      }
      swift_retain_n();
      sub_10025ADCC((uint64_t)v64, v65);
      Swift::Int v66 = _swiftEmptyArrayStorage;
      sub_10025581C(0, (int64_t)v10, 0);
      uint64_t v25 = 0;
      uint64_t v24 = v66;
      break;
    case 2uLL:
      uint64_t v20 = *((void *)v64 + 2);
      uint64_t v19 = *((void *)v64 + 3);
      BOOL v21 = __OFSUB__(v19, v20);
      uint64_t v17 = v19 - v20;
      if (!v21) {
        goto LABEL_10;
      }
      goto LABEL_64;
    case 3uLL:
      return v10;
    default:
      uint64_t v17 = BYTE6(v65);
      goto LABEL_10;
  }
  do
  {
    uint64_t v26 = *(void *)(v23 + 8 * (void)v25 + 32);
    uint64_t v27 = NSNotFound.getter();
    if (__OFADD__(v26, 3))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v26 == v27 || __OFSUB__(v26, v26 + 3)) {
      goto LABEL_60;
    }
    uint64_t v29 = Data.subdata(in:)();
    unint64_t v31 = v30;
    sub_10025ADCC(v29, v30);
    int v32 = sub_10045BC60(v29, v31);
    if (v16)
    {
      sub_100250CC4(v29, v31);
      swift_release_n();
      swift_release();
      sub_100250CC4((uint64_t)v64, v65);
      swift_release();
      return v10;
    }
    int v33 = v32;
    sub_100250CC4(v29, v31);
    Swift::Int v66 = v24;
    unint64_t v35 = v24[2];
    unint64_t v34 = v24[3];
    if (v35 >= v34 >> 1)
    {
      sub_10025581C(v34 > 1, v35 + 1, 1);
      uint64_t v24 = v66;
    }
    uint64_t v25 = (char *)v25 + 1;
    v24[2] = v35 + 1;
    uint64_t v36 = (char *)v24 + 4 * v35;
    *((_WORD *)v36 + 16) = v33;
    v36[34] = BYTE2(v33);
  }
  while (v10 != v25);
  swift_release();
  sub_100250CC4((uint64_t)v64, v65);
  swift_release();
  char v15 = v62;
LABEL_27:
  if (!*(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo])
  {
    uint64_t v63 = v16;
    unint64_t v44 = v24[2];
    if (!v44)
    {
LABEL_53:
      unint64_t v46 = (char *)_swiftEmptyArrayStorage;
LABEL_56:
      swift_bridgeObjectRelease();
      if (*((void *)v46 + 2))
      {
        id v10 = (id)*((void *)v46 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        return 0;
      }
      return v10;
    }
LABEL_41:
    char v62 = (char *)v23;
    uint64_t v64 = &v15[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB];
    v61[0] = v15;
    swift_bridgeObjectRetain();
    v61[1] = v24;
    uint64_t v45 = (unsigned __int8 *)v24 + 34;
    unint64_t v46 = (char *)_swiftEmptyArrayStorage;
    do
    {
      unint64_t v65 = v44;
      unint64_t v47 = v46;
      int v48 = *v45;
      int v49 = *((unsigned __int16 *)v45 - 1);
      id v10 = *(id *)v64;
      uint64_t v50 = *((void *)v64 + 1);
      uint64_t ObjectType = swift_getObjectType();
      Swift::Int v52 = *(uint64_t (**)(void, uint64_t, uint64_t))(v50 + 96);
      swift_unknownObjectRetain();
      uint64_t v53 = v63;
      uint64_t v54 = v52(v49 | (v48 << 16), ObjectType, v50);
      if (v53)
      {
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease();
        return v10;
      }
      uint64_t v56 = v54;
      uint64_t v57 = v55;
      swift_unknownObjectRelease();
      uint64_t v63 = 0;
      if (v57)
      {
        swift_bridgeObjectRetain();
        sub_1005678C8(v56, v57);
        unint64_t v46 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v46 = sub_100253208(0, *((void *)v47 + 2) + 1, 1, v47);
        }
        unint64_t v59 = *((void *)v46 + 2);
        unint64_t v58 = *((void *)v46 + 3);
        if (v59 >= v58 >> 1) {
          unint64_t v46 = sub_100253208((char *)(v58 > 1), v59 + 1, 1, v46);
        }
        *((void *)v46 + 2) = v59 + 1;
        unint64_t v60 = &v46[16 * v59];
        *((void *)v60 + 4) = v56;
        *((void *)v60 + 5) = v57;
      }
      else
      {
        unint64_t v46 = v47;
      }
      v45 += 4;
      unint64_t v44 = v65 - 1;
    }
    while (v65 != 1);

    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  uint64_t v37 = *(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo + 8];
  uint64_t v38 = *(void *)(v37 + 16);
  swift_bridgeObjectRetain();
  if (!v38)
  {
LABEL_52:
    uint64_t v63 = v16;
    swift_bridgeObjectRelease();
    unint64_t v44 = v24[2];
    if (!v44) {
      goto LABEL_53;
    }
    goto LABEL_41;
  }
  uint64_t v39 = 0;
  while (1)
  {
    uint64_t v40 = v37 + 32 + 72 * v39;
    if ((*(unsigned char *)(v40 + 67) & 1) == 0)
    {
      uint64_t v41 = v24[2];
      if (v41) {
        break;
      }
    }
LABEL_30:
    if (++v39 == v38) {
      goto LABEL_52;
    }
  }
  uint64_t v42 = (unsigned __int8 *)v24 + 34;
  while (*((unsigned __int16 *)v42 - 1) != *(unsigned __int16 *)(v40 + 64) || *v42 != *(unsigned __int8 *)(v40 + 66))
  {
    v42 += 4;
    if (!--v41) {
      goto LABEL_30;
    }
  }
  id v10 = *(id *)v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10056259C(uint64_t a1, unint64_t a2)
{
  unint64_t v33 = a2;
  uint64_t v32 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = v2;
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ);
  *uint64_t v6 = v7;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v4 + 8);
  v12(v6, v3);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  *uint64_t v6 = v10;
  v9(v6, v8, v3);
  id v13 = v10;
  char v14 = _dispatchPreconditionTest(_:)();
  v12(v6, v3);
  if ((v14 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    JUMPOUT(0x100562964);
  }
  if (*(unsigned char *)(v39 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashesUpdatedSuccessfully) == 1)
  {
    unint64_t v15 = v33;
    uint64_t v16 = v34;
    char v17 = 0;
    switch(v33 >> 62)
    {
      case 1uLL:
        LODWORD(v18) = HIDWORD(v32) - v32;
        if (__OFSUB__(HIDWORD(v32), v32)) {
          goto LABEL_24;
        }
        uint64_t v18 = (int)v18;
LABEL_10:
        if (v18 < 8) {
          goto LABEL_11;
        }
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = 2;
        uint64_t v25 = swift_allocObject();
        uint64_t v26 = v32;
        *(void *)(v25 + 16) = v32;
        *(void *)(v25 + 24) = v15;
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = sub_100567780;
        *(void *)(v27 + 24) = v25;
        *(_OWORD *)(v27 + 32) = xmmword_10077C050;
        *(void *)(v27 + 48) = 2;
        *(void *)(v27 + 56) = sub_100567740;
        *(void *)(v27 + 64) = v24;
        long long v35 = xmmword_10077C050;
        uint64_t v36 = 2;
        uint64_t v37 = sub_1005677F4;
        uint64_t v38 = v27;
        sub_10025ADCC(v26, v15);
        swift_retain();
        uint64_t v28 = sub_100557874((int64_t *)&v35);
        swift_release();
        if (v16)
        {
          swift_release();
        }
        else
        {
          uint64_t v29 = v28[2];
          if (!v29)
          {
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_11;
          }
          swift_bridgeObjectRetain();
          uint64_t v30 = 0;
          while ((sub_100561338((void (*)(void *, uint64_t, uint64_t))*((unsigned __int16 *)v28 + v30 + 16)) & 1) == 0)
          {
            if (v29 == ++v30)
            {
              swift_release();
              swift_bridgeObjectRelease_n();
LABEL_11:
              char v17 = 0;
              return v17 & 1;
            }
          }
          swift_release();
          swift_bridgeObjectRelease_n();
          char v17 = 1;
        }
        break;
      case 2uLL:
        uint64_t v21 = *(void *)(v32 + 16);
        uint64_t v20 = *(void *)(v32 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        uint64_t v18 = v20 - v21;
        if (!v22) {
          goto LABEL_10;
        }
        goto LABEL_25;
      case 3uLL:
        return v17 & 1;
      default:
        uint64_t v18 = BYTE6(v33);
        goto LABEL_10;
    }
  }
  else
  {
    sub_1005676DC();
    swift_allocError();
    *uint64_t v19 = 0;
    swift_willThrow();
  }
  return v17 & 1;
}

uint64_t sub_100562974@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = NSNotFound.getter();
  uint64_t v7 = v5 + a2;
  if (__OFADD__(v5, a2))
  {
    __break(1u);
  }
  else if (v5 != result && v5 < v7)
  {
    *a3 = v5;
    a3[1] = v7;
    return result;
  }
  __break(1u);
  return result;
}

NSString *sub_1005629C8()
{
  sub_10000A844(&qword_10096B3E0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077C060;
  *(void *)(v0 + 32) = CNContactPhoneNumbersKey;
  *(void *)(v0 + 40) = CNContactEmailAddressesKey;
  uint64_t v4 = v0;
  *(void *)(v0 + 48) = CNContactInstantMessageAddressesKey;
  specialized Array._endMutation()();
  qword_1009793A0 = v4;
  uint64_t v1 = CNContactPhoneNumbersKey;
  uint64_t v2 = CNContactEmailAddressesKey;

  return CNContactInstantMessageAddressesKey;
}

uint64_t sub_100562A78()
{
  sub_10000A844(&qword_10096B2E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077C070;
  id v1 = [self descriptorForRequiredKeysForStyle:0];
  *(void *)(inited + 56) = swift_getObjectType();
  *(void *)(inited + 32) = v1;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = &type metadata for String;
  *(void *)(inited + 64) = v2;
  *(void *)(inited + 72) = v3;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v4;
  *(void *)(inited + 104) = v5;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 152) = &type metadata for String;
  *(void *)(inited + 128) = v6;
  *(void *)(inited + 136) = v7;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = &type metadata for String;
  *(void *)(inited + 160) = v8;
  *(void *)(inited + 168) = v9;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 216) = &type metadata for String;
  *(void *)(inited + 192) = v10;
  *(void *)(inited + 200) = v11;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 248) = &type metadata for String;
  *(void *)(inited + 224) = v12;
  *(void *)(inited + 232) = v13;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 280) = &type metadata for String;
  *(void *)(inited + 256) = v14;
  *(void *)(inited + 264) = v15;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 312) = &type metadata for String;
  *(void *)(inited + 288) = v16;
  *(void *)(inited + 296) = v17;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 344) = &type metadata for String;
  *(void *)(inited + 320) = v18;
  *(void *)(inited + 328) = v19;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 376) = &type metadata for String;
  *(void *)(inited + 352) = v20;
  *(void *)(inited + 360) = v21;
  BOOL v22 = sub_10045E9D0(inited);
  swift_setDeallocating();
  uint64_t result = swift_arrayDestroy();
  qword_1009793A8 = (uint64_t)v22;
  return result;
}

void sub_100562C2C()
{
  qword_1009793B0 = (uint64_t)&_swiftEmptyArrayStorage;
}

void sub_100562C40()
{
  qword_1009793B8 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t type metadata accessor for SDAirDropContactHashManager()
{
  return self;
}

uint64_t sub_100562EE4(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(void *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_1005679D0;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = &unk_1008DF4F0;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = v1;
  id v14 = a1;
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_100565E78((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_100442CA0((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_100563198(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) == 1)
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000B47C(v4, (uint64_t)qword_100979380);
    id v5 = a2;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315650;
      id v9 = [v5 givenName];
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_100254634(v10, v12, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      id v13 = [v5 familyName];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      sub_100254634(v14, v16, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 22) = 2080;
      id v17 = [v5 identifier];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      sub_100254634(v18, v20, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting meCard (fn=%s,ln=%s,cid=%s)", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10055CEE0(v5);
    uint64_t v24 = (void *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo);
    uint64_t v25 = *(void **)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo);
    *uint64_t v24 = v5;
    v24[1] = v26;
    id v27 = v5;
    sub_1005679D8(v25);
  }
  else
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000B47C(v21, (uint64_t)qword_100979380);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v22, "Not activated in setMeCard. Bailing.", v23, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100563774@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) == 1)
  {
    uint64_t result = sub_1005615F8(a2, a3);
    if (v4)
    {
      if (qword_100969F68 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10000B47C(v7, (uint64_t)qword_100979380);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136315138;
        swift_getErrorValue();
        uint64_t v11 = Error.localizedDescription.getter();
        sub_100254634(v11, v12, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error: failed to get contactForCombinedHash because (%s)", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t result = 0;
    }
  }
  else
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B47C(v13, (uint64_t)qword_100979380);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not activated in contactForCombinedHash. Bailing.", v16, 2u);
      swift_slowDealloc();
    }

    uint64_t result = 0;
  }
  *a4 = result;
  return result;
}

void *sub_100563B00@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, Swift::Int a3@<X2>, void *a4@<X8>)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) != 1)
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B47C(v13, (uint64_t)qword_100979380);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not activated in contactsForCombinedHash. Bailing.", v16, 2u);
      swift_slowDealloc();
    }

    goto LABEL_14;
  }
  uint64_t result = (void *)sub_100561AAC(a2, a3);
  if (v4)
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000B47C(v7, (uint64_t)qword_100979380);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_getErrorValue();
      uint64_t v11 = Error.localizedDescription.getter();
      sub_100254634(v11, v12, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error: failed to get contactsForCombinedHash because (%s)", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();

LABEL_14:
    uint64_t result = &_swiftEmptySetSingleton;
  }
  *a4 = result;
  return result;
}

void sub_100563F94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, const char *a5@<X4>, const char *a6@<X5>, uint64_t *a7@<X8>)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) == 1)
  {
    uint64_t v10 = a4(a2, a3);
    if (!v7)
    {
      *a7 = v10;
      a7[1] = v11;
      return;
    }
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000B47C(v12, (uint64_t)qword_100979380);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v15 = 136315138;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      sub_100254634(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, a6, v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10000B47C(v19, (uint64_t)qword_100979380);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, a5, v22, 2u);
      swift_slowDealloc();
    }
  }
  *a7 = 0;
  a7[1] = 0;
}

void sub_100564370(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) == 1)
  {
    char v6 = sub_10056259C(a2, a3);
    if (v4)
    {
      if (qword_100969F68 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10000B47C(v7, (uint64_t)qword_100979380);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136315138;
        swift_getErrorValue();
        uint64_t v11 = Error.localizedDescription.getter();
        sub_100254634(v11, v12, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Hash manager: failed to determine if contacts contain short hashes with error (%s)", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      char v17 = 0;
    }
    else
    {
      char v17 = v6 & 1;
    }
  }
  else
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B47C(v13, (uint64_t)qword_100979380);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not activated in contactsContainsShortHashes. Bailing.", v16, 2u);
      swift_slowDealloc();
    }

    char v17 = 0;
  }
  *a4 = v17;
}

uint64_t sub_10056470C()
{
  if (qword_100969F78 != -1) {
    swift_once();
  }
  qword_1009948E0 = qword_1009793A0;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100564794()
{
  if (qword_100969F78 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1009793A0;
  if (qword_100969F80 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  unint64_t v1 = swift_bridgeObjectRetain();
  sub_1003D47E4(v1);
  if (qword_100969F88 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = swift_bridgeObjectRetain();
  sub_1003D47E4(v2);
  swift_bridgeObjectRelease();
  if (qword_100969F90 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  unint64_t v3 = swift_bridgeObjectRetain();
  sub_1003D47E4(v3);
  uint64_t result = swift_bridgeObjectRelease();
  qword_1009948E8 = v0;
  return result;
}

Class sub_10056493C(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_10000A844(&qword_100972450);
  v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v3.super.isa;
}

void sub_1005649BC(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) == 1)
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000B47C(v6, (uint64_t)qword_100979380);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Database dump requested", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 72);
    swift_unknownObjectRetain();
    char v13 = v12(a2, ObjectType, v10);
    swift_unknownObjectRelease();
    char v14 = v13 & 1;
  }
  else
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000B47C(v15, (uint64_t)qword_100979380);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not activated in dumpDB. Bailing.", v18, 2u);
      swift_slowDealloc();
    }

    char v14 = 0;
  }
  *a3 = v14;
}

uint64_t sub_100564D00()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashManagerQ];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_1005675A8;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = &unk_1008DF1F8;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_100565E78((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_100442CA0((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void sub_100564FAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_activated) == 1)
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000B47C(v1, (uint64_t)qword_100979380);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Requesting hash database rebuild", v4, 2u);
      swift_slowDealloc();
    }

    sub_100559204(1);
  }
  else
  {
    if (qword_100969F68 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000B47C(v5, (uint64_t)qword_100979380);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Not activated in rebuildDB. Bailing.", v7, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100565244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = a2;
  uint64_t v47 = type metadata accessor for SHA256();
  uint64_t v5 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v57 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for SHA256Digest();
  uint64_t v7 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  Swift::Int v52 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for String.Encoding();
  uint64_t v9 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100565B24(a3);
  *(void *)&long long v62 = a1;
  swift_bridgeObjectRetain();
  sub_1003D514C(v11);
  int64_t v12 = sub_10054767C(a3, v62);
  int64_t v16 = v15 >> 1;
  uint64_t v17 = (v15 >> 1) - v14;
  if (__OFSUB__(v15 >> 1, v14))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    uint64_t v40 = _swiftEmptyArrayStorage;
    goto LABEL_28;
  }
  uint64_t v18 = v13;
  uint64_t v19 = v14;
  v45[1] = v12;
  unint64_t v61 = _swiftEmptyArrayStorage;
  sub_10025585C(0, v17 & ~(v17 >> 63), 0);
  if (v17 < 0) {
LABEL_35:
  }
    __break(1u);
  uint64_t v60 = 0;
  Swift::Int v51 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v50 = (void (**)(char *, uint64_t))(v5 + 8);
  int v49 = (void (**)(uint64_t *, char *, uint64_t))(v7 + 16);
  int v48 = (void (**)(char *, uint64_t))(v7 + 8);
  if (v19 <= v16) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v19;
  }
  uint64_t v21 = v20 - v19;
  os_log_type_t v22 = (uint64_t *)(v18 + 16 * v19 + 8);
  uint64_t v23 = v47;
  do
  {
    if (!v21)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v24 = *v22;
    swift_bridgeObjectRetain();
    uint64_t v25 = v55;
    static String.Encoding.utf8.getter();
    *(void *)&long long v58 = v24;
    uint64_t v26 = String.data(using:allowLossyConversion:)();
    unint64_t v28 = v27;
    (*v51)(v25, v56);
    uint64_t v65 = v26;
    unint64_t v66 = v28;
    sub_10000A844(&qword_10096B260);
    Optional.unwrap(_:file:line:)();
    sub_100250CB0(v26, v28);
    unint64_t v30 = *((void *)&v62 + 1);
    uint64_t v29 = v62;
    sub_100565E78((unint64_t *)&unk_100974C20, (void (*)(uint64_t))&type metadata accessor for SHA256);
    uint64_t v31 = v57;
    dispatch thunk of HashFunction.init()();
    uint64_t v59 = v17;
    switch(v30 >> 62)
    {
      case 1uLL:
        if (v29 >> 32 < (int)v29) {
          goto LABEL_30;
        }
        sub_10025ADCC(v29, v30);
        if (__DataStorage._bytes.getter() && __OFSUB__((int)v29, __DataStorage._offset.getter())) {
          goto LABEL_33;
        }
        __DataStorage._length.getter();
        uint64_t v31 = v57;
        uint64_t v23 = v47;
LABEL_20:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        break;
      case 2uLL:
        uint64_t v32 = *(void *)(v29 + 16);
        uint64_t v46 = *(void *)(v29 + 24);
        sub_10025ADCC(v29, v30);
        swift_retain();
        swift_retain();
        if (__DataStorage._bytes.getter() && __OFSUB__(v32, __DataStorage._offset.getter())) {
          goto LABEL_32;
        }
        if (__OFSUB__(v46, v32)) {
          goto LABEL_31;
        }
        __DataStorage._length.getter();
        uint64_t v31 = v57;
        uint64_t v33 = v47;
        dispatch thunk of HashFunction.update(bufferPointer:)();
        uint64_t v23 = v33;
        swift_release();
        swift_release();
        break;
      case 3uLL:
        *(void *)((char *)&v62 + 6) = 0;
        *(void *)&long long v62 = 0;
        goto LABEL_20;
      default:
        *(void *)&long long v62 = v29;
        WORD4(v62) = v30;
        BYTE10(v62) = BYTE2(v30);
        BYTE11(v62) = BYTE3(v30);
        BYTE12(v62) = BYTE4(v30);
        BYTE13(v62) = BYTE5(v30);
        goto LABEL_20;
    }
    sub_100250CC4(v29, v30);
    uint64_t v34 = v52;
    dispatch thunk of HashFunction.finalize()();
    (*v50)(v31, v23);
    uint64_t v35 = v53;
    uint64_t v63 = v53;
    uint64_t v64 = sub_100565E78(&qword_100974AE0, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
    uint64_t v36 = sub_100278AE4((uint64_t *)&v62);
    (*v49)(v36, v34, v35);
    sub_10026BB6C(&v62, v63);
    uint64_t v37 = v60;
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    uint64_t v60 = v37;
    uint64_t v38 = v65;
    unint64_t v39 = v66;
    sub_10024D338((uint64_t)&v62);
    sub_1005474E0(v54, v38, v39, (uint64_t *)&v62);
    sub_100250CC4(v29, v30);
    (*v48)(v34, v35);
    swift_bridgeObjectRelease();
    long long v58 = v62;
    uint64_t v40 = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10025585C(0, v40[2] + 1, 1);
      uint64_t v40 = v61;
    }
    uint64_t v41 = v59;
    unint64_t v43 = v40[2];
    unint64_t v42 = v40[3];
    if (v43 >= v42 >> 1)
    {
      sub_10025585C(v42 > 1, v43 + 1, 1);
      uint64_t v40 = v61;
    }
    v40[2] = v43 + 1;
    *(_OWORD *)&v40[2 * v43 + 4] = v58;
    --v21;
    v22 += 2;
    uint64_t v17 = v41 - 1;
  }
  while (v17);
  swift_unknownObjectRelease();
LABEL_28:
  *(void *)&long long v62 = v40;
  sub_100565EC0();
  return sub_10057C590(v62);
}

uint64_t sub_100565B24(uint64_t a1)
{
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v31 - 8);
  uint64_t result = __chkstk_darwin(v31);
  uint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = sub_1002552C8((void *)1, a1);
    uint64_t v7 = sub_100566180((uint64_t)v6, 0xD000000000000018, 0x80000001007C1860);
    swift_release();
    uint64_t v8 = v7[2];
    v29[1] = v7;
    if (v8)
    {
      uint64_t v9 = self;
      unint64_t v30 = (void (**)(char *, uint64_t))(v2 + 8);
      uint64_t v10 = v7 + 5;
      uint64_t v11 = (void *)v9;
      int64_t v12 = (char *)_swiftEmptyArrayStorage;
      uint64_t v13 = &selRef_shouldNotify;
      uint64_t v32 = (void *)v9;
      while (1)
      {
        uint64_t v33 = v12;
        swift_bridgeObjectRetain();
        id v15 = [v11 v13[91]];
        NSString v16 = String._bridgeToObjectiveC()();
        uint64_t v17 = v13;
        id v18 = [v15 stringForKey:v16];

        if (v18)
        {
          swift_bridgeObjectRelease();
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;

          int64_t v12 = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v12 = sub_100253208(0, *((void *)v12 + 2) + 1, 1, v12);
          }
          uint64_t v13 = &selRef_shouldNotify;
          unint64_t v23 = *((void *)v12 + 2);
          unint64_t v22 = *((void *)v12 + 3);
          int64_t v24 = v23 + 1;
          if (v23 < v22 >> 1) {
            goto LABEL_7;
          }
        }
        else
        {
          UUID.init()();
          uint64_t v19 = UUID.uuidString.getter();
          uint64_t v21 = v25;
          (*v30)(v5, v31);
          id v26 = [v11 v17[91]];
          NSString v27 = String._bridgeToObjectiveC()();
          NSString v28 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v26 setObject:v27 forKey:v28];

          int64_t v12 = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v12 = sub_100253208(0, *((void *)v12 + 2) + 1, 1, v12);
          }
          unint64_t v23 = *((void *)v12 + 2);
          unint64_t v22 = *((void *)v12 + 3);
          int64_t v24 = v23 + 1;
          uint64_t v13 = &selRef_shouldNotify;
          if (v23 < v22 >> 1) {
            goto LABEL_7;
          }
        }
        int64_t v12 = sub_100253208((char *)(v22 > 1), v24, 1, v12);
LABEL_7:
        *((void *)v12 + 2) = v24;
        uint64_t v14 = &v12[16 * v23];
        *((void *)v14 + 4) = v19;
        *((void *)v14 + 5) = v21;
        v10 += 2;
        --v8;
        uint64_t v11 = v32;
        if (!v8) {
          goto LABEL_5;
        }
      }
    }
    int64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_5:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

unint64_t sub_100565E5C()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_100565E78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100565EC0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  unint64_t v3 = v2 - 2;
  if (v2 >= 2)
  {
    unint64_t v4 = 0;
    while (1)
    {
      swift_stdlib_random();
      uint64_t v6 = (0 * (unsigned __int128)v2) >> 64;
      if (v2)
      {
        if (-(uint64_t)v2 % v2)
        {
          while (1)
            swift_stdlib_random();
        }
      }
      unint64_t v8 = v4 + v6;
      if (__OFADD__(v4, v6)) {
        break;
      }
      if (v4 != v8)
      {
        unint64_t v9 = *(void *)(v1 + 16);
        if (v4 >= v9) {
          goto LABEL_18;
        }
        if (v8 >= v9) {
          goto LABEL_19;
        }
        uint64_t v10 = (uint64_t *)(v1 + 32 + 16 * v4);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        uint64_t v13 = (uint64_t *)(v1 + 32 + 16 * v8);
        uint64_t v14 = *v13;
        unint64_t v15 = v13[1];
        sub_10025ADCC(*v10, v12);
        sub_10025ADCC(v14, v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = sub_100482DA0(v1);
        }
        if (v4 >= *(void *)(v1 + 16)) {
          goto LABEL_20;
        }
        NSString v16 = (uint64_t *)(v1 + 32 + 16 * v4);
        uint64_t v17 = *v16;
        unint64_t v18 = v16[1];
        *NSString v16 = v14;
        v16[1] = v15;
        sub_100250CC4(v17, v18);
        if (v8 >= *(void *)(v1 + 16)) {
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t *)(v1 + 32 + 16 * v8);
        uint64_t v20 = *v19;
        unint64_t v21 = v19[1];
        *uint64_t v19 = v11;
        v19[1] = v12;
        sub_100250CC4(v20, v21);
        *unint64_t v22 = v1;
      }
      --v2;
      if (v4++ == v3) {
        return;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
}

void *sub_100566054(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      unint64_t v8 = *v6;
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_100561828(v7, v8);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v6 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100566180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100255510(0, v3, 0);
    uint64_t v6 = a1 + 32;
    do
    {
      v6 += 8;
      swift_bridgeObjectRetain();
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_100255510(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = a2;
      v10[5] = a3;
      --v3;
    }
    while (v3);
  }
  return _swiftEmptyArrayStorage;
}

Swift::Int sub_1005662A0(Swift::Int result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return (Swift::Int)_swiftEmptyArrayStorage;
  }
  unint64_t v3 = 0;
  uint64_t v20 = (Swift::UInt64 *)(a2 + 56);
  Swift::Int v21 = result + 32;
  unint64_t v22 = _swiftEmptyArrayStorage;
  unint64_t v29 = *(void *)(result + 16);
  uint64_t v30 = a2;
  do
  {
    if (v3 <= v2) {
      unint64_t v4 = v2;
    }
    else {
      unint64_t v4 = v3;
    }
    unint64_t v31 = v4;
    unint64_t v5 = v3;
    while (1)
    {
      if (v5 == v31)
      {
        __break(1u);
        return result;
      }
      unint64_t v32 = v5 + 1;
      uint64_t v6 = *(void *)(a2 + 16);
      if (v6) {
        break;
      }
LABEL_7:
      unint64_t v5 = v32;
      a2 = v30;
      if (v32 == v29) {
        return (Swift::Int)v22;
      }
    }
    Swift::Int v7 = v21 + 72 * v5;
    uint64_t v26 = *(void *)(v7 + 8);
    uint64_t v27 = *(void *)v7;
    uint64_t v24 = *(void *)(v7 + 24);
    uint64_t v25 = *(void *)(v7 + 16);
    Swift::UInt64 v8 = *(void *)(v7 + 40);
    Swift::UInt64 v9 = *(void *)(v7 + 48);
    Swift::UInt64 v33 = *(void *)(v7 + 56);
    Swift::UInt64 v34 = *(void *)(v7 + 32);
    int v28 = *(unsigned __int16 *)(v7 + 64) | (*(unsigned __int8 *)(v7 + 66) << 16);
    char v23 = *(unsigned char *)(v7 + 67);
    uint64_t v10 = v20;
    while (1)
    {
      Swift::UInt64 v12 = *(v10 - 1);
      Swift::UInt64 v11 = *v10;
      Swift::UInt64 v13 = *(v10 - 3);
      Swift::UInt64 v14 = *(v10 - 2);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v13);
      Hasher._combine(_:)(v14);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v11);
      Swift::Int v15 = Hasher._finalize()();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v33);
      uint64_t result = Hasher._finalize()();
      if (v15 == result) {
        break;
      }
      v10 += 4;
      if (!--v6) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    NSString v16 = v22;
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1002557BC(0, v22[2] + 1, 1);
      NSString v16 = v22;
    }
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1)
    {
      uint64_t result = sub_1002557BC(v17 > 1, v18 + 1, 1);
      NSString v16 = v22;
    }
    void v16[2] = v18 + 1;
    unint64_t v22 = v16;
    uint64_t v19 = &v16[9 * v18];
    v19[4] = v27;
    v19[5] = v26;
    v19[6] = v25;
    v19[7] = v24;
    v19[8] = v34;
    v19[9] = v8;
    v19[10] = v9;
    v19[11] = v33;
    *((unsigned char *)v19 + 98) = BYTE2(v28);
    *((_WORD *)v19 + 48) = v28;
    *((unsigned char *)v19 + 99) = v23;
    unint64_t v2 = v29;
    a2 = v30;
    unint64_t v3 = v32;
  }
  while (v32 != v29);
  return (Swift::Int)v22;
}

void sub_10056653C()
{
  uint64_t v0 = self;
  char v1 = 0;
  uint64_t v2 = 0;
LABEL_2:
  char v16 = v1;
  unint64_t v3 = &off_1008D3200 + 2 * v2++;
  unint64_t v4 = v3 + 5;
  do
  {
    if ((unint64_t)(v2 - 1) >= 4)
    {
      __break(1u);
      goto LABEL_16;
    }
    swift_bridgeObjectRetain();
    id v5 = [v0 standardUserDefaults];
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 valueForKey:v6];

    if (v7)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10000A7E8((uint64_t)v17, (uint64_t *)&unk_10096AC20);
      id v8 = [v0 standardUserDefaults];
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v8 removeObjectForKey:v9];

      char v1 = 1;
      if (v2 != 4) {
        goto LABEL_2;
      }
      swift_arrayDestroy();
      goto LABEL_10;
    }
    memset(v17, 0, sizeof(v17));
    swift_bridgeObjectRelease();
    sub_10000A7E8((uint64_t)v17, (uint64_t *)&unk_10096AC20);
    ++v2;
    v4 += 2;
  }
  while (v2 != 5);
  swift_arrayDestroy();
  if ((v16 & 1) == 0) {
    return;
  }
LABEL_10:
  if (qword_100969F68 == -1) {
    goto LABEL_11;
  }
LABEL_16:
  swift_once();
LABEL_11:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_100979380);
  Swift::UInt64 v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    Swift::UInt64 v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::UInt64 v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Found some deprecated state, resetting history token", v13, 2u);
    swift_slowDealloc();
  }

  id v14 = [v0 standardUserDefaults];
  NSString v15 = String._bridgeToObjectiveC()();
  [v14 setObject:0 forKey:v15];
}

id sub_100566834()
{
  uint64_t v0 = sub_10000A844(&qword_10097C320);
  __chkstk_darwin(v0 - 8);
  uint64_t v65 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v66 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v58 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v58 - v9;
  uint64_t v11 = sub_10000A844((uint64_t *)&unk_100979470);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v63 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  NSString v15 = (char *)&v58 - v14;
  id result = sub_1001B2B24();
  if (result)
  {
    unint64_t v17 = result;
    unint64_t v18 = &v15[*(int *)(v11 + 48)];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    URL.appendingPathComponent(_:)();
    uint64_t v19 = v11;
    Swift::Int v21 = (char *)(v3 + 8);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
    v20(v10, v2);
    URL.appendingPathComponent(_:)();
    URL.appendingPathExtension(_:)();
    unint64_t v61 = v8;
    v20(v8, v2);
    v60.n128_u64[0] = v19;
    uint64_t v22 = *(int *)(v19 + 48);
    char v23 = v63;
    uint64_t v24 = &v63[v22];
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    long long v62 = v15;
    uint64_t v26 = v15;
    uint64_t v27 = v25;
    v25(v63, v26, v2);
    uint64_t v59 = (uint64_t)v18;
    v27(v24, v18, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v66, v23, v2);
    int v28 = v20;
    v20(v24, v2);
    id v29 = [self defaultManager];
    URL.relativePath.getter();
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v31 = [v29 enumeratorAtPath:v30];

    uint64_t v64 = v28;
    if (v31)
    {
      unint64_t v32 = v63;
      Swift::UInt64 v33 = &v63[*(int *)(v60.n128_u64[0] + 48)];
      v27(v63, v62, v2);
      v27(v33, (char *)v59, v2);
      uint64_t v34 = URL.lastPathComponent.getter();
      uint64_t v36 = v35;
      v28(v33, v2);
      uint64_t v63 = v21;
      __n128 v37 = ((__n128 (*)(char *, uint64_t))v28)(v32, v2);
      uint64_t v38 = &selRef_shouldBlockPresentation;
      v37.n128_u64[0] = 136315138;
      __n128 v60 = v37;
      unint64_t v39 = v66;
      while (1)
      {
        if ([v31 v38[151]])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v69, 0, sizeof(v69));
        }
        sub_10024A250((uint64_t)v69, (uint64_t)v70);
        if (!v70[3])
        {

          swift_bridgeObjectRelease();
          sub_10000A7E8((uint64_t)v70, (uint64_t *)&unk_10096AC20);
          goto LABEL_28;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          break;
        }
        uint64_t v41 = v67;
        unint64_t v40 = v68;
        if (v67 == v34 && v68 == v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v70[0] = v41;
          v70[1] = v40;
          *(void *)&v69[0] = v34;
          *((void *)&v69[0] + 1) = v36;
          uint64_t v42 = type metadata accessor for Locale();
          uint64_t v43 = (uint64_t)v65;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v65, 1, 1, v42);
          sub_10024A1FC();
          StringProtocol.range<A>(of:options:range:locale:)();
          char v45 = v44;
          sub_10000A7E8(v43, &qword_10097C320);
          if (v45)
          {
            swift_bridgeObjectRelease();
            uint64_t v38 = &selRef_shouldBlockPresentation;
          }
          else
          {
            if (qword_100969F68 != -1) {
              swift_once();
            }
            uint64_t v46 = type metadata accessor for Logger();
            sub_10000B47C(v46, (uint64_t)qword_100979380);
            swift_bridgeObjectRetain_n();
            uint64_t v47 = Logger.logObject.getter();
            os_log_type_t v48 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v47, v48))
            {
              uint64_t v49 = swift_slowAlloc();
              uint64_t v59 = v2;
              uint64_t v50 = v49;
              v70[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v50 = v60.n128_u32[0];
              swift_bridgeObjectRetain();
              *(void *)(v50 + 4) = sub_100254634(v41, v40, v70);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v47, v48, "Removing failed db state %s", (uint8_t *)v50, 0xCu);
              swift_arrayDestroy();
              unint64_t v39 = v66;
              swift_slowDealloc();
              uint64_t v2 = v59;
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            Swift::Int v51 = v61;
            URL.appendingPathComponent(_:)();
            swift_bridgeObjectRelease();
            sub_100559B18();
            v64(v51, v2);
            uint64_t v38 = &selRef_shouldBlockPresentation;
          }
        }
      }

      swift_bridgeObjectRelease();
LABEL_28:
      uint64_t v52 = (uint64_t)v62;
    }
    else
    {
      uint64_t v52 = (uint64_t)v62;
      if (qword_100969F68 != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      sub_10000B47C(v53, (uint64_t)qword_100979380);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      BOOL v56 = os_log_type_enabled(v54, v55);
      unint64_t v39 = v66;
      if (v56)
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failed to create enumerator for AirDropHashDB directory", v57, 2u);
        swift_slowDealloc();
      }
    }
    v64(v39, v2);
    return (id)sub_10000A7E8(v52, (uint64_t *)&unk_100979470);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100567090()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10024A250((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_10000A7E8((uint64_t)v6, (uint64_t *)&unk_10096AC20);
    return 0;
  }
}

uint64_t sub_1005671B4(uint64_t a1)
{
  uint64_t v2 = sub_10000A844((uint64_t *)&unk_100975040);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  sub_1002BEBA4(a1, (uint64_t)v4);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease();
  return sub_10000A7E8(a1, (uint64_t *)&unk_100975040);
}

uint64_t sub_10056733C()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10024A250((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_10000A7E8((uint64_t)v6, (uint64_t *)&unk_10096AC20);
    return 0;
  }
}

uint64_t sub_100567460(uint64_t a1)
{
  uint64_t v1 = sub_100565244(a1, 2, 4);
  unint64_t v3 = v2;
  sub_10025ADCC(v1, v2);
  sub_1003D53FC(v1, v3);
  swift_bridgeObjectRetain();
  uint64_t v4 = (char *)&off_1008D32B0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_100253724(0, 2, 1, (char *)&off_1008D32B0);
  }
  unint64_t v6 = *((void *)v4 + 2);
  unint64_t v5 = *((void *)v4 + 3);
  if (v6 >= v5 >> 1) {
    uint64_t v4 = sub_100253724((char *)(v5 > 1), v6 + 1, 1, v4);
  }
  *((void *)v4 + 2) = v6 + 1;
  v4[v6 + 32] = 0;
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1005A532C((uint64_t)v4);
  swift_bridgeObjectRelease();
  sub_100250CC4(v1, v3);
  return v7;
}

uint64_t sub_100567570()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1005675A8()
{
  sub_100564FAC(*(void *)(v0 + 16));
}

uint64_t sub_1005675B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005675C0()
{
  return swift_release();
}

void sub_1005675C8()
{
  sub_10055F840(*(void *)(v0 + 16));
}

void sub_1005675E4(unsigned char *a1@<X8>)
{
  sub_1005649BC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_100567600()
{
  sub_100559A2C(*(void *)(v0 + 16), "First unlock handler called");
}

id sub_100567624()
{
  return sub_100559100(*(void *)(v0 + 16));
}

void sub_10056762C()
{
  sub_100559A2C(*(void *)(v0 + 16), "System monitor activated.");
}

char *sub_100567650()
{
  return sub_10055AE50();
}

void sub_100567674()
{
}

void sub_100567698()
{
}

void sub_1005676BC(unsigned char *a1@<X8>)
{
  sub_100564370(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

unint64_t sub_1005676DC()
{
  unint64_t result = qword_100979480;
  if (!qword_100979480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979480);
  }
  return result;
}

uint64_t sub_100567730()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100567740@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100562974(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100567748()
{
  sub_100250CC4(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100567780@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Data.subdata(in:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1005677B4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1005677F4(uint64_t *a1)
{
  void (*v3)(void *__return_ptr, uint64_t *);
  void v5[2];
  uint64_t v6;

  uint64_t v2 = *(uint64_t (**)(void *))(v1 + 16);
  uint64_t v3 = *(void (**)(void *__return_ptr, uint64_t *))(v1 + 56);
  unint64_t v6 = *a1;
  v3(v5, &v6);
  return v2(v5);
}

uint64_t sub_100567858(uint64_t a1)
{
  return a1;
}

void sub_100567884(uint64_t *a1@<X8>)
{
  sub_100563F94(v1[2], v1[3], v1[4], (uint64_t (*)(uint64_t, uint64_t))sub_100561EF8, "Not activated in hashesNeedUpdating. Bailing.", "Hash manager: failed to get contact indentifier for medium hashes with error (%s)", a1);
}

uint64_t sub_1005678C8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10056790C(uint64_t *a1@<X8>)
{
  sub_100563F94(v1[2], v1[3], v1[4], (uint64_t (*)(uint64_t, uint64_t))sub_100561CF0, "Not activated in addressOrNumForHash. Bailing.", "Hash manager: failed to get email/phone for combined hash with error (%s)", a1);
}

void *sub_100567950@<X0>(void *a1@<X8>)
{
  return sub_100563B00(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100567970@<X0>(uint64_t *a1@<X8>)
{
  return sub_100563774(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_100567990()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1005679D0()
{
  sub_100563198(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void *sub_1005679D8(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100567A18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10055B1C8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_100567A54()
{
  return [*(id *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardUpdateCoalescer) trigger];
}

id sub_100567A70()
{
  return [*(id *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactUpdateCoalescer) trigger];
}

uint64_t sub_100567A8C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100567AE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100567BC0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_1009794A0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_1009794A0);
  if (qword_100969C80 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_1009945D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100567C88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for NWEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v9 = (void *)((char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_allEndpoints) = &_swiftEmptySetSingleton;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  swift_bridgeObjectRetain();
  sub_10065ECDC((uint64_t)v12, a1, a2, (uint64_t)v16);
  sub_10000A7E8((uint64_t)v12, &qword_100974EA0);
  uint64_t v28 = v14;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_connectableUUID, v16, v13);
  *NSString v9 = nw_endpoint_create_application_service();
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for NWEndpoint.opaque(_:), v6);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v7 + 32))(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_displayEndpoint, v9, v6);
  unint64_t v17 = (uint64_t *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_classroomID);
  *unint64_t v17 = a1;
  v17[1] = a2;
  if (qword_100969FA8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10000B47C(v18, (uint64_t)qword_1009794A0);
  swift_retain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    Swift::Int v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)Swift::Int v21 = 136315138;
    v27[1] = v21 + 4;
    uint64_t v22 = v13;
    uint64_t v24 = *(void *)(v3 + 16);
    unint64_t v23 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    uint64_t v25 = v24;
    uint64_t v13 = v22;
    uint64_t v29 = sub_100254634(v25, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Creating Classroom %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v13);
  return v3;
}

id sub_1005680CC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SFAirDrop.DeviceRelationship();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SFAirDrop.TXTRecord();
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = (id)NWEndpoint.nw.getter();
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v12 = result;
  id result = [a1 displayName];
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v13 = result;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  nw_endpoint_set_device_name();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for SFAirDrop.DeviceRelationship.classroom(_:), v4);
  SFAirDrop.TXTRecord.init(deviceRelationship:)();
  SFAirDrop.TXTRecord.addToEndpoint(_:)();
  if (qword_100969FA8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B47C(v14, (uint64_t)qword_1009794A0);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v20[1] = v12;
    Swift::Int v21 = v10;
    *(_DWORD *)unint64_t v17 = 136315138;
    uint64_t v18 = *(void *)(v2 + 16);
    unint64_t v19 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_100254634(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "DiscoveredClassroom Updated %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_unknownObjectRelease();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v21, v22);
  }
  else
  {
    swift_release_n();

    swift_unknownObjectRelease();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v22);
  }
}

uint64_t sub_100568474()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_connectableUUID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_displayEndpoint;
  uint64_t v4 = type metadata accessor for NWEndpoint();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100568584()
{
  return type metadata accessor for SDAirDropDiscoveredClassroom();
}

uint64_t type metadata accessor for SDAirDropDiscoveredClassroom()
{
  uint64_t result = qword_1009794E8;
  if (!qword_1009794E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1005685D8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NWEndpoint();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1005686C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  unint64_t v2 = *(void **)(*(void *)v0 + 24);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0x6F6F727373616C43;
}

uint64_t sub_100568734@<X0>(uint64_t a1@<X8>)
{
  return sub_1003DC000(&OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_displayEndpoint, (uint64_t (*)(void))&type metadata accessor for NWEndpoint, a1);
}

uint64_t sub_100568754(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v3 = static AirDropActor.shared;
  return _swift_task_switch(sub_10056883C, v3, 0);
}

id sub_10056883C()
{
  sub_10025AE8C(v0[5], v0[10]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v2 = (id *)v0[10];
  if (EnumCaseMultiPayload == 3)
  {
    id v3 = *v2;
    id result = [*v2 identifier];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = result;
    uint64_t v6 = v0[6];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    if (*(void *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_classroomID) == v7
      && *(void *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_classroomID + 8) == v9)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        if (qword_100969FA8 != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        sub_10000B47C(v12, (uint64_t)qword_1009794A0);
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v15 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "ClassroomID Mis-Match", v15, 2u);
          swift_slowDealloc();
        }

        goto LABEL_16;
      }
    }
    uint64_t v16 = v0[8];
    uint64_t v17 = v0[9];
    sub_10025AE8C(v0[5], v16);
    swift_beginAccess();
    sub_100595DA4(v17, v16);
    swift_endAccess();
    sub_10025AEF0(v17);
    sub_1005680CC(v3);
  }
  else
  {
    sub_10025AEF0((uint64_t)v2);
  }
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return (id)v18();
}

uint64_t sub_100568A98(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  sub_10000A844(&qword_10096D8B8);
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v2[9] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v3 = static AirDropActor.shared;
  return _swift_task_switch(sub_100568B94, v3, 0);
}

uint64_t sub_100568B94()
{
  sub_10025AE8C(v0[5], v0[9]);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v1 = v0[7];
    uint64_t v2 = v0[5];
    uint64_t v3 = *(void **)v0[9];
    swift_beginAccess();
    sub_1005A29BC(v2, v1);
    swift_endAccess();
    sub_10000A7E8(v1, &qword_10096D8B8);
    sub_1005680CC(v3);
  }
  else
  {
    sub_10025AEF0(v0[9]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100568CAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1003DC000(&OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropDiscoveredClassroom_connectableUUID, (uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t sub_100568CCC()
{
  *(void *)(v1 + 40) = v0;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v2 = static AirDropActor.shared;
  return _swift_task_switch(sub_100568D68, v2, 0);
}

uint64_t sub_100568D68()
{
  swift_beginAccess();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v1 = swift_bridgeObjectRetain();
  return v3(v1);
}

uint64_t sub_100568DF8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000A6F4;
  return sub_100568754(a1);
}

uint64_t sub_100568E90(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10000A6F0;
  return sub_100568A98(a1);
}

unint64_t sub_100568F28(uint64_t a1)
{
  unint64_t result = sub_100568F50();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100568F50()
{
  unint64_t result = qword_1009795A8;
  if (!qword_1009795A8)
  {
    type metadata accessor for SDAirDropDiscoveredClassroom();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1009795A8);
  }
  return result;
}

uint64_t sub_100568FA8(uint64_t a1)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v8 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    unint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
      if (!result)
      {
LABEL_35:
        char v16 = 1;
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain_n();
      if (!v14) {
        goto LABEL_35;
      }
    }
    if (v14 < 1)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((v13 & 0xC000000000000001) != 0)
    {
      uint64_t v15 = 0;
      char v16 = 1;
      do
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        if (v16) {
          char v16 = *(unsigned char *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_applicationServiceEndpointsOnly);
        }
        else {
          char v16 = 0;
        }
        swift_unknownObjectRelease();
        ++v15;
      }
      while (v14 != v15);
    }
    else
    {
      uint64_t v18 = (void *)(v13 + 32);
      char v16 = 1;
      do
      {
        if (v16) {
          char v16 = *(unsigned char *)(*v18
        }
                         + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_applicationServiceEndpointsOnly);
        else {
          char v16 = 0;
        }
        ++v18;
        --v14;
      }
      while (v14);
    }
LABEL_36:
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1002539E8(0, v7[2] + 1, 1, v7);
      uint64_t v7 = (void *)result;
    }
    unint64_t v20 = v7[2];
    unint64_t v19 = v7[3];
    if (v20 >= v19 >> 1)
    {
      uint64_t result = (uint64_t)sub_1002539E8((void *)(v19 > 1), v20 + 1, 1, v7);
      uint64_t v7 = (void *)result;
    }
    v7[2] = v20 + 1;
    *((unsigned char *)v7 + v20 + 32) = v16;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_44;
    }
    if (v10 >= v22) {
      goto LABEL_42;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    ++v6;
    if (!v11)
    {
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v22) {
        goto LABEL_42;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v6);
      if (!v11)
      {
        int64_t v6 = v10 + 2;
        if (v10 + 2 >= v22) {
          goto LABEL_42;
        }
        unint64_t v11 = *(void *)(v21 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 3;
          if (v10 + 3 >= v22) {
            goto LABEL_42;
          }
          unint64_t v11 = *(void *)(v21 + 8 * v6);
          if (!v11)
          {
            int64_t v12 = v10 + 4;
            if (v12 >= v22)
            {
LABEL_42:
              swift_release();
              return (uint64_t)v7;
            }
            unint64_t v11 = *(void *)(v21 + 8 * v12);
            int64_t v6 = v12;
            if (!v11) {
              break;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v4 = (v11 - 1) & v11;
  }
  while (1)
  {
    int64_t v6 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v6 >= v22) {
      goto LABEL_42;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v6);
    ++v12;
    if (v11) {
      goto LABEL_19;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

void sub_100569294(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)type metadata accessor for SFAirDropSend.Failure();
  uint64_t length = v2[-1].length;
  CFStringRef v227 = v2;
  uint64_t v228 = length;
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v210 = (char *)&v200 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v231 = (char *)&v200 - v6;
  uint64_t v224 = (void *)type metadata accessor for Date();
  uint64_t v223 = *(v224 - 1);
  __chkstk_darwin(v224);
  uint64_t v207 = (char *)&v200 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844((uint64_t *)&unk_100975040);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v215 = (uint64_t)&v200 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v209 = (uint64_t)&v200 - v11;
  int64_t v12 = (int *)type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  uint64_t v13 = *((void *)v12 - 1);
  unint64_t v229 = v12;
  uint64_t v230 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v213 = (uint64_t)&v200 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v222 = (char *)&v200 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v208 = (uint64_t)&v200 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v211 = (uint64_t)&v200 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v214 = (uint64_t)&v200 - v23;
  __chkstk_darwin(v22);
  uint64_t v216 = (uint64_t)&v200 - v24;
  uint64_t v206 = type metadata accessor for SFNWInterfaceType();
  uint64_t v205 = *(void *)(v206 - 8);
  __chkstk_darwin(v206);
  uint64_t v204 = (char *)&v200 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = type metadata accessor for UUID();
  uint64_t v218 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  unint64_t v217 = (char *)&v200 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000A844(&qword_100974EE0);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  uint64_t v226 = (uint64_t)&v200 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v212 = (uint64_t)&v200 - v30;
  uint64_t v31 = type metadata accessor for SFAirDrop.TransferIdentifier();
  unint64_t v32 = *(id **)(v31 - 8);
  v232 = (void (*)(void, void, void, void))v31;
  v233 = v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v200 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v33);
  unint64_t v221 = (char *)&v200 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  unint64_t v40 = (char *)&v200 - v39;
  uint64_t v41 = __chkstk_darwin(v38);
  v225 = (char *)&v200 - v42;
  __chkstk_darwin(v41);
  unint64_t v220 = (char *)&v200 - v43;
  uint64_t v44 = type metadata accessor for SFAirDrop.Progress();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  os_log_type_t v48 = (char *)&v200 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v200 - v49;
  uint64_t v51 = type metadata accessor for SFAirDropSend.Transfer.State();
  uint64_t v52 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v54 = (char *)&v200 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = a1;
  SFAirDropSend.Transfer.state.getter();
  int v55 = (*(uint64_t (**)(char *, uint64_t))(v52 + 88))(v54, v51);
  if (v55 != enum case for SFAirDropSend.Transfer.State.transferring(_:))
  {
    if (v55 == enum case for SFAirDropSend.Transfer.State.transferFailed(_:))
    {
      (*(void (**)(char *, uint64_t))(v52 + 96))(v54, v51);
      uint64_t v79 = sub_10000A844(&qword_10096EFF8);
      CFStringRef v81 = v227;
      uint64_t v80 = v228;
      unint64_t v82 = *(void (**)(char *, char *, const __CFString *))(v228 + 32);
      v82(v231, &v54[*(int *)(v79 + 48)], v227);
      SFAirDropSend.Transfer.id.getter();
      unint64_t v83 = v234;
      swift_beginAccess();
      uint64_t v84 = v83[5];
      if (v84[2] && (unint64_t v85 = sub_10058392C((uint64_t)v35), (v86 & 1) != 0))
      {
        uint64_t v87 = v213;
        sub_10056E8A0(v84[7] + *(void *)(v230 + 72) * v85, v213);
        id v88 = (void (*)(void, void))v222;
        sub_10056E904(v87, (uint64_t)v222);
        swift_endAccess();
        os_log_type_t v89 = (char *)v233[1];
        ++v233;
        unint64_t v221 = v89;
        ((void (*)(char *, void (*)(void, void, void, void)))v89)(v35, v232);
        uint64_t v90 = v215;
        sub_1002BEBA4((uint64_t)v88 + v229[7], v215);
        LODWORD(v87) = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v223 + 48))(v90, 1, v224);
        sub_10000A7E8(v90, (uint64_t *)&unk_100975040);
        if (v87 == 1)
        {
          Swift::Int v91 = v210;
          (*(void (**)(char *, char *, const __CFString *))(v228 + 16))(v210, v231, v81);
          sub_10056EADC(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
          swift_allocError();
          v82(v92, v91, v81);
          uint64_t v93 = (void *)_convertErrorToNSError(_:)();
          swift_errorRelease();
          unint64_t v94 = (__CFString *)[v93 domain];
          if (!v94)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v94 = (__CFString *)String._bridgeToObjectiveC()();
            unint64_t v83 = v234;
            swift_bridgeObjectRelease();
          }
          uint64_t v234 = (id *)CFErrorCreate(kCFAllocatorDefault, v94, (CFIndex)[v93 code], 0);

          SFAirDropSend.Transfer.bundleIdentifier.getter();
          if (v95)
          {
            v96._countAndFlagsBits = 0x6C7070612E6D6F63;
            v96._object = (void *)0xEA00000000002E65;
            if (!String.hasPrefix(_:)(v96)) {
              swift_bridgeObjectRelease();
            }
          }
          NSString v97 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v98 = String._bridgeToObjectiveC()();
          uint64_t v99 = v229[5];
          uint64_t v100 = *(void *)&v222[v99];
          id v101 = [v83[2] discoverableLevel];
          swift_beginAccess();
          uint64_t v102 = swift_bridgeObjectRetain();
          uint64_t v103 = sub_100568FA8(v102);
          swift_bridgeObjectRelease();
          uint64_t v104 = *(void *)(v103 + 16);
          uint64_t v224 = v93;
          if (v104)
          {
            uint64_t v105 = 0;
            uint64_t v106 = v104 - 1;
            char v107 = 1;
            while (1)
            {
              while ((v107 & 1) == 0)
              {
                if (v106 == v105)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_66;
                }
                char v107 = 0;
                ++v105;
              }
              char v107 = *(unsigned char *)(v103 + v105 + 32);
              if (v106 == v105) {
                break;
              }
              ++v105;
            }
            swift_bridgeObjectRelease();
            if (v107)
            {
              unsigned int v176 = 1;
              goto LABEL_67;
            }
LABEL_66:
            unsigned int v176 = 0;
          }
          else
          {
            swift_bridgeObjectRelease();
            unsigned int v176 = 1;
          }
LABEL_67:
          double v177 = (double)v100;
          sub_10024592C((uint64_t)_swiftEmptyArrayStorage);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          uint64_t v179 = (__CFError *)v234;
          sub_1000462E0(v97, v98, 1, (__CFError *)v234, (uint64_t)v101, v176, isa, v177);

          uint64_t v180 = (uint64_t)v225;
          SFAirDropSend.Transfer.id.getter();
          uint64_t v181 = v217;
          SFAirDrop.TransferIdentifier.id.getter();
          ((void (*)(void, void))v221)(v180, v232);
          Class v182 = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v218 + 8))(v181, v219);
          uint64_t v183 = (void (*)(void, void))v222;
          sub_100046FF8(@"Send", @"Failed", v182, 0, (double)*(uint64_t *)&v222[v99]);

          SFAirDropSend.Transfer.id.getter();
          uint64_t v184 = v226;
          (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v230 + 56))(v226, 1, 1, v229);
          swift_beginAccess();
          sub_1004670AC(v184, v180);
          swift_endAccess();

          sub_10056E968((uint64_t)v183);
          (*(void (**)(char *, const __CFString *))(v228 + 8))(v231, v227);
LABEL_68:
          uint64_t v185 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
          (*(void (**)(char *, uint64_t))(*(void *)(v185 - 8) + 8))(v54, v185);
          return;
        }
        sub_10056E968((uint64_t)v88);
        uint64_t v80 = v228;
      }
      else
      {
        swift_endAccess();
        ((void (*)(char *, void (*)(void, void, void, void)))v233[1])(v35, v232);
      }
      (*(void (**)(char *, const __CFString *))(v80 + 8))(v231, v81);
      uint64_t v145 = type metadata accessor for SFAirDropSend.Transfer.Metrics();
      (*(void (**)(char *, uint64_t))(*(void *)(v145 - 8) + 8))(v54, v145);
      return;
    }
    if (v55 != enum case for SFAirDropSend.Transfer.State.completedSuccessfully(_:))
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v51);
      return;
    }
    (*(void (**)(char *, uint64_t))(v52 + 96))(v54, v51);
    sub_10000A844((uint64_t *)&unk_100974570);
    swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v225;
    SFAirDropSend.Transfer.id.getter();
    uint64_t v144 = v226;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v230 + 56))(v226, 1, 1, v229);
    swift_beginAccess();
    sub_1004670AC(v144, v143);
    swift_endAccess();
    goto LABEL_68;
  }
  (*(void (**)(char *, uint64_t))(v52 + 96))(v54, v51);
  swift_bridgeObjectRelease();
  uint64_t v56 = sub_10000A844((uint64_t *)&unk_10097C3A0);
  uint64_t v57 = &v54[*(int *)(v56 + 48)];
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v50, v57, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v48, v50, v44);
  int v58 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v48, v44);
  uint64_t v59 = v45;
  __n128 v60 = v50;
  if (v58 == enum case for SFAirDrop.Progress.transferring(_:))
  {
    uint64_t v203 = v54;
    uint64_t v228 = v56;
    unint64_t v61 = v50;
    uint64_t v62 = v44;
    (*(void (**)(char *, uint64_t))(v45 + 96))(v48, v44);
    uint64_t v64 = *(void *)v48;
    uint64_t v63 = *((void *)v48 + 1);
    char v65 = v48[16];
    SFAirDropSend.Transfer.id.getter();
    unint64_t v66 = v234;
    swift_beginAccess();
    uint64_t v67 = v66[5];
    if (v67[2] && (unint64_t v68 = sub_10058392C((uint64_t)v40), (v69 & 1) != 0))
    {
      uint64_t v70 = v67[7];
      uint64_t v71 = v230;
      uint64_t v72 = v214;
      sub_10056E8A0(v70 + *(void *)(v230 + 72) * v68, v214);
      uint64_t v73 = v72;
      uint64_t v74 = v216;
      sub_10056E904(v73, v216);
      swift_endAccess();
      ((void (*)(char *, void (*)(void, void, void, void)))v233[1])(v40, v232);
      if ((v65 & 1) == 0)
      {
        uint64_t v75 = v229;
        *(void *)(v74 + v229[5]) = v63;
        *(void *)(v74 + v75[6]) = v64;
        uint64_t v76 = (uint64_t)v225;
        uint64_t v77 = v71;
        SFAirDropSend.Transfer.id.getter();
        uint64_t v78 = v226;
        sub_10056E8A0(v74, v226);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v77 + 56))(v78, 0, 1, v75);
        swift_beginAccess();
        sub_1004670AC(v78, v76);
        swift_endAccess();
      }
      sub_10056E968(v74);
    }
    else
    {
      swift_endAccess();
      ((void (*)(char *, void (*)(void, void, void, void)))v233[1])(v40, v232);
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v61, v62);
    uint64_t v56 = v228;
    goto LABEL_42;
  }
  int v108 = v58;
  uint64_t v231 = (char *)v44;
  if (v58 != enum case for SFAirDrop.Progress.completed(_:))
  {
    uint64_t v146 = v234;
    if (v58 != enum case for SFAirDrop.Progress.notStarted(_:))
    {
      int v158 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
      uint64_t v159 = *(void (**)(char *, char *))(v45 + 8);
      uint64_t v160 = v50;
      uint64_t v161 = v231;
      v159(v160, v231);
      if (v108 != v158) {
        v159(v48, v161);
      }
      goto LABEL_78;
    }
    uint64_t v147 = (uint64_t)v220;
    SFAirDropSend.Transfer.id.getter();
    uint64_t v148 = v146 + 5;
    swift_beginAccess();
    uint64_t v149 = v146[5];
    uint64_t v150 = v149[2];
    uint64_t v203 = v54;
    uint64_t v202 = v59;
    uint64_t v201 = v60;
    if (v150)
    {
      unint64_t v151 = sub_10058392C(v147);
      long long v152 = v229;
      uint64_t v153 = v212;
      if (v154)
      {
        uint64_t v155 = v149[7];
        uint64_t v156 = v230;
        sub_10056E8A0(v155 + *(void *)(v230 + 72) * v151, v212);
        long long v157 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v156 + 56);
        v157(v153, 0, 1, v152);
      }
      else
      {
        uint64_t v156 = v230;
        long long v157 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v230 + 56);
        v157(v212, 1, 1, v229);
      }
    }
    else
    {
      long long v152 = v229;
      uint64_t v156 = v230;
      long long v157 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v230 + 56);
      uint64_t v153 = v212;
      v157(v212, 1, 1, v229);
    }
    swift_endAccess();
    unint64_t v162 = v232;
    int64_t v163 = (void (*)(void, void))v233[1];
    v163(v220, v232);
    int v164 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v156 + 48))(v153, 1, v152);
    sub_10000A7E8(v153, &qword_100974EE0);
    if (v164 == 1)
    {
      unint64_t v229 = (int *)@"Send";
      CFStringRef v227 = @"Start";
      v233 = v148;
      uint64_t v165 = (uint64_t)v225;
      SFAirDropSend.Transfer.id.getter();
      char v166 = v217;
      SFAirDrop.TransferIdentifier.id.getter();
      v163(v165, v162);
      Class v167 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v218 + 8))(v166, v219);
      uint64_t v168 = v205;
      uint64_t v169 = v204;
      uint64_t v170 = v206;
      (*(void (**)(char *, void, uint64_t))(v205 + 104))(v204, enum case for SFNWInterfaceType.awdl(_:), v206);
      SFNWInterfaceType.description.getter();
      v232 = (void (*)(void, void, void, void))v157;
      (*(void (**)(char *, uint64_t))(v168 + 8))(v169, v170);
      NSString v171 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_100046FF8((uint64_t)v229, (uint64_t)v227, v167, (uint64_t)v171, 0.0);

      SFAirDropSend.Transfer.id.getter();
      uint64_t v172 = v226;
      Date.init()();
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v223 + 56))(v172 + v152[7], 1, 1, v224);
      *(void *)(v172 + v152[5]) = 0;
      *(void *)(v172 + v152[6]) = 0;
      v232(v172, 0, 1, v152);
      swift_beginAccess();
      sub_1004670AC(v172, v165);
      swift_endAccess();
      (*(void (**)(char *, char *))(v202 + 8))(v201, v231);
      uint64_t v173 = *(uint64_t *)((char *)v234
                        + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated);
      BOOL v174 = __OFADD__(v173, 1);
      char v175 = (void *)(v173 + 1);
      if (v174)
      {
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      *(id *)((char *)v234 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated) = v175;
    }
    else
    {
      (*(void (**)(char *, char *))(v202 + 8))(v201, v231);
    }
LABEL_42:
    uint64_t v54 = v203;
LABEL_78:
    uint64_t v198 = &v54[*(int *)(v56 + 80)];
    uint64_t v199 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v199 - 8) + 8))(v198, v199);
    return;
  }
  uint64_t v202 = v45;
  uint64_t v109 = v231;
  (*(void (**)(char *, char *))(v45 + 96))(v48, v231);
  swift_bridgeObjectRelease();
  uint64_t v110 = (uint64_t)v221;
  SFAirDropSend.Transfer.id.getter();
  unint64_t v111 = v234;
  CFStringRef v112 = (const __CFString *)(v234 + 5);
  swift_beginAccess();
  int64_t v113 = v111[5];
  uint64_t v114 = v224;
  if (!v113[2] || (unint64_t v115 = sub_10058392C(v110), (v116 & 1) == 0))
  {
    swift_endAccess();
    ((void (*)(uint64_t, void (*)(void, void, void, void)))v233[1])(v110, v232);
    (*(void (**)(char *, char *))(v202 + 8))(v60, v109);
    goto LABEL_78;
  }
  CFStringRef v227 = v112;
  uint64_t v203 = v54;
  uint64_t v117 = v208;
  sub_10056E8A0(v113[7] + *(void *)(v230 + 72) * v115, v208);
  uint64_t v118 = v211;
  sub_10056E904(v117, v211);
  swift_endAccess();
  uint64_t v119 = v233 + 1;
  uint64_t v222 = (char *)v233[1];
  ((void (*)(void, void))v222)(v110, v232);
  int v120 = v229;
  uint64_t v121 = v118 + v229[7];
  uint64_t v122 = v209;
  sub_1002BEBA4(v121, v209);
  uint64_t v123 = v223;
  int v124 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v223 + 48))(v122, 1, v114);
  sub_10000A7E8(v122, (uint64_t *)&unk_100975040);
  if (v124 != 1)
  {
    (*(void (**)(char *, char *))(v202 + 8))(v60, v231);
    sub_10056E968(v118);
    goto LABEL_42;
  }
  uint64_t v125 = v207;
  Date.init()();
  sub_10000A7E8(v121, (uint64_t *)&unk_100975040);
  (*(void (**)(uint64_t, char *, void *))(v123 + 16))(v121, v125, v114);
  (*(void (**)(uint64_t, void, uint64_t, void *))(v123 + 56))(v121, 0, 1, v114);
  Date.timeIntervalSince(_:)();
  double v127 = v126;
  uint64_t v128 = v120[5];
  double v129 = (double)*(uint64_t *)(v118 + v128);
  SFAirDropSend.Transfer.bundleIdentifier.getter();
  v233 = v119;
  if (v130)
  {
    v131._countAndFlagsBits = 0x6C7070612E6D6F63;
    v131._object = (void *)0xEA00000000002E65;
    if (!String.hasPrefix(_:)(v131)) {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v132 = v203;
  double v133 = v129 / v127;
  NSString v134 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v135 = String._bridgeToObjectiveC()();
  id v136 = [v234[2] discoverableLevel];
  swift_beginAccess();
  uint64_t v137 = swift_bridgeObjectRetain();
  uint64_t v138 = sub_100568FA8(v137);
  swift_bridgeObjectRelease();
  uint64_t v139 = *(void *)(v138 + 16);
  uint64_t v228 = v56;
  if (v139)
  {
    uint64_t v140 = 0;
    uint64_t v141 = v139 - 1;
    char v142 = 1;
    while (1)
    {
      while ((v142 & 1) == 0)
      {
        if (v141 == v140)
        {
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }
        char v142 = 0;
        ++v140;
      }
      char v142 = *(unsigned char *)(v138 + v140 + 32);
      if (v141 == v140) {
        break;
      }
      ++v140;
    }
    swift_bridgeObjectRelease();
    if (v142)
    {
      unint64_t v186 = v60;
      uint64_t v187 = 1;
      goto LABEL_74;
    }
LABEL_73:
    unint64_t v186 = v60;
    uint64_t v187 = 0;
  }
  else
  {
    unint64_t v186 = v60;
    swift_bridgeObjectRelease();
    uint64_t v187 = 1;
  }
LABEL_74:
  sub_10024592C((uint64_t)_swiftEmptyArrayStorage);
  Class v188 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100045F38(v134, v135, 1, (uint64_t)v136, v187, v188, v133, v129);

  uint64_t v189 = v211;
  uint64_t v190 = *(void *)(v211 + v229[6]);
  if (v190 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_80;
  }
  if (v190 > 0x7FFFFFFF)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  unsigned int v191 = v132;
  sub_10004665C(1, v190);
  uint64_t v192 = (uint64_t)v225;
  SFAirDropSend.Transfer.id.getter();
  uint64_t v193 = v217;
  SFAirDrop.TransferIdentifier.id.getter();
  ((void (*)(void, void))v222)(v192, v232);
  Class v194 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v218 + 8))(v193, v219);
  sub_100046FF8(@"Send", @"Stop", v194, 0, (double)*(uint64_t *)(v189 + v128));

  SFAirDropSend.Transfer.id.getter();
  uint64_t v195 = v226;
  sub_10056E8A0(v189, v226);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v230 + 56))(v195, 0, 1, v229);
  swift_beginAccess();
  sub_1004670AC(v195, v192);
  swift_endAccess();
  (*(void (**)(char *, void *))(v223 + 8))(v207, v224);
  (*(void (**)(char *, char *))(v202 + 8))(v186, v231);
  uint64_t v196 = *(uint64_t *)((char *)v234 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted);
  BOOL v174 = __OFADD__(v196, 1);
  uint64_t v197 = (void *)(v196 + 1);
  if (!v174)
  {
    *(id *)((char *)v234 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted) = v197;
    sub_10056E968(v189);
    uint64_t v56 = v228;
    uint64_t v54 = v191;
    goto LABEL_78;
  }
LABEL_82:
  __break(1u);
}

void sub_10056ACFC(char a1)
{
  uint64_t v3 = sub_10000A844((uint64_t *)&unk_100975040);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v24 - v14;
  if (a1)
  {
    if (a1 == 1)
    {
      NSString v16 = String._bridgeToObjectiveC()();
      uint64_t v17 = getpid();
      sub_100046EFC(@"BonjourAdvertise", @"Stop", (uint64_t)v16, v17);

      uint64_t v18 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_bonjourServerStartDate;
      swift_beginAccess();
      sub_1002BEBA4(v18, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        sub_10000A7E8((uint64_t)v8, (uint64_t *)&unk_100975040);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
        Date.init()();
        Date.timeIntervalSince(_:)();
        double v22 = v21;
        uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
        v23(v13, v9);
        sub_100046584(v22);
        v23(v15, v9);
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
      swift_beginAccess();
      sub_100340238((uint64_t)v6, v18);
      swift_endAccess();
    }
  }
  else
  {
    NSString v25 = String._bridgeToObjectiveC()();
    uint64_t v19 = getpid();
    sub_100046EFC(@"ApplicationServiceAdvertise", @"Stop", (uint64_t)v25, v19);
    NSString v20 = v25;
  }
}

void sub_10056B058(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Failure();
  uint64_t v226 = *(void *)(v2 - 8);
  CFStringRef v227 = (char *)v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v204 = (char *)&v200 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v225 = (char *)&v200 - v5;
  uint64_t v224 = (__CFError *)type metadata accessor for Date();
  uint64_t v223 = (uint64_t (**)(void, void, void))*((void *)v224 - 1);
  __chkstk_darwin(v224);
  uint64_t v205 = (char *)&v200 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_100975040);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v211 = (uint64_t)&v200 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v212 = (uint64_t)&v200 - v10;
  uint64_t v11 = (int *)type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  uint64_t v230 = *((void *)v11 - 1);
  uint64_t v231 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v209 = (uint64_t)&v200 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v221 = (uint64_t)&v200 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v210 = (uint64_t)&v200 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v218 = (uint64_t)&v200 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v219 = (uint64_t)&v200 - v21;
  __chkstk_darwin(v20);
  uint64_t v220 = (uint64_t)&v200 - v22;
  uint64_t v208 = type metadata accessor for SFNWInterfaceType();
  uint64_t v207 = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  uint64_t v206 = (char *)&v200 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = type metadata accessor for UUID();
  uint64_t v216 = *(void *)(v217 - 8);
  __chkstk_darwin(v217);
  uint64_t v215 = (char *)&v200 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000A844(&qword_100974EE0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v229 = (uint64_t)&v200 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v214 = (uint64_t)&v200 - v28;
  CFStringRef v29 = (const __CFString *)type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t length = v29[-1].length;
  CFStringRef v232 = v29;
  v233 = (char *)length;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v200 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v222 = (void (*)(uint64_t, const __CFString *))((char *)&v200 - v35);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v38 = (char *)&v200 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v228 = (char *)&v200 - v40;
  __chkstk_darwin(v39);
  uint64_t v213 = (char *)&v200 - v41;
  uint64_t v42 = type metadata accessor for SFAirDrop.Progress();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v200 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  os_log_type_t v48 = (char *)&v200 - v47;
  uint64_t v49 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v52 = (char *)&v200 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = a1;
  SFAirDropReceive.Transfer.state.getter();
  int v53 = (*(uint64_t (**)(char *, uint64_t))(v50 + 88))(v52, v49);
  if (v53 != enum case for SFAirDropReceive.Transfer.State.transferring(_:))
  {
    if (v53 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
    {
      (*(void (**)(char *, uint64_t))(v50 + 96))(v52, v49);
      uint64_t v72 = v52;
      uint64_t v73 = &v52[*(int *)(sub_10000A844((uint64_t *)&unk_100974550) + 48)];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v74 = (uint64_t)v228;
      SFAirDropReceive.Transfer.id.getter();
      uint64_t v75 = v229;
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v230 + 56))(v229, 1, 1, v231);
      swift_beginAccess();
      sub_1004670AC(v75, v74);
      swift_endAccess();
      uint64_t v76 = type metadata accessor for SFAirDropReceive.ItemDestination();
      (*(void (**)(char *, uint64_t))(*(void *)(v76 - 8) + 8))(v73, v76);
      uint64_t v77 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
      (*(void (**)(char *, uint64_t))(*(void *)(v77 - 8) + 8))(v72, v77);
      return;
    }
    if (v53 != enum case for SFAirDropReceive.Transfer.State.transferFailed(_:))
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
      return;
    }
    (*(void (**)(char *, uint64_t))(v50 + 96))(v52, v49);
    uint64_t v111 = sub_10000A844(&qword_100970340);
    int64_t v113 = v225;
    uint64_t v112 = v226;
    uint64_t v114 = *(void (**)(char *, char *, char *))(v226 + 32);
    unint64_t v115 = v227;
    v114(v225, &v52[*(int *)(v111 + 48)], v227);
    SFAirDropReceive.Transfer.id.getter();
    uint64_t v116 = v234;
    swift_beginAccess();
    uint64_t v117 = *(void *)(v116 + 48);
    if (*(void *)(v117 + 16) && (unint64_t v118 = sub_10058392C((uint64_t)v33), (v119 & 1) != 0))
    {
      uint64_t v120 = v209;
      sub_10056E8A0(*(void *)(v117 + 56) + *(void *)(v230 + 72) * v118, v209);
      uint64_t v121 = v221;
      sub_10056E904(v120, v221);
      swift_endAccess();
      uint64_t v122 = (void (*)(uint64_t, const __CFString *))*((void *)v233 + 1);
      v233 += 8;
      uint64_t v222 = v122;
      v122((uint64_t)v33, v232);
      uint64_t v123 = v211;
      sub_1002BEBA4(v121 + v231[7], v211);
      LODWORD(v120) = ((uint64_t (**)(uint64_t, uint64_t, __CFError *))v223)[6](v123, 1, v224);
      sub_10000A7E8(v123, (uint64_t *)&unk_100975040);
      if (v120 == 1)
      {
        int v124 = v204;
        (*(void (**)(char *, char *, char *))(v112 + 16))(v204, v113, v115);
        sub_10056EADC(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
        swift_allocError();
        v114(v125, v124, v115);
        double v126 = (void *)_convertErrorToNSError(_:)();
        swift_errorRelease();
        double v127 = (__CFString *)[v126 domain];
        if (!v127)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          double v127 = (__CFString *)String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        uint64_t v224 = CFErrorCreate(kCFAllocatorDefault, v127, (CFIndex)[v126 code], 0);

        NSString v128 = String._bridgeToObjectiveC()();
        NSString v129 = String._bridgeToObjectiveC()();
        uint64_t v130 = v231[5];
        uint64_t v131 = *(void *)(v221 + v130);
        id v132 = [*(id *)(v234 + 16) discoverableLevel];
        swift_beginAccess();
        uint64_t v133 = swift_bridgeObjectRetain();
        uint64_t v134 = sub_100568FA8(v133);
        swift_bridgeObjectRelease();
        uint64_t v135 = *(void *)(v134 + 16);
        uint64_t v223 = (uint64_t (**)(void, void, void))v126;
        if (v135)
        {
          uint64_t v136 = 0;
          uint64_t v137 = v135 - 1;
          char v138 = 1;
          while (1)
          {
            while ((v138 & 1) == 0)
            {
              if (v137 == v136)
              {
                swift_bridgeObjectRelease();
                goto LABEL_73;
              }
              char v138 = 0;
              ++v136;
            }
            char v138 = *(unsigned char *)(v134 + v136 + 32);
            if (v137 == v136) {
              break;
            }
            ++v136;
          }
          swift_bridgeObjectRelease();
          if (v138) {
            goto LABEL_71;
          }
LABEL_73:
          unsigned int v191 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_71:
          unsigned int v191 = 1;
        }
        double v192 = (double)v131;
        sub_10024592C((uint64_t)_swiftEmptyArrayStorage);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        Class v194 = v224;
        sub_1000462E0(v128, v129, 0, v224, (uint64_t)v132, v191, isa, v192);

        uint64_t v195 = (uint64_t)v228;
        SFAirDropReceive.Transfer.id.getter();
        uint64_t v196 = v215;
        SFAirDrop.TransferIdentifier.id.getter();
        v222(v195, v232);
        Class v197 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v216 + 8))(v196, v217);
        uint64_t v198 = v221;
        sub_100046FF8(@"Receive", @"Failed", v197, 0, (double)*(uint64_t *)(v221 + v130));

        SFAirDropReceive.Transfer.id.getter();
        uint64_t v199 = v229;
        (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v230 + 56))(v229, 1, 1, v231);
        swift_beginAccess();
        sub_1004670AC(v199, v195);
        swift_endAccess();

        sub_10056E968(v198);
        (*(void (**)(char *, char *))(v226 + 8))(v225, v227);
        goto LABEL_42;
      }
      sub_10056E968(v121);
    }
    else
    {
      swift_endAccess();
      (*((void (**)(char *, const __CFString *))v233 + 1))(v33, v232);
    }
    (*(void (**)(char *, char *))(v112 + 8))(v113, v115);
LABEL_42:
    uint64_t v153 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
    (*(void (**)(char *, uint64_t))(*(void *)(v153 - 8) + 8))(v52, v153);
    return;
  }
  (*(void (**)(char *, uint64_t))(v50 + 96))(v52, v49);
  uint64_t v54 = sub_10000A844(&qword_100972410);
  int v55 = &v52[*(int *)(v54 + 48)];
  CFStringRef v227 = v52;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v48, v55, v42);
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v46, v48, v42);
  int v56 = (*(uint64_t (**)(char *, uint64_t))(v43 + 88))(v46, v42);
  uint64_t v57 = v42;
  if (v56 == enum case for SFAirDrop.Progress.transferring(_:))
  {
    uint64_t v226 = v54;
    (*(void (**)(char *, uint64_t))(v43 + 96))(v46, v42);
    uint64_t v58 = *(void *)v46;
    uint64_t v59 = *((void *)v46 + 1);
    char v60 = v46[16];
    SFAirDropReceive.Transfer.id.getter();
    uint64_t v61 = v234;
    swift_beginAccess();
    uint64_t v62 = *(void *)(v61 + 48);
    if (*(void *)(v62 + 16) && (unint64_t v63 = sub_10058392C((uint64_t)v38), (v64 & 1) != 0))
    {
      uint64_t v65 = v57;
      uint64_t v66 = v230;
      uint64_t v67 = *(void *)(v62 + 56) + *(void *)(v230 + 72) * v63;
      uint64_t v68 = v219;
      sub_10056E8A0(v67, v219);
      uint64_t v69 = v68;
      uint64_t v70 = v220;
      sub_10056E904(v69, v220);
      swift_endAccess();
      (*((void (**)(char *, const __CFString *))v233 + 1))(v38, v232);
      if (v60)
      {
        uint64_t v71 = v70;
      }
      else
      {
        int v158 = v231;
        *(void *)(v70 + v231[5]) = v59;
        *(void *)(v70 + v158[6]) = v58;
        uint64_t v159 = (uint64_t)v228;
        uint64_t v160 = v70;
        SFAirDropReceive.Transfer.id.getter();
        uint64_t v161 = v229;
        sub_10056E8A0(v160, v229);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v66 + 56))(v161, 0, 1, v158);
        swift_beginAccess();
        sub_1004670AC(v161, v159);
        swift_endAccess();
        uint64_t v71 = v160;
      }
      sub_10056E968(v71);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v48, v65);
    }
    else
    {
      swift_endAccess();
      (*((void (**)(char *, const __CFString *))v233 + 1))(v38, v232);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v48, v57);
    }
    goto LABEL_68;
  }
  int v78 = v56;
  if (v56 != enum case for SFAirDrop.Progress.completed(_:))
  {
    uint64_t v139 = v233;
    if (v56 != enum case for SFAirDrop.Progress.notStarted(_:))
    {
      int v154 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
      uint64_t v155 = *(void (**)(char *, uint64_t))(v43 + 8);
      v155(v48, v42);
      BOOL v156 = v78 == v154;
      long long v157 = v227;
      if (!v156) {
        v155(v46, v42);
      }
      goto LABEL_69;
    }
    uint64_t v140 = (uint64_t)v213;
    SFAirDropReceive.Transfer.id.getter();
    uint64_t v141 = v234;
    v225 = (char *)(v234 + 48);
    swift_beginAccess();
    uint64_t v142 = *(void *)(v141 + 48);
    uint64_t v143 = *(void *)(v142 + 16);
    uint64_t v203 = v43;
    uint64_t v202 = v42;
    uint64_t v201 = v48;
    if (v143)
    {
      unint64_t v144 = sub_10058392C(v140);
      CFStringRef v145 = v232;
      uint64_t v146 = v214;
      uint64_t v147 = v140;
      uint64_t v149 = v230;
      if (v148)
      {
        sub_10056E8A0(*(void *)(v142 + 56) + *(void *)(v230 + 72) * v144, v214);
        uint64_t v150 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v149 + 56);
        uint64_t v151 = v146;
        uint64_t v152 = 0;
      }
      else
      {
        uint64_t v150 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v230 + 56);
        uint64_t v151 = v214;
        uint64_t v152 = 1;
      }
      int64_t v163 = v231;
      v150(v151, v152, 1, v231);
    }
    else
    {
      uint64_t v162 = v230;
      int64_t v163 = v231;
      uint64_t v150 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v230 + 56);
      uint64_t v146 = v214;
      v150(v214, 1, 1, v231);
      CFStringRef v145 = v232;
      uint64_t v147 = v140;
      uint64_t v149 = v162;
    }
    swift_endAccess();
    uint64_t v165 = (void (*)(uint64_t, const __CFString *))*((void *)v139 + 1);
    v165(v147, v145);
    int v166 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v149 + 48))(v146, 1, v163);
    sub_10000A7E8(v146, &qword_100974EE0);
    if (v166 == 1)
    {
      uint64_t v226 = v54;
      CFStringRef v232 = @"Receive";
      uint64_t v231 = (int *)@"Start";
      uint64_t v167 = (uint64_t)v228;
      SFAirDropReceive.Transfer.id.getter();
      uint64_t v168 = v215;
      SFAirDrop.TransferIdentifier.id.getter();
      v165(v167, v145);
      Class v169 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v216 + 8))(v168, v217);
      uint64_t v170 = v207;
      NSString v171 = v206;
      uint64_t v172 = v208;
      (*(void (**)(char *, void, uint64_t))(v207 + 104))(v206, enum case for SFNWInterfaceType.awdl(_:), v208);
      SFNWInterfaceType.description.getter();
      v233 = (char *)v150;
      (*(void (**)(char *, uint64_t))(v170 + 8))(v171, v172);
      NSString v173 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_100046FF8((uint64_t)v232, (uint64_t)v231, v169, (uint64_t)v173, 0.0);

      SFAirDropReceive.Transfer.id.getter();
      uint64_t v174 = v229;
      Date.init()();
      ((void (*)(uint64_t, uint64_t, uint64_t, __CFError *))v223[7])(v174 + v163[7], 1, 1, v224);
      *(void *)(v174 + v163[5]) = 0;
      *(void *)(v174 + v163[6]) = 0;
      ((void (*)(uint64_t, void, uint64_t, int *))v233)(v174, 0, 1, v163);
      swift_beginAccess();
      sub_1004670AC(v174, v167);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v203 + 8))(v201, v202);
      uint64_t v175 = *(void *)(v234 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated);
      BOOL v176 = __OFADD__(v175, 1);
      uint64_t v177 = v175 + 1;
      if (!v176)
      {
        *(void *)(v234 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated) = v177;
LABEL_68:
        uint64_t v54 = v226;
        long long v157 = v227;
        goto LABEL_69;
      }
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    (*(void (**)(char *, uint64_t))(v203 + 8))(v201, v202);
LABEL_56:
    long long v157 = v227;
LABEL_69:
    Class v188 = &v157[*(int *)(v54 + 80)];
    uint64_t v189 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(char *, uint64_t))(*(void *)(v189 - 8) + 8))(v188, v189);
    uint64_t v190 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v190 - 8) + 8))(v157, v190);
    return;
  }
  uint64_t v203 = v43;
  uint64_t v79 = *(void (**)(char *, uint64_t))(v43 + 96);
  uint64_t v202 = v42;
  v79(v46, v42);
  swift_bridgeObjectRelease();
  uint64_t v80 = (uint64_t)v222;
  SFAirDropReceive.Transfer.id.getter();
  uint64_t v81 = v234;
  swift_beginAccess();
  uint64_t v82 = *(void *)(v81 + 48);
  unint64_t v83 = v233;
  if (!*(void *)(v82 + 16) || (unint64_t v84 = sub_10058392C(v80), (v85 & 1) == 0))
  {
    swift_endAccess();
    (*((void (**)(uint64_t, const __CFString *))v83 + 1))(v80, v232);
    (*(void (**)(char *, uint64_t))(v203 + 8))(v48, v202);
    goto LABEL_56;
  }
  uint64_t v226 = v54;
  uint64_t v201 = v48;
  uint64_t v86 = v210;
  sub_10056E8A0(*(void *)(v82 + 56) + *(void *)(v230 + 72) * v84, v210);
  uint64_t v87 = v218;
  sub_10056E904(v86, v218);
  swift_endAccess();
  os_log_type_t v89 = (char *)*((void *)v83 + 1);
  id v88 = v83 + 8;
  v225 = v89;
  ((void (*)(uint64_t, const __CFString *))v89)(v80, v232);
  uint64_t v90 = v231;
  uint64_t v91 = v87 + v231[7];
  uint64_t v92 = v212;
  sub_1002BEBA4(v91, v212);
  uint64_t v93 = v223;
  unint64_t v94 = v224;
  int v95 = ((uint64_t (**)(uint64_t, uint64_t, __CFError *))v223)[6](v92, 1, v224);
  sub_10000A7E8(v92, (uint64_t *)&unk_100975040);
  if (v95 != 1)
  {
    (*(void (**)(char *, uint64_t))(v203 + 8))(v201, v202);
    uint64_t v164 = v87;
LABEL_67:
    sub_10056E968(v164);
    goto LABEL_68;
  }
  v233 = v88;
  uint64_t v96 = v87;
  NSString v97 = v205;
  Date.init()();
  sub_10000A7E8(v91, (uint64_t *)&unk_100975040);
  ((uint64_t (**)(uint64_t, char *, __CFError *))v93)[2](v91, v97, v94);
  ((void (*)(uint64_t, void, uint64_t, __CFError *))v93[7])(v91, 0, 1, v94);
  Date.timeIntervalSince(_:)();
  uint64_t v98 = v90[5];
  double v99 = (double)*(uint64_t *)(v96 + v98);
  double v101 = v99 / v100;
  NSString v102 = String._bridgeToObjectiveC()();
  NSString v103 = String._bridgeToObjectiveC()();
  id v104 = [*(id *)(v81 + 16) discoverableLevel];
  swift_beginAccess();
  uint64_t v105 = swift_bridgeObjectRetain();
  uint64_t v106 = sub_100568FA8(v105);
  swift_bridgeObjectRelease();
  uint64_t v107 = *(void *)(v106 + 16);
  if (v107)
  {
    uint64_t v108 = 0;
    uint64_t v109 = v107 - 1;
    char v110 = 1;
    while (1)
    {
      while ((v110 & 1) == 0)
      {
        if (v109 == v108)
        {
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
        char v110 = 0;
        ++v108;
      }
      char v110 = *(unsigned char *)(v106 + v108 + 32);
      if (v109 == v108) {
        break;
      }
      ++v108;
    }
    swift_bridgeObjectRelease();
    if (v110) {
      goto LABEL_60;
    }
LABEL_62:
    uint64_t v178 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_60:
    uint64_t v178 = 1;
  }
  sub_10024592C((uint64_t)_swiftEmptyArrayStorage);
  Class v179 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100045F38(v102, v103, 0, (uint64_t)v104, v178, v179, v101, v99);

  uint64_t v180 = *(void *)(v218 + v231[6]);
  if (v180 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_76;
  }
  if (v180 > 0x7FFFFFFF)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  sub_10004665C(0, v180);
  uint64_t v181 = (uint64_t)v228;
  SFAirDropReceive.Transfer.id.getter();
  Class v182 = v215;
  SFAirDrop.TransferIdentifier.id.getter();
  ((void (*)(uint64_t, const __CFString *))v225)(v181, v232);
  Class v183 = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v216 + 8))(v182, v217);
  uint64_t v184 = v218;
  sub_100046FF8(@"Receive", @"Stop", v183, 0, (double)*(uint64_t *)(v218 + v98));

  SFAirDropReceive.Transfer.id.getter();
  uint64_t v185 = v229;
  sub_10056E8A0(v184, v229);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v230 + 56))(v185, 0, 1, v231);
  swift_beginAccess();
  sub_1004670AC(v185, v181);
  swift_endAccess();
  ((void (*)(char *, __CFError *))v223[1])(v97, v224);
  (*(void (**)(char *, uint64_t))(v203 + 8))(v201, v202);
  uint64_t v186 = *(void *)(v234 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted);
  BOOL v176 = __OFADD__(v186, 1);
  uint64_t v187 = v186 + 1;
  if (!v176)
  {
    *(void *)(v234 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted) = v187;
    uint64_t v164 = v184;
    goto LABEL_67;
  }
LABEL_78:
  __break(1u);
}

uint64_t sub_10056CAAC(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID];
  uint64_t v4 = *(void *)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
  uint64_t v6 = (uint64_t *)(v1 + 32);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v1 + 32);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1005838BC(v5, v4);
    if (v9)
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  uint64_t v10 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_6:
  uint64_t v11 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (!*(void *)(*v6 + 16))
  {
    *(void *)(v2 + 24) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  sub_100593D20(v10, v5, v4, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void sub_10056CC70(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_100975040);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v60 - v11;
  uint64_t v14 = *(void *)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID];
  unint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
  uint64_t v15 = (uint64_t *)(v1 + 32);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v1 + 32);
  if (!*(void *)(v16 + 16)) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1005838BC(v14, v13);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    swift_endAccess();
    if (qword_100969FB0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10000B47C(v27, (uint64_t)qword_1009795C0);
    uint64_t v28 = a1;
    CFStringRef v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v30))
    {

      return;
    }
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    v65[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_bridgeObjectRetain();
    unint64_t v66 = sub_100254634(v14, v13, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "No existing clients for bundleID %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_17;
  }
  uint64_t v61 = v4;
  uint64_t v62 = v2;
  unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  unint64_t v66 = v19;
  swift_endAccess();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  uint64_t v20 = a1;
  unint64_t v21 = sub_10056E9C4(v19, (uint64_t)v20);
  char v23 = v22;

  if (v23)
  {
    swift_bridgeObjectRelease();
    if (qword_100969FB0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10000B47C(v32, (uint64_t)qword_1009795C0);
    uint64_t v33 = v20;
    CFStringRef v29 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v34))
    {

      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    v65[0] = v36;
    type metadata accessor for UUID();
    sub_10056EADC((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_100254634(v37, v38, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v34, "No existing client for id %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_17:
    swift_slowDealloc();

    return;
  }
  if ((v19 & 0xC000000000000001) == 0)
  {
    if ((v21 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v21 < *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v24 = (char *)*(id *)(v19 + 8 * v21 + 32);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v24 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
  uint64_t v20 = v24;
  swift_bridgeObjectRelease();

  unint64_t v21 = v66;
  if (!(v66 >> 62))
  {
    uint64_t v25 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v25) {
      goto LABEL_10;
    }
LABEL_28:
    swift_beginAccess();
    goto LABEL_29;
  }
LABEL_27:
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v25) {
    goto LABEL_28;
  }
LABEL_10:
  swift_bridgeObjectRetain();
  swift_beginAccess();
  if (v21)
  {
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v64 = *v15;
    *uint64_t v15 = 0x8000000000000000;
    sub_100593D20(v21, v14, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v15 = v64;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_30:
    swift_bridgeObjectRelease();
LABEL_52:
    sub_10056D98C();

    return;
  }
LABEL_29:
  swift_bridgeObjectRetain();
  sub_1002A9DB8(v14, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (v25) {
    goto LABEL_30;
  }
  char v60 = v20;
  uint64_t v39 = &v20[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_startTime];
  Date.timeIntervalSinceNow.getter();
  double v41 = v40;
  uint64_t v42 = v62 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate;
  swift_beginAccess();
  sub_1002BEBA4(v42, (uint64_t)v12);
  uint64_t v43 = v63;
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  uint64_t v45 = v61;
  int v46 = v44(v12, 1, v61);
  sub_10000A7E8((uint64_t)v12, (uint64_t *)&unk_100975040);
  if (v46 == 1)
  {
    swift_bridgeObjectRelease();
    double v47 = 0.0;
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v6, v39, v45);
  sub_1002BEBA4(v42, (uint64_t)v10);
  if (v44(v10, 1, v45) != 1)
  {
    swift_bridgeObjectRelease();
    Date.timeIntervalSince(_:)();
    double v49 = v48;
    uint64_t v50 = *(void (**)(char *, uint64_t))(v43 + 8);
    v50(v6, v45);
    v50(v10, v45);
    double v47 = v49 * -1000.0;
LABEL_35:
    if (v47 > 0.0) {
      double v51 = v47;
    }
    else {
      double v51 = 0.0;
    }
    swift_bridgeObjectRetain();
    uint64_t v52 = (__CFString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Date.timeIntervalSince1970.getter();
    double v54 = v53;
    if ((~*(void *)&v53 & 0x7FF0000000000000) != 0)
    {
      if (v53 > -1.0)
      {
        if (v53 < 1.84467441e19)
        {
          uint64_t v55 = *(void *)(v62
                          + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount);
          if (v55 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v55 <= 0x7FFFFFFF)
            {
              uint64_t v56 = *(void *)(v62
                              + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount);
              if (v56 >= (uint64_t)0xFFFFFFFF80000000)
              {
                if (v56 <= 0x7FFFFFFF)
                {
                  uint64_t v57 = *(void *)(v62
                                  + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated);
                  if (v57 >= (uint64_t)0xFFFFFFFF80000000)
                  {
                    if (v57 <= 0x7FFFFFFF)
                    {
                      uint64_t v58 = *(void *)(v62
                                      + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted);
                      if (v58 >= (uint64_t)0xFFFFFFFF80000000)
                      {
                        if (v58 <= 0x7FFFFFFF)
                        {
                          uint64_t v59 = (uint64_t)[*(id *)(v62 + 16) discoverableLevel];
                          if (v59 >= (uint64_t)0xFFFFFFFF80000000)
                          {
                            if (v59 <= 0x7FFFFFFF)
                            {
                              sub_100046AFC(0, 0, v52, (unint64_t)v54, v55, v56, v57, v58, v41 * -1000.0, v51, v59);

                              uint64_t v20 = v60;
                              goto LABEL_52;
                            }
                            goto LABEL_65;
                          }
LABEL_64:
                          __break(1u);
LABEL_65:
                          __break(1u);
                          goto LABEL_66;
                        }
LABEL_63:
                        __break(1u);
                        goto LABEL_64;
                      }
LABEL_62:
                      __break(1u);
                      goto LABEL_63;
                    }
LABEL_61:
                    __break(1u);
                    goto LABEL_62;
                  }
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
LABEL_59:
                __break(1u);
                goto LABEL_60;
              }
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_55;
  }
LABEL_66:
  __break(1u);
}

uint64_t sub_10056D604(uint64_t a1)
{
  uint64_t v3 = sub_10000A844((uint64_t *)&unk_100975040);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v15[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate;
  swift_beginAccess();
  sub_1002BEBA4(v9, (uint64_t)v6);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10);
  sub_10000A7E8((uint64_t)v6, (uint64_t *)&unk_100975040);
  if (v12 == 1)
  {
    Date.init()();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  else
  {
    sub_1002BEBA4(v9, (uint64_t)v8);
  }
  swift_beginAccess();
  sub_100340238((uint64_t)v8, v9);
  uint64_t result = swift_endAccess();
  *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount) = a1;
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount);
  if (v14 <= a1) {
    uint64_t v14 = a1;
  }
  *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount) = v14;
  return result;
}

uint64_t sub_10056D7D8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_1009795C0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_1009795C0);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

char *sub_10056D8A0(uint64_t a1)
{
  *((void *)v1 + 3) = 0;
  *((void *)v1 + 4) = &_swiftEmptyDictionarySingleton;
  *((void *)v1 + 5) = &_swiftEmptyDictionarySingleton;
  *((void *)v1 + 6) = &_swiftEmptyDictionarySingleton;
  uint64_t v3 = &v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate];
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  *(void *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount] = 0;
  *(void *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount] = 0;
  *(void *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated] = 0;
  *(void *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted] = 0;
  v5(&v1[OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_bonjourServerStartDate], 1, 1, v4);
  *((void *)v1 + 2) = a1;
  return v1;
}

uint64_t sub_10056D98C()
{
  uint64_t v1 = sub_10000A844((uint64_t *)&unk_100975040);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v0 + 32) + 16))
  {
    *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount) = 0;
    *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount) = 0;
    *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated) = 0;
    *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted) = 0;
    uint64_t v5 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
    uint64_t v6 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate;
    swift_beginAccess();
    sub_100340238((uint64_t)v3, v6);
    swift_endAccess();
    *(void *)(v0 + 24) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10056DAD0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A7E8(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate, (uint64_t *)&unk_100975040);
  sub_10000A7E8(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_bonjourServerStartDate, (uint64_t *)&unk_100975040);

  return swift_deallocClassInstance();
}

uint64_t sub_10056DB84()
{
  return type metadata accessor for SDAirDropLegacySessionLogger(0);
}

uint64_t type metadata accessor for SDAirDropLegacySessionLogger(uint64_t a1)
{
  return sub_10000B93C(a1, qword_100979630);
}

void sub_10056DBAC()
{
  sub_100271710();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t *sub_10056DC7C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    uint64_t v11 = a3[7];
    int v12 = (char *)a1 + v11;
    unint64_t v13 = (char *)a2 + v11;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7))
    {
      uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v12, (uint64_t *)v13, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10056DE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

char *sub_10056DF28(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v10 = a3[7];
  uint64_t v11 = &a1[v10];
  int v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6))
  {
    uint64_t v13 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_10056E084(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  int v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(&a1[v9], 1, v6);
  int v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *sub_10056E24C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v10 = a3[7];
  uint64_t v11 = &a1[v10];
  int v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6))
  {
    uint64_t v13 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_10056E3A8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v10 = a3[7];
  uint64_t v11 = &a1[v10];
  int v12 = &a2[v10];
  uint64_t v13 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v14 = v13(&a1[v10], 1, v6);
  int v15 = v13(v12, 1, v6);
  if (!v14)
  {
    if (!v15)
    {
      v8(v11, v12, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  return a1;
}

uint64_t sub_10056E56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10056E580);
}

uint64_t sub_10056E580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 28);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10056E67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10056E690);
}

uint64_t sub_10056E690(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10000A844((uint64_t *)&unk_100975040);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 28);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for SDAirDropLegacySessionLogger.Transfer(uint64_t a1)
{
  return sub_10000B93C(a1, qword_100979760);
}

void sub_10056E7B8()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_100271710();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for SDAirDropLegacySessionLogger.Session()
{
  return &type metadata for SDAirDropLegacySessionLogger.Session;
}

uint64_t sub_10056E8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10056E904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10056E968(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10056E9C4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  a2 += OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_id;
  while (1)
  {
    id v6 = (a1 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
       : *(id *)(a1 + 8 * v5 + 32);
    uint64_t v7 = v6;
    char v8 = static UUID.== infix(_:_:)();

    if (v8) {
      return v5;
    }
    uint64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v9 == v4) {
      return 0;
    }
  }
}

uint64_t sub_10056EADC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10056EB24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_1009797A0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_1009797A0);
  if (qword_100969CB8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994678);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10056EBEC()
{
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned int v2 = [v0 BOOLForKey:v1];

  if (!v2 || (sub_10056ECE8() & 1) != 0) {
    return 1;
  }
  NSString v4 = String._bridgeToObjectiveC()();
  unsigned int v5 = [v0 BOOLForKey:v4];

  if (!v5 || (sub_10056EE1C() & 1) == 0) {
    return 0;
  }
  NSString v6 = String._bridgeToObjectiveC()();
  unsigned int v7 = [v0 BOOLForKey:v6];

  return v7 ^ 1;
}

uint64_t sub_10056ECE8()
{
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned int v2 = [v0 BOOLForKey:v1];

  if (!v2) {
    return 0;
  }
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = (uint64_t)[v0 integerForKey:v3];

  if (v4 < 2) {
    return 1;
  }
  NSString v6 = String._bridgeToObjectiveC()();
  unsigned int v7 = [v0 BOOLForKey:v6];

  if (!v7 || (sub_10056EE1C() & 1) == 0) {
    return 0;
  }
  NSString v8 = String._bridgeToObjectiveC()();
  unsigned int v9 = [v0 BOOLForKey:v8];

  return v9 ^ 1;
}

uint64_t sub_10056EE1C()
{
  NSString v1 = v0;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 valueForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10041AAB4((uint64_t)&v23);
LABEL_5:
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v1 BOOLForKey:v6];

    return (uint64_t)v7;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  sub_10041AAB4((uint64_t)&v23);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v0 valueForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10041AAB4((uint64_t)&v23);
    goto LABEL_5;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  sub_10041AAB4((uint64_t)&v23);
  if (qword_100969FB8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000B47C(v9, (uint64_t)qword_1009797A0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Requesting value of PKTextInputSettings.supportedKeyboardLocaleExists on main thread...", v12, 2u);
    swift_slowDealloc();
  }

  if ([self isMainThread])
  {
    sub_10056F280();
    uint64_t v13 = 0;
LABEL_14:
    NSString v19 = String._bridgeToObjectiveC()();
    id v7 = [v1 BOOLForKey:v19];

    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      char v22 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v22 = 67109120;
      LODWORD(v23) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received value of PKTextInputSettings.supportedKeyboardLocaleExists: %{BOOL}d", v22, 8u);
      swift_slowDealloc();
    }

    sub_1002CA430((uint64_t)v13);
    return (uint64_t)v7;
  }
  sub_1002B62F0();
  uint64_t v14 = static OS_dispatch_queue.main.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  uint64_t v16 = swift_allocObject();
  uint64_t v13 = sub_100570188;
  *(void *)(v16 + 16) = sub_100570188;
  *(void *)(v16 + 24) = v15;
  uint64_t v25 = sub_1005701BC;
  uint64_t v26 = v16;
  *(void *)&long long v23 = _NSConcreteStackBlock;
  *((void *)&v23 + 1) = 1107296256;
  *(void *)&long long v24 = sub_1006CDF68;
  *((void *)&v24 + 1) = &unk_1008DF6D0;
  uint64_t v17 = _Block_copy(&v23);
  id v18 = v1;
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v14, v17);

  _Block_release(v17);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v14 & 1) == 0) {
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void sub_10056F280()
{
  NSString v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1002B62F0();
  *id v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    id v7 = [self sharedSettings];
    id v8 = [v7 supportedKeyboardLocaleExists];

    NSString v9 = String._bridgeToObjectiveC()();
    [v1 setBool:v8 forKey:v9];
  }
  else
  {
    __break(1u);
  }
}

void sub_10056F408(uint64_t a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setInteger:a1 forKey:v3];

  id v4 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithSuiteName:v5];

  if (v6)
  {
    id v8 = v6;
    NSString v7 = String._bridgeToObjectiveC()();
    [v8 setInteger:a1 forKey:v7];
  }
}

void sub_10056F54C(char a1)
{
}

void sub_10056F584(char a1)
{
}

void sub_10056F5BC(char a1)
{
}

void sub_10056F5F8(char a1)
{
  uint64_t v2 = v1;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = a1 & 1;
  [v2 setBool:v5 forKey:v4];

  id v6 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithSuiteName:v7];

  if (v8)
  {
    id v10 = v8;
    NSString v9 = String._bridgeToObjectiveC()();
    [v10 setBool:v5 forKey:v9];
  }
}

double sub_10056F728()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10041AAB4((uint64_t)v7);
    NSString v3 = String._bridgeToObjectiveC()();
    [v0 doubleForKey:v3];
    double v5 = v4;
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    sub_10041AAB4((uint64_t)v7);
    return 1.5;
  }
  return v5;
}

void sub_10056F810()
{
  NSString v1 = v0;
  if (qword_100969FB8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B47C(v2, (uint64_t)qword_1009797A0);
  NSString v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    double v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "setting Last Seen UI to Current", v5, 2u);
    swift_slowDealloc();
  }

  sub_10056F5F8(1);
  sub_10056F408(2);
  sub_10056F5F8(0);
  id v6 = [self sharedSettings];
  unsigned int v7 = [v6 supportedKeyboardLocaleExists];

  if (v7) {
    sub_10056F5F8(1);
  }
  id v8 = String._bridgeToObjectiveC()();
  [v1 removeObjectForKey:v8];
}

void sub_10056FA30()
{
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 removeObjectForKey:v1];

  NSString v2 = String._bridgeToObjectiveC()();
  [v0 removeObjectForKey:v2];

  NSString v3 = String._bridgeToObjectiveC()();
  [v0 removeObjectForKey:v3];

  NSString v4 = String._bridgeToObjectiveC()();
  [v0 removeObjectForKey:v4];

  id v5 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithSuiteName:v6];

  if (v7)
  {
    id v8 = v7;
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 removeObjectForKey:v9];

    id v10 = v8;
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 removeObjectForKey:v11];

    NSString v12 = String._bridgeToObjectiveC()();
    [v10 removeObjectForKey:v12];

    NSString v13 = String._bridgeToObjectiveC()();
    [v10 removeObjectForKey:v13];
  }
  id v14 = String._bridgeToObjectiveC()();
  [v0 removeObjectForKey:v14];
}

void sub_10056FCB8()
{
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 removeObjectForKey:v1];

  id v2 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithSuiteName:v3];

  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v0 objectForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10041AAB4((uint64_t)&v29);
    if (v4)
    {
      id v7 = v4;
      NSString v8 = String._bridgeToObjectiveC()();
      id v9 = [v0 BOOLForKey:v8];

      NSString v10 = String._bridgeToObjectiveC()();
      [v7 setBool:v9 forKey:v10];
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
    sub_10041AAB4((uint64_t)&v29);
  }
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v0 objectForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10041AAB4((uint64_t)&v29);
    if (v4)
    {
      id v13 = v4;
      NSString v14 = String._bridgeToObjectiveC()();
      id v15 = [v0 integerForKey:v14];

      NSString v16 = String._bridgeToObjectiveC()();
      [v13 setInteger:v15 forKey:v16];
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
    sub_10041AAB4((uint64_t)&v29);
  }
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [v0 objectForKey:v17];

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10041AAB4((uint64_t)&v29);
    if (v4)
    {
      id v19 = v4;
      NSString v20 = String._bridgeToObjectiveC()();
      id v21 = [v0 BOOLForKey:v20];

      NSString v22 = String._bridgeToObjectiveC()();
      [v19 setBool:v21 forKey:v22];
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
    sub_10041AAB4((uint64_t)&v29);
  }
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [v0 objectForKey:v23];

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10041AAB4((uint64_t)&v29);
    if (v4)
    {
      id v25 = v4;
      NSString v26 = String._bridgeToObjectiveC()();
      id v27 = [v0 BOOLForKey:v26];

      NSString v28 = String._bridgeToObjectiveC()();
      [v25 setBool:v27 forKey:v28];
    }
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;

    sub_10041AAB4((uint64_t)&v29);
  }
}

uint64_t sub_100570150()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100570188()
{
}

uint64_t sub_1005701AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005701BC()
{
  return sub_1006CDF40(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1005701C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1005701D4()
{
  return swift_release();
}

unint64_t sub_1005701DC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = _s12HelloRequestVMa();
        *(_DWORD *)(a1 + *(int *)(v8 + 20)) = *(_DWORD *)(a2 + *(int *)(v8 + 20));
        *(unsigned char *)(a1 + *(int *)(v8 + 24)) = *(unsigned char *)(a2 + *(int *)(v8 + 24));
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2u:
        unint64_t v11 = *(void *)(a2 + 8);
        if (v11 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v68 = *(void *)a2;
          sub_10025ADCC(v68, v11);
          *(void *)a1 = v68;
          *(void *)(a1 + 8) = v11;
        }
        goto LABEL_78;
      case 3u:
        unint64_t v12 = *(void *)(a2 + 8);
        if (v12 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v69 = *(void *)a2;
          sub_10025ADCC(*(void *)a2, *(void *)(a2 + 8));
          *(void *)a1 = v69;
          *(void *)(a1 + 8) = v12;
        }
        uint64_t v70 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v70;
        uint64_t v71 = (_OWORD *)(a2 + 32);
        unint64_t v72 = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        if (v72 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 32) = *v71;
        }
        else
        {
          uint64_t v80 = *(void *)v71;
          sub_10025ADCC(v80, v72);
          *(void *)(a1 + 32) = v80;
          *(void *)(a1 + 40) = v72;
        }
        uint64_t v81 = *(void *)(a2 + 56);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = v81;
        uint64_t v82 = (_OWORD *)(a2 + 64);
        unint64_t v83 = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        if (v83 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 64) = *v82;
        }
        else
        {
          uint64_t v84 = *(void *)v82;
          sub_10025ADCC(v84, v83);
          *(void *)(a1 + 64) = v84;
          *(void *)(a1 + 72) = v83;
        }
        char v85 = (uint64_t *)(a2 + 80);
        unint64_t v86 = *(void *)(a2 + 88);
        if (v86 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 80) = *(_OWORD *)v85;
        }
        else
        {
          uint64_t v87 = *v85;
          sub_10025ADCC(*v85, *(void *)(a2 + 88));
          *(void *)(a1 + 80) = v87;
          *(void *)(a1 + 88) = v86;
        }
        uint64_t v88 = *(void *)(a2 + 104);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = v88;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        uint64_t v89 = *(void *)(a2 + 128);
        uint64_t v90 = *(void *)(a2 + 136);
        *(void *)(a1 + 128) = v89;
        *(void *)(a1 + 136) = v90;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 4u:
        uint64_t v13 = type metadata accessor for SFAirDrop.TransferIdentifier();
        uint64_t v14 = *(void *)(v13 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13))
        {
          uint64_t v15 = sub_10000A844((uint64_t *)&unk_10096DFB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v15 - 8) + 64));
        }
        else
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16))(a1, a2, v13);
          (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
        }
        uint64_t v91 = (int *)_s14descr1008C9AB9V10AskRequestVMa();
        uint64_t v92 = v91[5];
        uint64_t v93 = (void *)(a1 + v92);
        unint64_t v94 = (const void *)(a2 + v92);
        uint64_t v95 = type metadata accessor for SFAirDrop.TransferType();
        uint64_t v96 = *(void *)(v95 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
        {
          uint64_t v97 = sub_10000A844(&qword_10096DFA8);
          memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v96 + 16))(v93, v94, v95);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
        }
        uint64_t v134 = v91[6];
        uint64_t v135 = a1 + v134;
        uint64_t v136 = (uint64_t *)(a2 + v134);
        unint64_t v137 = v136[1];
        if (v137 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
        }
        else
        {
          uint64_t v138 = *v136;
          sub_10025ADCC(*v136, v136[1]);
          *(void *)uint64_t v135 = v138;
          *(void *)(v135 + 8) = v137;
        }
        uint64_t v139 = v91[7];
        uint64_t v140 = (void *)(a1 + v139);
        uint64_t v141 = (void *)(a2 + v139);
        uint64_t v142 = v141[1];
        void *v140 = *v141;
        v140[1] = v142;
        uint64_t v143 = v91[8];
        unint64_t v144 = (void *)(a1 + v143);
        CFStringRef v145 = (void *)(a2 + v143);
        __dstb = (void *)v145[1];
        *unint64_t v144 = *v145;
        v144[1] = __dstb;
        uint64_t v146 = v91[9];
        uint64_t v147 = (void *)(a1 + v146);
        char v148 = (void *)(a2 + v146);
        uint64_t v149 = v148[1];
        *uint64_t v147 = *v148;
        v147[1] = v149;
        uint64_t v150 = v91[10];
        uint64_t v151 = (void *)(a1 + v150);
        uint64_t v152 = (void *)(a2 + v150);
        uint64_t v153 = v152[1];
        *uint64_t v151 = *v152;
        v151[1] = v153;
        *(void *)(a1 + v91[11]) = *(void *)(a2 + v91[11]);
        *(void *)(a1 + v91[12]) = *(void *)(a2 + v91[12]);
        uint64_t v154 = v91[13];
        uint64_t v155 = (void *)(a1 + v154);
        BOOL v156 = (void *)(a2 + v154);
        uint64_t v157 = v156[1];
        *uint64_t v155 = *v156;
        v155[1] = v157;
        uint64_t v158 = v91[14];
        Class v179 = (uint64_t *)(a2 + v158);
        uint64_t v182 = a1 + v158;
        unint64_t v159 = *(void *)(a2 + v158 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v159 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v182 = *(_OWORD *)v179;
        }
        else
        {
          uint64_t v160 = *v179;
          sub_10025ADCC(*v179, v159);
          *(void *)uint64_t v182 = v160;
          *(void *)(v182 + 8) = v159;
        }
        uint64_t v161 = v91[15];
        uint64_t v162 = a1 + v161;
        int64_t v163 = (uint64_t *)(a2 + v161);
        unint64_t v164 = v163[1];
        if (v164 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
        }
        else
        {
          uint64_t v165 = *v163;
          sub_10025ADCC(*v163, v163[1]);
          *(void *)uint64_t v162 = v165;
          *(void *)(v162 + 8) = v164;
        }
        *(unsigned char *)(a1 + v91[16]) = *(unsigned char *)(a2 + v91[16]);
        uint64_t v166 = v91[17];
        uint64_t v167 = a1 + v166;
        uint64_t v168 = (uint64_t *)(a2 + v166);
        unint64_t v169 = v168[1];
        if (v169 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v167 = *(_OWORD *)v168;
        }
        else
        {
          uint64_t v170 = *v168;
          sub_10025ADCC(*v168, v168[1]);
          *(void *)uint64_t v167 = v170;
          *(void *)(v167 + 8) = v169;
        }
        goto LABEL_78;
      case 5u:
        uint64_t v16 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v16;
        uint64_t v17 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v17;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        uint64_t v18 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = v18;
        uint64_t v19 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = v19;
        uint64_t v20 = *(void *)(a2 + 80);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = v20;
        id v21 = (uint64_t *)(a2 + 88);
        unint64_t v22 = *(void *)(a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 88) = *(_OWORD *)v21;
        }
        else
        {
          uint64_t v73 = *v21;
          sub_10025ADCC(*v21, v22);
          *(void *)(a1 + 88) = v73;
          *(void *)(a1 + 96) = v22;
        }
        goto LABEL_78;
      case 6u:
        uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(a2, 1, v23))
        {
          uint64_t v25 = sub_10000A844((uint64_t *)&unk_10096DFB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 16))(a1, a2, v23);
          (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v24 + 56))(a1, 0, 1, v23);
        }
        uint64_t v98 = (int *)_s14descr1008C92C9V13UploadRequestVMa();
        *(void *)(a1 + v98[5]) = *(void *)(a2 + v98[5]);
        uint64_t v99 = v98[6];
        double v100 = (void *)(a1 + v99);
        double v101 = (void *)(a2 + v99);
        uint64_t v102 = v101[1];
        *double v100 = *v101;
        v100[1] = v102;
        uint64_t v103 = v98[7];
        uint64_t v104 = a1 + v103;
        uint64_t v105 = (_OWORD *)(a2 + v103);
        unint64_t v106 = *(void *)(a2 + v103 + 8);
        swift_bridgeObjectRetain();
        if (v106 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v104 = *v105;
        }
        else
        {
          uint64_t v107 = *(void *)v105;
          sub_10025ADCC(v107, v106);
          *(void *)uint64_t v104 = v107;
          *(void *)(v104 + 8) = v106;
        }
        *(unsigned char *)(a1 + v98[8]) = *(unsigned char *)(a2 + v98[8]);
        uint64_t v108 = v98[9];
        uint64_t v109 = (void *)(a1 + v108);
        char v110 = (void *)(a2 + v108);
        uint64_t v111 = v110[1];
        *uint64_t v109 = *v110;
        v109[1] = v111;
        uint64_t v112 = v98[10];
        int64_t v113 = (void *)(a1 + v112);
        uint64_t v114 = (void *)(a2 + v112);
        uint64_t v115 = v114[1];
        void *v113 = *v114;
        v113[1] = v115;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 7u:
      case 0xBu:
      case 0xDu:
        uint64_t v67 = *(void *)a2;
        unint64_t v66 = *(void *)(a2 + 8);
        sub_10025ADCC(v67, v66);
        *(void *)a1 = v67;
        *(void *)(a1 + 8) = v66;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 8u:
        uint64_t v26 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
        id v27 = (int *)_s14descr1008C9A51V15ExchangeRequestVMa(0);
        uint64_t v28 = v27[5];
        long long v29 = (void *)(a1 + v28);
        long long v30 = (void *)(a2 + v28);
        uint64_t v31 = v30[1];
        *long long v29 = *v30;
        v29[1] = v31;
        uint64_t v32 = v27[6];
        uint64_t v33 = (void *)(a1 + v32);
        os_log_type_t v34 = (void *)(a2 + v32);
        uint64_t v35 = v34[1];
        void *v33 = *v34;
        v33[1] = v35;
        uint64_t v36 = v27[7];
        uint64_t v180 = v27;
        __dst = (void *)(a1 + v36);
        uint64_t v37 = (const void *)(a2 + v36);
        uint64_t v38 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
        uint64_t v39 = *(void *)(v38 - 8);
        double v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v40(v37, 1, v38))
        {
          uint64_t v41 = sub_10000A844(&qword_1009797D0);
          memcpy(__dst, v37, *(void *)(*(void *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(__dst, v37, v38);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
        }
        uint64_t v116 = v180[8];
        uint64_t v117 = a1 + v116;
        unint64_t v118 = (uint64_t *)(a2 + v116);
        unint64_t v119 = v118[1];
        if (v119 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
        }
        else
        {
          uint64_t v120 = *v118;
          sub_10025ADCC(*v118, v118[1]);
          *(void *)uint64_t v117 = v120;
          *(void *)(v117 + 8) = v119;
        }
        uint64_t v121 = v180[9];
        uint64_t v122 = a1 + v121;
        uint64_t v123 = a2 + v121;
        if (!*(void *)(a2 + v121 + 72)) {
          goto LABEL_75;
        }
        uint64_t v124 = *(void *)(v123 + 8);
        *(void *)uint64_t v122 = *(void *)v123;
        *(void *)(v122 + 8) = v124;
        uint64_t v125 = (_OWORD *)(v123 + 16);
        unint64_t v126 = *(void *)(v123 + 24);
        swift_bridgeObjectRetain();
        if (v126 >> 60 != 15) {
          goto LABEL_76;
        }
        *(_OWORD *)(v122 + 16) = *v125;
        goto LABEL_77;
      case 9u:
        uint64_t v42 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
        uint64_t v43 = (int *)_s14descr1008C9A51V16ExchangeResponseVMa(0);
        uint64_t v44 = v43[5];
        uint64_t v45 = (void *)(a1 + v44);
        int v46 = (void *)(a2 + v44);
        uint64_t v47 = v46[1];
        *uint64_t v45 = *v46;
        v45[1] = v47;
        uint64_t v48 = v43[6];
        double v49 = (void *)(a1 + v48);
        uint64_t v50 = (void *)(a2 + v48);
        uint64_t v51 = v50[1];
        *double v49 = *v50;
        v49[1] = v51;
        uint64_t v52 = v43[7];
        uint64_t v181 = v43;
        __dsta = (void *)(a1 + v52);
        double v53 = (const void *)(a2 + v52);
        uint64_t v54 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
        uint64_t v55 = *(void *)(v54 - 8);
        uint64_t v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v56(v53, 1, v54))
        {
          uint64_t v57 = sub_10000A844(&qword_1009797D0);
          memcpy(__dsta, v53, *(void *)(*(void *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v55 + 16))(__dsta, v53, v54);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(__dsta, 0, 1, v54);
        }
        uint64_t v127 = v181[8];
        uint64_t v128 = a1 + v127;
        NSString v129 = (uint64_t *)(a2 + v127);
        unint64_t v130 = v129[1];
        if (v130 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
        }
        else
        {
          uint64_t v131 = *v129;
          sub_10025ADCC(*v129, v129[1]);
          *(void *)uint64_t v128 = v131;
          *(void *)(v128 + 8) = v130;
        }
        uint64_t v132 = v181[9];
        uint64_t v122 = a1 + v132;
        uint64_t v123 = a2 + v132;
        if (*(void *)(a2 + v132 + 72))
        {
          uint64_t v133 = *(void *)(v123 + 8);
          *(void *)uint64_t v122 = *(void *)v123;
          *(void *)(v122 + 8) = v133;
          uint64_t v125 = (_OWORD *)(v123 + 16);
          unint64_t v126 = *(void *)(v123 + 24);
          swift_bridgeObjectRetain();
          if (v126 >> 60 == 15)
          {
            *(_OWORD *)(v122 + 16) = *v125;
          }
          else
          {
LABEL_76:
            uint64_t v173 = *(void *)v125;
            sub_10025ADCC(v173, v126);
            *(void *)(v122 + 16) = v173;
            *(void *)(v122 + 24) = v126;
          }
LABEL_77:
          uint64_t v174 = *(void *)(v123 + 32);
          unint64_t v175 = *(void *)(v123 + 40);
          sub_10025ADCC(v174, v175);
          *(void *)(v122 + 32) = v174;
          *(void *)(v122 + 40) = v175;
          uint64_t v176 = *(void *)(v123 + 48);
          unint64_t v177 = *(void *)(v123 + 56);
          sub_10025ADCC(v176, v177);
          *(void *)(v122 + 48) = v176;
          *(void *)(v122 + 56) = v177;
          uint64_t v178 = *(void *)(v123 + 72);
          *(void *)(v122 + 64) = *(void *)(v123 + 64);
          *(void *)(v122 + 72) = v178;
          *(void *)(v122 + 80) = *(void *)(v123 + 80);
          swift_bridgeObjectRetain();
        }
        else
        {
LABEL_75:
          long long v171 = *(_OWORD *)(v123 + 48);
          *(_OWORD *)(v122 + 32) = *(_OWORD *)(v123 + 32);
          *(_OWORD *)(v122 + 48) = v171;
          *(_OWORD *)(v122 + 64) = *(_OWORD *)(v123 + 64);
          *(void *)(v122 + 80) = *(void *)(v123 + 80);
          long long v172 = *(_OWORD *)(v123 + 16);
          *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
          *(_OWORD *)(v122 + 16) = v172;
        }
LABEL_78:
        swift_storeEnumTagMultiPayload();
        break;
      case 0xAu:
        uint64_t v58 = *(void *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = v58;
        uint64_t v59 = (_OWORD *)(a2 + 16);
        unint64_t v60 = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        if (v60 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 16) = *v59;
        }
        else
        {
          uint64_t v74 = *(void *)v59;
          sub_10025ADCC(v74, v60);
          *(void *)(a1 + 16) = v74;
          *(void *)(a1 + 24) = v60;
        }
        uint64_t v75 = *(void *)(a2 + 32);
        unint64_t v76 = *(void *)(a2 + 40);
        sub_10025ADCC(v75, v76);
        *(void *)(a1 + 32) = v75;
        *(void *)(a1 + 40) = v76;
        uint64_t v77 = *(void *)(a2 + 48);
        unint64_t v78 = *(void *)(a2 + 56);
        sub_10025ADCC(v77, v78);
        *(void *)(a1 + 48) = v77;
        *(void *)(a1 + 56) = v78;
        uint64_t v79 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = v79;
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xCu:
        uint64_t v61 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16))(a1, a2, v61);
        uint64_t v62 = *(int *)(_s14descr1008C9841V12ErrorRequestVMa() + 20);
        uint64_t v63 = a1 + v62;
        uint64_t v64 = a2 + v62;
        uint64_t v65 = type metadata accessor for CodableError();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(v6 + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t sub_100571140(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v5 = type metadata accessor for SFAirDrop.TransferIdentifier();
      goto LABEL_52;
    case 2:
      unint64_t v4 = a1[1];
      if (v4 >> 60 == 15) {
        return result;
      }
      uint64_t v3 = *a1;
      goto LABEL_3;
    case 3:
      unint64_t v6 = a1[1];
      if (v6 >> 60 != 15) {
        sub_100250CC4(*a1, v6);
      }
      swift_bridgeObjectRelease();
      unint64_t v7 = a1[5];
      if (v7 >> 60 != 15) {
        sub_100250CC4(a1[4], v7);
      }
      swift_bridgeObjectRelease();
      unint64_t v8 = a1[9];
      if (v8 >> 60 != 15) {
        sub_100250CC4(a1[8], v8);
      }
      unint64_t v9 = a1[11];
      if (v9 >> 60 != 15) {
        sub_100250CC4(a1[10], v9);
      }
      goto LABEL_17;
    case 4:
      uint64_t v10 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10)) {
        (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(a1, v10);
      }
      unint64_t v12 = (int *)_s14descr1008C9AB9V10AskRequestVMa();
      uint64_t v13 = (char *)a1 + v12[5];
      uint64_t v14 = type metadata accessor for SFAirDrop.TransferType();
      uint64_t v15 = *(void *)(v14 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
      }
      uint64_t v16 = (uint64_t *)((char *)a1 + v12[6]);
      unint64_t v17 = v16[1];
      if (v17 >> 60 != 15) {
        sub_100250CC4(*v16, v17);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v18 = (uint64_t *)((char *)a1 + v12[14]);
      unint64_t v19 = v18[1];
      if (v19 >> 60 != 15) {
        uint64_t result = sub_100250CC4(*v18, v19);
      }
      uint64_t v20 = (uint64_t *)((char *)a1 + v12[15]);
      unint64_t v21 = v20[1];
      if (v21 >> 60 != 15) {
        uint64_t result = sub_100250CC4(*v20, v21);
      }
      unint64_t v22 = (uint64_t *)((char *)a1 + v12[17]);
      unint64_t v4 = v22[1];
      if (v4 >> 60 == 15) {
        return result;
      }
      uint64_t v3 = *v22;
      goto LABEL_3;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v4 = a1[12];
      if (v4 >> 60 == 15) {
        return result;
      }
      uint64_t v3 = a1[11];
      goto LABEL_3;
    case 6:
      uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v24 = *(void *)(v23 - 8);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(a1, 1, v23)) {
        (*(void (**)(uint64_t *, uint64_t))(v24 + 8))(a1, v23);
      }
      uint64_t v25 = _s14descr1008C92C9V13UploadRequestVMa();
      swift_bridgeObjectRelease();
      uint64_t v26 = (uint64_t *)((char *)a1 + *(int *)(v25 + 28));
      unint64_t v27 = v26[1];
      if (v27 >> 60 != 15) {
        sub_100250CC4(*v26, v27);
      }
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_47;
    case 7:
    case 11:
    case 13:
      uint64_t v3 = *a1;
      unint64_t v4 = a1[1];
LABEL_3:
      return sub_100250CC4(v3, v4);
    case 8:
      uint64_t v28 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v28 - 8) + 8))(a1, v28);
      uint64_t v29 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
      goto LABEL_39;
    case 9:
      uint64_t v30 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v30 - 8) + 8))(a1, v30);
      uint64_t v29 = _s14descr1008C9A51V16ExchangeResponseVMa(0);
LABEL_39:
      uint64_t v31 = (int *)v29;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v32 = (char *)a1 + v31[7];
      uint64_t v33 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33);
      if (!result) {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v32, v33);
      }
      uint64_t v35 = (uint64_t *)((char *)a1 + v31[8]);
      unint64_t v36 = v35[1];
      if (v36 >> 60 != 15) {
        uint64_t result = sub_100250CC4(*v35, v36);
      }
      a1 = (uint64_t *)((char *)a1 + v31[9]);
      if (a1[9]) {
        goto LABEL_44;
      }
      return result;
    case 10:
LABEL_44:
      swift_bridgeObjectRelease();
      unint64_t v37 = a1[3];
      if (v37 >> 60 != 15) {
        sub_100250CC4(a1[2], v37);
      }
      sub_100250CC4(a1[4], a1[5]);
      sub_100250CC4(a1[6], a1[7]);
LABEL_47:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 12:
      uint64_t v38 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v38 - 8) + 8))(a1, v38);
      a1 = (uint64_t *)((char *)a1 + *(int *)(_s14descr1008C9841V12ErrorRequestVMa() + 20));
      uint64_t v5 = type metadata accessor for CodableError();
LABEL_52:
      uint64_t v39 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
      uint64_t result = v39(a1, v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10057180C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = _s12HelloRequestVMa();
      *(_DWORD *)(a1 + *(int *)(v7 + 20)) = *(_DWORD *)(a2 + *(int *)(v7 + 20));
      *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
      goto LABEL_75;
    case 2u:
      unint64_t v8 = *(void *)(a2 + 8);
      if (v8 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v65 = *(void *)a2;
        sub_10025ADCC(v65, v8);
        *(void *)a1 = v65;
        *(void *)(a1 + 8) = v8;
      }
      goto LABEL_75;
    case 3u:
      unint64_t v9 = *(void *)(a2 + 8);
      if (v9 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v66 = *(void *)a2;
        sub_10025ADCC(*(void *)a2, *(void *)(a2 + 8));
        *(void *)a1 = v66;
        *(void *)(a1 + 8) = v9;
      }
      uint64_t v67 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v67;
      uint64_t v68 = (uint64_t *)(a2 + 32);
      unint64_t v69 = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      if (v69 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 32) = *(_OWORD *)v68;
      }
      else
      {
        uint64_t v77 = *v68;
        sub_10025ADCC(*v68, v69);
        *(void *)(a1 + 32) = v77;
        *(void *)(a1 + 40) = v69;
      }
      uint64_t v78 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v78;
      uint64_t v79 = (uint64_t *)(a2 + 64);
      unint64_t v80 = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      if (v80 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v79;
      }
      else
      {
        uint64_t v81 = *v79;
        sub_10025ADCC(*v79, v80);
        *(void *)(a1 + 64) = v81;
        *(void *)(a1 + 72) = v80;
      }
      uint64_t v82 = (uint64_t *)(a2 + 80);
      unint64_t v83 = *(void *)(a2 + 88);
      if (v83 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v82;
      }
      else
      {
        uint64_t v84 = *v82;
        sub_10025ADCC(*v82, *(void *)(a2 + 88));
        *(void *)(a1 + 80) = v84;
        *(void *)(a1 + 88) = v83;
      }
      uint64_t v85 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v85;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      uint64_t v86 = *(void *)(a2 + 128);
      uint64_t v87 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v86;
      *(void *)(a1 + 136) = v87;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_75;
    case 4u:
      uint64_t v10 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        uint64_t v12 = sub_10000A844((uint64_t *)&unk_10096DFB0);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, a2, v10);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      uint64_t v88 = (int *)_s14descr1008C9AB9V10AskRequestVMa();
      uint64_t v89 = v88[5];
      uint64_t v90 = (void *)(a1 + v89);
      uint64_t v91 = (const void *)(a2 + v89);
      uint64_t v92 = type metadata accessor for SFAirDrop.TransferType();
      uint64_t v93 = *(void *)(v92 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        uint64_t v94 = sub_10000A844(&qword_10096DFA8);
        memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v93 + 16))(v90, v91, v92);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
      }
      uint64_t v131 = v88[6];
      uint64_t v132 = a1 + v131;
      uint64_t v133 = (uint64_t *)(a2 + v131);
      unint64_t v134 = v133[1];
      if (v134 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
      }
      else
      {
        uint64_t v135 = *v133;
        sub_10025ADCC(*v133, v134);
        *(void *)uint64_t v132 = v135;
        *(void *)(v132 + 8) = v134;
      }
      uint64_t v136 = v88[7];
      unint64_t v137 = (void *)(a1 + v136);
      uint64_t v138 = (void *)(a2 + v136);
      uint64_t v139 = v138[1];
      *unint64_t v137 = *v138;
      v137[1] = v139;
      uint64_t v140 = v88[8];
      uint64_t v141 = (void *)(a1 + v140);
      uint64_t v142 = (void *)(a2 + v140);
      __dstb = (void *)v142[1];
      *uint64_t v141 = *v142;
      v141[1] = __dstb;
      uint64_t v143 = v88[9];
      unint64_t v144 = (void *)(a1 + v143);
      CFStringRef v145 = (void *)(a2 + v143);
      uint64_t v146 = v145[1];
      *unint64_t v144 = *v145;
      v144[1] = v146;
      uint64_t v147 = v88[10];
      char v148 = (void *)(a1 + v147);
      uint64_t v149 = (void *)(a2 + v147);
      uint64_t v150 = v149[1];
      *char v148 = *v149;
      v148[1] = v150;
      *(void *)(a1 + v88[11]) = *(void *)(a2 + v88[11]);
      *(void *)(a1 + v88[12]) = *(void *)(a2 + v88[12]);
      uint64_t v151 = v88[13];
      uint64_t v152 = (void *)(a1 + v151);
      uint64_t v153 = (void *)(a2 + v151);
      uint64_t v154 = v153[1];
      void *v152 = *v153;
      v152[1] = v154;
      uint64_t v155 = v88[14];
      uint64_t v178 = a1 + v155;
      BOOL v156 = (uint64_t *)(a2 + v155);
      unint64_t v157 = *(void *)(a2 + v155 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v157 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v178 = *(_OWORD *)v156;
      }
      else
      {
        uint64_t v158 = *v156;
        sub_10025ADCC(*v156, v157);
        *(void *)uint64_t v178 = v158;
        *(void *)(v178 + 8) = v157;
      }
      uint64_t v159 = v88[15];
      uint64_t v160 = a1 + v159;
      uint64_t v161 = (uint64_t *)(a2 + v159);
      unint64_t v162 = v161[1];
      if (v162 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v160 = *(_OWORD *)v161;
      }
      else
      {
        uint64_t v163 = *v161;
        sub_10025ADCC(*v161, v161[1]);
        *(void *)uint64_t v160 = v163;
        *(void *)(v160 + 8) = v162;
      }
      *(unsigned char *)(a1 + v88[16]) = *(unsigned char *)(a2 + v88[16]);
      uint64_t v164 = v88[17];
      uint64_t v165 = a1 + v164;
      uint64_t v166 = (uint64_t *)(a2 + v164);
      unint64_t v167 = v166[1];
      if (v167 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
      }
      else
      {
        uint64_t v168 = *v166;
        sub_10025ADCC(*v166, v166[1]);
        *(void *)uint64_t v165 = v168;
        *(void *)(v165 + 8) = v167;
      }
      goto LABEL_75;
    case 5u:
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v13;
      uint64_t v14 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v14;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v15 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v15;
      uint64_t v16 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v16;
      uint64_t v17 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v17;
      uint64_t v18 = (uint64_t *)(a2 + 88);
      unint64_t v19 = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 88) = *(_OWORD *)v18;
      }
      else
      {
        uint64_t v70 = *v18;
        sub_10025ADCC(*v18, v19);
        *(void *)(a1 + 88) = v70;
        *(void *)(a1 + 96) = v19;
      }
      goto LABEL_75;
    case 6u:
      uint64_t v20 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(a2, 1, v20))
      {
        uint64_t v22 = sub_10000A844((uint64_t *)&unk_10096DFB0);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a1, a2, v20);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(a1, 0, 1, v20);
      }
      uint64_t v95 = (int *)_s14descr1008C92C9V13UploadRequestVMa();
      *(void *)(a1 + v95[5]) = *(void *)(a2 + v95[5]);
      uint64_t v96 = v95[6];
      uint64_t v97 = (void *)(a1 + v96);
      uint64_t v98 = (void *)(a2 + v96);
      uint64_t v99 = v98[1];
      *uint64_t v97 = *v98;
      v97[1] = v99;
      uint64_t v100 = v95[7];
      uint64_t v101 = a1 + v100;
      uint64_t v102 = (_OWORD *)(a2 + v100);
      unint64_t v103 = *(void *)(a2 + v100 + 8);
      swift_bridgeObjectRetain();
      if (v103 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v101 = *v102;
      }
      else
      {
        uint64_t v104 = *(void *)v102;
        sub_10025ADCC(v104, v103);
        *(void *)uint64_t v101 = v104;
        *(void *)(v101 + 8) = v103;
      }
      *(unsigned char *)(a1 + v95[8]) = *(unsigned char *)(a2 + v95[8]);
      uint64_t v105 = v95[9];
      unint64_t v106 = (void *)(a1 + v105);
      uint64_t v107 = (void *)(a2 + v105);
      uint64_t v108 = v107[1];
      *unint64_t v106 = *v107;
      v106[1] = v108;
      uint64_t v109 = v95[10];
      char v110 = (void *)(a1 + v109);
      uint64_t v111 = (void *)(a2 + v109);
      uint64_t v112 = v111[1];
      *char v110 = *v111;
      v110[1] = v112;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_75;
    case 7u:
    case 0xBu:
    case 0xDu:
      uint64_t v63 = *(void *)a2;
      unint64_t v64 = *(void *)(a2 + 8);
      sub_10025ADCC(v63, v64);
      *(void *)a1 = v63;
      *(void *)(a1 + 8) = v64;
      goto LABEL_75;
    case 8u:
      uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
      uint64_t v24 = (int *)_s14descr1008C9A51V15ExchangeRequestVMa(0);
      uint64_t v25 = v24[5];
      uint64_t v26 = (void *)(a1 + v25);
      unint64_t v27 = (void *)(a2 + v25);
      uint64_t v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = v24[6];
      uint64_t v30 = (void *)(a1 + v29);
      uint64_t v31 = (void *)(a2 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = v24[7];
      __dst = (void *)(a1 + v33);
      uint64_t v34 = (const void *)(a2 + v33);
      uint64_t v35 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
      uint64_t v36 = *(void *)(v35 - 8);
      unint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = sub_10000A844(&qword_1009797D0);
        memcpy(__dst, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(__dst, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
      }
      uint64_t v113 = v24[8];
      uint64_t v114 = a1 + v113;
      uint64_t v115 = (uint64_t *)(a2 + v113);
      unint64_t v116 = v115[1];
      if (v116 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
      }
      else
      {
        uint64_t v117 = *v115;
        sub_10025ADCC(*v115, v115[1]);
        *(void *)uint64_t v114 = v117;
        *(void *)(v114 + 8) = v116;
      }
      uint64_t v118 = v24[9];
      uint64_t v119 = a1 + v118;
      uint64_t v120 = a2 + v118;
      if (!*(void *)(a2 + v118 + 72)) {
        goto LABEL_72;
      }
      uint64_t v121 = *(void *)(v120 + 8);
      *(void *)uint64_t v119 = *(void *)v120;
      *(void *)(v119 + 8) = v121;
      uint64_t v122 = (_OWORD *)(v120 + 16);
      unint64_t v123 = *(void *)(v120 + 24);
      swift_bridgeObjectRetain();
      if (v123 >> 60 != 15) {
        goto LABEL_73;
      }
      *(_OWORD *)(v119 + 16) = *v122;
      goto LABEL_74;
    case 9u:
      uint64_t v39 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
      double v40 = (int *)_s14descr1008C9A51V16ExchangeResponseVMa(0);
      uint64_t v41 = v40[5];
      uint64_t v42 = (void *)(a1 + v41);
      uint64_t v43 = (void *)(a2 + v41);
      uint64_t v44 = v43[1];
      *uint64_t v42 = *v43;
      v42[1] = v44;
      uint64_t v45 = v40[6];
      int v46 = (void *)(a1 + v45);
      uint64_t v47 = (void *)(a2 + v45);
      uint64_t v48 = v47[1];
      *int v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = v40[7];
      __dsta = (void *)(a1 + v49);
      uint64_t v50 = (const void *)(a2 + v49);
      uint64_t v51 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
      uint64_t v52 = *(void *)(v51 - 8);
      double v53 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v53(v50, 1, v51))
      {
        uint64_t v54 = sub_10000A844(&qword_1009797D0);
        memcpy(__dsta, v50, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v52 + 16))(__dsta, v50, v51);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(__dsta, 0, 1, v51);
      }
      uint64_t v124 = v40[8];
      uint64_t v125 = a1 + v124;
      unint64_t v126 = (uint64_t *)(a2 + v124);
      unint64_t v127 = v126[1];
      if (v127 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
      }
      else
      {
        uint64_t v128 = *v126;
        sub_10025ADCC(*v126, v126[1]);
        *(void *)uint64_t v125 = v128;
        *(void *)(v125 + 8) = v127;
      }
      uint64_t v129 = v40[9];
      uint64_t v119 = a1 + v129;
      uint64_t v120 = a2 + v129;
      if (*(void *)(a2 + v129 + 72))
      {
        uint64_t v130 = *(void *)(v120 + 8);
        *(void *)uint64_t v119 = *(void *)v120;
        *(void *)(v119 + 8) = v130;
        uint64_t v122 = (_OWORD *)(v120 + 16);
        unint64_t v123 = *(void *)(v120 + 24);
        swift_bridgeObjectRetain();
        if (v123 >> 60 == 15)
        {
          *(_OWORD *)(v119 + 16) = *v122;
        }
        else
        {
LABEL_73:
          uint64_t v171 = *(void *)v122;
          sub_10025ADCC(v171, v123);
          *(void *)(v119 + 16) = v171;
          *(void *)(v119 + 24) = v123;
        }
LABEL_74:
        uint64_t v172 = *(void *)(v120 + 32);
        unint64_t v173 = *(void *)(v120 + 40);
        sub_10025ADCC(v172, v173);
        *(void *)(v119 + 32) = v172;
        *(void *)(v119 + 40) = v173;
        uint64_t v174 = *(void *)(v120 + 48);
        unint64_t v175 = *(void *)(v120 + 56);
        sub_10025ADCC(v174, v175);
        *(void *)(v119 + 48) = v174;
        *(void *)(v119 + 56) = v175;
        uint64_t v176 = *(void *)(v120 + 72);
        *(void *)(v119 + 64) = *(void *)(v120 + 64);
        *(void *)(v119 + 72) = v176;
        *(void *)(v119 + 80) = *(void *)(v120 + 80);
        swift_bridgeObjectRetain();
      }
      else
      {
LABEL_72:
        long long v169 = *(_OWORD *)(v120 + 48);
        *(_OWORD *)(v119 + 32) = *(_OWORD *)(v120 + 32);
        *(_OWORD *)(v119 + 48) = v169;
        *(_OWORD *)(v119 + 64) = *(_OWORD *)(v120 + 64);
        *(void *)(v119 + 80) = *(void *)(v120 + 80);
        long long v170 = *(_OWORD *)(v120 + 16);
        *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
        *(_OWORD *)(v119 + 16) = v170;
      }
LABEL_75:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xAu:
      uint64_t v55 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v55;
      uint64_t v56 = (_OWORD *)(a2 + 16);
      unint64_t v57 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      if (v57 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 16) = *v56;
      }
      else
      {
        uint64_t v71 = *(void *)v56;
        sub_10025ADCC(v71, v57);
        *(void *)(a1 + 16) = v71;
        *(void *)(a1 + 24) = v57;
      }
      uint64_t v72 = *(void *)(a2 + 32);
      unint64_t v73 = *(void *)(a2 + 40);
      sub_10025ADCC(v72, v73);
      *(void *)(a1 + 32) = v72;
      *(void *)(a1 + 40) = v73;
      uint64_t v74 = *(void *)(a2 + 48);
      unint64_t v75 = *(void *)(a2 + 56);
      sub_10025ADCC(v74, v75);
      *(void *)(a1 + 48) = v74;
      *(void *)(a1 + 56) = v75;
      uint64_t v76 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v76;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      goto LABEL_75;
    case 0xCu:
      uint64_t v58 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(a1, a2, v58);
      uint64_t v59 = *(int *)(_s14descr1008C9841V12ErrorRequestVMa() + 20);
      uint64_t v60 = a1 + v59;
      uint64_t v61 = a2 + v59;
      uint64_t v62 = type metadata accessor for CodableError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v60, v61, v62);
      goto LABEL_75;
    default:
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

uint64_t sub_10057270C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100579204(a1, (uint64_t (*)(void))type metadata accessor for SDAirDropMessage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = _s12HelloRequestVMa();
        *(_DWORD *)(a1 + *(int *)(v7 + 20)) = *(_DWORD *)(a2 + *(int *)(v7 + 20));
        *(unsigned char *)(a1 + *(int *)(v7 + 24)) = *(unsigned char *)(a2 + *(int *)(v7 + 24));
        goto LABEL_76;
      case 2u:
        unint64_t v8 = *(void *)(a2 + 8);
        if (v8 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v55 = *(void *)a2;
          sub_10025ADCC(v55, v8);
          *(void *)a1 = v55;
          *(void *)(a1 + 8) = v8;
        }
        goto LABEL_76;
      case 3u:
        unint64_t v9 = *(void *)(a2 + 8);
        if (v9 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v56 = *(void *)a2;
          sub_10025ADCC(*(void *)a2, *(void *)(a2 + 8));
          *(void *)a1 = v56;
          *(void *)(a1 + 8) = v9;
        }
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        unint64_t v57 = (uint64_t *)(a2 + 32);
        unint64_t v58 = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        if (v58 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 32) = *(_OWORD *)v57;
        }
        else
        {
          uint64_t v65 = *v57;
          sub_10025ADCC(*v57, v58);
          *(void *)(a1 + 32) = v65;
          *(void *)(a1 + 40) = v58;
        }
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        uint64_t v66 = (uint64_t *)(a2 + 64);
        unint64_t v67 = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        if (v67 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v66;
        }
        else
        {
          uint64_t v68 = *v66;
          sub_10025ADCC(*v66, v67);
          *(void *)(a1 + 64) = v68;
          *(void *)(a1 + 72) = v67;
        }
        unint64_t v69 = (uint64_t *)(a2 + 80);
        unint64_t v70 = *(void *)(a2 + 88);
        if (v70 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 80) = *(_OWORD *)v69;
        }
        else
        {
          uint64_t v71 = *v69;
          sub_10025ADCC(*v69, *(void *)(a2 + 88));
          *(void *)(a1 + 80) = v71;
          *(void *)(a1 + 88) = v70;
        }
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        uint64_t v72 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v72;
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_76;
      case 4u:
        uint64_t v10 = type metadata accessor for SFAirDrop.TransferIdentifier();
        uint64_t v11 = *(void *)(v10 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
        {
          uint64_t v12 = sub_10000A844((uint64_t *)&unk_10096DFB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, a2, v10);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
        }
        unint64_t v73 = (int *)_s14descr1008C9AB9V10AskRequestVMa();
        uint64_t v74 = v73[5];
        unint64_t v75 = (void *)(a1 + v74);
        uint64_t v76 = (const void *)(a2 + v74);
        uint64_t v77 = type metadata accessor for SFAirDrop.TransferType();
        uint64_t v78 = *(void *)(v77 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          uint64_t v79 = sub_10000A844(&qword_10096DFA8);
          memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v78 + 16))(v75, v76, v77);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        uint64_t v111 = v73[6];
        uint64_t v112 = a1 + v111;
        uint64_t v113 = (uint64_t *)(a2 + v111);
        unint64_t v114 = v113[1];
        if (v114 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
        }
        else
        {
          uint64_t v115 = *v113;
          sub_10025ADCC(*v113, v114);
          *(void *)uint64_t v112 = v115;
          *(void *)(v112 + 8) = v114;
        }
        uint64_t v116 = v73[7];
        uint64_t v117 = (void *)(a1 + v116);
        uint64_t v118 = (void *)(a2 + v116);
        *uint64_t v117 = *v118;
        v117[1] = v118[1];
        uint64_t v119 = v73[8];
        uint64_t v120 = (void *)(a1 + v119);
        uint64_t v121 = (void *)(a2 + v119);
        *uint64_t v120 = *v121;
        v120[1] = v121[1];
        uint64_t v122 = v73[9];
        unint64_t v123 = (void *)(a1 + v122);
        uint64_t v124 = (void *)(a2 + v122);
        void *v123 = *v124;
        v123[1] = v124[1];
        uint64_t v125 = v73[10];
        unint64_t v126 = (void *)(a1 + v125);
        unint64_t v127 = (void *)(a2 + v125);
        *unint64_t v126 = *v127;
        v126[1] = v127[1];
        *(void *)(a1 + v73[11]) = *(void *)(a2 + v73[11]);
        *(void *)(a1 + v73[12]) = *(void *)(a2 + v73[12]);
        uint64_t v128 = v73[13];
        uint64_t v129 = (void *)(a1 + v128);
        uint64_t v130 = (void *)(a2 + v128);
        *uint64_t v129 = *v130;
        v129[1] = v130[1];
        uint64_t v131 = v73[14];
        uint64_t v155 = a1 + v131;
        uint64_t v132 = (uint64_t *)(a2 + v131);
        unint64_t v133 = *(void *)(a2 + v131 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v133 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v155 = *(_OWORD *)v132;
        }
        else
        {
          uint64_t v134 = *v132;
          sub_10025ADCC(*v132, v133);
          *(void *)uint64_t v155 = v134;
          *(void *)(v155 + 8) = v133;
        }
        uint64_t v135 = v73[15];
        uint64_t v136 = a1 + v135;
        unint64_t v137 = (uint64_t *)(a2 + v135);
        unint64_t v138 = v137[1];
        if (v138 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
        }
        else
        {
          uint64_t v139 = *v137;
          sub_10025ADCC(*v137, v137[1]);
          *(void *)uint64_t v136 = v139;
          *(void *)(v136 + 8) = v138;
        }
        *(unsigned char *)(a1 + v73[16]) = *(unsigned char *)(a2 + v73[16]);
        uint64_t v140 = v73[17];
        uint64_t v141 = a1 + v140;
        uint64_t v142 = (uint64_t *)(a2 + v140);
        unint64_t v143 = v142[1];
        if (v143 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v141 = *(_OWORD *)v142;
        }
        else
        {
          uint64_t v144 = *v142;
          sub_10025ADCC(*v142, v142[1]);
          *(void *)uint64_t v141 = v144;
          *(void *)(v141 + 8) = v143;
        }
        goto LABEL_76;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        uint64_t v13 = (uint64_t *)(a2 + 88);
        unint64_t v14 = *(void *)(a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v14 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 88) = *(_OWORD *)v13;
        }
        else
        {
          uint64_t v59 = *v13;
          sub_10025ADCC(*v13, v14);
          *(void *)(a1 + 88) = v59;
          *(void *)(a1 + 96) = v14;
        }
        goto LABEL_76;
      case 6u:
        uint64_t v15 = type metadata accessor for SFAirDrop.TransferIdentifier();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15))
        {
          uint64_t v17 = sub_10000A844((uint64_t *)&unk_10096DFB0);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a1, a2, v15);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a1, 0, 1, v15);
        }
        unint64_t v80 = (int *)_s14descr1008C92C9V13UploadRequestVMa();
        *(void *)(a1 + v80[5]) = *(void *)(a2 + v80[5]);
        uint64_t v81 = v80[6];
        uint64_t v82 = (void *)(a1 + v81);
        unint64_t v83 = (void *)(a2 + v81);
        *uint64_t v82 = *v83;
        v82[1] = v83[1];
        uint64_t v84 = v80[7];
        uint64_t v85 = a1 + v84;
        uint64_t v86 = (_OWORD *)(a2 + v84);
        unint64_t v87 = *(void *)(a2 + v84 + 8);
        swift_bridgeObjectRetain();
        if (v87 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v85 = *v86;
        }
        else
        {
          uint64_t v88 = *(void *)v86;
          sub_10025ADCC(v88, v87);
          *(void *)uint64_t v85 = v88;
          *(void *)(v85 + 8) = v87;
        }
        *(unsigned char *)(a1 + v80[8]) = *(unsigned char *)(a2 + v80[8]);
        uint64_t v89 = v80[9];
        uint64_t v90 = (void *)(a1 + v89);
        uint64_t v91 = (void *)(a2 + v89);
        *uint64_t v90 = *v91;
        v90[1] = v91[1];
        uint64_t v92 = v80[10];
        uint64_t v93 = (void *)(a1 + v92);
        uint64_t v94 = (void *)(a2 + v92);
        *uint64_t v93 = *v94;
        v93[1] = v94[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_76;
      case 7u:
      case 0xBu:
      case 0xDu:
        uint64_t v53 = *(void *)a2;
        unint64_t v54 = *(void *)(a2 + 8);
        sub_10025ADCC(v53, v54);
        *(void *)a1 = v53;
        *(void *)(a1 + 8) = v54;
        goto LABEL_76;
      case 8u:
        uint64_t v18 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        unint64_t v19 = (int *)_s14descr1008C9A51V15ExchangeRequestVMa(0);
        uint64_t v20 = v19[5];
        uint64_t v21 = (void *)(a1 + v20);
        uint64_t v22 = (void *)(a2 + v20);
        void *v21 = *v22;
        v21[1] = v22[1];
        uint64_t v23 = v19[6];
        uint64_t v24 = (void *)(a1 + v23);
        uint64_t v25 = (void *)(a2 + v23);
        *uint64_t v24 = *v25;
        v24[1] = v25[1];
        uint64_t v26 = v19[7];
        __dst = (void *)(a1 + v26);
        unint64_t v27 = (const void *)(a2 + v26);
        uint64_t v28 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
        uint64_t v29 = *(void *)(v28 - 8);
        uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30(v27, 1, v28))
        {
          uint64_t v31 = sub_10000A844(&qword_1009797D0);
          memcpy(__dst, v27, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(__dst, v27, v28);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
        }
        uint64_t v95 = v19[8];
        uint64_t v96 = a1 + v95;
        uint64_t v97 = (uint64_t *)(a2 + v95);
        unint64_t v98 = v97[1];
        if (v98 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
        }
        else
        {
          uint64_t v99 = *v97;
          sub_10025ADCC(*v97, v97[1]);
          *(void *)uint64_t v96 = v99;
          *(void *)(v96 + 8) = v98;
        }
        uint64_t v100 = v19[9];
        uint64_t v101 = a1 + v100;
        uint64_t v102 = a2 + v100;
        if (!*(void *)(a2 + v100 + 72)) {
          goto LABEL_73;
        }
        *(void *)uint64_t v101 = *(void *)v102;
        *(void *)(v101 + 8) = *(void *)(v102 + 8);
        unint64_t v103 = (_OWORD *)(v102 + 16);
        unint64_t v104 = *(void *)(v102 + 24);
        swift_bridgeObjectRetain();
        if (v104 >> 60 != 15) {
          goto LABEL_74;
        }
        *(_OWORD *)(v101 + 16) = *v103;
        goto LABEL_75;
      case 9u:
        uint64_t v32 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
        uint64_t v33 = (int *)_s14descr1008C9A51V16ExchangeResponseVMa(0);
        uint64_t v34 = v33[5];
        uint64_t v35 = (void *)(a1 + v34);
        uint64_t v36 = (void *)(a2 + v34);
        *uint64_t v35 = *v36;
        v35[1] = v36[1];
        uint64_t v37 = v33[6];
        uint64_t v38 = (void *)(a1 + v37);
        uint64_t v39 = (void *)(a2 + v37);
        void *v38 = *v39;
        v38[1] = v39[1];
        uint64_t v40 = v33[7];
        __dsta = (void *)(a1 + v40);
        uint64_t v41 = (const void *)(a2 + v40);
        uint64_t v42 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
        uint64_t v43 = *(void *)(v42 - 8);
        uint64_t v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v44(v41, 1, v42))
        {
          uint64_t v45 = sub_10000A844(&qword_1009797D0);
          memcpy(__dsta, v41, *(void *)(*(void *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v43 + 16))(__dsta, v41, v42);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(__dsta, 0, 1, v42);
        }
        uint64_t v105 = v33[8];
        uint64_t v106 = a1 + v105;
        uint64_t v107 = (uint64_t *)(a2 + v105);
        unint64_t v108 = v107[1];
        if (v108 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
        }
        else
        {
          uint64_t v109 = *v107;
          sub_10025ADCC(*v107, v107[1]);
          *(void *)uint64_t v106 = v109;
          *(void *)(v106 + 8) = v108;
        }
        uint64_t v110 = v33[9];
        uint64_t v101 = a1 + v110;
        uint64_t v102 = a2 + v110;
        if (*(void *)(a2 + v110 + 72))
        {
          *(void *)uint64_t v101 = *(void *)v102;
          *(void *)(v101 + 8) = *(void *)(v102 + 8);
          unint64_t v103 = (_OWORD *)(v102 + 16);
          unint64_t v104 = *(void *)(v102 + 24);
          swift_bridgeObjectRetain();
          if (v104 >> 60 == 15)
          {
            *(_OWORD *)(v101 + 16) = *v103;
          }
          else
          {
LABEL_74:
            uint64_t v149 = *(void *)v103;
            sub_10025ADCC(v149, v104);
            *(void *)(v101 + 16) = v149;
            *(void *)(v101 + 24) = v104;
          }
LABEL_75:
          uint64_t v150 = *(void *)(v102 + 32);
          unint64_t v151 = *(void *)(v102 + 40);
          sub_10025ADCC(v150, v151);
          *(void *)(v101 + 32) = v150;
          *(void *)(v101 + 40) = v151;
          uint64_t v152 = *(void *)(v102 + 48);
          unint64_t v153 = *(void *)(v102 + 56);
          sub_10025ADCC(v152, v153);
          *(void *)(v101 + 48) = v152;
          *(void *)(v101 + 56) = v153;
          *(void *)(v101 + 64) = *(void *)(v102 + 64);
          *(void *)(v101 + 72) = *(void *)(v102 + 72);
          *(void *)(v101 + 80) = *(void *)(v102 + 80);
          swift_bridgeObjectRetain();
        }
        else
        {
LABEL_73:
          long long v145 = *(_OWORD *)(v102 + 16);
          *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
          *(_OWORD *)(v101 + 16) = v145;
          long long v146 = *(_OWORD *)(v102 + 32);
          long long v147 = *(_OWORD *)(v102 + 48);
          long long v148 = *(_OWORD *)(v102 + 64);
          *(void *)(v101 + 80) = *(void *)(v102 + 80);
          *(_OWORD *)(v101 + 48) = v147;
          *(_OWORD *)(v101 + 64) = v148;
          *(_OWORD *)(v101 + 32) = v146;
        }
LABEL_76:
        swift_storeEnumTagMultiPayload();
        break;
      case 0xAu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        int v46 = (_OWORD *)(a2 + 16);
        unint64_t v47 = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        if (v47 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 16) = *v46;
        }
        else
        {
          uint64_t v60 = *(void *)v46;
          sub_10025ADCC(v60, v47);
          *(void *)(a1 + 16) = v60;
          *(void *)(a1 + 24) = v47;
        }
        uint64_t v61 = *(void *)(a2 + 32);
        unint64_t v62 = *(void *)(a2 + 40);
        sub_10025ADCC(v61, v62);
        *(void *)(a1 + 32) = v61;
        *(void *)(a1 + 40) = v62;
        uint64_t v63 = *(void *)(a2 + 48);
        unint64_t v64 = *(void *)(a2 + 56);
        sub_10025ADCC(v63, v64);
        *(void *)(a1 + 48) = v63;
        *(void *)(a1 + 56) = v64;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        swift_bridgeObjectRetain();
        goto LABEL_76;
      case 0xCu:
        uint64_t v48 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(a1, a2, v48);
        uint64_t v49 = *(int *)(_s14descr1008C9841V12ErrorRequestVMa() + 20);
        uint64_t v50 = a1 + v49;
        uint64_t v51 = a2 + v49;
        uint64_t v52 = type metadata accessor for CodableError();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
        goto LABEL_76;
      default:
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t type metadata accessor for SDAirDropMessage()
{
  uint64_t result = qword_100979848;
  if (!qword_100979848) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned char *sub_100573754(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = _s12HelloRequestVMa();
      *(_DWORD *)&a1[*(int *)(v7 + 20)] = *(_DWORD *)&a2[*(int *)(v7 + 20)];
      a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
      goto LABEL_23;
    case 4u:
      uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = sub_10000A844((uint64_t *)&unk_10096DFB0);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(a1, a2, v8);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      uint64_t v29 = (int *)_s14descr1008C9AB9V10AskRequestVMa();
      uint64_t v30 = v29[5];
      uint64_t v31 = &a1[v30];
      uint64_t v32 = &a2[v30];
      uint64_t v33 = type metadata accessor for SFAirDrop.TransferType();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = sub_10000A844(&qword_10096DFA8);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      *(_OWORD *)&a1[v29[6]] = *(_OWORD *)&a2[v29[6]];
      *(_OWORD *)&a1[v29[7]] = *(_OWORD *)&a2[v29[7]];
      *(_OWORD *)&a1[v29[8]] = *(_OWORD *)&a2[v29[8]];
      *(_OWORD *)&a1[v29[9]] = *(_OWORD *)&a2[v29[9]];
      *(_OWORD *)&a1[v29[10]] = *(_OWORD *)&a2[v29[10]];
      *(void *)&a1[v29[11]] = *(void *)&a2[v29[11]];
      *(void *)&a1[v29[12]] = *(void *)&a2[v29[12]];
      *(_OWORD *)&a1[v29[13]] = *(_OWORD *)&a2[v29[13]];
      *(_OWORD *)&a1[v29[14]] = *(_OWORD *)&a2[v29[14]];
      *(_OWORD *)&a1[v29[15]] = *(_OWORD *)&a2[v29[15]];
      a1[v29[16]] = a2[v29[16]];
      *(_OWORD *)&a1[v29[17]] = *(_OWORD *)&a2[v29[17]];
      goto LABEL_23;
    case 6u:
      uint64_t v11 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        uint64_t v13 = sub_10000A844((uint64_t *)&unk_10096DFB0);
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(a1, a2, v11);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      uint64_t v36 = (int *)_s14descr1008C92C9V13UploadRequestVMa();
      *(void *)&a1[v36[5]] = *(void *)&a2[v36[5]];
      *(_OWORD *)&a1[v36[6]] = *(_OWORD *)&a2[v36[6]];
      *(_OWORD *)&a1[v36[7]] = *(_OWORD *)&a2[v36[7]];
      a1[v36[8]] = a2[v36[8]];
      *(_OWORD *)&a1[v36[9]] = *(_OWORD *)&a2[v36[9]];
      *(_OWORD *)&a1[v36[10]] = *(_OWORD *)&a2[v36[10]];
      goto LABEL_23;
    case 8u:
      uint64_t v14 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      uint64_t v15 = (int *)_s14descr1008C9A51V15ExchangeRequestVMa(0);
      *(_OWORD *)&a1[v15[5]] = *(_OWORD *)&a2[v15[5]];
      *(_OWORD *)&a1[v15[6]] = *(_OWORD *)&a2[v15[6]];
      uint64_t v16 = v15[7];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
        goto LABEL_9;
      }
      goto LABEL_18;
    case 9u:
      uint64_t v22 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(a1, a2, v22);
      uint64_t v15 = (int *)_s14descr1008C9A51V16ExchangeResponseVMa(0);
      *(_OWORD *)&a1[v15[5]] = *(_OWORD *)&a2[v15[5]];
      *(_OWORD *)&a1[v15[6]] = *(_OWORD *)&a2[v15[6]];
      uint64_t v23 = v15[7];
      uint64_t v17 = &a1[v23];
      uint64_t v18 = &a2[v23];
      uint64_t v19 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
LABEL_9:
        uint64_t v21 = sub_10000A844(&qword_1009797D0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
LABEL_18:
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)&a1[v15[8]] = *(_OWORD *)&a2[v15[8]];
      uint64_t v37 = v15[9];
      uint64_t v38 = &a1[v37];
      uint64_t v39 = &a2[v37];
      long long v40 = *((_OWORD *)v39 + 1);
      *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
      *((_OWORD *)v38 + 1) = v40;
      *((void *)v38 + 10) = *((void *)v39 + 10);
      long long v41 = *((_OWORD *)v39 + 4);
      long long v42 = *((_OWORD *)v39 + 2);
      *((_OWORD *)v38 + 3) = *((_OWORD *)v39 + 3);
      *((_OWORD *)v38 + 4) = v41;
      *((_OWORD *)v38 + 2) = v42;
      goto LABEL_23;
    case 0xCu:
      uint64_t v24 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
      uint64_t v25 = *(int *)(_s14descr1008C9841V12ErrorRequestVMa() + 20);
      uint64_t v26 = &a1[v25];
      unint64_t v27 = &a2[v25];
      uint64_t v28 = type metadata accessor for CodableError();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
LABEL_23:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

unsigned char *sub_100573FD4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100579204((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for SDAirDropMessage);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = _s12HelloRequestVMa();
        *(_DWORD *)&a1[*(int *)(v7 + 20)] = *(_DWORD *)&a2[*(int *)(v7 + 20)];
        a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
        goto LABEL_24;
      case 4u:
        uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
        uint64_t v9 = *(void *)(v8 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
        {
          uint64_t v10 = sub_10000A844((uint64_t *)&unk_10096DFB0);
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(a1, a2, v8);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
        }
        uint64_t v29 = (int *)_s14descr1008C9AB9V10AskRequestVMa();
        uint64_t v30 = v29[5];
        uint64_t v31 = &a1[v30];
        uint64_t v32 = &a2[v30];
        uint64_t v33 = type metadata accessor for SFAirDrop.TransferType();
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          uint64_t v35 = sub_10000A844(&qword_10096DFA8);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
        }
        *(_OWORD *)&a1[v29[6]] = *(_OWORD *)&a2[v29[6]];
        *(_OWORD *)&a1[v29[7]] = *(_OWORD *)&a2[v29[7]];
        *(_OWORD *)&a1[v29[8]] = *(_OWORD *)&a2[v29[8]];
        *(_OWORD *)&a1[v29[9]] = *(_OWORD *)&a2[v29[9]];
        *(_OWORD *)&a1[v29[10]] = *(_OWORD *)&a2[v29[10]];
        *(void *)&a1[v29[11]] = *(void *)&a2[v29[11]];
        *(void *)&a1[v29[12]] = *(void *)&a2[v29[12]];
        *(_OWORD *)&a1[v29[13]] = *(_OWORD *)&a2[v29[13]];
        *(_OWORD *)&a1[v29[14]] = *(_OWORD *)&a2[v29[14]];
        *(_OWORD *)&a1[v29[15]] = *(_OWORD *)&a2[v29[15]];
        a1[v29[16]] = a2[v29[16]];
        *(_OWORD *)&a1[v29[17]] = *(_OWORD *)&a2[v29[17]];
        goto LABEL_24;
      case 6u:
        uint64_t v11 = type metadata accessor for SFAirDrop.TransferIdentifier();
        uint64_t v12 = *(void *)(v11 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
        {
          uint64_t v13 = sub_10000A844((uint64_t *)&unk_10096DFB0);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(a1, a2, v11);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
        }
        uint64_t v36 = (int *)_s14descr1008C92C9V13UploadRequestVMa();
        *(void *)&a1[v36[5]] = *(void *)&a2[v36[5]];
        *(_OWORD *)&a1[v36[6]] = *(_OWORD *)&a2[v36[6]];
        *(_OWORD *)&a1[v36[7]] = *(_OWORD *)&a2[v36[7]];
        a1[v36[8]] = a2[v36[8]];
        *(_OWORD *)&a1[v36[9]] = *(_OWORD *)&a2[v36[9]];
        *(_OWORD *)&a1[v36[10]] = *(_OWORD *)&a2[v36[10]];
        goto LABEL_24;
      case 8u:
        uint64_t v14 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        uint64_t v15 = (int *)_s14descr1008C9A51V15ExchangeRequestVMa(0);
        *(_OWORD *)&a1[v15[5]] = *(_OWORD *)&a2[v15[5]];
        *(_OWORD *)&a1[v15[6]] = *(_OWORD *)&a2[v15[6]];
        uint64_t v16 = v15[7];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
        uint64_t v20 = *(void *)(v19 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
          goto LABEL_10;
        }
        goto LABEL_19;
      case 9u:
        uint64_t v22 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(a1, a2, v22);
        uint64_t v15 = (int *)_s14descr1008C9A51V16ExchangeResponseVMa(0);
        *(_OWORD *)&a1[v15[5]] = *(_OWORD *)&a2[v15[5]];
        *(_OWORD *)&a1[v15[6]] = *(_OWORD *)&a2[v15[6]];
        uint64_t v23 = v15[7];
        uint64_t v17 = &a1[v23];
        uint64_t v18 = &a2[v23];
        uint64_t v19 = type metadata accessor for SFAirDrop.ContactInfo.Handle();
        uint64_t v20 = *(void *)(v19 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
        {
LABEL_10:
          uint64_t v21 = sub_10000A844(&qword_1009797D0);
          memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
LABEL_19:
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
        }
        *(_OWORD *)&a1[v15[8]] = *(_OWORD *)&a2[v15[8]];
        uint64_t v37 = v15[9];
        uint64_t v38 = &a1[v37];
        uint64_t v39 = &a2[v37];
        long long v40 = *((_OWORD *)v39 + 1);
        *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
        *((_OWORD *)v38 + 1) = v40;
        *((void *)v38 + 10) = *((void *)v39 + 10);
        long long v41 = *((_OWORD *)v39 + 4);
        long long v42 = *((_OWORD *)v39 + 2);
        *((_OWORD *)v38 + 3) = *((_OWORD *)v39 + 3);
        *((_OWORD *)v38 + 4) = v41;
        *((_OWORD *)v38 + 2) = v42;
        goto LABEL_24;
      case 0xCu:
        uint64_t v24 = type metadata accessor for SFAirDrop.TransferIdentifier();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(a1, a2, v24);
        uint64_t v25 = *(int *)(_s14descr1008C9841V12ErrorRequestVMa() + 20);
        uint64_t v26 = &a1[v25];
        unint64_t v27 = &a2[v25];
        uint64_t v28 = type metadata accessor for CodableError();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
LABEL_24:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100574878()
{
  uint64_t result = _s12HelloRequestVMa();
  if (v1 <= 0x3F)
  {
    uint64_t result = _s14descr1008C9AB9V10AskRequestVMa();
    if (v2 <= 0x3F)
    {
      uint64_t result = _s14descr1008C92C9V13UploadRequestVMa();
      if (v3 <= 0x3F)
      {
        uint64_t result = _s14descr1008C9A51V15ExchangeRequestVMa(319);
        if (v4 <= 0x3F)
        {
          uint64_t result = _s14descr1008C9A51V16ExchangeResponseVMa(319);
          if (v5 <= 0x3F)
          {
            uint64_t result = _s14descr1008C9841V12ErrorRequestVMa();
            if (v6 <= 0x3F)
            {
              swift_initEnumMetadataMultiPayload();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessages()
{
  return &type metadata for SDAirDropMessages;
}

unint64_t sub_100574A74()
{
  uint64_t v1 = v0;
  uint64_t v2 = _s14descr1008C9841V12ErrorRequestVMa();
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = _s14descr1008C9A51V16ExchangeResponseVMa(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s14descr1008C92C9V13UploadRequestVMa();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = _s14descr1008C9AB9V10AskRequestVMa();
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = _s12HelloRequestVMa();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SDAirDropMessage();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10039D78C(v1, (uint64_t)v22);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      int v29 = *(_DWORD *)v22;
      *(void *)&long long v51 = 0;
      *((void *)&v51 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      *(void *)&long long v51 = 0x6572204F4C4C4548;
      *((void *)&v51 + 1) = 0xEF2065736E6F7073;
      LODWORD(v49) = v29;
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      goto LABEL_13;
    case 2u:
      uint64_t v31 = *(void *)v22;
      unint64_t v32 = *((void *)v22 + 1);
      *(void *)&long long v51 = 0;
      *((void *)&v51 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      v33._object = (void *)0x80000001007BCDD0;
      v33._countAndFlagsBits = 0xD000000000000025;
      String.append(_:)(v33);
      uint64_t v49 = v31;
      unint64_t v50 = v32;
      sub_1002CE57C();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      sub_100250CB0(v31, v32);
      return v51;
    case 3u:
      long long v34 = *((_OWORD *)v22 + 7);
      long long v57 = *((_OWORD *)v22 + 6);
      long long v58 = v34;
      long long v59 = *((_OWORD *)v22 + 8);
      long long v35 = *((_OWORD *)v22 + 3);
      long long v53 = *((_OWORD *)v22 + 2);
      long long v54 = v35;
      long long v36 = *((_OWORD *)v22 + 5);
      long long v55 = *((_OWORD *)v22 + 4);
      long long v56 = v36;
      long long v37 = *((_OWORD *)v22 + 1);
      long long v51 = *(_OWORD *)v22;
      long long v52 = v37;
      unint64_t v25 = sub_10041611C();
      sub_10039C76C((uint64_t *)&v51);
      return v25;
    case 4u:
      sub_100579948((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa);
      unint64_t v25 = sub_1005CFC40();
      unint64_t v27 = (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa;
      uint64_t v28 = (uint64_t)v16;
      goto LABEL_16;
    case 5u:
      long long v38 = *((_OWORD *)v22 + 5);
      long long v55 = *((_OWORD *)v22 + 4);
      long long v56 = v38;
      *(void *)&long long v57 = *((void *)v22 + 12);
      long long v39 = *((_OWORD *)v22 + 1);
      long long v51 = *(_OWORD *)v22;
      long long v52 = v39;
      long long v40 = *((_OWORD *)v22 + 3);
      long long v53 = *((_OWORD *)v22 + 2);
      long long v54 = v40;
      unint64_t v25 = sub_1005D058C();
      sub_1002FB0E0((uint64_t)&v51);
      return v25;
    case 6u:
      sub_100579948((uint64_t)v22, (uint64_t)v13, (uint64_t (*)(void))_s14descr1008C92C9V13UploadRequestVMa);
      unint64_t v25 = sub_1004646B8();
      unint64_t v27 = (uint64_t (*)(void))_s14descr1008C92C9V13UploadRequestVMa;
      uint64_t v28 = (uint64_t)v13;
      goto LABEL_16;
    case 7u:
    case 0xBu:
    case 0xDu:
      uint64_t v23 = *(void *)v22;
      unint64_t v24 = *((void *)v22 + 1);
      unint64_t v25 = Data.description.getter();
      sub_100250CC4(v23, v24);
      return v25;
    case 8u:
      sub_100579948((uint64_t)v22, (uint64_t)v10, _s14descr1008C9A51V15ExchangeRequestVMa);
      unint64_t v25 = sub_1005AA7A0();
      unint64_t v27 = _s14descr1008C9A51V15ExchangeRequestVMa;
      uint64_t v28 = (uint64_t)v10;
      goto LABEL_16;
    case 9u:
      sub_100579948((uint64_t)v22, (uint64_t)v7, _s14descr1008C9A51V16ExchangeResponseVMa);
      unint64_t v25 = sub_1005AAC00();
      unint64_t v27 = _s14descr1008C9A51V16ExchangeResponseVMa;
      uint64_t v28 = (uint64_t)v7;
      goto LABEL_16;
    case 0xAu:
      uint64_t v41 = *((void *)v22 + 2);
      unint64_t v42 = *((void *)v22 + 3);
      uint64_t v43 = *((void *)v22 + 4);
      unint64_t v45 = *((void *)v22 + 5);
      uint64_t v44 = *((void *)v22 + 6);
      unint64_t v46 = *((void *)v22 + 7);
      *(void *)&long long v51 = 0;
      *((void *)&v51 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      v47._countAndFlagsBits = 0xD00000000000002ALL;
      v47._object = (void *)0x80000001007B9640;
      String.append(_:)(v47);
      uint64_t v49 = v41;
      unint64_t v50 = v42;
      sub_1002CE57C();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      swift_bridgeObjectRelease();
      sub_100250CB0(v41, v42);
      sub_100250CC4(v43, v45);
      sub_100250CC4(v44, v46);
LABEL_13:
      swift_bridgeObjectRelease();
      return v51;
    case 0xCu:
      sub_100579948((uint64_t)v22, (uint64_t)v4, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
      unint64_t v25 = sub_100553450();
      unint64_t v27 = (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa;
      uint64_t v28 = (uint64_t)v4;
      goto LABEL_16;
    default:
      sub_100579948((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))_s12HelloRequestVMa);
      *(void *)&long long v51 = 0;
      *((void *)&v51 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v51, "HELLO request ");
      HIBYTE(v51) = -18;
      LODWORD(v49) = *(_DWORD *)&v19[*(int *)(v17 + 20)];
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      unint64_t v25 = v51;
      unint64_t v27 = (uint64_t (*)(void))_s12HelloRequestVMa;
      uint64_t v28 = (uint64_t)v19;
LABEL_16:
      sub_100579204(v28, v27);
      return v25;
  }
}

uint64_t sub_10057517C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_1009797B8);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_1009797B8);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100575244(char a1)
{
  uint64_t result = 0x7165526F6C6C6568;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x526F6C6C6568;
      goto LABEL_15;
    case 2:
      uint64_t result = 0x7265766F63736964;
      break;
    case 3:
    case 9:
      uint64_t result = 0xD000000000000010;
      break;
    case 4:
      uint64_t result = 0x65757165526B7361;
      break;
    case 5:
      uint64_t result = 0x6F707365526B7361;
      break;
    case 6:
    case 7:
      uint64_t result = 0x655264616F6C7075;
      break;
    case 8:
      uint64_t result = 0x65676E6168637865;
      break;
    case 10:
      uint64_t result = 0xD000000000000014;
      break;
    case 11:
      uint64_t result = 0xD000000000000015;
      break;
    case 12:
      uint64_t result = 0x716552726F727265;
      break;
    case 13:
      uint64_t v3 = 0x52726F727265;
LABEL_15:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7365000000000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_100575418(void *a1)
{
  uint64_t v2 = sub_10000A844(&qword_1009799C8);
  uint64_t v158 = *(void *)(v2 - 8);
  uint64_t v159 = v2;
  __chkstk_darwin(v2);
  BOOL v156 = (char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v157 = sub_10000A844(&qword_1009799D0);
  unint64_t v155 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v154 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = _s14descr1008C9841V12ErrorRequestVMa();
  __chkstk_darwin(v152);
  uint64_t v153 = (uint64_t)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_10000A844(&qword_1009799D8);
  uint64_t v149 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  long long v147 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_10000A844(&qword_1009799E0);
  uint64_t v148 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  long long v146 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844(&qword_1009799E8);
  uint64_t v144 = *(void *)(v8 - 8);
  uint64_t v145 = v8;
  __chkstk_darwin(v8);
  unint64_t v143 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = _s14descr1008C9A51V16ExchangeResponseVMa(0);
  __chkstk_darwin(v140);
  uint64_t v142 = (uint64_t)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_10000A844(&qword_1009799F0);
  uint64_t v139 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  unint64_t v138 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
  __chkstk_darwin(v136);
  uint64_t v137 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A844(&qword_1009799F8);
  uint64_t v134 = *(void *)(v13 - 8);
  uint64_t v135 = v13;
  __chkstk_darwin(v13);
  uint64_t v132 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_10000A844(&qword_100979A00);
  uint64_t v131 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v130 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = _s14descr1008C92C9V13UploadRequestVMa();
  __chkstk_darwin(v125);
  uint64_t v129 = (uint64_t)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000A844(&qword_100979A08);
  uint64_t v127 = *(void *)(v17 - 8);
  uint64_t v128 = v17;
  __chkstk_darwin(v17);
  unint64_t v126 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000A844(&qword_100979A10);
  uint64_t v123 = *(void *)(v19 - 8);
  uint64_t v124 = v19;
  __chkstk_darwin(v19);
  uint64_t v122 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = _s14descr1008C9AB9V10AskRequestVMa();
  __chkstk_darwin(v117);
  uint64_t v120 = (uint64_t)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_10000A844(&qword_100979A18);
  uint64_t v119 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v118 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000A844(&qword_100979A20);
  uint64_t v115 = *(void *)(v23 - 8);
  uint64_t v116 = v23;
  __chkstk_darwin(v23);
  unint64_t v114 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000A844(&qword_100979A28);
  uint64_t v112 = *(void *)(v25 - 8);
  uint64_t v113 = v25;
  __chkstk_darwin(v25);
  uint64_t v110 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000A844(&qword_100979A30);
  uint64_t v109 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  unint64_t v108 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = _s12HelloRequestVMa();
  __chkstk_darwin(v28);
  Swift::String v30 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for SDAirDropMessage();
  __chkstk_darwin(v31);
  Swift::String v33 = (char *)&v108 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = sub_10000A844(&qword_100979A38);
  uint64_t v160 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  long long v35 = (char *)&v108 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10026BB6C(a1, a1[3]);
  sub_1005798A0();
  unint64_t v162 = v35;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10039D78C(v161, (uint64_t)v33);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      int v41 = *(_DWORD *)v33;
      char v42 = v33[4];
      LOBYTE(v172) = 1;
      sub_100579E9C();
      uint64_t v43 = v110;
      uint64_t v44 = v181;
      unint64_t v45 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LODWORD(v172) = v41;
      BYTE4(v172) = v42;
      sub_10057A0E8();
      uint64_t v46 = v113;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v112 + 8))(v43, v46);
      return (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v45, v44);
    case 2u:
      uint64_t v47 = *(void *)v33;
      unint64_t v48 = *((void *)v33 + 1);
      LOBYTE(v172) = 2;
      sub_100579DF4();
      uint64_t v49 = v114;
      uint64_t v50 = v181;
      long long v51 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v172 = v47;
      *((void *)&v172 + 1) = v48;
      sub_10057A094();
      uint64_t v52 = v116;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v49, v52);
      (*(void (**)(char *, uint64_t))(v160 + 8))(v51, v50);
      uint64_t v53 = v47;
      unint64_t v54 = v48;
      return (uint64_t *)sub_100250CB0(v53, v54);
    case 3u:
      long long v55 = *((_OWORD *)v33 + 7);
      long long v178 = *((_OWORD *)v33 + 6);
      long long v179 = v55;
      long long v180 = *((_OWORD *)v33 + 8);
      long long v56 = *((_OWORD *)v33 + 3);
      long long v174 = *((_OWORD *)v33 + 2);
      long long v175 = v56;
      long long v57 = *((_OWORD *)v33 + 5);
      long long v176 = *((_OWORD *)v33 + 4);
      long long v177 = v57;
      long long v58 = *((_OWORD *)v33 + 1);
      long long v172 = *(_OWORD *)v33;
      long long v173 = v58;
      LOBYTE(v163) = 3;
      sub_100579D4C();
      long long v59 = v118;
      uint64_t v60 = v181;
      uint64_t v61 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v169 = v178;
      long long v170 = v179;
      long long v171 = v180;
      long long v165 = v174;
      long long v166 = v175;
      long long v167 = v176;
      long long v168 = v177;
      long long v163 = v172;
      long long v164 = v173;
      sub_10057A040();
      uint64_t v62 = v121;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v119 + 8))(v59, v62);
      (*(void (**)(char *, uint64_t))(v160 + 8))(v61, v60);
      return sub_10039C76C((uint64_t *)&v172);
    case 4u:
      uint64_t v63 = v120;
      sub_100579948((uint64_t)v33, v120, (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa);
      LOBYTE(v172) = 4;
      sub_100579CF8();
      unint64_t v64 = v122;
      uint64_t v65 = v181;
      uint64_t v66 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10057A13C(&qword_100979A70, (void (*)(uint64_t))_s14descr1008C9AB9V10AskRequestVMa);
      uint64_t v67 = v124;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v64, v67);
      uint64_t v68 = (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa;
      goto LABEL_16;
    case 5u:
      uint64_t v69 = *((void *)v33 + 1);
      unint64_t v161 = *(void *)v33;
      unint64_t v70 = *((void *)v33 + 3);
      uint64_t v159 = *((void *)v33 + 2);
      LODWORD(v156) = v33[32];
      unint64_t v71 = *((void *)v33 + 5);
      uint64_t v72 = *((void *)v33 + 6);
      unint64_t v73 = *((void *)v33 + 8);
      uint64_t v154 = (char *)*((void *)v33 + 7);
      unint64_t v155 = v71;
      uint64_t v74 = *((void *)v33 + 9);
      uint64_t v152 = *((void *)v33 + 10);
      uint64_t v153 = v74;
      unint64_t v75 = *((void *)v33 + 12);
      uint64_t v151 = *((void *)v33 + 11);
      LOBYTE(v172) = 5;
      sub_100579C50();
      uint64_t v76 = v126;
      uint64_t v77 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v172 = v161;
      *((void *)&v172 + 1) = v69;
      unint64_t v157 = v70;
      uint64_t v158 = v69;
      *(void *)&long long v173 = v159;
      *((void *)&v173 + 1) = v70;
      LOBYTE(v174) = (_BYTE)v156;
      uint64_t v78 = v151;
      *((void *)&v174 + 1) = v155;
      *(void *)&long long v175 = v72;
      uint64_t v159 = v72;
      *((void *)&v175 + 1) = v154;
      *(void *)&long long v176 = v73;
      unint64_t v161 = v73;
      *((void *)&v176 + 1) = v153;
      *(void *)&long long v177 = v152;
      *((void *)&v177 + 1) = v151;
      *(void *)&long long v178 = v75;
      sub_100579FEC();
      uint64_t v79 = v128;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v127 + 8))(v76, v79);
      (*(void (**)(char *, uint64_t))(v160 + 8))(v77, v181);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v53 = v78;
      unint64_t v54 = v75;
      return (uint64_t *)sub_100250CB0(v53, v54);
    case 6u:
      uint64_t v63 = v129;
      sub_100579948((uint64_t)v33, v129, (uint64_t (*)(void))_s14descr1008C92C9V13UploadRequestVMa);
      LOBYTE(v172) = 6;
      sub_100579BFC();
      unint64_t v80 = v130;
      uint64_t v65 = v181;
      uint64_t v66 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10057A13C(&qword_100979A60, (void (*)(uint64_t))_s14descr1008C92C9V13UploadRequestVMa);
      uint64_t v81 = v133;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v131 + 8))(v80, v81);
      uint64_t v68 = (uint64_t (*)(void))_s14descr1008C92C9V13UploadRequestVMa;
      goto LABEL_16;
    case 7u:
      uint64_t v82 = *(void *)v33;
      unint64_t v83 = *((void *)v33 + 1);
      LOBYTE(v172) = 7;
      sub_100579BA8();
      uint64_t v84 = v132;
      uint64_t v85 = v181;
      uint64_t v86 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v172 = v82;
      *((void *)&v172 + 1) = v83;
      sub_1002CC290();
      uint64_t v87 = v135;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v88 = v134;
      goto LABEL_18;
    case 8u:
      uint64_t v63 = v137;
      sub_100579948((uint64_t)v33, v137, _s14descr1008C9A51V15ExchangeRequestVMa);
      LOBYTE(v172) = 8;
      sub_100579B54();
      uint64_t v89 = v138;
      uint64_t v65 = v181;
      uint64_t v66 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10057A13C(&qword_100979A58, (void (*)(uint64_t))_s14descr1008C9A51V15ExchangeRequestVMa);
      uint64_t v90 = v141;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v139 + 8))(v89, v90);
      uint64_t v68 = _s14descr1008C9A51V15ExchangeRequestVMa;
      goto LABEL_16;
    case 9u:
      uint64_t v63 = v142;
      sub_100579948((uint64_t)v33, v142, _s14descr1008C9A51V16ExchangeResponseVMa);
      LOBYTE(v172) = 9;
      sub_100579B00();
      uint64_t v91 = v143;
      uint64_t v65 = v181;
      uint64_t v66 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10057A13C(&qword_100979A50, (void (*)(uint64_t))_s14descr1008C9A51V16ExchangeResponseVMa);
      uint64_t v92 = v145;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v144 + 8))(v91, v92);
      uint64_t v68 = _s14descr1008C9A51V16ExchangeResponseVMa;
      goto LABEL_16;
    case 0xAu:
      uint64_t v93 = (char *)*((void *)v33 + 1);
      unint64_t v161 = *(void *)v33;
      uint64_t v94 = *((void *)v33 + 2);
      unint64_t v95 = *((void *)v33 + 3);
      uint64_t v97 = *((void *)v33 + 4);
      unint64_t v96 = *((void *)v33 + 5);
      uint64_t v98 = *((void *)v33 + 6);
      unint64_t v99 = *((void *)v33 + 7);
      uint64_t v154 = (char *)*((void *)v33 + 8);
      unint64_t v155 = v96;
      uint64_t v100 = *((void *)v33 + 9);
      uint64_t v101 = *((void *)v33 + 10);
      uint64_t v152 = v98;
      uint64_t v153 = v100;
      LOBYTE(v172) = 10;
      sub_100579A58();
      uint64_t v102 = v146;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v172 = v161;
      *((void *)&v172 + 1) = v93;
      BOOL v156 = v93;
      unint64_t v157 = v95;
      uint64_t v158 = v94;
      uint64_t v159 = v97;
      *(void *)&long long v173 = v94;
      *((void *)&v173 + 1) = v95;
      *(void *)&long long v174 = v97;
      unint64_t v103 = v155;
      *((void *)&v174 + 1) = v155;
      *(void *)&long long v175 = v152;
      uint64_t v104 = v152;
      unint64_t v161 = v99;
      *((void *)&v175 + 1) = v99;
      *(void *)&long long v176 = v154;
      *((void *)&v176 + 1) = v153;
      *(void *)&long long v177 = v101;
      sub_100579F98();
      uint64_t v105 = v150;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v148 + 8))(v102, v105);
      (*(void (**)(char *, uint64_t))(v160 + 8))(v162, v181);
      swift_bridgeObjectRelease();
      sub_100250CB0(v158, v157);
      sub_100250CC4(v159, v103);
      sub_100250CC4(v104, v161);
      return (uint64_t *)swift_bridgeObjectRelease();
    case 0xBu:
      uint64_t v82 = *(void *)v33;
      unint64_t v83 = *((void *)v33 + 1);
      LOBYTE(v172) = 11;
      sub_100579A04();
      uint64_t v84 = v147;
      uint64_t v85 = v181;
      uint64_t v86 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v172 = v82;
      *((void *)&v172 + 1) = v83;
      sub_1002CC290();
      uint64_t v87 = v151;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v88 = v149;
      goto LABEL_18;
    case 0xCu:
      uint64_t v63 = v153;
      sub_100579948((uint64_t)v33, v153, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
      LOBYTE(v172) = 12;
      sub_1005799B0();
      uint64_t v106 = v154;
      uint64_t v65 = v181;
      uint64_t v66 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10057A13C(&qword_100979A40, (void (*)(uint64_t))_s14descr1008C9841V12ErrorRequestVMa);
      unint64_t v107 = v157;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, unint64_t))(v155 + 8))(v106, v107);
      uint64_t v68 = (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa;
LABEL_16:
      sub_100579204(v63, v68);
      uint64_t result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v66, v65);
      break;
    case 0xDu:
      uint64_t v82 = *(void *)v33;
      unint64_t v83 = *((void *)v33 + 1);
      LOBYTE(v172) = 13;
      sub_1005798F4();
      uint64_t v84 = v156;
      uint64_t v85 = v181;
      uint64_t v86 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      *(void *)&long long v172 = v82;
      *((void *)&v172 + 1) = v83;
      sub_1002CC290();
      uint64_t v87 = v159;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v88 = v158;
LABEL_18:
      (*(void (**)(char *, uint64_t))(v88 + 8))(v84, v87);
      (*(void (**)(char *, uint64_t))(v160 + 8))(v86, v85);
      uint64_t result = (uint64_t *)sub_100250CC4(v82, v83);
      break;
    default:
      sub_100579948((uint64_t)v33, (uint64_t)v30, (uint64_t (*)(void))_s12HelloRequestVMa);
      LOBYTE(v172) = 0;
      sub_100579F44();
      long long v36 = v108;
      uint64_t v37 = v181;
      long long v38 = v162;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10057A13C(&qword_100979A90, (void (*)(uint64_t))_s12HelloRequestVMa);
      uint64_t v39 = v111;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v36, v39);
      sub_100579204((uint64_t)v30, (uint64_t (*)(void))_s12HelloRequestVMa);
      uint64_t result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v38, v37);
      break;
  }
  return result;
}

uint64_t sub_100576ADC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v194 = a2;
  uint64_t v181 = sub_10000A844(&qword_100979880);
  uint64_t v163 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  uint64_t v193 = (char *)&v140 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = sub_10000A844(&qword_100979888);
  uint64_t v162 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  uint64_t v201 = (char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_10000A844(&qword_100979890);
  uint64_t v161 = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  double v192 = (char *)&v140 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = sub_10000A844(&qword_100979898);
  uint64_t v160 = *(void *)(v179 - 8);
  __chkstk_darwin(v179);
  unsigned int v191 = (char *)&v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = sub_10000A844(&qword_1009798A0);
  uint64_t v159 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v190 = (char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = sub_10000A844(&qword_1009798A8);
  uint64_t v151 = *(void *)(v177 - 8);
  __chkstk_darwin(v177);
  uint64_t v189 = (char *)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = sub_10000A844(&qword_1009798B0);
  uint64_t v158 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  Class v188 = (char *)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = sub_10000A844(&qword_1009798B8);
  uint64_t v157 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v187 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = sub_10000A844(&qword_1009798C0);
  uint64_t v156 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v186 = (char *)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = sub_10000A844(&qword_1009798C8);
  uint64_t v155 = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  uint64_t v185 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = sub_10000A844(&qword_1009798D0);
  uint64_t v154 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  Class v183 = (char *)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = sub_10000A844(&qword_1009798D8);
  uint64_t v153 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  uint64_t v200 = (char *)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = sub_10000A844(&qword_1009798E0);
  uint64_t v152 = *(void *)(v170 - 8);
  __chkstk_darwin(v170);
  uint64_t v184 = (char *)&v140 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = sub_10000A844(&qword_1009798E8);
  uint64_t v168 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  uint64_t v198 = (char *)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = sub_10000A844(&qword_1009798F0);
  uint64_t v195 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  uint64_t v209 = (char *)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = type metadata accessor for SDAirDropMessage();
  uint64_t v18 = __chkstk_darwin(v197);
  uint64_t v150 = (_OWORD *)((char *)&v140 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __chkstk_darwin(v18);
  long long v167 = (char *)&v140 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v148 = (_OWORD *)((char *)&v140 - v23);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v149 = (_OWORD *)((char *)&v140 - v25);
  uint64_t v26 = __chkstk_darwin(v24);
  long long v166 = (char *)&v140 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  long long v165 = (char *)&v140 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  long long v147 = (_OWORD *)((char *)&v140 - v31);
  uint64_t v32 = __chkstk_darwin(v30);
  long long v164 = (char *)&v140 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v196 = (char *)&v140 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  long long v38 = (char *)&v140 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  int v41 = (char *)&v140 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v44 = (char *)&v140 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  uint64_t v47 = (char *)&v140 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v140 - v49;
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v140 - v51;
  uint64_t v53 = a1[3];
  uint64_t v202 = a1;
  sub_10026BB6C(a1, v53);
  sub_1005798A0();
  uint64_t v54 = v203;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v54) {
    goto LABEL_30;
  }
  uint64_t v141 = v47;
  uint64_t v144 = v50;
  uint64_t v142 = v44;
  unint64_t v143 = v41;
  uint64_t v145 = v38;
  long long v55 = v196;
  long long v56 = v198;
  long long v57 = v200;
  long long v58 = v201;
  uint64_t v203 = 0;
  uint64_t v59 = v197;
  long long v146 = v52;
  uint64_t v60 = v199;
  uint64_t v61 = v209;
  uint64_t v62 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v62 + 16) != 1)
  {
    uint64_t v71 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v73 = v72;
    sub_10000A844(&qword_100978068);
    *unint64_t v73 = v59;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v71 - 8) + 104))(v73, enum case for DecodingError.typeMismatch(_:), v71);
    swift_willThrow();
LABEL_28:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v60);
LABEL_30:
    uint64_t v84 = (uint64_t)v202;
    return sub_10024D338(v84);
  }
  switch(*(unsigned char *)(v62 + 32))
  {
    case 1:
      LOBYTE(v204) = 1;
      sub_100579E9C();
      uint64_t v74 = v184;
      uint64_t v75 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v75) {
        goto LABEL_28;
      }
      sub_100579EF0();
      uint64_t v76 = v170;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v77 = v195;
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v152 + 8))(v74, v76);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v61, v60);
      char v127 = BYTE4(v204);
      uint64_t v128 = v141;
      *uint64_t v141 = v204;
      *((unsigned char *)v128 + 4) = v127;
      goto LABEL_42;
    case 2:
      LOBYTE(v204) = 2;
      sub_100579DF4();
      uint64_t v78 = v57;
      uint64_t v79 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v79) {
        goto LABEL_28;
      }
      sub_100579E48();
      uint64_t v80 = v171;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v81 = v195;
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v153 + 8))(v78, v80);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v61, v60);
      uint64_t v128 = v142;
      *uint64_t v142 = v204;
      goto LABEL_42;
    case 3:
      LOBYTE(v204) = 3;
      sub_100579D4C();
      uint64_t v82 = v183;
      uint64_t v83 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v83) {
        goto LABEL_12;
      }
      sub_100579DA0();
      uint64_t v118 = v172;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v119 = v195;
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v154 + 8))(v82, v118);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v119 + 8))(v61, v60);
      long long v136 = v207;
      uint64_t v128 = v143;
      *((_OWORD *)v143 + 6) = *(_OWORD *)&v206[64];
      v128[7] = v136;
      v128[8] = v208;
      long long v137 = *(_OWORD *)&v206[16];
      _OWORD v128[2] = *(_OWORD *)v206;
      v128[3] = v137;
      long long v138 = *(_OWORD *)&v206[48];
      v128[4] = *(_OWORD *)&v206[32];
      v128[5] = v138;
      long long v139 = v205;
      *uint64_t v128 = v204;
      v128[1] = v139;
      goto LABEL_42;
    case 4:
      LOBYTE(v204) = 4;
      sub_100579CF8();
      uint64_t v85 = v185;
      uint64_t v86 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v86)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v60);
        goto LABEL_30;
      }
      uint64_t v120 = v60;
      _s14descr1008C9AB9V10AskRequestVMa();
      sub_10057A13C(&qword_100979980, (void (*)(uint64_t))_s14descr1008C9AB9V10AskRequestVMa);
      uint64_t v93 = v145;
      uint64_t v121 = v173;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v155 + 8))(v85, v121);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v120);
LABEL_43:
      swift_storeEnumTagMultiPayload();
      uint64_t v135 = (uint64_t)v93;
      goto LABEL_44;
    case 5:
      LOBYTE(v204) = 5;
      sub_100579C50();
      uint64_t v87 = v186;
      uint64_t v88 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v88) {
        goto LABEL_28;
      }
      sub_100579CA4();
      uint64_t v89 = v174;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v156 + 8))(v87, v89);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v60);
      long long v129 = v205;
      char v130 = v206[0];
      *(_OWORD *)long long v55 = v204;
      *((_OWORD *)v55 + 1) = v129;
      v55[32] = v130;
      *(_OWORD *)(v55 + 40) = *(_OWORD *)&v206[8];
      *(_OWORD *)(v55 + 56) = *(_OWORD *)&v206[24];
      *(_OWORD *)(v55 + 72) = *(_OWORD *)&v206[40];
      *(_OWORD *)(v55 + 88) = *(_OWORD *)&v206[56];
      goto LABEL_41;
    case 6:
      LOBYTE(v204) = 6;
      sub_100579BFC();
      uint64_t v90 = v187;
      unint64_t v64 = v61;
      uint64_t v91 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v91) {
        goto LABEL_34;
      }
      uint64_t v92 = v60;
      _s14descr1008C92C9V13UploadRequestVMa();
      sub_10057A13C(&qword_100979960, (void (*)(uint64_t))_s14descr1008C92C9V13UploadRequestVMa);
      uint64_t v93 = v164;
      uint64_t v94 = v175;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v157 + 8))(v90, v94);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v92);
      goto LABEL_43;
    case 7:
      LOBYTE(v204) = 7;
      sub_100579BA8();
      unint64_t v95 = v188;
      uint64_t v96 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v96) {
        goto LABEL_28;
      }
      sub_1002CC1F4();
      uint64_t v97 = v176;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v98 = v195;
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v158 + 8))(v95, v97);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v98 + 8))(v61, v60);
      uint64_t v128 = v147;
      *long long v147 = v204;
      goto LABEL_42;
    case 8:
      LOBYTE(v204) = 8;
      sub_100579B54();
      unint64_t v99 = v189;
      unint64_t v64 = v61;
      uint64_t v100 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v100) {
        goto LABEL_34;
      }
      uint64_t v101 = v60;
      _s14descr1008C9A51V15ExchangeRequestVMa(0);
      sub_10057A13C(&qword_100979948, (void (*)(uint64_t))_s14descr1008C9A51V15ExchangeRequestVMa);
      uint64_t v93 = v165;
      uint64_t v102 = v177;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v151 + 8))(v99, v102);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v101);
      goto LABEL_43;
    case 9:
      LOBYTE(v204) = 9;
      sub_100579B00();
      unint64_t v103 = v190;
      unint64_t v64 = v61;
      uint64_t v104 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v104) {
        goto LABEL_34;
      }
      uint64_t v105 = v60;
      _s14descr1008C9A51V16ExchangeResponseVMa(0);
      sub_10057A13C(&qword_100979938, (void (*)(uint64_t))_s14descr1008C9A51V16ExchangeResponseVMa);
      uint64_t v93 = v166;
      uint64_t v106 = v178;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v159 + 8))(v103, v106);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v105);
      goto LABEL_43;
    case 0xA:
      LOBYTE(v204) = 10;
      sub_100579A58();
      unint64_t v107 = v191;
      uint64_t v108 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v108) {
        goto LABEL_28;
      }
      sub_100579AAC();
      uint64_t v109 = v179;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v110 = v195;
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v160 + 8))(v107, v109);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v61, v60);
      uint64_t v131 = *(void *)&v206[48];
      long long v132 = v205;
      uint64_t v128 = v149;
      *uint64_t v149 = v204;
      v128[1] = v132;
      long long v134 = *(_OWORD *)&v206[16];
      long long v133 = *(_OWORD *)&v206[32];
      _OWORD v128[2] = *(_OWORD *)v206;
      v128[3] = v134;
      v128[4] = v133;
      *((void *)v128 + 10) = v131;
      goto LABEL_42;
    case 0xB:
      LOBYTE(v204) = 11;
      sub_100579A04();
      uint64_t v111 = v192;
      uint64_t v112 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v112) {
        goto LABEL_28;
      }
      sub_1002CC1F4();
      uint64_t v122 = v180;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v123 = v195;
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v161 + 8))(v111, v122);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v61, v60);
      uint64_t v128 = v148;
      *uint64_t v148 = v204;
      goto LABEL_42;
    case 0xC:
      LOBYTE(v204) = 12;
      sub_1005799B0();
      unint64_t v64 = v61;
      uint64_t v114 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v114) {
        goto LABEL_34;
      }
      _s14descr1008C9841V12ErrorRequestVMa();
      sub_10057A13C(&qword_100979910, (void (*)(uint64_t))_s14descr1008C9841V12ErrorRequestVMa);
      long long v55 = v167;
      uint64_t v115 = v182;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v162 + 8))(v58, v115);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v60);
LABEL_41:
      swift_storeEnumTagMultiPayload();
      uint64_t v135 = (uint64_t)v55;
      goto LABEL_44;
    case 0xD:
      LOBYTE(v204) = 13;
      sub_1005798F4();
      uint64_t v116 = v193;
      uint64_t v117 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v117)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v60);
        uint64_t v84 = (uint64_t)v202;
        return sub_10024D338(v84);
      }
      sub_1002CC1F4();
      uint64_t v124 = v181;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v125 = v116;
      uint64_t v126 = v195;
      uint64_t v203 = 0;
      (*(void (**)(char *, uint64_t))(v163 + 8))(v125, v124);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v126 + 8))(v61, v60);
      uint64_t v128 = v150;
      _OWORD *v150 = v204;
LABEL_42:
      swift_storeEnumTagMultiPayload();
      uint64_t v135 = (uint64_t)v128;
LABEL_44:
      uint64_t v70 = (uint64_t)v146;
      sub_100579948(v135, (uint64_t)v146, (uint64_t (*)(void))type metadata accessor for SDAirDropMessage);
      uint64_t v69 = (uint64_t)v202;
      goto LABEL_45;
    default:
      LOBYTE(v204) = 0;
      sub_100579F44();
      uint64_t v63 = v56;
      unint64_t v64 = v61;
      uint64_t v65 = v203;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v65)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v195 + 8))(v64, v60);
        goto LABEL_30;
      }
      _s12HelloRequestVMa();
      uint64_t v66 = v60;
      sub_10057A13C(&qword_1009799C0, (void (*)(uint64_t))_s12HelloRequestVMa);
      uint64_t v67 = (uint64_t)v144;
      uint64_t v68 = v169;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v168 + 8))(v63, v68);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v61, v66);
      uint64_t v69 = (uint64_t)v202;
      uint64_t v203 = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v70 = (uint64_t)v146;
      sub_100579948(v67, (uint64_t)v146, (uint64_t (*)(void))type metadata accessor for SDAirDropMessage);
LABEL_45:
      sub_100579948(v70, v194, (uint64_t (*)(void))type metadata accessor for SDAirDropMessage);
      uint64_t result = sub_10024D338(v69);
      break;
  }
  return result;
}

uint64_t sub_100578924()
{
  return 0x74736575716572;
}

uint64_t sub_100578940(uint64_t a1)
{
  unint64_t v2 = sub_100579CF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10057897C(uint64_t a1)
{
  unint64_t v2 = sub_100579CF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005789B8()
{
  return 0x65736E6F70736572;
}

uint64_t sub_1005789D4(uint64_t a1)
{
  unint64_t v2 = sub_100579C50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578A10(uint64_t a1)
{
  unint64_t v2 = sub_100579C50();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578A4C()
{
  return sub_100575244(*v0);
}

uint64_t sub_100578A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10057B43C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100578A7C(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_100578A88(uint64_t a1)
{
  unint64_t v2 = sub_1005798A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578AC4(uint64_t a1)
{
  unint64_t v2 = sub_1005798A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578B00(uint64_t a1)
{
  unint64_t v2 = sub_100579DF4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578B3C(uint64_t a1)
{
  unint64_t v2 = sub_100579DF4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578B78(uint64_t a1)
{
  unint64_t v2 = sub_100579D4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578BB4(uint64_t a1)
{
  unint64_t v2 = sub_100579D4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578BF0(uint64_t a1)
{
  unint64_t v2 = sub_1005799B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578C2C(uint64_t a1)
{
  unint64_t v2 = sub_1005799B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578C68(uint64_t a1)
{
  unint64_t v2 = sub_1005798F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578CA4(uint64_t a1)
{
  unint64_t v2 = sub_1005798F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578CE0(uint64_t a1)
{
  unint64_t v2 = sub_100579B54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578D1C(uint64_t a1)
{
  unint64_t v2 = sub_100579B54();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578D58(uint64_t a1)
{
  unint64_t v2 = sub_100579B00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578D94(uint64_t a1)
{
  unint64_t v2 = sub_100579B00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578DD0(uint64_t a1)
{
  unint64_t v2 = sub_100579F44();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578E0C(uint64_t a1)
{
  unint64_t v2 = sub_100579F44();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578E48(uint64_t a1)
{
  unint64_t v2 = sub_100579E9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578E84(uint64_t a1)
{
  unint64_t v2 = sub_100579E9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578EC0(uint64_t a1)
{
  unint64_t v2 = sub_100579A58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578EFC(uint64_t a1)
{
  unint64_t v2 = sub_100579A58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578F38(uint64_t a1)
{
  unint64_t v2 = sub_100579A04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100578F74(uint64_t a1)
{
  unint64_t v2 = sub_100579A04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100578FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x74736575716572 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100579048(uint64_t a1)
{
  unint64_t v2 = sub_100579BFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100579084(uint64_t a1)
{
  unint64_t v2 = sub_100579BFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005790C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100579158(uint64_t a1)
{
  unint64_t v2 = sub_100579BA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100579194(uint64_t a1)
{
  unint64_t v2 = sub_100579BA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005791D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100576ADC(a1, a2);
}

uint64_t *sub_1005791E8(void *a1)
{
  return sub_100575418(a1);
}

uint64_t sub_100579204(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100579264@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = _s14descr1008C9841V12ErrorRequestVMa();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = _s14descr1008C92C9V13UploadRequestVMa();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = _s14descr1008C9AB9V10AskRequestVMa();
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = _s12HelloRequestVMa();
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SDAirDropMessage();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10039D78C(v2, (uint64_t)v21);
  HIDWORD(v22) = swift_getEnumCaseMultiPayload();
  LODWORD(v22) = HIDWORD(v22);
  switch((v22 >> 1))
  {
    case 0u:
      sub_100579948((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))_s12HelloRequestVMa);
      uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v24 = *(void *)(v23 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v18, v23);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(a1, 0, 1, v23);
    case 2u:
      sub_100579948((uint64_t)v21, (uint64_t)v15, (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa);
      sub_100579838((uint64_t)v15, a1);
      uint64_t v30 = _s14descr1008C9AB9V10AskRequestVMa;
      uint64_t v31 = (uint64_t)v15;
      return sub_100579204(v31, (uint64_t (*)(void))v30);
    case 3u:
      sub_100579948((uint64_t)v21, (uint64_t)v12, (uint64_t (*)(void))_s14descr1008C92C9V13UploadRequestVMa);
      sub_100579838((uint64_t)v12, a1);
      uint64_t v30 = _s14descr1008C92C9V13UploadRequestVMa;
      uint64_t v31 = (uint64_t)v12;
      return sub_100579204(v31, (uint64_t (*)(void))v30);
    case 4u:
      sub_100579948((uint64_t)v21, (uint64_t)v9, _s14descr1008C9A51V15ExchangeRequestVMa);
      uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v24 = *(void *)(v23 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(a1, v9, v23);
      sub_100579204((uint64_t)v9, _s14descr1008C9A51V15ExchangeRequestVMa);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(a1, 0, 1, v23);
    case 6u:
      sub_100579948((uint64_t)v21, (uint64_t)v6, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
      uint64_t v33 = type metadata accessor for SFAirDrop.TransferIdentifier();
      uint64_t v34 = *(void *)(v33 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(a1, v6, v33);
      sub_100579204((uint64_t)v6, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(a1, 0, 1, v33);
    default:
      if (qword_100969FC0 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_10000B47C(v25, (uint64_t)qword_1009797B8);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unexpected request type for transferID", v28, 2u);
        swift_slowDealloc();
      }

      uint64_t v29 = type metadata accessor for SFAirDrop.TransferIdentifier();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(a1, 1, 1, v29);
      uint64_t v30 = type metadata accessor for SDAirDropMessage;
      uint64_t v31 = (uint64_t)v21;
      return sub_100579204(v31, (uint64_t (*)(void))v30);
  }
}

uint64_t sub_100579838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096DFB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1005798A0()
{
  unint64_t result = qword_1009798F8;
  if (!qword_1009798F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009798F8);
  }
  return result;
}

unint64_t sub_1005798F4()
{
  unint64_t result = qword_100979900;
  if (!qword_100979900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979900);
  }
  return result;
}

uint64_t sub_100579948(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1005799B0()
{
  unint64_t result = qword_100979908;
  if (!qword_100979908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979908);
  }
  return result;
}

unint64_t sub_100579A04()
{
  unint64_t result = qword_100979918;
  if (!qword_100979918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979918);
  }
  return result;
}

unint64_t sub_100579A58()
{
  unint64_t result = qword_100979920;
  if (!qword_100979920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979920);
  }
  return result;
}

unint64_t sub_100579AAC()
{
  unint64_t result = qword_100979928;
  if (!qword_100979928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979928);
  }
  return result;
}

unint64_t sub_100579B00()
{
  unint64_t result = qword_100979930;
  if (!qword_100979930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979930);
  }
  return result;
}

unint64_t sub_100579B54()
{
  unint64_t result = qword_100979940;
  if (!qword_100979940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979940);
  }
  return result;
}

unint64_t sub_100579BA8()
{
  unint64_t result = qword_100979950;
  if (!qword_100979950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979950);
  }
  return result;
}

unint64_t sub_100579BFC()
{
  unint64_t result = qword_100979958;
  if (!qword_100979958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979958);
  }
  return result;
}

unint64_t sub_100579C50()
{
  unint64_t result = qword_100979968;
  if (!qword_100979968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979968);
  }
  return result;
}

unint64_t sub_100579CA4()
{
  unint64_t result = qword_100979970;
  if (!qword_100979970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979970);
  }
  return result;
}

unint64_t sub_100579CF8()
{
  unint64_t result = qword_100979978;
  if (!qword_100979978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979978);
  }
  return result;
}

unint64_t sub_100579D4C()
{
  unint64_t result = qword_100979988;
  if (!qword_100979988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979988);
  }
  return result;
}

unint64_t sub_100579DA0()
{
  unint64_t result = qword_100979990;
  if (!qword_100979990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979990);
  }
  return result;
}

unint64_t sub_100579DF4()
{
  unint64_t result = qword_100979998;
  if (!qword_100979998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979998);
  }
  return result;
}

unint64_t sub_100579E48()
{
  unint64_t result = qword_1009799A0;
  if (!qword_1009799A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009799A0);
  }
  return result;
}

unint64_t sub_100579E9C()
{
  unint64_t result = qword_1009799A8;
  if (!qword_1009799A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009799A8);
  }
  return result;
}

unint64_t sub_100579EF0()
{
  unint64_t result = qword_1009799B0;
  if (!qword_1009799B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009799B0);
  }
  return result;
}

unint64_t sub_100579F44()
{
  unint64_t result = qword_1009799B8;
  if (!qword_1009799B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009799B8);
  }
  return result;
}

unint64_t sub_100579F98()
{
  unint64_t result = qword_100979A48;
  if (!qword_100979A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979A48);
  }
  return result;
}

unint64_t sub_100579FEC()
{
  unint64_t result = qword_100979A68;
  if (!qword_100979A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979A68);
  }
  return result;
}

unint64_t sub_10057A040()
{
  unint64_t result = qword_100979A78;
  if (!qword_100979A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979A78);
  }
  return result;
}

unint64_t sub_10057A094()
{
  unint64_t result = qword_100979A80;
  if (!qword_100979A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979A80);
  }
  return result;
}

unint64_t sub_10057A0E8()
{
  unint64_t result = qword_100979A88;
  if (!qword_100979A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979A88);
  }
  return result;
}

uint64_t sub_10057A13C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SDAirDropMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SDAirDropMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10057A2E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.CodingKeys()
{
  return &type metadata for SDAirDropMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.HelloRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.HelloRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.HelloResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.HelloResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.DiscoverRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.DiscoverResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.AskRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.AskRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.AskResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.AskResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.UploadRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.UploadRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.UploadResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.UploadResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ExchangeRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ExchangeResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.IdentityShareRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.IdentityShareResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ErrorRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.ErrorRequestCodingKeys;
}

unsigned char *_s16DaemoniOSLibrary16SDAirDropMessageO22HelloRequestCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10057A48CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ErrorResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.ErrorResponseCodingKeys;
}

unint64_t sub_10057A4C8()
{
  unint64_t result = qword_100979A98;
  if (!qword_100979A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979A98);
  }
  return result;
}

unint64_t sub_10057A520()
{
  unint64_t result = qword_100979AA0;
  if (!qword_100979AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AA0);
  }
  return result;
}

unint64_t sub_10057A578()
{
  unint64_t result = qword_100979AA8;
  if (!qword_100979AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AA8);
  }
  return result;
}

unint64_t sub_10057A5D0()
{
  unint64_t result = qword_100979AB0;
  if (!qword_100979AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AB0);
  }
  return result;
}

unint64_t sub_10057A628()
{
  unint64_t result = qword_100979AB8;
  if (!qword_100979AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AB8);
  }
  return result;
}

unint64_t sub_10057A680()
{
  unint64_t result = qword_100979AC0;
  if (!qword_100979AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AC0);
  }
  return result;
}

unint64_t sub_10057A6D8()
{
  unint64_t result = qword_100979AC8;
  if (!qword_100979AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AC8);
  }
  return result;
}

unint64_t sub_10057A730()
{
  unint64_t result = qword_100979AD0;
  if (!qword_100979AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AD0);
  }
  return result;
}

unint64_t sub_10057A788()
{
  unint64_t result = qword_100979AD8;
  if (!qword_100979AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AD8);
  }
  return result;
}

unint64_t sub_10057A7E0()
{
  unint64_t result = qword_100979AE0;
  if (!qword_100979AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AE0);
  }
  return result;
}

unint64_t sub_10057A838()
{
  unint64_t result = qword_100979AE8;
  if (!qword_100979AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AE8);
  }
  return result;
}

unint64_t sub_10057A890()
{
  unint64_t result = qword_100979AF0;
  if (!qword_100979AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AF0);
  }
  return result;
}

unint64_t sub_10057A8E8()
{
  unint64_t result = qword_100979AF8;
  if (!qword_100979AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979AF8);
  }
  return result;
}

unint64_t sub_10057A940()
{
  unint64_t result = qword_100979B00;
  if (!qword_100979B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B00);
  }
  return result;
}

unint64_t sub_10057A998()
{
  unint64_t result = qword_100979B08;
  if (!qword_100979B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B08);
  }
  return result;
}

unint64_t sub_10057A9F0()
{
  unint64_t result = qword_100979B10;
  if (!qword_100979B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B10);
  }
  return result;
}

unint64_t sub_10057AA48()
{
  unint64_t result = qword_100979B18;
  if (!qword_100979B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B18);
  }
  return result;
}

unint64_t sub_10057AAA0()
{
  unint64_t result = qword_100979B20;
  if (!qword_100979B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B20);
  }
  return result;
}

unint64_t sub_10057AAF8()
{
  unint64_t result = qword_100979B28;
  if (!qword_100979B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B28);
  }
  return result;
}

unint64_t sub_10057AB50()
{
  unint64_t result = qword_100979B30;
  if (!qword_100979B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B30);
  }
  return result;
}

unint64_t sub_10057ABA8()
{
  unint64_t result = qword_100979B38;
  if (!qword_100979B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B38);
  }
  return result;
}

unint64_t sub_10057AC00()
{
  unint64_t result = qword_100979B40;
  if (!qword_100979B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B40);
  }
  return result;
}

unint64_t sub_10057AC58()
{
  unint64_t result = qword_100979B48;
  if (!qword_100979B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B48);
  }
  return result;
}

unint64_t sub_10057ACB0()
{
  unint64_t result = qword_100979B50;
  if (!qword_100979B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B50);
  }
  return result;
}

unint64_t sub_10057AD08()
{
  unint64_t result = qword_100979B58;
  if (!qword_100979B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B58);
  }
  return result;
}

unint64_t sub_10057AD60()
{
  unint64_t result = qword_100979B60;
  if (!qword_100979B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B60);
  }
  return result;
}

unint64_t sub_10057ADB8()
{
  unint64_t result = qword_100979B68;
  if (!qword_100979B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B68);
  }
  return result;
}

unint64_t sub_10057AE10()
{
  unint64_t result = qword_100979B70;
  if (!qword_100979B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B70);
  }
  return result;
}

unint64_t sub_10057AE68()
{
  unint64_t result = qword_100979B78;
  if (!qword_100979B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B78);
  }
  return result;
}

unint64_t sub_10057AEC0()
{
  unint64_t result = qword_100979B80;
  if (!qword_100979B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B80);
  }
  return result;
}

unint64_t sub_10057AF18()
{
  unint64_t result = qword_100979B88;
  if (!qword_100979B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B88);
  }
  return result;
}

unint64_t sub_10057AF70()
{
  unint64_t result = qword_100979B90;
  if (!qword_100979B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B90);
  }
  return result;
}

unint64_t sub_10057AFC8()
{
  unint64_t result = qword_100979B98;
  if (!qword_100979B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979B98);
  }
  return result;
}

unint64_t sub_10057B020()
{
  unint64_t result = qword_100979BA0;
  if (!qword_100979BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BA0);
  }
  return result;
}

unint64_t sub_10057B078()
{
  unint64_t result = qword_100979BA8;
  if (!qword_100979BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BA8);
  }
  return result;
}

unint64_t sub_10057B0D0()
{
  unint64_t result = qword_100979BB0;
  if (!qword_100979BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BB0);
  }
  return result;
}

unint64_t sub_10057B128()
{
  unint64_t result = qword_100979BB8;
  if (!qword_100979BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BB8);
  }
  return result;
}

unint64_t sub_10057B180()
{
  unint64_t result = qword_100979BC0;
  if (!qword_100979BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BC0);
  }
  return result;
}

unint64_t sub_10057B1D8()
{
  unint64_t result = qword_100979BC8;
  if (!qword_100979BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BC8);
  }
  return result;
}

unint64_t sub_10057B230()
{
  unint64_t result = qword_100979BD0;
  if (!qword_100979BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BD0);
  }
  return result;
}

unint64_t sub_10057B288()
{
  unint64_t result = qword_100979BD8;
  if (!qword_100979BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BD8);
  }
  return result;
}

unint64_t sub_10057B2E0()
{
  unint64_t result = qword_100979BE0;
  if (!qword_100979BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BE0);
  }
  return result;
}

unint64_t sub_10057B338()
{
  unint64_t result = qword_100979BE8;
  if (!qword_100979BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BE8);
  }
  return result;
}

unint64_t sub_10057B390()
{
  unint64_t result = qword_100979BF0;
  if (!qword_100979BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BF0);
  }
  return result;
}

unint64_t sub_10057B3E8()
{
  unint64_t result = qword_100979BF8;
  if (!qword_100979BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100979BF8);
  }
  return result;
}

uint64_t sub_10057B43C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7165526F6C6C6568 && a2 == 0xEC00000074736575;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365526F6C6C6568 && a2 == 0xED000065736E6F70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265766F63736964 && a2 == 0xEF74736575716552 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001007C1F50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65757165526B7361 && a2 == 0xEA00000000007473 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F707365526B7361 && a2 == 0xEB0000000065736ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x655264616F6C7075 && a2 == 0xED00007473657571 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x655264616F6C7075 && a2 == 0xEE0065736E6F7073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65676E6168637865 && a2 == 0xEF74736575716552 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001007C1F70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001007C1F90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001007C1FB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x716552726F727265 && a2 == 0xEC00000074736575 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x736552726F727265 && a2 == 0xED000065736E6F70)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

char *sub_10057BAC4@<X0>(int a1@<W0>, unint64_t a2@<X1>, char *a3@<X3>, unint64_t a4@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
  unint64_t v4 = a2;
  if (!a2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  LODWORD(v5) = a1;
  a3 = sub_100253724(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v7 = *((void *)a3 + 2);
  a4 = *((void *)a3 + 3);
  unint64_t v6 = v7 + 1;
  if (v7 >= a4 >> 1) {
    goto LABEL_18;
  }
  while (1)
  {
    *((void *)a3 + 2) = v6;
    a3[v7 + 32] = v5;
    if (v4 == 1) {
      break;
    }
    unint64_t v8 = *((void *)a3 + 3);
    if (v6 >= v8 >> 1) {
      a3 = sub_100253724((char *)(v8 > 1), v7 + 2, 1, a3);
    }
    a4 = v5 >> 8;
    *((void *)a3 + 2) = v7 + 2;
    a3[v6 + 32] = BYTE1(v5);
    unint64_t v5 = v4 - 2;
    if (v4 == 2) {
      break;
    }
    unint64_t v6 = v7 + 34;
    for (uint64_t i = 0xFFFFFFFFFFFFFFELL; i; --i)
    {
      a4 = *((void *)a3 + 3);
      unint64_t v4 = v6 - 31;
      if (v6 - 32 >= a4 >> 1) {
        a3 = sub_100253724((char *)(a4 > 1), v6 - 31, 1, a3);
      }
      *((void *)a3 + 2) = v4;
      a3[v6++] = 0;
      if (!--v5) {
        return a3;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    a3 = sub_100253724((char *)(a4 > 1), v6, 1, a3);
  }
  return a3;
}

uint64_t sub_10057BC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1005A81E8((unint64_t *)&unk_10096D460, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10057BE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10057BF58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CodableError();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1005A81E8(&qword_100979E60, (void (*)(uint64_t))&type metadata accessor for CodableError),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    BOOL v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1005A81E8(&qword_100979E68, (void (*)(uint64_t))&type metadata accessor for CodableError);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_10057C16C(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_10057C25C(Swift::UInt8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_10057C34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (Hasher.init(_seed:)(),
        sub_1003156D8(),
        Swift::Int v8 = Hasher._finalize()(),
        uint64_t v9 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v10 = v8 & ~v9,
        ((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v5 + 72);
    do
    {
      sub_1005A80F0(*(void *)(a2 + 48) + v12 * v10, (uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
      char v13 = sub_10031EEC0((uint64_t)v7, a1);
      sub_10031C1C0((uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if (v13) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_10057C4D4(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  BOOL v2 = sub_10026BB6C(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (uint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1004EC63C(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1005A522C((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_1005A52A8((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_10024D338((uint64_t)v8);
  return v6;
}

uint64_t sub_10057C590(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096B450);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - v6;
  uint64_t v8 = sub_10000A844(&qword_100979EE0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000A844(&qword_10096B458);
  uint64_t v11 = __chkstk_darwin(v43);
  char v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v39 - v14);
  *(void *)&long long v46 = a1;
  swift_bridgeObjectRetain();
  sub_10000A844(&qword_100979EE8);
  sub_10000A844(&qword_100979EF0);
  if (swift_dynamicCast())
  {
    sub_1002AF688(v47, (uint64_t)v49);
    sub_10026BB6C(v49, v49[3]);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v47[0] = v46;
    sub_10024D338((uint64_t)v49);
    return *(void *)&v47[0];
  }
  uint64_t v39 = 0;
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  sub_10000A7E8((uint64_t)v47, &qword_100979EF8);
  uint64_t v42 = (char *)&v39;
  v47[0] = xmmword_10077D4C0;
  uint64_t v16 = *(int *)(v8 + 48);
  *char v13 = a1;
  v13[1] = 0;
  uint64_t v17 = (char *)v13 + *(int *)(v43 + 44);
  uint64_t v18 = a1;
  uint64_t v19 = type metadata accessor for Data.Iterator();
  uint64_t v40 = *(void *)(v19 - 8);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
  uint64_t v45 = v40 + 56;
  v44(v17, 1, 1, v19);
  sub_1005A8020((uint64_t)v13, (uint64_t)v10);
  *(void *)&v10[v16] = 0;
  uint64_t v41 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = *(void *)&v10[*(int *)(v8 + 48)];
  sub_1005A8020((uint64_t)v10, (uint64_t)v15);
  uint64_t v21 = *((void *)&v47[0] + 1) >> 62;
  switch(*((void *)&v47[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v22) = DWORD1(v47[0]) - LODWORD(v47[0]);
      if (__OFSUB__(DWORD1(v47[0]), v47[0])) {
        goto LABEL_39;
      }
      uint64_t v22 = (int)v22;
LABEL_8:
      if (v20 != v22)
      {
        if (v21)
        {
          if (v21 == 1)
          {
            if (*(uint64_t *)&v47[0] >> 32 < v20) {
              goto LABEL_37;
            }
          }
          else if (*(void *)(*(void *)&v47[0] + 24) < v20)
          {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v26 = BYTE14(v47[0]);
LABEL_32:
          if (v26 < v20)
          {
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
          }
        }
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_10000A7E8((uint64_t)v15, &qword_10096B458);
        goto LABEL_34;
      }
LABEL_15:
      uint64_t v27 = 0;
      uint64_t v28 = (uint64_t)v15 + *(int *)(v43 + 44);
      memset(v49, 0, 15);
      uint64_t v29 = (uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
      uint64_t v42 = (char *)&v46 + 14;
LABEL_16:
      uint64_t v43 = v27;
      while (1)
      {
        sub_10024A330(v28, (uint64_t)v7, &qword_10096B450);
        uint64_t v30 = *v29;
        unsigned int v31 = (*v29)(v7, 1, v19);
        sub_10000A7E8((uint64_t)v7, &qword_10096B450);
        if (v31 != 1)
        {
          if (v30((char *)v28, 1, v19) == 1) {
            goto LABEL_42;
          }
          sub_1005A81E8((unint64_t *)&unk_10096B460, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
          dispatch thunk of IteratorProtocol.next()();
          if (BYTE1(v46) != 1)
          {
            int v37 = v43;
            *((unsigned char *)v49 + v43) = v46;
            uint64_t v27 = (v37 + 1);
            if ((v27 >> 8)) {
              goto LABEL_41;
            }
            BYTE6(v49[1]) = v37 + 1;
            if ((v37 + 1) == 14)
            {
              *(void *)&long long v46 = v49[0];
              DWORD2(v46) = v49[1];
              WORD6(v46) = WORD2(v49[1]);
              Data._Representation.append(contentsOf:)();
              uint64_t v27 = 0;
              BYTE6(v49[1]) = 0;
            }
            goto LABEL_16;
          }
        }
        unint64_t v32 = v15[1];
        unint64_t v33 = *(void *)(*v15 + 16);
        if (v32 == v33) {
          break;
        }
        if (v32 >= v33) {
          goto LABEL_38;
        }
        uint64_t v34 = *v15 + 16 * v32;
        uint64_t v35 = *(void *)(v34 + 32);
        unint64_t v36 = *(void *)(v34 + 40);
        v15[1] = v32 + 1;
        switch(v36 >> 62)
        {
          case 1uLL:
          case 2uLL:
            sub_10025ADCC(v35, v36);
            sub_10025ADCC(v35, v36);
            sub_10025ADCC(v35, v36);
            break;
          default:
            break;
        }
        Data.Iterator.init(_:at:)();
        sub_100250CC4(v35, v36);
        sub_100250CC4(v35, v36);
        v44(v5, 0, 1, v19);
        sub_10025AE24((uint64_t)v5, v28);
      }
      if ((_BYTE)v43)
      {
        *(void *)&long long v46 = v49[0];
        DWORD2(v46) = v49[1];
        WORD6(v46) = WORD2(v49[1]);
        Data._Representation.append(contentsOf:)();
      }
      sub_10000A7E8((uint64_t)v15, &qword_10096B458);
LABEL_34:
      swift_bridgeObjectRelease();
      return *(void *)&v47[0];
    case 2:
      uint64_t v24 = *(void *)(*(void *)&v47[0] + 16);
      uint64_t v23 = *(void *)(*(void *)&v47[0] + 24);
      BOOL v25 = __OFSUB__(v23, v24);
      uint64_t v22 = v23 - v24;
      if (!v25) {
        goto LABEL_8;
      }
      goto LABEL_40;
    case 3:
      if (!v20) {
        goto LABEL_15;
      }
      uint64_t v26 = 0;
      goto LABEL_32;
    default:
      uint64_t v22 = BYTE14(v47[0]);
      goto LABEL_8;
  }
}

id cdbDatabaseInfo()()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  id result = sub_1001B2B24();
  if (result)
  {
    uint64_t v8 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    URL.appendingPathComponent(_:)();
    uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
    v9(v6, v0);
    URL.appendingPathComponent(_:)();
    URL.appendingPathExtension(_:)();
    return (id)((uint64_t (*)(char *, uint64_t))v9)(v4, v0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10057CE18(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v15 >= v7) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v15);
    ++v2;
    if (!v16)
    {
      int64_t v2 = v15 + 1;
      if (v15 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v16 = *(void *)(v3 + 8 * v2);
      if (!v16)
      {
        int64_t v2 = v15 + 2;
        if (v15 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v2);
        if (!v16)
        {
          int64_t v2 = v15 + 3;
          if (v15 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v16 = *(void *)(v3 + 8 * v2);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v9 = __clz(__rbit64(v16)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = (Swift::Int *)(*(void *)(v1 + 48) + 32 * v9);
    Swift::Int v11 = *v10;
    Swift::Int v12 = v10[1];
    Swift::Int v13 = v10[2];
    Swift::Int v14 = v10[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100597E48(&v18, v11, v12, v13, v14);
    swift_bridgeObjectRelease();
    id result = swift_bridgeObjectRelease();
  }
  int64_t v17 = v15 + 4;
  if (v17 < v7)
  {
    unint64_t v16 = *(void *)(v3 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v2 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v2);
        ++v17;
        if (v16) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v17;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_10057CFBC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100979C00);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100979C00);
  if (qword_100969CA0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994630);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::String *airdropHashDBPathComponent.unsafeMutableAddressor()
{
  return &airdropHashDBPathComponent;
}

uint64_t sub_10057D090()
{
  uint64_t result = sub_1002E5CF8(44, 0xE100000000000000);
  if ((result & 0x100) != 0) {
    __break(1u);
  }
  else {
    byte_100994908 = result;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.load()()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  Swift::Int v11 = (char *)&v43 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  Swift::Int v14 = (char *)&v43 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  int64_t v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  uint64_t v22 = (char *)&v43 - v21;
  if (*(unsigned char *)(v0 + 48)) {
    return;
  }
  uint64_t v44 = v6;
  uint64_t v45 = v20;
  long long v46 = v19;
  uint64_t v47 = v18;
  uint64_t v43 = v0;
  uint64_t v48 = v2;
  sub_1005A6680();
  id v23 = sub_1001B2B24();
  if (!v23)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  uint64_t v24 = v23;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  BOOL v25 = *(void (**)(char *, uint64_t))(v47 + 8);
  v25(v14, v3);
  URL.appendingPathComponent(_:)();
  URL.appendingPathExtension(_:)();
  v25(v11, v3);
  v25(v17, v3);
  uint64_t v26 = v48;
  sub_10057D660((uint64_t)v22);
  if (v26)
  {
    v25(v22, v3);
    return;
  }
  v25(v22, v3);
  id v27 = sub_1001B2B24();
  if (!v27) {
    goto LABEL_15;
  }
  uint64_t v28 = v27;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v29 = v44;
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v45;
  URL.appendingPathComponent(_:)();
  v25(v29, v3);
  URL.appendingPathComponent(_:)();
  unsigned int v31 = v46;
  URL.appendingPathExtension(_:)();
  v25(v11, v3);
  v25(v30, v3);
  URL.path.getter();
  v25(v31, v3);
  sub_1005A6AB0();
  uint64_t v32 = v43;
  id v33 = *(id *)(v43 + 16);
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v49 = 0;
  unsigned __int8 v35 = [v33 openAtPath:v34 error:&v49];

  if (v35)
  {
    uint64_t v36 = qword_100969FC8;
    id v37 = v49;
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_10000B47C(v38, (uint64_t)qword_100979C00);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "CDB: store loaded", v41, 2u);
      swift_slowDealloc();
    }

    *(unsigned char *)(v32 + 48) = 1;
  }
  else
  {
    id v42 = v49;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_10057D660(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLResourceValues();
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  if (qword_100969FC8 != -1) {
    swift_once();
  }
  uint64_t v30 = v4;
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000B47C(v9, (uint64_t)qword_100979C00);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    uint64_t v29 = v6;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_beginAccess();
    uint64_t v13 = URL.path.getter();
    v33[0] = (id)sub_100254634(v13, v14, v34);
    uint64_t v6 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Making AirDrop hash DB folder if doesn't exist: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v15 = [self defaultManager];
  swift_beginAccess();
  URL._bridgeToObjectiveC()(v16);
  uint64_t v18 = v17;
  sub_10000A844(&qword_100979F80);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)(inited + 32) = NSFileProtectionKey;
  type metadata accessor for FileProtectionType(0);
  *(void *)(inited + 64) = v20;
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  uint64_t v21 = NSFileProtectionKey;
  uint64_t v22 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  sub_100247050(inited);
  type metadata accessor for FileAttributeKey(0);
  sub_1005A81E8(&qword_10096AC78, type metadata accessor for FileAttributeKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v33[0] = 0;
  LODWORD(inited) = [v15 createDirectoryAtURL:v18 withIntermediateDirectories:1 attributes:isa error:v33];

  id v24 = v33[0];
  if (inited)
  {
    BOOL v25 = v30;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    swift_beginAccess();
    URL.setResourceValues(_:)();
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v32);
  }
  else
  {
    uint64_t v26 = v24;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.stageAddEntries(_:)(Swift::OpaquePointer a1)
{
  if (*(unsigned char *)(v1 + 48) != 1)
  {
    char v2 = 1;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v1 + 49))
  {
    char v2 = 2;
LABEL_5:
    sub_1005676DC();
    swift_allocError();
    *uint64_t v3 = v2;
    swift_willThrow();
    return;
  }
  int64_t v5 = *((void *)a1._rawValue + 2);
  if (v5)
  {
    sub_100255510(0, v5, 0);
    uint64_t v6 = (uint64_t *)((char *)a1._rawValue + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v10 >> 1) {
        sub_100255510(v10 > 1, v9 + 1, 1);
      }
      v6 += 9;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      os_log_type_t v11 = &_swiftEmptyArrayStorage[2 * v9];
      v11[4] = v7;
      v11[5] = v8;
      --v5;
    }
    while (v5);
  }
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 40) + 16))
  {
    uint64_t v12 = _swiftEmptyArrayStorage[2];
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = &_swiftEmptyArrayStorage[5];
      do
      {
        uint64_t v14 = *(v13 - 1);
        uint64_t v15 = *v13;
        swift_bridgeObjectRetain();
        sub_1005A1914(v14, v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 += 2;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
    }
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v16 = swift_bridgeObjectRetain();
  sub_1003D52A0(v16);
  swift_endAccess();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.stageDeleteEntriesForContact(withID:)(Swift::String withID)
{
  if (*(unsigned char *)(v1 + 48) != 1)
  {
    char v3 = 1;
    goto LABEL_5;
  }
  uint64_t v2 = v1;
  if (*(unsigned char *)(v1 + 49))
  {
    char v3 = 2;
LABEL_5:
    sub_1005676DC();
    swift_allocError();
    *uint64_t v4 = v3;
    swift_willThrow();
    return;
  }
  object = withID._object;
  uint64_t countAndFlagsBits = withID._countAndFlagsBits;
  if (qword_100969FC8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000B47C(v7, (uint64_t)qword_100979C00);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    v14[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136315138;
    v14[4] = (uint64_t)(v10 + 4);
    swift_bridgeObjectRetain();
    Swift::Int v13 = sub_100254634(countAndFlagsBits, (unint64_t)object, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "CDB: Staging deletion of entries for contact id: %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1005A6C20(v2 + 32, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  int64_t v12 = *(void *)(*(void *)(v2 + 32) + 16);
  if (v12 < v11)
  {
    __break(1u);
  }
  else
  {
    sub_1005A6F28(v11, v12);
    swift_endAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100596448(&v13, countAndFlagsBits, (Swift::Int)object);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.preparePersist()()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  int64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v26 = (char *)&v25 - v10;
  __chkstk_darwin(v9);
  int64_t v12 = (char *)&v25 - v11;
  id v13 = [objc_allocWithZone((Class)CUKeyValueStoreWriter) init];
  uint64_t v14 = *(void **)(v0 + 24);
  uint64_t v27 = v0;
  *(void *)(v0 + 24) = v13;

  id v15 = sub_1001B2B24();
  if (!v15) {
    __break(1u);
  }
  uint64_t v16 = v15;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  int64_t v17 = *(void (**)(char *, uint64_t))(v2 + 8);
  v17(v8, v1);
  URL.appendingPathComponent(_:)();
  uint64_t v18 = v26;
  URL.appendingPathExtension(_:)();
  v17(v5, v1);
  v17(v12, v1);
  URL.path.getter();
  v17(v18, v1);
  uint64_t v19 = *(void **)(v27 + 24);
  if (v19)
  {
    id v20 = v19;
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v28 = 0;
    unsigned int v22 = [v20 startAtPath:v21 error:&v28];

    if (v22)
    {
      id v23 = v28;
    }
    else
    {
      id v24 = v28;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.finishPersist()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v34 - v14;
  uint64_t v16 = *(void **)(v2 + 24);
  if (v16)
  {
    id v36 = 0;
    unsigned int v17 = [v16 finishAndReturnError:&v36];
    id v18 = v36;
    if (!v17)
    {
LABEL_8:
      id v33 = v18;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return;
    }
    uint64_t v34 = v1;
    unsigned __int8 v35 = v13;
    uint64_t v19 = *(void **)(v2 + 24);
    id v20 = v36;
  }
  else
  {
    uint64_t v34 = v1;
    unsigned __int8 v35 = v13;
    uint64_t v19 = 0;
  }
  *(void *)(v2 + 24) = 0;

  [*(id *)(v2 + 16) close];
  sub_10000B740(0, (unint64_t *)&qword_10096A1C0);
  id v21 = objc_allocWithZone((Class)CUKeyValueStoreReader);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v23 = [v21 initWithKeyType:ObjCClassFromMetadata valueType:ObjCClassFromMetadata];
  id v24 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = v23;

  id v25 = sub_1001B2B24();
  if (v25)
  {
    uint64_t v26 = v25;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    URL.appendingPathComponent(_:)();
    uint64_t v27 = *(void (**)(char *, uint64_t))(v4 + 8);
    v27(v10, v3);
    URL.appendingPathComponent(_:)();
    id v28 = v35;
    URL.appendingPathExtension(_:)();
    v27(v7, v3);
    v27(v15, v3);
    URL.path.getter();
    v27(v28, v3);
    id v29 = *(id *)(v2 + 16);
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v36 = 0;
    unsigned __int8 v31 = [v29 openAtPath:v30 error:&v36];

    id v18 = v36;
    if (v31)
    {
      id v32 = v36;
      return;
    }
    goto LABEL_8;
  }
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.persist()()
{
  unint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + 48) != 1)
  {
    char v7 = 1;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v2 + 49))
  {
    char v7 = 2;
LABEL_5:
    sub_1005676DC();
    swift_allocError();
    *uint64_t v8 = v7;
    swift_willThrow();
    return;
  }
  uint64_t v155 = v1;
  uint64_t v9 = v2 + 32;
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)(v2 + 32) + 16);
  size_t v11 = v2 + 40;
  swift_beginAccess();
  uint64_t v12 = *(void *)(*(void *)(v2 + 40) + 16);
  BOOL v13 = __OFADD__(v10, v12);
  uint64_t v14 = v10 + v12;
  if (v13) {
    goto LABEL_144;
  }
  if (v14 < 0) {
    goto LABEL_154;
  }
  if (!v14)
  {
    if (qword_100969FC8 != -1) {
      swift_once();
    }
    sub_10000B47C(v3, (uint64_t)qword_100979C00);
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "CDB: Nothing to persist.", v27, 2u);
      swift_slowDealloc();
    }
    goto LABEL_18;
  }
  if (qword_100969FC8 != -1) {
    goto LABEL_147;
  }
  while (1)
  {
    uint64_t v15 = sub_10000B47C(v3, (uint64_t)qword_100979C00);
    uint64_t v16 = *(void (**)(char *))(v4 + 16);
    uint64_t v153 = v15;
    v16(v6);
    swift_retain();
    unsigned int v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    unint64_t v157 = v2;
    if (v19)
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v20 = 134217984;
      uint64_t v21 = *(void *)(*(void *)v9 + 16);
      uint64_t v22 = *(void *)(*(void *)v11 + 16);
      BOOL v13 = __OFADD__(v21, v22);
      unint64_t v23 = v21 + v22;
      if (v13)
      {
        __break(1u);
        goto LABEL_149;
      }
      if ((v23 & 0x8000000000000000) != 0) {
        goto LABEL_153;
      }
      id v24 = v20;
      aBlock[0] = (id)v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v2 = v157;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "CDB: Persist %lu changes.", v24, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v152 = mach_absolute_time();
    uint64_t v28 = swift_allocObject();
    uint64_t v158 = v28;
    *(void *)(v28 + 16) = &_swiftEmptyDictionarySingleton;
    uint64_t v159 = (char *)(v28 + 16);
    uint64_t v29 = *(void *)v9;
    NSString v30 = _swiftEmptyArrayStorage;
    *(void *)uint64_t v9 = _swiftEmptyArrayStorage;
    int64_t v31 = *(void *)(v29 + 16);
    uint64_t v156 = v29;
    if (v31)
    {
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_100255510(0, v31, 0);
      NSString v30 = aBlock[0];
      id v32 = (uint64_t *)(v29 + 40);
      do
      {
        uint64_t v34 = *(v32 - 1);
        uint64_t v33 = *v32;
        aBlock[0] = v30;
        unint64_t v36 = v30[2];
        unint64_t v35 = v30[3];
        swift_bridgeObjectRetain();
        if (v36 >= v35 >> 1)
        {
          sub_100255510(v35 > 1, v36 + 1, 1);
          NSString v30 = aBlock[0];
        }
        v32 += 9;
        v30[2] = v36 + 1;
        id v37 = &v30[2 * v36];
        v37[4] = v34;
        v37[5] = v33;
        --v31;
      }
      while (v31);
      unint64_t v2 = v157;
    }
    uint64_t v38 = sub_100259968((uint64_t)v30);
    swift_bridgeObjectRelease();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = 0;
    uint64_t v39 = *(void **)(v2 + 16);
    sub_10000B740(0, (unint64_t *)&qword_10096A1C0);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v41 = (void *)swift_allocObject();
    v41[2] = v2;
    v41[3] = v4;
    uint64_t v42 = v158;
    v41[4] = v38;
    uint64_t v41[5] = v42;
    uint64_t v174 = sub_1005A7174;
    uint64_t v175 = v41;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1005805A8;
    uint64_t v173 = &unk_1008E0000;
    uint64_t v43 = _Block_copy(aBlock);
    swift_retain();
    id v44 = v39;
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    unsigned __int8 v45 = [v44 enumerateKeyType:ObjCClassFromMetadata valueType:ObjCClassFromMetadata error:aBlock handler:v43];
    _Block_release(v43);

    id v46 = aBlock[0];
    if ((v45 & 1) == 0)
    {
      uint64_t v48 = v46;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();
      swift_release();
      return;
    }
    uint64_t v154 = v4;
    swift_beginAccess();
    uint64_t v47 = v156;
    if (*(void *)(v4 + 16))
    {
      swift_errorRetain();
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_release();
      swift_release();
      return;
    }
    *(void *)size_t v11 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    int64_t v49 = *(void *)(v47 + 16);
    if (!v49) {
      break;
    }
    uint64_t v50 = (unsigned __int8 *)(v156 + 99);
    while (1)
    {
      int64_t v162 = v49;
      unint64_t v167 = *(void *)(v50 - 67);
      unint64_t v53 = *(void *)(v50 - 59);
      uint64_t v54 = *(void *)(v50 - 51);
      unint64_t v55 = *(void *)(v50 - 43);
      uint64_t v56 = *(void *)(v50 - 35);
      uint64_t v57 = *(void *)(v50 - 27);
      uint64_t v58 = *(void *)(v50 - 19);
      uint64_t v59 = *(void *)(v50 - 11);
      int v60 = *(unsigned __int16 *)(v50 - 3) | (*(v50 - 1) << 16);
      uint64_t v161 = (uint64_t)v50;
      int v61 = *v50;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v62 = sub_1005A7198(v167, v53, v54, v55, v56, v57, v58, v59, v60 | (v61 << 24));
      unint64_t v167 = v63;
      id v166 = v64;
      unint64_t v2 = v65;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v3 = sub_10000A844(&qword_100979C18);
      uint64_t v173 = (void *)v3;
      unint64_t v66 = sub_1005A7384();
      uint64_t v174 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
      aBlock[0] = v62;
      uint64_t v67 = sub_10026BB6C(aBlock, v3);
      uint64_t v68 = *v67;
      size_t v69 = *(void *)(*v67 + 16);
      if (v69)
      {
        uint64_t v4 = (uint64_t)v159;
        if (v69 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v169 = v69;
          memcpy(__dst, (const void *)(v68 + 32), v69);
          uint64_t v9 = *(void *)__dst;
          unint64_t v72 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v169 << 48);
          swift_bridgeObjectRetain();
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_bridgeObjectRetain();
          uint64_t v70 = __DataStorage.init(bytes:length:)();
          uint64_t v71 = v70;
          if (v69 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            uint64_t v9 = swift_allocObject();
            *(void *)(v9 + 16) = 0;
            *(void *)(v9 + 24) = v69;
            unint64_t v72 = v71 | 0x8000000000000000;
          }
          else
          {
            uint64_t v9 = v69 << 32;
            unint64_t v72 = v70 | 0x4000000000000000;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = 0;
        unint64_t v72 = 0xC000000000000000;
        uint64_t v4 = (uint64_t)v159;
      }
      unint64_t v73 = (void *)v167;
      sub_10024D338((uint64_t)aBlock);
      uint64_t v173 = (void *)v3;
      uint64_t v174 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
      aBlock[0] = v73;
      uint64_t v74 = sub_10026BB6C(aBlock, v3);
      uint64_t v75 = *v74;
      size_t v11 = *(void *)(*v74 + 16);
      uint64_t v163 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
      int64_t v160 = (int64_t)v62;
      if (v11)
      {
        if (v11 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v169 = v11;
          memcpy(__dst, (const void *)(v75 + 32), v11);
          uint64_t v78 = *(void *)__dst;
          unint64_t v79 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v169 << 48);
          swift_bridgeObjectRetain();
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_bridgeObjectRetain();
          uint64_t v76 = __DataStorage.init(bytes:length:)();
          uint64_t v77 = v76;
          if (v11 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            uint64_t v78 = swift_allocObject();
            *(void *)(v78 + 16) = 0;
            *(void *)(v78 + 24) = v11;
            unint64_t v79 = v77 | 0x8000000000000000;
          }
          else
          {
            uint64_t v78 = v11 << 32;
            unint64_t v79 = v76 | 0x4000000000000000;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v78 = 0;
        unint64_t v79 = 0xC000000000000000;
      }
      sub_10024D338((uint64_t)aBlock);
      swift_beginAccess();
      uint64_t v80 = *(void *)(*(void *)v4 + 16);
      uint64_t v165 = v78;
      uint64_t v164 = v79;
      if (v80)
      {
        sub_10025ADCC(v9, v72);
        sub_100583C80(v9, v72, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584670);
        if (v81)
        {
          swift_endAccess();
          sub_100250CC4(v9, v72);
          goto LABEL_64;
        }
        sub_100250CC4(v9, v72);
      }
      unint64_t v82 = v2;
      swift_endAccess();
      swift_beginAccess();
      sub_10025ADCC(v9, v72);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)__dst = *(void *)v4;
      uint64_t v6 = *(char **)__dst;
      *(void *)uint64_t v4 = 0x8000000000000000;
      unint64_t v2 = sub_100583C80(v9, v72, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584670);
      uint64_t v85 = *((void *)v6 + 2);
      BOOL v86 = (v84 & 1) == 0;
      uint64_t v87 = v85 + v86;
      if (__OFADD__(v85, v86)) {
        break;
      }
      size_t v11 = v84;
      if (*((void *)v6 + 3) >= v87)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v6 = *(char **)__dst;
          if ((v84 & 1) == 0) {
            goto LABEL_61;
          }
        }
        else
        {
          sub_10058FE04();
          uint64_t v6 = *(char **)__dst;
          if ((v11 & 1) == 0) {
            goto LABEL_61;
          }
        }
      }
      else
      {
        sub_10058AFF0(v87, isUniquelyReferenced_nonNull_native);
        uint64_t v88 = sub_100583C80(v9, v72, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584670);
        if ((v11 & 1) != (v89 & 1)) {
          goto LABEL_152;
        }
        unint64_t v2 = v88;
        uint64_t v6 = *(char **)__dst;
        if ((v11 & 1) == 0)
        {
LABEL_61:
          *(void *)&v6[8 * (v2 >> 6) + 64] |= 1 << v2;
          uint64_t v91 = (uint64_t *)(*((void *)v6 + 6) + 16 * v2);
          *uint64_t v91 = v9;
          v91[1] = v72;
          *(void *)(*((void *)v6 + 7) + 8 * v2) = &_swiftEmptySetSingleton;
          uint64_t v92 = *((void *)v6 + 2);
          BOOL v13 = __OFADD__(v92, 1);
          uint64_t v93 = v92 + 1;
          if (v13) {
            goto LABEL_146;
          }
          *((void *)v6 + 2) = v93;
          sub_10025ADCC(v9, v72);
          goto LABEL_63;
        }
      }
      uint64_t v90 = *((void *)v6 + 7);
      swift_bridgeObjectRelease();
      *(void *)(v90 + 8 * v2) = &_swiftEmptySetSingleton;
LABEL_63:
      unint64_t v2 = v82;
      uint64_t v78 = v165;
      *(void *)uint64_t v4 = v6;
      swift_bridgeObjectRelease();
      sub_100250CC4(v9, v72);
      swift_endAccess();
      unint64_t v79 = v164;
LABEL_64:
      swift_beginAccess();
      sub_10025ADCC(v9, v72);
      uint64_t v94 = sub_1005804C0(aBlock, v9, v72);
      if (*v95)
      {
        sub_10025ADCC(v78, v79);
        sub_100596938(&v170, v78, v79);
        ((void (*)(id *, void))v94)(aBlock, 0);
        swift_endAccess();
        sub_100250CC4(v9, v72);
        uint64_t v96 = v170;
        unint64_t v97 = v171;
      }
      else
      {
        ((void (*)(id *, void))v94)(aBlock, 0);
        swift_endAccess();
        uint64_t v96 = v9;
        unint64_t v97 = v72;
      }
      sub_100250CC4(v96, v97);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v166)
      {
        uint64_t v173 = (void *)v3;
        uint64_t v174 = v163;
        aBlock[0] = v166;
        uint64_t v98 = sub_10026BB6C(aBlock, v3);
        uint64_t v99 = *v98;
        size_t v100 = *(void *)(*v98 + 16);
        if (v100)
        {
          if (v100 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v169 = v100;
            memcpy(__dst, (const void *)(v99 + 32), v100);
            uint64_t v103 = *(void *)__dst;
            unint64_t v104 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v169 << 48);
            swift_bridgeObjectRetain();
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v101 = __DataStorage.init(bytes:length:)();
            uint64_t v102 = v101;
            if (v100 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v103 = swift_allocObject();
              *(void *)(v103 + 16) = 0;
              *(void *)(v103 + 24) = v100;
              unint64_t v104 = v102 | 0x8000000000000000;
            }
            else
            {
              uint64_t v103 = v100 << 32;
              unint64_t v104 = v101 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v103 = 0;
          unint64_t v104 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease();
        sub_10024D338((uint64_t)aBlock);
        uint64_t v173 = (void *)v3;
        uint64_t v174 = v163;
        aBlock[0] = (id)v2;
        uint64_t v105 = sub_10026BB6C(aBlock, v3);
        uint64_t v106 = *v105;
        size_t v107 = *(void *)(*v105 + 16);
        if (v107)
        {
          if (v107 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v169 = v107;
            memcpy(__dst, (const void *)(v106 + 32), v107);
            uint64_t v110 = *(void *)__dst;
            unint64_t v111 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v169 << 48);
            swift_bridgeObjectRetain();
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v108 = __DataStorage.init(bytes:length:)();
            uint64_t v109 = v108;
            if (v107 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v110 = swift_allocObject();
              *(void *)(v110 + 16) = 0;
              *(void *)(v110 + 24) = v107;
              unint64_t v111 = v109 | 0x8000000000000000;
            }
            else
            {
              uint64_t v110 = v107 << 32;
              unint64_t v111 = v108 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v110 = 0;
          unint64_t v111 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease();
        sub_10024D338((uint64_t)aBlock);
        swift_beginAccess();
        if (*(void *)(*(void *)v4 + 16))
        {
          sub_10025ADCC(v103, v104);
          sub_100583C80(v103, v104, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584670);
          if (v112)
          {
            swift_endAccess();
            sub_100250CC4(v103, v104);
            goto LABEL_87;
          }
          sub_100250CC4(v103, v104);
        }
        swift_endAccess();
        swift_beginAccess();
        sub_10025ADCC(v103, v104);
        char v113 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)__dst = *(void *)v4;
        *(void *)uint64_t v4 = 0x8000000000000000;
        sub_100594308((uint64_t)&_swiftEmptySetSingleton, v103, v104, v113);
        *(void *)uint64_t v4 = *(void *)__dst;
        swift_bridgeObjectRelease();
        sub_100250CC4(v103, v104);
        swift_endAccess();
LABEL_87:
        swift_beginAccess();
        sub_10025ADCC(v103, v104);
        unint64_t v2 = (unint64_t)sub_1005804C0(aBlock, v103, v104);
        if (*v114)
        {
          sub_10025ADCC(v110, v111);
          sub_100596938(&v170, v110, v111);
          ((void (*)(id *, void))v2)(aBlock, 0);
          swift_endAccess();
          sub_100250CC4(v165, v164);
          sub_100250CC4(v110, v111);
          sub_100250CC4(v103, v104);
          sub_100250CC4(v9, v72);
          sub_100250CC4(v103, v104);
          uint64_t v51 = v170;
          unint64_t v52 = v171;
        }
        else
        {
          ((void (*)(id *, void))v2)(aBlock, 0);
          swift_endAccess();
          sub_100250CC4(v103, v104);
          sub_100250CC4(v9, v72);
          sub_100250CC4(v165, v164);
          sub_100250CC4(v103, v104);
          uint64_t v51 = v110;
          unint64_t v52 = v111;
        }
        goto LABEL_33;
      }
      sub_100250CC4(v9, v72);
      uint64_t v51 = v78;
      unint64_t v52 = v79;
LABEL_33:
      sub_100250CC4(v51, v52);
      uint64_t v50 = (unsigned __int8 *)(v161 + 72);
      int64_t v49 = v162 - 1;
      if (v162 == 1) {
        goto LABEL_90;
      }
    }
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    swift_once();
  }
LABEL_90:
  swift_bridgeObjectRelease();
  uint64_t v115 = *(void **)(v157 + 24);
  if (!v115)
  {
    id v25 = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v145))
    {
      long long v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v146 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v145, "Writer not prepared for persist operation", v146, 2u);
      swift_slowDealloc();
    }
    swift_release();
    swift_release();
LABEL_18:

    return;
  }
  uint64_t v116 = v159;
  swift_beginAccess();
  uint64_t v6 = *(char **)v116;
  uint64_t v117 = *((void *)v6 + 8);
  uint64_t v159 = v6 + 64;
  uint64_t v118 = 1 << v6[32];
  if (v118 < 64) {
    uint64_t v119 = ~(-1 << v118);
  }
  else {
    uint64_t v119 = -1;
  }
  unint64_t v120 = v119 & v117;
  int64_t v160 = (unint64_t)(v118 + 63) >> 6;
  id v166 = v115;
  uint64_t v163 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v6;
  swift_bridgeObjectRetain();
  int64_t v121 = 0;
LABEL_95:
  if (v120)
  {
    uint64_t v161 = (v120 - 1) & v120;
    int64_t v162 = v121;
    unint64_t v122 = __clz(__rbit64(v120)) | (v121 << 6);
    goto LABEL_111;
  }
  int64_t v123 = v121 + 1;
  if (__OFADD__(v121, 1)) {
    goto LABEL_150;
  }
  if (v123 < v160)
  {
    unint64_t v124 = *(void *)&v159[8 * v123];
    int64_t v125 = v121 + 1;
    if (v124) {
      goto LABEL_110;
    }
    int64_t v125 = v121 + 2;
    if (v121 + 2 >= v160) {
      goto LABEL_138;
    }
    unint64_t v124 = *(void *)&v159[8 * v125];
    if (v124) {
      goto LABEL_110;
    }
    int64_t v125 = v121 + 3;
    if (v121 + 3 >= v160) {
      goto LABEL_138;
    }
    unint64_t v124 = *(void *)&v159[8 * v125];
    if (v124)
    {
LABEL_110:
      uint64_t v161 = (v124 - 1) & v124;
      int64_t v162 = v125;
      unint64_t v122 = __clz(__rbit64(v124)) + (v125 << 6);
LABEL_111:
      char v127 = (uint64_t *)(*((void *)v163 + 6) + 16 * v122);
      uint64_t v128 = *v127;
      unint64_t v129 = v127[1];
      uint64_t v3 = *(void *)(*((void *)v163 + 7) + 8 * v122);
      uint64_t v130 = *(void *)(v3 + 56);
      uint64_t v164 = v3 + 56;
      uint64_t v131 = 1 << *(unsigned char *)(v3 + 32);
      if (v131 < 64) {
        uint64_t v132 = ~(-1 << v131);
      }
      else {
        uint64_t v132 = -1;
      }
      uint64_t v9 = v132 & v130;
      uint64_t v133 = v128;
      unint64_t v167 = v129;
      sub_10025ADCC(v128, v129);
      uint64_t v165 = (unint64_t)(v131 + 63) >> 6;
      swift_bridgeObjectRetain();
      size_t v11 = 0;
      if (v9)
      {
LABEL_115:
        unint64_t v134 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v135 = v134 | (v11 << 6);
        goto LABEL_130;
      }
      while (1)
      {
        uint64_t v136 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_145;
        }
        if (v136 >= v165) {
          goto LABEL_133;
        }
        unint64_t v137 = *(void *)(v164 + 8 * v136);
        ++v11;
        if (!v137)
        {
          size_t v11 = v136 + 1;
          if (v136 + 1 >= v165) {
            goto LABEL_133;
          }
          unint64_t v137 = *(void *)(v164 + 8 * v11);
          if (!v137)
          {
            size_t v11 = v136 + 2;
            if (v136 + 2 >= v165) {
              goto LABEL_133;
            }
            unint64_t v137 = *(void *)(v164 + 8 * v11);
            if (!v137)
            {
              uint64_t v138 = v136 + 3;
              if (v138 >= v165)
              {
LABEL_133:
                swift_release();
                sub_100250CC4(v133, v167);
                int64_t v121 = v162;
                unint64_t v120 = v161;
                goto LABEL_95;
              }
              unint64_t v137 = *(void *)(v164 + 8 * v138);
              if (!v137)
              {
                while (1)
                {
                  size_t v11 = v138 + 1;
                  if (__OFADD__(v138, 1)) {
                    break;
                  }
                  if ((uint64_t)v11 >= v165) {
                    goto LABEL_133;
                  }
                  unint64_t v137 = *(void *)(v164 + 8 * v11);
                  ++v138;
                  if (v137) {
                    goto LABEL_129;
                  }
                }
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
              }
              size_t v11 = v138;
            }
          }
        }
LABEL_129:
        uint64_t v9 = (v137 - 1) & v137;
        unint64_t v135 = __clz(__rbit64(v137)) + (v11 << 6);
LABEL_130:
        long long v139 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v135);
        uint64_t v140 = *v139;
        unint64_t v141 = v139[1];
        sub_10025ADCC(*v139, v141);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        unint64_t v2 = (unint64_t)Data._bridgeToObjectiveC()().super.isa;
        *(void *)__dst = 0;
        uint64_t v6 = (char *)[v166 addKey:isa value:v2 error:__dst];

        uint64_t v4 = *(void *)__dst;
        if (!v6)
        {
          id v144 = *(id *)__dst;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          sub_100250CC4(v140, v141);
          sub_100250CC4(v133, v167);
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          return;
        }
        id v143 = *(id *)__dst;
        sub_100250CC4(v140, v141);
        if (v9) {
          goto LABEL_115;
        }
      }
    }
    uint64_t v126 = v121 + 4;
    if (v121 + 4 < v160)
    {
      unint64_t v124 = *(void *)&v159[8 * v126];
      if (v124)
      {
        int64_t v125 = v121 + 4;
        goto LABEL_110;
      }
      while (1)
      {
        int64_t v125 = v126 + 1;
        if (__OFADD__(v126, 1)) {
          goto LABEL_151;
        }
        if (v125 >= v160) {
          break;
        }
        unint64_t v124 = *(void *)&v159[8 * v125];
        ++v126;
        if (v124) {
          goto LABEL_110;
        }
      }
    }
  }
LABEL_138:
  swift_release();
  if (mach_absolute_time() >= v152)
  {
    uint64_t v147 = UpTicksToMilliseconds();
    uint64_t v148 = Logger.logObject.getter();
    os_log_type_t v149 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v148, v149))
    {
      uint64_t v150 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v150 = 134217984;
      *(void *)__dst = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v148, v149, "CDB: Persist completed. Operation took %llu ms.", v150, 0xCu);
      swift_slowDealloc();
    }

    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
LABEL_152:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_153:
    swift_release();
LABEL_154:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t sub_10057FEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = (uint64_t *)(a7 + 16);
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v12 >> 62;
  uint64_t v16 = v13;
  unint64_t v17 = v14;
  switch(v12 >> 62)
  {
    case 1uLL:
      LODWORD(v18) = HIDWORD(v10) - v10;
      if (__OFSUB__(HIDWORD(v10), v10))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      uint64_t v18 = (int)v18;
LABEL_6:
      uint64_t v46 = a4;
      if (v18 != 2)
      {
        if (v15)
        {
          if (v15 == 1)
          {
            LODWORD(v23) = HIDWORD(v10) - v10;
            if (__OFSUB__(HIDWORD(v10), v10))
            {
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
              goto LABEL_42;
            }
            uint64_t v23 = (int)v23;
          }
          else
          {
            uint64_t v32 = *(void *)(v10 + 16);
            uint64_t v31 = *(void *)(v10 + 24);
            BOOL v21 = __OFSUB__(v31, v32);
            uint64_t v23 = v31 - v32;
            if (v21)
            {
LABEL_42:
              __break(1u);
LABEL_43:
              __break(1u);
              goto LABEL_44;
            }
          }
        }
        else
        {
          uint64_t v23 = BYTE6(v12);
        }
        if (v23 == 32)
        {
          uint64_t v26 = a6;
          unsigned __int8 v45 = v9;
          uint64_t v29 = sub_1005A53C8(v13, v14);
          uint64_t v30 = v33;
          uint64_t v44 = v16;
          unint64_t v28 = v17;
          goto LABEL_24;
        }
        goto LABEL_43;
      }
      if (!v15)
      {
        uint64_t v22 = BYTE6(v12);
        goto LABEL_19;
      }
      if (v15 != 1)
      {
        uint64_t v25 = *(void *)(v10 + 16);
        uint64_t v24 = *(void *)(v10 + 24);
        uint64_t v22 = v24 - v25;
        if (!__OFSUB__(v24, v25)) {
          goto LABEL_18;
        }
        goto LABEL_41;
      }
      if (__OFSUB__(HIDWORD(v10), v10))
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      uint64_t v22 = HIDWORD(v10) - (int)v10;
LABEL_18:
      sub_10025ADCC(v10, v12);
LABEL_19:
      if (v22 != 2)
      {
LABEL_44:
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1005803DCLL);
      }
      uint64_t v26 = a6;
      __int16 v27 = sub_1002C8C2C(v10, v12);
      sub_100250CC4(v10, v12);
      sub_1005A79C4(v16, v17, v27, (uint64_t)v47);
      uint64_t v44 = v16;
      unsigned __int8 v45 = v9;
      unint64_t v28 = v17;
      uint64_t v29 = v47[1];
      uint64_t v30 = v47[2];
LABEL_24:
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v34 = *(void *)(v46 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v35 = sub_10057BE20(v29, v30, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v36 = sub_10057BE20(v29, v30, v26);
      swift_bridgeObjectRelease();
      if (v35 & 1) != 0 || (v36)
      {
        sub_100250CC4(v10, v12);
        uint64_t v37 = v44;
        goto LABEL_27;
      }
      swift_beginAccess();
      if (!*(void *)(*v45 + 16)) {
        goto LABEL_33;
      }
      sub_10025ADCC(v10, v12);
      sub_100583C80(v10, v12, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584670);
      if ((v40 & 1) == 0)
      {
        sub_100250CC4(v10, v12);
LABEL_33:
        swift_endAccess();
        swift_beginAccess();
        sub_10025ADCC(v10, v12);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v48 = *v45;
        *unsigned __int8 v45 = 0x8000000000000000;
        sub_100594308((uint64_t)&_swiftEmptySetSingleton, v10, v12, isUniquelyReferenced_nonNull_native);
        *unsigned __int8 v45 = v48;
        swift_bridgeObjectRelease();
        sub_100250CC4(v10, v12);
        swift_endAccess();
        goto LABEL_34;
      }
      swift_endAccess();
      sub_100250CC4(v10, v12);
LABEL_34:
      swift_beginAccess();
      sub_10025ADCC(v10, v12);
      uint64_t v42 = sub_1005804C0(v47, v10, v12);
      if (*v43)
      {
        sub_10025ADCC(v44, v28);
        sub_100596938(v49, v44, v28);
        ((void (*)(void *, void))v42)(v47, 0);
        swift_endAccess();
        sub_100250CC4(v44, v28);
        sub_100250CC4(v10, v12);
        sub_100250CC4(v10, v12);
        uint64_t v37 = v49[0];
        unint64_t v38 = v49[1];
        return sub_100250CC4(v37, v38);
      }
      ((void (*)(void *, void))v42)(v47, 0);
      swift_endAccess();
      sub_100250CC4(v10, v12);
      sub_100250CC4(v10, v12);
      uint64_t v37 = v44;
LABEL_27:
      unint64_t v38 = v28;
      return sub_100250CC4(v37, v38);
    case 2uLL:
      uint64_t v20 = *(void *)(v10 + 16);
      uint64_t v19 = *(void *)(v10 + 24);
      BOOL v21 = __OFSUB__(v19, v20);
      uint64_t v18 = v19 - v20;
      if (!v21) {
        goto LABEL_6;
      }
      goto LABEL_38;
    case 3uLL:
      goto LABEL_43;
    default:
      uint64_t v18 = BYTE6(v12);
      goto LABEL_6;
  }
}

void (*sub_1005803EC(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1005A46E0(v6, a2, a3);
  return sub_10058046C;
}

void sub_10058046C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

void (*sub_1005804C0(void *a1, uint64_t a2, unint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  sub_10025ADCC(a2, a3);
  v6[6] = sub_1005A4800(v6, a2, a3);
  return sub_100580544;
}

void sub_100580544(void *a1)
{
  uint64_t v1 = (void *)*a1;
  unint64_t v2 = *(void *)(*a1 + 40);
  uint64_t v3 = *(void *)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  sub_100250CC4(v3, v2);

  free(v1);
}

void sub_1005805A8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  char v7 = *(void (**)(id, id, uint64_t))(a1 + 32);
  swift_retain();
  id v9 = a2;
  id v8 = a3;
  v7(v9, v8, a4);
  swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.destroy()()
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  id v9 = (char *)v31 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)v31 - v11;
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)v31 - v13;
  if ((*(unsigned char *)(v0 + 49) & 1) == 0)
  {
    *(unsigned char *)(v0 + 49) = 1;
    if (*(unsigned char *)(v0 + 48) == 1) {
      [*(id *)(v0 + 16) close];
    }
    v31[1] = v1;
    if (qword_100969FC8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000B47C(v15, (uint64_t)qword_100979C00);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "CDB: Destroy called", v18, 2u);
      swift_slowDealloc();
    }

    id v19 = sub_1001B2B24();
    if (v19)
    {
      uint64_t v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URL.init(fileURLWithPath:)();
      swift_bridgeObjectRelease();
      URL.appendingPathComponent(_:)();
      BOOL v21 = *(void (**)(char *, uint64_t))(v3 + 8);
      v21(v9, v2);
      URL.appendingPathComponent(_:)();
      URL.appendingPathExtension(_:)();
      v21(v6, v2);
      v21(v14, v2);
      URL.path.getter();
      v21(v12, v2);
      uint64_t v22 = self;
      id v23 = [v22 defaultManager];
      NSString v24 = String._bridgeToObjectiveC()();
      unsigned int v25 = [v23 fileExistsAtPath:v24];

      if (v25)
      {
        id v26 = [v22 defaultManager];
        NSString v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v32 = 0;
        unsigned int v28 = [v26 removeItemAtPath:v27 error:&v32];

        if (v28)
        {
          id v29 = v32;
        }
        else
        {
          id v30 = v32;
          _convertNSErrorToError(_:)();

          swift_willThrow();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t SDAirDropHashStoreCDB.contact(forLongHash:)(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  if (*(unsigned char *)(v4 + 48) != 1)
  {
    char v7 = 1;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v4 + 49))
  {
    char v7 = 2;
LABEL_5:
    sub_1005676DC();
    swift_allocError();
    *uint64_t v8 = v7;
LABEL_6:
    swift_willThrow();
    return v6;
  }
  swift_beginAccess();
  uint64_t v37 = v4;
  uint64_t v10 = *(void *)(v4 + 32);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    unint64_t v12 = (void *)(v10 + 48);
    while (1)
    {
      uint64_t v6 = v12[1];
      uint64_t v38 = *(v12 - 2);
      Swift::UInt64 v14 = v12[4];
      Swift::UInt64 v13 = v12[5];
      Swift::UInt64 v16 = v12[2];
      Swift::UInt64 v15 = v12[3];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v16);
      Hasher._combine(_:)(v15);
      Hasher._combine(_:)(v14);
      Hasher._combine(_:)(v13);
      Swift::Int v17 = Hasher._finalize()();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(a1);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(a4);
      if (v17 == Hasher._finalize()()) {
        break;
      }
      v12 += 9;
      if (!--v11) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v38;
  }
  else
  {
LABEL_12:
    id v18 = *(id *)(v4 + 16);
    id v19 = sub_10045C500(a1, a2, a3, a4);
    uint64_t v20 = sub_1005A532C((uint64_t)v19);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100250CC4(v20, v22);
    sub_10000B740(0, (unint64_t *)&qword_10096A1C0);
    v43[0] = 0;
    id v24 = [v18 valueForKey:isa valueType:swift_getObjCClassFromMetadata() error:v43];

    if (v43[0])
    {
      v43[0];

      goto LABEL_6;
    }
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      uint64_t v6 = sub_1005A53C8(v26, v28);
      uint64_t v30 = v29;
      sub_100250CC4(v26, v28);
      if (v5)
      {
      }
      else
      {
        swift_beginAccess();
        uint64_t v31 = *(void *)(v37 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v32 = sub_10057BE20(v6, v30, v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void *)(v37 + 32);
        uint64_t v34 = *(void *)(v33 + 16);
        if (v34)
        {
          char v35 = (void *)(v33 + 40);
          while (1)
          {
            BOOL v36 = *(v35 - 1) == v6 && *v35 == v30;
            if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
            v35 += 9;
            if (!--v34) {
              goto LABEL_27;
            }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_27:

          if ((v32 & 1) == 0) {
            return v6;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t SDAirDropHashStoreCDB.contacts(forLongHash:)(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  if (*(unsigned char *)(v4 + 48) != 1)
  {
    uint64_t v5 = 1;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v4 + 49))
  {
    uint64_t v5 = 2;
LABEL_5:
    sub_1005676DC();
    swift_allocError();
    *uint64_t v6 = v5;
    swift_willThrow();
    return v5;
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &_swiftEmptySetSingleton;
  swift_beginAccess();
  uint64_t v49 = v4;
  uint64_t v9 = *(void *)(*(void *)(v4 + 32) + 16);
  uint64_t v50 = v8;
  if (v9)
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    uint64_t v52 = v10;
    unint64_t v53 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v15 = *(void *)(v10 + v11 + 40);
      uint64_t v16 = *(void *)(v10 + v11 + 56);
      uint64_t v61 = *(void *)(v10 + v11 + 48);
      uint64_t v62 = *(void *)(v10 + v11 + 32);
      Swift::UInt64 v17 = *(void *)(v10 + v11 + 64);
      Swift::UInt64 v18 = *(void *)(v10 + v11 + 72);
      Swift::UInt64 v19 = *(void *)(v10 + v11 + 80);
      Swift::UInt64 v20 = *(void *)(v10 + v11 + 88);
      int v58 = *(unsigned __int16 *)(v10 + v11 + 96);
      int v59 = *(unsigned __int8 *)(v10 + v11 + 98);
      char v63 = *(unsigned char *)(v10 + v11 + 99);
      Hasher.init(_seed:)();
      Swift::UInt64 v60 = v17;
      Hasher._combine(_:)(v17);
      Hasher._combine(_:)(v18);
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v20);
      Swift::Int v21 = Hasher._finalize()();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(a1);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(a4);
      if (v21 == Hasher._finalize()())
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v22 = v53;
        uint64_t v51 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002557BC(0, v53[2] + 1, 1);
          unint64_t v22 = v53;
        }
        unint64_t v13 = v22[2];
        unint64_t v12 = v22[3];
        if (v13 >= v12 >> 1)
        {
          sub_1002557BC(v12 > 1, v13 + 1, 1);
          unint64_t v22 = v53;
        }
        void v22[2] = v13 + 1;
        unint64_t v53 = v22;
        Swift::UInt64 v14 = &v22[9 * v13];
        v14[4] = v62;
        uint64_t v14[5] = v51;
        v14[6] = v61;
        v14[7] = v16;
        v14[8] = v60;
        v14[9] = v18;
        v14[10] = v19;
        v14[11] = v20;
        *((unsigned char *)v14 + 98) = (v58 | (v59 << 16)) >> 16;
        *((_WORD *)v14 + 48) = v58;
        *((unsigned char *)v14 + 99) = v63;
      }
      v11 += 72;
      --v9;
      uint64_t v10 = v52;
    }
    while (v9);
    swift_bridgeObjectRelease();
    uint64_t v8 = v50;
    id v23 = v53;
    int64_t v24 = v53[2];
    if (v24)
    {
LABEL_17:
      aBlock[0] = _swiftEmptyArrayStorage;
      id v25 = v23;
      sub_1002557FC(0, v24, 0);
      uint64_t v26 = _swiftEmptyArrayStorage;
      unint64_t v27 = v25 + 7;
      do
      {
        uint64_t v29 = *(v27 - 3);
        uint64_t v28 = *(v27 - 2);
        uint64_t v30 = *(v27 - 1);
        uint64_t v31 = *v27;
        aBlock[0] = v26;
        unint64_t v33 = v26[2];
        unint64_t v32 = v26[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v33 >= v32 >> 1)
        {
          sub_1002557FC(v32 > 1, v33 + 1, 1);
          uint64_t v26 = aBlock[0];
        }
        v26[2] = v33 + 1;
        uint64_t v34 = &v26[4 * v33];
        v34[4] = v29;
        v34[5] = v28;
        v34[6] = v30;
        v34[7] = v31;
        v27 += 9;
        --v24;
      }
      while (v24);
      swift_release();
      uint64_t v8 = v50;
      if (v26[2]) {
        goto LABEL_22;
      }
      goto LABEL_25;
    }
  }
  else
  {
    id v23 = _swiftEmptyArrayStorage;
    int64_t v24 = _swiftEmptyArrayStorage[2];
    if (v24) {
      goto LABEL_17;
    }
  }
  swift_release();
  uint64_t v26 = _swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2])
  {
LABEL_22:
    uint64_t v35 = sub_100259698((uint64_t)v26);
    swift_bridgeObjectRelease();
    sub_10057CE18(v35);
    goto LABEL_26;
  }
LABEL_25:
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = 0;
  uint64_t v5 = v36 + 16;
  uint64_t v37 = sub_10045C500(a1, a2, a3, a4);
  uint64_t v38 = sub_1005A532C((uint64_t)v37);
  unint64_t v40 = v39;
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100250CC4(v38, v40);
  uint64_t v42 = *(void **)(v49 + 16);
  uint64_t v43 = (void *)swift_allocObject();
  v43[2] = v49;
  v43[3] = v8;
  v43[4] = v36;
  aBlock[4] = sub_1005A73E4;
  void aBlock[5] = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100581648;
  id aBlock[3] = &unk_1008E0078;
  uint64_t v44 = _Block_copy(aBlock);
  id v45 = v42;
  uint64_t v46 = isa;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  LODWORD(v40) = [v45 enumerateValuesForKey:v46 error:aBlock handler:v44];
  _Block_release(v44);

  id v47 = aBlock[0];
  if (v40)
  {
    swift_beginAccess();
    if (*(void *)v5)
    {
      swift_errorRetain();
      swift_willThrow();
      swift_release();
      swift_release();
    }
    else
    {

      swift_beginAccess();
      uint64_t v5 = *(void *)(v8 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
    }
  }
  else
  {
    uint64_t v48 = v47;
    uint64_t v5 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();
    swift_release();
  }
  return v5;
}

uint64_t sub_100581468(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;
  uint64_t v8 = sub_1005A53C8(v5, v6);
  uint64_t v10 = v9;
  Swift::Int v12 = v11;
  Swift::Int v14 = v13;
  sub_100250CC4(v5, v7);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a3 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10057BE20(v8, v10, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v17 = *(void *)(a3 + 32);
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    Swift::UInt64 v19 = (void *)(v17 + 40);
    do
    {
      BOOL v20 = *(v19 - 1) == v8 && *v19 == v10;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_10;
      }
      v19 += 9;
    }
    while (--v18);
  }
  if (v16)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  sub_100597E48(&v22, v8, v10, v14, v12);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = 0;
  return result;
}

void sub_100581648(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

DaemoniOSLibrary::SDHashStoreContact_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.contact(forMediumHash:)(DaemoniOSLibrary::MediumHash forMediumHash)
{
  if (*(unsigned char *)(v2 + 48) != 1)
  {
    uint64_t v7 = 1;
    goto LABEL_5;
  }
  unint64_t v6 = *(unsigned __int8 *)(v2 + 49);
  if (v6)
  {
    uint64_t v7 = 2;
LABEL_5:
    sub_1005676DC();
    swift_allocError();
    *uint64_t v8 = v7;
    swift_willThrow();
    goto LABEL_6;
  }
  int v13 = *(_DWORD *)&forMediumHash.shortHash.storage;
  Swift::Int v14 = sub_10057BAC4(*(int *)&forMediumHash.shortHash.storage, 2uLL, v1, v6);
  uint64_t v15 = sub_1005A532C((uint64_t)v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  v18.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100250CC4(v15, v17);
  if ([*(id *)(v2 + 16) valueExistsForKey:v18.super.isa])
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    BOOL v20 = *(void **)(v2 + 16);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v2;
    *(_WORD *)(v21 + 24) = v13;
    *(unsigned char *)(v21 + 26) = BYTE2(v13);
    *(void *)(v21 + 32) = v19;
    *(void *)(v21 + 40) = v3;
    aBlock[4] = sub_1005A7438;
    void aBlock[5] = (id)v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_100581648;
    id aBlock[3] = &unk_1008E00F0;
    Swift::Int v22 = _Block_copy(aBlock);
    id v4 = v20;
    uint64_t v5 = v18.super.isa;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    unsigned int v23 = [v4 enumerateValuesForKey:v5 error:aBlock handler:v22];
    _Block_release(v22);

    id v24 = aBlock[0];
    if (v23)
    {
      uint64_t v7 = v3 + 16;
      swift_beginAccess();
      if (*(void *)(v3 + 16))
      {
        swift_errorRetain();
        swift_willThrow();
      }
      else
      {

        swift_beginAccess();
        uint64_t v7 = *(void *)(v19 + 16);
        uint64_t v3 = *(void *)(v19 + 24);
        id v4 = *(id *)(v19 + 32);
        uint64_t v5 = *(objc_class **)(v19 + 40);
        sub_1005A7450(v7, v3);
      }
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v7 = (uint64_t)v24;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();
      swift_release();
    }
  }
  else
  {

    uint64_t v7 = 0;
    uint64_t v3 = 0;
    id v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_6:
  uint64_t v9 = v7;
  uint64_t v10 = (void *)v3;
  uint64_t v11 = (uint64_t)v4;
  Swift::Int v12 = v5;
  result.value.emailOrPhone._object = v12;
  result.value.emailOrPhone._uint64_t countAndFlagsBits = v11;
  result.value.id._object = v10;
  result.value.id._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t sub_100581A1C(uint64_t a1, unsigned char *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;
  sub_1005A79C4(v9, v10, a4, (uint64_t)&v27);
  int v12 = v27;
  int v13 = v28;
  uint64_t v15 = v29;
  uint64_t v14 = v30;
  uint64_t v25 = v31;
  uint64_t v26 = v32;
  sub_100250CC4(v9, v11);
  if (v12 == (unsigned __int16)a4 && v13 == BYTE2(a4))
  {
    swift_beginAccess();
    uint64_t v16 = *(void *)(a3 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v17 = sub_10057BE20(v15, v14, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v18 = *(void *)(a3 + 32);
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      BOOL v20 = (void *)(v18 + 40);
      do
      {
        BOOL v21 = *(v20 - 1) == v15 && *v20 == v14;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_12;
        }
        v20 += 9;
      }
      while (--v19);
    }
    if (v17)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    uint64_t v23 = a5[2];
    uint64_t v24 = a5[3];
    a5[2] = v15;
    a5[3] = v14;
    a5[4] = v25;
    a5[5] = v26;
    uint64_t result = sub_1005678C8(v23, v24);
    *a2 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *SDAirDropHashStoreCDB.contacts(forMediumHash:)(int a1)
{
  if (*(unsigned char *)(v1 + 48) != 1)
  {
    char v3 = 1;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v1 + 49))
  {
    char v3 = 2;
LABEL_5:
    sub_1005676DC();
    swift_allocError();
    *id v4 = v3;
    swift_willThrow();
    return v2;
  }
  int v5 = a1;
  int v50 = BYTE2(a1);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = &_swiftEmptySetSingleton;
  swift_beginAccess();
  uint64_t v48 = v1;
  uint64_t v6 = *(void *)(*(void *)(v1 + 32) + 16);
  int v52 = v5;
  if (v6)
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v9 = _swiftEmptyArrayStorage;
    int v10 = v50;
    uint64_t v51 = v7;
    do
    {
      uint64_t v15 = v7 + v8;
      if ((*(unsigned char *)(v7 + v8 + 99) & 1) == 0)
      {
        int v16 = *(unsigned __int16 *)(v15 + 96) | (*(unsigned __int8 *)(v15 + 98) << 16);
        if (*(unsigned __int16 *)(v15 + 96) == (unsigned __int16)v5 && *(unsigned __int8 *)(v15 + 98) == v10)
        {
          uint64_t v18 = *(void *)(v15 + 32);
          uint64_t v19 = *(void *)(v15 + 40);
          uint64_t v21 = *(void *)(v15 + 48);
          uint64_t v20 = *(void *)(v15 + 56);
          long long v54 = *(_OWORD *)(v15 + 80);
          long long v55 = *(_OWORD *)(v15 + 64);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          aBlock[0] = v9;
          uint64_t v53 = v21;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002557BC(0, v9[2] + 1, 1);
            int v10 = v50;
            uint64_t v9 = (uint64_t *)aBlock[0];
          }
          unint64_t v12 = v9[2];
          unint64_t v11 = v9[3];
          int v13 = v9;
          if (v12 >= v11 >> 1)
          {
            sub_1002557BC(v11 > 1, v12 + 1, 1);
            int v10 = v50;
            int v13 = (uint64_t *)aBlock[0];
          }
          void v13[2] = v12 + 1;
          uint64_t v14 = (char *)&v13[9 * v12];
          *((void *)v14 + 4) = v18;
          *((void *)v14 + 5) = v19;
          *((void *)v14 + 6) = v53;
          *((void *)v14 + 7) = v20;
          *((_OWORD *)v14 + 4) = v55;
          *((_OWORD *)v14 + 5) = v54;
          v14[98] = BYTE2(v16);
          *((_WORD *)v14 + 48) = v16;
          v14[99] = 0;
          int v5 = v52;
          uint64_t v9 = v13;
          uint64_t v7 = v51;
        }
      }
      v8 += 72;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    int64_t v22 = v9[2];
    if (v22)
    {
LABEL_21:
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_1002557FC(0, v22, 0);
      uint64_t v23 = _swiftEmptyArrayStorage;
      uint64_t v24 = v9 + 7;
      do
      {
        uint64_t v26 = *(v24 - 3);
        uint64_t v25 = *(v24 - 2);
        uint64_t v27 = *(v24 - 1);
        uint64_t v28 = *v24;
        aBlock[0] = v23;
        unint64_t v30 = v23[2];
        unint64_t v29 = v23[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v30 >= v29 >> 1)
        {
          sub_1002557FC(v29 > 1, v30 + 1, 1);
          uint64_t v23 = aBlock[0];
        }
        v23[2] = v30 + 1;
        uint64_t v31 = &v23[4 * v30];
        v31[4] = v26;
        v31[5] = v25;
        v31[6] = v27;
        v31[7] = v28;
        v24 += 9;
        --v22;
      }
      while (v22);
      swift_release();
      int v5 = v52;
      if (v23[2]) {
        goto LABEL_26;
      }
LABEL_29:
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    int64_t v22 = _swiftEmptyArrayStorage[2];
    if (v22) {
      goto LABEL_21;
    }
  }
  swift_release();
  uint64_t v23 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v32 = sub_100259698((uint64_t)v23);
  swift_bridgeObjectRelease();
  sub_10057CE18(v32);
LABEL_30:
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = 0;
  uint64_t v35 = sub_10057BAC4(v5, 2uLL, v34, v33 + 16);
  uint64_t v36 = sub_1005A532C((uint64_t)v35);
  unint64_t v38 = v37;
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100250CC4(v36, v38);
  unint64_t v40 = *(void **)(v48 + 16);
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v48;
  *(_WORD *)(v41 + 24) = v5;
  *(unsigned char *)(v41 + 26) = v50;
  *(void *)(v41 + 32) = v49;
  *(void *)(v41 + 40) = v33;
  aBlock[4] = sub_1005A74E0;
  void aBlock[5] = (id)v41;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100581648;
  id aBlock[3] = &unk_1008E0140;
  uint64_t v2 = _Block_copy(aBlock);
  id v42 = v40;
  uint64_t v43 = isa;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v44 = [v42 enumerateValuesForKey:v43 error:aBlock handler:v2];
  _Block_release(v2);

  id v45 = aBlock[0];
  if (v44)
  {
    swift_beginAccess();
    if (!*(void *)(v33 + 16))
    {

      swift_beginAccess();
      uint64_t v2 = *(void **)(v49 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      return v2;
    }
    swift_errorRetain();
  }
  else
  {
    uint64_t v46 = v45;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  swift_release();
  swift_release();

  return v2;
}

uint64_t sub_100582194(uint64_t a1, unsigned char *a2, uint64_t a3, int a4)
{
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;
  sub_1005A79C4(v7, v8, a4, (uint64_t)v23);
  int v10 = LOWORD(v23[0]);
  int v11 = BYTE2(v23[0]);
  uint64_t v13 = v23[1];
  uint64_t v12 = v23[2];
  Swift::Int v21 = v23[3];
  Swift::Int v22 = v23[4];
  sub_100250CC4(v7, v9);
  if (v10 == (unsigned __int16)a4 && v11 == BYTE2(a4))
  {
    swift_beginAccess();
    uint64_t v14 = *(void *)(a3 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v15 = sub_10057BE20(v13, v12, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v16 = *(void *)(a3 + 32);
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = (void *)(v16 + 40);
      do
      {
        BOOL v19 = *(v18 - 1) == v13 && *v18 == v12;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_12;
        }
        v18 += 9;
      }
      while (--v17);
    }
    if (v15)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    sub_100597E48(v23, v13, v12, v21, v22);
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.contains(shortHash:)(DaemoniOSLibrary::ShortHash shortHash)
{
  if (*(unsigned char *)(v1 + 48) != 1)
  {
    unsigned __int8 v2 = 1;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v1 + 49))
  {
    unsigned __int8 v2 = 2;
LABEL_5:
    sub_1005676DC();
    swift_allocError();
    *char v3 = v2;
    swift_willThrow();
    return v2 & 1;
  }
  int v5 = *(_DWORD *)&shortHash;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    unint64_t v8 = (unsigned char *)(v6 + 99);
    while ((*v8 & 1) != 0 || *(unsigned __int16 *)(v8 - 3) != (unsigned __int16)v5)
    {
      v8 += 72;
      if (!--v7) {
        goto LABEL_13;
      }
    }
    unsigned __int8 v2 = 1;
  }
  else
  {
LABEL_13:
    id v9 = *(id *)(v1 + 16);
    uint64_t v12 = sub_10057BAC4(v5, 2uLL, v10, v11);
    uint64_t v13 = sub_1005A532C((uint64_t)v12);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100250CC4(v13, v15);
    unsigned __int8 v2 = [v9 valueExistsForKey:isa];
  }
  return v2 & 1;
}

uint64_t SDAirDropHashStoreCDB.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SDAirDropHashStoreCDB.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void sub_1005825AC()
{
}

void sub_1005825C4(Swift::OpaquePointer a1)
{
}

void sub_1005825DC(uint64_t a1, uint64_t a2)
{
}

void sub_1005825F4()
{
}

void sub_10058260C()
{
}

void sub_100582624()
{
}

void sub_10058263C()
{
}

uint64_t SDAirDropHashStoreCDB.dumpDB(atFileURL:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0xE000000000000000;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0xE000000000000000;
  uint64_t v6 = *(void **)(v2 + 16);
  sub_10000B740(0, (unint64_t *)&qword_10096A1C0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = v2;
  v8[3] = v4;
  v8[4] = v5;
  aBlock[4] = sub_1005A759C;
  void aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1005805A8;
  id aBlock[3] = &unk_1008E01B8;
  id v9 = _Block_copy(aBlock);
  id v10 = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v10 enumerateKeyType:ObjCClassFromMetadata valueType:ObjCClassFromMetadata error:aBlock handler:v9];
  _Block_release(v9);

  id v12 = aBlock[0];
  if (!v11)
  {
    uint64_t v13 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t v15 = *(void *)(v4 + 16);
  unint64_t v14 = *(void **)(v4 + 24);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v5 + 16);
  uint64_t v16 = *(void **)(v5 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1005A75A8(a1, v15, v14, v17, v16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_100582AA4(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  uint64_t result = SDAirDropHashStoreCDB.contact(forLongHash:)(a1, a2, a3, a4);
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_100582AD0(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  return SDAirDropHashStoreCDB.contacts(forLongHash:)(a1, a2, a3, a4);
}

unint64_t sub_100582AE8(int a1)
{
  int v1 = a1 & 0xFFFFFF;
  unint64_t result = (unint64_t)SDAirDropHashStoreCDB.contact(forMediumHash:)((DaemoniOSLibrary::MediumHash)v1);
  if (v4) {
    return v3;
  }
  return result;
}

void *sub_100582B18(int a1)
{
  return SDAirDropHashStoreCDB.contacts(forMediumHash:)(a1 & 0xFFFFFF);
}

BOOL sub_100582B34(DaemoniOSLibrary::ShortHash a1)
{
  return SDAirDropHashStoreCDB.contains(shortHash:)(a1);
}

uint64_t sub_100582B50()
{
  uint64_t v0 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;
  uint64_t v6 = sub_1005A7AF4(v0, v2, v3, v4);
  switch(v2 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v0), v0)) {
        goto LABEL_5;
      }
      __break(1u);
LABEL_7:
      __break(1u);
      JUMPOUT(0x100582D68);
    case 2uLL:
      if (!__OFSUB__(*(void *)(v0 + 24), *(void *)(v0 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_7;
    default:
LABEL_5:
      v10._uint64_t countAndFlagsBits = v6;
      v10._object = v7;
      swift_bridgeObjectRetain();
      v8._uint64_t countAndFlagsBits = 10;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      String.append(_:)(v10);
      swift_endAccess();
      sub_100250CC4(v3, v5);
      sub_100250CC4(v0, v2);
      return swift_bridgeObjectRelease();
  }
}

void *sub_100582D78(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *), unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 < 0) {
    goto LABEL_74;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = _swiftEmptyArrayStorage;
  unint64_t v12 = a6 >> 62;
  unint64_t v13 = v11;
  uint64_t v14 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      uint64_t v14 = (int)a5;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(a5 + 16);
      break;
    default:
      break;
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  if (a1)
  {
    uint64_t v16 = 0;
    switch((int)v12)
    {
      case 0:
        if ((a6 & 0xFF000000000000) == 0)
        {
LABEL_13:
          uint64_t v16 = BYTE6(a6);
          goto LABEL_16;
        }
        uint64_t v17 = BYTE6(a6);
LABEL_19:
        char v46 = a2;
        uint64_t v49 = v15;
        unint64_t v45 = v13;
        if (v14 == v17)
        {
          uint64_t v18 = _swiftEmptyArrayStorage;
LABEL_21:
          if (v14 == v17 && (v46 & 1) != 0)
          {
            sub_100250CC4(a5, a6);
          }
          else
          {
            if (v17 < v14) {
              goto LABEL_75;
            }
            unint64_t v13 = Data._Representation.subscript.getter();
            uint64_t v19 = v32;
            sub_100250CC4(a5, a6);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_71:
            }
              uint64_t v18 = sub_100254118(0, v18[2] + 1, 1, v18);
            unint64_t v34 = v18[2];
            unint64_t v33 = v18[3];
            if (v34 >= v33 >> 1) {
              uint64_t v18 = sub_100254118((void *)(v33 > 1), v34 + 1, 1, v18);
            }
            v18[2] = v34 + 1;
            uint64_t v35 = &v18[2 * v34];
            v35[4] = v13;
            v35[5] = v19;
            *(void *)(v45 + 16) = v18;
          }
          swift_bridgeObjectRetain();
          swift_release();
          goto LABEL_61;
        }
        uint64_t v37 = a1;
        uint64_t v48 = a6 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v43 = BYTE6(a6);
        uint64_t v18 = _swiftEmptyArrayStorage;
        unint64_t v42 = a6 >> 8;
        unint64_t v40 = a6 >> 24;
        unint64_t v41 = a6 >> 16;
        uint64_t v19 = v14;
        unint64_t v38 = a6 >> 40;
        unint64_t v39 = HIDWORD(a6);
        uint64_t v50 = v17;
        unint64_t v47 = a6;
        break;
      case 1:
        if ((a5 ^ (unint64_t)(a5 << 32)) >> 32) {
          goto LABEL_18;
        }
LABEL_14:
        uint64_t v16 = a5 >> 32;
        goto LABEL_16;
      case 2:
        uint64_t v17 = *(void *)(a5 + 24);
        if (*(void *)(a5 + 16) == v17) {
          goto LABEL_12;
        }
        if (v12 != 2) {
LABEL_18:
        }
          uint64_t v17 = a5 >> 32;
        goto LABEL_19;
      case 3:
        goto LABEL_16;
      default:
        JUMPOUT(0);
    }
    while (1)
    {
      if (v12)
      {
        if (v12 == 1)
        {
          if (v19 < (int)a5 || v19 >= a5 >> 32) {
            goto LABEL_67;
          }
          uint64_t v20 = __DataStorage._bytes.getter();
          if (!v20)
          {
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_75:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1005833DCLL);
          }
          uint64_t v21 = v20;
          unint64_t v13 = v48;
          uint64_t v22 = __DataStorage._offset.getter();
          uint64_t v23 = v19 - v22;
          if (__OFSUB__(v19, v22)) {
            goto LABEL_69;
          }
        }
        else
        {
          if (v19 < *(void *)(a5 + 16))
          {
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
            goto LABEL_71;
          }
          if (v19 >= *(void *)(a5 + 24)) {
            goto LABEL_68;
          }
          uint64_t v25 = __DataStorage._bytes.getter();
          if (!v25) {
            goto LABEL_73;
          }
          uint64_t v21 = v25;
          unint64_t v13 = v48;
          uint64_t v26 = __DataStorage._offset.getter();
          uint64_t v23 = v19 - v26;
          if (__OFSUB__(v19, v26)) {
            goto LABEL_70;
          }
        }
        char v24 = *(unsigned char *)(v21 + v23);
        a6 = v47;
      }
      else
      {
        if (v19 >= v43) {
          goto LABEL_66;
        }
        uint64_t v53 = a5;
        char v54 = a6;
        char v55 = v42;
        char v56 = v41;
        char v57 = v40;
        char v58 = v39;
        char v59 = v38;
        char v24 = *((unsigned char *)&v53 + v19);
      }
      LOBYTE(v53) = v24;
      unint64_t v13 = a4;
      char v27 = a3(&v53);
      if (v6)
      {
        sub_100250CC4(a5, a6);
        swift_release();
        swift_release();
        return v18;
      }
      if ((v27 & 1) == 0) {
        break;
      }
      if (v14 == v19 && (v46 & 1) != 0)
      {
        *(void *)(v49 + 16) = ++v19;
        uint64_t v14 = v19;
        goto LABEL_26;
      }
      if (v19 < v14) {
        goto LABEL_75;
      }
      uint64_t v44 = Data._Representation.subscript.getter();
      uint64_t v29 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = sub_100254118(0, v18[2] + 1, 1, v18);
      }
      unint64_t v13 = v18[2];
      unint64_t v30 = v18[3];
      uint64_t v17 = v50;
      if (v13 >= v30 >> 1)
      {
        uint64_t v18 = sub_100254118((void *)(v30 > 1), v13 + 1, 1, v18);
        uint64_t v17 = v50;
      }
      v18[2] = v13 + 1;
      uint64_t v31 = &v18[2 * v13];
      v31[4] = v44;
      v31[5] = v29;
      *(void *)(v45 + 16) = v18;
      *(void *)(v49 + 16) = ++v19;
      if (v18[2] == v37)
      {
        uint64_t v14 = v19;
        goto LABEL_21;
      }
      uint64_t v14 = v19;
LABEL_27:
      if (v19 == v17) {
        goto LABEL_21;
      }
    }
    ++v19;
LABEL_26:
    uint64_t v17 = v50;
    goto LABEL_27;
  }
LABEL_12:
  uint64_t v16 = 0;
  switch((int)v12)
  {
    case 1:
      goto LABEL_14;
    case 2:
      uint64_t v16 = *(void *)(a5 + 24);
      break;
    case 3:
      break;
    default:
      goto LABEL_13;
  }
LABEL_16:
  sub_10058340C(v16, v15, a2 & 1, v13);
  sub_100250CC4(a5, a6);
  uint64_t v18 = *(void **)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_release();
LABEL_61:
  swift_release();
  return v18;
}

uint64_t sub_10058340C(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = (v5 == a1) & a3;
  if (v6 == 1) {
    return v6 ^ 1u;
  }
  if (v5 <= a1)
  {
    uint64_t v8 = Data._Representation.subscript.getter();
    uint64_t v10 = v9;
    uint64_t v11 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = sub_100254118(0, v11[2] + 1, 1, v11);
      *(void *)(a4 + 16) = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1) {
      uint64_t v11 = sub_100254118((void *)(v13 > 1), v14 + 1, 1, v11);
    }
    v11[2] = v14 + 1;
    uint64_t v15 = &v11[2 * v14];
    v15[4] = v8;
    v15[5] = v10;
    *(void *)(a4 + 16) = v11;
    return v6 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10058354C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = sub_10031B5A0(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

unint64_t sub_1005836C4(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100583D5C(a1, v2);
}

unint64_t sub_100583758(Swift::UInt32 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100583ED4(a1, v2);
}

unint64_t sub_1005837C4(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_1005A81E8(&qword_10096B8A0, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100583F70(a1, v2);
}

unint64_t sub_100583878(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1005840CC(a1, v4);
}

uint64_t sub_1005838BC(uint64_t a1, uint64_t a2)
{
  return sub_100583C80(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
}

unint64_t sub_1005838E8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100584278(a1, v4);
}

unint64_t sub_10058392C(uint64_t a1)
{
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1005A81E8(&qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100584394(a1, v2, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_100979E48, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

unint64_t sub_100583A00(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100584394(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&unk_10096D460, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_100583AD4(uint64_t a1)
{
  type metadata accessor for URL();
  sub_1005A81E8(&qword_10096B5A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100584394(a1, v2, (uint64_t (*)(void))&type metadata accessor for URL, &qword_100979F90, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_100583BA8(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100584534(a1, v2);
}

unint64_t sub_100583C14(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_1005845D4(a1, v2);
}

uint64_t sub_100583C80(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

unint64_t sub_100583D14(int a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_100583ED4(a1, v2);
}

unint64_t sub_100583D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100583ED4(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100583F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1005A81E8(&qword_10096B8A0, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1005840CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1002AF920(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10025B0A8((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100584194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100584278(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10000B740(0, (unint64_t *)&unk_10096BA70);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100584394(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  char v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_1005A81E8(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_100584534(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1005845D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100584670(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_10025ADCC(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              sub_100250CC4(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_127;
                  }
                  uint64_t v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  uint64_t v29 = 0;
                }
                __DataStorage._length.getter();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_155;
                  }
                  int v46 = memcmp(v29, __s1, __n);
LABEL_102:
                  sub_100250CC4(v14, v13);
                  uint64_t v10 = v87;
                  if (!v46) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v47 = __DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_143;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = __DataStorage._length.getter();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_148;
                  }
                  if (!v47) {
                    goto LABEL_149;
                  }
                  size_t v39 = v50;
                  unint64_t v40 = v29;
                  unint64_t v38 = (const void *)v47;
LABEL_71:
                  int v46 = memcmp(v40, v38, v39);
                  sub_100250CC4(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = __DataStorage._bytes.getter();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = __DataStorage._offset.getter();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_142;
                  }
                  unint64_t v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  unint64_t v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_137;
                }
                uint64_t v74 = __DataStorage._length.getter();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_156;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_157;
                }
                int v62 = memcmp(v29, v73, v75);
LABEL_115:
                swift_release();
LABEL_116:
                swift_release();
                sub_100250CC4(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_126;
                  }
                  unint64_t v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  unint64_t v34 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_152;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  unint64_t v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v43)) {
                      goto LABEL_141;
                    }
                    v42 += v84 - v43;
                  }
                  uint64_t v44 = __DataStorage._length.getter();
                  size_t v45 = v79;
                  if (v44 < v79) {
                    size_t v45 = v44;
                  }
                  if (!v34) {
                    goto LABEL_146;
                  }
                  if (!v42) {
                    goto LABEL_147;
                  }
                  int v46 = memcmp(v34, v42, v45);
                  unint64_t v8 = a2;
                  sub_100250CC4(a1, a2);
                  swift_release();
                  swift_release();
                  goto LABEL_102;
                }
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                unint64_t v64 = (char *)__DataStorage._bytes.getter();
                if (v64)
                {
                  uint64_t v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v65)) {
                    goto LABEL_140;
                  }
                  v64 += v63 - v65;
                }
                BOOL v21 = __OFSUB__(v77, v63);
                int64_t v66 = v77 - v63;
                if (v21) {
                  goto LABEL_135;
                }
                uint64_t v67 = __DataStorage._length.getter();
                if (v67 >= v66) {
                  size_t v68 = v66;
                }
                else {
                  size_t v68 = v67;
                }
                if (!v34) {
                  goto LABEL_153;
                }
                uint64_t v4 = v83;
                if (!v64) {
                  goto LABEL_154;
                }
                int v62 = memcmp(v34, v64, v68);
                swift_release();
                swift_release();
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  sub_10025ADCC(a1, v8);
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_134;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  unint64_t v38 = (const void *)(v23 + v25);
                  if (v37 >= v79) {
                    size_t v39 = v79;
                  }
                  else {
                    size_t v39 = v37;
                  }
                  unint64_t v40 = __s1;
                  goto LABEL_71;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v59 = __DataStorage._offset.getter();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_139;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_151;
                }
LABEL_83:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                sub_100250CC4(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v41 = memcmp(__s1, &__s2, __n);
                  sub_100250CC4(v14, v13);
                  if (!v41) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_128;
                  }
                  sub_10025ADCC(a1, v8);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x100584FDCLL);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_138;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_131;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_150;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            sub_100250CC4(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

uint64_t sub_10058500C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844(&qword_10096ABE0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v34 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v34 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    uint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    uint64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2)
    {
      sub_100249444(v23, v35);
    }
    else
    {
      sub_10024D2D4((uint64_t)v23, (uint64_t)v35);
      id v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFString(0);
    sub_1005A81E8(&qword_10096B8A0, type metadata accessor for CFString);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)sub_100249444(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  uint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100585348(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844(&qword_10096A9F0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_100249444((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_1002AF920(v25, (uint64_t)&v38);
      sub_10024D2D4(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_100249444(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100585660(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844((uint64_t *)&unk_10096BB70);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_100249444(v24, v35);
      }
      else
      {
        sub_10024D2D4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_100249444(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100585960(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000A844(&qword_100979E58);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  unint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    sub_1005A81E8(&qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100585D84(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844((uint64_t *)&unk_10097D480);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 48 * v17);
    if (v37)
    {
      sub_1002AD354(v25, v38);
    }
    else
    {
      sub_1003CF0DC((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = (uint64_t)sub_1002AD354(v38, (_OWORD *)(*(void *)(v7 + 56) + 48 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1005860AC(uint64_t a1, int a2)
{
  return sub_100588270(a1, a2, &qword_100979E20);
}

uint64_t sub_1005860B8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000A844(&qword_100979E28);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  unint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1005864DC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000A844(&qword_100979E38);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  int64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    int64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      unint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      unint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    int64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *int64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  int64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_10058691C(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v56 = a3(0);
  uint64_t v8 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  int64_t v55 = (char *)&v45 - v9;
  uint64_t v10 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  sub_10000A844(a4);
  int v53 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  int v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = v8 + 16;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v8;
  uint64_t v52 = v11;
  unint64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  uint64_t v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v46) {
      break;
    }
    unint64_t v29 = v47;
    unint64_t v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v30 = v47[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v46) {
              goto LABEL_34;
            }
            unint64_t v30 = v47[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v52 + 72);
    unint64_t v33 = *(void *)(v14 + 48) + v32 * v27;
    if (v53)
    {
      (*v21)(v13, v33, v10);
      uint64_t v34 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 32))(v55, v34 + v35 * v27, v56);
    }
    else
    {
      (*v49)(v13, v33, v10);
      uint64_t v36 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v55, v36 + v35 * v27, v56);
    }
    sub_1005A81E8(&qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v21)((char *)(*(void *)(v16 + 48) + v32 * v25), (unint64_t)v13, v10);
    uint64_t result = (*v54)(*(void *)(v16 + 56) + v35 * v25, v55, v56);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v6 = v45;
  unint64_t v29 = v47;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v14 + 32);
  if (v44 >= 64) {
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v29 = -1 << v44;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v16;
  return result;
}

uint64_t sub_100586E18(uint64_t a1, char a2)
{
  return sub_10058A2C4(a1, a2, (uint64_t *)&unk_10096AA00);
}

uint64_t sub_100586E24(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844(&qword_10096AE78);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    int64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1005870F8(uint64_t a1, int a2)
{
  return sub_100587140(a1, a2, type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_100979F40, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint);
}

uint64_t sub_100587140(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  int v47 = a6;
  uint64_t v50 = a5;
  uint64_t v8 = v6;
  uint64_t v10 = a3(0);
  uint64_t v48 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = *v6;
  sub_10000A844(a4);
  int v49 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  int64_t v46 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1 << v16);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v44 = v6;
  int64_t v45 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v26 = v25 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v45) {
      break;
    }
    BOOL v28 = v46;
    unint64_t v29 = v46[v27];
    ++v22;
    if (!v29)
    {
      int64_t v22 = v27 + 1;
      if (v27 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v29 = v46[v22];
      if (!v29)
      {
        int64_t v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v8 = v44;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            int64_t v22 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v45) {
              goto LABEL_34;
            }
            unint64_t v29 = v46[v22];
            ++v30;
            if (v29) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v30;
      }
    }
LABEL_21:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_22:
    int64_t v31 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v26);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = *(void *)(v48 + 72);
    uint64_t v35 = *(void *)(v13 + 56) + v34 * v26;
    if (v49)
    {
      sub_1005A8158(v35, (uint64_t)v12, v50);
    }
    else
    {
      sub_1005A80F0(v35, (uint64_t)v12, v47);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v37) & ~*(void *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v20 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v23 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v24 = (void *)(*(void *)(v15 + 48) + 16 * v23);
    *unint64_t v24 = v33;
    v24[1] = v32;
    uint64_t result = sub_1005A8158((uint64_t)v12, *(void *)(v15 + 56) + v34 * v23, v50);
    ++*(void *)(v15 + 16);
  }
  swift_release();
  uint64_t v8 = v44;
  BOOL v28 = v46;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v13 + 32);
  if (v43 >= 64) {
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v28 = -1 << v43;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v8 = v15;
  return result;
}

uint64_t sub_1005874F8(uint64_t a1, char a2)
{
  return sub_10058A2C4(a1, a2, &qword_10096ACC0);
}

uint64_t sub_100587504(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844(&qword_10096AC98);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10058782C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10000A844(&qword_100979F98);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  int64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  uint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    int64_t v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_1005A81E8(&qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  int64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100587D2C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  uint64_t v49 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v54 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10000A844(&qword_100979E50);
  int v50 = a2;
  uint64_t v11 = v10;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  int64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  int v47 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v53 = v7;
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v48 = v11;
  int64_t v21 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45) {
      break;
    }
    int64_t v26 = v46;
    unint64_t v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v27 = v46[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v45) {
              goto LABEL_34;
            }
            unint64_t v27 = v46[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
    int64_t v21 = v51;
LABEL_22:
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 72);
    unint64_t v31 = *(void *)(v11 + 48) + v30 * v24;
    if (v50)
    {
      (*v52)(v21, v31, v53);
      uint64_t v32 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_1005A8158(v32 + v33 * v24, v54, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    }
    else
    {
      (*v47)(v21, v31, v53);
      uint64_t v34 = *(void *)(v11 + 56);
      uint64_t v33 = *(void *)(v49 + 72);
      sub_1005A80F0(v34 + v33 * v24, v54, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    }
    sub_1005A81E8(&qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v35 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      int64_t v21 = v51;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      int64_t v21 = v51;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v18 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v52)((char *)(*(void *)(v13 + 48) + v30 * v22), (unint64_t)v21, v53);
    uint64_t result = sub_1005A8158(v54, *(void *)(v13 + 56) + v33 * v22, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v48;
    uint64_t v8 = v29;
  }
  swift_release();
  uint64_t v3 = v44;
  int64_t v26 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v11 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v26 = -1 << v42;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100588244(uint64_t a1, int a2)
{
  return sub_100588F18(a1, a2, &qword_100979F20, (void (*)(unint64_t, unsigned char *))sub_1002AF688);
}

uint64_t sub_100588264(uint64_t a1, int a2)
{
  return sub_100588270(a1, a2, &qword_100979F88);
}

uint64_t sub_100588270(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  sub_10000A844(a3);
  int v47 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    BOOL v40 = v3;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    uint64_t v42 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v41 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v7 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v44 = v10;
    int64_t v45 = v9;
    while (1)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v41) {
          goto LABEL_34;
        }
        unint64_t v24 = v42[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v24 = v42[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v5 = v40;
              if (v47)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v10 + 32);
                if (v38 >= 64) {
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v42 = -1 << v38;
                }
                *(void *)(v10 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v42[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v24 = v42[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = v7;
      uint64_t v27 = *(void *)(v7 + 72);
      unint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
      uint64_t v29 = v45;
      uint64_t v30 = v46;
      if (v47)
      {
        (*v48)(v45, v28, v46);
        long long v49 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
      }
      else
      {
        (*v43)(v45, v28, v46);
        long long v49 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
        swift_unknownObjectRetain();
      }
      sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v17 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v32) & ~*(void *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v17 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v20 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v12 + 48) + v27 * v20, v29, v30);
      *(_OWORD *)(*(void *)(v12 + 56) + 16 * v20) = v49;
      ++*(void *)(v12 + 16);
      uint64_t v7 = v26;
      uint64_t v10 = v44;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v5 = v12;
  return result;
}

uint64_t sub_10058869C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for SFNWInterfaceType();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10000A844(&qword_10096AC08);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  uint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    uint64_t v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  uint64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_100588B98(uint64_t a1, char a2)
{
  return sub_10058ACDC(a1, a2, &qword_100979F08);
}

uint64_t sub_100588BA4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844(&qword_10096AAA0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100588EB0(uint64_t a1, int a2)
{
  return sub_100587140(a1, a2, type metadata accessor for RegistrationState, &qword_10096AB20, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState);
}

uint64_t sub_100588EF8(uint64_t a1, int a2)
{
  return sub_100588F18(a1, a2, &qword_100979E90, (void (*)(unint64_t, unsigned char *))sub_1002AF688);
}

uint64_t sub_100588F18(uint64_t a1, int a2, uint64_t *a3, void (*a4)(unint64_t, unsigned char *))
{
  uint64_t v51 = a4;
  uint64_t v6 = v4;
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v4;
  sub_10000A844(a3);
  int v49 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v4;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  int v50 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  uint64_t v46 = v11;
  int v47 = v10;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v43) {
      break;
    }
    char v25 = v44;
    unint64_t v26 = v44[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v26 = v44[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v42;
          if ((v49 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v43) {
              goto LABEL_34;
            }
            unint64_t v26 = v44[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = v8;
    uint64_t v29 = *(void *)(v8 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v23;
    uint64_t v31 = v47;
    uint64_t v32 = v48;
    if (v49)
    {
      (*v50)(v47, v30, v48);
      v51(*(void *)(v11 + 56) + 40 * v23, v52);
    }
    else
    {
      (*v45)(v47, v30, v48);
      sub_100278C8C(*(void *)(v11 + 56) + 40 * v23, (uint64_t)v52);
    }
    sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v34) & ~*(void *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    (*v50)((char *)(*(void *)(v13 + 48) + v29 * v21), (unint64_t)v31, v32);
    uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))v51)(v52, *(void *)(v13 + 56) + 40 * v21);
    ++*(void *)(v13 + 16);
    uint64_t v8 = v28;
    uint64_t v11 = v46;
  }
  swift_release();
  uint64_t v6 = v42;
  char v25 = v44;
  if ((v49 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v11 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v40;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v13;
  return result;
}

uint64_t sub_10058937C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000A844(&qword_100979E98);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    unint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_1005897A0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000A844(&qword_10096ACA8);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    unint64_t v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      char v28 = *(unsigned char *)(*(void *)(v9 + 56) + v21);
      sub_1005A81E8(&qword_10096B5A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(unsigned char *)(*(void *)(v11 + 56) + v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100589BC4(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A844(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100589ED8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = sub_10000A844(&qword_10096C6C8);
  uint64_t v5 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_10000A844(&qword_100979F30);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  int64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    unint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    BOOL v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  unint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_10058A2C4(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A844(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  char v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10058A5D0(uint64_t a1, char a2)
{
  return sub_10058A5DC(a1, a2, &qword_100979F48);
}

uint64_t sub_10058A5DC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A844(a3);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v36) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v35;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10058A8E4(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v52 = a3(0);
  uint64_t v8 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v44 - v9;
  uint64_t v10 = *v4;
  sub_10000A844(a4);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  int v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v49 = v8;
  unint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v46) {
      break;
    }
    char v26 = v47;
    unint64_t v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v27 = v47[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v46) {
              goto LABEL_34;
            }
            unint64_t v27 = v47[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v10 + 56);
    uint64_t v30 = v10;
    uint64_t v31 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v24);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = *(void *)(v49 + 72);
    uint64_t v35 = v29 + v34 * v24;
    if (v50)
    {
      (*v17)(v51, v35, v52);
    }
    else
    {
      (*v48)(v51, v35, v52);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    int64_t v22 = (void *)(*(void *)(v12 + 48) + 16 * v21);
    *int64_t v22 = v32;
    v22[1] = v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 56) + v34 * v21, v51, v52);
    ++*(void *)(v12 + 16);
    uint64_t v10 = v30;
  }
  swift_release();
  uint64_t v6 = v45;
  char v26 = v47;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
  if (v43 >= 64) {
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v26 = -1 << v43;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v12;
  return result;
}

uint64_t sub_10058ACD0(uint64_t a1, char a2)
{
  return sub_10058ACDC(a1, a2, &qword_100979F10);
}

uint64_t sub_10058ACDC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A844(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10058AFF0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844(&qword_100979F70);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v32 = v2;
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v33 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v33 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    long long v34 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_10025ADCC(v34, *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v34;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      long long v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v32;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v31;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10058B2FC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10000A844(&qword_100979ED8);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    unint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    unint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    BOOL v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    int64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      unint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        long long v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
      }
      else
      {
        (*v41)(v43, v26, v44);
        long long v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
        swift_retain();
      }
      sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v10 + 48) + v25 * v18, v27, v28);
      *(_OWORD *)(*(void *)(v10 + 56) + 16 * v18) = v47;
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10058B728(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10000A844(a3);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v36) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    char v33 = *(unsigned char *)(*(void *)(v6 + 56) + v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(unsigned char *)(*(void *)(v8 + 56) + v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v35;
  int64_t v23 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10058BA30(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844(&qword_100979EA0);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      BOOL v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10058BD18(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10000A844(&qword_100979E88);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      int64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *int64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_10058C024(uint64_t a1, int a2)
{
  return sub_10058C030(a1, a2, &qword_10096AB68);
}

uint64_t sub_10058C030(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_10000A844(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  int v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  uint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    unint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  unint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t sub_10058C458(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10000A844(&qword_10096AB10);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  int64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_unknownObjectRetain();
    }
    sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

id sub_10058C87C()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_10096ABE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10024D2D4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100249444(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10058CA44()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_10096A9F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1002AF920(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10024D2D4(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_100249444(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10058CC2C()
{
  return sub_10058F5F8(&qword_10096ACD8);
}

void *sub_10058CC38()
{
  uint64_t v1 = v0;
  sub_10000A844((uint64_t *)&unk_10096BB70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10024D2D4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_100249444(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10058CE20()
{
  return sub_10059079C((uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_100979E58);
}

void *sub_10058CE40()
{
  uint64_t v1 = v0;
  sub_10000A844((uint64_t *)&unk_10097D480);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    sub_1003CF0DC(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_1002AD354(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10058D02C()
{
  return sub_10058E070(&qword_100979E20);
}

void *sub_10058D038()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_100979E28);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10058D2D0()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_100979E38);
  unint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v30 = v40;
    unint64_t v29 = v32;
LABEL_25:
    *unint64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  unint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    uint64_t v22 = (uint64_t *)(v20 + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    int64_t v25 = (void *)(*(void *)(v15 + 56) + v21);
    *int64_t v25 = v23;
    v25[1] = v24;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    unint64_t v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10058D5A8()
{
  return sub_10058F978((uint64_t (*)(void))&type metadata accessor for SFClientIdentity, &qword_100979E30);
}

void *sub_10058D5C8()
{
  return sub_10058D8A0((uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, &qword_10096ABF8, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);
}

void *sub_10058D610()
{
  return sub_10058E37C((uint64_t (*)(void))&type metadata accessor for NWEndpoint, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_100979E40);
}

void *sub_10058D644()
{
  return sub_10058E37C((uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_10096AC48);
}

id sub_10058D678()
{
  return sub_10058F5F8((uint64_t *)&unk_10096AA00);
}

id sub_10058D684()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_10096AE78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10058D82C()
{
  return sub_10059079C((uint64_t (*)(void))&type metadata accessor for UUID, &qword_10096ACD0);
}

void *sub_10058D84C()
{
  return sub_10058F7B0(&qword_10096AC58);
}

void *sub_10058D858()
{
  return sub_10058D8A0(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_100979F40, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint);
}

void *sub_10058D8A0(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)&v32 - v8;
  sub_10000A844(a2);
  uint64_t v10 = *v4;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v12;
    return result;
  }
  uint64_t v33 = v6;
  id result = (void *)(v11 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  }
  uint64_t v34 = v10 + 64;
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v20) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v29);
    ++v16;
    if (!v30)
    {
      int64_t v16 = v29 + 1;
      if (v29 + 1 >= v20) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v34 + 8 * v16);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v19 = (v30 - 1) & v30;
    unint64_t v22 = __clz(__rbit64(v30)) + (v16 << 6);
LABEL_12:
    uint64_t v23 = 16 * v22;
    uint64_t v24 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v22);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    unint64_t v27 = *(void *)(v35 + 72) * v22;
    sub_1005A80F0(*(void *)(v10 + 56) + v27, (uint64_t)v9, v36);
    int64_t v28 = (void *)(*(void *)(v12 + 48) + v23);
    *int64_t v28 = v25;
    v28[1] = v26;
    sub_1005A8158((uint64_t)v9, *(void *)(v12 + 56) + v27, v37);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v20)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v33;
    goto LABEL_28;
  }
  unint64_t v30 = *(void *)(v34 + 8 * v31);
  if (v30)
  {
    int64_t v16 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v16 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v34 + 8 * v16);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10058DB14()
{
  return sub_10058F5F8(&qword_10096ACC0);
}

void *sub_10058DB20()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_10096AC98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10058DCDC()
{
  return sub_100590CF4((uint64_t *)&unk_10096C7C0, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_100979F98);
}

void *sub_10058DD04()
{
  uint64_t v1 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  uint64_t v29 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_100979E50);
  uint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v24 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v5 + 32;
  uint64_t v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    unint64_t v20 = *(void *)(v29 + 72) * v18;
    sub_1005A80F0(*(void *)(v8 + 56) + v20, (uint64_t)v3, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    id result = (void *)sub_1005A8158((uint64_t)v3, *(void *)(v10 + 56) + v20, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10058E044()
{
  return sub_10058E96C(&qword_100979F20, (uint64_t (*)(unsigned char *, uint64_t))sub_1002AF688);
}

void *sub_10058E064()
{
  return sub_10058E070(&qword_100979F88);
}

void *sub_10058E070(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(a1);
  uint64_t v8 = *v1;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v3 = v10;
    return result;
  }
  uint64_t v27 = v3;
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v29) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v14);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v19 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 16 * v19;
    unint64_t v22 = *(void *)(v10 + 48) + v20;
    int64_t v23 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    long long v31 = *(_OWORD *)(*(void *)(v8 + 56) + v21);
    v23(v22, v7, v4);
    *(_OWORD *)(*(void *)(v10 + 56) + v21) = v31;
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v29)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v3 = v27;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v14 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v14);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10058E314()
{
  return sub_10058E37C((uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_10096AC38);
}

void *sub_10058E348()
{
  return sub_10058E37C((uint64_t (*)(void))&type metadata accessor for SFNWInterfaceType, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_10096AC08);
}

void *sub_10058E37C(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v47 = a1(0);
  uint64_t v50 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  int v46 = (char *)&v37 - v6;
  uint64_t v45 = a2(0);
  uint64_t v49 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v37 - v7;
  sub_10000A844(a3);
  uint64_t v37 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v51 = v9;
  if (!v10)
  {
    id result = (void *)swift_release();
    uint64_t v36 = v51;
    uint64_t v35 = v37;
LABEL_25:
    *uint64_t v35 = v36;
    return result;
  }
  uint64_t v11 = v9;
  id result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v51;
  }
  int64_t v14 = 0;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  uint64_t v48 = v8;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v38 = v8 + 64;
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v18 = v50;
  uint64_t v19 = v49;
  uint64_t v42 = v50 + 16;
  uint64_t v43 = v49 + 16;
  uint64_t v40 = v50 + 32;
  uint64_t v41 = v49 + 32;
  unint64_t v20 = v44;
  uint64_t v21 = v45;
  uint64_t v22 = v47;
  uint64_t v23 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v52 = v14;
      unint64_t v25 = v24 | (v14 << 6);
      uint64_t v26 = v48;
      goto LABEL_9;
    }
    int64_t v31 = v14 + 1;
    uint64_t v26 = v48;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v31);
    int64_t v33 = v14 + 1;
    if (!v32)
    {
      int64_t v33 = v31 + 1;
      if (v31 + 1 >= v39) {
        goto LABEL_23;
      }
      unint64_t v32 = *(void *)(v38 + 8 * v33);
      if (!v32) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v32 - 1) & v32;
    int64_t v52 = v33;
    unint64_t v25 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_9:
    unint64_t v27 = *(void *)(v19 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v20, *(void *)(v26 + 48) + v27, v21);
    unint64_t v28 = *(void *)(v18 + 72) * v25;
    unint64_t v29 = *(void *)(v26 + 56) + v28;
    uint64_t v30 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v46, v29, v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v23 + 48) + v27, v20, v21);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(void *)(v23 + 56) + v28, v30, v22);
    int64_t v14 = v52;
  }
  int64_t v34 = v31 + 2;
  if (v34 >= v39)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v35 = v37;
    uint64_t v36 = v51;
    goto LABEL_25;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v34);
  if (v32)
  {
    int64_t v33 = v34;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10058E72C()
{
  return sub_10058FC54(&qword_100979F08);
}

void *sub_10058E738()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_10096AAA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10058E8E4()
{
  return sub_10058D8A0(type metadata accessor for RegistrationState, &qword_10096AB20, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState);
}

void *sub_10058E92C()
{
  return sub_10058F978((uint64_t (*)(void))&type metadata accessor for Date, &qword_10096FCA0);
}

void *sub_10058E94C()
{
  return sub_10058E96C(&qword_100979E90, (uint64_t (*)(unsigned char *, uint64_t))sub_1002AF688);
}

void *sub_10058E96C(uint64_t *a1, uint64_t (*a2)(unsigned char *, uint64_t))
{
  uint64_t v30 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(a1);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v4 = v11;
    return result;
  }
  uint64_t v26 = v4;
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v27 = v9 + 64;
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v29 = v6 + 16;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v15);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t v22 = 40 * v20;
    sub_100278C8C(*(void *)(v9 + 56) + v22, (uint64_t)v31);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
    id result = (void *)v30(v31, *(void *)(v11 + 56) + v22);
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_28;
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v15 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v15);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10058EC20()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_100979E98);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10058EEB4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096ACA8);
  uint64_t v22 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v22 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v23 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v26 = v2 + 16;
  int64_t v24 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v25 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    char v17 = *(unsigned char *)(*(void *)(v5 + 56) + v15);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(unsigned char *)(*(void *)(v7 + 56) + v15) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v24) {
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10058F144()
{
  return sub_100590264(&qword_10096AC50);
}

id sub_10058F150()
{
  return sub_10058F5F8(&qword_100979F60);
}

id sub_10058F15C()
{
  return sub_10058F5F8(&qword_100979F58);
}

void *sub_10058F168()
{
  return sub_10058F174(&qword_100979F28);
}

void *sub_10058F174(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A844(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    int64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10058F324()
{
  uint64_t v35 = sub_10000A844(&qword_10096C6C8);
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_100979F30);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    id result = (void *)swift_release();
    uint64_t v28 = v36;
    uint64_t v27 = v30;
LABEL_25:
    *uint64_t v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  id result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    int64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    int64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *int64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10058F5EC()
{
  return sub_10058F5F8(&qword_100979F50);
}

id sub_10058F5F8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A844(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    int64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    unint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10058F7A4()
{
  return sub_10058F7B0(&qword_100979F48);
}

void *sub_10058F7B0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A844(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    int64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = 8 * v16;
    uint64_t v22 = *(void *)(*(void *)(v3 + 56) + v21);
    int64_t v23 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v23 = v20;
    v23[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v21) = v22;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v14) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v7 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10058F958()
{
  return sub_10058F978((uint64_t (*)(void))&type metadata accessor for NWBrowser.Result, &qword_100979F38);
}

void *sub_10058F978(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v39 = a1(0);
  uint64_t v4 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v33 - v5;
  sub_10000A844(a2);
  uint64_t v34 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v40 = v8;
  if (!v9)
  {
    id result = (void *)swift_release();
    uint64_t v32 = v40;
    uint64_t v31 = v34;
LABEL_28:
    *uint64_t v31 = v32;
    return result;
  }
  uint64_t v10 = v8;
  id result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v40;
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 64);
  uint64_t v35 = v7 + 64;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v4 + 32;
  uint64_t v38 = v4 + 16;
  uint64_t v18 = v39;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      int64_t v14 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v14);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v29 - 1) & v29;
    unint64_t v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    uint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 56) + v25, v18);
    uint64_t v26 = v40;
    uint64_t v27 = (void *)(*(void *)(v40 + 48) + v21);
    *uint64_t v27 = v23;
    v27[1] = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v26 + 56) + v25, v6, v18);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v31 = v34;
    uint64_t v32 = v40;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v14);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10058FC3C()
{
  return sub_10058FC54(&qword_100979F18);
}

void *sub_10058FC48()
{
  return sub_10058FC54(&qword_100979F10);
}

void *sub_10058FC54(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A844(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10058FE04()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979F70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_10025ADCC(v19, *((unint64_t *)&v19 + 1));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10058FFBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_100979ED8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v24 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v25 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 16 * v16;
    unint64_t v19 = *(void *)(v8 + 48) + v17;
    int64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    long long v28 = *(_OWORD *)(*(void *)(v6 + 56) + v18);
    v20(v19, v5, v2);
    *(_OWORD *)(*(void *)(v8 + 56) + v18) = v28;
    id result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100590264(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A844(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    LOBYTE(v17) = *(unsigned char *)(*(void *)(v3 + 56) + v16);
    int64_t v20 = (void *)(*(void *)(v5 + 48) + 16 * v16);
    *int64_t v20 = v19;
    v20[1] = v18;
    *(unsigned char *)(*(void *)(v5 + 56) + v16) = (_BYTE)v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100590408()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979EA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *unint64_t v22 = v21;
    v22[1] = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1005905B8()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979E88);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10059077C()
{
  return sub_10059079C((uint64_t (*)(void))&type metadata accessor for UUID, &qword_10096AB68);
}

id sub_10059079C(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v26 - v6;
  sub_10000A844(a2);
  uint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v27 = v10;
    return result;
  }
  id result = (id)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    int64_t v22 = *(void **)(*(void *)(v8 + 56) + v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    id result = v22;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100590A34()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096AB10);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100590CCC()
{
  return sub_100590CF4(&qword_10096C6B0, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_100979EC8);
}

void *sub_100590CF4(uint64_t *a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v47 = sub_10000A844(a1);
  uint64_t v50 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  int v46 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = a2(0);
  uint64_t v49 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v37 - v7;
  sub_10000A844(a3);
  uint64_t v37 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v51 = v9;
  if (!v10)
  {
    id result = (void *)swift_release();
    uint64_t v36 = v51;
    uint64_t v35 = v37;
LABEL_25:
    *uint64_t v35 = v36;
    return result;
  }
  uint64_t v11 = v9;
  id result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v51;
  }
  int64_t v14 = 0;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  uint64_t v48 = v8;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v38 = v8 + 64;
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v18 = v50;
  uint64_t v19 = v49;
  uint64_t v42 = v50 + 16;
  uint64_t v43 = v49 + 16;
  uint64_t v40 = v50 + 32;
  uint64_t v41 = v49 + 32;
  unint64_t v20 = v44;
  uint64_t v21 = v45;
  uint64_t v22 = v47;
  uint64_t v23 = v51;
  while (1)
  {
    if (v17)
    {
      unint64_t v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v52 = v14;
      unint64_t v25 = v24 | (v14 << 6);
      uint64_t v26 = v48;
      goto LABEL_9;
    }
    int64_t v31 = v14 + 1;
    uint64_t v26 = v48;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v31);
    int64_t v33 = v14 + 1;
    if (!v32)
    {
      int64_t v33 = v31 + 1;
      if (v31 + 1 >= v39) {
        goto LABEL_23;
      }
      unint64_t v32 = *(void *)(v38 + 8 * v33);
      if (!v32) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v32 - 1) & v32;
    int64_t v52 = v33;
    unint64_t v25 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_9:
    unint64_t v27 = *(void *)(v19 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v20, *(void *)(v26 + 48) + v27, v21);
    unint64_t v28 = *(void *)(v18 + 72) * v25;
    unint64_t v29 = *(void *)(v26 + 56) + v28;
    uint64_t v30 = v46;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v46, v29, v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v23 + 48) + v27, v20, v21);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(void *)(v23 + 56) + v28, v30, v22);
    int64_t v14 = v52;
  }
  int64_t v34 = v31 + 2;
  if (v34 >= v39)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v35 = v37;
    uint64_t v36 = v51;
    goto LABEL_25;
  }
  unint64_t v32 = *(void *)(v38 + 8 * v34);
  if (v32)
  {
    int64_t v33 = v34;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v39) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

_OWORD *sub_10059109C(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1005837C4((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10058C87C();
      goto LABEL_7;
    }
    sub_10058500C(v12, a3 & 1);
    unint64_t v18 = sub_1005837C4((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for CFString(0);
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    uint64_t v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_10024D338((uint64_t)v16);
    return sub_100249444(a1, v16);
  }
LABEL_13:
  sub_100594D28(v9, (uint64_t)a2, a1, v15);

  return a2;
}

_OWORD *sub_1005911E0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_100583878(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10058CA44();
      goto LABEL_7;
    }
    sub_100585348(v13, a3 & 1);
    unint64_t v19 = sub_100583878(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_1002AF920(a2, (uint64_t)v21);
      return sub_100594D90(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_10024D338((uint64_t)v17);

  return sub_100249444(a1, v17);
}

void sub_10059132C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

_OWORD *sub_100591338(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10058CC38();
      goto LABEL_7;
    }
    sub_100585660(v15, a4 & 1);
    uint64_t v21 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10024D338((uint64_t)v19);
    return sub_100249444(a1, v19);
  }
LABEL_13:
  sub_100594E0C(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

void sub_1005914DC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10058392C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10059079C((uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_100979E58);
    goto LABEL_7;
  }
  sub_100585960(v17, a3 & 1);
  unint64_t v22 = sub_10058392C(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_100595684(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier);
}

_OWORD *sub_1005916B4(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10058CE40();
      goto LABEL_7;
    }
    sub_100585D84(v15, a4 & 1);
    uint64_t v21 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    id result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 48 * v12);
    sub_10024D338((uint64_t)v19);
    return sub_1002AD354(a1, v19);
  }
LABEL_13:
  sub_100594E78(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_10059185C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100583A00(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10058D038();
    goto LABEL_7;
  }
  sub_1005860B8(v17, a3 & 1);
  unint64_t v23 = sub_100583A00(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100594EE8(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100591A04(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_100583A00(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v28;
      *char v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_10058D2D0();
    goto LABEL_7;
  }
  sub_1005864DC(v18, a4 & 1);
  unint64_t v25 = sub_100583A00(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100594FA0(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_100591BBC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1005935EC(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for SFClientIdentity, &qword_100979E30, (uint64_t (*)(void))&type metadata accessor for SFClientIdentity);
}

uint64_t sub_100591BF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
      return sub_1005A8088(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10058D8A0((uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, &qword_10096ABF8, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);
    goto LABEL_7;
  }
  sub_100587140(v15, a4 & 1, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, &qword_10096ABF8, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);
  uint64_t v22 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100595060(v12, a2, a3, a1, v18, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100591E5C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10058392C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10058E37C((uint64_t (*)(void))&type metadata accessor for NWEndpoint, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_100979E40);
      goto LABEL_7;
    }
    sub_10058691C(v17, a3 & 1, (uint64_t (*)(void))&type metadata accessor for NWEndpoint, &qword_100979E40);
    unint64_t v28 = sub_10058392C(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1005952F4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for NWEndpoint);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for NWEndpoint();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_1005920C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10058392C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10058E37C((uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_10096AC48);
      goto LABEL_7;
    }
    sub_10058691C(v17, a3 & 1, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer, &qword_10096AC48);
    unint64_t v28 = sub_10058392C(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1005952F4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for SFAirDropReceive.Transfer();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

void sub_100592324(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_100592330(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10058F5F8(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10058A2C4(v17, a4 & 1, a5);
  uint64_t v22 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v24 = a2;
  v24[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v27;

  swift_bridgeObjectRetain();
}

void sub_100592508(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_100592514(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10058F7B0(&qword_10096AC58);
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10058A5DC(result, a4 & 1, &qword_10096AC58);
  uint64_t result = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v20 = a2;
  v20[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1005926D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
      return sub_1005A8088(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for SDAirDropDiscoveredEndpoint);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10058D8A0(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_100979F40, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint);
    goto LABEL_7;
  }
  sub_100587140(v15, a4 & 1, type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_100979F40, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint);
  uint64_t v22 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100595060(v12, a2, a3, a1, v18, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint);

  return swift_bridgeObjectRetain();
}

void sub_100592944(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_100592950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100583C80(a3, a4, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10058DB20();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100587504(v17, a5 & 1);
  uint64_t v23 = sub_100583C80(a3, a4, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  BOOL v26 = (void *)(v20[7] + 16 * v14);
  *BOOL v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100592B28(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10058392C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100590CF4((uint64_t *)&unk_10096C7C0, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_100979F98);
      goto LABEL_7;
    }
    sub_10058782C(v17, a3 & 1);
    unint64_t v28 = sub_10058392C(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10059510C(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  uint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_100592D54(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10058392C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
      return sub_1005A8088(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10058DD04();
    goto LABEL_7;
  }
  sub_100587D2C(v17, a3 & 1);
  unint64_t v24 = sub_10058392C(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100595204(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100592F28(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10058392C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10058E37C((uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_10096AC38);
      goto LABEL_7;
    }
    sub_10058691C(v17, a3 & 1, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer, &qword_10096AC38);
    unint64_t v28 = sub_10058392C(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1005952F4(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for SFAirDropSend.Transfer();
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_10059318C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100594124(a1, a2, a3, a4, &qword_100979F08);
}

uint64_t sub_100593198(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10058E738();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100588BA4(result, a4 & 1);
  uint64_t result = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v20 = a2;
  v20[1] = a3;
  *(unsigned char *)(v18[7] + v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10059334C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for RegistrationState(0);
      return sub_1005A8088(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for RegistrationState);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10058D8A0(type metadata accessor for RegistrationState, &qword_10096AB20, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState);
    goto LABEL_7;
  }
  sub_100587140(v15, a4 & 1, type metadata accessor for RegistrationState, &qword_10096AB20, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState);
  uint64_t v22 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100595060(v12, a2, a3, a1, v18, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1005935B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1005935EC(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Date, &qword_10096FCA0, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_1005935EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(void), uint64_t *a6, uint64_t (*a7)(void))
{
  uint64_t v10 = (void **)v7;
  uint64_t v15 = (void *)*v7;
  unint64_t v17 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 < v20 || (a4 & 1) == 0)
  {
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      sub_10058F978(a5, a6);
      goto LABEL_7;
    }
    sub_10058A8E4(v20, a4 & 1, a5, a6);
    uint64_t v31 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
    if ((v21 & 1) == (v32 & 1))
    {
      unint64_t v17 = v31;
      char v23 = *v10;
      if (v21) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v23 = *v10;
  if (v21)
  {
LABEL_8:
    uint64_t v24 = v23[7];
    uint64_t v25 = a7(0);
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 40);
    uint64_t v28 = v25;
    uint64_t v29 = v24 + *(void *)(v26 + 72) * v17;
    return v27(v29, a1, v28);
  }
LABEL_13:
  sub_1005955D0(v17, a2, a3, a1, v23, a5);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1005937FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100583A00(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10058EC20();
    goto LABEL_7;
  }
  sub_10058937C(result, a3 & 1);
  uint64_t result = sub_100583A00(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100594EE8(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100593998(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100593D2C(a1, a2, a3, a4, &qword_10096AB58);
}

uint64_t sub_1005939A4(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100583AD4(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(unsigned char *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10058EEB4();
    goto LABEL_7;
  }
  sub_1005897A0(result, a3 & 1);
  uint64_t result = sub_100583AD4(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10059541C(v14, (uint64_t)v11, a1 & 1, v20);
}

uint64_t sub_100593B44(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 < result || (a4 & 1) == 0)
  {
    if (v17 < result || (a4 & 1) != 0)
    {
      sub_10058B728(result, a4 & 1, &qword_10096AC50);
      uint64_t result = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_17:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v12 = result;
    }
    else
    {
      uint64_t result = (uint64_t)sub_100590264(&qword_10096AC50);
    }
  }
  char v19 = a1 & 1;
  uint64_t v20 = (void *)*v5;
  if (v16)
  {
    *(unsigned char *)(v20[7] + v12) = v19;
    return result;
  }
  v20[(v12 >> 6) + 8] |= 1 << v12;
  char v21 = (uint64_t *)(v20[6] + 16 * v12);
  uint64_t *v21 = a2;
  v21[1] = a3;
  *(unsigned char *)(v20[7] + v12) = v19;
  uint64_t v22 = v20[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v24;

  return swift_bridgeObjectRetain();
}

void sub_100593D08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_100593D14(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_100593D20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100593D2C(a1, a2, a3, a4, &qword_100979F28);
}

uint64_t sub_100593D2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10058F174(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100589BC4(v17, a4 & 1, a5);
  uint64_t v23 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v28;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100593F04(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10058F324();
      goto LABEL_7;
    }
    sub_100589ED8(v15, a4 & 1);
    uint64_t v26 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = sub_10000A844(&qword_10096C6C8);
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  sub_1005954D4(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

void sub_1005940D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1005940E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1005935EC(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for NWBrowser.Result, &qword_100979F38, (uint64_t (*)(void))&type metadata accessor for NWBrowser.Result);
}

uint64_t sub_100594118(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100594124(a1, a2, a3, a4, &qword_100979F18);
}

uint64_t sub_100594124(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10058FC54(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10058ACDC(v17, a4 & 1, a5);
  uint64_t v23 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v28;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1005942FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100594124(a1, a2, a3, a4, &qword_100979F10);
}

uint64_t sub_100594308(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584670);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10058FE04();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10058AFF0(v15, a4 & 1);
  uint64_t v21 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584670);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return sub_10025ADCC(a2, a3);
}

uint64_t sub_1005944CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_100583A00(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release();
      uint64_t v24 = v28;
      *char v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_10058FFBC();
    goto LABEL_7;
  }
  sub_10058B2FC(v18, a4 & 1);
  unint64_t v25 = sub_100583A00(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100594FA0(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_100594684(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100590264(&qword_10096A9E8);
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10058B728(result, a4 & 1, &qword_10096A9E8);
  uint64_t result = sub_100583C80(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100584194);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v20 = a2;
  v20[1] = a3;
  *(unsigned char *)(v18[7] + v12) = a1 & 1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100594850(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100583C14(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100590408();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      char v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *char v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v21 = (void *)(v18[7] + 16 * v12);
    void *v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10058BA30(result, a4 & 1);
  uint64_t result = sub_100583C14(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    uint64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100594990(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_10059499C(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v26 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_100583A00(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];

      *(void *)(v22 + 8 * v15) = v26;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_10059079C((uint64_t (*)(void))&type metadata accessor for UUID, a4);
    goto LABEL_7;
  }
  sub_10058C030(v18, a3 & 1, a4);
  unint64_t v23 = sub_100583A00(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v15 = v23;
  uint64_t v21 = *v6;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  sub_100595684(v15, (uint64_t)v12, v26, v21, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100594B80(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100583A00(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100590A34();
    goto LABEL_7;
  }
  sub_10058C458(v17, a3 & 1);
  unint64_t v23 = sub_100583A00(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100594EE8(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_100594D28(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_100249444(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *sub_100594D90(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100249444(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *sub_100594E0C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100249444(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_100594E78(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1002AD354(a4, (_OWORD *)(a5[7] + 48 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_100594EE8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100594FA0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_100595060(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = (void *)(a5[6] + 16 * a1);
  *uint64_t v11 = a2;
  v11[1] = a3;
  uint64_t v12 = a5[7];
  uint64_t v13 = a6(0);
  uint64_t result = sub_1005A8158(a4, v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a7);
  uint64_t v15 = a5[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a5[2] = v17;
  }
  return result;
}

uint64_t sub_10059510C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_10000A844((uint64_t *)&unk_10096C7C0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100595204(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
  uint64_t result = sub_1005A8158(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_1005952F4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a3, v13);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_1005953F0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_100595060(a1, a2, a3, a4, a5, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState);
}

uint64_t sub_10059541C(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1005954D4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_10000A844(&qword_10096C6C8);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_100595588(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_1005955D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = (void *)(a5[6] + 16 * a1);
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t v10 = a5[7];
  uint64_t v11 = a6(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a4, v11);
  uint64_t v13 = a5[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a5[2] = v15;
  }
  return result;
}

uint64_t sub_100595684(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a4[6];
  uint64_t v10 = a5(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a2, v10);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

uint64_t sub_100595740(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005A81E8(&qword_10096B5A8, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
  swift_bridgeObjectRetain();
  int64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    BOOL v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1005A81E8(&qword_100979FC0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10059B258((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100595A64(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005A81E8(&qword_10096B5A0, (void (*)(uint64_t))&type metadata accessor for URL);
  swift_bridgeObjectRetain();
  int64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    BOOL v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1005A81E8(&qword_100979F90, (void (*)(uint64_t))&type metadata accessor for URL);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10059B514((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100595D88(void *a1, void *a2)
{
  return sub_10059808C(a1, a2, &qword_10096B290, (uint64_t)SFAirDropTransferItem_ptr, &qword_100979FB0);
}

uint64_t sub_100595DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_1003156D8();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v19 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1005A80F0(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint);
      char v16 = sub_10031EEC0((uint64_t)v9, a2);
      sub_10031C1C0((uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_10031C1C0(a2, type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_1005A80F0(*(void *)(*v3 + 48) + v15 * v13, v19, type metadata accessor for SDAirDropDiscoveredEndpoint);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1005A80F0(a2, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint);
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10059B7D0((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    sub_1005A8158(a2, a1, type metadata accessor for SDAirDropDiscoveredEndpoint);
    return 1;
  }
}

uint64_t sub_100596028(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  int64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1005A81E8((unint64_t *)&unk_10096D460, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10059BA64((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10059634C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10059BD20(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100596448(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10059BE44(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1005965F8(void *a1, void *a2)
{
  return sub_10059808C(a1, a2, &qword_10096B3E8, (uint64_t)SFAutoUnlockDevice_ptr, &qword_100979EB0);
}

uint64_t sub_100596614(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CodableError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1005A81E8(&qword_100979E60, (void (*)(uint64_t))&type metadata accessor for CodableError);
  swift_bridgeObjectRetain();
  int64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1005A81E8(&qword_100979E68, (void (*)(uint64_t))&type metadata accessor for CodableError);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10059C174((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100596938(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Data.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)__s1 = *(void *)v81;
    *(void *)uint64_t v81 = 0x8000000000000000;
    sub_10025ADCC(a2, a3);
    sub_10059C430(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v81 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v86 = ~v8;
  unint64_t v11 = a3 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v84 = v12;
  uint64_t v83 = v6;
  size_t __n = BYTE6(a3);
  uint64_t v85 = v6 + 56;
  uint64_t v79 = (a2 >> 32) - (int)a2;
  uint64_t v80 = a2 >> 32;
  unint64_t v78 = a3;
  while (2)
  {
    unint64_t v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_10025ADCC(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    size_t v19 = __n;
    switch((int)v11)
    {
      case 1:
        size_t v19 = HIDWORD(a2) - (int)a2;
        if (v84) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        size_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_100250CC4(v14, v15);
          goto LABEL_8;
        }
        if (v16 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              uint64_t v27 = (char *)__DataStorage._bytes.getter();
              if (!v27) {
                goto LABEL_33;
              }
              uint64_t v28 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v28)) {
                goto LABEL_125;
              }
              v27 += (int)v14 - v28;
LABEL_33:
              __DataStorage._length.getter();
              uint64_t v10 = v85;
              if (v11)
              {
                if (v11 == 1)
                {
                  if (v80 < (int)a2) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  uint64_t v29 = (char *)__DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a2, v30)) {
                      goto LABEL_141;
                    }
                    v29 += (int)a2 - v30;
                  }
                  uint64_t v31 = __DataStorage._length.getter();
                  size_t v32 = (a2 >> 32) - (int)a2;
                  if (v31 < v79) {
                    size_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_143;
                  }
                  if (!v29) {
                    goto LABEL_144;
                  }
                  int v33 = memcmp(v27, v29, v32);
                  sub_100250CC4(a2, a3);
                }
                else
                {
                  uint64_t v66 = *(void *)(a2 + 16);
                  uint64_t v65 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v67 = (char *)__DataStorage._bytes.getter();
                  if (v67)
                  {
                    uint64_t v68 = __DataStorage._offset.getter();
                    if (__OFSUB__(v66, v68)) {
                      goto LABEL_140;
                    }
                    v67 += v66 - v68;
                  }
                  BOOL v22 = __OFSUB__(v65, v66);
                  int64_t v69 = v65 - v66;
                  if (v22) {
                    goto LABEL_135;
                  }
                  uint64_t v70 = __DataStorage._length.getter();
                  if (v70 >= v69) {
                    size_t v71 = v69;
                  }
                  else {
                    size_t v71 = v70;
                  }
                  if (!v27) {
                    goto LABEL_154;
                  }
                  a3 = v78;
                  uint64_t v6 = v83;
                  if (!v67) {
                    goto LABEL_155;
                  }
                  int v33 = memcmp(v27, v67, v71);
                  swift_release();
LABEL_112:
                  swift_release();
                }
                sub_100250CC4(v14, v15);
LABEL_114:
                uint64_t v10 = v85;
                if (!v33) {
                  goto LABEL_118;
                }
              }
              else
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v27) {
                  goto LABEL_153;
                }
                uint64_t v47 = (uint64_t *)__s1;
                int v46 = v27;
LABEL_99:
                int v45 = memcmp(v46, v47, __n);
LABEL_100:
                sub_100250CC4(v14, v15);
                if (!v45) {
                  goto LABEL_118;
                }
              }
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v35 = (char *)__DataStorage._bytes.getter();
              if (!v35) {
                goto LABEL_47;
              }
              uint64_t v36 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v36)) {
                goto LABEL_124;
              }
              v35 += v34 - v36;
LABEL_47:
              __DataStorage._length.getter();
              uint64_t v6 = v83;
              if (!v11)
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v35) {
                  goto LABEL_150;
                }
                int v33 = memcmp(v35, __s1, __n);
                swift_release();
                goto LABEL_112;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_128;
                }
                swift_retain();
                uint64_t v37 = (char *)__DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v38 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a2, v38)) {
                    goto LABEL_139;
                  }
                  v37 += (int)a2 - v38;
                }
                uint64_t v39 = __DataStorage._length.getter();
                size_t v40 = (a2 >> 32) - (int)a2;
                if (v39 < v79) {
                  size_t v40 = v39;
                }
                if (!v35) {
                  goto LABEL_145;
                }
                if (!v37) {
                  goto LABEL_146;
                }
                int v33 = memcmp(v35, v37, v40);
                sub_100250CC4(a2, a3);
                swift_release();
              }
              else
              {
                uint64_t v59 = *(void *)(a2 + 16);
                uint64_t v77 = *(void *)(a2 + 24);
                swift_retain();
                swift_retain();
                size_t v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_138;
                  }
                  v60 += v59 - v61;
                }
                BOOL v22 = __OFSUB__(v77, v59);
                int64_t v62 = v77 - v59;
                if (v22) {
                  goto LABEL_133;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  size_t v64 = v62;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v35) {
                  goto LABEL_151;
                }
                a3 = v78;
                if (!v60) {
                  goto LABEL_152;
                }
                int v33 = memcmp(v35, v60, v64);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_100250CC4(v14, v15);
              uint64_t v6 = v83;
              goto LABEL_114;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v11) {
                goto LABEL_67;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_127;
                }
                sub_10025ADCC(a2, a3);
                uint64_t v41 = __DataStorage._bytes.getter();
                if (!v41) {
                  goto LABEL_147;
                }
                uint64_t v24 = v41;
                uint64_t v42 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v42;
                if (__OFSUB__((int)a2, v42)) {
                  goto LABEL_132;
                }
LABEL_63:
                uint64_t v43 = __DataStorage._length.getter();
                if (v43 >= v79) {
                  size_t v44 = (a2 >> 32) - (int)a2;
                }
                else {
                  size_t v44 = v43;
                }
                int v45 = memcmp(__s1, (const void *)(v24 + v26), v44);
                a3 = v78;
                sub_100250CC4(a2, v78);
                goto LABEL_100;
              }
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v55 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v56 = __DataStorage._offset.getter();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_137;
                }
                v50 += v54 - v56;
              }
              BOOL v22 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v22) {
                goto LABEL_130;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_149;
              }
LABEL_79:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v58 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              sub_100250CC4(v14, v15);
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v58) {
                goto LABEL_118;
              }
              break;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v15;
              __s1[10] = BYTE2(v15);
              __s1[11] = BYTE3(v15);
              __s1[12] = BYTE4(v15);
              __s1[13] = BYTE5(v15);
              if (!v11)
              {
LABEL_67:
                uint64_t v88 = a2;
                __int16 v89 = a3;
                char v90 = BYTE2(a3);
                char v91 = BYTE3(a3);
                char v92 = BYTE4(a3);
                char v93 = BYTE5(a3);
                int v46 = __s1;
                uint64_t v47 = &v88;
                goto LABEL_99;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_126;
                }
                sub_10025ADCC(a2, a3);
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x100597354);
                }
                uint64_t v24 = v23;
                uint64_t v25 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v25;
                if (__OFSUB__((int)a2, v25)) {
                  goto LABEL_131;
                }
                goto LABEL_63;
              }
              uint64_t v48 = *(void *)(a2 + 16);
              uint64_t v49 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_136;
                }
                v50 += v48 - v51;
              }
              BOOL v22 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v22) {
                goto LABEL_129;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_148;
              }
              goto LABEL_79;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v86;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_100250CC4(v14, v15);
LABEL_118:
        swift_bridgeObjectRelease();
        sub_100250CC4(a2, a3);
        uint64_t v74 = (uint64_t *)(*(void *)(*(void *)v81 + 48) + 16 * v9);
        uint64_t v75 = *v74;
        unint64_t v76 = v74[1];
        *a1 = *v74;
        a1[1] = v76;
        sub_10025ADCC(v75, v76);
        return 0;
    }
  }
}

uint64_t sub_100597384(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_10059CE54(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1005974A4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for SDAirDropSendConnection(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_10059855C(v7, result + 1);
    uint64_t v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      sub_10059AF38(v27, &qword_10096D4D0);
      uint64_t v24 = v30;
    }
    else
    {
      uint64_t v24 = (void *)v22;
      id v25 = v8;
    }
    sub_10059B1D4((uint64_t)v8, v24);
    *uint64_t v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for SDAirDropSendConnection(0);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_10059CFA4((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_10059772C(void *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Task.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = v5 + 56;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
    id v15 = a1;
    goto LABEL_8;
  }
  swift_retain();
  char v10 = static Task.== infix(_:_:)();
  swift_release();
  if ((v10 & 1) == 0)
  {
    unint64_t v8 = (v8 + 1) & ~v7;
    id v15 = a1;
    if ((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      while (1)
      {
        swift_retain();
        char v11 = static Task.== infix(_:_:)();
        swift_release();
        if (v11) {
          break;
        }
        unint64_t v8 = (v8 + 1) & ~v7;
        if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          goto LABEL_8;
        }
      }
      a1 = v15;
      goto LABEL_10;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    Swift::Int v13 = swift_retain();
    sub_10059D13C(v13, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v16;
    swift_bridgeObjectRelease();
    *id v15 = a2;
    return 1;
  }
LABEL_10:
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
  swift_retain();
  return 0;
}

uint64_t sub_100597940(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_1003152B0();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v19 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1005A80F0(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
      char v16 = sub_10031D658(v9, a2);
      sub_10031C1C0((uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_10031C1C0((uint64_t)a2, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1005A80F0(*(void *)(*v3 + 48) + v15 * v13, v19, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1005A80F0((uint64_t)a2, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10059D344(v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    sub_1005A8158((uint64_t)a2, a1, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    return 1;
  }
}

uint64_t sub_100597BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_100314FE0();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v19 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1005A80F0(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
      char v16 = sub_10031C718((uint64_t)v9, a2);
      sub_10031C1C0((uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_10031C1C0(a2, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1005A80F0(*(void *)(*v3 + 48) + v15 * v13, v19, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1005A80F0(a2, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10059D61C((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    sub_1005A8158(a2, a1, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    return 1;
  }
}

uint64_t sub_100597E48(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, Swift::Int a5)
{
  uint64_t v10 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v14 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v15 = ~v12;
    uint64_t v16 = *(void *)(v10 + 48);
    while (1)
    {
      uint64_t v17 = (void *)(v16 + 32 * v13);
      uint64_t v18 = v17[2];
      uint64_t v19 = v17[3];
      BOOL v20 = *v17 == a2 && v17[1] == a3;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v21 = v18 == a4 && v19 == a5;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v13 = (v13 + 1) & v15;
      if (((*(void *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::Int v22 = (Swift::Int *)(*(void *)(*v28 + 48) + 32 * v13);
    Swift::Int v23 = v22[1];
    Swift::Int v24 = v22[2];
    Swift::Int v25 = v22[3];
    *a1 = *v22;
    a1[1] = v23;
    a1[2] = v24;
    a1[3] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *v28;
    *id v28 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10059D8F4(a2, a3, a4, a5, v13, isUniquelyReferenced_nonNull_native);
    *id v28 = v30;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    uint64_t result = 1;
    a1[2] = a4;
    a1[3] = a5;
  }
  return result;
}

uint64_t sub_100598070(void *a1, void *a2)
{
  return sub_10059808C(a1, a2, (unint64_t *)&qword_100977CD0, (uint64_t)CNContact_ptr, (uint64_t *)&unk_10096D390);
}

uint64_t sub_10059808C(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = v5;
  uint64_t v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v13 = a2;
    uint64_t v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      sub_10000B740(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v27 = sub_100598358(v12, result + 1, a5, a3);
    uint64_t v38 = (void *)v27;
    unint64_t v28 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v28)
    {
      uint64_t v33 = v28 + 1;
      id v34 = v13;
      sub_10059AF38(v33, a5);
      uint64_t v29 = v38;
    }
    else
    {
      uint64_t v29 = (void *)v27;
      id v30 = v13;
    }
    sub_10059B1D4((uint64_t)v13, v29);
    *uint64_t v8 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    Swift::Int v16 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
    uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v19 = v17 & ~v18;
    if ((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
    {
      sub_10000B740(0, a3);
      id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        Swift::Int v25 = *(void **)(*(void *)(*v8 + 48) + 8 * v19);
        *a1 = v25;
        id v26 = v25;
        return 0;
      }
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    id v32 = a2;
    sub_10059BFE0((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a5, a3);
    *uint64_t v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v32;
  }
  return 1;
}

Swift::Int sub_100598358(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_10000A844(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10000B740(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_10059AF38(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

Swift::Int sub_10059855C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000A844(&qword_10096D4D0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for SDAirDropSendConnection(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v15;
        unint64_t v9 = *(void *)(v15 + 16);
        if (*(void *)(v15 + 24) <= v9)
        {
          sub_10059AF38(v9 + 1, &qword_10096D4D0);
          uint64_t v2 = v15;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v10 = 0;
          unint64_t v11 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v12 = v7 == v11;
            if (v7 == v11) {
              unint64_t v7 = 0;
            }
            v10 |= v12;
            uint64_t v13 = *(void *)(v4 + 8 * v7);
          }
          while (v13 == -1);
          unint64_t v8 = __clz(__rbit64(~v13)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v14;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_100598758()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000A844(&qword_100979FC8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      id v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1005A81E8(&qword_10096B5A8, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100598B54()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000A844(&qword_100979FB8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      id v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1005A81E8(&qword_10096B5A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100598F50()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000A844((uint64_t *)&unk_10096D450);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      id v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10059934C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000A844(&qword_10096D4B0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v33 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    unint64_t v31 = v0;
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v32) {
          goto LABEL_33;
        }
        unint64_t v20 = v33[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v20 = v33[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v32) {
              goto LABEL_33;
            }
            unint64_t v20 = v33[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v31;
                uint64_t v30 = 1 << *(unsigned char *)(v6 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v33 = -1 << v30;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v20 = v33[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v33[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = *(void *)(v3 + 72);
      sub_1005A8158(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5, type metadata accessor for SDAirDropDiscoveredEndpoint);
      Hasher.init(_seed:)();
      sub_1003156D8();
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = sub_1005A8158((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22, type metadata accessor for SDAirDropDiscoveredEndpoint);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v8;
  return result;
}

uint64_t sub_1005996E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A844(&qword_100979ED0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    unint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10059996C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A844(&qword_100979F78);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100599C4C(uint64_t a1)
{
  return sub_10059AF38(a1, &qword_100979EB0);
}

uint64_t sub_100599C58()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for CodableError();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10000A844(&qword_100979E70);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1005A81E8(&qword_100979E60, (void (*)(uint64_t))&type metadata accessor for CodableError);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10059A054()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A844(&qword_100979F68);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10059A334()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A844(&qword_100979EA8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10059A5E0(uint64_t a1)
{
  return sub_10059AF38(a1, &qword_10096D4D0);
}

uint64_t sub_10059A5EC()
{
  uint64_t v1 = *v0;
  sub_10000A844(&qword_100979FA8);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v26 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v7 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v8 = v2 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v12 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v7) {
          goto LABEL_33;
        }
        unint64_t v15 = v26[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v7) {
            goto LABEL_33;
          }
          unint64_t v15 = v26[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v7) {
              goto LABEL_33;
            }
            unint64_t v15 = v26[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v7)
              {
LABEL_33:
                swift_release();
                uint64_t v25 = 1 << *(unsigned char *)(v1 + 32);
                if (v25 > 63) {
                  bzero(v26, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v26 = -1 << v25;
                }
                *(void *)(v1 + 16) = 0;
                break;
              }
              unint64_t v15 = v26[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v7) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v26[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v6 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
      Hasher.init(_seed:)();
      Task.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v17;
      ++*(void *)(v3 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v0 = v3;
  return result;
}

uint64_t sub_10059A8E0(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), void (*a5)(char *))
{
  uint64_t v35 = a5;
  uint64_t v8 = v5;
  uint64_t v9 = a2(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  unint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = *v5;
  sub_10000A844(a3);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (*(void *)(v13 + 16))
  {
    uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
    uint64_t v17 = *(void *)(v13 + 56);
    BOOL v32 = v5;
    uint64_t v33 = (void *)(v13 + 56);
    if (v16 < 64) {
      uint64_t v18 = ~(-1 << v16);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v19 = v18 & v17;
    int64_t v34 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v20 = v14 + 56;
    uint64_t result = swift_retain();
    int64_t v22 = 0;
    while (1)
    {
      if (v19)
      {
        unint64_t v23 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v24 = v23 | (v22 << 6);
      }
      else
      {
        int64_t v27 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v27 >= v34) {
          goto LABEL_23;
        }
        unint64_t v28 = v33[v27];
        ++v22;
        if (!v28)
        {
          int64_t v22 = v27 + 1;
          if (v27 + 1 >= v34) {
            goto LABEL_23;
          }
          unint64_t v28 = v33[v22];
          if (!v28)
          {
            int64_t v22 = v27 + 2;
            if (v27 + 2 >= v34) {
              goto LABEL_23;
            }
            unint64_t v28 = v33[v22];
            if (!v28)
            {
              int64_t v29 = v27 + 3;
              if (v29 >= v34)
              {
LABEL_23:
                swift_release();
                uint64_t v30 = 1 << *(unsigned char *)(v13 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v33 = -1 << v30;
                }
                uint64_t v8 = v32;
                *(void *)(v13 + 16) = 0;
                break;
              }
              unint64_t v28 = v33[v29];
              if (!v28)
              {
                while (1)
                {
                  int64_t v22 = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    goto LABEL_29;
                  }
                  if (v22 >= v34) {
                    goto LABEL_23;
                  }
                  unint64_t v28 = v33[v22];
                  ++v29;
                  if (v28) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v22 = v29;
            }
          }
        }
LABEL_22:
        unint64_t v19 = (v28 - 1) & v28;
        unint64_t v24 = __clz(__rbit64(v28)) + (v22 << 6);
      }
      uint64_t v25 = *(void *)(v10 + 72);
      sub_1005A8158(*(void *)(v13 + 48) + v25 * v24, (uint64_t)v12, a4);
      Hasher.init(_seed:)();
      v35(v36);
      Hasher._finalize()();
      unint64_t v26 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v20 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      uint64_t result = sub_1005A8158((uint64_t)v12, *(void *)(v15 + 48) + v26 * v25, a4);
      ++*(void *)(v15 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v8 = v15;
  return result;
}

uint64_t sub_10059ABFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000A844(&qword_100979F00);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v33 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v32 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32) {
          goto LABEL_33;
        }
        unint64_t v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v16 = v33[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v32) {
              goto LABEL_33;
            }
            unint64_t v16 = v33[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v33 = -1 << v31;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v33[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v14);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = v19[2];
      uint64_t v23 = v19[3];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (void *)(*(void *)(v4 + 48) + 32 * v11);
      *unint64_t v12 = v20;
      v12[1] = v21;
      void v12[2] = v22;
      v12[3] = v23;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10059AF38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10000A844(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

unint64_t sub_10059B1D4(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_10059B258(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100598758();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10059DE28((uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo, &qword_100979FC8);
      goto LABEL_12;
    }
    sub_10059EBB0();
  }
  uint64_t v12 = *v3;
  sub_1005A81E8(&qword_10096B5A8, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1005A81E8(&qword_100979FC0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10059B514(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100598B54();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10059DE28((uint64_t (*)(void))&type metadata accessor for URL, &qword_100979FB8);
      goto LABEL_12;
    }
    sub_10059EF60();
  }
  uint64_t v12 = *v3;
  sub_1005A81E8(&qword_10096B5A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1005A81E8(&qword_100979F90, (void (*)(uint64_t))&type metadata accessor for URL);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10059B7D0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10059934C();
    goto LABEL_8;
  }
  if (v13 <= v12)
  {
    sub_10059F6C0();
LABEL_8:
    uint64_t v15 = *v4;
    Hasher.init(_seed:)();
    sub_1003156D8();
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v16 & ~v17;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v26 = v8;
      uint64_t v18 = ~v17;
      uint64_t v14 = v9;
      uint64_t v19 = *(void *)(v9 + 72);
      while (1)
      {
        sub_1005A80F0(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint);
        char v20 = sub_10031EEC0((uint64_t)v11, a1);
        sub_10031C1C0((uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint);
        if (v20) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v9;
  sub_10059E5D0(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_10096D4B0, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint);
LABEL_14:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_1005A8158(a1, *(void *)(v21 + 48) + *(void *)(v14 + 72) * a2, type metadata accessor for SDAirDropDiscoveredEndpoint);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10059BA64(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100598F50();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10059DE28((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_10096D450);
      goto LABEL_12;
    }
    sub_10059F310();
  }
  uint64_t v12 = *v3;
  sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1005A81E8((unint64_t *)&unk_10096D460, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10059BD20(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1005996E8();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_10059DADC();
      goto LABEL_14;
    }
    sub_10059FA24();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_10059BE44(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10059996C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10059DC74();
      goto LABEL_22;
    }
    sub_10059FC88();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  char v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void sub_10059BFE0(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_10059AF38(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10059EA0C(a4);
      goto LABEL_14;
    }
    sub_1005A13A0(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10000B740(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

uint64_t sub_10059C174(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for CodableError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100599C58();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10059DE28((uint64_t (*)(void))&type metadata accessor for CodableError, &qword_100979E70);
      goto LABEL_12;
    }
    sub_10059FF38();
  }
  uint64_t v12 = *v3;
  sub_1005A81E8(&qword_100979E60, (void (*)(uint64_t))&type metadata accessor for CodableError);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1005A81E8(&qword_100979E68, (void (*)(uint64_t))&type metadata accessor for CodableError);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10059C430(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_10059A054();
    }
    else
    {
      if (v10 > v9)
      {
        uint64_t result = (Swift::Int)sub_10059E0D8();
        goto LABEL_123;
      }
      sub_1005A02E8();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v88 = ~v12;
      uint64_t v84 = v11;
      uint64_t v86 = v11 + 56;
      BOOL v14 = __OFSUB__(HIDWORD(v8), v8);
      BOOL v85 = v14;
      unint64_t v87 = a2 >> 62;
      uint64_t v82 = (v8 >> 32) - (int)v8;
      uint64_t v83 = v8 >> 32;
      uint64_t v81 = v4;
      while (1)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v11 + 48) + 16 * a3);
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        uint64_t v18 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
            }
            uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
            sub_10025ADCC(v17, v16);
LABEL_22:
            uint64_t v21 = BYTE6(a2);
            switch(a2 >> 62)
            {
              case 1uLL:
                uint64_t v21 = HIDWORD(v8) - (int)v8;
                if (v85) {
                  goto LABEL_127;
                }
                goto LABEL_26;
              case 2uLL:
                uint64_t v23 = *(void *)(v8 + 16);
                uint64_t v22 = *(void *)(v8 + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v21 = v22 - v23;
                if (!v24) {
                  goto LABEL_26;
                }
                goto LABEL_128;
              case 3uLL:
                if (v18) {
                  goto LABEL_14;
                }
                goto LABEL_163;
              default:
LABEL_26:
                if (v18 != v21)
                {
LABEL_14:
                  uint64_t result = sub_100250CC4(v17, v16);
                  goto LABEL_15;
                }
                if (v18 < 1) {
                  goto LABEL_163;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v19 = *(void *)(v17 + 24);
            uint64_t v18 = v19 - v20;
            if (!__OFSUB__(v19, v20)) {
              goto LABEL_21;
            }
            goto LABEL_126;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v18 = BYTE6(v16);
            goto LABEL_22;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_130;
            }
            uint64_t v43 = (unsigned char *)__DataStorage._bytes.getter();
            if (!v43) {
              goto LABEL_63;
            }
            uint64_t v44 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v17, v44)) {
              goto LABEL_132;
            }
            v43 += (int)v17 - v44;
LABEL_63:
            __DataStorage._length.getter();
            uint64_t v13 = v86;
            if (!v87)
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v43) {
                goto LABEL_158;
              }
              uint64_t v50 = (uint64_t *)__s1;
              uint64_t v49 = v43;
LABEL_107:
              int v68 = memcmp(v49, v50, BYTE6(a2));
              uint64_t result = sub_100250CC4(v17, v16);
              if (!v68) {
                goto LABEL_164;
              }
              goto LABEL_15;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_141;
              }
              swift_retain();
              uint64_t v45 = __DataStorage._bytes.getter();
              if (v45)
              {
                uint64_t v46 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v8, v46)) {
                  goto LABEL_148;
                }
                v45 += (int)v8 - v46;
              }
              uint64_t v47 = __DataStorage._length.getter();
              uint64_t v48 = (v8 >> 32) - (int)v8;
              if (v47 < v82) {
                uint64_t v48 = v47;
              }
              if (!v43) {
                goto LABEL_153;
              }
              if (!v45) {
                goto LABEL_154;
              }
              size_t v41 = v48;
              uint64_t v42 = v43;
              int64_t v40 = (const void *)v45;
              goto LABEL_74;
            }
            uint64_t v69 = *(void *)(v8 + 16);
            uint64_t v70 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            size_t v71 = (char *)__DataStorage._bytes.getter();
            if (v71)
            {
              uint64_t v72 = __DataStorage._offset.getter();
              if (__OFSUB__(v69, v72)) {
                goto LABEL_147;
              }
              v71 += v69 - v72;
            }
            BOOL v24 = __OFSUB__(v70, v69);
            int64_t v73 = v70 - v69;
            if (v24) {
              goto LABEL_142;
            }
            uint64_t v74 = __DataStorage._length.getter();
            if (v74 >= v73) {
              size_t v75 = v73;
            }
            else {
              size_t v75 = v74;
            }
            uint64_t v5 = v81;
            if (!v43) {
              goto LABEL_161;
            }
            uint64_t v11 = v84;
            if (!v71) {
              goto LABEL_162;
            }
            int v36 = memcmp(v43, v71, v75);
            swift_release();
            goto LABEL_119;
          case 2uLL:
            uint64_t v29 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v30 = (char *)__DataStorage._bytes.getter();
            if (!v30) {
              goto LABEL_39;
            }
            uint64_t v31 = __DataStorage._offset.getter();
            if (__OFSUB__(v29, v31)) {
              goto LABEL_131;
            }
            v30 += v29 - v31;
LABEL_39:
            __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (v87)
            {
              if (v87 == 1)
              {
                if (v83 < (int)v8) {
                  goto LABEL_135;
                }
                swift_retain();
                int64_t v32 = (char *)__DataStorage._bytes.getter();
                if (v32)
                {
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v8, v33)) {
                    goto LABEL_146;
                  }
                  v32 += (int)v8 - v33;
                }
                uint64_t v34 = __DataStorage._length.getter();
                size_t v35 = (v8 >> 32) - (int)v8;
                if (v34 < v82) {
                  size_t v35 = v34;
                }
                if (!v30) {
                  goto LABEL_150;
                }
                if (!v32) {
                  goto LABEL_151;
                }
                int v36 = memcmp(v30, v32, v35);
                sub_100250CC4(v8, a2);
                swift_release();
              }
              else
              {
                uint64_t v62 = *(void *)(v8 + 16);
                uint64_t v80 = *(void *)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)__DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v64 = __DataStorage._offset.getter();
                  if (__OFSUB__(v62, v64)) {
                    goto LABEL_145;
                  }
                  v63 += v62 - v64;
                }
                BOOL v24 = __OFSUB__(v80, v62);
                int64_t v65 = v80 - v62;
                if (v24) {
                  goto LABEL_140;
                }
                uint64_t v66 = __DataStorage._length.getter();
                if (v66 >= v65) {
                  size_t v67 = v65;
                }
                else {
                  size_t v67 = v66;
                }
                if (!v30) {
                  goto LABEL_159;
                }
                uint64_t v11 = v84;
                if (!v63) {
                  goto LABEL_160;
                }
                int v36 = memcmp(v30, v63, v67);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              uint64_t result = sub_100250CC4(v17, v16);
              uint64_t v5 = v81;
            }
            else
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v30) {
                goto LABEL_157;
              }
              int v36 = memcmp(v30, __s1, BYTE6(a2));
              swift_release();
LABEL_119:
              swift_release();
LABEL_120:
              uint64_t result = sub_100250CC4(v17, v16);
            }
            uint64_t v13 = v86;
            if (!v36) {
              goto LABEL_164;
            }
            goto LABEL_15;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v87) {
              goto LABEL_75;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_134;
              }
              sub_10025ADCC(v8, a2);
              uint64_t v37 = __DataStorage._bytes.getter();
              if (!v37) {
                goto LABEL_152;
              }
              uint64_t v26 = v37;
              uint64_t v38 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v38;
              if (__OFSUB__((int)v8, v38)) {
                goto LABEL_139;
              }
              goto LABEL_55;
            }
            uint64_t v57 = *(void *)(v8 + 16);
            uint64_t v58 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v59 = __DataStorage._offset.getter();
              if (__OFSUB__(v57, v59)) {
                goto LABEL_144;
              }
              v53 += v57 - v59;
            }
            BOOL v24 = __OFSUB__(v58, v57);
            int64_t v55 = v58 - v57;
            if (v24) {
              goto LABEL_137;
            }
            uint64_t v56 = __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_156;
            }
            goto LABEL_87;
          default:
            *(void *)__s1 = v17;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v87)
            {
LABEL_75:
              uint64_t v89 = v8;
              __int16 v90 = a2;
              char v91 = BYTE2(a2);
              char v92 = BYTE3(a2);
              char v93 = BYTE4(a2);
              char v94 = BYTE5(a2);
              uint64_t v49 = __s1;
              uint64_t v50 = &v89;
              goto LABEL_107;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_133;
              }
              sub_10025ADCC(v8, a2);
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __DataStorage._length.getter();
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                sub_100250CC4(v17, v16);
LABEL_164:
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x10059CE24);
              }
              uint64_t v26 = v25;
              uint64_t v27 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v27;
              if (__OFSUB__((int)v8, v27)) {
                goto LABEL_138;
              }
LABEL_55:
              uint64_t v39 = __DataStorage._length.getter();
              int64_t v40 = (const void *)(v26 + v28);
              if (v39 >= v82) {
                size_t v41 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v41 = v39;
              }
              uint64_t v42 = __s1;
LABEL_74:
              int v36 = memcmp(v42, v40, v41);
              sub_100250CC4(v8, a2);
              goto LABEL_120;
            }
            uint64_t v51 = *(void *)(v8 + 16);
            uint64_t v52 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = __DataStorage._offset.getter();
              if (__OFSUB__(v51, v54)) {
                goto LABEL_143;
              }
              v53 += v51 - v54;
            }
            BOOL v24 = __OFSUB__(v52, v51);
            int64_t v55 = v52 - v51;
            if (v24) {
              goto LABEL_136;
            }
            uint64_t v56 = __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_155;
            }
LABEL_87:
            if (v56 >= v55) {
              size_t v60 = v55;
            }
            else {
              size_t v60 = v56;
            }
            int v61 = memcmp(__s1, v53, v60);
            swift_release();
            swift_release();
            uint64_t result = sub_100250CC4(v17, v16);
            uint64_t v13 = v86;
            if (!v61) {
              goto LABEL_164;
            }
LABEL_15:
            a3 = (a3 + 1) & v88;
            if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
              goto LABEL_123;
            }
            break;
        }
      }
    }
  }
LABEL_123:
  uint64_t v76 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v77 = (uint64_t *)(*(void *)(v76 + 48) + 16 * a3);
  *uint64_t v77 = v8;
  v77[1] = a2;
  uint64_t v78 = *(void *)(v76 + 16);
  BOOL v24 = __OFADD__(v78, 1);
  uint64_t v79 = v78 + 1;
  if (v24) {
    goto LABEL_129;
  }
  *(void *)(v76 + 16) = v79;
  return result;
}

Swift::Int sub_10059CE54(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10059A334();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_10059E28C();
      goto LABEL_14;
    }
    sub_1005A059C();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for SFAutoUnlockDeviceType(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void sub_10059CFA4(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    sub_10059AF38(v8, &qword_10096D4D0);
  }
  else
  {
    if (v7 > v6)
    {
      sub_10059EA0C(&qword_10096D4D0);
      goto LABEL_14;
    }
    sub_1005A13A0(v8, &qword_10096D4D0);
  }
  uint64_t v9 = *v3;
  Swift::Int v10 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for SDAirDropSendConnection(0);
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

Swift::Int sub_10059D13C(Swift::Int result, unint64_t i, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  if (a3)
  {
    sub_10059A5EC();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_10059E424();
      goto LABEL_13;
    }
    sub_1005A0818();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Task.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  uint64_t i = result & ~v9;
  uint64_t v10 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    swift_retain();
    char v11 = static Task.== infix(_:_:)();
    uint64_t result = swift_release();
    if (v11) {
      goto LABEL_16;
    }
    uint64_t v12 = ~v9;
    for (uint64_t i = (i + 1) & v12; ((*(void *)(v10 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; uint64_t i = (i + 1) & v12)
    {
      swift_retain();
      char v13 = static Task.== infix(_:_:)();
      uint64_t result = swift_release();
      if (v13) {
        goto LABEL_16;
      }
    }
  }
LABEL_13:
  uint64_t v14 = *v18;
  *(void *)(*v18 + 8 * (i >> 6) + 56) |= 1 << i;
  *(void *)(*(void *)(v14 + 48) + 8 * i) = v5;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (!v16)
  {
    *(void *)(v14 + 16) = v17;
    return result;
  }
  __break(1u);
LABEL_16:
  sub_10000A844(&qword_100979FA0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10059D344(void *a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10059A8E0(v12 + 1, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint, &qword_100979E80, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint, (void (*)(char *))sub_1003152B0);
    goto LABEL_8;
  }
  if (v13 <= v12)
  {
    sub_1005A0AE0();
LABEL_8:
    uint64_t v15 = *v4;
    Hasher.init(_seed:)();
    sub_1003152B0();
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v16 & ~v17;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v26 = v8;
      uint64_t v18 = ~v17;
      uint64_t v14 = v9;
      uint64_t v19 = *(void *)(v9 + 72);
      while (1)
      {
        sub_1005A80F0(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
        char v20 = sub_10031D658(v11, a1);
        sub_10031C1C0((uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
        if (v20) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v9;
  sub_10059E5D0(type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint, &qword_100979E80, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
LABEL_14:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_1005A8158((uint64_t)a1, *(void *)(v21 + 48) + *(void *)(v14 + 72) * a2, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10059D61C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10059A8E0(v12 + 1, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint, &qword_100979E78, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint, (void (*)(char *))sub_100314FE0);
    goto LABEL_8;
  }
  if (v13 <= v12)
  {
    sub_1005A0DBC();
LABEL_8:
    uint64_t v15 = *v4;
    Hasher.init(_seed:)();
    sub_100314FE0();
    Swift::Int v16 = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v16 & ~v17;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v26 = v8;
      uint64_t v18 = ~v17;
      uint64_t v14 = v9;
      uint64_t v19 = *(void *)(v9 + 72);
      while (1)
      {
        sub_1005A80F0(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
        char v20 = sub_10031C718((uint64_t)v11, a1);
        sub_10031C1C0((uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
        if (v20) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v9;
  sub_10059E5D0(type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint, &qword_100979E78, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
LABEL_14:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_1005A8158(a1, *(void *)(v21 + 48) + *(void *)(v14 + 72) * a2, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10059D8F4(Swift::Int result, Swift::Int a2, Swift::Int a3, Swift::Int a4, unint64_t a5, char a6)
{
  Swift::Int v11 = result;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0) {
    goto LABEL_22;
  }
  if (a6)
  {
    sub_10059ABFC();
  }
  else
  {
    if (v13 > v12)
    {
      uint64_t result = (Swift::Int)sub_10059E848();
      goto LABEL_22;
    }
    sub_1005A1098();
  }
  uint64_t v14 = *v6;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v14 + 32);
  a5 = result & ~v15;
  uint64_t v16 = v14 + 56;
  if ((*(void *)(v14 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5))
  {
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v14 + 48);
    while (1)
    {
      uint64_t v19 = (void *)(v18 + 32 * a5);
      uint64_t v20 = v19[2];
      uint64_t v21 = v19[3];
      BOOL v22 = *v19 == v11 && v19[1] == a2;
      if (v22 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v20 == a3 && v21 == a4) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          break;
        }
      }
      a5 = (a5 + 1) & v17;
      if (((*(void *)(v16 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5) & 1) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_22:
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  uint64_t v25 = (Swift::Int *)(*(void *)(v24 + 48) + 32 * a5);
  *uint64_t v25 = v11;
  v25[1] = a2;
  _OWORD v25[2] = a3;
  v25[3] = a4;
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
  return result;
}

void *sub_10059DADC()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979ED0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10059DC74()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979F78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10059DE28(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - v7;
  sub_10000A844(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  uint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  uint64_t v26 = v4;
  BOOL v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    uint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_10059E0D8()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979F68);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_10025ADCC(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10059E28C()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979EA8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10059E424()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979FA8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10059E5D0(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v8 = v4;
  uint64_t v9 = a1(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  unint64_t v12 = (char *)&v30 - v11;
  sub_10000A844(a2);
  uint64_t v13 = *v4;
  uint64_t v14 = static _SetStorage.copy(original:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v8 = v15;
    return result;
  }
  uint64_t result = (void *)(v14 + 56);
  unint64_t v17 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  uint64_t v30 = v8;
  uint64_t v31 = (const void *)(v13 + 56);
  if (v15 != v13 || (unint64_t)result >= v13 + 56 + 8 * v17) {
    uint64_t result = memmove(result, v31, 8 * v17);
  }
  int64_t v19 = 0;
  *(void *)(v15 + 16) = *(void *)(v13 + 16);
  uint64_t v20 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & *(void *)(v13 + 56);
  int64_t v23 = (unint64_t)(v20 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      unint64_t v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v25 = v24 | (v19 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v27 >= v23) {
      goto LABEL_28;
    }
    unint64_t v28 = *((void *)v31 + v27);
    ++v19;
    if (!v28)
    {
      int64_t v19 = v27 + 1;
      if (v27 + 1 >= v23) {
        goto LABEL_28;
      }
      unint64_t v28 = *((void *)v31 + v19);
      if (!v28)
      {
        int64_t v19 = v27 + 2;
        if (v27 + 2 >= v23) {
          goto LABEL_28;
        }
        unint64_t v28 = *((void *)v31 + v19);
        if (!v28) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_12:
    unint64_t v26 = *(void *)(v10 + 72) * v25;
    sub_1005A80F0(*(void *)(v13 + 48) + v26, (uint64_t)v12, a3);
    uint64_t result = (void *)sub_1005A8158((uint64_t)v12, *(void *)(v15 + 48) + v26, a4);
  }
  int64_t v29 = v27 + 3;
  if (v29 >= v23)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v8 = v30;
    goto LABEL_30;
  }
  unint64_t v28 = *((void *)v31 + v29);
  if (v28)
  {
    int64_t v19 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v19 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v19 >= v23) {
      goto LABEL_28;
    }
    unint64_t v28 = *((void *)v31 + v19);
    ++v29;
    if (v28) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_10059E848()
{
  uint64_t v1 = v0;
  sub_10000A844(&qword_100979F00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = v17[2];
    uint64_t v20 = v17[3];
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    void v21[2] = v19;
    v21[3] = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10059EA0C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10000A844(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10059EBB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000A844(&qword_100979FC8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1005A81E8(&qword_10096B5A8, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10059EF60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000A844(&qword_100979FB8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1005A81E8(&qword_10096B5A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10059F310()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10000A844((uint64_t *)&unk_10096D450);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1005A81E8(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}