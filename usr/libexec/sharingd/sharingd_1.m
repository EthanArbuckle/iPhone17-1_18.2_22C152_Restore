unint64_t sub_100246E10(uint64_t a1)
{
  return sub_100246E1C(a1, &qword_10096AC50);
}

unint64_t sub_100246E1C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(a2);
  v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 2);
    uint64_t v7 = *((void *)v5 - 1);
    char v8 = *v5;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1005838BC(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v6;
    v11[1] = v7;
    *(unsigned char *)(v3[7] + result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v5 += 24;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100246F2C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096AC98);
  v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1005838BC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100247050(uint64_t a1)
{
  return sub_100247078(a1, &qword_10096AC88, &qword_10096AC90, (uint64_t (*)(uint64_t))sub_1005836C4);
}

unint64_t sub_100247078(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10024A330(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_100249444(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002471A8(uint64_t a1)
{
  return sub_1002471BC(a1, &qword_10096AB60, &qword_10096AB68);
}

unint64_t sub_1002471BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000A844(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_10024A330(v16, (uint64_t)v9, a2);
    unint64_t result = sub_100583A00((uint64_t)v9);
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = v11[6];
    uint64_t v22 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v9, v22);
    *(void *)(v11[7] + 8 * v20) = *(void *)&v9[v13];
    uint64_t v23 = v11[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002473A8()
{
  return swift_deallocClassInstance();
}

uint64_t variable initialization expression of HeadphoneProxFeatureClient.manager()
{
  return static HeadphoneProxFeatureManager.shared.getter();
}

unint64_t variable initialization expression of SDB389BubbleMonitor.bubbleDevices()
{
  return sub_1002471BC((uint64_t)&_swiftEmptyArrayStorage, &qword_10096ACC8, &qword_10096ACD0);
}

uint64_t variable initialization expression of SDB389BubbleMonitor.updateHandler()
{
  return 0;
}

id variable initialization expression of SDB389BubbleMonitor.bubbleScanner()
{
  id v0 = objc_allocWithZone((Class)SFDeviceDiscovery);

  return [v0 init];
}

id variable initialization expression of SDAirDropService.deviceStatus()
{
  return sub_100247480((uint64_t)off_1008C6938, (SEL *)&selRef_sharedMonitor);
}

id variable initialization expression of SDAirDropService.nearbyAgent()
{
  return sub_100247480((uint64_t)off_1008C6930, (SEL *)&selRef_sharedNearbyAgent);
}

id sub_100247480(uint64_t a1, SEL *a2)
{
  id v2 = [self *a2];

  return v2;
}

id variable initialization expression of SDAirDropService.bleController()
{
  if (qword_10096A050 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_100994918;

  return v0;
}

void *variable initialization expression of SDAirDropHashStoreCDB.stagedDeletedIDs()
{
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of SDAirDropHashStoreCDB.stagedAdditions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of SDAirDropService.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10000B740(0, (unint64_t *)&qword_10096A1A0);
  static DispatchQoS.default.getter();
  v7[1] = &_swiftEmptyArrayStorage;
  sub_100248A28((unint64_t *)&unk_100974840, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000A844((uint64_t *)&unk_10096A1B0);
  sub_1002477E4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

id variable initialization expression of SDAirDropHashStoreCDB.reader()
{
  sub_10000B740(0, (unint64_t *)&qword_10096A1C0);
  id v0 = objc_allocWithZone((Class)CUKeyValueStoreReader);
  swift_getObjCClassFromMetadata();

  return [v0 initWithKeyType:valueType:];
}

unint64_t sub_1002477E4()
{
  unint64_t result = qword_100974850;
  if (!qword_100974850)
  {
    sub_100247840((uint64_t *)&unk_10096A1B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100974850);
  }
  return result;
}

uint64_t sub_100247840(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

id variable initialization expression of SDB389SetupAgent.queue()
{
  id v0 = (void *)CUMainQueue();

  return v0;
}

uint64_t type metadata accessor for SDAirDropDownloadDestinationProviderFactory()
{
  return self;
}

uint64_t type metadata accessor for SDAirDropDownloadDestinationProvideriOS()
{
  return self;
}

void type metadata accessor for SFAutoUnlockDeviceType(uint64_t a1)
{
}

void type metadata accessor for SFB389NFCResponse(uint64_t a1)
{
}

void type metadata accessor for BSInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for SFPencilDeviceType(uint64_t a1)
{
}

void type metadata accessor for CBPairingType(uint64_t a1)
{
}

void type metadata accessor for SecTrust(uint64_t a1)
{
}

void type metadata accessor for SFAirDropNodeSelectionReason(uint64_t a1)
{
}

void type metadata accessor for RPControlFlags(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for SFAirDropTransferUserResponse(uint64_t a1)
{
}

void type metadata accessor for SDAirDropDiscoveryLevel(uint64_t a1)
{
}

void type metadata accessor for SFWatchWristState(uint64_t a1)
{
}

void type metadata accessor for WritingOptions(uint64_t a1)
{
}

void type metadata accessor for SDRPNearFieldPollingType(uint64_t a1)
{
}

void type metadata accessor for SFAuthenticationError(uint64_t a1)
{
}

void type metadata accessor for SDAirDropFlags(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

uint64_t sub_100247A64(uint64_t a1, uint64_t a2)
{
  return sub_1002490B4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100247A90()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100247ADC()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100247B34()
{
  return Hasher._finalize()();
}

uint64_t sub_100247B9C()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100247C08(uint64_t a1, uint64_t a2)
{
  return sub_1002490B4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void *sub_100247C20@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100247C2C(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100247C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100247C4C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100247C60@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100247C74@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100247C88(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100247CB8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100247CE4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100247D08(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100247D1C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100247D30(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100247D44@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100247D58(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100247D6C(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100247D80(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100247D94()
{
  return *v0 == 0;
}

void *sub_100247DA4(void *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL sub_100247DB8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100247DCC(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100247E44(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100247EC4@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

_DWORD *sub_100247F08@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

Swift::Int sub_100247F18()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100247F60()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100247F8C()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100247FD0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100248018()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100248044()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100248088()
{
  return Hasher._finalize()();
}

uint64_t sub_1002480EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100248A28(&qword_10096A9E0, type metadata accessor for SFAuthenticationError);

  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100248168()
{
  return Hasher._finalize()();
}

void sub_1002481C8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1002481D4(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unsigned char *sub_1002481DC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

unsigned char *sub_1002481F0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

unsigned char *sub_100248204@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100248218(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    unsigned char *v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_100248248@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    unsigned char *v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_100248274@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  unsigned char *v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned char *sub_100248298(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *sub_1002482AC(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *sub_1002482C0(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *sub_1002482D4@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1002482E8(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1002482FC(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100248310(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100248324()
{
  return *v0 == 0;
}

unsigned char *sub_100248334(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned char *sub_100248348@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

id sub_100248354()
{
  return *v0;
}

uint64_t sub_10024835C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100248368@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10024A15C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_1002483A8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1002483B8(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1002483C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1002483D8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = sub_10024A124(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unsigned __int8 *sub_100248418@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100248428(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100248434()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100248444(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AE20, type metadata accessor for LAError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1002484B0(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AE20, type metadata accessor for LAError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10024851C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100248A28(&qword_10096AE20, type metadata accessor for LAError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1002485AC()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1002485E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100248A28(&qword_10096AE20, type metadata accessor for LAError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100248660()
{
  return Hasher._finalize()();
}

uint64_t sub_1002486C4(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AC78, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_100248A28(&qword_10096AEA0, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100248780(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AE90, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_100248A28(&qword_10096AE98, type metadata accessor for FileProtectionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10024883C(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AB38, type metadata accessor for Name);
  uint64_t v3 = sub_100248A28(&qword_10096AB40, type metadata accessor for Name);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002488F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100248924(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AB48, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_100248A28(&qword_10096AB50, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1002489E0()
{
  return sub_100248A28(&qword_10096A940, type metadata accessor for URLResourceKey);
}

uint64_t sub_100248A28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100248A70()
{
  return sub_100248A28(&qword_10096A948, type metadata accessor for URLResourceKey);
}

uint64_t sub_100248AB8()
{
  return sub_100248A28((unint64_t *)&unk_10096A950, type metadata accessor for URLResourceKey);
}

uint64_t sub_100248B00()
{
  return sub_100248A28(&qword_10096EB90, type metadata accessor for SDAirDropFlags);
}

uint64_t sub_100248B48()
{
  return sub_100248A28(&qword_10096A960, type metadata accessor for SDAirDropFlags);
}

uint64_t sub_100248B90()
{
  return sub_100248A28(&qword_10096A968, type metadata accessor for SDAirDropFlags);
}

uint64_t sub_100248BD8()
{
  return sub_100248A28(&qword_10096A970, type metadata accessor for SDAirDropFlags);
}

uint64_t sub_100248C20()
{
  return sub_100248A28(&qword_10096A978, type metadata accessor for WritingOptions);
}

uint64_t sub_100248C68()
{
  return sub_100248A28(&qword_10096A980, type metadata accessor for WritingOptions);
}

uint64_t sub_100248CB0()
{
  return sub_100248A28(&qword_10096A988, type metadata accessor for WritingOptions);
}

uint64_t sub_100248CF8()
{
  return sub_100248A28(&qword_10096A990, type metadata accessor for WritingOptions);
}

uint64_t sub_100248D40()
{
  return sub_100248A28(&qword_10096A998, type metadata accessor for Name);
}

uint64_t sub_100248D88()
{
  return sub_100248A28(&qword_10096A9A0, type metadata accessor for Name);
}

BOOL sub_100248DD0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100248DE4@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100248E2C(uint64_t a1)
{
  uint64_t v2 = sub_100248A28((unint64_t *)&qword_10096AE80, type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey);
  uint64_t v3 = sub_100248A28(&qword_10096AE88, type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100248EE8(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AE28, type metadata accessor for LAError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100248F54(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AE28, type metadata accessor for LAError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100248FC4(uint64_t a1)
{
  uint64_t v2 = sub_100248A28(&qword_10096AE20, type metadata accessor for LAError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100249030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100248A28(&qword_10096AE20, type metadata accessor for LAError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1002490B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1002490F8()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10024914C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1002491C0()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10024924C()
{
  return sub_100248A28(&qword_10096A9A8, type metadata accessor for Name);
}

uint64_t sub_100249294()
{
  return sub_100248A28(&qword_10096A9B0, type metadata accessor for RPControlFlags);
}

uint64_t sub_1002492DC()
{
  return sub_100248A28(&qword_10096A9B8, type metadata accessor for RPControlFlags);
}

uint64_t sub_100249324()
{
  return sub_100248A28(&qword_10096A9C0, type metadata accessor for RPControlFlags);
}

uint64_t sub_10024936C()
{
  return sub_100248A28(&qword_10096A9C8, type metadata accessor for RPControlFlags);
}

uint64_t sub_1002493B4()
{
  return sub_100248A28(&qword_10096A9D0, type metadata accessor for SFAutoUnlockDeviceType);
}

uint64_t sub_1002493FC()
{
  return sub_100248A28(&qword_10096A9D8, type metadata accessor for SFAuthenticationError);
}

_OWORD *sub_100249444(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_100249454()
{
  uint64_t v0 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v55 = (char *)&v49 - v12;
  id v13 = sub_1001B2E7C();
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_21;
  }
  uint64_t v14 = v13;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v15(v6, v11, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_21:
    sub_10000A7E8((uint64_t)v6, (uint64_t *)&unk_10096AC10);
    if (qword_100969AB0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_10000B47C(v39, (uint64_t)qword_100969AB8);
    v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to get downloads real path failed to cleanup directory", v42, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v53 = v7;
  v15(v55, v6, v7);
  v59[0] = (id)0xD000000000000011;
  v59[1] = (id)0x80000001007B60B0;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for URL.DirectoryHint.isDirectory(_:), v0);
  sub_10024A1FC();
  URL.append<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v52 = self;
  id v16 = [v52 defaultManager];
  URL.relativePath.getter();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v16 enumeratorAtPath:v17];

  id v54 = v18;
  if (v18)
  {
    unint64_t v20 = (void (**)(char *, uint64_t))(v8 + 8);
    v51 = (char *)&type metadata for Any + 8;
    *(void *)&long long v19 = 136315138;
    long long v50 = v19;
    *(void *)&long long v19 = 136315394;
    long long v49 = v19;
    while (1)
    {
      if (objc_msgSend(v54, "nextObject", v49))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v58, 0, sizeof(v58));
      }
      sub_10024A250((uint64_t)v58, (uint64_t)v59);
      if (!v59[3])
      {

        sub_10000A7E8((uint64_t)v59, (uint64_t *)&unk_10096AC20);
        goto LABEL_33;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v21 = v56;
      unint64_t v22 = v57;
      if (qword_100969AB0 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10000B47C(v23, (uint64_t)qword_100969AB8);
      swift_bridgeObjectRetain_n();
      BOOL v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        v59[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = v50;
        swift_bridgeObjectRetain();
        *(void *)(v26 + 4) = sub_100254634(v21, v22, (uint64_t *)v59);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Removing stale AirDrop download %s", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v27 = [v52 defaultManager];
      URL.appendingPathComponent(_:)();
      URL._bridgeToObjectiveC()(v28);
      v30 = v29;
      (*v20)(v11, v53);
      v59[0] = 0;
      unsigned int v31 = [v27 removeItemAtURL:v30 error:v59];

      id v32 = v59[0];
      if (v31)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v33 = v32;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = swift_slowAlloc();
          v37 = (void *)swift_slowAlloc();
          v59[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = v49;
          swift_bridgeObjectRetain();
          *(void *)(v36 + 4) = sub_100254634(v21, v22, (uint64_t *)v59);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v36 + 12) = 2112;
          swift_errorRetain();
          uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v36 + 14) = v38;
          void *v37 = v38;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to delete file %s %@", (uint8_t *)v36, 0x16u);
          sub_10000A844(&qword_10096B850);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
          swift_errorRelease();
          swift_errorRelease();
        }
      }
    }

LABEL_33:
    (*v20)(v55, v53);
  }
  else
  {
    if (qword_100969AB0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_10000B47C(v43, (uint64_t)qword_100969AB8);
    v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = v53;
    if (v46)
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Failed to create enumerator for AirDropHashDB directory", v48, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v55, v47);
  }
}

unint64_t sub_100249DCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10000A844(&qword_10096AA88);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt32 v4 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = sub_100583758(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    *uint64_t v10 = v6;
    v10[1] = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    Swift::UInt32 v4 = *((_DWORD *)v9 - 4);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100583758(v4);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100249EDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10000A844(&qword_10096AA98);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_100583BA8(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  char v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    BOOL v12 = v8 + 2;
    unsigned __int8 v4 = *((unsigned char *)v8 - 8);
    uint64_t v13 = *v8;
    swift_retain();
    unint64_t result = sub_100583BA8(v4);
    char v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100249FE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000A844(&qword_10096AB28);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 40)
    {
      sub_10024A330(i, (uint64_t)&v11, &qword_10096AB30);
      int v5 = v11;
      unint64_t result = sub_100583D14(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      unint64_t result = (unint64_t)sub_100249444(&v12, (_OWORD *)(v3[7] + 32 * result));
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_10024A0EC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10024A124(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10024A15C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10024A194(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10024A1FC()
{
  unint64_t result = qword_100977CA0;
  if (!qword_100977CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100977CA0);
  }
  return result;
}

uint64_t sub_10024A250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096AC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10024A2B8(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

uint64_t sub_10024A330(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000A844(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for SFHUDBannerType(uint64_t a1)
{
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void type metadata accessor for ACCBLEPairing_Status_t(uint64_t a1)
{
}

void type metadata accessor for ACCBLEPairing_Types_t(uint64_t a1)
{
}

void type metadata accessor for SFAuthenticationType(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for SFUnlockErrorCode(uint64_t a1)
{
}

void type metadata accessor for SFDeviceClassCode(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for SFAirDropMapsLinkType(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for RPStatusFlags(uint64_t a1)
{
}

void type metadata accessor for RPFeatureFlags(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for WiFiP2PError(uint64_t a1)
{
}

uint64_t _s14descr1008C9AB9V10AskRequestV8FileInfoVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for UserProfile(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LongHash(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LongHash(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

__n128 initializeWithTake for SDBLEAdvertiser.Configuration.AirDrop(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_10024A5B4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10024A5D4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for OperatingSystemVersion(uint64_t a1)
{
}

uint64_t sub_10024A614()
{
  return sub_100248A28(&qword_10096AD88, type metadata accessor for RPFeatureFlags);
}

uint64_t sub_10024A65C()
{
  return sub_100248A28(&qword_10096AD90, type metadata accessor for RPFeatureFlags);
}

uint64_t sub_10024A6A4()
{
  return sub_100248A28(&qword_10096AD98, type metadata accessor for RPFeatureFlags);
}

uint64_t sub_10024A6EC()
{
  return sub_100248A28(&qword_10096ADA0, type metadata accessor for RPFeatureFlags);
}

uint64_t sub_10024A734()
{
  return sub_100248A28(&qword_10096ADA8, type metadata accessor for RPStatusFlags);
}

uint64_t sub_10024A77C()
{
  return sub_100248A28(&qword_10096ADB0, type metadata accessor for RPStatusFlags);
}

uint64_t sub_10024A7C4()
{
  return sub_100248A28(&qword_10096ADB8, type metadata accessor for RPStatusFlags);
}

uint64_t sub_10024A80C()
{
  return sub_100248A28(&qword_10096ADC0, type metadata accessor for RPStatusFlags);
}

uint64_t sub_10024A854()
{
  return sub_100248A28(&qword_10096ADC8, type metadata accessor for SFDeviceClassCode);
}

uint64_t sub_10024A89C()
{
  return sub_100248A28(&qword_10096ADD0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10024A8E4()
{
  return sub_100248A28(&qword_10096ADD8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10024A92C()
{
  return sub_100248A28(&qword_10096ADE0, type metadata accessor for FileProtectionType);
}

uint64_t sub_10024A974()
{
  return sub_100248A28(&qword_10096ADE8, type metadata accessor for FileProtectionType);
}

uint64_t sub_10024A9BC()
{
  return sub_100248A28(&qword_10096ADF0, type metadata accessor for FileProtectionType);
}

uint64_t sub_10024AA04()
{
  return sub_100248A28(&qword_10096ADF8, type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey);
}

uint64_t sub_10024AA4C()
{
  return sub_100248A28(&qword_10096AE00, type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey);
}

uint64_t sub_10024AA94()
{
  return sub_100248A28(&qword_10096AE08, type metadata accessor for PFMediaCapabilitiesOutOfBandHintsKey);
}

uint64_t sub_10024AADC()
{
  return sub_100248A28(&qword_10096AE10, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10024AB24()
{
  return sub_100248A28(&qword_10096AE18, type metadata accessor for Code);
}

uint64_t sub_10024AB6C()
{
  return sub_100248A28(&qword_10096AE20, type metadata accessor for LAError);
}

void type metadata accessor for LAError(uint64_t a1)
{
}

uint64_t sub_10024ABC8()
{
  return sub_100248A28(&qword_10096AE28, type metadata accessor for LAError);
}

uint64_t sub_10024AC10()
{
  return sub_100248A28(&qword_10096AE30, type metadata accessor for LAError);
}

uint64_t sub_10024AC58()
{
  return sub_100248A28(&qword_10096AE38, type metadata accessor for LAError);
}

uint64_t sub_10024ACA0()
{
  return sub_100248A28(&qword_10096AE40, type metadata accessor for Code);
}

uint64_t sub_10024ACE8()
{
  return sub_100248A28(&qword_10096AE48, type metadata accessor for Code);
}

unint64_t sub_10024AD34()
{
  unint64_t result = qword_10096AE50;
  if (!qword_10096AE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096AE50);
  }
  return result;
}

uint64_t sub_10024AD88()
{
  return sub_100248A28(&qword_10096AE58, type metadata accessor for LAError);
}

uint64_t sub_10024ADD0()
{
  return sub_100248A28(&qword_10096AE60, type metadata accessor for LAError);
}

uint64_t sub_10024AE18()
{
  return sub_100248A28(&qword_10096AE68, type metadata accessor for CFString);
}

uint64_t sub_10024AE60()
{
  return sub_100248A28((unint64_t *)&qword_10096AE70, type metadata accessor for CFString);
}

void type metadata accessor for CBAdvertiseRate(uint64_t a1)
{
}

void type metadata accessor for CBAirDropConfigData(uint64_t a1)
{
}

void type metadata accessor for CBAirDropFlags(uint64_t a1)
{
}

__n128 initializeWithTake for SDAirDropAppleIDState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10024AEF0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10024AF10(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_10024AF60(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10024AFA8()
{
  return sub_100248A28(&qword_10096AED8, type metadata accessor for CBAirDropFlags);
}

uint64_t sub_10024AFF0()
{
  return sub_100248A28(&qword_10096AEE0, type metadata accessor for CBAirDropFlags);
}

uint64_t sub_10024B038()
{
  return sub_100248A28(&qword_10096AEE8, type metadata accessor for CBAirDropFlags);
}

uint64_t sub_10024B080()
{
  return sub_100248A28(&qword_10096AEF0, type metadata accessor for CBAirDropFlags);
}

uint64_t sub_10024B0C8()
{
  return sub_100248A28(&qword_10096AEF8, type metadata accessor for CBAirDropConfigData);
}

uint64_t sub_10024B110()
{
  return sub_100248A28(&qword_10096AF00, type metadata accessor for CBAirDropConfigData);
}

uint64_t sub_10024B158()
{
  return sub_100248A28(&qword_10096AF08, type metadata accessor for CBAirDropConfigData);
}

uint64_t sub_10024B1A0()
{
  return sub_100248A28((unint64_t *)&unk_10096AF10, type metadata accessor for CBAirDropConfigData);
}

uint64_t sub_10024B2A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096B100);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096B100);
  if (qword_100969CD8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_1009946D8);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10024B370@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  sub_10024D2D4((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;

  return v4;
}

uint64_t sub_10024B3C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v46 = a1;
  uint64_t v47 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v48 = v8;
  uint64_t v49 = 0;
  uint64_t v50 = v11 & v9;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10024B6EC((uint64_t)&v44);
  long long v12 = v44;
  if (!v44) {
    goto LABEL_27;
  }
  sub_100249444(v45, v43);
  uint64_t v13 = *(void **)a5;
  unint64_t v15 = sub_1005837C4((uint64_t)v12);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10058C87C();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(void *)(v23[6] + 8 * v15) = v12;
    sub_100249444(v43, (_OWORD *)(v23[7] + 32 * v15));
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v23[2] = v26;
LABEL_16:
    sub_10024B6EC((uint64_t)&v44);
    for (uint64_t i = v44; v44; uint64_t i = v44)
    {
      sub_100249444(v45, v43);
      v29 = *(void **)a5;
      unint64_t v31 = sub_1005837C4((uint64_t)i);
      uint64_t v32 = v29[2];
      BOOL v33 = (v30 & 1) == 0;
      uint64_t v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_28;
      }
      char v35 = v30;
      if (v29[3] < v34)
      {
        sub_10058500C(v34, 1);
        unint64_t v36 = sub_1005837C4((uint64_t)i);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_30;
        }
        unint64_t v31 = v36;
      }
      if (v35)
      {
        sub_10024D2D4((uint64_t)v43, (uint64_t)v42);
        sub_10024D338((uint64_t)v43);

        v28 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v31);
        sub_10024D338((uint64_t)v28);
        sub_100249444(v42, v28);
      }
      else
      {
        uint64_t v38 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(void *)(v38[6] + 8 * v31) = i;
        sub_100249444(v43, (_OWORD *)(v38[7] + 32 * v31));
        uint64_t v39 = v38[2];
        BOOL v25 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v25) {
          goto LABEL_29;
        }
        v38[2] = v40;
      }
      sub_10024B6EC((uint64_t)&v44);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10024D330();
    return swift_release();
  }
  sub_10058500C(v18, a4 & 1);
  unint64_t v20 = sub_1005837C4((uint64_t)v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_10024D2D4((uint64_t)v43, (uint64_t)v42);
    sub_10024D338((uint64_t)v43);

    unint64_t v22 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v15);
    sub_10024D338((uint64_t)v22);
    sub_100249444(v42, v22);
    goto LABEL_16;
  }
LABEL_30:
  type metadata accessor for CFString(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10024B6EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v10);
    sub_10024D2D4(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(void *)&v24[0] = v11;
    id v12 = v11;
    goto LABEL_23;
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v10 = __clz(__rbit64(v15)) + (v13 << 6);
      int64_t v7 = v13;
      goto LABEL_3;
    }
    int64_t v16 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        int64_t v13 = v16;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        unint64_t v15 = *(void *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          int64_t v13 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v16 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (v15) {
            goto LABEL_10;
          }
          int64_t v13 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            unint64_t v15 = *(void *)(v4 + 8 * v13);
            if (v15) {
              goto LABEL_7;
            }
            int64_t v7 = v14 - 1;
            int64_t v17 = v5 + 6;
            while (v14 != v17)
            {
              unint64_t v15 = *(void *)(v4 + 8 * v17++);
              if (v15)
              {
                int64_t v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v18 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10024D388((uint64_t)v24, (uint64_t)v22, &qword_10096B120);
  if (*(void *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    uint64_t v21 = v23;
    v18(v20);
    return sub_10000A7E8((uint64_t)v20, &qword_10096B128);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10024B8CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000A844(&qword_10096B130);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A844(&qword_10096B138);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  int64_t v13 = (char *)&v37 - v12;
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v17 = v1[2];
  int64_t v16 = v1[3];
  int64_t v18 = v16;
  unint64_t v19 = v1[4];
  char v37 = v6;
  uint64_t v40 = v17;
  if (v19)
  {
    uint64_t v38 = a1;
    uint64_t v39 = v15;
    uint64_t v20 = (v19 - 1) & v19;
    unint64_t v21 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
    uint64_t v22 = *(void *)(v14 + 48);
    uint64_t v23 = v14;
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v13, v22 + *(void *)(*(void *)(v24 - 8) + 72) * v21, v24);
    uint64_t v25 = *(void *)(v23 + 56);
    uint64_t v26 = type metadata accessor for SFNWInterfaceType();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(&v13[*(int *)(v3 + 48)], v25 + *(void *)(*(void *)(v26 - 8) + 72) * v21, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    a1 = v38;
    uint64_t v15 = v39;
    goto LABEL_23;
  }
  int64_t v27 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v28 = (unint64_t)(v17 + 64) >> 6;
  if (v27 < v28)
  {
    unint64_t v29 = *(void *)(v15 + 8 * v27);
    if (v29)
    {
LABEL_7:
      uint64_t v38 = a1;
      uint64_t v39 = v15;
      uint64_t v20 = (v29 - 1) & v29;
      unint64_t v21 = __clz(__rbit64(v29)) + (v27 << 6);
      int64_t v18 = v27;
      goto LABEL_3;
    }
    int64_t v30 = v16 + 2;
    int64_t v18 = v16 + 1;
    if (v16 + 2 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v30);
      if (v29)
      {
LABEL_10:
        int64_t v27 = v30;
        goto LABEL_7;
      }
      int64_t v18 = v16 + 2;
      if (v16 + 3 < v28)
      {
        unint64_t v29 = *(void *)(v15 + 8 * (v16 + 3));
        if (v29)
        {
          int64_t v27 = v16 + 3;
          goto LABEL_7;
        }
        int64_t v30 = v16 + 4;
        int64_t v18 = v16 + 3;
        if (v16 + 4 < v28)
        {
          unint64_t v29 = *(void *)(v15 + 8 * v30);
          if (v29) {
            goto LABEL_10;
          }
          int64_t v27 = v16 + 5;
          int64_t v18 = v16 + 4;
          if (v16 + 5 < v28)
          {
            unint64_t v29 = *(void *)(v15 + 8 * v27);
            if (v29) {
              goto LABEL_7;
            }
            int64_t v18 = v28 - 1;
            int64_t v31 = v16 + 6;
            while (v28 != v31)
            {
              unint64_t v29 = *(void *)(v15 + 8 * v31++);
              if (v29)
              {
                int64_t v27 = v31 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v23 = v14;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
  uint64_t v20 = 0;
LABEL_23:
  *uint64_t v1 = v23;
  v1[1] = v15;
  v1[2] = v40;
  v1[3] = v18;
  v1[4] = v20;
  uint64_t v32 = (void (*)(uint64_t))v1[5];
  sub_10024D388((uint64_t)v13, (uint64_t)v10, &qword_10096B138);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    uint64_t v33 = sub_10000A844(&qword_10096AC00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a1, 1, 1, v33);
  }
  else
  {
    uint64_t v34 = (uint64_t)v10;
    uint64_t v35 = (uint64_t)v37;
    sub_10024D388(v34, (uint64_t)v37, &qword_10096B130);
    v32(v35);
    sub_10000A7E8(v35, &qword_10096B130);
    uint64_t v36 = sub_10000A844(&qword_10096AC00);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(a1, 0, 1, v36);
  }
}

void sub_10024BCEC()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    unint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    _OWORD v20[2] = v10;
    swift_bridgeObjectRetain();
    uint64_t v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      uint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              int64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

void sub_10024BE80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for CFString(0);
  sub_10024D04C();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  CFDictionaryRef v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  OSStatus v8 = SecItemUpdate(isa, v7);

  OSStatus v72 = v8;
  if (v8 == -25300) {
    goto LABEL_16;
  }
  if (!v8)
  {
    if (qword_100969AD0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B47C(v9, (uint64_t)qword_10096B100);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      os_log_t v65 = (os_log_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412546;
      os_log_type_t type = v11;
      Class v13 = Dictionary._bridgeToObjectiveC()().super.isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v65->CFDictionaryRef isa = v13;
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2112;
      Class v70 = Dictionary._bridgeToObjectiveC()().super.isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v65[1].CFDictionaryRef isa = v70;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, type, "Updated keychain item: %@ with %@", (uint8_t *)v12, 0x16u);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  if (qword_100969AD0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B47C(v14, (uint64_t)qword_10096B100);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    v66 = v15;
    unint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 138412802;
    int v71 = v17;
    Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v19 = v20;
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2112;
    Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
    HIDWORD(v70) = HIDWORD(v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v19[1] = v21;
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 22) = 1024;
    swift_beginAccess();
    LODWORD(v70) = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v71, "Failed to update keychain item: %@ with %@, error: %d, will try to delete and re-add", (uint8_t *)v18, 0x1Cu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  CFDictionaryRef v22 = Dictionary._bridgeToObjectiveC()().super.isa;
  OSStatus v23 = SecItemDelete(v22);

  swift_beginAccess();
  OSStatus v72 = v23;
  uint64_t v3 = v2;
  if (!v23)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v69[0] = a1;
    sub_10024B3C0(a2, (uint64_t)sub_10024B370, 0, isUniquelyReferenced_nonNull_native, (uint64_t)v69);
    if (v3)
    {
      swift_bridgeObjectRelease();
      __break(1u);
    }
    else
    {
      v69[3] = v69[0];
      swift_bridgeObjectRelease();
      if (qword_100969AD0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10000B47C(v30, (uint64_t)qword_10096B100);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      int64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      int v33 = v32;
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v34 = swift_slowAlloc();
        typea = (void *)swift_slowAlloc();
        v69[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315650;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v35 = Dictionary.description.getter();
        int v71 = v33;
        uint64_t v36 = v35;
        v64 = v31;
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        sub_100254634(v36, v38, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2112;
        Class v39 = Dictionary._bridgeToObjectiveC()().super.isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *typea = v39;
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v34 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v40 = Dictionary.description.getter();
        unint64_t v42 = v41;
        swift_bridgeObjectRelease();
        sub_100254634(v40, v42, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v71, "Adding newItem=%s query=%@ update=%s", (uint8_t *)v34, 0x20u);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      CFDictionaryRef v43 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      OSStatus v44 = SecItemAdd(v43, 0);

      swift_beginAccess();
      OSStatus v72 = v44;
      os_log_type_t v45 = Logger.logObject.getter();
      if (v44)
      {
        os_log_type_t v46 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = swift_slowAlloc();
          uint64_t v48 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v47 = 138412546;
          swift_bridgeObjectRetain();
          Class v49 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v48 = v49;
          *(_WORD *)(v47 + 12) = 1024;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to add keychain item: %@, error:%d", (uint8_t *)v47, 0x12u);
          sub_10000A844(&qword_10096B850);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        _StringGuts.grow(_:)(41);
        v50._object = (void *)0x80000001007B65A0;
        v50._countAndFlagsBits = 0xD00000000000001DLL;
        String.append(_:)(v50);
        swift_bridgeObjectRetain();
        Class v51 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        type metadata accessor for CFDictionary(0);
        _print_unlocked<A, B>(_:_:)();

        v52._countAndFlagsBits = 0x3A726F727265202CLL;
        v52._object = (void *)0xE800000000000000;
        String.append(_:)(v52);
        v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        sub_10024D280();
        swift_allocError();
        *(_DWORD *)uint64_t v54 = 10;
        *(void *)(v54 + 8) = 0;
        *(void *)(v54 + 16) = 0xE000000000000000;
        swift_willThrow();
LABEL_26:
        swift_bridgeObjectRelease();
        return;
      }
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        unint64_t v57 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412290;
        swift_bridgeObjectRetain();
        Class v58 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v57 = v58;
        _os_log_impl((void *)&_mh_execute_header, v45, v55, "Added keychain item: %@", v56, 0xCu);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      int64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412546;
      Class v28 = Dictionary._bridgeToObjectiveC()().super.isa;
      HIDWORD(v69[0]) = HIDWORD(v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v27 = v28;
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 1024;
      LODWORD(v69[0]) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to delete keychain item: %@, error: %d", (uint8_t *)v26, 0x12u);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    _StringGuts.grow(_:)(44);
    v59._countAndFlagsBits = 0xD000000000000020;
    v59._object = (void *)0x80000001007B6570;
    String.append(_:)(v59);
    Class v60 = Dictionary._bridgeToObjectiveC()().super.isa;
    type metadata accessor for CFDictionary(0);
    _print_unlocked<A, B>(_:_:)();

    v61._countAndFlagsBits = 0x3A726F727265202CLL;
    v61._object = (void *)0xE800000000000000;
    String.append(_:)(v61);
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v63 = 10;
    *(void *)(v63 + 8) = 0;
    *(void *)(v63 + 16) = 0xE000000000000000;
    swift_willThrow();
  }
}

uint64_t sub_10024CD18(CFTypeRef a1)
{
  unint64_t v19 = &type metadata for Bool;
  LOBYTE(v18) = 1;
  sub_100249444(&v18, result);
  swift_bridgeObjectRetain();
  uint64_t v2 = (id)kSecReturnData;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  CFTypeRef v16 = a1;
  sub_10059109C(result, v2, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  result[0] = 0;
  type metadata accessor for CFString(0);
  sub_10024D04C();
  swift_bridgeObjectRetain();
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v5 = SecItemCopyMatching(isa, result);

  if (v5 == -25300)
  {
    if (qword_100969AD0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10000B47C(v6, (uint64_t)qword_10096B100);
    CFDictionaryRef v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      CFTypeRef v16 = (CFTypeRef)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v10 = Dictionary.description.getter();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      sub_100254634(v10, v12, (uint64_t *)&v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not find keychain item, query: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v13 = 0;
  }
  else if (result[0])
  {
    CFTypeRef v16 = result[0];
    swift_unknownObjectRetain();
    if (swift_dynamicCast()) {
      uint64_t v13 = v18;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t sub_10024D04C()
{
  unint64_t result = qword_10096AE70;
  if (!qword_10096AE70)
  {
    type metadata accessor for CFString(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096AE70);
  }
  return result;
}

unint64_t sub_10024D0A4()
{
  sub_10000A844(&qword_10096B118);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007706B0;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  sub_10024D04C();
  CFStringRef v1 = (id)kSecClass;
  CFStringRef v2 = (id)kSecClassGenericPassword;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 80) = kSecAttrAccessGroup;
  CFStringRef v3 = (id)kSecAttrAccessGroup;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 128) = kSecAttrAccount;
  CFStringRef v4 = (id)kSecAttrAccount;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 176) = kSecAttrService;
  CFStringRef v5 = (id)kSecAttrService;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 224) = kSecAttrIsInvisible;
  CFStringRef v6 = (id)kSecAttrIsInvisible;
  AnyHashable.init<A>(_:)();
  return sub_1002457F0(inited);
}

unint64_t sub_10024D280()
{
  unint64_t result = qword_100974590;
  if (!qword_100974590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100974590);
  }
  return result;
}

uint64_t sub_10024D2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10024D330()
{
  return swift_release();
}

uint64_t sub_10024D338(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10024D388(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000A844(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10024D3EC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096B140);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096B140);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10024D4B4(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for SFAirDrop.TransferIdentifier();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.AskRequest();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  return _swift_task_switch(sub_10024D674, v6, 0);
}

uint64_t sub_10024D674()
{
  Swift::String v59 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  unint64_t v5 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v48(v2, v1, v3);
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[12];
  uint64_t v8 = v0[13];
  if (v5 < 2)
  {
    (*(void (**)(void, void))(v8 + 8))(v0[15], v0[12]);
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)(SFAirDropReceive.AskRequest.urlItems.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v6, v7);
  if (v9)
  {
LABEL_13:
    BOOL v23 = 0;
    goto LABEL_14;
  }
  uint64_t v11 = SFAirDropReceive.AskRequest.files.getter();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v47 = v10;
  unint64_t v14 = 0;
  uint64_t v15 = v0[10];
  os_log_type_t type = *(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16);
  unint64_t v16 = v11 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  Swift::String v53 = (void (**)(uint64_t, uint64_t))(v15 + 8);
  os_log_t log = *(os_log_t *)(v15 + 72);
  uint64_t v51 = v13 - 1;
  char v17 = 1;
  unint64_t v57 = v0;
  do
  {
    uint64_t v18 = v0[11];
    uint64_t v19 = v0[9];
    type(v18, v16, v19);
    SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v21 = SFIsePub();

    SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    LOBYTE(v20) = SFIsPDF();

    (*v53)(v18, v19);
    if ((v20 & 1) == 0 && (v21 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      BOOL v23 = 0;
      uint64_t v0 = v57;
      goto LABEL_14;
    }
    if (v17)
    {
      uint64_t v0 = v57;
      if (v51 == v14)
      {
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_13;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v0 = v57;
      if (v51 == v14)
      {
        swift_bridgeObjectRelease();
LABEL_22:
        id v26 = objc_allocWithZone((Class)LSApplicationRecord);
        id v27 = sub_1006A5458(0xD000000000000010, 0x80000001007B5A70, 1);
        uint64_t v45 = v0[5];
        os_log_type_t v46 = *(void **)(v45 + 16);
        *(void *)(v45 + 16) = v27;

        goto LABEL_26;
      }
      char v21 = 0;
    }
    ++v14;
    v16 += (unint64_t)log;
    char v17 = v21;
  }
  while (v14 < *(void *)(v12 + 16));
  __break(1u);
  swift_once();
  uint64_t v28 = v0[14];
  uint64_t v29 = v0[12];
  uint64_t v30 = v0[4];
  uint64_t v31 = type metadata accessor for Logger();
  sub_10000B47C(v31, (uint64_t)qword_10096B140);
  v48(v28, v30, v29);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = v0[14];
  uint64_t v36 = v0[12];
  if (v34)
  {
    uint64_t v52 = v0[12];
    os_log_type_t typea = v33;
    uint64_t v37 = v0[7];
    uint64_t v38 = v0[8];
    uint64_t v39 = v0[6];
    uint64_t v40 = swift_slowAlloc();
    uint64_t v54 = (void *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315394;
    loga = v32;
    SFAirDropReceive.AskRequest.id.getter();
    sub_10024E048();
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v43 = v42;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    v57[2] = sub_100254634(v41, v43, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v0 = v57;
    swift_bridgeObjectRelease();
    v47(v35, v52);
    *(_WORD *)(v40 + 12) = 2112;
    swift_errorRetain();
    uint64_t v44 = _swift_stdlib_bridgeErrorToNSError();
    v57[3] = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v54 = v44;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, loga, typea, "Failed to get Books app for ask request %s: %@", (uint8_t *)v40, 0x16u);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    v47(v35, v36);
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_26:
  BOOL v23 = *(void *)(v0[5] + 16) != 0;
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(BOOL))v0[1];
  return v24(v23);
}

uint64_t sub_10024DC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10097F1D0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v3 + 16);
  type metadata accessor for SDAirDropContentHandlerUtilities();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  id v13 = v10;
  sub_10039FAA0(a1, v10, 1, a3);

  return sub_10024DFE8((uint64_t)v9);
}

uint64_t sub_10024DD90()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SDAirDropContentHandleriBooksItems()
{
  return self;
}

uint64_t sub_10024DDEC()
{
  return 1;
}

uint64_t sub_10024DDF4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SDAirDropContentHandleriBooksItems();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_10024DE2C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10024DEC4;
  return sub_10024D4B4(a1);
}

uint64_t sub_10024DEC4(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10024DFC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10024DC4C(a1, a2, a3);
}

uint64_t sub_10024DFE8(uint64_t a1)
{
  uint64_t v2 = sub_10000A844((uint64_t *)&unk_10097F1D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10024E048()
{
  unint64_t result = qword_10096DFC0;
  if (!qword_10096DFC0)
  {
    type metadata accessor for SFAirDrop.TransferIdentifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10096DFC0);
  }
  return result;
}

uint64_t sub_10024E0A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096B240);
  sub_10000B47C(v0, (uint64_t)qword_10096B240);
  return static Logger.airDropNWClient.getter();
}

uint64_t SFAirDropReceive.AskRequest.init(recordID:initialInfo:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v206 = a3;
  uint64_t v184 = a4;
  v181 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription();
  CFDictionaryRef isa = v181[-1].isa;
  __chkstk_darwin(v181);
  v179 = ((char *)v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v178 = type metadata accessor for String.Encoding();
  v177 = *(NSObject **)(v178 - 8);
  __chkstk_darwin(v178);
  v176 = (char *)v159 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844(&qword_10096B258);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v182 = (uint64_t)v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v185 = (uint64_t)v159 - v11;
  uint64_t v188 = type metadata accessor for SFAirDrop.TransferType();
  uint64_t v186 = *(void *)(v188 - 8);
  uint64_t v12 = __chkstk_darwin(v188);
  v183 = (char *)v159 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v187 = (char *)v159 - v14;
  uint64_t v189 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  v191 = *(NSObject **)(v189 - 8);
  __chkstk_darwin(v189);
  v190 = ((char *)v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10000A844((uint64_t *)&unk_10096AC10);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  v197 = (char *)v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v196 = (char *)v159 - v19;
  uint64_t v20 = type metadata accessor for URL();
  v199 = *(NSObject **)(v20 - 8);
  unint64_t v200 = v20;
  uint64_t v21 = __chkstk_darwin(v20);
  v193 = (char *)v159 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  v198 = ((char *)v159 - v24);
  uint64_t v25 = __chkstk_darwin(v23);
  v192 = ((char *)v159 - v26);
  uint64_t v27 = __chkstk_darwin(v25);
  v195 = ((char *)v159 - v28);
  __chkstk_darwin(v27);
  os_log_t v194 = (os_log_t)((char *)v159 - v29);
  uint64_t v30 = type metadata accessor for SFAirDrop.TransferIdentifier();
  unint64_t v201 = *(void *)(v30 - 8);
  uint64_t v202 = v30;
  uint64_t v31 = __chkstk_darwin(v30);
  os_log_type_t v33 = (char *)v159 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v204 = (char *)v159 - v34;
  uint64_t v35 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)v159 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v203 = *(void *)(v38 - 8);
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v41 = (char *)v159 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  unint64_t v43 = (char *)v159 - v42;
  UUID.init(uuidString:)();
  v209 = 0;
  v210 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v209 = 0xD000000000000013;
  v210 = 0x80000001007B6610;
  v44._countAndFlagsBits = a1;
  v44._object = a2;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  CGImageRef v45 = v205;
  Optional.tryUnwrap(_:file:line:)();
  unint64_t v46 = (unint64_t)v45;
  if (v45)
  {

    swift_bridgeObjectRelease();
    return sub_10000A7E8((uint64_t)v37, &qword_100974EA0);
  }
  CGImageRef v205 = (CGImageRef)"UUID from recordID ";
  v175 = v33;
  sub_10000A7E8((uint64_t)v37, &qword_100974EA0);
  swift_bridgeObjectRelease();
  uint64_t v48 = v203;
  (*(void (**)(char *, char *, uint64_t))(v203 + 16))(v41, v43, v38);
  Class v49 = v204;
  SFAirDrop.TransferIdentifier.init(_:)();
  if (!kSFOperationVerifiableIdentityKey)
  {
    __break(1u);
    goto LABEL_118;
  }
  uint64_t v50 = v38;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  unint64_t v52 = v201;
  uint64_t v51 = v202;
  v174 = v43;
  if (!kSFOperationSenderIsMeKey)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  int v53 = v209;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  int v172 = v53;
  int v171 = v209;
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  uint64_t v54 = (void *)static NSUserDefaults.airdrop.getter();
  char v55 = SFAirDropUserDefaults.alwaysAutoAccept.getter();

  if (v55)
  {
    int v56 = 1;
  }
  else
  {
    if (!kSFOperationAutoAcceptKey)
    {
      __break(1u);
      goto LABEL_142;
    }
    NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
    int v56 = v209 & 1;
  }
  int v169 = v56;
  if (!kSFOperationItemsKey)
  {
    __break(1u);
    goto LABEL_138;
  }
  unint64_t v57 = sub_10000B740(0, &qword_10096C910);
  unint64_t v58 = (unint64_t)v206;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  Swift::String v59 = v209;
  uint64_t v166 = v50;
  v167 = v57;
  if (!v209)
  {
    unint64_t v57 = &_swiftEmptySetSingleton;
    goto LABEL_61;
  }
  sub_10000B740(0, (unint64_t *)&unk_10096BA70);
  v170 = v59;
  unint64_t v173 = NSArray.tryCastElements<A>(as:)();
  if (v173 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v72 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v168 = 0;
  if (v72)
  {
    if (v72 < 1)
    {
      __break(1u);
      goto LABEL_112;
    }
    if ((v173 & 0xC000000000000001) != 0)
    {
      uint64_t v73 = 0;
      v74 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        v75 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        Swift::String v76 = String.init(_:)(v75);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v74 = sub_100253208(0, *((void *)v74 + 2) + 1, 1, v74);
        }
        unint64_t v78 = *((void *)v74 + 2);
        unint64_t v77 = *((void *)v74 + 3);
        if (v78 >= v77 >> 1) {
          v74 = sub_100253208((char *)(v77 > 1), v78 + 1, 1, v74);
        }
        ++v73;
        *((void *)v74 + 2) = v78 + 1;
        *(Swift::String *)&v74[16 * v78 + 32] = v76;
      }
      while (v72 != v73);
    }
    else
    {
      v122 = (id *)(v173 + 32);
      v74 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        Swift::String v123 = String.init(_:)(*v122);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v74 = sub_100253208(0, *((void *)v74 + 2) + 1, 1, v74);
        }
        unint64_t v125 = *((void *)v74 + 2);
        unint64_t v124 = *((void *)v74 + 3);
        if (v125 >= v124 >> 1) {
          v74 = sub_100253208((char *)(v124 > 1), v125 + 1, 1, v74);
        }
        *((void *)v74 + 2) = v125 + 1;
        *(Swift::String *)&v74[16 * v125 + 32] = v123;
        ++v122;
        --v72;
      }
      while (v72);
    }
  }
  else
  {
    v74 = (char *)&_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease_n();
  uint64_t v95 = *((void *)v74 + 2);
  if (v95)
  {
    v197 = (char *)&v199[4];
    v198 = v199 + 6;
    swift_bridgeObjectRetain();
    v193 = v74;
    v96 = v74 + 40;
    v97 = &_swiftEmptyArrayStorage;
    Class v49 = v204;
    unint64_t v98 = v200;
    uint64_t v99 = (uint64_t)v196;
    do
    {
      swift_bridgeObjectRetain();
      URL.init(string:)();
      swift_bridgeObjectRelease();
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v198->isa)(v99, 1, v98) == 1)
      {
        sub_10000A7E8(v99, (uint64_t *)&unk_10096AC10);
      }
      else
      {
        uint64_t v100 = v99;
        v101 = *(void (**)(NSObject *, os_log_t, unint64_t))v197;
        os_log_t v102 = v194;
        (*(void (**)(os_log_t, uint64_t, unint64_t))v197)(v194, v100, v98);
        v103 = v195;
        v101(v195, v102, v98);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v97 = (void *)sub_1002534A4(0, v97[2] + 1, 1, (unint64_t)v97, &qword_10096B358, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
        }
        unint64_t v105 = v97[2];
        unint64_t v104 = v97[3];
        if (v105 >= v104 >> 1) {
          v97 = (void *)sub_1002534A4(v104 > 1, v105 + 1, 1, (unint64_t)v97, &qword_10096B358, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
        }
        v97[2] = v105 + 1;
        unint64_t v106 = (unint64_t)v97
             + ((LOBYTE(v199[10].isa) + 32) & ~(unint64_t)LOBYTE(v199[10].isa))
             + (unint64_t)v199[9].isa * v105;
        unint64_t v98 = v200;
        v101(v106, v103, v200);
        Class v49 = v204;
        uint64_t v99 = (uint64_t)v196;
      }
      v96 += 16;
      --v95;
    }
    while (v95);
    swift_bridgeObjectRelease();
  }
  else
  {
    v97 = &_swiftEmptyArrayStorage;
    Class v49 = v204;
  }
  swift_bridgeObjectRelease();
  unint64_t v57 = sub_100258F84((uint64_t)v97);

  swift_bridgeObjectRelease();
  uint64_t v51 = v202;
  uint64_t v48 = v203;
  uint64_t v50 = v166;
  unint64_t v46 = v168;
LABEL_60:
  unint64_t v58 = (unint64_t)v206;
LABEL_61:
  if (!kSFOperationFilesKey)
  {
    __break(1u);
    goto LABEL_146;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  if (v46)
  {
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v52 + 8))(v49, v51);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v174, v50);
  }
  v107 = v209;
  if (v209)
  {
    sub_10000B740(0, (unint64_t *)&unk_10096B270);
    unint64_t v108 = NSArray.tryCastElements<A>(as:)();
    v199 = v107;
    unint64_t v200 = v108;
    if (!(v108 >> 62))
    {
      uint64_t v110 = *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_69;
    }
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v110 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_69:
      v111 = v191;
      if (!v110) {
        break;
      }
      v198 = v57;
      v209 = &_swiftEmptyArrayStorage;
      sub_1002553D8(0, v110 & ~(v110 >> 63), 0);
      if (v110 < 0)
      {
        __break(1u);
        goto LABEL_122;
      }
      uint64_t v112 = 0;
      v113 = v209;
      unint64_t v114 = v200;
      unint64_t v115 = v200 & 0xC000000000000001;
      unint64_t v52 = (unint64_t)&v111[4];
      uint64_t v116 = (uint64_t)v190;
      while (v110 != v112)
      {
        if (v115) {
          id v117 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v117 = *(id *)(v114 + 8 * v112 + 32);
        }
        id v118 = v117;
        sub_10025106C(v118, v116);

        v209 = v113;
        unint64_t v120 = (unint64_t)v113[2].isa;
        unint64_t v119 = (unint64_t)v113[3].isa;
        if (v120 >= v119 >> 1)
        {
          sub_1002553D8(v119 > 1, v120 + 1, 1);
          v113 = v209;
        }
        ++v112;
        v113[2].CFDictionaryRef isa = (Class)(v120 + 1);
        unint64_t v121 = (unint64_t)v113
             + ((LOBYTE(v191[10].isa) + 32) & ~(unint64_t)LOBYTE(v191[10].isa))
             + (unint64_t)v191[9].isa * v120;
        uint64_t v116 = (uint64_t)v190;
        ((void (*)(unint64_t, NSObject *, uint64_t))v191[4].isa)(v121, v190, v189);
        unint64_t v114 = v200;
        if (v110 == v112)
        {
          swift_bridgeObjectRelease();
          unint64_t v52 = v201;
          unint64_t v57 = v198;
          goto LABEL_88;
        }
      }
      __break(1u);
      swift_once();
      uint64_t v60 = type metadata accessor for Logger();
      sub_10000B47C(v60, (uint64_t)qword_10096B240);
      Swift::String v61 = v170;
      swift_errorRetain();
      Swift::String v62 = v61;
      swift_errorRetain();
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.fault.getter();
      BOOL v65 = os_log_type_enabled(v63, v64);
      v196 = (char *)v116;
      if (v65)
      {
        uint64_t v66 = swift_slowAlloc();
        v67 = (void *)swift_slowAlloc();
        v195 = swift_slowAlloc();
        v209 = v195;
        *(_DWORD *)uint64_t v66 = 136315394;
        swift_getErrorValue();
        os_log_t v194 = v63;
        uint64_t v68 = Error.localizedDescription.getter();
        uint64_t v207 = sub_100254634(v68, v69, (uint64_t *)&v209);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v66 + 12) = 2112;
        uint64_t v207 = (uint64_t)v62;
        Class v70 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v67 = v170;

        unint64_t v57 = v174;
        os_log_t v71 = v194;
        _os_log_impl((void *)&_mh_execute_header, v194, v64, "Failed to get items as strings, trying again as URLs {error: %s, rawURLItems: %@}", (uint8_t *)v66, 0x16u);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        unint64_t v52 = v201;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        unint64_t v57 = v174;
      }
      Swift::String v59 = v62;
      sub_10000B740(0, (unint64_t *)&unk_10096B280);
      unint64_t v79 = NSArray.tryCastElements<A>(as:)();
      unint64_t v46 = 0;
      unint64_t v58 = v79;
      if (!(v79 >> 62))
      {
        v165 = v59;
        uint64_t v80 = *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }
LABEL_112:
      v165 = v59;
      swift_bridgeObjectRetain();
      uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
LABEL_30:
      v81 = v198;
      v195 = v58;
      if (!v80)
      {
        v84 = &_swiftEmptyArrayStorage;
LABEL_59:
        swift_bridgeObjectRelease_n();
        unint64_t v57 = sub_100258F84((uint64_t)v84);

        swift_bridgeObjectRelease();
        swift_errorRelease();
        uint64_t v51 = v202;
        uint64_t v48 = v203;
        uint64_t v50 = v166;
        unint64_t v52 = v201;
        Class v49 = v204;
        goto LABEL_60;
      }
      if (v80 >= 1)
      {
        uint64_t v82 = 0;
        os_log_t v194 = (os_log_t)(v58 & 0xC000000000000001);
        v83 = v199 + 4;
        unint64_t v173 = (unint64_t)&v199[7];
        v170 = v199 + 6;
        v84 = &_swiftEmptyArrayStorage;
        unint64_t v168 = 0;
        do
        {
          if (v194) {
            v85 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            v85 = v195[v82 + 4].isa;
          }
          v86 = v85;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();
          v87 = (void (*)(NSObject *, uint64_t, unint64_t))v83->isa;
          uint64_t v88 = (uint64_t)v197;
          v89 = (char *)v81;
          unint64_t v90 = v200;
          ((void (*)(char *, char *, unint64_t))v83->isa)(v197, v89, v200);
          (*(void (**)(uint64_t, void, uint64_t, unint64_t))v173)(v88, 0, 1, v90);

          if (((unint64_t (*)(uint64_t, uint64_t, unint64_t))v170->isa)(v88, 1, v90) == 1)
          {
            sub_10000A7E8(v88, (uint64_t *)&unk_10096AC10);
          }
          else
          {
            v91 = v192;
            v87(v192, v88, v90);
            v92 = v193;
            v87(v193, (uint64_t)v91, v90);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v84 = (void *)sub_1002534A4(0, v84[2] + 1, 1, (unint64_t)v84, &qword_10096B358, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
            }
            unint64_t v94 = v84[2];
            unint64_t v93 = v84[3];
            if (v94 >= v93 >> 1) {
              v84 = (void *)sub_1002534A4(v93 > 1, v94 + 1, 1, (unint64_t)v84, &qword_10096B358, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
            }
            v84[2] = v94 + 1;
            v87(((char *)v84+ ((LOBYTE(v199[10].isa) + 32) & ~(unint64_t)LOBYTE(v199[10].isa))+ (unint64_t)v199[9].isa * v94), (uint64_t)v92, v200);
            unint64_t v46 = v168;
          }
          ++v82;
          v81 = v198;
        }
        while (v80 != v82);
        goto LABEL_59;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease();
    v113 = &_swiftEmptyArrayStorage;
LABEL_88:
    v109 = (void *)sub_10025922C((uint64_t)v113);

    swift_bridgeObjectRelease();
  }
  else
  {
    v109 = &_swiftEmptySetSingleton;
  }
  uint64_t v126 = v109[2];
  unint64_t v200 = (unint64_t)v109;
  if (v126 || !v57[2].isa) {
    v127 = (unsigned int *)&enum case for SFAirDrop.TransferType.files(_:);
  }
  else {
    v127 = (unsigned int *)&enum case for SFAirDrop.TransferType.links(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v186 + 104))(v187, *v127, v188);
  if (!kSFOperationItemsDescriptionKey)
  {
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_151;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  if (!kSFOperationBundleIDKey)
  {
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_162:
    if (v209)
    {
      CGImageRef v205 = sub_1000D8C44(v209);
      swift_unknownObjectRelease();
LABEL_166:
      LODWORD(v179) = v171 & 1;
      LODWORD(v178) = v172 & 1;
      unint64_t v157 = v201;
      (*(void (**)(char *, char *, uint64_t))(v201 + 16))(v175, v204, v202);
      uint64_t v158 = v186;
      (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v183, v187, v188);
      sub_10024A330(v185, v182, &qword_10096B258);
      SFAirDropReceive.AskRequest.init(id:type:transferTypes:canAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundleID:senderComputerName:senderModelName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderID:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:urlItems:items:customPayload:)();

      sub_10000A7E8(v185, &qword_10096B258);
      (*(void (**)(char *, uint64_t))(v158 + 8))(v187, v188);
      (*(void (**)(char *, uint64_t))(v157 + 8))(v204, v202);
      return (*(uint64_t (**)(char *, uint64_t))(v203 + 8))(v174, v166);
    }
LABEL_165:
    CGImageRef v205 = 0;
    goto LABEL_166;
  }
  NSDictionary.sf_value<A>(_:as:file:line:)();
  if (!kSFOperationSenderComputerNameKey)
  {
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_165;
  }
  v199 = v209;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  uint64_t v128 = (uint64_t)v209;
  if (!v210) {
    uint64_t v128 = 63;
  }
  v198 = v128;
  if (!kSFOperationSenderModelNameKey)
  {
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_168:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_169;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  uint64_t v130 = (uint64_t)v209;
  unint64_t v129 = (unint64_t)v210;
  if (!v210) {
    uint64_t v130 = 63;
  }
  v196 = (char *)v130;
  if (!v210) {
    unint64_t v129 = 0xE100000000000000;
  }
  v197 = (char *)v129;
  if (!kSFOperationSenderEmailKey) {
    goto LABEL_168;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  if (!kSFOperationSenderEmailHashKey)
  {
LABEL_169:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_170;
  }
  os_log_t v194 = v209;
  v195 = v210;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  if (!kSFOperationSenderCompositeNameKey)
  {
LABEL_170:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_171:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_172;
  }
  v192 = v209;
  v193 = (char *)v210;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  unint64_t v168 = 0;
  if (!kSFOperationSenderFirstNameKey) {
    goto LABEL_171;
  }
  v190 = v209;
  v191 = v210;
  unint64_t v131 = v168;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  unint64_t v168 = v131;
  if (!kSFOperationSenderLastNameKey)
  {
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_174;
  }
  unint64_t v173 = (unint64_t)v209;
  uint64_t v189 = (uint64_t)v210;
  unint64_t v132 = v168;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  unint64_t v168 = v132;
LABEL_118:
  if (!kSFOperationSenderIDKey)
  {
LABEL_174:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_175:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_176;
  }
  v167 = v209;
  v170 = v210;
  unint64_t v133 = v168;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  unint64_t v168 = v133;
  if (v133)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_130:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_131:
    swift_bridgeObjectRelease();
LABEL_132:
    (*(void (**)(char *, uint64_t))(v186 + 8))(v187, v188);
    (*(void (**)(char *, uint64_t))(v201 + 8))(v204, v202);
    return (*(uint64_t (**)(char *, uint64_t))(v203 + 8))(v174, v166);
  }
LABEL_123:
  uint64_t v135 = (uint64_t)v209;
  v134 = v210;
  if (!v210) {
    uint64_t v135 = 63;
  }
  uint64_t v164 = v135;
  if (!v210) {
    v134 = 0xE100000000000000;
  }
  v165 = v134;
  if (!kSFOperationSenderNodeKey) {
    goto LABEL_175;
  }
  SFNodeGetTypeID();
  unint64_t v136 = v168;
  NSDictionary.sf_optionalValue<A>(_:as:cfTypeID:file:line:)();
  unint64_t v168 = v136;
  if (v136)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_130;
  }
  if (v209)
  {
    uint64_t v137 = SFNodeCopyContactIdentifier();
    if (v137)
    {
      v138 = (void *)v137;
      uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v163 = v139;

      goto LABEL_139;
    }
  }
LABEL_138:
  uint64_t v162 = 0;
  uint64_t v163 = 0;
LABEL_139:
  unint64_t v140 = v168;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  unint64_t v168 = v140;
  if (v140)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_131;
  }
LABEL_142:
  unint64_t v52 = (unint64_t)v210;
  if (v210)
  {
    v141 = v209;
    v142 = v176;
    static String.Encoding.utf8.getter();
    v161 = v141;
    uint64_t v50 = String.data(using:allowLossyConversion:)();
    unint64_t v46 = v143;
    ((void (*)(char *, unint64_t))v177[1].isa)(v142, v178);
    uint64_t v207 = v50;
    unint64_t v208 = v46;
    sub_10000A844(&qword_10096B260);
    unint64_t v144 = v168;
    Optional.tryUnwrap(_:file:line:)();
    unint64_t v168 = v144;
    if (v144)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100250CB0(v50, v46);
      goto LABEL_132;
    }
LABEL_146:
    sub_100250CB0(v50, v46);
    v146 = v209;
    unint64_t v145 = (unint64_t)v210;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_10025AA24(&qword_10096B268, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
    v177 = v146;
    unint64_t v178 = v145;
    unint64_t v147 = v168;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    unint64_t v168 = v147;
    if (v147)
    {
      swift_release();
      if (qword_100969AE0 == -1)
      {
LABEL_148:
        uint64_t v148 = type metadata accessor for Logger();
        sub_10000B47C(v148, (uint64_t)qword_10096B240);
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        v149 = Logger.logObject.getter();
        os_log_type_t v150 = static os_log_type_t.fault.getter();
        v179 = v149;
        LODWORD(v176) = v150;
        if (os_log_type_enabled(v149, v150))
        {
          uint64_t v151 = swift_slowAlloc();
          v160 = swift_slowAlloc();
          v209 = v160;
          *(_DWORD *)uint64_t v151 = 136315394;
          v159[1] = v151 + 4;
          swift_getErrorValue();
          uint64_t v152 = Error.localizedDescription.getter();
          uint64_t v207 = sub_100254634(v152, v153, (uint64_t *)&v209);
          v159[0] = &v208;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          *(_WORD *)(v151 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v207 = sub_100254634((uint64_t)v161, v52, (uint64_t *)&v209);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          v154 = v179;
          _os_log_impl((void *)&_mh_execute_header, v179, (os_log_type_t)v176, "Failed to decode advanced items description {error: %s, itemsDescription: %s}", (uint8_t *)v151, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100250CC4((uint64_t)v177, v178);

          swift_errorRelease();
        }
        else
        {
          sub_100250CC4((uint64_t)v177, v178);
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          swift_bridgeObjectRelease_n();
        }
        unint64_t v168 = 0;
        goto LABEL_154;
      }
LABEL_172:
      swift_once();
      goto LABEL_148;
    }
LABEL_151:
    sub_100250CC4((uint64_t)v177, v178);
    swift_release();
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, NSObject *, NSObject *))isa[4].isa)(v185, v179, v181);
    uint64_t v155 = 0;
    goto LABEL_155;
  }
LABEL_154:
  uint64_t v155 = 1;
LABEL_155:
  ((void (*)(uint64_t, uint64_t, uint64_t, NSObject *))isa[7].isa)(v185, v155, 1, v181);
  if (!kSFOperationSmallFileIconKey)
  {
LABEL_176:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_177:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_178;
  }
  type metadata accessor for CGImage(0);
  unint64_t v156 = v168;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  unint64_t v168 = v156;
  if (v156)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000A7E8(v185, &qword_10096B258);
    goto LABEL_132;
  }
  if (!kSFOperationFileIconKey) {
    goto LABEL_177;
  }
  v181 = v209;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  if (kSFOperationSenderIconKey)
  {
    CFDictionaryRef isa = v209;
    NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
    unint64_t v168 = 0;
    goto LABEL_162;
  }
LABEL_178:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_100250CB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100250CC4(a1, a2);
  }
  return a1;
}

uint64_t sub_100250CC4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void sub_100250D1C(uint64_t a1)
{
  sub_10000B740(0, &qword_10096B290);
  sub_10025A578(&qword_10096B298, &qword_10096B290);
  int64_t v2 = 0;
  v13[1] = (id)Set.init(minimumCapacity:)();
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_100595D88(v13, *(id *)(*(void *)(a1 + 56) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100250ED4(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    unint64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    Swift::Int v12 = *v11;
    Swift::Int v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_100596448(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_10025106C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v95 = a2;
  uint64_t v105 = type metadata accessor for URL.DirectoryHint();
  uint64_t v103 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  unint64_t v104 = (char *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v5 - 8);
  uint64_t v100 = (char *)v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v101 = *(void *)(v7 - 8);
  uint64_t v102 = v7;
  __chkstk_darwin(v7);
  uint64_t v99 = (char *)v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000A844(&qword_10096B5B0);
  uint64_t v9 = __chkstk_darwin(v111);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v108 = (char *)v83 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  int64_t v14 = (char *)v83 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  v96 = (char *)v83 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v97 = (uint64_t)v83 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v106 = (char *)v83 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v83 - v21;
  uint64_t v110 = type metadata accessor for UTType();
  uint64_t v112 = *(void *)(v110 - 8);
  uint64_t v23 = __chkstk_darwin(v110);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)v83 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  unint64_t v98 = (char *)v83 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v107 = (char *)v83 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  os_log_type_t v33 = (char *)v83 - v32;
  __chkstk_darwin(v31);
  v109 = (char *)v83 - v34;
  if (!kSFOperationFileNameKey)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  NSDictionary.sf_value<A>(_:as:file:line:)();
  if (v2)
  {

    return;
  }
  unint64_t v94 = "UUID from recordID ";
  unint64_t v93 = v26;
  v92 = v14;
  if (!kSFOperationFileTypeKey) {
    goto LABEL_29;
  }
  uint64_t v36 = v113[0];
  uint64_t v35 = v113[1];
  NSDictionary.sf_value<A>(_:as:file:line:)();
  uint64_t v90 = v36;
  uint64_t v91 = v35;
  if (!kSFOperationFileBomPathKey)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v37 = v113[0];
  uint64_t v38 = (void *)v113[1];
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  id v89 = a1;
  uint64_t v87 = v37;
  uint64_t v88 = v38;
  if (v113[1]) {
    uint64_t v39 = v113[0];
  }
  else {
    uint64_t v39 = 4271950;
  }
  if (v113[1]) {
    unint64_t v40 = v113[1];
  }
  else {
    unint64_t v40 = 0xE300000000000000;
  }
  if (!kSFOperationFileIsDirectoryKey) {
    goto LABEL_31;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  uint64_t v86 = v39;
  if (!kSFOperationConvertMediaFormatsKey)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return;
  }
  int v41 = LOBYTE(v113[0]);
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  unint64_t v84 = v40;
  v83[3] = v41;
  v83[2] = LOBYTE(v113[0]);
  uint64_t v42 = v88;
  swift_bridgeObjectRetain();
  uint64_t v43 = v87;
  UTType.init(_:)();
  v113[0] = 0;
  v113[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  HIWORD(v113[1]) = -4864;
  v44._countAndFlagsBits = v43;
  v44._object = v42;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 96;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  Optional.tryUnwrap(_:file:line:)();
  uint64_t v85 = 0;
  sub_10000A7E8((uint64_t)v22, &qword_10096B5B0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = v112;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
  Class v49 = v109;
  uint64_t v48 = v110;
  v47(v109, v33, v110);
  if (UTType.isDynamic.getter())
  {
    uint64_t v50 = v101;
    uint64_t v51 = v102;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v100, 1, 1, v102);
    (*(void (**)(char *, void, uint64_t))(v103 + 104))(v104, enum case for URL.DirectoryHint.inferFromPath(_:), v105);
    swift_bridgeObjectRetain();
    unint64_t v52 = v99;
    URL.init(filePath:directoryHint:relativeTo:)();
    uint64_t v53 = URL.pathExtension.getter();
    char v55 = v54;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v51);
    swift_bridgeObjectRetain();
    static UTType.data.getter();
    uint64_t v56 = (uint64_t)v106;
    UTType.init(filenameExtension:conformingTo:)();
    v113[0] = 0;
    v113[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v113[0] = 0xD00000000000001BLL;
    v113[1] = 0x80000001007B67E0;
    v57._countAndFlagsBits = v53;
    v57._object = v55;
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    unint64_t v58 = v98;
    uint64_t v59 = v85;
    Optional.tryUnwrap(_:file:line:)();
    uint64_t v60 = v59;
    if (v59)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_10000A7E8(v56, &qword_10096B5B0);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v49, v110);
      return;
    }
    sub_10000A7E8(v56, &qword_10096B5B0);
    swift_bridgeObjectRelease();
    Swift::String v61 = v107;
    v47(v107, v58, v110);
  }
  else
  {
    Swift::String v61 = v107;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v107, v49, v48);
    uint64_t v60 = v85;
  }
  if (!kSFOperationtFileSubTypeKey) {
    goto LABEL_33;
  }
  id v62 = v89;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)();
  if (v60)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v63 = *(void (**)(char *, uint64_t))(v112 + 8);
    uint64_t v64 = v110;
    v63(v61, v110);
    v63(v109, v64);
  }
  else
  {
    BOOL v65 = (void *)v113[1];
    uint64_t v66 = v112;
    if (v113[1])
    {
      uint64_t v67 = v113[0];
      swift_bridgeObjectRetain();
      uint64_t v68 = (uint64_t)v92;
      UTType.init(_:)();
      v113[0] = 0;
      v113[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      HIWORD(v113[1]) = -4864;
      v69._countAndFlagsBits = v67;
      v69._object = v65;
      String.append(_:)(v69);
      swift_bridgeObjectRelease();
      v70._countAndFlagsBits = 96;
      v70._object = (void *)0xE100000000000000;
      String.append(_:)(v70);
      os_log_t v71 = v96;
      Optional.tryUnwrap(_:file:line:)();
      sub_10000A7E8(v68, &qword_10096B5B0);
      swift_bridgeObjectRelease();
      uint64_t v72 = v110;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v71, 0, 1, v110);
      uint64_t v73 = (uint64_t)v71;
      uint64_t v74 = v97;
      sub_10024D388(v73, v97, &qword_10096B5B0);
    }
    else
    {
      uint64_t v74 = v97;
      uint64_t v72 = v110;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v97, 1, 1, v110);
    }
    int v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v74, 1, v72);
    Swift::String v76 = v93;
    if (!v75)
    {
      uint64_t v77 = v112;
      uint64_t v78 = v110;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v93, v74, v110);
      UTType.identifier.getter();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
    }
    unint64_t v79 = v107;
    UTType.identifier.getter();
    SFAirDropReceive.AskRequest.ItemInfo.init(convertMediaFormats:fileBomPath:fileIsDirectory:fileName:fileSubType:fileType:)();

    uint64_t v80 = *(void (**)(char *, uint64_t))(v112 + 8);
    v81 = v79;
    uint64_t v82 = v110;
    v80(v81, v110);
    v80(v109, v82);
    sub_10000A7E8(v97, &qword_10096B5B0);
  }
}

unint64_t sub_1002521C4()
{
  unint64_t v0 = sub_10024592C((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&long long v26 = kSFOperationConvertMediaFormatsKey;
  id v1 = kSFOperationConvertMediaFormatsKey;
  sub_10000A844(&qword_10096B578);
  sub_10025B004();
  AnyHashable.init<A>(_:)();
  uint64_t v27 = &type metadata for Bool;
  LOBYTE(v26) = SFAirDropReceive.AskRequest.ItemInfo.convertMediaFormats.getter() & 1;
  sub_100249444(&v26, v25);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1005911E0(v25, (uint64_t)v28, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_10025B0A8((uint64_t)v28);
  *(void *)&long long v26 = kSFOperationFileNameKey;
  id v3 = kSFOperationFileNameKey;
  AnyHashable.init<A>(_:)();
  uint64_t v4 = SFAirDropReceive.AskRequest.ItemInfo.fileName.getter();
  uint64_t v27 = &type metadata for String;
  *(void *)&long long v26 = v4;
  *((void *)&v26 + 1) = v5;
  sub_100249444(&v26, v25);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1005911E0(v25, (uint64_t)v28, v6);
  swift_bridgeObjectRelease();
  sub_10025B0A8((uint64_t)v28);
  *(void *)&long long v26 = kSFOperationFileTypeKey;
  id v7 = kSFOperationFileTypeKey;
  AnyHashable.init<A>(_:)();
  uint64_t v8 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
  uint64_t v27 = &type metadata for String;
  *(void *)&long long v26 = v8;
  *((void *)&v26 + 1) = v9;
  sub_100249444(&v26, v25);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  sub_1005911E0(v25, (uint64_t)v28, v10);
  swift_bridgeObjectRelease();
  sub_10025B0A8((uint64_t)v28);
  uint64_t v11 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter();
  if (v12)
  {
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    *(void *)&long long v26 = kSFOperationtFileSubTypeKey;
    id v15 = kSFOperationtFileSubTypeKey;
    AnyHashable.init<A>(_:)();
    uint64_t v27 = &type metadata for String;
    *(void *)&long long v26 = v13;
    *((void *)&v26 + 1) = v14;
    sub_100249444(&v26, v25);
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    sub_1005911E0(v25, (uint64_t)v28, v16);
    swift_bridgeObjectRelease();
    sub_10025B0A8((uint64_t)v28);
  }
  *(void *)&long long v26 = kSFOperationFileBomPathKey;
  id v17 = kSFOperationFileBomPathKey;
  AnyHashable.init<A>(_:)();
  uint64_t v18 = SFAirDropReceive.AskRequest.ItemInfo.fileBomPath.getter();
  uint64_t v27 = &type metadata for String;
  *(void *)&long long v26 = v18;
  *((void *)&v26 + 1) = v19;
  sub_100249444(&v26, v25);
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  sub_1005911E0(v25, (uint64_t)v28, v20);
  swift_bridgeObjectRelease();
  sub_10025B0A8((uint64_t)v28);
  *(void *)&long long v26 = kSFOperationFileIsDirectoryKey;
  id v21 = kSFOperationFileIsDirectoryKey;
  AnyHashable.init<A>(_:)();
  char v22 = SFAirDropReceive.AskRequest.ItemInfo.fileIsDirectory.getter();
  uint64_t v27 = &type metadata for Bool;
  LOBYTE(v26) = v22 & 1;
  sub_100249444(&v26, v25);
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_1005911E0(v25, (uint64_t)v28, v23);
  swift_bridgeObjectRelease();
  sub_10025B0A8((uint64_t)v28);
  return v0;
}

uint64_t SFAirDropTransferMetaData.init(transfer:)(uint64_t a1)
{
  uint64_t v100 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  uint64_t v2 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v99 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v97 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v77 - v8;
  uint64_t v10 = type metadata accessor for SFAirDropReceive.Transfer.State();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SFAirDropReceive.Transfer.state.getter();
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    uint64_t v15 = sub_10000A844(&qword_10096B2C0);
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
LABEL_3:
    SFAirDropReceive.Transfer.askRequest.getter();
    uint64_t v16 = SFAirDropReceive.AskRequest.urlItems.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    id v17 = sub_100254AAC(v16);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (v14 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    uint64_t v18 = sub_10000A844(&qword_10096B2D8);
    id v17 = *(void **)&v13[*(int *)(v18 + 48)];
    uint64_t v19 = &v13[*(int *)(v18 + 80)];
    uint64_t v20 = type metadata accessor for SFAirDrop.DeclineAction();
LABEL_10:
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
LABEL_11:
    uint64_t v23 = type metadata accessor for SFAirDropReceive.ItemDestination();
LABEL_12:
    (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v13, v23);
    goto LABEL_13;
  }
  if (v14 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:)
    || v14 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    uint64_t v21 = sub_10000A844(&qword_10096B2D0);
    id v17 = *(void **)&v13[*(int *)(v21 + 48)];
    uint64_t v22 = *(int *)(v21 + 64);
LABEL_9:
    uint64_t v19 = &v13[v22];
    uint64_t v20 = sub_10000A844(&qword_10096B2C0);
    goto LABEL_10;
  }
  if (v14 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    id v17 = *(void **)&v13[*(int *)(sub_10000A844(&qword_10096B2C8) + 48)];
    goto LABEL_11;
  }
  if (v14 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    uint64_t v66 = sub_10000A844((uint64_t *)&unk_100972400);
    id v17 = *(void **)&v13[*(int *)(v66 + 48)];
    swift_bridgeObjectRelease();
    uint64_t v22 = *(int *)(v66 + 80);
    goto LABEL_9;
  }
  if (v14 == enum case for SFAirDropReceive.Transfer.State.opening(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    id v17 = *(void **)&v13[*(int *)(sub_10000A844((uint64_t *)&unk_10096B2B0) + 48)];
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (v14 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    uint64_t v67 = sub_10000A844((uint64_t *)&unk_100974550);
    uint64_t v68 = &v13[*(int *)(v67 + 48)];
    swift_bridgeObjectRelease();
    id v17 = *(void **)&v13[*(int *)(v67 + 80)];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v69 = type metadata accessor for SFAirDropReceive.ItemDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v69 - 8) + 8))(v68, v69);
    uint64_t v23 = type metadata accessor for SFAirDropReceive.Transfer.Metrics();
    goto LABEL_12;
  }
  if (v14 == enum case for SFAirDropReceive.Transfer.State.created(_:)) {
    goto LABEL_3;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  id v17 = _swiftEmptyArrayStorage;
LABEL_13:
  uint64_t v94 = v5;
  uint64_t v95 = v4;
  SFAirDropReceive.Transfer.askRequest.getter();
  uint64_t v24 = SFAirDropReceive.AskRequest.files.getter();
  sub_100259BE0(v24, (uint64_t)v17);
  uint64_t v92 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = SFAirDropReceive.AskRequest.files.getter();
  int64_t v27 = *(void *)(v26 + 16);
  uint64_t v96 = a1;
  if (v27)
  {
    uint64_t v101 = _swiftEmptyArrayStorage;
    sub_100255414(0, v27, 0);
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v28 = v2 + 16;
    unint64_t v98 = v29;
    uint64_t v30 = *(unsigned __int8 *)(v28 + 64);
    uint64_t v91 = v26;
    uint64_t v31 = v26 + ((v30 + 32) & ~v30);
    uint64_t v32 = *(void *)(v28 + 56);
    os_log_type_t v33 = (void (**)(char *, uint64_t))(v28 - 8);
    do
    {
      uint64_t v34 = v99;
      uint64_t v35 = v100;
      v98(v99, v31, v100);
      unint64_t v36 = sub_1002521C4();
      (*v33)(v34, v35);
      uint64_t v37 = v101;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100255414(0, v37[2] + 1, 1);
        uint64_t v37 = v101;
      }
      unint64_t v39 = v37[2];
      unint64_t v38 = v37[3];
      if (v39 >= v38 >> 1)
      {
        sub_100255414(v38 > 1, v39 + 1, 1);
        uint64_t v37 = v101;
      }
      v37[2] = v39 + 1;
      v37[v39 + 4] = v36;
      v31 += v32;
      --v27;
    }
    while (v27);
  }
  swift_bridgeObjectRelease();
  LODWORD(v100) = SFAirDropReceive.AskRequest.canAutoAccept.getter();
  LODWORD(v99) = SFAirDropReceive.Transfer.didAutoAccept.getter();
  LODWORD(v98) = SFAirDropReceive.AskRequest.verifiableIdentity.getter();
  LODWORD(v91) = SFAirDropReceive.AskRequest.senderIsMe.getter();
  SFAirDropReceive.AskRequest.contactIdentifier.getter();
  if (v40)
  {
    NSString v90 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v90 = 0;
  }
  SFAirDropReceive.AskRequest.senderBundleID.getter();
  NSString v89 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  SFAirDropReceive.AskRequest.senderComputerName.getter();
  NSString v88 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  SFAirDropReceive.AskRequest.senderEmail.getter();
  if (v41)
  {
    NSString v86 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v86 = 0;
  }
  SFAirDropReceive.AskRequest.senderEmailHash.getter();
  if (v42)
  {
    NSString v85 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v85 = 0;
  }
  SFAirDropReceive.AskRequest.senderCompositeName.getter();
  if (v43)
  {
    NSString v83 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v83 = 0;
  }
  SFAirDropReceive.AskRequest.senderFirstName.getter();
  if (v44)
  {
    NSString v87 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v87 = 0;
  }
  SFAirDropReceive.AskRequest.senderLastName.getter();
  if (v45)
  {
    NSString v84 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v84 = 0;
  }
  SFAirDropReceive.AskRequest.senderID.getter();
  NSString v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v47 = SFAirDropReceive.AskRequest.senderIcon.getter();
  uint64_t v48 = (void *)SFAirDropReceive.AskRequest.smallPreviewImage.getter();
  Class v49 = (void *)SFAirDropReceive.AskRequest.previewImage.getter();
  SFAirDropReceive.AskRequest.itemsDescription.getter();
  if (v50)
  {
    NSString v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v51 = 0;
  }
  id v78 = v51;
  id v81 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_10000B740(0, &qword_10096B290);
  sub_10025A578(&qword_10096B298, &qword_10096B290);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  Class v82 = isa;
  swift_bridgeObjectRelease();
  sub_10000A844((uint64_t *)&unk_10096B2A0);
  Class v53 = Array._bridgeToObjectiveC()().super.isa;
  Class v93 = v53;
  swift_bridgeObjectRelease();
  Class v75 = isa;
  Class v76 = v53;
  NSString v74 = v51;
  id v80 = v49;
  uint64_t v73 = v49;
  id v79 = v48;
  uint64_t v71 = v47;
  uint64_t v72 = v48;
  uint64_t v54 = (void *)v47;
  char v55 = v46;
  NSString v70 = v46;
  uint64_t v56 = v84;
  Swift::String v57 = v87;
  unint64_t v58 = v83;
  uint64_t v59 = v85;
  uint64_t v60 = v86;
  Swift::String v61 = v88;
  id v62 = v89;
  uint64_t v63 = v90;
  uint64_t v100 = (uint64_t)objc_msgSend(v81, "initWithTransferTypes:canAutoAccept:didAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundleID:senderComputerName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderID:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:items:rawFiles:", 2, v100 & 1, v99 & 1, v98 & 1, v91 & 1, v90, v89, v88, v86, v85, v83, v87, v84, v70,
                    v71,
                    v72,
                    v73,
                    v74,
                    0,
                    v75,
                    v76);

  uint64_t v64 = type metadata accessor for SFAirDropReceive.Transfer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(v96, v64);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v97, v95);
  return v100;
}

void sub_100252FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v9 = (uint64_t *)(a6 + 16);
  String.append(_:)(*(Swift::String *)&a1);
  v10._countAndFlagsBits = 47;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  swift_beginAccess();
  uint64_t v11 = *(void *)(a6 + 16);
  if (*(void *)(v11 + 16) && (uint64_t v12 = sub_1005838BC(0, 0xE000000000000000), (v13 & 1) != 0))
  {
    int v14 = *(void **)(*(void *)(v11 + 56) + 8 * v12);
    swift_endAccess();
    id v15 = v14;
    swift_bridgeObjectRelease();
    [v15 incrementCount];
  }
  else
  {
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a4)
    {
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v17 = 0;
    }
    id v18 = [objc_allocWithZone((Class)SFAirDropTransferItem) initWithType:v16 subtype:v17 isFile:a5 & 1];

    swift_beginAccess();
    if (v18)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v21 = *v9;
      *uint64_t v9 = 0x8000000000000000;
      sub_10059132C((uint64_t)v18, 0, 0xE000000000000000, isUniquelyReferenced_nonNull_native);
      *uint64_t v9 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = (void *)sub_1002A82B0(0, 0xE000000000000000);
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
  }
}

char *sub_100253208(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A844(&qword_10096B500);
      Swift::String v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      char v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (char *)&_swiftEmptyArrayStorage;
      char v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100258E90(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100253318(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B358, (uint64_t (*)(void))&type metadata accessor for URL, (uint64_t (*)(void))&type metadata accessor for URL);
}

void *sub_10025334C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100254270(a1, a2, a3, a4, &qword_10096B340, (uint64_t *)&unk_10096B2A0);
}

char *sub_100253360(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A844(&qword_10096B320);
      Swift::String v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      char v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (char *)&_swiftEmptyArrayStorage;
      char v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10025A5C8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100253470(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B2E0, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.NearbySharingAssertion, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.NearbySharingAssertion);
}

uint64_t sub_1002534A4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    id v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000A844(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  id v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10025AC70(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

char *sub_100253724(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100253730(a1, a2, a3, a4, &qword_10096B300);
}

char *sub_100253730(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      int64_t v10 = *((void *)a4 + 2);
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      sub_10000A844(a5);
      unint64_t v11 = (char *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * v12 - 64;
      uint64_t v13 = v11 + 32;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32]) {
          memmove(v13, a4 + 32, v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1002593C8(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100253828(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A844(&qword_10096B330);
      int64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10025A6D8(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100253938(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B420, (uint64_t (*)(void))&type metadata accessor for URLComponents, (uint64_t (*)(void))&type metadata accessor for URLComponents);
}

uint64_t sub_10025396C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B568, (uint64_t (*)(void))&type metadata accessor for SFSandboxTokenURLPair, (uint64_t (*)(void))&type metadata accessor for SFSandboxTokenURLPair);
}

uint64_t sub_1002539A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100253E44(a1, a2, a3, a4, &qword_10096B2F0, &qword_10096B2F8);
}

uint64_t sub_1002539B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B4F8, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint);
}

void *sub_1002539E8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A844(&qword_10096B318);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1002593C8(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100253AE4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100253B0C(a1, a2, a3, a4, (uint64_t *)&unk_10096B390, (uint64_t *)&unk_10097BB90);
}

void *sub_100253AF8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100253B0C(a1, a2, a3, a4, &qword_10096B3F8, &qword_10096B400);
}

void *sub_100253B0C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000A844(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      id v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025AB64(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_100253C3C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100253B0C(a1, a2, a3, a4, &qword_10096B408, (uint64_t *)&unk_10096B410);
}

uint64_t sub_100253C50(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B380, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(void))&type metadata accessor for Date);
}

void *sub_100253C84(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A844((uint64_t *)&unk_10096B370);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * v11 - 64;
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + v8 + 32)) {
          memmove(v12, a4 + 4, v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1002593C8(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100253D80(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B338, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
}

char *sub_100253DB4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100253730(a1, a2, a3, a4, &qword_10096B530);
}

void *sub_100253DC0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100253B0C(a1, a2, a3, a4, &qword_10096B438, (uint64_t *)&unk_10096B440);
}

void *sub_100253DD4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100253B0C(a1, a2, a3, a4, &qword_10096B3B0, &qword_10096B3B8);
}

void *sub_100253DE8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100253B0C(a1, a2, a3, a4, &qword_10096B3A0, &qword_10096B3A8);
}

uint64_t sub_100253DFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B4E8, (uint64_t (*)(void))_s14VolumeMetadataVMa, (uint64_t (*)(void))_s14VolumeMetadataVMa);
}

uint64_t sub_100253E30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100253E44(a1, a2, a3, a4, &qword_10096B360, &qword_10096B368);
}

uint64_t sub_100253E44(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000A844(a5);
  uint64_t v13 = *(void *)(sub_10000A844(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_10000A844(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10025A8CC(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_1002540B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B558, (uint64_t (*)(void))&type metadata accessor for SFSecurityScopedURL, (uint64_t (*)(void))&type metadata accessor for SFSecurityScopedURL);
}

uint64_t sub_1002540E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B520, type metadata accessor for SDTempPairingEndpoint, type metadata accessor for SDTempPairingEndpoint);
}

void *sub_100254118(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A844(&qword_10096EE80);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002594B0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100254228(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, &qword_10096B508, (uint64_t (*)(void))type metadata accessor for SDAirDropService.TransferPresenterClient, (uint64_t (*)(void))type metadata accessor for SDAirDropService.TransferPresenterClient);
}

void *sub_10025425C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100254270(a1, a2, a3, a4, &qword_10096B498, &qword_10096B4A0);
}

void *sub_100254270(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000A844(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      id v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10025A7C4(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_10025438C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A844(&qword_10096B470);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025AA6C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1002544B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000A844(&qword_10096B4B8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1002595A4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1002545C4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100254270(a1, a2, a3, a4, &qword_10096B4D8, &qword_10096B4E0);
}

void *sub_1002545D8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100253B0C(a1, a2, a3, a4, (uint64_t *)&unk_10096B3C0, (uint64_t *)&unk_100972440);
}

uint64_t sub_1002545EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1002534A4(a1, a2, a3, a4, (uint64_t *)&unk_10097D260, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_100254620(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100253B0C(a1, a2, a3, a4, &qword_10096B428, &qword_10096B430);
}

uint64_t sub_100254634(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100254708(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10024D2D4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10024D2D4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10024D338((uint64_t)v12);
  return v7;
}

uint64_t sub_100254708(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1002548C4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1002548C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10058354C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10025495C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10025495C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_10025495C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B300);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100254AAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000A844(&qword_10096B358);
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_100257B60(&v10, (char *)v6 + v5, v1, a1);
      sub_10024D330();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100254BE0(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = &_swiftEmptyArrayStorage;
    }
    else
    {
      sub_10000A844(&qword_10096B3E0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1003D7F28((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return &_swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_100254CD8(uint64_t a1)
{
  return sub_1002551D4(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100257F54);
}

void *sub_100254CF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000A844(&qword_10096B4F8);
  uint64_t v3 = *(void *)(type metadata accessor for SDAirDropDiscoveredEndpoint(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_100258150(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_10024D330();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100254E44(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10000A844(&qword_10096B3E0);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10025841C(&v8, v3 + 4, v2, a1);
  uint64_t result = (void *)sub_10024D330();
  if (v6 == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_100254F40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000A844(&qword_10096B518);
  uint64_t v3 = *(void *)(sub_10000A844(&qword_10096B510) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = *(void *)(sub_10000A844(&qword_10096B510) - 8);
      uint64_t v10 = sub_100258728(&v11, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      swift_bridgeObjectRetain();
      sub_10024D330();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1002550D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000A844(&qword_10096B500);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_100258A94((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10024D330();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1002551BC(uint64_t a1)
{
  return sub_1002551D4(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100258C94);
}

void *sub_1002551D4(uint64_t a1, uint64_t (*a2)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000A844(&qword_10096B3E0);
  uint64_t v5 = (void *)swift_allocObject();
  int64_t v6 = j__malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  v5[2] = v2;
  v5[3] = (2 * (v7 >> 3)) | 1;
  uint64_t v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  sub_10024D330();
  if (v8 != v2)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v5;
}

void *sub_1002552C8(void *result, uint64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 == -1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (uint64_t)result;
  if (v3 <= 0)
  {
    int64_t v6 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10000A844(&qword_10097D890);
    int64_t v6 = (void *)swift_allocObject();
    int64_t v7 = j__malloc_size(v6);
    uint64_t v8 = v7 - 32;
    if (v7 < 32) {
      uint64_t v8 = v7 - 25;
    }
    v6[2] = v3;
    v6[3] = 2 * (v8 >> 3);
  }
  uint64_t result = (void *)sub_100257AD4((uint64_t)&v9, (uint64_t)(v6 + 4), v3, v5, a2);
  if (result == (void *)v3) {
    return v6;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_10025539C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, &qword_10096B358, (uint64_t (*)(void))&type metadata accessor for URL);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002553D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, &qword_10096B338, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100255414(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100255A88(a1, a2, a3, (void *)*v3, &qword_10096B340, (uint64_t *)&unk_10096B2A0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100255444(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100255918(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100255464(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100255A88(a1, a2, a3, (void *)*v3, &qword_10096B348, &qword_10096B350);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100255494(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100255C18(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002554B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100255DC0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1002554D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, &qword_10096B568, (uint64_t (*)(void))&type metadata accessor for SFSandboxTokenURLPair);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100255510(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100255F20(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100255530(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10025608C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100255550(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002561F8(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100255570(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10025792C(a1, a2, a3, (void *)*v3, &qword_10096B438, (uint64_t *)&unk_10096B440);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002555A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100256384(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1002555C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10025792C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10096B390, (uint64_t *)&unk_10097BB90);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002555F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, &qword_10096B380, (uint64_t (*)(void))&type metadata accessor for Date);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10025562C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, &qword_10096B388, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100255668(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002564E4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100255688(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, &qword_10096B558, (uint64_t (*)(void))&type metadata accessor for SFSecurityScopedURL);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002556C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, &qword_10096B520, type metadata accessor for SDTempPairingEndpoint);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100255700(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100256664(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100255720(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100256A18(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100255740(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100256B78(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100255760(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, &qword_10096B4F8, type metadata accessor for SDAirDropDiscoveredEndpoint);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10025579C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100256CD4(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002557BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100256E74(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1002557DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100256FF4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1002557FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100257154(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10025581C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002572C0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10025583C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10025741C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10025585C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100257578(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10025587C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10025792C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10096B3C0, (uint64_t *)&unk_100972440);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002558AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002576E4(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10097D260, (uint64_t (*)(void))&type metadata accessor for UUID);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002558E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10025792C(a1, a2, a3, (void *)*v3, &qword_10096B428, &qword_10096B430);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100255918(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B2E8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100255A88(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10000A844(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    id v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_10000A844(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100255C18(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B308);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    sub_10000A844(&qword_10096B310);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100255DC0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B570);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100255F20(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B500);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025608C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B548);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002561F8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B538);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_10000A844(&qword_10096B540);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100256384(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B3D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002564E4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B560);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 88 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100256664(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B528);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002567D0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000A844(&qword_10096B518);
  uint64_t v10 = *(void *)(sub_10000A844(&qword_10096B510) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  id v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_10000A844(&qword_10096B510) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  BOOL v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  unint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100256A18(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B478);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100256B78(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B480);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100256CD4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B488);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  size_t v14 = 7 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    sub_10000A844(&qword_10096B490);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100256E74(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B470);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 72 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100256FF4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844((uint64_t *)&unk_10096B4C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100257154(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B4B8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002572C0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B4B0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  size_t v15 = 4 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025741C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096B4A8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100257578(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000A844(&qword_10096EE80);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002576E4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000A844(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v16 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025792C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10000A844(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    id v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_10000A844(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100257AD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    BOOL v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    BOOL v7 = 0;
LABEL_14:
    uint64_t v8 = a4;
LABEL_15:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = v8;
    *(unsigned char *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a4;
  while (1)
  {
    BOOL v7 = v6 == a5;
    if (v6 != a5) {
      break;
    }
    uint64_t v8 = 0;
LABEL_8:
    *(void *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5) {
      goto LABEL_15;
    }
    ++v5;
    BOOL v9 = v6 == a5;
    uint64_t v6 = v8;
    if (v9)
    {
      BOOL v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  uint64_t v8 = v6 + 1;
  if (!__OFADD__(v6, 1)) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_100257B60(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v8 - 8);
  int64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v16 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v28 = ~v32;
    *a1 = v42;
    a1[1] = v15;
    a1[2] = v28;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v36 = a3;
  int64_t v18 = 0;
  a3 = 0;
  uint64_t v19 = v40;
  uint64_t v38 = v41 + 16;
  unint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v37 = v41 + 48;
  uint64_t v35 = (uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v33 = v15;
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v34 - 1;
  uint64_t v31 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    uint64_t v25 = v41;
    uint64_t v26 = *(void *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v10, *(void *)(v42 + 48) + v26 * v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v33;
      goto LABEL_38;
    }
    ++a3;
    int64_t v27 = *v35;
    (*v35)(v19, v10, v11);
    uint64_t result = v27(a2, v19, v11);
    if (a3 == v36)
    {
      a3 = v36;
      a1 = v31;
      uint64_t v15 = v33;
      goto LABEL_39;
    }
    a2 += v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v33;
    if (v22 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (!v23)
    {
      int64_t v24 = v18 + 2;
      ++v18;
      if (v22 + 1 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (v23) {
        goto LABEL_14;
      }
      int64_t v18 = v22 + 1;
      if (v22 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * (v22 + 2));
      if (v23)
      {
        v22 += 2;
      }
      else
      {
        int64_t v18 = v22 + 2;
        if (v22 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v33 + 8 * (v22 + 3));
        if (!v23)
        {
          int64_t v24 = v22 + 4;
          int64_t v18 = v22 + 3;
          if (v22 + 4 < v34)
          {
            unint64_t v23 = *(void *)(v33 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                int64_t v22 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v34)
                {
                  int64_t v18 = v30;
                  goto LABEL_37;
                }
                unint64_t v23 = *(void *)(v33 + 8 * v22);
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v22 = v24;
            goto LABEL_21;
          }
LABEL_37:
          (*v39)(v10, 1, 1, v11);
          unint64_t v17 = 0;
LABEL_38:
          sub_10000A7E8((uint64_t)v10, (uint64_t *)&unk_10096AC10);
          a1 = v31;
          goto LABEL_39;
        }
        v22 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_100257F54(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    void *v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100258150(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  int64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v30 - v14;
  uint64_t v35 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1 << -(char)v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v32 = -1 << *(unsigned char *)(v17 - 32);
  uint64_t v33 = a1;
  int64_t v22 = 0;
  uint64_t v23 = 0;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    sub_10025AE8C(*(void *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_10025AF4C((uint64_t)v12, (uint64_t)v15);
    uint64_t result = sub_10025AF4C((uint64_t)v15, a2);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }
  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0;
      int64_t v22 = v31;
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_10025841C(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  unint64_t v24 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10000B740(0, &qword_10096B3E8);
    sub_10025A578((unint64_t *)&qword_10096B3F0, &qword_10096B3E8);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v7 = v28;
    uint64_t v8 = v29;
    int64_t v9 = v30;
    unint64_t v10 = v31;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  int64_t v9 = 0;
  uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = a4 + 56;
  uint64_t v8 = ~v19;
  uint64_t v20 = -v19;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v10 = v21 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v11 = 0;
LABEL_38:
    int64_t v22 = v24;
LABEL_41:
    *int64_t v22 = v4;
    v22[1] = v7;
    _OWORD v22[2] = v8;
    v22[3] = v9;
    v22[4] = v10;
    return (void *)v11;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v11 = 0;
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v23 = v8;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      sub_10000B740(0, &qword_10096B3E8);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v14 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_40;
      }
      goto LABEL_8;
    }
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_7;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v15 >= v25)
    {
      unint64_t v10 = 0;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    if (v16) {
      goto LABEL_23;
    }
    int64_t v17 = v9 + 2;
    if (v9 + 2 >= v25)
    {
      unint64_t v10 = 0;
      ++v9;
      goto LABEL_40;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v17);
    if (!v16)
    {
      if (v9 + 3 >= v25) {
        goto LABEL_44;
      }
      unint64_t v16 = *(void *)(v7 + 8 * (v9 + 3));
      if (v16)
      {
        int64_t v15 = v9 + 3;
        goto LABEL_23;
      }
      int64_t v17 = v9 + 4;
      if (v9 + 4 >= v25)
      {
        unint64_t v10 = 0;
        v9 += 3;
        goto LABEL_40;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (!v16)
      {
        int64_t v15 = v9 + 5;
        if (v9 + 5 >= v25)
        {
LABEL_44:
          unint64_t v10 = 0;
          int64_t v9 = v17;
          goto LABEL_40;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v15);
        if (!v16)
        {
          int64_t v18 = v9 + 6;
          while (v25 != v18)
          {
            unint64_t v16 = *(void *)(v7 + 8 * v18++);
            if (v16)
            {
              int64_t v15 = v18 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v10 = 0;
          int64_t v9 = v25 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    int64_t v15 = v17;
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v9 = v15;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v13);
    id v14 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_8:
    ++v11;
    *v6++ = v14;
    if (v11 == a3)
    {
      uint64_t v11 = a3;
LABEL_40:
      uint64_t v8 = v23;
      int64_t v22 = v24;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100258728(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000A844(&qword_10096B510);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  id v14 = (char *)&v32 - v13;
  uint64_t v41 = a4;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v37 = a4 + 64;
  uint64_t v16 = -1 << *(unsigned char *)(a4 + 32);
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v31 = v37;
    *a1 = v41;
    a1[1] = v31;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v34 = v16;
  uint64_t v35 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  int64_t v36 = (unint64_t)(63 - v16) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v38 = a3;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v22 = v21 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v26 = *(void *)(v41 + 56);
    uint64_t v27 = (uint64_t *)(*(void *)(v41 + 48) + 16 * v22);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = type metadata accessor for Date();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(&v11[*(int *)(v40 + 48)], v26 + *(void *)(*(void *)(v30 - 8) + 72) * v22, v30);
    *(void *)uint64_t v11 = v28;
    *((void *)v11 + 1) = v29;
    sub_10024D388((uint64_t)v11, (uint64_t)v14, &qword_10096B510);
    sub_10024D388((uint64_t)v14, a2, &qword_10096B510);
    a3 = v38;
    if (v20 == v38)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    a2 += *(void *)(v39 + 72);
    uint64_t result = swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v23 >= v36) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v37 + 8 * v23);
    if (!v24)
    {
      v19 += 2;
      if (v23 + 1 >= v36)
      {
        unint64_t v18 = 0;
        int64_t v19 = v23;
      }
      else
      {
        unint64_t v24 = *(void *)(v37 + 8 * v19);
        if (v24) {
          goto LABEL_14;
        }
        int64_t v25 = v23 + 2;
        if (v23 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (v24)
        {
LABEL_17:
          int64_t v23 = v25;
          goto LABEL_18;
        }
        int64_t v19 = v23 + 3;
        if (v23 + 3 < v36)
        {
          unint64_t v24 = *(void *)(v37 + 8 * v19);
          if (v24)
          {
LABEL_14:
            int64_t v23 = v19;
            goto LABEL_18;
          }
          int64_t v25 = v23 + 4;
          if (v23 + 4 >= v36)
          {
LABEL_33:
            unint64_t v18 = 0;
            goto LABEL_37;
          }
          unint64_t v24 = *(void *)(v37 + 8 * v25);
          if (!v24)
          {
            while (1)
            {
              int64_t v23 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                goto LABEL_42;
              }
              if (v23 >= v36)
              {
                unint64_t v18 = 0;
                int64_t v19 = v33;
                goto LABEL_37;
              }
              unint64_t v24 = *(void *)(v37 + 8 * v23);
              ++v25;
              if (v24) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v18 = 0;
        int64_t v19 = v23 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      uint64_t v16 = v34;
      a1 = v35;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v19 = v23;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100258A94(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100258C94(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    void *v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100258E90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100258F84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v27 = (char *)v21 - v6;
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_10025AA24(&qword_10096B5A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    int64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    unint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    int64_t v25 = v12;
    unint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    unint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    int64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      int64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_100595A64(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    int64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

uint64_t sub_10025922C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10025AA24(&qword_10096B5A8, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    int64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_100595740((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

char *sub_1002593C8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002594B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002595A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100259698(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10025AFB0();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 56);
    do
    {
      Swift::Int v5 = *(v4 - 3);
      Swift::Int v6 = *(v4 - 2);
      Swift::Int v7 = *(v4 - 1);
      Swift::Int v8 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100597E48(&v9, v5, v6, v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 4;
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_100259754(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for SFAutoUnlockDeviceType(0);
  sub_10025AA24(&qword_10096B3D0, type metadata accessor for SFAutoUnlockDeviceType);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v5 = *v4++;
      sub_100597384(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_100259800(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  Swift::UInt v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::Int v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10025AA24(&qword_10096B4F0, (void (*)(uint64_t))type metadata accessor for SDAirDropDiscoveredEndpoint);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_10025AE8C(v11, (uint64_t)v6);
      sub_100595DA4((uint64_t)v8, (uint64_t)v6);
      sub_10025AEF0((uint64_t)v8);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_100259968(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100596448(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100259A00(unint64_t a1)
{
  return sub_100259A60(a1, (unint64_t *)&qword_100977CD0, (uint64_t)CNContact_ptr, (unint64_t *)&qword_10096B4D0, (void (*)(id *, uint64_t))sub_100598070);
}

uint64_t sub_100259A30(unint64_t a1)
{
  return sub_100259A60(a1, &qword_10096B3E8, (uint64_t)SFAutoUnlockDevice_ptr, (unint64_t *)&qword_10096B3F0, (void (*)(id *, uint64_t))sub_1005965F8);
}

uint64_t sub_100259A60(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_10000B740(0, a2);
  sub_10025A578(a4, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v11) {
      return v17;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v11) {
      return v17;
    }
  }
  if (v11 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        a5(&v16, v13);
      }
    }
    else
    {
      uint64_t v14 = (void **)(a1 + 32);
      do
      {
        uint64_t v15 = *v14++;
        a5(&v16, (uint64_t)v15);

        --v11;
      }
      while (v11);
    }
    return v17;
  }
  __break(1u);
  return result;
}

void sub_100259BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  NSString v88 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  NSString v87 = (char *)&v81 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v81 - v10;
  uint64_t v12 = sub_10000A844((uint64_t *)&unk_10096AC10);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  NSString v90 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  NSString v89 = (char *)&v81 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v93 = (uint64_t)&v81 - v18;
  __chkstk_darwin(v17);
  uint64_t v92 = (char *)&v81 - v19;
  uint64_t v20 = swift_allocObject();
  uint64_t v101 = v20;
  *(void *)(v20 + 16) = sub_100245A70((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v84 = v20 + 16;
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v97 = v11;
  if (v21)
  {
    uint64_t v22 = *(void *)(type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo() - 8);
    uint64_t v23 = a1 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    uint64_t v24 = *(void *)(v22 + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v25 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
      uint64_t v27 = v26;
      uint64_t v28 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter();
      sub_100252FE8(v25, v27, v28, v29, 1, v101);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 += v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    uint64_t v11 = v97;
  }
  uint64_t v30 = *(void *)(a2 + 16);
  uint64_t v85 = a2;
  if (v30)
  {
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v31 = v5 + 16;
    uint64_t v33 = a2 + ((*(unsigned __int8 *)(v31 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 64));
    uint64_t v34 = *(void *)(v31 + 56);
    unint64_t v98 = v32;
    uint64_t v99 = (uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 32);
    uint64_t v96 = (void (**)(char *, char *, uint64_t))(v31 + 16);
    uint64_t v94 = v34;
    uint64_t v95 = (void (**)(char *, uint64_t))(v31 - 8);
    swift_bridgeObjectRetain();
    uint64_t v100 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 40);
    unint64_t v81 = (v31 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    *(void *)&long long v35 = 136315138;
    long long v83 = v35;
    Class v82 = (char *)&type metadata for Any + 8;
    int64_t v36 = v92;
    uint64_t v91 = v31;
    while (1)
    {
      v98(v36, v33, v4);
      uint64_t v37 = *v100;
      (*v100)(v36, 0, 1, v4);
      uint64_t v38 = *v99;
      if ((*v99)(v36, 1, v4) == 1) {
        goto LABEL_41;
      }
      uint64_t v39 = *v96;
      (*v96)(v11, v36, v4);
      if ((URL.isFileURL.getter() & 1) == 0) {
        break;
      }
      (*v95)(v11, v4);
LABEL_8:
      v33 += v94;
      if (!--v30)
      {
        v37(v36, 1, 1, v4);
        goto LABEL_41;
      }
    }
    uint64_t v40 = self;
    id v41 = [v40 defaultWorkspace:v81, v82];
    if (!v41) {
      goto LABEL_43;
    }
    uint64_t v43 = v41;
    URL._bridgeToObjectiveC()(v42);
    uint64_t v45 = v44;
    id v46 = [v43 applicationsAvailableForOpeningURL:v44];

    if (!v46) {
      goto LABEL_22;
    }
    sub_10000B740(0, (unint64_t *)&qword_10096B598);
    unint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v47 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v54)
      {
LABEL_15:
        if ((v47 & 0xC000000000000001) != 0)
        {
          id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            return;
          }
          id v48 = *(id *)(v47 + 32);
        }
        Class v49 = v48;
        swift_bridgeObjectRelease();
        id v50 = [v49 bundleIdentifier];

        if (v50)
        {
          uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v53 = v52;

          sub_100252FE8(v51, v53, 0, 0, 0, v101);
          swift_bridgeObjectRelease();
          uint64_t v11 = v97;
          (*v95)(v97, v4);
LABEL_37:
          int64_t v36 = v92;
          goto LABEL_8;
        }
LABEL_22:
        id v55 = [v40 defaultWorkspace];
        if (!v55) {
          goto LABEL_44;
        }
        Swift::String v57 = v55;
        URL._bridgeToObjectiveC()(v56);
        uint64_t v59 = v58;
        id v60 = [v57 URLOverrideForURL:v58];

        if (v60)
        {
          Swift::String v61 = v89;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v62 = 0;
        }
        else
        {
          uint64_t v62 = 1;
          Swift::String v61 = v89;
        }
        uint64_t v63 = (uint64_t)v90;
        v37(v61, v62, 1, v4);
        uint64_t v64 = (uint64_t)v61;
        uint64_t v65 = v93;
        sub_10024D388(v64, v93, (uint64_t *)&unk_10096AC10);
        sub_10024A330(v65, v63, (uint64_t *)&unk_10096AC10);
        int v66 = v38((char *)v63, 1, v4);
        uint64_t v11 = v97;
        if (v66 == 1)
        {
          sub_10000A7E8(v63, (uint64_t *)&unk_10096AC10);
        }
        else
        {
          uint64_t v67 = v87;
          v39(v87, (char *)v63, v4);
          uint64_t v68 = URL.scheme.getter();
          if (v69)
          {
            sub_100252FE8(v68, v69, 0, 0, 0, v101);
            swift_bridgeObjectRelease();
            NSString v70 = *v95;
            (*v95)(v67, v4);
            sub_10000A7E8(v93, (uint64_t *)&unk_10096AC10);
            v70(v11, v4);
            goto LABEL_37;
          }
          (*v95)(v67, v4);
        }
        uint64_t v71 = v88;
        if (qword_100969AE0 != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        sub_10000B47C(v72, (uint64_t)qword_10096B240);
        v98(v71, (uint64_t)v11, v4);
        uint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v73, v74))
        {
          uint64_t v75 = swift_slowAlloc();
          uint64_t v86 = swift_slowAlloc();
          v102[0] = v86;
          *(_DWORD *)uint64_t v75 = v83;
          sub_10025AA24((unint64_t *)&qword_10096B590, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v75 + 4) = sub_100254634(v76, v77, v102);
          swift_bridgeObjectRelease();
          id v78 = *v95;
          (*v95)(v71, v4);
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Failed to create item SFAirDropTransferItem from url. {url: %s}", (uint8_t *)v75, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          id v78 = *v95;
          (*v95)(v71, v4);
        }
        sub_10000A7E8(v93, (uint64_t *)&unk_10096AC10);
        uint64_t v11 = v97;
        v78(v97, v4);
        goto LABEL_37;
      }
    }
    else if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  id v79 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  swift_bridgeObjectRetain();
  v79(v92, 1, 1, v4);
LABEL_41:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v80 = swift_bridgeObjectRetain();
  sub_100250D1C(v80);
  swift_release();
}

uint64_t sub_10025A578(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000B740(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10025A5C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_10000A844(&qword_10096B328);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10025A6D8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025A7C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_10000A844(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025A8CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(sub_10000A844(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025AA24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10025AA6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025AB64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_10000A844(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025AC70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025ADCC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10025AE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_10096B450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10025AE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10025AEF0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10025AF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10025AFB0()
{
  unint64_t result = qword_10096B550;
  if (!qword_10096B550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096B550);
  }
  return result;
}

unint64_t sub_10025B004()
{
  unint64_t result = qword_10096B580;
  if (!qword_10096B580)
  {
    sub_100247840(&qword_10096B578);
    sub_10025AA24((unint64_t *)&qword_10096AE70, type metadata accessor for CFString);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096B580);
  }
  return result;
}

uint64_t sub_10025B0A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10025B0FC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t type metadata accessor for SDAirDropiOSItemDestinationAlert()
{
  return self;
}

uint64_t type metadata accessor for SDAirDropItemDestinationAlertFactory()
{
  return self;
}

uint64_t type metadata accessor for SDAirDropUnsupportedItemDestinationAlert()
{
  return self;
}

uint64_t sub_10025B1A0(uint64_t a1)
{
  v1[12] = a1;
  uint64_t v2 = sub_10000A844(&qword_10096B2C0);
  v1[13] = v2;
  v1[14] = *(void *)(v2 - 8);
  v1[15] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SFItemDestinationAlertViewModel();
  v1[16] = v3;
  v1[17] = *(void *)(v3 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFItemDestinationAlertSettings();
  v1[19] = v4;
  v1[20] = *(void *)(v4 - 8);
  v1[21] = swift_task_alloc();
  uint64_t v5 = sub_10000A844(&qword_10096B790);
  v1[22] = v5;
  v1[23] = *(void *)(v5 - 8);
  v1[24] = swift_task_alloc();
  return _swift_task_switch(sub_10025B37C, 0, 0);
}

uint64_t sub_10025B37C()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  SFAirDrop.PermissionRequest.style.getter();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 176);
  if (v4 == enum case for SFAirDrop.PermissionRequest.Style.alert<A>(_:))
  {
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 152);
    uint64_t v12 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v37 = *(void *)(v0 + 104);
    uint64_t v36 = *(void *)(v0 + 96);
    (*(void (**)(uint64_t, uint64_t))(v5 + 96))(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v6 + *(int *)(sub_10000A844(&qword_10096B798) + 80);
    uint64_t v14 = type metadata accessor for SFAirDrop.DeclineAction();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
    uint64_t v15 = *(void (**)(uint64_t, void, uint64_t))(v9 + 104);
    v15(v8, enum case for SFItemDestinationAlertSettings.reply(_:), v10);
    uint64_t v16 = SFItemDestinationAlertSettings.rawValue.getter();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v17(v8, v10);
    v15(v8, enum case for SFItemDestinationAlertSettings.chosenActionID(_:), v10);
    uint64_t v18 = SFItemDestinationAlertSettings.rawValue.getter();
    v17(v8, v10);
    unint64_t v19 = sub_100245A7C((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v36, v37);
    SFItemDestinationAlertViewModel.init(permissionRequest:)();
    uint64_t v38 = v16;
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_10025BBDC(&qword_10096B7A0, (void (*)(uint64_t))&type metadata accessor for SFItemDestinationAlertViewModel);
    uint64_t v20 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    *(void *)(v0 + 200) = v20;
    *(void *)(v0 + 208) = v21;
    uint64_t v26 = v20;
    unint64_t v27 = v21;
    swift_release();
    uint64_t v28 = static SFItemDestinationAlertSettings.viewModel.getter();
    uint64_t v30 = v29;
    *(void *)(v0 + 40) = &type metadata for Data;
    *(void *)(v0 + 16) = v26;
    *(void *)(v0 + 24) = v27;
    sub_100249444((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 48));
    sub_10025ADCC(v26, v27);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_100591338((_OWORD *)(v0 + 48), v28, v30, isUniquelyReferenced_nonNull_native);
    *(void *)(v0 + 216) = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v32 = [objc_allocWithZone((Class)sub_10000A844(&qword_10096B7A8)) init];
    *(void *)(v0 + 224) = v32;
    uint64_t v33 = swift_task_alloc();
    *(void *)(v0 + 232) = v33;
    *(void *)(v33 + 16) = v32;
    *(void *)(v33 + 24) = v18;
    *(_OWORD *)(v33 + 32) = xmmword_100770720;
    *(void *)(v33 + 48) = 0x80000001007B69C0;
    *(void *)(v33 + 56) = 0xD000000000000025;
    *(void *)(v33 + 64) = 0x80000001007B6990;
    *(void *)(v33 + 72) = v19;
    *(void *)(v33 + 80) = v38;
    *(void *)(v33 + 88) = 0;
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v34;
    uint64_t v35 = sub_10000A844(&qword_10096B540);
    void *v34 = v0;
    v34[1] = sub_10025B8F8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 80, 0, 0, 0xD00000000000006ALL, 0x80000001007B69E0, sub_10025BC24, v33, v35);
  }
  else
  {
    (*(void (**)(void, uint64_t))(v5 + 8))(*(void *)(v0 + 192), v7);
    uint64_t v22 = type metadata accessor for SFAirDropReceive.Failure();
    sub_10025BBDC(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v22 - 8) + 104))(v23, enum case for SFAirDropReceive.Failure.moveToAppFailed(_:), v22);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
}

uint64_t sub_10025B8F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10025BAF4;
  }
  else
  {
    int v4 = *(void **)(v2 + 224);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    *(_OWORD *)(v2 + 256) = *(_OWORD *)(v2 + 80);
    uint64_t v3 = sub_10025BA34;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025BA34()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  sub_100250CC4(v0[25], v0[26]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v4 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v5 = v0[32];
  uint64_t v6 = v0[33];
  return v4(v5, v6);
}

uint64_t sub_10025BAF4()
{
  uint64_t v1 = (void *)v0[28];
  unint64_t v2 = v0[26];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v6 = v0[16];
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  sub_100250CC4(v3, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10025BBDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_10025BC24(uint64_t a1)
{
  *(void *)&double result = sub_1006A16C0(a1, (void *)v1[2], (void *)v1[3], (void *)v1[4], (void *)v1[5], v1[6], (void *)v1[7], (void *)v1[8], v1[9], v1[10], v1[11]).n128_u64[0];
  return result;
}

uint64_t sub_10025BC64()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096B7B0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096B7B0);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Int sub_10025BD2C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10025BD74()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10025BDA0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10025BDE4@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100260084(*a1);
  *a2 = result;
  return result;
}

void sub_10025BE10(void *a1@<X8>)
{
  *a1 = *v1;
}

id sub_10025BE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a3;
  uint64_t v67 = a2;
  uint64_t v68 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v64 = sub_10000A844(&qword_10096B880);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v62 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v76 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v73 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  NSString v70 = (char *)&v58 - v9;
  __chkstk_darwin(v8);
  unint64_t v81 = (char *)&v58 - v10;
  uint64_t v11 = sub_10000A844((uint64_t *)&unk_10096AC10);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v74 = (uint64_t)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v75 = (char *)&v58 - v14;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin(v19);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v20 - 8);
  *(void *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 40) = 0;
  *(void *)(v3 + 64) = 0;
  uint64_t v60 = v3 + 56;
  swift_unknownObjectWeakInit();
  uint64_t v80 = (unsigned int (**)(char *, uint64_t, uint64_t))sub_10000B740(0, (unint64_t *)&unk_10096B8D0);
  swift_retain();
  static DispatchQoS.userInitiated.getter();
  uint64_t v84 = _swiftEmptyArrayStorage;
  sub_1002610A8((unint64_t *)&unk_10096BAB0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  sub_10000A844((uint64_t *)&unk_10096B8E0);
  sub_1002610F0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v15);
  uint64_t v21 = v68;
  uint64_t v22 = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v3 + 72) = v22;
  *(void *)(v3 + 16) = v21;
  int v66 = (void *)v3;
  *(void *)(v3 + 48) = 0x100000;
  id v23 = objc_allocWithZone((Class)SDAirDropFileZipper);
  swift_bridgeObjectRetain();
  id v59 = [v23 initWithQueue:v22 boundStreamSize:0x100000];
  uint64_t v24 = *(void *)(v21 + 16);
  if (v24)
  {
    uint64_t v26 = v76 + 16;
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
    unint64_t v69 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    uint64_t v27 = v21 + v69;
    uint64_t v28 = *(void *)(v76 + 72);
    uint64_t v80 = (unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
    id v78 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
    id v79 = (void (**)(char *, char *, uint64_t))(v76 + 32);
    uint64_t v71 = (void (**)(char *, uint64_t))(v76 + 8);
    uint64_t v72 = v25;
    swift_bridgeObjectRetain();
    uint64_t v76 = v26;
    unint64_t v77 = _swiftEmptyArrayStorage;
    uint64_t v29 = v75;
    while (1)
    {
      v72(v29, v27, v5);
      uint64_t v30 = *v78;
      (*v78)(v29, 0, 1, v5);
      uint64_t v31 = *v80;
      if ((*v80)(v29, 1, v5) == 1) {
        break;
      }
      id v32 = v29;
      uint64_t v33 = *v79;
      (*v79)(v81, v32, v5);
      uint64_t v34 = v5;
      uint64_t v35 = v74;
      URL.realPathURL()(v74);
      (*v71)(v81, v34);
      if (v31((char *)v35, 1, v34) == 1)
      {
        sub_10026114C(v35);
        uint64_t v5 = v34;
      }
      else
      {
        uint64_t v36 = v70;
        v33(v70, (char *)v35, v34);
        v33(v73, v36, v34);
        uint64_t v5 = v34;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v37 = (unint64_t)v77;
        }
        else {
          unint64_t v37 = sub_100253318(0, v77[2] + 1, 1, (unint64_t)v77);
        }
        unint64_t v39 = *(void *)(v37 + 16);
        unint64_t v38 = *(void *)(v37 + 24);
        if (v39 >= v38 >> 1) {
          unint64_t v37 = sub_100253318(v38 > 1, v39 + 1, 1, v37);
        }
        *(void *)(v37 + 16) = v39 + 1;
        unint64_t v77 = (void *)v37;
        v33((char *)(v37 + v69 + v39 * v28), v73, v34);
      }
      v27 += v28;
      --v24;
      uint64_t v29 = v75;
      if (!v24)
      {
        v30(v75, 1, 1, v5);
        break;
      }
    }
  }
  else
  {
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56);
    swift_bridgeObjectRetain();
    unint64_t v77 = _swiftEmptyArrayStorage;
    v40(v75, 1, 1, v5);
  }
  swift_bridgeObjectRelease_n();
  if (qword_100969AE8 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_10000B47C(v41, (uint64_t)qword_10096B7B0);
  uint64_t v42 = v77;
  swift_bridgeObjectRetain_n();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v84 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v46 = Array.description.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    uint64_t v82 = sub_100254634(v46, v48, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Passing real URLS to zipper %s", v45, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_10045E458((uint64_t)v42);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v50 = v59;
  [v59 setSourceFiles:isa];

  uint64_t v51 = sub_100258F84((uint64_t)v42);
  swift_bridgeObjectRelease();
  sub_10025C8D8(v51);
  swift_bridgeObjectRelease();
  Class v52 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v50 setSkipReadableCheckFiles:v52];

  [v50 setDisableAdaptiveCompressionForZipping:0];
  [v50 setShouldExtractMediaFromPhotosBundles:1];
  uint64_t v53 = v66;
  v66[3] = v50;
  v53[8] = v61;
  swift_unknownObjectWeakAssign();
  id v54 = v50;
  id v55 = v62;
  SFProgressContinuation.init(_:initialProgress:file:line:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))((uint64_t)v53 + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation, v55, v64);
  swift_release();
  v83.receiver = v53;
  v83.super_class = ObjectType;
  id v56 = [super init];
  [v54 setDelegate:v56];

  swift_unknownObjectRelease();
  return v56;
}

uint64_t sub_10025C8D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v33 - v7;
  uint64_t v37 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_10000A844((uint64_t *)&unk_10096B8F0);
    uint64_t v9 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
  }
  uint64_t v10 = *(void *)(v37 + 56);
  uint64_t v35 = v37 + 56;
  uint64_t v11 = -1 << *(unsigned char *)(v37 + 32);
  if (-v11 < 64) {
    uint64_t v12 = ~(-1 << -(char)v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v10;
  v33[1] = -1 << *(unsigned char *)(v37 + 32);
  int64_t v34 = (unint64_t)(63 - v11) >> 6;
  uint64_t v36 = v3 + 16;
  uint64_t v14 = (char *)(v9 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v16 << 6);
      goto LABEL_28;
    }
    int64_t v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v35 + 8 * v22);
    int64_t v24 = v16 + 1;
    if (!v23)
    {
      int64_t v24 = v16 + 2;
      if (v16 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v16 + 3;
        if (v16 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v16 + 4;
          if (v16 + 4 >= v34) {
            goto LABEL_37;
          }
          unint64_t v23 = *(void *)(v35 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    int64_t v16 = v24;
LABEL_28:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(void *)(v37 + 48) + *(void *)(v3 + 72) * v21, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    swift_dynamicCast();
    long long v38 = v41;
    long long v39 = v42;
    uint64_t v40 = v43;
    uint64_t result = AnyHashable._rawHashValue(seed:)(v9[5]);
    uint64_t v26 = -1 << *((unsigned char *)v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)&v14[8 * (v27 >> 6)]) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)&v14[8 * (v27 >> 6)])) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)&v14[8 * v28];
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)&v14[(v17 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v17;
    uint64_t v18 = v9[6] + 40 * v17;
    long long v19 = v39;
    *(_OWORD *)uint64_t v18 = v38;
    *(_OWORD *)(v18 + 16) = v19;
    *(void *)(v18 + 32) = v40;
    ++v9[2];
  }
  int64_t v25 = v16 + 5;
  if (v16 + 5 >= v34)
  {
LABEL_37:
    swift_release();
    sub_10024D330();
    return (uint64_t)v9;
  }
  unint64_t v23 = *(void *)(v35 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v16 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v35 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10025CCD4()
{
  *(void *)(v1 + 16) = v0;
  swift_getObjectType();
  sub_1002610A8(&qword_10096B888, (void (*)(uint64_t))type metadata accessor for SDAirDropSendCompressionAdapter);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10025CD8C, v3, v2);
}

uint64_t sub_10025CD8C()
{
  if (qword_100969AE8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096B7B0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Stopping Send Compression Adapter", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  [*(id *)(v5 + 24) stop];
  uint64_t v6 = *(void **)(v5 + 32);
  if (v6)
  {
    id v7 = v6;
    if ([v7 streamStatus] != (id)6)
    {
      [v7 close];

      id v7 = *(id *)(v5 + 32);
      *(void *)(v5 + 32) = 0;
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10025CEF8()
{
  v1[4] = v0;
  swift_getObjectType();
  sub_1002610A8(&qword_10096B888, (void (*)(uint64_t))type metadata accessor for SDAirDropSendCompressionAdapter);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[5] = v2;
  v1[6] = v3;
  return _swift_task_switch(sub_10025CFE4, v2, v3);
}

uint64_t sub_10025CFE4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (!*(unsigned char *)(v1 + 41))
  {
    if (qword_100969AE8 == -1)
    {
LABEL_8:
      uint64_t v7 = type metadata accessor for Logger();
      sub_10000B47C(v7, (uint64_t)qword_10096B7B0);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v3, v4))
      {
LABEL_12:

        uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_13:
        return v8();
      }
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      uint64_t v6 = "Zipper not ready to send compressed data";
      goto LABEL_10;
    }
LABEL_50:
    swift_once();
    goto LABEL_8;
  }
  if (*(unsigned char *)(v1 + 40))
  {
    if (qword_100969AE8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10000B47C(v2, (uint64_t)qword_10096B7B0);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_12;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    uint64_t v6 = "Adapter already sending compressed data";
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v3, v4, v6, v5, 2u);
LABEL_11:
    swift_slowDealloc();
    goto LABEL_12;
  }
  uint64_t v10 = *(void **)(v1 + 32);
  *(void *)(v0 + 56) = v10;
  if (!v10)
  {
    uint64_t v30 = type metadata accessor for SFAirDropSend.Failure();
    sub_1002610A8(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v30 - 8) + 104))(v31, enum case for SFAirDropSend.Failure.streamError(_:), v30);
    swift_willThrow();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_13;
  }
  *(unsigned char *)(v1 + 40) = 1;
  uint64_t v11 = qword_100969AE8;
  id v12 = v10;
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  *(void *)(v0 + 64) = sub_10000B47C(v13, (uint64_t)qword_10096B7B0);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    int64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Send compression adapter compressing data", v16, 2u);
    swift_slowDealloc();
  }

  *(void *)(v0 + 72) = swift_slowAlloc();
  [v12 open];
  uint64_t v17 = 0;
  *(void *)&long long v18 = 134217984;
  long long v50 = v18;
  while (1)
  {
    if ((objc_msgSend(*(id *)(v0 + 56), "hasBytesAvailable", v50) & 1) == 0
      && *(unsigned char *)(*(void *)(v0 + 32) + 41) == 3)
    {
      goto LABEL_36;
    }
    size_t v19 = (size_t)[*(id *)(v0 + 56) read:*(void *)(v0 + 72) maxLength:0x100000];
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = v50;
      *(void *)(v22 + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Reading compressed data %ld", (uint8_t *)v22, 0xCu);
      swift_slowDealloc();
    }

    if ((uint64_t)v19 <= 0)
    {
LABEL_36:
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      *(void *)(v0 + 128) = Strong;
      if (Strong)
      {
        uint64_t v33 = dword_10096DF80;
        int64_t v34 = (void *)swift_task_alloc();
        *(void *)(v0 + 136) = v34;
        void *v34 = v0;
        v34[1] = sub_10025DE04;
        uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096DF80 + v33);
        uint64_t v36 = 0;
        unint64_t v37 = 0xC000000000000000;
        uint64_t v38 = v17;
        char v39 = 1;
        goto LABEL_39;
      }
      long long v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Finished reading compressed data", v44, 2u);
        swift_slowDealloc();
      }
      uint64_t v45 = *(void *)(v0 + 32);

      uint64_t v46 = *(void **)(v45 + 32);
      if (v46)
      {
        id v47 = v46;
        if ([v47 streamStatus] != (id)6)
        {
          uint64_t v3 = *(NSObject **)(v0 + 56);
          uint64_t v48 = *(void *)(v0 + 32);
          [v47 close];

          Class v49 = *(void **)(v48 + 32);
          *(void *)(v48 + 32) = 0;

          goto LABEL_11;
        }
      }
      uint64_t v3 = *(NSObject **)(v0 + 56);
      goto LABEL_11;
    }
    BOOL v23 = __OFADD__(v17, v19);
    v17 += v19;
    *(void *)(v0 + 80) = v17;
    if (v23)
    {
      __break(1u);
      goto LABEL_50;
    }
    int64_t v24 = *(const void **)(v0 + 72);
    if (v19 <= 0xE)
    {
      *(void *)(v0 + 22) = 0;
      *(void *)(v0 + 16) = 0;
      *(unsigned char *)(v0 + 30) = v19;
      memcpy((void *)(v0 + 16), v24, v19);
      uint64_t v27 = *(void *)(v0 + 16);
      unint64_t v28 = *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 48);
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v25 = __DataStorage.init(bytes:length:)();
      uint64_t v26 = v25;
      if (v19 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = 0;
        *(void *)(v27 + 24) = v19;
        unint64_t v28 = v26 | 0x8000000000000000;
      }
      else
      {
        uint64_t v27 = v19 << 32;
        unint64_t v28 = v25 | 0x4000000000000000;
      }
    }
    *(void *)(v0 + 88) = v27;
    *(void *)(v0 + 96) = v28;
    uint64_t v29 = swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 104) = v29;
    if (v29) {
      break;
    }
    sub_100250CC4(v27, v28);
  }
  uint64_t v40 = dword_10096DF80;
  long long v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v41;
  *long long v41 = v0;
  v41[1] = sub_10025D770;
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096DF80 + v40);
  uint64_t v36 = v27;
  unint64_t v37 = v28;
  uint64_t v38 = v17;
  char v39 = 0;
LABEL_39:
  return v35(v36, v37, v38, v39);
}

uint64_t sub_10025D770()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = sub_10025DD58;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = sub_10025D8C0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10025D8C0()
{
  sub_100250CC4(*(void *)(v0 + 88), *(void *)(v0 + 96));
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)&long long v2 = 134217984;
  long long v35 = v2;
  while ((objc_msgSend(*(id *)(v0 + 56), "hasBytesAvailable", v35) & 1) != 0
       || *(unsigned char *)(*(void *)(v0 + 32) + 41) != 3)
  {
    size_t v3 = (size_t)[*(id *)(v0 + 56) read:*(void *)(v0 + 72) maxLength:0x100000];
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = v35;
      *(void *)(v6 + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reading compressed data %ld", (uint8_t *)v6, 0xCu);
      swift_slowDealloc();
    }

    if ((uint64_t)v3 <= 0) {
      break;
    }
    BOOL v7 = __OFADD__(v1, v3);
    v1 += v3;
    *(void *)(v0 + 80) = v1;
    if (v7) {
      __break(1u);
    }
    uint64_t v8 = *(const void **)(v0 + 72);
    if (v3 <= 0xE)
    {
      *(void *)(v0 + 22) = 0;
      *(void *)(v0 + 16) = 0;
      *(unsigned char *)(v0 + 30) = v3;
      memcpy((void *)(v0 + 16), v8, v3);
      uint64_t v11 = *(void *)(v0 + 16);
      unint64_t v12 = *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 48);
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v9 = __DataStorage.init(bytes:length:)();
      uint64_t v10 = v9;
      if (v3 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = v3;
        unint64_t v12 = v10 | 0x8000000000000000;
      }
      else
      {
        uint64_t v11 = v3 << 32;
        unint64_t v12 = v9 | 0x4000000000000000;
      }
    }
    *(void *)(v0 + 88) = v11;
    *(void *)(v0 + 96) = v12;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 104) = Strong;
    if (Strong)
    {
      uint64_t v22 = dword_10096DF80;
      BOOL v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v23;
      *BOOL v23 = v0;
      v23[1] = sub_10025D770;
      uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096DF80 + v22);
      uint64_t v18 = v11;
      unint64_t v19 = v12;
      uint64_t v20 = v1;
      char v21 = 0;
      goto LABEL_18;
    }
    sub_100250CC4(v11, v12);
  }
  uint64_t v14 = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 128) = v14;
  if (v14)
  {
    uint64_t v15 = dword_10096DF80;
    int64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v16;
    *int64_t v16 = v0;
    v16[1] = sub_10025DE04;
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096DF80 + v15);
    uint64_t v18 = 0;
    unint64_t v19 = 0xC000000000000000;
    uint64_t v20 = v1;
    char v21 = 1;
LABEL_18:
    return v17(v18, v19, v20, v21);
  }
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Finished reading compressed data", v27, 2u);
    swift_slowDealloc();
  }
  uint64_t v28 = *(void *)(v0 + 32);

  uint64_t v29 = *(void **)(v28 + 32);
  if (v29)
  {
    id v30 = v29;
    if ([v30 streamStatus] != (id)6)
    {
      uint64_t v31 = *(void **)(v0 + 56);
      uint64_t v32 = *(void *)(v0 + 32);
      [v30 close];

      uint64_t v33 = *(void **)(v32 + 32);
      *(void *)(v32 + 32) = 0;

      goto LABEL_28;
    }
  }
  uint64_t v31 = *(void **)(v0 + 56);
LABEL_28:
  swift_slowDealloc();

  int64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_10025DD58()
{
  uint64_t v1 = (void *)v0[7];
  sub_100250CC4(v0[11], v0[12]);

  swift_unknownObjectRelease();
  long long v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10025DE04()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    os_log_type_t v5 = sub_10025E0D4;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    os_log_type_t v5 = sub_10025DF54;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10025DF54()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Finished reading compressed data", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[4];

  os_log_type_t v5 = *(void **)(v4 + 32);
  if (!v5) {
    goto LABEL_6;
  }
  id v6 = v5;
  if ([v6 streamStatus] == (id)6)
  {

LABEL_6:
    uint64_t v7 = (void *)v0[7];
    goto LABEL_8;
  }
  uint64_t v7 = (void *)v0[7];
  uint64_t v8 = v0[4];
  [v6 close];

  uint64_t v9 = *(void **)(v8 + 32);
  *(void *)(v8 + 32) = 0;

LABEL_8:
  swift_slowDealloc();

  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10025E0D4()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_unknownObjectRelease();

  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10025E16C(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  swift_getObjectType();
  uint64_t v3 = sub_10000A844(&qword_10096B880);
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  sub_1002610A8(&qword_10096B888, (void (*)(uint64_t))type metadata accessor for SDAirDropSendCompressionAdapter);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[9] = v5;
  v2[10] = v4;
  return _swift_task_switch(sub_10025E284, v5, v4);
}

uint64_t sub_10025E284()
{
  uint64_t v1 = v0[5];
  *(unsigned char *)(v1 + 41) = 1;
  if (qword_100969AE8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B47C(v2, (uint64_t)qword_10096B7B0);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    v0[3] = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Zipper State Update: %ld", v5, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[11] = Strong;
  if (Strong)
  {
    id v7 = [*(id *)(v0[5] + 24) zipCompressionType];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    CFStringRef v8 = sub_100260094();
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v0[12] = v10;
    unint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10096DFA0 + dword_10096DFA0);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[13] = v11;
    void *v11 = v0;
    v11[1] = sub_10025E598;
    uint64_t v12 = v0[4];
    return v19(v12, (uint64_t)v8, v10);
  }
  else
  {
    uint64_t v15 = v0[7];
    uint64_t v14 = v0[8];
    uint64_t v16 = v0[6];
    uint64_t v17 = v0[4];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation, v16);
    v0[2] = v17;
    SFProgressContinuation.finish(with:)();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    uint64_t v18 = (void *)swift_task_alloc();
    v0[15] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10025E824;
    return sub_10025CEF8();
  }
}

uint64_t sub_10025E598()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v5 = sub_10025E7B0;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = *(void *)(v2 + 80);
    uint64_t v5 = sub_10025E6BC;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10025E6BC()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation, v3);
  v0[2] = v4;
  SFProgressContinuation.finish(with:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[15] = v5;
  void *v5 = v0;
  v5[1] = sub_10025E824;
  return sub_10025CEF8();
}

uint64_t sub_10025E7B0()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10025E824()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10025E93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  swift_getObjectType();
  uint64_t v5 = type metadata accessor for SFAirDrop.Progress();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = sub_10000A844(&qword_10096B8B0);
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v7 = sub_10000A844(&qword_10096B880);
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  sub_1002610A8(&qword_10096B888, (void (*)(uint64_t))type metadata accessor for SDAirDropSendCompressionAdapter);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[17] = v9;
  v4[18] = v8;
  return _swift_task_switch(sub_10025EB14, v9, v8);
}

uint64_t sub_10025EB14()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[7] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation, v3);
  SFProgressContinuation.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10025EC20;
  uint64_t v5 = v0[11];
  return SFProgressTask.finalValue.getter(v0 + 2, v5);
}

uint64_t sub_10025EC20()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 144);
  uint64_t v7 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v8 = sub_10025F1AC;
  }
  else {
    uint64_t v8 = sub_10025EDB8;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_10025EDB8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  *(unsigned char *)(v1 + 41) = 2;
  if (qword_100969AE8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10000B47C(v3, (uint64_t)qword_10096B7B0);
  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 24) = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Zipper State Update: %ld", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 40);
  *(void *)uint64_t v7 = *(void *)(v0 + 32);
  *(void *)(v7 + 8) = v2;
  *(unsigned char *)(v7 + 16) = 0;
  *(_OWORD *)(v7 + 24) = v9;
  (*(void (**)(void))(v8 + 104))();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_1002F3500(*(void *)(v0 + 80));
    swift_unknownObjectRelease();
  }
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10025EFD0;
  return sub_10025CEF8();
}

uint64_t sub_10025EFD0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  uint64_t v4 = *(void *)(v2 + 136);
  if (v0) {
    os_log_type_t v5 = sub_10025F230;
  }
  else {
    os_log_type_t v5 = sub_10025F10C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10025F10C()
{
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10025F1AC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10025F230()
{
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10025F2CC(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  swift_getObjectType();
  sub_1002610A8(&qword_10096B888, (void (*)(uint64_t))type metadata accessor for SDAirDropSendCompressionAdapter);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10025F384, v4, v3);
}

uint64_t sub_10025F384()
{
  uint64_t v1 = v0[5];
  *(unsigned char *)(v1 + 41) = 3;
  if (qword_100969AE8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B47C(v2, (uint64_t)qword_10096B7B0);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 134217984;
    v0[3] = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Zipper State Update: %ld", v5, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  if (v0[4])
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      unint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      v0[2] = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v19 = v9;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Compression failed with error: %@", v8, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v15 = v0[5];

    uint64_t v16 = *(void **)(v15 + 32);
    if (v16)
    {
      id v17 = v16;
      if ([v17 streamStatus] != (id)6)
      {
        [v17 close];

        id v17 = *(id *)(v15 + 32);
        *(void *)(v15 + 32) = 0;
      }
    }
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_1002F3898();
      swift_errorRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_errorRelease();
    }
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  else
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Compression finished", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = (void *)swift_task_alloc();
    v0[6] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10025F7B4;
    return sub_10025CEF8();
  }
}

uint64_t sub_10025F7B4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10025F8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *os_log_type_t v7 = v5;
  v7[1] = sub_10000A6F0;
  return sub_10025E16C(a5);
}

uint64_t sub_10025F944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  os_log_type_t v11 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v11;
  void *v11 = v7;
  v11[1] = sub_10000A6F4;
  return sub_10025E93C(a5, a6, a7);
}

uint64_t sub_10025F9F8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000A6F0;
  return sub_10025F2CC(0);
}

uint64_t sub_10025FA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000A6F0;
  return sub_10025F2CC(a5);
}

uint64_t sub_10025FBDC()
{
  swift_bridgeObjectRelease();

  sub_100261080((uint64_t)(v0 + 7));
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation;
  uint64_t v2 = sub_10000A844(&qword_10096B880);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10025FCB8()
{
  return type metadata accessor for SDAirDropSendCompressionAdapter();
}

uint64_t type metadata accessor for SDAirDropSendCompressionAdapter()
{
  uint64_t result = qword_10096B7F8;
  if (!qword_10096B7F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10025FD0C()
{
  sub_10025FDF0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10025FDF0()
{
  if (!qword_10096B808)
  {
    unint64_t v0 = type metadata accessor for SFProgressContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10096B808);
    }
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for SDAirDropSendCompressionAdapter.State(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SDAirDropSendCompressionAdapter.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SDAirDropSendCompressionAdapter.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025FFBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_10025FFE4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10025FFF0(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropSendCompressionAdapter.State()
{
  return &type metadata for SDAirDropSendCompressionAdapter.State;
}

unint64_t sub_10026000C()
{
  unint64_t result = qword_10096B810;
  if (!qword_10096B810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096B810);
  }
  return result;
}

uint64_t sub_100260060()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

unint64_t sub_100260084(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

CFStringRef sub_100260094()
{
  NSString v0 = String._bridgeToObjectiveC()();
  if (@"pkzip")
  {
    type metadata accessor for CFString(0);
    sub_1002610A8(&qword_10096B8A0, type metadata accessor for CFString);
    uint64_t v1 = @"pkzip";
    char v2 = static _CFObject.== infix(_:_:)();

    if (v2)
    {
      if (@"application/zip") {
        goto LABEL_14;
      }
      __break(1u);
    }
  }
  if (@"gzip")
  {
    type metadata accessor for CFString(0);
    sub_1002610A8(&qword_10096B8A0, type metadata accessor for CFString);
    id v3 = v0;
    unsigned int v4 = @"gzip";
    char v5 = static _CFObject.== infix(_:_:)();

    if (v5)
    {
      if (@"application/x-cpio") {
        goto LABEL_14;
      }
      __break(1u);
    }
  }
  if (@"dvzip")
  {
    type metadata accessor for CFString(0);
    sub_1002610A8(&qword_10096B8A0, type metadata accessor for CFString);
    id v6 = v0;
    BOOL v7 = @"dvzip";
    char v8 = static _CFObject.== infix(_:_:)();

    if (v8)
    {
      if (!@"application/x-dvzip")
      {
        __break(1u);
        goto LABEL_13;
      }
LABEL_14:
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return (const __CFString *)v10;
    }
  }
LABEL_13:
  CFStringRef result = @"application/x-cpio";
  if (@"application/x-cpio") {
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void sub_1002602B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969AE8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10000B47C(v9, (uint64_t)qword_10096B7B0);
  swift_unknownObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v30 = a1;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v31 = v3;
    v32[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v34 = a2;
    swift_unknownObjectRetain();
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v34 = sub_100254634(v14, v15, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v30;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Zipper Update: %s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v31;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  switch(a1)
  {
    case 5:
      uint64_t ObjectType = swift_getObjectType();
      v32[0] = a2;
      sub_10000B740(0, (unint64_t *)&unk_10096B270);
      swift_unknownObjectRetain();
      tryCast<A>(_:as:description:file:line:)();
      sub_10024D338((uint64_t)v32);
      if (!kSFOperationTotalBytesKey)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x100260C24);
      }
      uint64_t v16 = (void *)v34;
      NSDictionary.sf_value<A>(_:as:file:line:)();
      uint64_t v24 = v32[0];
      uint64_t v25 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v8, 1, 1, v25);
      os_log_type_t v26 = (void *)swift_allocObject();
      void v26[2] = 0;
      v26[3] = 0;
      v26[4] = v3;
      v26[5] = v24;
      swift_retain();
      uint64_t v27 = &unk_10096B870;
      break;
    case 7:
      uint64_t ObjectType = swift_getObjectType();
      v32[0] = a2;
      sub_10000B740(0, (unint64_t *)&unk_10096B270);
      swift_unknownObjectRetain();
      tryCast<A>(_:as:description:file:line:)();
      sub_10024D338((uint64_t)v32);
      if (!kSFOperationBytesCopiedKey) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)v34;
      NSDictionary.sf_value<A>(_:as:file:line:)();
      if (!kSFOperationFilesCopiedKey) {
        goto LABEL_19;
      }
      uint64_t v17 = v32[0];
      NSDictionary.sf_value<A>(_:as:file:line:)();
      if (!kSFOperationTimeRemainingKey) {
        goto LABEL_20;
      }
      uint64_t v18 = v32[0];
      NSDictionary.sf_value<A>(_:as:file:line:)();
      uint64_t v28 = v32[0];
      uint64_t v29 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v8, 1, 1, v29);
      os_log_type_t v26 = (void *)swift_allocObject();
      void v26[2] = 0;
      v26[3] = 0;
      v26[4] = v3;
      v26[5] = v18;
      v26[6] = v17;
      v26[7] = v28;
      swift_retain();
      uint64_t v27 = &unk_10096B860;
      break;
    case 9:
      uint64_t v19 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
      uint64_t v20 = (void *)swift_allocObject();
      _OWORD v20[2] = 0;
      v20[3] = 0;
      v20[4] = v3;
      swift_retain();
      char v21 = &unk_10096B840;
      goto LABEL_15;
    case 10:
      uint64_t ObjectType = swift_getObjectType();
      v32[0] = a2;
      sub_10000B740(0, &qword_10096B820);
      swift_unknownObjectRetain();
      tryCast<A>(_:as:description:file:line:)();
      sub_10024D338((uint64_t)v32);
      uint64_t v22 = v34;
      uint64_t v23 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v8, 1, 1, v23);
      uint64_t v20 = (void *)swift_allocObject();
      _OWORD v20[2] = 0;
      v20[3] = 0;
      v20[4] = v3;
      v20[5] = v22;
      swift_retain();
      char v21 = &unk_10096B830;
LABEL_15:
      sub_10028CAC4((uint64_t)v8, (uint64_t)v21, (uint64_t)v20);
      swift_release();
      return;
    default:
      return;
  }
  sub_10028CAC4((uint64_t)v8, (uint64_t)v27, (uint64_t)v26);
  swift_release();
}

uint64_t sub_100260C3C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100260C84()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000A6F0;
  unsigned int v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *unsigned int v4 = v3;
  v4[1] = sub_10000A6F0;
  return sub_10025F2CC(v2);
}

uint64_t sub_100260D68()
{
  return sub_100260F50(40);
}

uint64_t sub_100260D70()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000A6F0;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  void *v2 = v1;
  v2[1] = sub_10000A6F0;
  return sub_10025F2CC(0);
}

uint64_t sub_100260E48()
{
  return sub_100260F50(64);
}

uint64_t sub_100260E50()
{
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  char v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10000A6F4;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_10000A6F4;
  return sub_10025E93C(v2, v4, v3);
}

uint64_t sub_100260F48()
{
  return sub_100260F50(48);
}

uint64_t sub_100260F50(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100260F9C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000A6F0;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10000A6F0;
  return sub_10025E16C(v2);
}

uint64_t sub_100261080(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002610A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002610F0()
{
  unint64_t result = qword_10096BAC0;
  if (!qword_10096BAC0)
  {
    sub_100247840((uint64_t *)&unk_10096B8E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096BAC0);
  }
  return result;
}

uint64_t sub_10026114C(uint64_t a1)
{
  uint64_t v2 = sub_10000A844((uint64_t *)&unk_10096AC10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002611AC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096B900);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096B900);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

char *sub_100261274(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  uint64_t v65 = a7;
  uint64_t v76 = a6;
  uint64_t v64 = a5;
  uint64_t v70 = a3;
  id v71 = a4;
  uint64_t v62 = a2;
  uint64_t v69 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v67 = sub_10000A844((uint64_t *)&unk_10096BAA0);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v63 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  id v59 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin(v12);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8);
  v57[0] = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider];
  *(_OWORD *)unint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((void *)v15 + 4) = 0;
  uint64_t v16 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination];
  uint64_t v17 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes] = 0;
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream] = 0;
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream] = 0;
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_adapterBufferSize] = 3145728;
  uint64_t v19 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate];
  *((void *)v19 + 1) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v20 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveServiceDelegate];
  *((void *)v20 + 1) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v58 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_queue;
  v57[1] = sub_10000B740(0, (unint64_t *)&unk_10096B8D0);
  swift_retain();
  static DispatchQoS.userInitiated.getter();
  char v21 = _swiftEmptyArrayStorage;
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10026B3C8((unint64_t *)&unk_10096BAB0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  sub_10000A844((uint64_t *)&unk_10096B8E0);
  sub_1002610F0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v59, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v61);
  uint64_t v22 = v69;
  uint64_t v23 = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v7[v58] = v23;
  sub_10026BBB0(v22, (uint64_t)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_askRequest]);
  uint64_t v24 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveID];
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v25 - 8);
  os_log_type_t v26 = *(void (**)(char *, uint64_t))(v60 + 16);
  uint64_t v61 = v25;
  v26(v24, v70);
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalReceivedBytes] = 0;
  id v27 = objc_allocWithZone((Class)SDAirDropFileZipper);
  id v28 = [v27 initWithQueue:v23 boundStreamSize:v62];
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper] = v28;
  *((void *)v19 + 1) = v64;
  swift_unknownObjectWeakAssign();
  *((void *)v20 + 1) = v65;
  swift_unknownObjectWeakAssign();
  uint64_t v29 = v63;
  SFProgressContinuation.init(_:initialProgress:file:line:)();
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation], v29, v67);
  swift_release();
  v73.receiver = v9;
  v73.super_class = ObjectType;
  uint64_t v30 = (char *)[super init];
  uint64_t v31 = &v30[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter];
  *(void *)uint64_t v31 = 0;
  *((void *)v31 + 1) = 0;
  uint64_t v32 = v30;
  swift_unknownObjectRelease();
  uint64_t ObjectType = (objc_class *)OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper;
  uint64_t v33 = *(void **)&v32[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper];
  uint64_t v34 = _s14descr1008C9AB9V10AskRequestVMa();
  id v35 = v33;
  NSString v36 = String._bridgeToObjectiveC()();
  [v35 setSenderName:v36];

  uint64_t v37 = *(void *)(v22 + *(int *)(v34 + 48));
  if (v37 && (uint64_t v38 = *(void *)(v37 + 16)) != 0)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v39 = 32;
    while (1)
    {
      long long v40 = *(_OWORD *)(v37 + v39 + 16);
      v74[0] = *(_OWORD *)(v37 + v39);
      v74[1] = v40;
      long long v41 = *(_OWORD *)(v37 + v39 + 32);
      long long v42 = *(_OWORD *)(v37 + v39 + 48);
      long long v43 = *(_OWORD *)(v37 + v39 + 64);
      __int16 v75 = *(_WORD *)(v37 + v39 + 80);
      v74[3] = v42;
      v74[4] = v43;
      v74[2] = v41;
      sub_10026BCB0((uint64_t)v74);
      unint64_t v44 = sub_1006A6A84();
      if (v8) {
        break;
      }
      unint64_t v45 = v44;
      sub_10026BD08((uint64_t)v74);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v21 = sub_10025334C(0, v21[2] + 1, 1, v21);
      }
      unint64_t v47 = v21[2];
      unint64_t v46 = v21[3];
      if (v47 >= v46 >> 1) {
        char v21 = sub_10025334C((void *)(v46 > 1), v47 + 1, 1, v21);
      }
      void v21[2] = v47 + 1;
      v21[v47 + 4] = v45;
      v39 += 88;
      if (!--v38)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v22 = v69;
        goto LABEL_12;
      }
    }
    sub_10026BD08((uint64_t)v74);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v70, v61);
    swift_bridgeObjectRelease();
    uint64_t v22 = v69;
  }
  else
  {
LABEL_12:
    uint64_t v48 = v70;
    if (v21[2])
    {
      Class v49 = ObjectType;
      id v50 = *(id *)((char *)ObjectType + (void)v32);
      sub_10045E628((uint64_t)v21);
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v52 = swift_allocObject();
      swift_weakInit();
      aBlock[4] = sub_10026BC4C;
      aBlock[5] = v52;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100262130;
      aBlock[3] = &unk_1008D43F0;
      uint64_t v53 = _Block_copy(aBlock);
      swift_release();
      [v50 setPlaceholderFiles:isa withCreationCompletionHandler:v53];
      _Block_release(v53);

      [*(id *)((char *)v49 + (void)v32) setDelegate:v32];
    }
    else
    {

      swift_bridgeObjectRelease();
      uint64_t v54 = type metadata accessor for SFAirDropReceive.Failure();
      sub_10026B3C8(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v54 - 8) + 104))(v55, enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:), v54);
      swift_willThrow();
    }

    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v48, v61);
  }
  sub_10026BC54(v22);
  return v32;
}

uint64_t sub_100261C54(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B47C(v5, (uint64_t)qword_10096B900);
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    v15[1] = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Created %ld placeholder files", v8, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = sub_100261ECC(a1);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = _swiftEmptyArrayStorage;
    }
    uint64_t v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = 0;
    v14[3] = 0;
    v14[4] = v10;
    v14[5] = v12;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10028CFD4((uint64_t)v4, (uint64_t)&unk_10096BAD8, (uint64_t)v14);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

void *sub_100261ECC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  sub_100255464(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_10024D2D4(i, (uint64_t)v9);
      sub_10000A844(&qword_10096B350);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100255464(0, v3[2] + 1, 1);
        uint64_t v3 = v10;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_100255464(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v10;
      }
      v3[2] = v6 + 1;
      v3[v6 + 4] = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *sub_100262014(uint64_t a1)
{
  unint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_10024D2D4(i, (uint64_t)v5);
    sub_10000B740(0, &qword_10096BAE8);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

uint64_t sub_100262130(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002621A4(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 344) = a2;
  *(void *)(v3 + 216) = a1;
  *(void *)(v3 + 224) = v2;
  swift_getObjectType();
  sub_10000A844((uint64_t *)&unk_10096AC10);
  *(void *)(v3 + 232) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  *(void *)(v3 + 240) = v4;
  *(void *)(v3 + 248) = *(void *)(v4 - 8);
  *(void *)(v3 + 256) = swift_task_alloc();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 264) = v5;
  *(void *)(v3 + 272) = v6;
  return _swift_task_switch(sub_100262320, v5, v6);
}

uint64_t sub_100262320()
{
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096B900);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting Receive Compression Adapter", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[28];

  uint64_t v6 = (void *)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream);
  swift_beginAccess();
  if (*v6) {
    goto LABEL_7;
  }
  os_log_type_t v7 = (void *)(v0[28] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess();
  if (*v7) {
    goto LABEL_7;
  }
  uint64_t v12 = self;
  swift_beginAccess();
  v0[25] = *v6;
  swift_beginAccess();
  v0[26] = *v7;
  [v12 getBoundStreamsWithBufferSize:3145728 inputStream:v0 + 25 outputStream:v0 + 26];
  uint64_t v13 = (void *)v0[26];
  uint64_t v14 = (void *)*v7;
  *os_log_type_t v7 = v13;
  swift_endAccess();
  unint64_t v15 = (void *)v0[25];
  uint64_t v16 = (void *)*v6;
  *uint64_t v6 = v15;
  swift_endAccess();
  id v17 = v13;
  id v18 = v15;

  uint64_t v19 = (void *)*v6;
  v0[35] = *v6;
  if (!v19 || (uint64_t v20 = (void *)*v7, v0[36] = *v7, !v20))
  {
LABEL_7:
    uint64_t v8 = type metadata accessor for SFAirDropReceive.Failure();
    sub_10026B3C8(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for SFAirDropReceive.Failure.streamError(_:), v8);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v21 = qword_100969B90;
    id v22 = v19;
    id v23 = v20;
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v24 = static AirDropActor.shared;
    return _swift_task_switch(sub_1002626DC, v24, 0);
  }
}

uint64_t sub_1002626DC()
{
  uint64_t v1 = type metadata accessor for SDAirDropDownloadDestinationProvideriOS();
  uint64_t v2 = swift_allocObject();
  v0[5] = v1;
  v0[6] = &off_1008D3BE8;
  v0[2] = v2;
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[34];
  return _swift_task_switch(sub_10026278C, v3, v4);
}

uint64_t sub_10026278C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 224)
     + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  swift_beginAccess();
  sub_10026B410(v0 + 16, v2, &qword_10096BA28);
  swift_endAccess();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 296) = v3;
  void *v3 = v1;
  v3[1] = sub_1002628A0;
  uint64_t v4 = *(void *)(v1 + 256);
  return sub_100263054(v4);
}

uint64_t sub_1002628A0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  uint64_t v4 = *(void *)(v2 + 264);
  if (v0) {
    uint64_t v5 = sub_100262ECC;
  }
  else {
    uint64_t v5 = sub_100262A08;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100262A08()
{
  uint64_t v1 = v0[31];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 16))(v3, v0[32], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v3, 0, 1, v2);
  uint64_t v6 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination;
  swift_beginAccess();
  sub_10026B410(v3, v6, (uint64_t *)&unk_10096AC10);
  swift_endAccess();
  uint64_t v7 = _s14descr1008C92C9V13UploadRequestVMa();
  v0[39] = v7;
  uint64_t v8 = *(void *)(v5 + *(int *)(v7 + 20));
  v0[40] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[41] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100262B88;
  uint64_t v10 = v0[32];
  return sub_1002636E0(v10, v8);
}

uint64_t sub_100262B88()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  uint64_t v4 = *(void *)(v2 + 264);
  if (v0) {
    uint64_t v5 = sub_100262F7C;
  }
  else {
    uint64_t v5 = sub_100262CF0;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100262CF0()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v3 = *(void **)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v16 = *(void *)(v0 + 240);
  unsigned int v15 = *(unsigned __int8 *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v6 = *(NSURL **)(v0 + 224);
  *(Class *)((char *)&v6->super.isa
           + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) = *(Class *)(v0 + 320);
  uint64_t v8 = *(Class *)((char *)&v6->super.isa + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper);
  URL._bridgeToObjectiveC()(v6);
  uint64_t v10 = v9;
  [v8 setDestination:v9];

  [v8 setReadStream:v2];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  [v8 setTotalBytes:isa];

  sub_10026B76C(*(void *)(v7 + *(int *)(v1 + 24)));
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 setUnzipCompressionType:v12];

  [v8 setShouldExtractMediaFromPhotosBundles:v15];
  [v3 open];
  [v8 unzip];

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100262ECC()
{
  uint64_t v1 = *(void **)(v0 + 280);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100262F7C()
{
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 240);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100263054(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  swift_getObjectType();
  sub_10000A844((uint64_t *)&unk_10096AC10);
  v2[7] = swift_task_alloc();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[8] = v4;
  v2[9] = v3;
  return _swift_task_switch(sub_10026313C, v4, v3);
}

uint64_t sub_10026313C()
{
  uint64_t v1 = (void *)(v0[6]
                + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider);
  swift_beginAccess();
  uint64_t v2 = v1[3];
  if (v2)
  {
    uint64_t v3 = v0[6];
    sub_10026BB6C(v1, v2);
    uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveID;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[10] = v5;
    void *v5 = v0;
    v5[1] = sub_100263354;
    uint64_t v6 = v0[7];
    return sub_100244DD0(v6, v4);
  }
  else
  {
    uint64_t v8 = v0[7];
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    sub_10000A7E8(v0[7], (uint64_t *)&unk_10096AC10);
    uint64_t v10 = type metadata accessor for SFAirDropSend.Failure();
    sub_10026B3C8(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v11, enum case for SFAirDropSend.Failure.missingDownloadDirectory(_:), v10);
    swift_willThrow();
    swift_task_dealloc();
    NSString v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100263354()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v4 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v5 = sub_10026367C;
  }
  else {
    uint64_t v5 = sub_100263490;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_100263490()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_10000A7E8(v0[7], (uint64_t *)&unk_10096AC10);
    uint64_t v4 = type metadata accessor for SFAirDropSend.Failure();
    sub_10026B3C8(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for SFAirDropSend.Failure.missingDownloadDirectory(_:), v4);
    swift_willThrow();
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(v3 + 32))(v0[5], v0[7], v2);
  }
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10026367C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002636E0(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  swift_getObjectType();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026379C, v5, v4);
}

uint64_t sub_10026379C()
{
  uint64_t v1 = *(NSURL **)(v0 + 56);
  if ((uint64_t)v1 < 1)
  {
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000B47C(v10, (uint64_t)qword_10096B900);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "UPLOAD invalid total bytes";
      goto LABEL_12;
    }
  }
  else
  {
    URL._bridgeToObjectiveC()(v1);
    uint64_t v3 = v2;
    id v4 = sub_1001AC9A4(v2, 0);

    if (v4)
    {
      static Int64._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000B47C(v5, (uint64_t)qword_10096B900);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      uint64_t v9 = "Unable to get available storage";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v9, v8, 2u);
      swift_slowDealloc();
    }
  }

  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100263CA4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100263D98()
{
  v1[13] = v0;
  swift_getObjectType();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v3;
  v1[15] = v2;
  return _swift_task_switch(sub_100263E50, v3, v2);
}

uint64_t sub_100263E50()
{
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096B900);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Stopping Receive Compression Adapter", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 104);

  [*(id *)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper) stop];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100263FB8;
  return sub_1002646D4();
}

uint64_t sub_100263FB8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return _swift_task_switch(sub_1002640D8, v3, v2);
}

uint64_t sub_1002640D8()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  *(void *)(v0 + 136) = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  uint64_t v3 = v1 + v2;
  swift_beginAccess();
  if (*(void *)(v3 + 24))
  {
    if (qword_100969B90 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 120);
    return _swift_task_switch(sub_100264328, v4, v5);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v7 = v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
    uint64_t v8 = *(void *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
    *(void *)(v0 + 144) = v8;
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 8);
      uint64_t ObjectType = swift_getObjectType();
      unsigned int v15 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v9 + 24) + **(int **)(v9 + 24));
      swift_unknownObjectRetain();
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v11;
      void *v11 = v0;
      v11[1] = sub_1002644DC;
      return v15(ObjectType, v9);
    }
    else
    {
      uint64_t v12 = v6 + *(void *)(v0 + 136);
      *(_OWORD *)(v0 + 32) = 0u;
      *(void *)(v0 + 48) = 0;
      *(_OWORD *)(v0 + 16) = 0u;
      swift_beginAccess();
      sub_10026B410(v0 + 16, v12, &qword_10096BA28);
      swift_endAccess();
      uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
      return v13();
    }
  }
}

uint64_t sub_100264328()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
  *(void *)(v0 + 144) = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4 + 24) + **(int **)(v4 + 24));
    swift_unknownObjectRetain();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1002644DC;
    return v10(ObjectType, v4);
  }
  else
  {
    uint64_t v8 = v1 + *(void *)(v0 + 136);
    *(_OWORD *)(v0 + 32) = 0u;
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    swift_beginAccess();
    sub_10026B410(v0 + 16, v8, &qword_10096BA28);
    swift_endAccess();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_1002644DC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(v1 + 112);
  return _swift_task_switch(sub_100264620, v3, v2);
}

uint64_t sub_100264620()
{
  uint64_t v1 = *(void *)(v0 + 104) + *(void *)(v0 + 136);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  swift_beginAccess();
  sub_10026B410(v0 + 16, v1, &qword_10096BA28);
  swift_endAccess();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002646D4()
{
  *(void *)(v1 + 64) = v0;
  swift_getObjectType();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10026478C, v3, v2);
}

uint64_t sub_10026478C()
{
  uint64_t v1 = (id *)(*(void *)(v0 + 64)
            + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess();
  if (*v1)
  {
    id v2 = *v1;
    if ([v2 streamStatus] != (id)6 && objc_msgSend(v2, "streamStatus") != (id)7)
    {
      if (qword_100969AF0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10000B47C(v3, (uint64_t)qword_10096B900);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Closing output stream", v6, 2u);
        swift_slowDealloc();
      }

      [v2 close];
      id v2 = *v1;
      *uint64_t v1 = 0;
    }
  }
  uint64_t v7 = (id *)(*(void *)(v0 + 64)
            + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream);
  swift_beginAccess();
  if (*v7)
  {
    id v8 = *v7;
    if ([v8 streamStatus] != (id)6 && objc_msgSend(v8, "streamStatus") != (id)7)
    {
      if (qword_100969AF0 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_10000B47C(v9, (uint64_t)qword_10096B900);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Closing input stream", v12, 2u);
        swift_slowDealloc();
      }

      [v8 close];
      id v8 = *v7;
      *uint64_t v7 = 0;
    }
  }
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

void sub_100264A5C(uint64_t a1, uint64_t a2)
{
  id v2 = (id *)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess();
  if (!*v2) {
    goto LABEL_4;
  }
  id v3 = *v2;
  if ([v3 streamStatus] == (id)6)
  {

LABEL_4:
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000B47C(v4, (uint64_t)qword_10096B900);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Output stream closed", v7, 2u);
      swift_slowDealloc();
    }

    sub_10000A844(&qword_10096BB88);
    CheckedContinuation.resume(returning:)();
    return;
  }
  if (([v3 hasSpaceAvailable] & 1) == 0)
  {
    do
    {
      if ([v3 streamStatus] == (id)6) {
        break;
      }
      if (qword_100969AF0 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10000B47C(v8, (uint64_t)qword_10096B900);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Buffer has no space, waiting for zipper to take bytes", v11, 2u);
        swift_slowDealloc();
      }
    }
    while (![v3 hasSpaceAvailable]);
  }
  sub_10000A844(&qword_10096BB88);
  CheckedContinuation.resume(returning:)();
}

uint64_t sub_100264CE8(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  swift_getObjectType();
  uint64_t v4 = type metadata accessor for POSIXError();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[15] = v6;
  v3[16] = v5;
  return _swift_task_switch(sub_100264E04, v6, v5);
}

uint64_t sub_100264E04()
{
  uint64_t v62 = v0;
  id v3 = (void **)(*(void *)(v0 + 80)
               + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *(void *)(v0 + 136) = *v3;
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v0 + 40);
    unint64_t v6 = *(void *)(v0 + 72);
    unint64_t v7 = v6 >> 62;
    uint64_t v8 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        int v9 = *(_DWORD *)(v0 + 64);
        int v10 = *(_DWORD *)(v0 + 68);
        BOOL v11 = __OFSUB__(v10, v9);
        LODWORD(v8) = v10 - v9;
        if (v11)
        {
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if ((int)v8 > 3145728) {
          break;
        }
        uint64_t v8 = (int)v8;
LABEL_10:
        uint64_t v16 = *(void *)(v0 + 80);
        uint64_t v17 = *(void *)(v16 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalReceivedBytes);
        BOOL v11 = __OFADD__(v17, v8);
        uint64_t v18 = v17 + v8;
        if (v11)
        {
          __break(1u);
        }
        else
        {
          uint64_t v2 = (_DWORD *)(v0 + 64);
          uint64_t v19 = *(void *)(v0 + 64);
          *(void *)(v16 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalReceivedBytes) = v18;
          id v20 = v4;
          sub_10025ADCC(v19, v6);
          uint64_t v21 = sub_1002FE474(v19, v6);
          sub_100250CC4(v19, v6);
          uint64_t v1 = (uint64_t)[v20 write:v21 + 4 maxLength:v21[2]];
          swift_release();
          if (v1 < 0)
          {
            if (![v20 streamError])
            {
              uint64_t v30 = *(void *)(v0 + 96);
              uint64_t v29 = *(void *)(v0 + 104);
              uint64_t v31 = *(void *)(v0 + 88);
              *(_DWORD *)(v0 + 192) = 5;
              sub_10026B474((uint64_t)&_swiftEmptyArrayStorage);
              sub_10026B3C8(&qword_10096BB68, (void (*)(uint64_t))&type metadata accessor for POSIXError);
              _BridgedStoredNSError.init(_:userInfo:)();
              POSIXError._nsError.getter();
              (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
            }
            swift_willThrow();

            goto LABEL_19;
          }
          if (qword_100969AF0 == -1)
          {
LABEL_13:
            uint64_t v23 = *(void *)(v0 + 64);
            unint64_t v22 = *(void *)(v0 + 72);
            uint64_t v24 = type metadata accessor for Logger();
            sub_10000B47C(v24, (uint64_t)qword_10096B900);
            sub_10025ADCC(v23, v22);
            uint64_t v25 = Logger.logObject.getter();
            os_log_type_t v26 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v25, v26))
            {
              uint64_t v27 = swift_slowAlloc();
              *(_DWORD *)uint64_t v27 = 134218240;
              *(void *)(v0 + 48) = v1;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v27 + 12) = 2048;
              uint64_t v28 = 0;
              switch((int)v7)
              {
                case 1:
                  int v34 = v2[1];
                  LODWORD(v28) = v34 - *v2;
                  if (__OFSUB__(v34, *v2)) {
                    goto LABEL_58;
                  }
                  uint64_t v28 = (int)v28;
LABEL_26:
                  uint64_t v38 = *(void *)(v0 + 64);
                  unint64_t v37 = *(void *)(v0 + 72);
                  *(void *)(v0 + 56) = v28;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  sub_100250CC4(v38, v37);
                  _os_log_impl((void *)&_mh_execute_header, v25, v26, "Wrote %ld bytes of %ld to output stream", (uint8_t *)v27, 0x16u);
                  swift_slowDealloc();
                  uint64_t v5 = (uint64_t *)(v0 + 40);
                  break;
                case 2:
                  uint64_t v35 = *(void *)(*(void *)v2 + 16);
                  uint64_t v36 = *(void *)(*(void *)v2 + 24);
                  BOOL v11 = __OFSUB__(v36, v35);
                  uint64_t v28 = v36 - v35;
                  if (!v11) {
                    goto LABEL_26;
                  }
                  goto LABEL_59;
                case 3:
                  goto LABEL_26;
                default:
                  uint64_t v28 = *(unsigned __int8 *)(v0 + 78);
                  goto LABEL_26;
              }
            }
            else
            {
              sub_100250CC4(*(void *)(v0 + 64), *(void *)(v0 + 72));
            }

            switch((int)v7)
            {
              case 0:
                unint64_t v39 = *(unsigned __int8 *)(v0 + 78);
                goto LABEL_32;
              case 1:
                int v40 = v2[1];
                LODWORD(v39) = v40 - *v2;
                if (__OFSUB__(v40, *v2)) {
                  goto LABEL_56;
                }
                unint64_t v39 = (int)v39;
LABEL_32:
                if (v1 != v39)
                {
                  if (v7)
                  {
                    if (v7 == 1)
                    {
                      int v43 = v2[1];
                      if (__OFSUB__(v43, *v2))
                      {
LABEL_60:
                        __break(1u);
                        goto LABEL_61;
                      }
                      uint64_t v44 = v43 - *v2;
                    }
                    else
                    {
                      uint64_t v49 = *(void *)(*(void *)v2 + 16);
                      uint64_t v50 = *(void *)(*(void *)v2 + 24);
                      uint64_t v44 = v50 - v49;
                      if (__OFSUB__(v50, v49))
                      {
LABEL_61:
                        __break(1u);
                        JUMPOUT(0x100265630);
                      }
                    }
                  }
                  else
                  {
                    uint64_t v44 = *(unsigned __int8 *)(v0 + 78);
                  }
LABEL_44:
                  if (v44 >= v1)
                  {
                    uint64_t v51 = Data.subdata(in:)();
                    unint64_t v53 = v52;
                    *(void *)(v0 + 144) = v51;
                    *(void *)(v0 + 152) = v52;
                    sub_10025ADCC(v51, v52);
                    sub_10025ADCC(v51, v53);
                    uint64_t v54 = Logger.logObject.getter();
                    os_log_type_t v55 = static os_log_type_t.debug.getter();
                    if (os_log_type_enabled(v54, v55))
                    {
                      id v56 = (uint8_t *)swift_slowAlloc();
                      uint64_t v61 = swift_slowAlloc();
                      *(_DWORD *)id v56 = 136315138;
                      sub_10025ADCC(v51, v53);
                      uint64_t v57 = Data.description.getter();
                      unint64_t v59 = v58;
                      sub_100250CC4(v51, v53);
                      uint64_t *v5 = sub_100254634(v57, v59, &v61);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      sub_100250CC4(v51, v53);
                      sub_100250CC4(v51, v53);
                      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Wrote remaining %s to output stream", v56, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                      sub_100250CC4(v51, v53);
                      sub_100250CC4(v51, v53);
                    }

                    uint64_t v60 = (void *)swift_task_alloc();
                    *(void *)(v0 + 160) = v60;
                    *uint64_t v60 = v0;
                    v60[1] = sub_100265660;
                    return sub_100264CE8(v51, v53);
                  }
LABEL_55:
                  __break(1u);
LABEL_56:
                  __break(1u);
LABEL_57:
                  __break(1u);
LABEL_58:
                  __break(1u);
LABEL_59:
                  __break(1u);
                  goto LABEL_60;
                }
LABEL_39:
                uint64_t v45 = *(void *)(v0 + 112);
                uint64_t v46 = *(void *)(v0 + 80);
                unint64_t v47 = (void *)swift_task_alloc();
                *(void *)(v0 + 176) = v47;
                *unint64_t v47 = v0;
                v47[1] = sub_100265890;
                uint64_t v48 = *(void *)(v0 + 80);
                uint64_t result = withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 196, v46, v45, 0xD000000000000014, 0x80000001007B6FD0, sub_10026CB68, v48, &type metadata for Bool);
                break;
              case 2:
                uint64_t v41 = *(void *)(*(void *)v2 + 16);
                uint64_t v42 = *(void *)(*(void *)v2 + 24);
                BOOL v11 = __OFSUB__(v42, v41);
                unint64_t v39 = v42 - v41;
                if (!v11) {
                  goto LABEL_32;
                }
                goto LABEL_57;
              case 3:
                if (!v1) {
                  goto LABEL_39;
                }
                uint64_t v44 = 0;
                goto LABEL_44;
              default:
                JUMPOUT(0);
            }
            return result;
          }
        }
        swift_once();
        goto LABEL_13;
      case 2uLL:
        uint64_t v12 = *(void *)(*(void *)(v0 + 64) + 16);
        uint64_t v13 = *(void *)(*(void *)(v0 + 64) + 24);
        BOOL v11 = __OFSUB__(v13, v12);
        uint64_t v8 = v13 - v12;
        if (v11) {
          goto LABEL_54;
        }
        if (v8 > 3145728) {
          break;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v8 = BYTE6(v6);
        goto LABEL_10;
    }
  }
  uint64_t v14 = type metadata accessor for SFAirDropReceive.Failure();
  sub_10026B3C8(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104))(v15, enum case for SFAirDropReceive.Failure.streamError(_:), v14);
  swift_willThrow();
LABEL_19:
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_100265660()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  uint64_t v4 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v5 = sub_100265AA8;
  }
  else {
    uint64_t v5 = sub_10026579C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10026579C()
{
  sub_100250CC4(v0[18], v0[19]);
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[22] = v3;
  void *v3 = v0;
  v3[1] = sub_100265890;
  uint64_t v4 = v0[10];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)((char *)v0 + 196, v2, v1, 0xD000000000000014, 0x80000001007B6FD0, sub_10026CB68, v4, &type metadata for Bool);
}

uint64_t sub_100265890()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  uint64_t v4 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v5 = sub_100265A3C;
  }
  else {
    uint64_t v5 = sub_1002659CC;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1002659CC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100265A3C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100265AA8()
{
  uint64_t v1 = (void *)v0[17];
  sub_100250CC4(v0[18], v0[19]);

  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100265B1C()
{
  v1[8] = v0;
  swift_getObjectType();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[9] = v3;
  v1[10] = v2;
  return _swift_task_switch(sub_100265BD4, v3, v2);
}

uint64_t sub_100265BD4()
{
  uint64_t v1 = (void **)(v0[8] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess();
  uint64_t v2 = *v1;
  v0[11] = *v1;
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = (void **)(v0[8] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream);
  swift_beginAccess();
  uint64_t v4 = *v3;
  v0[12] = v4;
  if (!v4) {
    goto LABEL_6;
  }
  id v5 = v2;
  id v6 = v4;
  if ([v5 streamStatus] == (id)6 || objc_msgSend(v5, "streamStatus") == (id)7)
  {

LABEL_6:
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000B47C(v7, (uint64_t)qword_10096B900);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      int v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Streams not ready for close", v10, 2u);
      swift_slowDealloc();
    }
LABEL_10:

    BOOL v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  if (([v6 hasBytesAvailable] & 1) == 0)
  {
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B47C(v18, (uint64_t)qword_10096B900);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Closing output stream", v21, 2u);
      swift_slowDealloc();
    }

    [v5 close];
    uint64_t v8 = *v1;
    *uint64_t v1 = 0;
    goto LABEL_10;
  }
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000B47C(v13, (uint64_t)qword_10096B900);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Still bytes present on input stream", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = (void *)swift_task_alloc();
  v0[13] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_100265F9C;
  return sub_100265B1C();
}

uint64_t sub_100265F9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 72);
  if (v0) {
    id v5 = sub_100266140;
  }
  else {
    id v5 = sub_1002660D8;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1002660D8()
{
  uint64_t v1 = *(void **)(v0 + 88);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100266140()
{
  uint64_t v1 = *(void **)(v0 + 88);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002661A8(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  swift_getObjectType();
  v2[30] = sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[31] = v4;
  v2[32] = v3;
  return _swift_task_switch(sub_100266264, v4, v3);
}

uint64_t sub_100266264()
{
  sub_10000A844(&qword_10096BA68);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1007709D0;
  *(void *)(inited + 32) = String._bridgeToObjectiveC()();
  uint64_t v2 = sub_10000B740(0, (unint64_t *)&unk_10096BA70);
  uint64_t v3 = NSString.init(stringLiteral:)();
  *(void *)(inited + 64) = v2;
  *(void *)(inited + 40) = v3;
  *(void *)(inited + 72) = String._bridgeToObjectiveC()();
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  uint64_t v5 = sub_10000B740(0, (unint64_t *)&qword_1009745A0);
  *(void *)(inited + 104) = v5;
  *(void *)(inited + 80) = isa;
  *(void *)(inited + 112) = String._bridgeToObjectiveC()();
  v6.super.super.Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
  *(void *)(inited + 144) = v5;
  *(NSNumber *)(inited + 120) = v6;
  *(void *)(v0 + 200) = sub_100245BB4(inited);
  sub_10026B9A4();
  swift_bridgeObjectRetain();
  Class v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)CacheDeleteCopyPurgeableSpaceWithInfo();

  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  unint64_t v9 = sub_100245A7C((uint64_t)_swiftEmptyArrayStorage);
  if (*(void *)(v9 + 16) && (uint64_t v10 = sub_1005838BC(0xD000000000000013, 0x80000001007B6E10), (v11 & 1) != 0))
  {
    sub_10024D2D4(*(void *)(v9 + 56) + 32 * v10, v0 + 168);
  }
  else
  {
    *(_OWORD *)(v0 + 168) = 0u;
    *(_OWORD *)(v0 + 184) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 192))
  {
    sub_10000A7E8(v0 + 168, (uint64_t *)&unk_10096AC20);
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_15:
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10000B47C(v22, (uint64_t)qword_10096B900);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_20;
    }
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v20 = 0;
    uint64_t v21 = "Insufficient storage, nothing to purge";
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)(v0 + 208);
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000B47C(v13, (uint64_t)qword_10096B900);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134217984;
    *(void *)(v0 + 216) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Purgeable bytes %ld", v16, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v17 = *(void *)(v0 + 224);

  uint64_t v18 = Logger.logObject.getter();
  if (v12 < v17)
  {
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
    {
LABEL_20:

      uint64_t v23 = type metadata accessor for SFAirDropReceive.Failure();
      sub_10026B3C8(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for SFAirDropReceive.Failure.insufficientStorage(_:), v23);
      swift_willThrow();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
      return v25();
    }
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v20 = 0;
    uint64_t v21 = "Insufficient storage, not enough purgeable bytes";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc();
    goto LABEL_20;
  }
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v27, "Starting cache purge", v28, 2u);
    swift_slowDealloc();
  }
  uint64_t v30 = *(void *)(v0 + 232);
  uint64_t v29 = *(void *)(v0 + 240);
  uint64_t v31 = *(void *)(v0 + 224);

  uint64_t v32 = swift_task_alloc();
  *(void *)(v0 + 264) = v32;
  *(void *)(v32 + 16) = v0 + 200;
  *(void *)(v32 + 24) = v31;
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v33;
  void *v33 = v0;
  v33[1] = sub_1002668DC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v33, v30, v29, 0xD000000000000020, 0x80000001007B6E50, sub_10026BA0C, v32, (char *)&type metadata for () + 8);
}

uint64_t sub_1002668DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 248);
    uint64_t v4 = *(void *)(v2 + 256);
    uint64_t v5 = sub_100266A5C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 248);
    uint64_t v4 = *(void *)(v2 + 256);
    uint64_t v5 = sub_1002669F8;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1002669F8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100266A5C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100266AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000A844((uint64_t *)&unk_10096BA90);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_10000B740(0, (unint64_t *)&unk_10096BA70);
  sub_10026B9A4();
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  *(void *)(v10 + ((v7 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  aBlock[4] = sub_10026BAB4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002670F0;
  aBlock[3] = &unk_1008D43A0;
  char v11 = _Block_copy(aBlock);
  swift_release();
  CacheDeletePurgeAsync();
  _Block_release(v11);
}

uint64_t sub_100266CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v28 = 0;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  unint64_t v4 = sub_100245A7C((uint64_t)_swiftEmptyArrayStorage);
  if (!*(void *)(v4 + 16) || (uint64_t v5 = sub_1005838BC(0xD000000000000013, 0x80000001007B6E10), (v6 & 1) == 0))
  {
    long long v28 = 0u;
    long long v29 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_10024D2D4(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v28);
  swift_bridgeObjectRelease();
  if (!*((void *)&v29 + 1))
  {
LABEL_11:
    sub_10000A7E8((uint64_t)&v28, (uint64_t *)&unk_10096AC20);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10000B47C(v16, (uint64_t)qword_10096B900);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v8, v17)) {
      goto LABEL_17;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    char v11 = "Insufficient storage, did not purge";
    uint64_t v12 = v8;
    os_log_type_t v13 = v17;
    uint64_t v14 = v18;
    uint32_t v15 = 2;
    goto LABEL_16;
  }
  if (v27 < a3)
  {
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000B47C(v7, (uint64_t)qword_10096B900);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_17;
    }
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    *(void *)&long long v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char v11 = "Insufficient storage, not enough purgeable space %ld";
    uint64_t v12 = v8;
    os_log_type_t v13 = v9;
    uint64_t v14 = v10;
    uint32_t v15 = 12;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, v14, v15);
    swift_slowDealloc();
LABEL_17:

    uint64_t v19 = type metadata accessor for SFAirDropReceive.Failure();
    sub_10026B3C8(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
    uint64_t v20 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for SFAirDropReceive.Failure.insufficientStorage(_:), v19);
    *(void *)&long long v28 = v20;
    sub_10000A844((uint64_t *)&unk_10096BA90);
    return CheckedContinuation.resume(throwing:)();
  }
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10000B47C(v23, (uint64_t)qword_10096B900);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Purge cache successful, sufficient storage", v26, 2u);
    swift_slowDealloc();
  }

  sub_10000A844((uint64_t *)&unk_10096BA90);
  return CheckedContinuation.resume(returning:)();
}

void sub_1002670F0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100267158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  sub_10000A844((uint64_t *)&unk_10096AC10);
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  v5[8] = v6;
  v5[9] = v7;
  type metadata accessor for SDAirDropReceiveCompressionAdapter();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100267250, v9, v8);
}

uint64_t sub_100267250()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (uint64_t *)(v1 + v0[9]);
  uint64_t v3 = *v2;
  v0[10] = *v2;
  if (v3)
  {
    uint64_t v4 = v0[8];
    uint64_t v5 = v2[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination;
    swift_unknownObjectRetain();
    swift_beginAccess();
    sub_10024A330(v7, v4, (uint64_t *)&unk_10096AC10);
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
    uint64_t v8 = (void *)swift_task_alloc();
    v0[11] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100267404;
    uint64_t v9 = v0[7];
    uint64_t v10 = v0[8];
    return v12(v10, v9, ObjectType, v5);
  }
  else
  {
    return _swift_task_switch(sub_10026CB78, 0, 0);
  }
}

uint64_t sub_100267404()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  sub_10000A7E8(v1, (uint64_t *)&unk_10096AC10);
  return _swift_task_switch(sub_100267540, 0, 0);
}

uint64_t sub_100267540()
{
  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 80) == 0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002675B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  swift_getObjectType();
  uint64_t v5 = sub_10000A844(&qword_10096BB98);
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = sub_10000A844((uint64_t *)&unk_10096BAA0);
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[12] = v8;
  v4[13] = v7;
  return _swift_task_switch(sub_100267730, v8, v7);
}

uint64_t sub_100267730()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation, v3);
  SFProgressContinuation.task.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[14] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10026783C;
  uint64_t v5 = v0[6];
  return SFProgressTask.finalValue.getter(v0 + 28, v5);
}

uint64_t sub_10026783C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 104);
  uint64_t v7 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v8 = sub_100268C08;
  }
  else {
    uint64_t v8 = sub_1002679D4;
  }
  return _swift_task_switch(v8, v7, v6);
}

uint64_t sub_1002679D4()
{
  v0[16] = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[17] = Strong;
  if (Strong)
  {
    os_log_type_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10097DAC0 + dword_10097DAC0);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[18] = v2;
    void *v2 = v0;
    v2[1] = sub_100267E28;
    uint64_t v3 = v0[3];
    uint64_t v4 = v0[4];
    uint64_t v5 = v0[2];
    return v26(v5, v3, v4);
  }
  else
  {
    uint64_t v7 = v0[5];
    uint64_t v8 = v7 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
    uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
    v0[20] = v9;
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void *)(v7 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes);
      os_log_type_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 16) + **(int **)(v10 + 16));
      swift_unknownObjectRetain();
      uint64_t v13 = (void *)swift_task_alloc();
      v0[21] = v13;
      *uint64_t v13 = v0;
      v13[1] = sub_100268360;
      uint64_t v14 = v0[3];
      return v25(v14, v12, ObjectType, v10);
    }
    else if (*(void *)(v7 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != v0[3] {
           || v0[2] < 1)
    }
    {
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v16 = (uint64_t (*)(void))v0[1];
      return v16();
    }
    else
    {
      if (qword_100969AF0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10000B47C(v17, (uint64_t)qword_10096B900);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received all expected bytes, closing streams after ASK response", v20, 2u);
        swift_slowDealloc();
      }

      uint64_t v21 = swift_unknownObjectWeakLoadStrong();
      v0[22] = v21;
      if (v21)
      {
        if (qword_100969B90 != -1) {
          swift_once();
        }
        v0[23] = static AirDropActor.shared;
        uint64_t v22 = (void *)swift_task_alloc();
        v0[24] = v22;
        *uint64_t v22 = v0;
        v22[1] = sub_100268728;
        uint64_t v23 = v0[5];
        return sub_10067D4A4(v23);
      }
      else
      {
        uint64_t v24 = (void *)swift_task_alloc();
        v0[26] = v24;
        *uint64_t v24 = v0;
        v24[1] = sub_100268954;
        return sub_100265B1C();
      }
    }
  }
}

uint64_t sub_100267E28()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = sub_1002682E8;
  }
  else
  {

    uint64_t v3 = *(void *)(v2 + 96);
    uint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = sub_100267F44;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100267F44()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
  v0[20] = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16) + **(int **)(v4 + 16));
    swift_unknownObjectRetain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[21] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100268360;
    uint64_t v8 = v0[3];
    return v20(v8, v6, ObjectType, v4);
  }
  else if (*(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != v0[3] {
         || v0[2] < 1)
  }
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000B47C(v12, (uint64_t)qword_10096B900);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint32_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint32_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received all expected bytes, closing streams after ASK response", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[22] = Strong;
    if (Strong)
    {
      if (qword_100969B90 != -1) {
        swift_once();
      }
      v0[23] = static AirDropActor.shared;
      uint64_t v17 = (void *)swift_task_alloc();
      v0[24] = v17;
      *uint64_t v17 = v0;
      v17[1] = sub_100268728;
      uint64_t v18 = v0[5];
      return sub_10067D4A4(v18);
    }
    else
    {
      os_log_type_t v19 = (void *)swift_task_alloc();
      v0[26] = v19;
      *os_log_type_t v19 = v0;
      v19[1] = sub_100268954;
      return sub_100265B1C();
    }
  }
}

uint64_t sub_1002682E8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100268360()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *(void *)(v1 + 96);
  return _swift_task_switch(sub_1002684A4, v3, v2);
}

uint64_t sub_1002684A4()
{
  if (*(void *)(v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != v0[3]
    || v0[2] < 1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10000B47C(v4, (uint64_t)qword_10096B900);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received all expected bytes, closing streams after ASK response", v7, 2u);
      swift_slowDealloc();
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[22] = Strong;
    if (Strong)
    {
      if (qword_100969B90 != -1) {
        swift_once();
      }
      v0[23] = static AirDropActor.shared;
      uint64_t v9 = (void *)swift_task_alloc();
      v0[24] = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_100268728;
      uint64_t v10 = v0[5];
      return sub_10067D4A4(v10);
    }
    else
    {
      uint64_t v11 = (void *)swift_task_alloc();
      v0[26] = v11;
      void *v11 = v0;
      v11[1] = sub_100268954;
      return sub_100265B1C();
    }
  }
}

uint64_t sub_100268728()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[12];
    uint64_t v4 = v2[13];
    uint64_t v5 = sub_1002688DC;
  }
  else
  {
    uint64_t v3 = v2[23];
    uint64_t v5 = sub_100268844;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100268844()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100268954;
  return sub_100265B1C();
}

uint64_t sub_1002688DC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100268954()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    os_log_type_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 216) = v6;
    *os_log_type_t v6 = v3;
    v6[1] = sub_100268AD8;
    return sub_1002646D4();
  }
}

uint64_t sub_100268AD8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100268C08()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100268C78(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  swift_getObjectType();
  uint64_t v4 = sub_10000A844(&qword_10096BBA8);
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v3[13] = v5;
  v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[16] = v7;
  v3[17] = v6;
  return _swift_task_switch(sub_100268DF0, v7, v6);
}

uint64_t sub_100268DF0()
{
  v0[18] = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[19] = Strong;
  if (Strong)
  {
    if (qword_100969B90 != -1) {
      swift_once();
    }
    v0[20] = static AirDropActor.shared;
    uint64_t v2 = (void *)swift_task_alloc();
    v0[21] = v2;
    void *v2 = v0;
    v2[1] = sub_100268F50;
    uint64_t v3 = v0[9];
    return sub_10067D4A4(v3);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[23] = v5;
    void *v5 = v0;
    v5[1] = sub_10026917C;
    return sub_100265B1C();
  }
}

uint64_t sub_100268F50()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[16];
    uint64_t v4 = v2[17];
    uint64_t v5 = sub_100269104;
  }
  else
  {
    uint64_t v3 = v2[20];
    uint64_t v5 = sub_10026906C;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10026906C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10026917C;
  return sub_100265B1C();
}

uint64_t sub_100269104()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10026917C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 192) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_100269300;
    return sub_1002646D4();
  }
}

uint64_t sub_100269300()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 128);
  return _swift_task_switch(sub_100269420, v3, v2);
}

uint64_t sub_100269420()
{
  uint64_t v42 = v0;
  uint64_t v2 = v0 + 7;
  uint64_t v1 = v0[7];
  int64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v5 = v0[14];
    uint64_t v41 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10025539C(0, v3, 0);
    uint64_t v4 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t v7 = *(void (**)(void, uint64_t, void))(v5 + 16);
    uint64_t v6 = v5 + 16;
    unint64_t v39 = v7;
    unint64_t v8 = (*(unsigned __int8 *)(v6 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64);
    uint64_t v9 = v1 + v8;
    uint64_t v10 = *(void *)(v6 + 56);
    do
    {
      v39(v0[15], v9, v0[13]);
      uint64_t v41 = v4;
      unint64_t v12 = v4[2];
      unint64_t v11 = v4[3];
      if (v12 >= v11 >> 1)
      {
        sub_10025539C(v11 > 1, v12 + 1, 1);
        uint64_t v4 = v41;
      }
      uint64_t v13 = v0[15];
      uint64_t v14 = v0[13];
      v4[2] = v12 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v4 + v8 + v12 * v10, v13, v14);
      v9 += v10;
      --v3;
    }
    while (v3);
    uint64_t v2 = v0 + 7;
  }
  v0[25] = v4;
  uint64_t v15 = v0[9] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  swift_beginAccess();
  if (*(void *)(v15 + 24))
  {
    if (qword_100969B90 != -1) {
      swift_once();
    }
    uint64_t v16 = v0[16];
    uint64_t v17 = v0[17];
    uint64_t v18 = sub_100269A88;
LABEL_11:
    return _swift_task_switch(v18, v16, v17);
  }
  os_log_type_t v19 = v2 - 1;
  if (v0[8])
  {
    swift_errorRetain();
    swift_bridgeObjectRelease();
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10000B47C(v20, (uint64_t)qword_10096B900);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138412290;
      swift_errorRetain();
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
      *os_log_type_t v19 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Decompression failed %@", v23, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[26] = Strong;
    if (Strong)
    {
      if (qword_100969B90 != -1) {
        swift_once();
      }
      uint64_t v16 = static AirDropActor.shared;
      v0[27] = static AirDropActor.shared;
      uint64_t v18 = sub_100269F8C;
      uint64_t v17 = 0;
      goto LABEL_11;
    }
    swift_errorRelease();
    goto LABEL_35;
  }
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10000B47C(v26, (uint64_t)qword_10096B900);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    long long v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = (unint64_t *)swift_slowAlloc();
    *(_DWORD *)long long v29 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v30 = Array.description.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    v0[5] = sub_100254634(v30, v32, (uint64_t *)&v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Decompression succeeded %s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v34 = swift_unknownObjectWeakLoadStrong();
  v0[30] = v34;
  if (!v34)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
  int v40 = (uint64_t (*)(uint64_t))((char *)&dword_10097DAC8 + dword_10097DAC8);
  uint64_t v35 = (void *)swift_task_alloc();
  v0[31] = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_10026A308;
  uint64_t v36 = v0[25];
  return v40(v36);
}

uint64_t sub_100269A88()
{
  uint64_t v23 = v0;
  if (v0[8])
  {
    swift_errorRetain();
    swift_bridgeObjectRelease();
    if (qword_100969AF0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000B47C(v1, (uint64_t)qword_10096B900);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 138412290;
      swift_errorRetain();
      uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
      v0[6] = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v5 = v6;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Decompression failed %@", v4, 0xCu);
      sub_10000A844(&qword_10096B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[26] = Strong;
    if (Strong)
    {
      if (qword_100969B90 != -1) {
        swift_once();
      }
      uint64_t v15 = static AirDropActor.shared;
      v0[27] = static AirDropActor.shared;
      return _swift_task_switch(sub_100269F8C, v15, 0);
    }
    swift_errorRelease();
    goto LABEL_24;
  }
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000B47C(v7, (uint64_t)qword_10096B900);
  swift_bridgeObjectRetain_n();
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v11 = Array.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[5] = sub_100254634(v11, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Decompression succeeded %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v16 = swift_unknownObjectWeakLoadStrong();
  v0[30] = v16;
  if (!v16)
  {
    swift_bridgeObjectRelease();
LABEL_24:
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  uint64_t v21 = (uint64_t (*)(uint64_t))((char *)&dword_10097DAC8 + dword_10097DAC8);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[31] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10026A308;
  uint64_t v18 = v0[25];
  return v21(v18);
}

uint64_t sub_100269F8C()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[26] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation, v3);
  SFProgressContinuation.fail(with:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[28] = Strong;
  uint64_t v5 = (void *)v0[26];
  if (Strong)
  {
    uint64_t v6 = (uint64_t)v5 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
    uint64_t v7 = (void *)swift_task_alloc();
    v0[29] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10026A100;
    uint64_t v8 = v0[8];
    return sub_10034C504(v6, v8);
  }
  else
  {

    uint64_t v10 = v0[16];
    uint64_t v11 = v0[17];
    return _swift_task_switch(sub_10026A290, v10, v11);
  }
}

uint64_t sub_10026A100()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 216);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_10026A22C, v1, 0);
}

uint64_t sub_10026A22C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  return _swift_task_switch(sub_10026A290, v1, v2);
}

uint64_t sub_10026A290()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10026A308()
{
  uint64_t v1 = *(void **)(*v0 + 240);
  uint64_t v4 = *v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t URL.quarantine()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_10026A4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  swift_getObjectType();
  uint64_t v5 = sub_10000A844((uint64_t *)&unk_10096BAA0);
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  sub_10026B3C8(&qword_10096BA18, (void (*)(uint64_t))type metadata accessor for SDAirDropReceiveCompressionAdapter);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[6] = v7;
  v4[7] = v6;
  return _swift_task_switch(sub_10026A5FC, v7, v6);
}

uint64_t sub_10026A5FC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, *(void *)(v0 + 16)+ OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation, v3);
  *(unsigned char *)(v0 + 96) = 1;
  SFProgressContinuation.finish(with:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    if (qword_100969B90 != -1) {
      swift_once();
    }
    *(void *)(v0 + 72) = static AirDropActor.shared;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v5;
    void *v5 = v0;
    v5[1] = sub_10026A79C;
    uint64_t v6 = *(void *)(v0 + 16);
    return sub_10067B02C(v6);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_10026A79C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[6];
    uint64_t v4 = v2[7];
    uint64_t v5 = sub_10026A924;
  }
  else
  {
    uint64_t v3 = v2[9];
    uint64_t v5 = sub_10026A8B8;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_10026A8B8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10026A924()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10026A994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v11;
  void *v11 = v7;
  v11[1] = sub_10000A6F4;
  return sub_1002675B4(a5, a6, a7);
}

uint64_t sub_10026AA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10026AA68, 0, 0);
}

uint64_t sub_10026AA68()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Failure();
  sub_10026B3C8(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  uint64_t v2 = swift_allocError();
  *(void *)(v0 + 24) = v2;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, enum case for SFAirDropReceive.Failure.incompleteTransfer(_:), v1);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10026ABA0;
  return sub_100268C78((uint64_t)&_swiftEmptyArrayStorage, v2);
}

uint64_t sub_10026ABA0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10026ACDC, 0, 0);
  }
  else
  {
    swift_errorRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10026ACDC()
{
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10026AD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000A6F0;
  return sub_100268C78(a5, 0);
}

uint64_t sub_10026ADE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10000A6F0;
  return sub_100268C78((uint64_t)&_swiftEmptyArrayStorage, a5);
}

uint64_t sub_10026AF3C()
{
  sub_10026BC54(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_askRequest);
  uint64_t v1 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  sub_10000A7E8(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider, &qword_10096BA28);
  sub_10000A7E8(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination, (uint64_t *)&unk_10096AC10);
  swift_unknownObjectRelease();

  sub_100261080(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate);
  sub_100261080(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveServiceDelegate);

  uint64_t v3 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation;
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096BAA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_10026B098()
{
  sub_10026AF3C();

  return swift_deallocClassInstance();
}

uint64_t sub_10026B100()
{
  return type metadata accessor for SDAirDropReceiveCompressionAdapter();
}

uint64_t type metadata accessor for SDAirDropReceiveCompressionAdapter()
{
  uint64_t result = qword_10096B9F0;
  if (!qword_10096B9F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10026B154()
{
  _s14descr1008C9AB9V10AskRequestVMa();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      sub_10026B2E0();
      if (v2 <= 0x3F)
      {
        sub_10026B338();
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_10026B2E0()
{
  if (!qword_10096BA00)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10096BA00);
    }
  }
}

void sub_10026B338()
{
  if (!qword_10096BA08)
  {
    unint64_t v0 = type metadata accessor for SFProgressContinuation();
    if (!v1) {
      atomic_store(v0, &qword_10096BA08);
    }
  }
}

uint64_t sub_10026B39C()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

uint64_t sub_10026B3C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10026B410(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000A844(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_10026B474(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844((uint64_t *)&unk_10096BB70);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10024A330(v6, (uint64_t)&v15, &qword_10096AA10);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10026B5AC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100249444(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10026B5AC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10026B624(a1, a2, v4);
}

unint64_t sub_10026B624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

CFStringRef sub_10026B76C(uint64_t a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  if (@"application/zip")
  {
    type metadata accessor for CFString(0);
    sub_10026B3C8(&qword_10096B8A0, type metadata accessor for CFString);
    uint64_t v3 = @"application/zip";
    char v4 = static _CFObject.== infix(_:_:)();

    if (v4)
    {
      CFStringRef result = @"pkzip";
      if (@"pkzip")
      {
        a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_14:

        return (const __CFString *)a1;
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  if (@"application/x-cpio")
  {
    type metadata accessor for CFString(0);
    sub_10026B3C8(&qword_10096B8A0, type metadata accessor for CFString);
    id v6 = v2;
    uint64_t v7 = @"application/x-cpio";
    char v8 = static _CFObject.== infix(_:_:)();

    if (v8)
    {
      if (@"gzip") {
        goto LABEL_12;
      }
      __break(1u);
    }
  }
  if (!@"application/x-dvzip"
    || (type metadata accessor for CFString(0),
        sub_10026B3C8(&qword_10096B8A0, type metadata accessor for CFString),
        id v6 = v2,
        uint64_t v9 = @"application/x-dvzip",
        char v10 = static _CFObject.== infix(_:_:)(),
        v9,
        v6,
        (v10 & 1) == 0))
  {
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
  CFStringRef result = @"dvzip";
  if (@"dvzip")
  {
LABEL_12:
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return (const __CFString *)a1;
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t sub_10026B9A4()
{
  unint64_t result = qword_10096BA80;
  if (!qword_10096BA80)
  {
    sub_10000B740(255, (unint64_t *)&unk_10096BA70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096BA80);
  }
  return result;
}

void sub_10026BA0C(uint64_t a1)
{
  sub_100266AC8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10026BA14()
{
  uint64_t v1 = sub_10000A844((uint64_t *)&unk_10096BA90);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10026BAB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000A844((uint64_t *)&unk_10096BA90) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100266CDC(a1, v1 + v4, v5);
}

uint64_t sub_10026BB54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10026BB64()
{
  return swift_release();
}

void *sub_10026BB6C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10026BBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s14descr1008C9AB9V10AskRequestVMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026BC14()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026BC4C(uint64_t a1)
{
  return sub_100261C54(a1);
}

uint64_t sub_10026BC54(uint64_t a1)
{
  uint64_t v2 = _s14descr1008C9AB9V10AskRequestVMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10026BCB0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10026BD08(uint64_t a1)
{
  return a1;
}

uint64_t sub_10026BD60()
{
  return sub_10026C86C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10026BD78(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *char v8 = v2;
  v8[1] = sub_10000A6F4;
  return sub_100267158(a1, v4, v5, v7, v6);
}

void sub_10026BE38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969AF0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = sub_10000B47C(v9, (uint64_t)qword_10096B900);
  swift_unknownObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v47 = v10;
    BOOL v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v48 = v8;
    v49[0] = v14;
    *(_DWORD *)BOOL v13 = 136315138;
    uint64_t v50 = a2;
    swift_unknownObjectRetain();
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v50 = sub_100254634(v15, v16, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Zipper Update: %s", v13, 0xCu);
    swift_arrayDestroy();
    char v8 = v48;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  switch(a1)
  {
    case 5:
      uint64_t v17 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 1, 1, v17);
      uint64_t v18 = (void *)swift_allocObject();
      v18[2] = 0;
      v18[3] = 0;
      v18[4] = v3;
      swift_retain();
      os_log_type_t v19 = &unk_10096BB58;
      goto LABEL_31;
    case 7:
      v49[0] = a2;
      swift_unknownObjectRetain();
      sub_10000A844((uint64_t *)&unk_10096BB30);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v20 = v50;
      uint64_t v50 = kSFOperationFilesCopiedKey;
      id v21 = kSFOperationFilesCopiedKey;
      sub_10000A844(&qword_10096B578);
      sub_10025B004();
      AnyHashable.init<A>(_:)();
      if (!*(void *)(v20 + 16)
        || (unint64_t v22 = sub_100583878((uint64_t)v49), (v23 & 1) == 0)
        || (uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 8 * v22),
            sub_10025B0A8((uint64_t)v49),
            uint64_t v50 = kSFOperationBytesCopiedKey,
            id v25 = kSFOperationBytesCopiedKey,
            AnyHashable.init<A>(_:)(),
            !*(void *)(v20 + 16))
        || (unint64_t v26 = sub_100583878((uint64_t)v49), (v27 & 1) == 0))
      {
        sub_10025B0A8((uint64_t)v49);
        swift_bridgeObjectRelease();
LABEL_24:
        int v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unknown progress info", v42, 2u);
          swift_slowDealloc();
        }

        return;
      }
      uint64_t v28 = *(void *)(*(void *)(v20 + 56) + 8 * v26);
      sub_10025B0A8((uint64_t)v49);
      uint64_t v50 = kSFOperationTimeRemainingKey;
      id v29 = kSFOperationTimeRemainingKey;
      AnyHashable.init<A>(_:)();
      if (!*(void *)(v20 + 16) || (unint64_t v30 = sub_100583878((uint64_t)v49), (v31 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        sub_10025B0A8((uint64_t)v49);
        goto LABEL_24;
      }
      uint64_t v32 = *(void *)(*(void *)(v20 + 56) + 8 * v30);
      swift_bridgeObjectRelease();
      sub_10025B0A8((uint64_t)v49);
      uint64_t v33 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v8, 1, 1, v33);
      uint64_t v18 = (void *)swift_allocObject();
      v18[2] = 0;
      v18[3] = 0;
      v18[4] = v3;
      v18[5] = v24;
      v18[6] = v28;
      v18[7] = v32;
      swift_retain();
      os_log_type_t v19 = &unk_10096BB48;
LABEL_31:
      sub_10028CAC4((uint64_t)v8, (uint64_t)v19, (uint64_t)v18);
      swift_release();
      return;
    case 9:
      v49[0] = a2;
      swift_unknownObjectRetain();
      sub_10000A844((uint64_t *)&unk_10096C8B0);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_28;
      }
      uint64_t v34 = v50;
      if (*(void *)(v50 + 16))
      {
        uint64_t v35 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v8, 1, 1, v35);
        uint64_t v18 = (void *)swift_allocObject();
        v18[2] = 0;
        v18[3] = 0;
        v18[4] = v3;
        v18[5] = v34;
        swift_retain();
        os_log_type_t v19 = &unk_10096BB28;
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_28:
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v45 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Invalid completed URLs", v45, 2u);
          swift_slowDealloc();
        }

        uint64_t v46 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v8, 1, 1, v46);
        uint64_t v18 = (void *)swift_allocObject();
        v18[2] = 0;
        v18[3] = 0;
        v18[4] = v3;
        swift_retain();
        os_log_type_t v19 = &unk_10096BB18;
      }
      goto LABEL_31;
    case 10:
      v49[0] = a2;
      swift_unknownObjectRetain();
      sub_10000A844(&qword_10096BAF0);
      if (swift_dynamicCast())
      {
        uint64_t v36 = v50;
      }
      else
      {
        uint64_t v37 = type metadata accessor for SFAirDropReceive.Failure();
        sub_10026B3C8(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
        uint64_t v36 = swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104))(v38, enum case for SFAirDropReceive.Failure.incompleteTransfer(_:), v37);
      }
      uint64_t v39 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v8, 1, 1, v39);
      uint64_t v18 = (void *)swift_allocObject();
      v18[2] = 0;
      v18[3] = 0;
      v18[4] = v3;
      v18[5] = v36;
      swift_retain();
      os_log_type_t v19 = &unk_10096BB00;
      goto LABEL_31;
    default:
      return;
  }
}

uint64_t sub_10026C69C()
{
  return sub_10026C86C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10026C6B4()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000A6F0;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10000A6F0;
  return sub_100268C78((uint64_t)&_swiftEmptyArrayStorage, v2);
}

uint64_t sub_10026C7A4()
{
  return sub_100260F50(40);
}

uint64_t sub_10026C7AC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000A6F0;
  v3[2] = v2;
  return _swift_task_switch(sub_10026AA68, 0, 0);
}

uint64_t sub_10026C854()
{
  return sub_10026C86C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10026C86C(void (*a1)(void))
{
  swift_unknownObjectRelease();
  swift_release();
  a1(*(void *)(v1 + 40));

  return _swift_deallocObject(v1, 48, 7);
}

uint64_t sub_10026C8C4()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000A6F0;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10000A6F0;
  return sub_100268C78(v2, 0);
}

uint64_t sub_10026C9AC()
{
  return sub_100260F50(64);
}

uint64_t sub_10026C9B4()
{
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10000A6F4;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_10000A6F4;
  return sub_1002675B4(v2, v4, v3);
}

uint64_t sub_10026CAAC()
{
  return sub_100260F50(40);
}

uint64_t sub_10026CAB4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10026A4E0(a1, v4, v5, v6);
}

void sub_10026CB68(uint64_t a1)
{
  sub_100264A5C(a1, v1);
}

id sub_10026CB7C()
{
  uint64_t v1 = *(int *)(_s15MacApprovePhoneV18InitialLockContextVMa(0) + 48);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }
  id result = [objc_allocWithZone((Class)SDAuthenticationApprovePrompt) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10026CBEC()
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100770AC0;
  if (qword_100969AF8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 56) = &type metadata for SDAuthentication.Operation.CheckRemoteDeviceOSVersionIsSupported;
  *(void *)(v0 + 64) = &off_100971888;
  *(void *)(v0 + 96) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v0 + 104) = &off_100971848;
  *(void *)(v0 + 136) = &type metadata for SDAuthentication.Operation.CheckACMTokenExists;
  *(void *)(v0 + 144) = &off_100971728;
  *(void *)(v0 + 176) = &type metadata for SDAuthentication.Operation.RecordRemoteDevice;
  *(void *)(v0 + 184) = &off_100971868;
  *(void *)(v0 + 216) = &type metadata for SDAuthentication.Operation.IncludeApproveMetadataInMessage;
  *(void *)(v0 + 224) = &off_100971708;
  *(void *)(v0 + 256) = &type metadata for SDAuthentication.Operation.SendApprovePromptMessage;
  *(void *)(v0 + 264) = &off_1009716E8;
  return v0;
}

uint64_t sub_10026CCDC(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    BOOL v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    unint64_t v104 = a3;
    uint64_t v105 = a2;
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    os_log_type_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v20 = v19[5];
    id v21 = &v13[v20];
    unint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    uint64_t v24 = v19[6];
    id v25 = &v13[v24];
    unint64_t v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    uint64_t v28 = v19[7];
    id v29 = &v13[v28];
    unint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    uint64_t v36 = v19[9];
    uint64_t v37 = &v13[v36];
    uint64_t v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    uint64_t v40 = v19[10];
    os_log_type_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    uint64_t v48 = v19[12];
    uint64_t v49 = &v13[v48];
    uint64_t v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    unint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    uint64_t v56 = v19[15];
    uint64_t v57 = &v13[v56];
    unint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    uint64_t v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      uint64_t v67 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    uint64_t v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    objc_super v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    unint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v104[7];
    uint64_t v80 = (void *)(a1 + v79);
    unint64_t v81 = (char *)v105 + v79;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v81, 1, v15))
    {
      uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v80, v81, *(void *)(*(void *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v80, v81, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v80, 0, 1, v15);
    }
    uint64_t v83 = v104[8];
    uint64_t v84 = v104[9];
    uint64_t v85 = (void *)(a1 + v83);
    uint64_t v86 = (uint64_t *)((char *)v105 + v83);
    uint64_t v87 = v86[1];
    void *v85 = *v86;
    v85[1] = v87;
    NSString v88 = (void *)(a1 + v84);
    NSString v89 = (uint64_t *)((char *)v105 + v84);
    uint64_t v90 = *v89;
    uint64_t v91 = v89[1];
    uint64_t v92 = v104[10];
    uint64_t v93 = v104[11];
    char v94 = *((unsigned char *)v105 + v92);
    *NSString v88 = v90;
    v88[1] = v91;
    *(unsigned char *)(a1 + v92) = v94;
    uint64_t v95 = a1 + v93;
    uint64_t v96 = (uint64_t *)((char *)v105 + v93);
    unint64_t v97 = *(uint64_t *)((char *)v105 + v93 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v97 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
    }
    else
    {
      uint64_t v98 = *v96;
      sub_10025ADCC(*v96, v97);
      *(void *)uint64_t v95 = v98;
      *(void *)(v95 + 8) = v97;
    }
    uint64_t v99 = v104[12];
    uint64_t v100 = v104[13];
    uint64_t v101 = *(void **)((char *)v105 + v99);
    *(void *)(a1 + v99) = v101;
    *(unsigned char *)(a1 + v100) = *((unsigned char *)v105 + v100);
    id v102 = v101;
  }
  return a1;
}

void sub_10026D798(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + 8;
  swift_bridgeObjectRelease();
  sub_10024D338(v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  long long v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v10 = v5 + v9[5];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v5 + v9[6];
  if (!v8(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = v5 + v9[7];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v5 + v9[8];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v5 + v9[9];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v5 + v9[10];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v5 + v9[11];
  if (!v8(v16, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = v5 + v9[12];
  if (!v8(v17, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = v5 + v9[14];
  if (!v8(v18, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = v5 + v9[15];
  if (!v8(v19, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = v5 + v9[16];
  if (!v8(v20, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = v5 + v9[17];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = a1 + a2[7];
  if (!v8(v22, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v22, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = (uint64_t *)(a1 + a2[11]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_100250CC4(*v23, v24);
  }
  id v25 = *(void **)(a1 + a2[12]);
}

uint64_t sub_10026DC30(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 8, v6, v8);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  id v102 = a3;
  uint64_t v103 = a2;
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  if (v15(&v12[v18], 1, v13))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v17[6];
  uint64_t v23 = &v11[v22];
  unint64_t v24 = &v12[v22];
  if (v15(&v12[v22], 1, v13))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  uint64_t v26 = v17[7];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  if (v15(&v12[v26], 1, v13))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v27, v28, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v17[8];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  if (v15(&v12[v30], 1, v13))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
  }
  uint64_t v34 = v17[9];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  if (v15(&v12[v34], 1, v13))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v35, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  }
  uint64_t v38 = v17[10];
  uint64_t v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  if (v15(&v12[v38], 1, v13))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  uint64_t v42 = v17[11];
  uint64_t v43 = &v11[v42];
  uint64_t v44 = &v12[v42];
  if (v15(&v12[v42], 1, v13))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = v17[12];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  if (v15(&v12[v46], 1, v13))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v47, 0, 1, v13);
  }
  v11[v17[13]] = v12[v17[13]];
  uint64_t v50 = v17[14];
  uint64_t v51 = &v11[v50];
  uint64_t v52 = &v12[v50];
  if (v15(&v12[v50], 1, v13))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v51, v52, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v51, 0, 1, v13);
  }
  uint64_t v54 = v17[15];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  if (v15(&v12[v54], 1, v13))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v56, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
  }
  uint64_t v58 = v17[16];
  uint64_t v59 = &v11[v58];
  uint64_t v60 = &v12[v58];
  if (v15(&v12[v58], 1, v13))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v59, v60, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v13);
  }
  uint64_t v62 = v17[17];
  uint64_t v63 = &v11[v62];
  uint64_t v64 = &v12[v62];
  if (v15(&v12[v62], 1, v13))
  {
    uint64_t v65 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v63, v64, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v63, 0, 1, v13);
  }
  uint64_t v66 = v17[18];
  uint64_t v67 = &v11[v66];
  uint64_t v68 = &v12[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v11[v17[19]] = v12[v17[19]];
  uint64_t v69 = v17[20];
  uint64_t v70 = &v11[v69];
  uint64_t v71 = &v12[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = v17[21];
  uint64_t v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  uint64_t v77 = v102[7];
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (void *)(v103 + v77);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15((char *)v79, 1, v13))
  {
    uint64_t v80 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v78, v79, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v78, 0, 1, v13);
  }
  uint64_t v81 = v102[8];
  uint64_t v82 = v102[9];
  uint64_t v83 = (void *)(a1 + v81);
  uint64_t v84 = (void *)(v103 + v81);
  uint64_t v85 = v84[1];
  void *v83 = *v84;
  v83[1] = v85;
  uint64_t v86 = (void *)(a1 + v82);
  uint64_t v87 = (uint64_t *)(v103 + v82);
  uint64_t v88 = *v87;
  uint64_t v89 = v87[1];
  uint64_t v90 = v102[10];
  uint64_t v91 = v102[11];
  char v92 = *(unsigned char *)(v103 + v90);
  void *v86 = v88;
  v86[1] = v89;
  *(unsigned char *)(a1 + v90) = v92;
  uint64_t v93 = a1 + v91;
  char v94 = (uint64_t *)(v103 + v91);
  unint64_t v95 = *(void *)(v103 + v91 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v95 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
  }
  else
  {
    uint64_t v96 = *v94;
    sub_10025ADCC(*v94, v95);
    *(void *)uint64_t v93 = v96;
    *(void *)(v93 + 8) = v95;
  }
  uint64_t v97 = v102[12];
  uint64_t v98 = v102[13];
  uint64_t v99 = *(void **)(v103 + v97);
  *(void *)(a1 + v97) = v99;
  *(unsigned char *)(a1 + v98) = *(unsigned char *)(v103 + v98);
  id v100 = v99;
  return a1;
}

char *sub_10026E6A4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4(a1 + 1, v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  unint64_t v125 = a2;
  uint64_t v126 = (char *)a1;
  unint64_t v124 = a3;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1, v10);
  int v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  unint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1, v10);
  int v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1, v10);
  int v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1, v10);
  int v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1, v10);
  int v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1, v10);
  int v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1, v10);
  int v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1, v10);
  int v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1, v10);
  int v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1, v10);
  int v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1, v10);
  int v87 = v12(v85, 1, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  int v92 = *(_DWORD *)v91;
  v90[4] = v91[4];
  *(_DWORD *)uint64_t v90 = v92;
  v8[v16[19]] = v9[v16[19]];
  uint64_t v93 = v16[20];
  char v94 = &v8[v93];
  unint64_t v95 = &v9[v93];
  *(void *)char v94 = *(void *)v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = v16[21];
  uint64_t v97 = &v8[v96];
  uint64_t v98 = &v9[v96];
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = *((void *)v98 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v99 = v124[7];
  id v100 = &v126[v99];
  uint64_t v101 = (char *)v125 + v99;
  int v102 = v12(&v126[v99], 1, v10);
  int v103 = v12(v101, 1, v10);
  if (v102)
  {
    if (!v103)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v100, v101, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v100, 0, 1, v10);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v103)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v100, v10);
LABEL_84:
    uint64_t v104 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v100, v101, v10);
LABEL_85:
  uint64_t v105 = v124[8];
  unint64_t v106 = &v126[v105];
  v107 = (void *)((char *)v125 + v105);
  *(void *)unint64_t v106 = *v107;
  *((void *)v106 + 1) = v107[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v108 = v124[9];
  v109 = &v126[v108];
  uint64_t v110 = (void *)((char *)v125 + v108);
  *(void *)v109 = *v110;
  *((void *)v109 + 1) = v110[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v126[v124[10]] = *((unsigned char *)v125 + v124[10]);
  uint64_t v111 = v124[11];
  uint64_t v112 = (uint64_t *)&v126[v111];
  v113 = (void *)((char *)v125 + v111);
  unint64_t v114 = *(void *)((char *)v125 + v111 + 8);
  if (*(void *)&v126[v111 + 8] >> 60 != 15)
  {
    if (v114 >> 60 != 15)
    {
      uint64_t v116 = *v113;
      sub_10025ADCC(*v113, v114);
      uint64_t v117 = *v112;
      unint64_t v118 = v112[1];
      *uint64_t v112 = v116;
      v112[1] = v114;
      sub_100250CC4(v117, v118);
      goto LABEL_92;
    }
    sub_10026F904((uint64_t)v112);
    goto LABEL_90;
  }
  if (v114 >> 60 == 15)
  {
LABEL_90:
    *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
    goto LABEL_92;
  }
  uint64_t v115 = *v113;
  sub_10025ADCC(*v113, v114);
  *uint64_t v112 = v115;
  v112[1] = v114;
LABEL_92:
  uint64_t v119 = v124[12];
  unint64_t v120 = *(void **)&v126[v119];
  unint64_t v121 = *(void **)((char *)v125 + v119);
  *(void *)&v126[v119] = v121;
  id v122 = v121;

  v126[v124[13]] = *((unsigned char *)v125 + v124[13]);
  return v126;
}

uint64_t *sub_10026F6D4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    id v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        id result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      CFTypeRef result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *id result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10026F904(uint64_t a1)
{
  return a1;
}

uint64_t sub_10026F958(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v73 = a3;
  uint64_t v74 = a2;
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  int v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v14 = v13[5];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  if (v11(&v8[v14], 1, v9))
  {
    uint64_t v17 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  uint64_t v18 = v13[6];
  uint64_t v19 = &v7[v18];
  int v20 = &v8[v18];
  if (v11(&v8[v18], 1, v9))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  uint64_t v22 = v13[7];
  uint64_t v23 = &v7[v22];
  unint64_t v24 = &v8[v22];
  if (v11(&v8[v22], 1, v9))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
  }
  uint64_t v26 = v13[8];
  int v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  if (v11(&v8[v26], 1, v9))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v28, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
  }
  uint64_t v30 = v13[9];
  uint64_t v31 = &v7[v30];
  int v32 = &v8[v30];
  if (v11(&v8[v30], 1, v9))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v32, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
  }
  uint64_t v34 = v13[10];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  if (v11(&v8[v34], 1, v9))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
  }
  uint64_t v38 = v13[11];
  int v39 = &v7[v38];
  uint64_t v40 = &v8[v38];
  if (v11(&v8[v38], 1, v9))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v39, v40, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
  }
  uint64_t v42 = v13[12];
  uint64_t v43 = &v7[v42];
  int v44 = &v8[v42];
  if (v11(&v8[v42], 1, v9))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v43, v44, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
  }
  v7[v13[13]] = v8[v13[13]];
  uint64_t v46 = v13[14];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  if (v11(&v8[v46], 1, v9))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
  }
  uint64_t v50 = v13[15];
  int v51 = &v7[v50];
  uint64_t v52 = &v8[v50];
  if (v11(&v8[v50], 1, v9))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v51, v52, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0, 1, v9);
  }
  uint64_t v54 = v13[16];
  uint64_t v55 = &v7[v54];
  int v56 = &v8[v54];
  if (v11(&v8[v54], 1, v9))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v55, v56, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
  }
  uint64_t v58 = v13[17];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  if (v11(&v8[v58], 1, v9))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
  }
  uint64_t v62 = v13[18];
  int v63 = &v7[v62];
  uint64_t v64 = &v8[v62];
  *(_DWORD *)int v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
  *(_OWORD *)&v7[v13[21]] = *(_OWORD *)&v8[v13[21]];
  uint64_t v65 = v73[7];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (const void *)(v74 + v65);
  if (v11((char *)(v74 + v65), 1, v9))
  {
    uint64_t v68 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v66, v67, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v66, 0, 1, v9);
  }
  uint64_t v69 = v73[9];
  *(_OWORD *)(a1 + v73[8]) = *(_OWORD *)(v74 + v73[8]);
  *(_OWORD *)(a1 + v69) = *(_OWORD *)(v74 + v69);
  uint64_t v70 = v73[11];
  *(unsigned char *)(a1 + v73[10]) = *(unsigned char *)(v74 + v73[10]);
  *(_OWORD *)(a1 + v70) = *(_OWORD *)(v74 + v70);
  uint64_t v71 = v73[13];
  *(void *)(a1 + v73[12]) = *(void *)(v74 + v73[12]);
  *(unsigned char *)(a1 + v71) = *(unsigned char *)(v74 + v71);
  return a1;
}

uint64_t sub_10027032C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v127 = *(void *)(v9 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 48);
  int v11 = v10(v7, 1, v9);
  int v12 = v10(v8, 1, v9);
  unint64_t v125 = a3;
  uint64_t v126 = a2;
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v15 = v14[5];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  int v18 = v10(&v7[v15], 1, v9);
  int v19 = v10(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v16, v17, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v16, v9);
LABEL_12:
    uint64_t v20 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v16, v17, v9);
LABEL_13:
  uint64_t v21 = v14[6];
  uint64_t v22 = &v7[v21];
  uint64_t v23 = &v8[v21];
  int v24 = v10(&v7[v21], 1, v9);
  int v25 = v10(v23, 1, v9);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v22, v23, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v22, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v22, v9);
LABEL_18:
    uint64_t v26 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v22, v23, v9);
LABEL_19:
  uint64_t v27 = v14[7];
  uint64_t v28 = &v7[v27];
  uint64_t v29 = &v8[v27];
  int v30 = v10(&v7[v27], 1, v9);
  int v31 = v10(v29, 1, v9);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v28, v29, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v28, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v28, v9);
LABEL_24:
    uint64_t v32 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v28, v29, v9);
LABEL_25:
  uint64_t v33 = v14[8];
  uint64_t v34 = &v7[v33];
  uint64_t v35 = &v8[v33];
  int v36 = v10(&v7[v33], 1, v9);
  int v37 = v10(v35, 1, v9);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v34, v35, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v34, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v34, v9);
LABEL_30:
    uint64_t v38 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v34, v35, v9);
LABEL_31:
  uint64_t v39 = v14[9];
  uint64_t v40 = &v7[v39];
  uint64_t v41 = &v8[v39];
  int v42 = v10(&v7[v39], 1, v9);
  int v43 = v10(v41, 1, v9);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v40, v41, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v40, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v40, v9);
LABEL_36:
    uint64_t v44 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v40, v41, v9);
LABEL_37:
  uint64_t v45 = v14[10];
  uint64_t v46 = &v7[v45];
  uint64_t v47 = &v8[v45];
  int v48 = v10(&v7[v45], 1, v9);
  int v49 = v10(v47, 1, v9);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v46, v47, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v46, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v46, v9);
LABEL_42:
    uint64_t v50 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v46, v47, v9);
LABEL_43:
  uint64_t v51 = v14[11];
  uint64_t v52 = &v7[v51];
  uint64_t v53 = &v8[v51];
  int v54 = v10(&v7[v51], 1, v9);
  int v55 = v10(v53, 1, v9);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v52, v53, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v52, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v52, v9);
LABEL_48:
    uint64_t v56 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v52, v53, v9);
LABEL_49:
  uint64_t v57 = v14[12];
  uint64_t v58 = &v7[v57];
  uint64_t v59 = &v8[v57];
  int v60 = v10(&v7[v57], 1, v9);
  int v61 = v10(v59, 1, v9);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v58, v59, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v58, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v58, v9);
LABEL_54:
    uint64_t v62 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v58, v59, v9);
LABEL_55:
  v7[v14[13]] = v8[v14[13]];
  uint64_t v63 = v14[14];
  uint64_t v64 = &v7[v63];
  uint64_t v65 = &v8[v63];
  int v66 = v10(&v7[v63], 1, v9);
  int v67 = v10(v65, 1, v9);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v64, v65, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v64, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v64, v9);
LABEL_60:
    uint64_t v68 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v64, v65, v9);
LABEL_61:
  uint64_t v69 = v14[15];
  uint64_t v70 = &v7[v69];
  uint64_t v71 = &v8[v69];
  int v72 = v10(&v7[v69], 1, v9);
  int v73 = v10(v71, 1, v9);
  if (v72)
  {
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v70, v71, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v70, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v70, v9);
LABEL_66:
    uint64_t v74 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v70, v71, v9);
LABEL_67:
  uint64_t v75 = v14[16];
  uint64_t v76 = &v7[v75];
  uint64_t v77 = &v8[v75];
  int v78 = v10(&v7[v75], 1, v9);
  int v79 = v10(v77, 1, v9);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v76, v77, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v76, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v76, v9);
LABEL_72:
    uint64_t v80 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v76, v77, v9);
LABEL_73:
  uint64_t v81 = v14[17];
  uint64_t v82 = &v7[v81];
  uint64_t v83 = &v8[v81];
  int v84 = v10(&v7[v81], 1, v9);
  int v85 = v10(v83, 1, v9);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v82, v83, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v82, 0, 1, v9);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v127 + 8))(v82, v9);
LABEL_78:
    uint64_t v86 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v82, v83, v9);
LABEL_79:
  uint64_t v87 = v14[18];
  uint64_t v88 = &v7[v87];
  uint64_t v89 = &v8[v87];
  *(_DWORD *)uint64_t v88 = *(_DWORD *)v89;
  v88[4] = v89[4];
  v7[v14[19]] = v8[v14[19]];
  uint64_t v90 = v14[20];
  uint64_t v91 = &v7[v90];
  int v92 = &v8[v90];
  uint64_t v94 = *(void *)v92;
  uint64_t v93 = *((void *)v92 + 1);
  *(void *)uint64_t v91 = v94;
  *((void *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
  uint64_t v95 = v14[21];
  uint64_t v96 = &v7[v95];
  uint64_t v97 = &v8[v95];
  uint64_t v99 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  *(void *)uint64_t v96 = v99;
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRelease();
  uint64_t v100 = v125[7];
  uint64_t v101 = (void *)(a1 + v100);
  int v102 = (char *)(v126 + v100);
  int v103 = v10((char *)(a1 + v100), 1, v9);
  int v104 = v10(v102, 1, v9);
  if (v103)
  {
    if (!v104)
    {
      (*(void (**)(void *, char *, uint64_t))(v127 + 32))(v101, v102, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v127 + 56))(v101, 0, 1, v9);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v104)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v101, v9);
LABEL_84:
    uint64_t v105 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(void *, char *, uint64_t))(v127 + 40))(v101, v102, v9);
LABEL_85:
  uint64_t v106 = v125[8];
  v107 = (void *)(a1 + v106);
  uint64_t v108 = (uint64_t *)(v126 + v106);
  uint64_t v110 = *v108;
  uint64_t v109 = v108[1];
  void *v107 = v110;
  v107[1] = v109;
  swift_bridgeObjectRelease();
  uint64_t v111 = v125[9];
  uint64_t v112 = (void *)(a1 + v111);
  v113 = (uint64_t *)(v126 + v111);
  uint64_t v115 = *v113;
  uint64_t v114 = v113[1];
  *uint64_t v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease();
  uint64_t v116 = v125[11];
  *(unsigned char *)(a1 + v125[10]) = *(unsigned char *)(v126 + v125[10]);
  uint64_t v117 = (uint64_t *)(a1 + v116);
  unint64_t v118 = (uint64_t *)(v126 + v116);
  unint64_t v119 = *(void *)(a1 + v116 + 8);
  if (v119 >> 60 != 15)
  {
    unint64_t v120 = v118[1];
    if (v120 >> 60 != 15)
    {
      uint64_t v121 = *v117;
      *uint64_t v117 = *v118;
      v117[1] = v120;
      sub_100250CC4(v121, v119);
      goto LABEL_90;
    }
    sub_10026F904((uint64_t)v117);
  }
  *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
LABEL_90:
  uint64_t v122 = v125[12];
  Swift::String v123 = *(void **)(a1 + v122);
  *(void *)(a1 + v122) = *(void *)(v126 + v122);

  *(unsigned char *)(a1 + v125[13]) = *(unsigned char *)(v126 + v125[13]);
  return a1;
}

uint64_t sub_100271354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100271368);
}

uint64_t sub_100271368(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      int v11 = (char *)a1 + *(int *)(a3 + 24);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000A844((uint64_t *)&unk_100975040);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100271498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002714AC);
}

void *sub_1002714AC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *id result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      int v11 = (char *)v5 + *(int *)(a4 + 24);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000A844((uint64_t *)&unk_100975040);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t _s15MacApprovePhoneV18InitialLockContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096BC10);
}

void sub_1002715FC()
{
  type metadata accessor for SDAuthenticationSessionMetrics();
  if (v0 <= 0x3F)
  {
    sub_100271710();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100271710()
{
  if (!qword_100973960)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100973960);
    }
  }
}

uint64_t sub_100271768(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    long long v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v4 + 40, (uint64_t)(a2 + 5));
    uint64_t v9 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput();
    uint64_t v10 = v9[6];
    uint64_t v11 = v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    *(void *)(v4 + v9[7]) = *(uint64_t *)((char *)a2 + v9[7]);
    *(unsigned char *)(v4 + v9[8]) = *((unsigned char *)a2 + v9[8]);
    uint64_t v14 = v9[9];
    uint64_t v15 = v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    uint64_t v17 = *(uint64_t *)((char *)a2 + v14 + 24);
    if (v17)
    {
      uint64_t v18 = *(void *)(v16 + 32);
      *(void *)(v15 + 24) = v17;
      *(void *)(v15 + 32) = v18;
      (**(void (***)(void))(v17 - 8))();
    }
    else
    {
      long long v20 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *(_OWORD *)(v15 + 16) = v20;
      *(void *)(v15 + 32) = *(void *)(v16 + 32);
    }
    uint64_t v21 = a3[5];
    long long v22 = *(_OWORD *)((char *)a2 + v21 + 24);
    *(_OWORD *)(v4 + v21 + 24) = v22;
    (**(void (***)(void))(v22 - 8))();
    uint64_t v23 = a3[7];
    *(void *)(v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(void *)(v4 + v23) = *(uint64_t *)((char *)a2 + v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1002719A4(uint64_t a1, uint64_t a2)
{
  sub_10024D338(a1);
  sub_10024D338(a1 + 40);
  uint64_t v4 = type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(v4 + 36);
  if (*(void *)(v7 + 24)) {
    sub_10024D338(v7);
  }
  sub_10024D338(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100271A6C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  long long v8 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v9 = v8[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  *(unsigned char *)(a1 + v8[8]) = *(unsigned char *)(a2 + v8[8]);
  uint64_t v13 = v8[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 24);
  if (v16)
  {
    uint64_t v17 = *(void *)(v15 + 32);
    *(void *)(v14 + 24) = v16;
    *(void *)(v14 + 32) = v17;
    (**(void (***)(void))(v16 - 8))();
  }
  else
  {
    long long v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v18;
    *(void *)(v14 + 32) = *(void *)(v15 + 32);
  }
  uint64_t v19 = a3[5];
  long long v20 = *(_OWORD *)(a2 + v19 + 24);
  *(_OWORD *)(a1 + v19 + 24) = v20;
  (**(void (***)(void))(v20 - 8))();
  uint64_t v21 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100271C50(uint64_t *a1, uint64_t *a2, int *a3)
{
  sub_10026F6D4(a1, a2);
  sub_10026F6D4(a1 + 5, a2 + 5);
  long long v6 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v7 = v6[6];
  long long v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(uint64_t *)((char *)a1 + v6[7]) = *(uint64_t *)((char *)a2 + v6[7]);
  *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  uint64_t v11 = v6[9];
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(uint64_t *)((char *)a2 + v11 + 24);
  if (!*(uint64_t *)((char *)a1 + v11 + 24))
  {
    if (v14)
    {
      *(void *)(v12 + 24) = v14;
      *(void *)(v12 + 32) = *((void *)v13 + 4);
      (**(void (***)(uint64_t, char *))(v14 - 8))(v12, v13);
      goto LABEL_8;
    }
LABEL_7:
    long long v15 = *(_OWORD *)v13;
    long long v16 = *((_OWORD *)v13 + 1);
    *(void *)(v12 + 32) = *((void *)v13 + 4);
    *(_OWORD *)uint64_t v12 = v15;
    *(_OWORD *)(v12 + 16) = v16;
    goto LABEL_8;
  }
  if (!v14)
  {
    sub_10024D338(v12);
    goto LABEL_7;
  }
  sub_10026F6D4((uint64_t *)v12, (uint64_t *)v13);
LABEL_8:
  sub_10026F6D4((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]));
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100271DD8(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  uint64_t v12 = v7[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  uint64_t v16 = a3[5];
  uint64_t v17 = a3[6];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  long long v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(void *)(v18 + 32) = *(void *)(v19 + 32);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100271EF4(uint64_t a1, uint64_t a2, int *a3)
{
  sub_10024D338(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_10024D338(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  uint64_t v12 = v7[9];
  uint64_t v13 = a1 + v12;
  if (*(void *)(a1 + v12 + 24)) {
    sub_10024D338(a1 + v12);
  }
  long long v14 = *(_OWORD *)(a2 + v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)(a2 + v12);
  *(_OWORD *)(v13 + 16) = v14;
  *(void *)(v13 + 32) = *(void *)(a2 + v12 + 32);
  uint64_t v15 = a3[5];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  sub_10024D338(a1 + v15);
  long long v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100272048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027205C);
}

uint64_t sub_10027205C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100272120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100272134);
}

uint64_t sub_100272134(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t _s15MacApprovePhoneV4FlowVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096BCC0);
}

uint64_t sub_100272214()
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1002722B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    uint64_t v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v14 = v13[5];
    uint64_t v15 = &v7[v14];
    uint64_t v16 = &v8[v14];
    if (v11(&v8[v14], 1, v9))
    {
      uint64_t v17 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v16, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    }
    uint64_t v18 = v13[6];
    uint64_t v19 = &v7[v18];
    long long v20 = &v8[v18];
    if (v11(&v8[v18], 1, v9))
    {
      uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v20, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
    }
    uint64_t v22 = v13[7];
    uint64_t v23 = &v7[v22];
    int v24 = &v8[v22];
    if (v11(&v8[v22], 1, v9))
    {
      uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
    }
    uint64_t v26 = v13[8];
    uint64_t v27 = &v7[v26];
    uint64_t v28 = &v8[v26];
    if (v11(&v8[v26], 1, v9))
    {
      uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, v28, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
    }
    uint64_t v30 = v13[9];
    int v31 = &v7[v30];
    uint64_t v32 = &v8[v30];
    if (v11(&v8[v30], 1, v9))
    {
      uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v32, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
    }
    uint64_t v34 = v13[10];
    uint64_t v35 = &v7[v34];
    int v36 = &v8[v34];
    if (v11(&v8[v34], 1, v9))
    {
      uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
    }
    uint64_t v38 = v13[11];
    uint64_t v39 = &v7[v38];
    uint64_t v40 = &v8[v38];
    if (v11(&v8[v38], 1, v9))
    {
      uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v39, v40, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
    }
    uint64_t v42 = v13[12];
    int v43 = &v7[v42];
    uint64_t v44 = &v8[v42];
    if (v11(&v8[v42], 1, v9))
    {
      uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v44, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
    }
    v7[v13[13]] = v8[v13[13]];
    uint64_t v46 = v13[14];
    uint64_t v47 = &v7[v46];
    int v48 = &v8[v46];
    if (v11(&v8[v46], 1, v9))
    {
      uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
    }
    uint64_t v50 = v13[15];
    uint64_t v51 = &v7[v50];
    uint64_t v52 = &v8[v50];
    if (v11(&v8[v50], 1, v9))
    {
      uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v51, v52, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0, 1, v9);
    }
    uint64_t v54 = v13[16];
    int v55 = &v7[v54];
    uint64_t v56 = &v8[v54];
    if (v11(&v8[v54], 1, v9))
    {
      uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v55, v56, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
    }
    uint64_t v58 = v13[17];
    uint64_t v59 = &v7[v58];
    int v60 = &v8[v58];
    if (v11(&v8[v58], 1, v9))
    {
      uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
    }
    uint64_t v62 = v13[18];
    uint64_t v63 = &v7[v62];
    uint64_t v64 = &v8[v62];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    v7[v13[19]] = v8[v13[19]];
    uint64_t v65 = v13[20];
    int v66 = &v7[v65];
    int v67 = &v8[v65];
    uint64_t v68 = *((void *)v67 + 1);
    *(void *)int v66 = *(void *)v67;
    *((void *)v66 + 1) = v68;
    uint64_t v69 = v13[21];
    uint64_t v70 = &v7[v69];
    uint64_t v71 = &v8[v69];
    uint64_t v72 = *((void *)v71 + 1);
    *(void *)uint64_t v70 = *(void *)v71;
    *((void *)v70 + 1) = v72;
    uint64_t v73 = *(int *)(a3 + 24);
    uint64_t v74 = (char *)v5 + v73;
    uint64_t v75 = (char *)a2 + v73;
    long long v76 = *(_OWORD *)((char *)a2 + v73 + 24);
    *(_OWORD *)((char *)v5 + v73 + 24) = v76;
    uint64_t v77 = v76;
    int v78 = **(void (***)(char *, char *, uint64_t))(v76 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v78(v74, v75, v77);
  }
  return v5;
}

uint64_t sub_100272C78(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v9 = v4 + v8[5];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = v4 + v8[6];
  if (!v7(v10, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = v4 + v8[7];
  if (!v7(v11, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = v4 + v8[8];
  if (!v7(v12, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = v4 + v8[9];
  if (!v7(v13, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v13, v5);
  }
  uint64_t v14 = v4 + v8[10];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = v4 + v8[11];
  if (!v7(v15, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v16 = v4 + v8[12];
  if (!v7(v16, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = v4 + v8[14];
  if (!v7(v17, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = v4 + v8[15];
  if (!v7(v18, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = v4 + v8[16];
  if (!v7(v19, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = v4 + v8[17];
  if (!v7(v20, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = a1 + *(int *)(a2 + 24);

  return sub_10024D338(v21);
}

void *sub_100273084(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v5[v12];
  uint64_t v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  uint64_t v25 = &v5[v24];
  uint64_t v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  uint64_t v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  uint64_t v37 = &v5[v36];
  uint64_t v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  uint64_t v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  uint64_t v49 = &v5[v48];
  uint64_t v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  uint64_t v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  uint64_t v61 = &v5[v60];
  uint64_t v62 = &v6[v60];
  *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  uint64_t v63 = v11[20];
  uint64_t v64 = &v5[v63];
  uint64_t v65 = &v6[v63];
  uint64_t v66 = *((void *)v65 + 1);
  *(void *)uint64_t v64 = *(void *)v65;
  *((void *)v64 + 1) = v66;
  uint64_t v67 = v11[21];
  uint64_t v68 = &v5[v67];
  uint64_t v69 = &v6[v67];
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)uint64_t v68 = *(void *)v69;
  *((void *)v68 + 1) = v70;
  uint64_t v71 = *(int *)(a3 + 24);
  uint64_t v72 = (char *)a1 + v71;
  uint64_t v73 = (char *)a2 + v71;
  long long v74 = *(_OWORD *)((char *)a2 + v71 + 24);
  *(_OWORD *)((char *)a1 + v71 + 24) = v74;
  uint64_t v75 = v74;
  long long v76 = **(void (***)(char *, char *, uint64_t))(v74 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76(v72, v73, v75);
  return a1;
}

void *sub_1002739E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v99 = a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v100 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  int v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  int v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (!v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v83, v84, v9);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
    goto LABEL_78;
  }
  if (v86)
  {
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v83, v84, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  uint64_t v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  int v91 = *(_DWORD *)v90;
  v89[4] = v90[4];
  *(_DWORD *)uint64_t v89 = v91;
  v7[v15[19]] = v8[v15[19]];
  uint64_t v92 = v15[20];
  uint64_t v93 = &v7[v92];
  uint64_t v94 = &v8[v92];
  *(void *)uint64_t v93 = *(void *)v94;
  *((void *)v93 + 1) = *((void *)v94 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v95 = v15[21];
  uint64_t v96 = &v7[v95];
  uint64_t v97 = &v8[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  *((void *)v96 + 1) = *((void *)v97 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4((void *)((char *)v100 + *(int *)(a3 + 24)), (void *)((char *)v99 + *(int *)(a3 + 24)));
  return v100;
}

void *sub_10027480C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  int v13 = &v5[v12];
  uint64_t v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  int v25 = &v5[v24];
  int v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  uint64_t v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  int v37 = &v5[v36];
  int v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  uint64_t v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  int v49 = &v5[v48];
  int v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  uint64_t v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  int v61 = &v5[v60];
  int v62 = &v6[v60];
  *(_DWORD *)int v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  *(_OWORD *)&v5[v11[20]] = *(_OWORD *)&v6[v11[20]];
  *(_OWORD *)&v5[v11[21]] = *(_OWORD *)&v6[v11[21]];
  uint64_t v63 = *(int *)(a3 + 24);
  uint64_t v64 = (char *)a1 + v63;
  uint64_t v65 = (char *)a2 + v63;
  long long v66 = *((_OWORD *)v65 + 1);
  *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
  *((_OWORD *)v64 + 1) = v66;
  *((void *)v64 + 4) = *((void *)v65 + 4);
  return a1;
}

void *sub_100275104(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v106 = a2;
  uint64_t v6 = *(int *)(a3 + 20);
  v107 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  long long v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  int v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  int v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (!v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v83, v84, v9);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
    goto LABEL_78;
  }
  if (v86)
  {
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v83, v84, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  uint64_t v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
  v89[4] = v90[4];
  v7[v15[19]] = v8[v15[19]];
  uint64_t v91 = v15[20];
  uint64_t v92 = &v7[v91];
  uint64_t v93 = &v8[v91];
  uint64_t v95 = *(void *)v93;
  uint64_t v94 = *((void *)v93 + 1);
  *(void *)uint64_t v92 = v95;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = v15[21];
  uint64_t v97 = &v7[v96];
  uint64_t v98 = &v8[v96];
  uint64_t v100 = *(void *)v98;
  uint64_t v99 = *((void *)v98 + 1);
  *(void *)uint64_t v97 = v100;
  *((void *)v97 + 1) = v99;
  swift_bridgeObjectRelease();
  uint64_t v101 = *(int *)(a3 + 24);
  int v102 = (char *)v107 + v101;
  int v103 = (char *)v106 + v101;
  sub_10024D338((uint64_t)v107 + v101);
  long long v104 = *((_OWORD *)v103 + 1);
  *(_OWORD *)int v102 = *(_OWORD *)v103;
  *((_OWORD *)v102 + 1) = v104;
  *((void *)v102 + 4) = *((void *)v103 + 4);
  return v107;
}

uint64_t sub_100275F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100275F2C);
}

uint64_t sub_100275F2C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100275FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100275FF0);
}

void *sub_100275FF0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t _s15MacApprovePhoneV17InitialKeyContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096BD58);
}

uint64_t sub_1002760B8()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10027615C(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 44);
  uint64_t v3 = *(void *)v2;
  sub_100278C78(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t (*sub_10027619C())()
{
  return LongHash.storage.getter;
}

uint64_t sub_1002761C0(uint64_t a1, uint64_t a2)
{
  return sub_100276C34(a1, a2, (uint64_t (*)(void))sub_10026CB7C);
}

uint64_t sub_1002761EC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t sub_1002761F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100278C8C(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_10027621C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100278BB0(v2 + *(int *)(a1 + 20), a2, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t (*sub_100276254())()
{
  return LongHash.storage.getter;
}

uint64_t sub_100276278()
{
  return swift_bridgeObjectRetain();
}

id sub_100276280@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  sub_10000A844(&qword_10096BBB0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100770AD0;
  if (qword_100969AF8 != -1) {
    swift_once();
  }
  *(void *)(v6 + 56) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v6 + 64) = &off_100971848;
  *(void *)(v6 + 96) = &type metadata for SDAuthentication.Operation.RequestUserApproval;
  *(void *)(v6 + 104) = &off_100971B88;
  *(void *)(a3 + 8) = v6;
  if ([a1 hasBundleID]
    && [a1 hasAppName]
    && [a1 hasBiometricOnly])
  {
    uint64_t v7 = _s15MacApprovePhoneV17InitialKeyContextVMa(0);
    sub_100278C8C(a2 + *(int *)(v7 + 24), a3 + 16);
    uint64_t v8 = a2 + *(int *)(v7 + 20);
    uint64_t v9 = (int *)_s15MacApprovePhoneV26HandleApprovePromptContextVMa(0);
    sub_100278BB0(v8, a3 + v9[7], (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    id result = [a1 bundleID];
    if (result)
    {
      uint64_t v11 = result;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      uint64_t v15 = (uint64_t *)(a3 + v9[8]);
      *uint64_t v15 = v12;
      v15[1] = v14;
      id result = [a1 appName];
      if (result)
      {
        uint64_t v16 = result;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        int v20 = (uint64_t *)(a3 + v9[9]);
        *int v20 = v17;
        v20[1] = v19;
        LOBYTE(v16) = [a1 biometricOnly];

        id result = (id)sub_100278C18(a2, _s15MacApprovePhoneV17InitialKeyContextVMa);
        *(unsigned char *)(a3 + v9[10]) = (_BYTE)v16;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    _StringGuts.grow(_:)(55);
    v21._object = (void *)0x80000001007B71F0;
    v21._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v21);
    id v22 = [a1 description];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v25 = v24;

    v26._countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v27 = 1;
    *(void *)(v27 + 8) = 0;
    *(void *)(v27 + 16) = 0xE000000000000000;
    swift_willThrow();

    sub_100278C18(a2, _s15MacApprovePhoneV17InitialKeyContextVMa);
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100276588@<X0>(uint64_t a1@<X8>)
{
  return sub_100278C8C(v1 + 16, a1);
}

uint64_t sub_1002765A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100278BB0(v2 + *(int *)(a1 + 28), a2, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t (*sub_1002765E0())()
{
  return LongHash.storage.getter;
}

uint64_t sub_100276604()
{
  return swift_bridgeObjectRetain();
}

void sub_10027660C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096BBB0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100770AD0;
  if (qword_100969AF8 != -1) {
    swift_once();
  }
  *(void *)(v11 + 56) = &type metadata for SDAuthentication.Operation.UseApprovalACMTokenForIncludingFirstAKSTokenInMessage;
  *(void *)(v11 + 64) = &off_100971B68;
  *(void *)(v11 + 96) = &type metadata for SDAuthentication.Operation.SendRequestMessage;
  *(void *)(v11 + 104) = &off_1009717C8;
  *a4 = v11;
  *((_OWORD *)a4 + 3) = xmmword_100770AE0;
  uint64_t v12 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0);
  uint64_t v13 = *(int *)(v12 + 32);
  *(uint64_t *)((char *)a4 + v13) = 0;
  *((unsigned char *)a4 + *(int *)(v12 + 36)) = 0;
  if (a2 >> 60 == 15)
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = 30;
    *(void *)(v14 + 8) = 0xD00000000000001CLL;
    *(void *)(v14 + 16) = 0x80000001007B7230;
    swift_willThrow();
    sub_100278C18(a3, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
    swift_bridgeObjectRelease();
    sub_100250CB0(a4[6], a4[7]);
  }
  else
  {
    uint64_t v15 = v12;
    sub_100278C8C(a3 + 16, (uint64_t)(a4 + 1));
    a4[6] = a1;
    a4[7] = a2;
    uint64_t v16 = _s15MacApprovePhoneV26HandleApprovePromptContextVMa(0);
    sub_100278BB0(a3 + *(int *)(v16 + 28), (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    sub_100278C18(a3, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
    sub_100278B48((uint64_t)v10, (uint64_t)a4 + *(int *)(v15 + 28), (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
  }
}

uint64_t sub_100276858()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100278C78(v1, *(void *)(v0 + 56));
  return v1;
}

id sub_10027688C()
{
  return sub_100276D04(_s15MacApprovePhoneV24HandleUserApprovalResultVMa, (Class *)off_1008C6918);
}

uint64_t sub_1002768C0(uint64_t a1, uint64_t a2)
{
  return sub_100277350(a1, a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa, (Class *)off_1008C6918);
}

id sub_1002768F4()
{
  uint64_t v1 = *(int *)(_s15MacApprovePhoneV20HandleRequestContextVMa(0) + 36);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }
  id result = [objc_allocWithZone((Class)SDAuthenticationResponse) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_100276964(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100770AD0;
  if (qword_100969AF8 != -1) {
    swift_once();
  }
  *(void *)(v6 + 56) = &type metadata for SDAuthentication.Operation.UseApproveTokenForIncludingFirstAKSTokenInMessage;
  *(void *)(v6 + 64) = &off_100971B48;
  *(void *)(v6 + 96) = &type metadata for SDAuthentication.Operation.SendResponseMessage;
  *(void *)(v6 + 104) = &off_100971C48;
  *a3 = v6;
  uint64_t v7 = (int *)_s15MacApprovePhoneV20HandleRequestContextVMa(0);
  uint64_t v8 = (char *)a3 + v7[7];
  *(_OWORD *)uint64_t v8 = xmmword_100770AE0;
  uint64_t v9 = v7[9];
  *(uint64_t *)((char *)a3 + v9) = 0;
  *((unsigned char *)a3 + v7[10]) = 1;
  if ([a1 hasAksToken])
  {
    sub_100278C8C(a2 + 8, (uint64_t)(a3 + 1));
    uint64_t v10 = _s15MacApprovePhoneV18InitialLockContextVMa(0);
    sub_100278BB0(a2 + *(int *)(v10 + 24), (uint64_t)a3 + v7[6], (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    uint64_t v11 = (uint64_t *)(a2 + *(int *)(v10 + 44));
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    *(void *)uint64_t v8 = *v11;
    *((void *)v8 + 1) = v13;
    sub_100278C78(v12, v13);
    id v14 = [a1 aksToken];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      sub_100278C18(a2, _s15MacApprovePhoneV18InitialLockContextVMa);
      uint64_t v19 = (uint64_t *)((char *)a3 + v7[8]);
      *uint64_t v19 = v16;
      v19[1] = v18;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = 0xD000000000000028;
    *(void *)(v20 + 16) = 0x80000001007B7250;
    swift_willThrow();

    sub_100278C18(a2, _s15MacApprovePhoneV18InitialLockContextVMa);
    swift_bridgeObjectRelease();
    sub_100250CB0(*(void *)v8, *((void *)v8 + 1));
  }
}

uint64_t sub_100276BB0(uint64_t a1, uint64_t a2)
{
  return sub_100277250(a1, a2, (void (*)(void, void))sub_100278C78);
}

uint64_t sub_100276BC8(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 32);
  uint64_t v3 = *(void *)v2;
  sub_10025ADCC(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_100276C08(uint64_t a1, uint64_t a2)
{
  return sub_100276C34(a1, a2, (uint64_t (*)(void))sub_1002768F4);
}

uint64_t sub_100276C34(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = (void *)a3();
  id v4 = [v3 data];

  if (v4)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return v5;
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 10;
    *(void *)(v7 + 8) = 0xD00000000000001ALL;
    *(void *)(v7 + 16) = 0x80000001007B72F0;
    return swift_willThrow();
  }
}

uint64_t sub_100276CF8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

id sub_100276D04(uint64_t (*a1)(void), Class *a2)
{
  uint64_t v4 = *(int *)(a1(0) + 32);
  uint64_t v5 = *(void **)(v2 + v4);
  if (v5)
  {
    id v6 = *(id *)(v2 + v4);
LABEL_5:
    id v8 = v5;
    return v6;
  }
  id result = [objc_allocWithZone(*a2) init];
  if (result)
  {
    *(void *)(v2 + v4) = result;
    id v6 = result;
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_100276D84(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100770AD0;
  if (qword_100969AF8 != -1) {
    swift_once();
  }
  *(void *)(v6 + 56) = &type metadata for SDAuthentication.Operation.IncludeNextAKSTokenInMessage;
  *(void *)(v6 + 64) = &off_100971B28;
  *(void *)(v6 + 96) = &type metadata for SDAuthentication.Operation.SendTokenMessage;
  *(void *)(v6 + 104) = &off_100971C08;
  *a3 = v6;
  uint64_t v7 = (int *)_s15MacApprovePhoneV21HandleResponseContextVMa(0);
  uint64_t v8 = v7[8];
  *(uint64_t *)((char *)a3 + v8) = 0;
  *((unsigned char *)a3 + v7[9]) = 7;
  if ([a1 hasAksToken])
  {
    sub_100278C8C(a2 + 8, (uint64_t)(a3 + 1));
    uint64_t v9 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0);
    sub_100278BB0(a2 + *(int *)(v9 + 28), (uint64_t)a3 + v7[6], (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    id v10 = [a1 aksToken];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      sub_100278C18(a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
      uint64_t v15 = (uint64_t *)((char *)a3 + v7[7]);
      *uint64_t v15 = v12;
      v15[1] = v14;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 1;
    *(void *)(v16 + 8) = 0xD000000000000029;
    *(void *)(v16 + 16) = 0x80000001007B7280;
    swift_willThrow();

    sub_100278C18(a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100276FA0(uint64_t a1, uint64_t a2)
{
  return sub_100277250(a1, a2, (void (*)(void, void))sub_10025ADCC);
}

id sub_100276FB8()
{
  return sub_100276D04(_s15MacApprovePhoneV21HandleResponseContextVMa, (Class *)off_1008C6928);
}

uint64_t sub_100276FEC(uint64_t a1, uint64_t a2)
{
  return sub_100277350(a1, a2, _s15MacApprovePhoneV21HandleResponseContextVMa, (Class *)off_1008C6928);
}

void sub_100277020(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1007709D0;
  if (qword_100969AF8 != -1) {
    swift_once();
  }
  *(void *)(v6 + 56) = &type metadata for SDAuthentication.Operation.ConsumeAKSToken;
  *(void *)(v6 + 64) = &off_100971B08;
  *(void *)(v6 + 96) = &type metadata for SDAuthentication.Operation.SendConfirmation;
  *(void *)(v6 + 104) = &off_100971EC8;
  *(void *)(v6 + 136) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(void *)(v6 + 144) = &off_100971BC8;
  *a3 = v6;
  uint64_t v7 = (int *)_s15MacApprovePhoneV18HandleTokenContextVMa(0);
  uint64_t v8 = v7[8];
  *(uint64_t *)((char *)a3 + v8) = 0;
  *((unsigned char *)a3 + v7[9]) = 2;
  if ([a1 hasAksToken])
  {
    sub_100278C8C(a2 + 8, (uint64_t)(a3 + 1));
    uint64_t v9 = _s15MacApprovePhoneV20HandleRequestContextVMa(0);
    sub_100278BB0(a2 + *(int *)(v9 + 24), (uint64_t)a3 + v7[6], (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    id v10 = [a1 aksToken];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      sub_100278C18(a2, _s15MacApprovePhoneV20HandleRequestContextVMa);
      uint64_t v15 = (uint64_t *)((char *)a3 + v7[7]);
      *uint64_t v15 = v12;
      v15[1] = v14;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 1;
    *(void *)(v16 + 8) = 0xD000000000000019;
    *(void *)(v16 + 16) = 0x80000001007B72B0;
    swift_willThrow();

    sub_100278C18(a2, _s15MacApprovePhoneV20HandleRequestContextVMa);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100277250(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  uint64_t v4 = (void *)(v3 + *(int *)(a1 + 28));
  uint64_t v5 = *v4;
  a3(*v4, v4[1]);
  return v5;
}

id sub_100277290()
{
  return sub_100276D04(_s15MacApprovePhoneV18HandleTokenContextVMa, (Class *)off_1008C68E0);
}

uint64_t sub_1002772C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100278C8C(v1 + 8, a1);
}

uint64_t sub_1002772E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100278BB0(v2 + *(int *)(a1 + 24), a2, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t sub_10027731C(uint64_t a1, uint64_t a2)
{
  return sub_100277350(a1, a2, _s15MacApprovePhoneV18HandleTokenContextVMa, (Class *)off_1008C68E0);
}

uint64_t sub_100277350(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), Class *a4)
{
  id v4 = sub_100276D04(a3, a4);
  id v5 = [v4 data];

  if (v5)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return v6;
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 10;
    *(void *)(v8 + 8) = 0xD00000000000001ALL;
    *(void *)(v8 + 16) = 0x80000001007B72F0;
    return swift_willThrow();
  }
}

uint64_t sub_100277418(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_100277424@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100770AD0;
  if (qword_100969AF8 != -1) {
    swift_once();
  }
  *(void *)(v6 + 56) = &type metadata for SDAuthentication.Operation.HandleSucceededResult;
  *(void *)(v6 + 64) = &off_100971EA8;
  *(void *)(v6 + 96) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(void *)(v6 + 104) = &off_100971BC8;
  *a3 = v6;
  if ([a1 hasSuccess])
  {
    sub_100278C8C(a2 + 8, (uint64_t)(a3 + 1));
    uint64_t v7 = a2 + *(int *)(_s15MacApprovePhoneV21HandleResponseContextVMa(0) + 24);
    uint64_t v8 = _s15MacApprovePhoneV25HandleConfirmationContextVMa(0);
    sub_100278BB0(v7, (uint64_t)a3 + *(int *)(v8 + 24), (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    LOBYTE(v7) = [a1 success];

    uint64_t result = sub_100278C18(a2, _s15MacApprovePhoneV21HandleResponseContextVMa);
    *((unsigned char *)a3 + *(int *)(v8 + 28)) = v7;
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 1;
    *(void *)(v10 + 8) = 0xD000000000000016;
    *(void *)(v10 + 16) = 0x80000001007B72D0;
    swift_willThrow();

    sub_100278C18(a2, _s15MacApprovePhoneV21HandleResponseContextVMa);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002775FC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

void sub_100277608(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v158 = a2;
  uint64_t v151 = a3;
  uint64_t v122 = _s15MacApprovePhoneV25HandleConfirmationContextVMa(0);
  __chkstk_darwin(v122);
  uint64_t v126 = (uint64_t *)((char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000A844(&qword_10096BD98);
  __chkstk_darwin(v5 - 8);
  unint64_t v131 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = _s15MacApprovePhoneV18HandleTokenContextVMa(0);
  __chkstk_darwin(v123);
  uint64_t v130 = (uint64_t *)((char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000A844(&qword_10096BDA0);
  __chkstk_darwin(v8 - 8);
  uint64_t v137 = (char *)&v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = _s15MacApprovePhoneV21HandleResponseContextVMa(0);
  uint64_t v129 = *(void *)(v132 - 8);
  uint64_t v10 = __chkstk_darwin(v132);
  uint64_t v124 = (uint64_t)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v125 = (uint64_t)&v122 - v13;
  __chkstk_darwin(v12);
  unint64_t v136 = (uint64_t *)((char *)&v122 - v14);
  uint64_t v15 = sub_10000A844(&qword_10096BDA8);
  __chkstk_darwin(v15 - 8);
  unint64_t v143 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = _s15MacApprovePhoneV20HandleRequestContextVMa(0);
  uint64_t v135 = *(void *)(v138 - 8);
  uint64_t v17 = __chkstk_darwin(v138);
  uint64_t v127 = (uint64_t)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v128 = (uint64_t)&v122 - v20;
  __chkstk_darwin(v19);
  v142 = (uint64_t *)((char *)&v122 - v21);
  uint64_t v22 = sub_10000A844(&qword_10096BDB0);
  __chkstk_darwin(v22 - 8);
  os_log_type_t v150 = (char *)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = _s15MacApprovePhoneV18InitialLockContextVMa(0);
  uint64_t v148 = *(void *)(v24 - 8);
  uint64_t v149 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v140 = (uint64_t)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v141 = (uint64_t)&v122 - v27;
  uint64_t v144 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0);
  uint64_t v139 = *(void *)(v144 - 8);
  uint64_t v28 = __chkstk_darwin(v144);
  uint64_t v133 = (uint64_t)&v122 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v134 = (uint64_t)&v122 - v31;
  __chkstk_darwin(v30);
  unint64_t v147 = (uint64_t *)((char *)&v122 - v32);
  uint64_t v33 = sub_10000A844(&qword_10096BDB8);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (char *)&v122 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = _s15MacApprovePhoneV26HandleApprovePromptContextVMa(0);
  uint64_t v152 = *(void *)(v36 - 8);
  uint64_t v153 = v36;
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v145 = (uint64_t)&v122 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v146 = (uint64_t)&v122 - v40;
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v122 - v41;
  uint64_t v43 = sub_10000A844(&qword_10096BDC0);
  __chkstk_darwin(v43 - 8);
  uint64_t v45 = (char *)&v122 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = _s15MacApprovePhoneV17InitialKeyContextVMa(0);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = __chkstk_darwin(v46);
  int v50 = (char *)&v122 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v122 - v51;
  sub_100278C8C(a1, (uint64_t)v157);
  sub_10000A844(&qword_100977940);
  sub_10000B740(0, &qword_10096BDC8);
  if (swift_dynamicCast())
  {
    uint64_t v53 = v155;
    sub_100278C8C(v158, (uint64_t)v157);
    sub_10000A844(&qword_10096BDF0);
    int v54 = swift_dynamicCast();
    int v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
    if (!v54)
    {
      v55(v45, 1, 1, v46);
      sub_10000A7E8((uint64_t)v45, &qword_10096BDC0);
      sub_10024D280();
      swift_allocError();
      *(_DWORD *)uint64_t v70 = 10;
      *(void *)(v70 + 8) = 0xD000000000000046;
      *(void *)(v70 + 16) = 0x80000001007B71A0;
      swift_willThrow();

      return;
    }
    v55(v45, 0, 1, v46);
    sub_100278B48((uint64_t)v45, (uint64_t)v52, _s15MacApprovePhoneV17InitialKeyContextVMa);
    sub_100278BB0((uint64_t)v52, (uint64_t)v50, _s15MacApprovePhoneV17InitialKeyContextVMa);
    id v56 = v53;
    uint64_t v57 = v154;
    sub_100276280(v56, (uint64_t)v50, (uint64_t)v42);
    if (v57)
    {
      uint64_t v58 = _s15MacApprovePhoneV17InitialKeyContextVMa;
      uint64_t v59 = (uint64_t)v52;
LABEL_33:
      sub_100278C18(v59, v58);

      return;
    }
    uint64_t v89 = v151;
    v151[3] = v153;
    v89[4] = (uint64_t)&off_1008D4AB0;
    uint64_t v90 = sub_100278AE4(v89);
    sub_100278B48((uint64_t)v42, (uint64_t)v90, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);

    uint64_t v91 = _s15MacApprovePhoneV17InitialKeyContextVMa;
    uint64_t v92 = (uint64_t)v52;
    goto LABEL_43;
  }
  uint64_t v60 = v158;
  sub_100278C8C(a1, (uint64_t)v157);
  if (!swift_dynamicCast())
  {
    sub_100278C8C(a1, (uint64_t)v157);
    sub_10000B740(0, &qword_10096BDD0);
    if (swift_dynamicCast())
    {
      uint64_t v71 = v155;
      sub_100278C8C(v60, (uint64_t)v157);
      sub_10000A844(&qword_10096BDF0);
      uint64_t v73 = v149;
      uint64_t v72 = (uint64_t)v150;
      int v74 = swift_dynamicCast();
      uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 56);
      if (v74)
      {
        v75(v72, 0, 1, v73);
        uint64_t v76 = v141;
        sub_100278B48(v72, v141, _s15MacApprovePhoneV18InitialLockContextVMa);
        uint64_t v77 = v140;
        sub_100278BB0(v76, v140, _s15MacApprovePhoneV18InitialLockContextVMa);
        id v56 = v71;
        int v78 = v142;
        uint64_t v79 = v154;
        sub_100276964(v56, v77, v142);
        if (v79)
        {
          int v80 = _s15MacApprovePhoneV18InitialLockContextVMa;
LABEL_32:
          uint64_t v58 = v80;
          uint64_t v59 = v76;
          goto LABEL_33;
        }
        uint64_t v112 = v151;
        v151[3] = v138;
        v112[4] = (uint64_t)&off_1008D4AE0;
        v113 = sub_100278AE4(v112);
        sub_100278B48((uint64_t)v78, (uint64_t)v113, _s15MacApprovePhoneV20HandleRequestContextVMa);

        uint64_t v114 = _s15MacApprovePhoneV18InitialLockContextVMa;
        goto LABEL_42;
      }
      v75(v72, 1, 1, v73);
      sub_10000A7E8(v72, &qword_10096BDB0);
      sub_10024D280();
      swift_allocError();
      *(_DWORD *)uint64_t v93 = 10;
      unint64_t v94 = 0xD000000000000047;
      uint64_t v95 = "Invalid previous context as InitialLockContext, message may be replayed";
    }
    else
    {
      sub_100278C8C(a1, (uint64_t)v157);
      sub_10000B740(0, &qword_10096BDD8);
      if (swift_dynamicCast())
      {
        uint64_t v71 = v155;
        sub_100278C8C(v60, (uint64_t)v157);
        sub_10000A844(&qword_10096BDF0);
        uint64_t v82 = (uint64_t)v143;
        uint64_t v83 = v144;
        int v84 = swift_dynamicCast();
        int v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
        if (v84)
        {
          v85(v82, 0, 1, v83);
          uint64_t v76 = v134;
          sub_100278B48(v82, v134, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
          uint64_t v86 = v133;
          sub_100278BB0(v76, v133, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
          id v56 = v71;
          uint64_t v87 = v136;
          uint64_t v88 = v154;
          sub_100276D84(v56, v86, v136);
          if (v88)
          {
            int v80 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa;
            goto LABEL_32;
          }
          uint64_t v116 = v151;
          v151[3] = v132;
          v116[4] = (uint64_t)&off_1008D4AF8;
          uint64_t v117 = sub_100278AE4(v116);
          sub_100278B48((uint64_t)v87, (uint64_t)v117, _s15MacApprovePhoneV21HandleResponseContextVMa);

          uint64_t v114 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa;
LABEL_42:
          uint64_t v91 = v114;
          uint64_t v92 = v76;
          goto LABEL_43;
        }
        v85(v82, 1, 1, v83);
        sub_10000A7E8(v82, &qword_10096BDA8);
        sub_10024D280();
        swift_allocError();
        *(_DWORD *)uint64_t v93 = 10;
        unint64_t v94 = 0xD00000000000004DLL;
        uint64_t v95 = "Invalid previous context as HandleUserApprovalResult, message may be replayed";
      }
      else
      {
        sub_100278C8C(a1, (uint64_t)v157);
        sub_10000B740(0, &qword_10096BDE0);
        if (swift_dynamicCast())
        {
          uint64_t v71 = v155;
          sub_100278C8C(v60, (uint64_t)v157);
          sub_10000A844(&qword_10096BDF0);
          uint64_t v96 = (uint64_t)v137;
          uint64_t v97 = v138;
          int v98 = swift_dynamicCast();
          uint64_t v99 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56);
          if (v98)
          {
            v99(v96, 0, 1, v97);
            uint64_t v76 = v128;
            sub_100278B48(v96, v128, _s15MacApprovePhoneV20HandleRequestContextVMa);
            uint64_t v100 = v127;
            sub_100278BB0(v76, v127, _s15MacApprovePhoneV20HandleRequestContextVMa);
            id v56 = v71;
            uint64_t v101 = v130;
            uint64_t v102 = v154;
            sub_100277020(v56, v100, v130);
            if (v102)
            {
              int v80 = _s15MacApprovePhoneV20HandleRequestContextVMa;
              goto LABEL_32;
            }
            unint64_t v118 = v151;
            v151[3] = v123;
            v118[4] = (uint64_t)&off_1008D4B10;
            unint64_t v119 = sub_100278AE4(v118);
            sub_100278B48((uint64_t)v101, (uint64_t)v119, _s15MacApprovePhoneV18HandleTokenContextVMa);

            uint64_t v114 = _s15MacApprovePhoneV20HandleRequestContextVMa;
            goto LABEL_42;
          }
          v99(v96, 1, 1, v97);
          sub_10000A7E8(v96, &qword_10096BDA0);
          sub_10024D280();
          swift_allocError();
          *(_DWORD *)uint64_t v93 = 10;
          unint64_t v94 = 0xD000000000000049;
          uint64_t v95 = "Invalid previous context as HandleRequestContext, message may be replayed";
        }
        else
        {
          sub_100278C8C(a1, (uint64_t)v157);
          sub_10000B740(0, &qword_10096BDE8);
          if (!swift_dynamicCast())
          {
            sub_10024D280();
            swift_allocError();
            *(_DWORD *)uint64_t v115 = 10;
            *(void *)(v115 + 8) = 0xD00000000000001FLL;
            *(void *)(v115 + 16) = 0x80000001007B6FF0;
            swift_willThrow();
            return;
          }
          uint64_t v71 = v155;
          sub_100278C8C(v60, (uint64_t)v157);
          sub_10000A844(&qword_10096BDF0);
          uint64_t v105 = (uint64_t)v131;
          uint64_t v106 = v132;
          int v107 = swift_dynamicCast();
          uint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56);
          if (v107)
          {
            v108(v105, 0, 1, v106);
            uint64_t v76 = v125;
            sub_100278B48(v105, v125, _s15MacApprovePhoneV21HandleResponseContextVMa);
            uint64_t v109 = v124;
            sub_100278BB0(v76, v124, _s15MacApprovePhoneV21HandleResponseContextVMa);
            id v56 = v71;
            uint64_t v110 = v126;
            uint64_t v111 = v154;
            sub_100277424(v56, v109, v126);
            if (v111)
            {
              int v80 = _s15MacApprovePhoneV21HandleResponseContextVMa;
              goto LABEL_32;
            }
            unint64_t v120 = v151;
            v151[3] = v122;
            v120[4] = (uint64_t)&off_1008D4B28;
            uint64_t v121 = sub_100278AE4(v120);
            sub_100278B48((uint64_t)v110, (uint64_t)v121, _s15MacApprovePhoneV25HandleConfirmationContextVMa);

            uint64_t v114 = _s15MacApprovePhoneV21HandleResponseContextVMa;
            goto LABEL_42;
          }
          v108(v105, 1, 1, v106);
          sub_10000A7E8(v105, &qword_10096BD98);
          sub_10024D280();
          swift_allocError();
          *(_DWORD *)uint64_t v93 = 10;
          unint64_t v94 = 0xD00000000000004ALL;
          uint64_t v95 = "Invalid previous context as HandleResponseContext, message may be replayed";
        }
      }
    }
    *(void *)(v93 + 8) = v94;
    *(void *)(v93 + 16) = (unint64_t)(v95 - 32) | 0x8000000000000000;
    swift_willThrow();

    return;
  }
  uint64_t v62 = (uint64_t)v155;
  unint64_t v61 = v156;
  sub_100278C8C(v60, (uint64_t)v157);
  sub_10000A844(&qword_10096BDF0);
  uint64_t v63 = v153;
  int v64 = swift_dynamicCast();
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v152 + 56);
  if (!v64)
  {
    v65(v35, 1, 1, v63);
    sub_10000A7E8((uint64_t)v35, &qword_10096BDB8);
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v81 = 10;
    *(void *)(v81 + 8) = 0xD00000000000004FLL;
    *(void *)(v81 + 16) = 0x80000001007B7150;
    swift_willThrow();
    goto LABEL_15;
  }
  v65(v35, 0, 1, v63);
  uint64_t v66 = v146;
  sub_100278B48((uint64_t)v35, v146, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
  uint64_t v67 = v145;
  sub_100278BB0(v66, v145, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
  sub_100278C78(v62, v61);
  int v68 = v147;
  uint64_t v69 = v154;
  sub_10027660C(v62, v61, v67, v147);
  if (v69)
  {
    sub_100278C18(v66, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
LABEL_15:
    sub_100250CB0(v62, v61);
    return;
  }
  int v103 = v151;
  v151[3] = v144;
  v103[4] = (uint64_t)&off_1008D4AC8;
  long long v104 = sub_100278AE4(v103);
  sub_100278B48((uint64_t)v68, (uint64_t)v104, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
  sub_100250CB0(v62, v61);
  uint64_t v91 = _s15MacApprovePhoneV26HandleApprovePromptContextVMa;
  uint64_t v92 = v66;
LABEL_43:
  sub_100278C18(v92, v91);
}

uint64_t sub_1002789B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100278BB0(v1, a1, (uint64_t (*)(void))type metadata accessor for SDAuthenticationCommonOperationInput);
}

uint64_t sub_1002789E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100278C8C(v2 + *(int *)(a1 + 20), a2);
}

void sub_100278A0C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t _s15MacApprovePhoneV25HandleConfirmationContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096C180);
}

uint64_t _s15MacApprovePhoneV18HandleTokenContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096C040);
}

uint64_t _s15MacApprovePhoneV21HandleResponseContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096C0E0);
}

uint64_t _s15MacApprovePhoneV20HandleRequestContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096BF98);
}

uint64_t _s15MacApprovePhoneV24HandleUserApprovalResultVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096BEF8);
}

uint64_t _s15MacApprovePhoneV26HandleApprovePromptContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096BE50);
}

uint64_t *sub_100278AE4(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100278B48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100278BB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100278C18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100278C78(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10025ADCC(a1, a2);
  }
  return a1;
}

uint64_t sub_100278C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_100278CF0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = a2[1];
    long long v7 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 40) = v7;
    uint64_t v8 = v7;
    uint64_t v9 = **(void (***)(void *, uint64_t *, uint64_t))(v7 - 8);
    swift_bridgeObjectRetain();
    v9(v4 + 2, a2 + 2, v8);
    uint64_t v10 = a3[7];
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v87 = a3;
    uint64_t v88 = a2;
    if (v15(v12, 1, v13))
    {
      uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v19 = v18[5];
    uint64_t v20 = &v11[v19];
    uint64_t v21 = &v12[v19];
    if (v15(&v12[v19], 1, v13))
    {
      uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v21, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
    }
    uint64_t v23 = v18[6];
    uint64_t v24 = &v11[v23];
    uint64_t v25 = &v12[v23];
    if (v15(&v12[v23], 1, v13))
    {
      uint64_t v26 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v24, v25, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v24, 0, 1, v13);
    }
    uint64_t v27 = v18[7];
    uint64_t v28 = &v11[v27];
    uint64_t v29 = &v12[v27];
    if (v15(&v12[v27], 1, v13))
    {
      uint64_t v30 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v28, v29, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v28, 0, 1, v13);
    }
    uint64_t v31 = v18[8];
    uint64_t v32 = &v11[v31];
    uint64_t v33 = &v12[v31];
    if (v15(&v12[v31], 1, v13))
    {
      uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v32, v33, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v32, 0, 1, v13);
    }
    uint64_t v35 = v18[9];
    uint64_t v36 = &v11[v35];
    uint64_t v37 = &v12[v35];
    if (v15(&v12[v35], 1, v13))
    {
      uint64_t v38 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v36, v37, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v36, 0, 1, v13);
    }
    uint64_t v39 = v18[10];
    uint64_t v40 = &v11[v39];
    uint64_t v41 = &v12[v39];
    if (v15(&v12[v39], 1, v13))
    {
      uint64_t v42 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v40, v41, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v40, 0, 1, v13);
    }
    uint64_t v43 = v18[11];
    uint64_t v44 = &v11[v43];
    uint64_t v45 = &v12[v43];
    if (v15(&v12[v43], 1, v13))
    {
      uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v44, v45, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v44, 0, 1, v13);
    }
    uint64_t v47 = v18[12];
    uint64_t v48 = &v11[v47];
    uint64_t v49 = &v12[v47];
    if (v15(&v12[v47], 1, v13))
    {
      uint64_t v50 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v48, v49, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v48, 0, 1, v13);
    }
    v11[v18[13]] = v12[v18[13]];
    uint64_t v51 = v18[14];
    uint64_t v52 = &v11[v51];
    uint64_t v53 = &v12[v51];
    if (v15(&v12[v51], 1, v13))
    {
      uint64_t v54 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v52, v53, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v52, 0, 1, v13);
    }
    uint64_t v55 = v18[15];
    id v56 = &v11[v55];
    uint64_t v57 = &v12[v55];
    if (v15(&v12[v55], 1, v13))
    {
      uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v56, v57, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v56, 0, 1, v13);
    }
    uint64_t v59 = v18[16];
    uint64_t v60 = &v11[v59];
    unint64_t v61 = &v12[v59];
    if (v15(&v12[v59], 1, v13))
    {
      uint64_t v62 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v60, v61, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v60, 0, 1, v13);
    }
    uint64_t v63 = v18[17];
    int v64 = &v11[v63];
    uint64_t v65 = &v12[v63];
    if (v15(&v12[v63], 1, v13))
    {
      uint64_t v66 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v64, v65, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v64, 0, 1, v13);
    }
    uint64_t v67 = v18[18];
    int v68 = &v11[v67];
    uint64_t v69 = &v12[v67];
    *(_DWORD *)int v68 = *(_DWORD *)v69;
    v68[4] = v69[4];
    v11[v18[19]] = v12[v18[19]];
    uint64_t v70 = v18[20];
    uint64_t v71 = &v11[v70];
    uint64_t v72 = &v12[v70];
    uint64_t v73 = *((void *)v72 + 1);
    *(void *)uint64_t v71 = *(void *)v72;
    *((void *)v71 + 1) = v73;
    uint64_t v74 = v18[21];
    uint64_t v75 = &v11[v74];
    uint64_t v76 = &v12[v74];
    uint64_t v77 = *((void *)v76 + 1);
    *(void *)uint64_t v75 = *(void *)v76;
    *((void *)v75 + 1) = v77;
    uint64_t v78 = v87[8];
    uint64_t v79 = v87[9];
    int v80 = (void *)((char *)v4 + v78);
    uint64_t v81 = (uint64_t *)((char *)v88 + v78);
    uint64_t v82 = v81[1];
    *int v80 = *v81;
    v80[1] = v82;
    uint64_t v83 = (void *)((char *)v4 + v79);
    int v84 = (uint64_t *)((char *)v88 + v79);
    uint64_t v85 = v84[1];
    void *v83 = *v84;
    v83[1] = v85;
    *((unsigned char *)v4 + v87[10]) = *((unsigned char *)v88 + v87[10]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1002796D4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 16);
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  long long v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v9 = v4 + v8[5];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = v4 + v8[6];
  if (!v7(v10, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = v4 + v8[7];
  if (!v7(v11, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = v4 + v8[8];
  if (!v7(v12, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = v4 + v8[9];
  if (!v7(v13, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v13, v5);
  }
  uint64_t v14 = v4 + v8[10];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = v4 + v8[11];
  if (!v7(v15, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v16 = v4 + v8[12];
  if (!v7(v16, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = v4 + v8[14];
  if (!v7(v17, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = v4 + v8[15];
  if (!v7(v18, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = v4 + v8[16];
  if (!v7(v19, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = v4 + v8[17];
  if (!v7(v20, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100279AFC(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a2 + 16;
  long long v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 16, v6, v8);
  uint64_t v86 = a3;
  uint64_t v87 = a2;
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  if (v15(&v12[v18], 1, v13))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v17[6];
  uint64_t v23 = &v11[v22];
  uint64_t v24 = &v12[v22];
  if (v15(&v12[v22], 1, v13))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  uint64_t v26 = v17[7];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  if (v15(&v12[v26], 1, v13))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v27, v28, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v17[8];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  if (v15(&v12[v30], 1, v13))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
  }
  uint64_t v34 = v17[9];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  if (v15(&v12[v34], 1, v13))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v35, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  }
  uint64_t v38 = v17[10];
  uint64_t v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  if (v15(&v12[v38], 1, v13))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  uint64_t v42 = v17[11];
  uint64_t v43 = &v11[v42];
  uint64_t v44 = &v12[v42];
  if (v15(&v12[v42], 1, v13))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = v17[12];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  if (v15(&v12[v46], 1, v13))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v47, 0, 1, v13);
  }
  v11[v17[13]] = v12[v17[13]];
  uint64_t v50 = v17[14];
  uint64_t v51 = &v11[v50];
  uint64_t v52 = &v12[v50];
  if (v15(&v12[v50], 1, v13))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v51, v52, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v51, 0, 1, v13);
  }
  uint64_t v54 = v17[15];
  uint64_t v55 = &v11[v54];
  id v56 = &v12[v54];
  if (v15(&v12[v54], 1, v13))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v56, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
  }
  uint64_t v58 = v17[16];
  uint64_t v59 = &v11[v58];
  uint64_t v60 = &v12[v58];
  if (v15(&v12[v58], 1, v13))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v59, v60, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v13);
  }
  uint64_t v62 = v17[17];
  uint64_t v63 = &v11[v62];
  int v64 = &v12[v62];
  if (v15(&v12[v62], 1, v13))
  {
    uint64_t v65 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v63, v64, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v63, 0, 1, v13);
  }
  uint64_t v66 = v17[18];
  uint64_t v67 = &v11[v66];
  int v68 = &v12[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v11[v17[19]] = v12[v17[19]];
  uint64_t v69 = v17[20];
  uint64_t v70 = &v11[v69];
  uint64_t v71 = &v12[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = v17[21];
  uint64_t v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  uint64_t v77 = v86[8];
  uint64_t v78 = v86[9];
  uint64_t v79 = (void *)(a1 + v77);
  int v80 = (void *)(v87 + v77);
  uint64_t v81 = v80[1];
  *uint64_t v79 = *v80;
  v79[1] = v81;
  uint64_t v82 = (void *)(a1 + v78);
  uint64_t v83 = (void *)(v87 + v78);
  uint64_t v84 = v83[1];
  *uint64_t v82 = *v83;
  v82[1] = v84;
  *(unsigned char *)(a1 + v86[10]) = *(unsigned char *)(v87 + v86[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10027A490(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  uint64_t v105 = a2;
  uint64_t v6 = a3[7];
  uint64_t v106 = a1;
  long long v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (!v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v83, v84, v9);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
    goto LABEL_78;
  }
  if (v86)
  {
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v83, v84, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  uint64_t v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  int v91 = *(_DWORD *)v90;
  v89[4] = v90[4];
  *(_DWORD *)uint64_t v89 = v91;
  v7[v15[19]] = v8[v15[19]];
  uint64_t v92 = v15[20];
  uint64_t v93 = &v7[v92];
  unint64_t v94 = &v8[v92];
  *(void *)uint64_t v93 = *(void *)v94;
  *((void *)v93 + 1) = *((void *)v94 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v95 = v15[21];
  uint64_t v96 = &v7[v95];
  uint64_t v97 = &v8[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  *((void *)v96 + 1) = *((void *)v97 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v98 = a3[8];
  uint64_t v99 = (void *)(v106 + v98);
  uint64_t v100 = (void *)(v105 + v98);
  *uint64_t v99 = *v100;
  v99[1] = v100[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v101 = a3[9];
  uint64_t v102 = (void *)(v106 + v101);
  int v103 = (void *)(v105 + v101);
  *uint64_t v102 = *v103;
  v102[1] = v103[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v106 + a3[10]) = *(unsigned char *)(v105 + a3[10]);
  return v106;
}

uint64_t sub_10027B320(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = a3[7];
  uint64_t v6 = (char *)(a1 + v5);
  long long v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  int v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v13 = v12[5];
  uint64_t v14 = &v6[v13];
  uint64_t v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  int v19 = &v7[v17];
  if (v10(&v7[v17], 1, v8))
  {
    uint64_t v20 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  }
  uint64_t v21 = v12[7];
  uint64_t v22 = &v6[v21];
  uint64_t v23 = &v7[v21];
  if (v10(&v7[v21], 1, v8))
  {
    uint64_t v24 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0, 1, v8);
  }
  uint64_t v25 = v12[8];
  int v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v10(&v7[v25], 1, v8))
  {
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0, 1, v8);
  }
  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  int v31 = &v7[v29];
  if (v10(&v7[v29], 1, v8))
  {
    uint64_t v32 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0, 1, v8);
  }
  uint64_t v33 = v12[10];
  uint64_t v34 = &v6[v33];
  uint64_t v35 = &v7[v33];
  if (v10(&v7[v33], 1, v8))
  {
    uint64_t v36 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v8);
  }
  uint64_t v37 = v12[11];
  int v38 = &v6[v37];
  uint64_t v39 = &v7[v37];
  if (v10(&v7[v37], 1, v8))
  {
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0, 1, v8);
  }
  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  int v43 = &v7[v41];
  if (v10(&v7[v41], 1, v8))
  {
    uint64_t v44 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0, 1, v8);
  }
  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  uint64_t v46 = &v6[v45];
  uint64_t v47 = &v7[v45];
  if (v10(&v7[v45], 1, v8))
  {
    uint64_t v48 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0, 1, v8);
  }
  uint64_t v49 = v12[15];
  int v50 = &v6[v49];
  uint64_t v51 = &v7[v49];
  if (v10(&v7[v49], 1, v8))
  {
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0, 1, v8);
  }
  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  int v55 = &v7[v53];
  if (v10(&v7[v53], 1, v8))
  {
    uint64_t v56 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0, 1, v8);
  }
  uint64_t v57 = v12[17];
  uint64_t v58 = &v6[v57];
  uint64_t v59 = &v7[v57];
  if (v10(&v7[v57], 1, v8))
  {
    uint64_t v60 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0, 1, v8);
  }
  uint64_t v61 = v12[18];
  int v62 = &v6[v61];
  uint64_t v63 = &v7[v61];
  *(_DWORD *)int v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v64) = *(_OWORD *)(a2 + v64);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_10027BC34(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v113 = a2;
  uint64_t v7 = a3[7];
  uint64_t v114 = a1;
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  int v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1, v10);
  int v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1, v10);
  int v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  int v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1, v10);
  int v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1, v10);
  int v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  int v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1, v10);
  int v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1, v10);
  int v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  int v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1, v10);
  int v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1, v10);
  int v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  int v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  int v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1, v10);
  int v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  int v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1, v10);
  int v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  int v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1, v10);
  int v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  int v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  unint64_t v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease();
  uint64_t v97 = v16[21];
  uint64_t v98 = &v8[v97];
  uint64_t v99 = &v9[v97];
  uint64_t v101 = *(void *)v99;
  uint64_t v100 = *((void *)v99 + 1);
  *(void *)uint64_t v98 = v101;
  *((void *)v98 + 1) = v100;
  swift_bridgeObjectRelease();
  uint64_t v102 = a3[8];
  int v103 = (void *)(v114 + v102);
  long long v104 = (uint64_t *)(v113 + v102);
  uint64_t v106 = *v104;
  uint64_t v105 = v104[1];
  void *v103 = v106;
  v103[1] = v105;
  swift_bridgeObjectRelease();
  uint64_t v107 = a3[9];
  uint64_t v108 = (void *)(v114 + v107);
  uint64_t v109 = (uint64_t *)(v113 + v107);
  uint64_t v111 = *v109;
  uint64_t v110 = v109[1];
  *uint64_t v108 = v111;
  v108[1] = v110;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v114 + a3[10]) = *(unsigned char *)(v113 + a3[10]);
  return v114;
}

uint64_t sub_10027CA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10027CA9C);
}

uint64_t sub_10027CA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10027CB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10027CB60);
}

uint64_t sub_10027CB60(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10027CC08()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10027CCC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    v11(a1 + 8, v8, v10);
    int v12 = a2 + 6;
    unint64_t v13 = a2[7];
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
    }
    else
    {
      uint64_t v14 = *v12;
      sub_10025ADCC(*v12, a2[7]);
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v13;
    }
    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (char *)(a1 + v15);
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    int v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    uint64_t v87 = a3;
    uint64_t v88 = a2;
    if (v20(v17, 1, v18))
    {
      uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v22 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v23 = v22[5];
    uint64_t v24 = &v16[v23];
    uint64_t v25 = &v17[v23];
    if (v20(&v17[v23], 1, v18))
    {
      uint64_t v26 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v24, v25, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v24, 0, 1, v18);
    }
    uint64_t v27 = v22[6];
    uint64_t v28 = &v16[v27];
    uint64_t v29 = &v17[v27];
    if (v20(&v17[v27], 1, v18))
    {
      uint64_t v30 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v28, v29, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v28, 0, 1, v18);
    }
    uint64_t v31 = v22[7];
    int v32 = &v16[v31];
    int v33 = &v17[v31];
    if (v20(&v17[v31], 1, v18))
    {
      uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v32, v33, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v32, 0, 1, v18);
    }
    uint64_t v35 = v22[8];
    uint64_t v36 = &v16[v35];
    uint64_t v37 = &v17[v35];
    if (v20(&v17[v35], 1, v18))
    {
      uint64_t v38 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v36, v37, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v36, 0, 1, v18);
    }
    uint64_t v39 = v22[9];
    uint64_t v40 = &v16[v39];
    uint64_t v41 = &v17[v39];
    if (v20(&v17[v39], 1, v18))
    {
      uint64_t v42 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v40, v41, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v40, 0, 1, v18);
    }
    uint64_t v43 = v22[10];
    int v44 = &v16[v43];
    int v45 = &v17[v43];
    if (v20(&v17[v43], 1, v18))
    {
      uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v44, v45, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v44, 0, 1, v18);
    }
    uint64_t v47 = v22[11];
    uint64_t v48 = &v16[v47];
    uint64_t v49 = &v17[v47];
    if (v20(&v17[v47], 1, v18))
    {
      uint64_t v50 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v48, v49, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v18);
    }
    uint64_t v51 = v22[12];
    uint64_t v52 = &v16[v51];
    uint64_t v53 = &v17[v51];
    if (v20(&v17[v51], 1, v18))
    {
      uint64_t v54 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v52, v53, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v52, 0, 1, v18);
    }
    v16[v22[13]] = v17[v22[13]];
    uint64_t v55 = v22[14];
    int v56 = &v16[v55];
    int v57 = &v17[v55];
    if (v20(&v17[v55], 1, v18))
    {
      uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v56, v57, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v56, 0, 1, v18);
    }
    uint64_t v59 = v22[15];
    uint64_t v60 = &v16[v59];
    uint64_t v61 = &v17[v59];
    if (v20(&v17[v59], 1, v18))
    {
      uint64_t v62 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v60, v61, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v60, 0, 1, v18);
    }
    uint64_t v63 = v22[16];
    uint64_t v64 = &v16[v63];
    uint64_t v65 = &v17[v63];
    if (v20(&v17[v63], 1, v18))
    {
      uint64_t v66 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v64, v65, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v64, 0, 1, v18);
    }
    uint64_t v67 = v22[17];
    int v68 = &v16[v67];
    int v69 = &v17[v67];
    if (v20(&v17[v67], 1, v18))
    {
      uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v68, v69, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v68, 0, 1, v18);
    }
    uint64_t v71 = v22[18];
    uint64_t v72 = &v16[v71];
    int v73 = &v17[v71];
    *(_DWORD *)uint64_t v72 = *(_DWORD *)v73;
    v72[4] = v73[4];
    v16[v22[19]] = v17[v22[19]];
    uint64_t v74 = v22[20];
    int v75 = &v16[v74];
    uint64_t v76 = &v17[v74];
    uint64_t v77 = *((void *)v76 + 1);
    *(void *)int v75 = *(void *)v76;
    *((void *)v75 + 1) = v77;
    uint64_t v78 = v22[21];
    int v79 = &v16[v78];
    int v80 = &v17[v78];
    uint64_t v81 = *((void *)v80 + 1);
    *(void *)int v79 = *(void *)v80;
    *((void *)v79 + 1) = v81;
    uint64_t v82 = *(int *)(v87 + 32);
    uint64_t v83 = *(int *)(v87 + 36);
    uint64_t v84 = *(void **)((char *)v88 + v82);
    *(void *)(a1 + v82) = v84;
    *(unsigned char *)(a1 + v83) = *((unsigned char *)v88 + v83);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v85 = v84;
  }
  return a1;
}

void sub_10027D6BC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 56);
  if (v4 >> 60 != 15) {
    sub_100250CC4(*(void *)(a1 + 48), v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  long long v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v10 = v5 + v9[5];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v5 + v9[6];
  if (!v8(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = v5 + v9[7];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v5 + v9[8];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v5 + v9[9];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v5 + v9[10];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v5 + v9[11];
  if (!v8(v16, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = v5 + v9[12];
  if (!v8(v17, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = v5 + v9[14];
  if (!v8(v18, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = v5 + v9[15];
  if (!v8(v19, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = v5 + v9[16];
  if (!v8(v20, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = v5 + v9[17];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void **)(a1 + *(int *)(a2 + 32));
}

uint64_t sub_10027DAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 8, v6, v8);
  uint64_t v10 = (uint64_t *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
  }
  else
  {
    uint64_t v12 = *v10;
    sub_10025ADCC(*v10, *(void *)(a2 + 56));
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v11;
  }
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (char *)(a1 + v13);
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v85 = a3;
  uint64_t v86 = a2;
  if (v18(v15, 1, v16))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v20 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v21 = v20[5];
  uint64_t v22 = &v14[v21];
  uint64_t v23 = &v15[v21];
  if (v18(&v15[v21], 1, v16))
  {
    uint64_t v24 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v22, v23, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v16);
  }
  uint64_t v25 = v20[6];
  uint64_t v26 = &v14[v25];
  uint64_t v27 = &v15[v25];
  if (v18(&v15[v25], 1, v16))
  {
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v26, v27, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v26, 0, 1, v16);
  }
  uint64_t v29 = v20[7];
  uint64_t v30 = &v14[v29];
  uint64_t v31 = &v15[v29];
  if (v18(&v15[v29], 1, v16))
  {
    uint64_t v32 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v30, v31, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v30, 0, 1, v16);
  }
  uint64_t v33 = v20[8];
  uint64_t v34 = &v14[v33];
  uint64_t v35 = &v15[v33];
  if (v18(&v15[v33], 1, v16))
  {
    uint64_t v36 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v34, v35, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v34, 0, 1, v16);
  }
  uint64_t v37 = v20[9];
  uint64_t v38 = &v14[v37];
  uint64_t v39 = &v15[v37];
  if (v18(&v15[v37], 1, v16))
  {
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v38, v39, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v38, 0, 1, v16);
  }
  uint64_t v41 = v20[10];
  uint64_t v42 = &v14[v41];
  uint64_t v43 = &v15[v41];
  if (v18(&v15[v41], 1, v16))
  {
    uint64_t v44 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v42, v43, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v42, 0, 1, v16);
  }
  uint64_t v45 = v20[11];
  uint64_t v46 = &v14[v45];
  uint64_t v47 = &v15[v45];
  if (v18(&v15[v45], 1, v16))
  {
    uint64_t v48 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v46, v47, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v46, 0, 1, v16);
  }
  uint64_t v49 = v20[12];
  uint64_t v50 = &v14[v49];
  uint64_t v51 = &v15[v49];
  if (v18(&v15[v49], 1, v16))
  {
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v50, v51, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v50, 0, 1, v16);
  }
  v14[v20[13]] = v15[v20[13]];
  uint64_t v53 = v20[14];
  uint64_t v54 = &v14[v53];
  uint64_t v55 = &v15[v53];
  if (v18(&v15[v53], 1, v16))
  {
    uint64_t v56 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v54, v55, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v54, 0, 1, v16);
  }
  uint64_t v57 = v20[15];
  uint64_t v58 = &v14[v57];
  uint64_t v59 = &v15[v57];
  if (v18(&v15[v57], 1, v16))
  {
    uint64_t v60 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v58, v59, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v58, 0, 1, v16);
  }
  uint64_t v61 = v20[16];
  uint64_t v62 = &v14[v61];
  uint64_t v63 = &v15[v61];
  if (v18(&v15[v61], 1, v16))
  {
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v62, v63, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v62, 0, 1, v16);
  }
  uint64_t v65 = v20[17];
  uint64_t v66 = &v14[v65];
  uint64_t v67 = &v15[v65];
  if (v18(&v15[v65], 1, v16))
  {
    uint64_t v68 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v66, v67, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v66, 0, 1, v16);
  }
  uint64_t v69 = v20[18];
  uint64_t v70 = &v14[v69];
  uint64_t v71 = &v15[v69];
  *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  v14[v20[19]] = v15[v20[19]];
  uint64_t v72 = v20[20];
  int v73 = &v14[v72];
  uint64_t v74 = &v15[v72];
  uint64_t v75 = *((void *)v74 + 1);
  *(void *)int v73 = *(void *)v74;
  *((void *)v73 + 1) = v75;
  uint64_t v76 = v20[21];
  uint64_t v77 = &v14[v76];
  uint64_t v78 = &v15[v76];
  uint64_t v79 = *((void *)v78 + 1);
  *(void *)uint64_t v77 = *(void *)v78;
  *((void *)v77 + 1) = v79;
  uint64_t v80 = *(int *)(v85 + 32);
  uint64_t v81 = *(int *)(v85 + 36);
  uint64_t v82 = *(void **)(v86 + v80);
  *(void *)(a1 + v80) = v82;
  *(unsigned char *)(a1 + v81) = *(unsigned char *)(v86 + v81);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v83 = v82;
  return a1;
}

void *sub_10027E4AC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4(a1 + 1, a2 + 1);
  uint64_t v6 = a2 + 6;
  unint64_t v7 = a2[7];
  if (a1[7] >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_10025ADCC(*v6, a2[7]);
      a1[6] = v8;
      a1[7] = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_10026F904((uint64_t)(a1 + 6));
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v9 = *v6;
  sub_10025ADCC(*v6, a2[7]);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  a1[6] = v9;
  a1[7] = v7;
  sub_100250CC4(v10, v11);
LABEL_8:
  uint64_t v110 = a3;
  uint64_t v111 = a2;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v112 = a1;
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_13:
    uint64_t v20 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_14:
  uint64_t v21 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v22 = v21[5];
  uint64_t v23 = &v13[v22];
  uint64_t v24 = &v14[v22];
  int v25 = v17(&v13[v22], 1, v15);
  int v26 = v17(v24, 1, v15);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v24, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, v15);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
LABEL_19:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v23, v24, v15);
LABEL_20:
  uint64_t v28 = v21[6];
  uint64_t v29 = &v13[v28];
  uint64_t v30 = &v14[v28];
  int v31 = v17(&v13[v28], 1, v15);
  int v32 = v17(v30, 1, v15);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v29, v15);
LABEL_25:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v29, v30, v15);
LABEL_26:
  uint64_t v34 = v21[7];
  uint64_t v35 = &v13[v34];
  uint64_t v36 = &v14[v34];
  int v37 = v17(&v13[v34], 1, v15);
  int v38 = v17(v36, 1, v15);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v35, v36, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v35, 0, 1, v15);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v35, v15);
LABEL_31:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v35, v36, v15);
LABEL_32:
  uint64_t v40 = v21[8];
  uint64_t v41 = &v13[v40];
  uint64_t v42 = &v14[v40];
  int v43 = v17(&v13[v40], 1, v15);
  int v44 = v17(v42, 1, v15);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v41, v15);
LABEL_37:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_38;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v41, v42, v15);
LABEL_38:
  uint64_t v46 = v21[9];
  uint64_t v47 = &v13[v46];
  uint64_t v48 = &v14[v46];
  int v49 = v17(&v13[v46], 1, v15);
  int v50 = v17(v48, 1, v15);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v47, v48, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v47, 0, 1, v15);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v47, v15);
LABEL_43:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v47, v48, v15);
LABEL_44:
  uint64_t v52 = v21[10];
  uint64_t v53 = &v13[v52];
  uint64_t v54 = &v14[v52];
  int v55 = v17(&v13[v52], 1, v15);
  int v56 = v17(v54, 1, v15);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v53, v15);
LABEL_49:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_50;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v53, v54, v15);
LABEL_50:
  uint64_t v58 = v21[11];
  uint64_t v59 = &v13[v58];
  uint64_t v60 = &v14[v58];
  int v61 = v17(&v13[v58], 1, v15);
  int v62 = v17(v60, 1, v15);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v59, v60, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v59, 0, 1, v15);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v59, v15);
LABEL_55:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_56;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v59, v60, v15);
LABEL_56:
  uint64_t v64 = v21[12];
  uint64_t v65 = &v13[v64];
  uint64_t v66 = &v14[v64];
  int v67 = v17(&v13[v64], 1, v15);
  int v68 = v17(v66, 1, v15);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v65, v15);
LABEL_61:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v65, v66, v15);
LABEL_62:
  v13[v21[13]] = v14[v21[13]];
  uint64_t v70 = v21[14];
  uint64_t v71 = &v13[v70];
  uint64_t v72 = &v14[v70];
  int v73 = v17(&v13[v70], 1, v15);
  int v74 = v17(v72, 1, v15);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v71, v72, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v71, 0, 1, v15);
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v71, v15);
LABEL_67:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_68;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v71, v72, v15);
LABEL_68:
  uint64_t v76 = v21[15];
  uint64_t v77 = &v13[v76];
  uint64_t v78 = &v14[v76];
  int v79 = v17(&v13[v76], 1, v15);
  int v80 = v17(v78, 1, v15);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v77, v78, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v77, 0, 1, v15);
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v77, v15);
LABEL_73:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_74;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v77, v78, v15);
LABEL_74:
  uint64_t v82 = v21[16];
  id v83 = &v13[v82];
  uint64_t v84 = &v14[v82];
  int v85 = v17(&v13[v82], 1, v15);
  int v86 = v17(v84, 1, v15);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v83, v84, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v83, 0, 1, v15);
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v83, v15);
LABEL_79:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_80;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v83, v84, v15);
LABEL_80:
  uint64_t v88 = v21[17];
  uint64_t v89 = &v13[v88];
  uint64_t v90 = &v14[v88];
  int v91 = v17(&v13[v88], 1, v15);
  int v92 = v17(v90, 1, v15);
  if (!v91)
  {
    uint64_t v93 = v112;
    if (!v92)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v89, v90, v15);
      goto LABEL_86;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v89, v15);
    goto LABEL_85;
  }
  uint64_t v93 = v112;
  if (v92)
  {
LABEL_85:
    uint64_t v94 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v89, v90, *(void *)(*(void *)(v94 - 8) + 64));
    goto LABEL_86;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v89, v90, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v89, 0, 1, v15);
LABEL_86:
  uint64_t v95 = v21[18];
  uint64_t v96 = &v13[v95];
  uint64_t v97 = &v14[v95];
  int v98 = *(_DWORD *)v97;
  v96[4] = v97[4];
  *(_DWORD *)uint64_t v96 = v98;
  v13[v21[19]] = v14[v21[19]];
  uint64_t v99 = v21[20];
  uint64_t v100 = &v13[v99];
  uint64_t v101 = &v14[v99];
  *(void *)uint64_t v100 = *(void *)v101;
  *((void *)v100 + 1) = *((void *)v101 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v102 = v21[21];
  int v103 = &v13[v102];
  long long v104 = &v14[v102];
  *(void *)int v103 = *(void *)v104;
  *((void *)v103 + 1) = *((void *)v104 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v105 = *(int *)(v110 + 32);
  uint64_t v106 = *(void **)((char *)v93 + v105);
  uint64_t v107 = *(void **)((char *)v111 + v105);
  *(void *)((char *)v93 + v105) = v107;
  id v108 = v107;

  *((unsigned char *)v93 + *(int *)(v110 + 36)) = *((unsigned char *)v111 + *(int *)(v110 + 36));
  return v93;
}

uint64_t sub_10027F384(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v4 = a3[7];
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  unint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v5[v12];
  uint64_t v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  int v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  int v25 = &v5[v24];
  int v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  uint64_t v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  int v37 = &v5[v36];
  int v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  uint64_t v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  int v49 = &v5[v48];
  int v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  uint64_t v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  int v61 = &v5[v60];
  int v62 = &v6[v60];
  *(_DWORD *)int v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  *(_OWORD *)&v5[v11[20]] = *(_OWORD *)&v6[v11[20]];
  *(_OWORD *)&v5[v11[21]] = *(_OWORD *)&v6[v11[21]];
  uint64_t v63 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v63) = *(unsigned char *)(a2 + v63);
  return a1;
}

uint64_t sub_10027FC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 48);
  unint64_t v7 = *(void *)(a1 + 56);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 56);
  if (v8 >> 60 == 15)
  {
    sub_10026F904(a1 + 48);
LABEL_4:
    *(_OWORD *)(a1 + 48) = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v6;
  *(void *)(a1 + 56) = v8;
  sub_100250CC4(v9, v7);
LABEL_6:
  uint64_t v108 = a3;
  uint64_t v10 = *(int *)(a3 + 28);
  unint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v109 = *(void *)(v13 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 48);
  int v15 = v14(v11, 1, v13);
  int v16 = v14(v12, 1, v13);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v11, 0, 1, v13);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v11, v13);
LABEL_11:
    uint64_t v17 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v11, v12, v13);
LABEL_12:
  int v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v19 = v18[5];
  uint64_t v20 = &v11[v19];
  uint64_t v21 = &v12[v19];
  int v22 = v14(&v11[v19], 1, v13);
  int v23 = v14(v21, 1, v13);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v20, v21, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v20, 0, 1, v13);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v20, v13);
LABEL_17:
    uint64_t v24 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v20, v21, v13);
LABEL_18:
  uint64_t v25 = v18[6];
  int v26 = &v11[v25];
  uint64_t v27 = &v12[v25];
  int v28 = v14(&v11[v25], 1, v13);
  int v29 = v14(v27, 1, v13);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v26, v27, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v26, 0, 1, v13);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v26, v13);
LABEL_23:
    uint64_t v30 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v26, v27, v13);
LABEL_24:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v11[v31];
  uint64_t v33 = &v12[v31];
  int v34 = v14(&v11[v31], 1, v13);
  int v35 = v14(v33, 1, v13);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v32, v33, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v32, 0, 1, v13);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v32, v13);
LABEL_29:
    uint64_t v36 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_30;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v32, v33, v13);
LABEL_30:
  uint64_t v37 = v18[8];
  int v38 = &v11[v37];
  uint64_t v39 = &v12[v37];
  int v40 = v14(&v11[v37], 1, v13);
  int v41 = v14(v39, 1, v13);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v38, v39, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v38, 0, 1, v13);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v38, v13);
LABEL_35:
    uint64_t v42 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v38, v39, v13);
LABEL_36:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v11[v43];
  uint64_t v45 = &v12[v43];
  int v46 = v14(&v11[v43], 1, v13);
  int v47 = v14(v45, 1, v13);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v44, v45, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v44, 0, 1, v13);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v44, v13);
LABEL_41:
    uint64_t v48 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v44, v45, v13);
LABEL_42:
  uint64_t v49 = v18[10];
  int v50 = &v11[v49];
  uint64_t v51 = &v12[v49];
  int v52 = v14(&v11[v49], 1, v13);
  int v53 = v14(v51, 1, v13);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v50, v51, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v50, 0, 1, v13);
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v50, v13);
LABEL_47:
    uint64_t v54 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_48;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v50, v51, v13);
LABEL_48:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v11[v55];
  uint64_t v57 = &v12[v55];
  int v58 = v14(&v11[v55], 1, v13);
  int v59 = v14(v57, 1, v13);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v56, v57, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v56, 0, 1, v13);
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v56, v13);
LABEL_53:
    uint64_t v60 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_54;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v56, v57, v13);
LABEL_54:
  uint64_t v61 = v18[12];
  int v62 = &v11[v61];
  uint64_t v63 = &v12[v61];
  int v64 = v14(&v11[v61], 1, v13);
  int v65 = v14(v63, 1, v13);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v62, v63, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v62, 0, 1, v13);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v62, v13);
LABEL_59:
    uint64_t v66 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v62, v63, v13);
LABEL_60:
  v11[v18[13]] = v12[v18[13]];
  uint64_t v67 = v18[14];
  int v68 = &v11[v67];
  uint64_t v69 = &v12[v67];
  int v70 = v14(&v11[v67], 1, v13);
  int v71 = v14(v69, 1, v13);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v68, v69, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v68, 0, 1, v13);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v68, v13);
LABEL_65:
    uint64_t v72 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
    goto LABEL_66;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v68, v69, v13);
LABEL_66:
  uint64_t v73 = v18[15];
  int v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  int v76 = v14(&v11[v73], 1, v13);
  int v77 = v14(v75, 1, v13);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v74, v75, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v74, 0, 1, v13);
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v74, v13);
LABEL_71:
    uint64_t v78 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_72;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v74, v75, v13);
LABEL_72:
  uint64_t v79 = v18[16];
  int v80 = &v11[v79];
  uint64_t v81 = &v12[v79];
  int v82 = v14(&v11[v79], 1, v13);
  int v83 = v14(v81, 1, v13);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v80, v81, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v80, 0, 1, v13);
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v109 + 8))(v80, v13);
LABEL_77:
    uint64_t v84 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
    goto LABEL_78;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v80, v81, v13);
LABEL_78:
  uint64_t v85 = v18[17];
  int v86 = &v11[v85];
  uint64_t v87 = &v12[v85];
  int v88 = v14(&v11[v85], 1, v13);
  int v89 = v14(v87, 1, v13);
  if (!v88)
  {
    uint64_t v90 = a2;
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v109 + 40))(v86, v87, v13);
      goto LABEL_84;
    }
    (*(void (**)(char *, uint64_t))(v109 + 8))(v86, v13);
    goto LABEL_83;
  }
  uint64_t v90 = a2;
  if (v89)
  {
LABEL_83:
    uint64_t v91 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v86, v87, *(void *)(*(void *)(v91 - 8) + 64));
    goto LABEL_84;
  }
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v86, v87, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v86, 0, 1, v13);
LABEL_84:
  uint64_t v92 = v18[18];
  uint64_t v93 = &v11[v92];
  uint64_t v94 = &v12[v92];
  *(_DWORD *)uint64_t v93 = *(_DWORD *)v94;
  v93[4] = v94[4];
  v11[v18[19]] = v12[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v11[v95];
  uint64_t v97 = &v12[v95];
  uint64_t v99 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  *(void *)uint64_t v96 = v99;
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRelease();
  uint64_t v100 = v18[21];
  uint64_t v101 = &v11[v100];
  uint64_t v102 = &v12[v100];
  uint64_t v104 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  *(void *)uint64_t v101 = v104;
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRelease();
  uint64_t v105 = *(int *)(v108 + 32);
  uint64_t v106 = *(void **)(a1 + v105);
  *(void *)(a1 + v105) = *(void *)(v90 + v105);

  *(unsigned char *)(a1 + *(int *)(v108 + 36)) = *(unsigned char *)(v90 + *(int *)(v108 + 36));
  return a1;
}

uint64_t sub_100280B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100280BA4);
}

uint64_t sub_100280BA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100280C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100280C68);
}

void *sub_100280C68(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100280D10()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100280DD4(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    unint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v94 = a3;
    uint64_t v95 = a2;
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    int v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    int v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    uint64_t v28 = v19[7];
    int v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    int v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    uint64_t v36 = v19[9];
    uint64_t v37 = &v13[v36];
    int v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    uint64_t v40 = v19[10];
    int v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    int v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    uint64_t v48 = v19[12];
    uint64_t v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    int v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    uint64_t v56 = v19[15];
    uint64_t v57 = &v13[v56];
    int v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    uint64_t v64 = v19[17];
    int v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      uint64_t v67 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    int v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    uint64_t v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    uint64_t v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    int v76 = &v13[v75];
    int v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)int v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v94[7];
    uint64_t v80 = a1 + v79;
    uint64_t v81 = (uint64_t *)((char *)v95 + v79);
    unint64_t v82 = *(uint64_t *)((char *)v95 + v79 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v82 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
    }
    else
    {
      uint64_t v83 = *v81;
      sub_10025ADCC(*v81, v82);
      *(void *)uint64_t v80 = v83;
      *(void *)(v80 + 8) = v82;
    }
    uint64_t v84 = v94[8];
    uint64_t v85 = (uint64_t *)(a1 + v84);
    int v86 = (uint64_t *)((char *)v95 + v84);
    uint64_t v87 = *v86;
    unint64_t v88 = v86[1];
    sub_10025ADCC(*v86, v88);
    uint64_t *v85 = v87;
    v85[1] = v88;
    uint64_t v89 = v94[9];
    uint64_t v90 = v94[10];
    uint64_t v91 = *(void **)((char *)v95 + v89);
    *(void *)(a1 + v89) = v91;
    *(unsigned char *)(a1 + v90) = *((unsigned char *)v95 + v90);
    id v92 = v91;
  }
  return a1;
}

void sub_1002817DC(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + 8;
  swift_bridgeObjectRelease();
  sub_10024D338(v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  long long v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v10 = v5 + v9[5];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v5 + v9[6];
  if (!v8(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = v5 + v9[7];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v5 + v9[8];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v5 + v9[9];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v5 + v9[10];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v5 + v9[11];
  if (!v8(v16, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = v5 + v9[12];
  if (!v8(v17, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = v5 + v9[14];
  if (!v8(v18, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = v5 + v9[15];
  if (!v8(v19, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = v5 + v9[16];
  if (!v8(v20, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = v5 + v9[17];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v22 = (uint64_t *)(a1 + a2[7]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_100250CC4(*v22, v23);
  }
  sub_100250CC4(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  uint64_t v24 = *(void **)(a1 + a2[9]);
}

uint64_t sub_100281C24(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 8, v6, v8);
  id v92 = a3;
  uint64_t v93 = a2;
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  if (v15(&v12[v18], 1, v13))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v17[6];
  unint64_t v23 = &v11[v22];
  uint64_t v24 = &v12[v22];
  if (v15(&v12[v22], 1, v13))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  uint64_t v26 = v17[7];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  if (v15(&v12[v26], 1, v13))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v27, v28, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v17[8];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  if (v15(&v12[v30], 1, v13))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
  }
  uint64_t v34 = v17[9];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  if (v15(&v12[v34], 1, v13))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v35, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  }
  uint64_t v38 = v17[10];
  uint64_t v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  if (v15(&v12[v38], 1, v13))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  uint64_t v42 = v17[11];
  uint64_t v43 = &v11[v42];
  uint64_t v44 = &v12[v42];
  if (v15(&v12[v42], 1, v13))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = v17[12];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  if (v15(&v12[v46], 1, v13))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v47, 0, 1, v13);
  }
  v11[v17[13]] = v12[v17[13]];
  uint64_t v50 = v17[14];
  uint64_t v51 = &v11[v50];
  uint64_t v52 = &v12[v50];
  if (v15(&v12[v50], 1, v13))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v51, v52, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v51, 0, 1, v13);
  }
  uint64_t v54 = v17[15];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  if (v15(&v12[v54], 1, v13))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v56, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
  }
  uint64_t v58 = v17[16];
  uint64_t v59 = &v11[v58];
  uint64_t v60 = &v12[v58];
  if (v15(&v12[v58], 1, v13))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v59, v60, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v13);
  }
  uint64_t v62 = v17[17];
  uint64_t v63 = &v11[v62];
  uint64_t v64 = &v12[v62];
  if (v15(&v12[v62], 1, v13))
  {
    uint64_t v65 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v63, v64, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v63, 0, 1, v13);
  }
  uint64_t v66 = v17[18];
  uint64_t v67 = &v11[v66];
  uint64_t v68 = &v12[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v11[v17[19]] = v12[v17[19]];
  uint64_t v69 = v17[20];
  int v70 = &v11[v69];
  uint64_t v71 = &v12[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)int v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = v17[21];
  uint64_t v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  uint64_t v77 = v92[7];
  uint64_t v78 = a1 + v77;
  uint64_t v79 = (uint64_t *)(v93 + v77);
  unint64_t v80 = *(void *)(v93 + v77 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v80 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
  }
  else
  {
    uint64_t v81 = *v79;
    sub_10025ADCC(*v79, v80);
    *(void *)uint64_t v78 = v81;
    *(void *)(v78 + 8) = v80;
  }
  uint64_t v82 = v92[8];
  uint64_t v83 = (uint64_t *)(a1 + v82);
  uint64_t v84 = (uint64_t *)(v93 + v82);
  uint64_t v85 = *v84;
  unint64_t v86 = v84[1];
  sub_10025ADCC(*v84, v86);
  uint64_t *v83 = v85;
  v83[1] = v86;
  uint64_t v87 = v92[9];
  uint64_t v88 = v92[10];
  uint64_t v89 = *(void **)(v93 + v87);
  *(void *)(a1 + v87) = v89;
  *(unsigned char *)(a1 + v88) = *(unsigned char *)(v93 + v88);
  id v90 = v89;
  return a1;
}

void *sub_1002825E4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4(a1 + 1, v6);
  unint64_t v120 = a3;
  uint64_t v121 = a2;
  uint64_t v7 = a3[6];
  uint64_t v122 = a1;
  uint64_t v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1, v10);
  int v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1, v10);
  int v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1, v10);
  int v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1, v10);
  int v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1, v10);
  int v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1, v10);
  int v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1, v10);
  int v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1, v10);
  int v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1, v10);
  int v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1, v10);
  int v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1, v10);
  int v87 = v12(v85, 1, v10);
  if (v86)
  {
    uint64_t v88 = v121;
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v88 = v121;
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v89 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v84, v85, *(void *)(*(void *)(v89 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v84, v85, v10);
LABEL_79:
  uint64_t v90 = v16[18];
  uint64_t v91 = &v8[v90];
  id v92 = &v9[v90];
  int v93 = *(_DWORD *)v92;
  v91[4] = v92[4];
  *(_DWORD *)uint64_t v91 = v93;
  v8[v16[19]] = v9[v16[19]];
  uint64_t v94 = v16[20];
  uint64_t v95 = &v8[v94];
  uint64_t v96 = &v9[v94];
  *(void *)uint64_t v95 = *(void *)v96;
  *((void *)v95 + 1) = *((void *)v96 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = v16[21];
  uint64_t v98 = &v8[v97];
  uint64_t v99 = &v9[v97];
  *(void *)uint64_t v98 = *(void *)v99;
  *((void *)v98 + 1) = *((void *)v99 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v100 = v120[7];
  uint64_t v101 = (void *)((char *)v122 + v100);
  uint64_t v102 = (void *)((char *)v88 + v100);
  unint64_t v103 = *(void *)((char *)v88 + v100 + 8);
  if (*(void *)((char *)v122 + v100 + 8) >> 60 != 15)
  {
    if (v103 >> 60 != 15)
    {
      uint64_t v105 = *v102;
      sub_10025ADCC(*v102, v103);
      uint64_t v106 = *v101;
      unint64_t v107 = v101[1];
      *uint64_t v101 = v105;
      v101[1] = v103;
      sub_100250CC4(v106, v107);
      goto LABEL_86;
    }
    sub_10026F904((uint64_t)v101);
    goto LABEL_84;
  }
  if (v103 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
    goto LABEL_86;
  }
  uint64_t v104 = *v102;
  sub_10025ADCC(*v102, v103);
  *uint64_t v101 = v104;
  v101[1] = v103;
LABEL_86:
  uint64_t v108 = v120[8];
  uint64_t v109 = (void *)((char *)v122 + v108);
  uint64_t v110 = (void *)((char *)v88 + v108);
  uint64_t v111 = *v110;
  unint64_t v112 = v110[1];
  sub_10025ADCC(*v110, v112);
  uint64_t v113 = *v109;
  unint64_t v114 = v109[1];
  uint64_t *v109 = v111;
  v109[1] = v112;
  sub_100250CC4(v113, v114);
  uint64_t v115 = v120[9];
  uint64_t v116 = *(void **)((char *)v122 + v115);
  uint64_t v117 = *(void **)((char *)v88 + v115);
  *(void *)((char *)v122 + v115) = v117;
  id v118 = v117;

  *((unsigned char *)v122 + v120[10]) = *((unsigned char *)v88 + v120[10]);
  return v122;
}

uint64_t sub_1002834E4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = a3[6];
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  long long v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  int v13 = &v5[v12];
  int v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  int v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  uint64_t v25 = &v5[v24];
  int v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  int v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  uint64_t v37 = &v5[v36];
  int v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  int v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  uint64_t v49 = &v5[v48];
  int v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  int v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  uint64_t v61 = &v5[v60];
  int v62 = &v6[v60];
  *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  *(_OWORD *)&v5[v11[20]] = *(_OWORD *)&v6[v11[20]];
  *(_OWORD *)&v5[v11[21]] = *(_OWORD *)&v6[v11[21]];
  uint64_t v63 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v63) = *(_OWORD *)(a2 + v63);
  uint64_t v64 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v64) = *(unsigned char *)(a2 + v64);
  return a1;
}

uint64_t sub_100283E00(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  unint64_t v114 = a3;
  uint64_t v115 = a2;
  uint64_t v6 = a3[6];
  uint64_t v116 = a1;
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (v85)
  {
    uint64_t v87 = v115;
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v83, v84, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v87 = v115;
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
LABEL_78:
    uint64_t v88 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v83, v84, v9);
LABEL_79:
  uint64_t v89 = v15[18];
  uint64_t v90 = &v7[v89];
  uint64_t v91 = &v8[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v7[v15[19]] = v8[v15[19]];
  uint64_t v92 = v15[20];
  int v93 = &v7[v92];
  uint64_t v94 = &v8[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  *(void *)int v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease();
  uint64_t v97 = v15[21];
  uint64_t v98 = &v7[v97];
  uint64_t v99 = &v8[v97];
  uint64_t v101 = *(void *)v99;
  uint64_t v100 = *((void *)v99 + 1);
  *(void *)uint64_t v98 = v101;
  *((void *)v98 + 1) = v100;
  swift_bridgeObjectRelease();
  uint64_t v102 = v114[7];
  unint64_t v103 = (uint64_t *)(v116 + v102);
  uint64_t v104 = (uint64_t *)(v87 + v102);
  unint64_t v105 = *(void *)(v116 + v102 + 8);
  if (v105 >> 60 != 15)
  {
    unint64_t v106 = v104[1];
    if (v106 >> 60 != 15)
    {
      uint64_t v107 = *v103;
      uint64_t *v103 = *v104;
      v103[1] = v106;
      sub_100250CC4(v107, v105);
      goto LABEL_84;
    }
    sub_10026F904((uint64_t)v103);
  }
  *(_OWORD *)unint64_t v103 = *(_OWORD *)v104;
LABEL_84:
  uint64_t v108 = v114[8];
  uint64_t v109 = *(void *)(v116 + v108);
  unint64_t v110 = *(void *)(v116 + v108 + 8);
  *(_OWORD *)(v116 + v108) = *(_OWORD *)(v87 + v108);
  sub_100250CC4(v109, v110);
  uint64_t v111 = v114[9];
  unint64_t v112 = *(void **)(v116 + v111);
  *(void *)(v116 + v111) = *(void *)(v87 + v111);

  *(unsigned char *)(v116 + v114[10]) = *(unsigned char *)(v87 + v114[10]);
  return v116;
}

uint64_t sub_100284CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100284CB4);
}

uint64_t sub_100284CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100284CCC);
}

uint64_t sub_100284CD0()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100284DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100284DC8);
}

uint64_t sub_100284DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100284DE0);
}

ValueMetadata *_s15MacApprovePhoneVMa()
{
  return &_s15MacApprovePhoneVN;
}

uint64_t sub_100284DF8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    int v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v89 = a3;
    uint64_t v90 = a2;
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    int v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    uint64_t v24 = v19[6];
    int v25 = &v13[v24];
    int v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    uint64_t v36 = v19[9];
    int v37 = &v13[v36];
    int v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    uint64_t v48 = v19[12];
    int v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    uint64_t v56 = v19[15];
    uint64_t v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    uint64_t v60 = v19[16];
    int v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      uint64_t v67 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    uint64_t v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    int v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v89[7];
    int v80 = (uint64_t *)(a1 + v79);
    uint64_t v81 = (uint64_t *)((char *)v90 + v79);
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10025ADCC(v82, v83);
    *int v80 = v82;
    v80[1] = v83;
    uint64_t v84 = v89[8];
    uint64_t v85 = v89[9];
    int v86 = *(void **)((char *)v90 + v84);
    *(void *)(a1 + v84) = v86;
    *(unsigned char *)(a1 + v85) = *((unsigned char *)v90 + v85);
    id v87 = v86;
  }
  return a1;
}

void sub_1002857C4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + 8;
  swift_bridgeObjectRelease();
  sub_10024D338(v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  long long v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v10 = v5 + v9[5];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v5 + v9[6];
  if (!v8(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = v5 + v9[7];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v5 + v9[8];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v5 + v9[9];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v5 + v9[10];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v5 + v9[11];
  if (!v8(v16, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = v5 + v9[12];
  if (!v8(v17, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = v5 + v9[14];
  if (!v8(v18, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = v5 + v9[15];
  if (!v8(v19, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = v5 + v9[16];
  if (!v8(v20, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = v5 + v9[17];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100250CC4(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  uint64_t v22 = *(void **)(a1 + a2[8]);
}

uint64_t sub_100285BEC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 8, v6, v8);
  id v87 = a3;
  uint64_t v88 = a2;
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  if (v15(&v12[v18], 1, v13))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v17[6];
  uint64_t v23 = &v11[v22];
  uint64_t v24 = &v12[v22];
  if (v15(&v12[v22], 1, v13))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  uint64_t v26 = v17[7];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  if (v15(&v12[v26], 1, v13))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v27, v28, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v17[8];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  if (v15(&v12[v30], 1, v13))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
  }
  uint64_t v34 = v17[9];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  if (v15(&v12[v34], 1, v13))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v35, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  }
  uint64_t v38 = v17[10];
  uint64_t v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  if (v15(&v12[v38], 1, v13))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  uint64_t v42 = v17[11];
  uint64_t v43 = &v11[v42];
  uint64_t v44 = &v12[v42];
  if (v15(&v12[v42], 1, v13))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = v17[12];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  if (v15(&v12[v46], 1, v13))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v47, 0, 1, v13);
  }
  v11[v17[13]] = v12[v17[13]];
  uint64_t v50 = v17[14];
  uint64_t v51 = &v11[v50];
  uint64_t v52 = &v12[v50];
  if (v15(&v12[v50], 1, v13))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v51, v52, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v51, 0, 1, v13);
  }
  uint64_t v54 = v17[15];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  if (v15(&v12[v54], 1, v13))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v56, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
  }
  uint64_t v58 = v17[16];
  uint64_t v59 = &v11[v58];
  uint64_t v60 = &v12[v58];
  if (v15(&v12[v58], 1, v13))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v59, v60, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v13);
  }
  uint64_t v62 = v17[17];
  uint64_t v63 = &v11[v62];
  uint64_t v64 = &v12[v62];
  if (v15(&v12[v62], 1, v13))
  {
    uint64_t v65 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v63, v64, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v63, 0, 1, v13);
  }
  uint64_t v66 = v17[18];
  uint64_t v67 = &v11[v66];
  uint64_t v68 = &v12[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v11[v17[19]] = v12[v17[19]];
  uint64_t v69 = v17[20];
  uint64_t v70 = &v11[v69];
  uint64_t v71 = &v12[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = v17[21];
  uint64_t v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  uint64_t v77 = v87[7];
  uint64_t v78 = (uint64_t *)(a1 + v77);
  uint64_t v79 = (uint64_t *)(v88 + v77);
  uint64_t v80 = *v79;
  unint64_t v81 = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10025ADCC(v80, v81);
  *uint64_t v78 = v80;
  v78[1] = v81;
  uint64_t v82 = v87[8];
  uint64_t v83 = v87[9];
  uint64_t v84 = *(void **)(v88 + v82);
  *(void *)(a1 + v82) = v84;
  *(unsigned char *)(a1 + v83) = *(unsigned char *)(v88 + v83);
  id v85 = v84;
  return a1;
}

void *sub_100286570(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4(a1 + 1, v6);
  uint64_t v111 = a2;
  uint64_t v7 = a3[6];
  unint64_t v112 = a1;
  uint64_t v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1, v10);
  int v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1, v10);
  int v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1, v10);
  int v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1, v10);
  int v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1, v10);
  int v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1, v10);
  int v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1, v10);
  int v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1, v10);
  int v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1, v10);
  int v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1, v10);
  int v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  id v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1, v10);
  int v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  int v92 = *(_DWORD *)v91;
  v90[4] = v91[4];
  *(_DWORD *)uint64_t v90 = v92;
  v8[v16[19]] = v9[v16[19]];
  uint64_t v93 = v16[20];
  uint64_t v94 = &v8[v93];
  uint64_t v95 = &v9[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = v16[21];
  uint64_t v97 = &v8[v96];
  uint64_t v98 = &v9[v96];
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = *((void *)v98 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v99 = a3[7];
  uint64_t v100 = (void *)((char *)v112 + v99);
  uint64_t v101 = (void *)((char *)v111 + v99);
  uint64_t v102 = *v101;
  unint64_t v103 = v101[1];
  sub_10025ADCC(*v101, v103);
  uint64_t v104 = *v100;
  unint64_t v105 = v100[1];
  *uint64_t v100 = v102;
  v100[1] = v103;
  sub_100250CC4(v104, v105);
  uint64_t v106 = a3[8];
  uint64_t v107 = *(void **)((char *)v112 + v106);
  uint64_t v108 = *(void **)((char *)v111 + v106);
  *(void *)((char *)v112 + v106) = v108;
  id v109 = v108;

  *((unsigned char *)v112 + a3[9]) = *((unsigned char *)v111 + a3[9]);
  return v112;
}

uint64_t sub_1002873E8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = a3[6];
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  long long v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  int v13 = &v5[v12];
  int v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  int v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  uint64_t v25 = &v5[v24];
  int v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  int v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  uint64_t v37 = &v5[v36];
  int v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  int v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  uint64_t v49 = &v5[v48];
  int v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  int v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  uint64_t v61 = &v5[v60];
  int v62 = &v6[v60];
  *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  *(_OWORD *)&v5[v11[20]] = *(_OWORD *)&v6[v11[20]];
  *(_OWORD *)&v5[v11[21]] = *(_OWORD *)&v6[v11[21]];
  uint64_t v63 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v63) = *(void *)(a2 + v63);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100287CFC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v107 = a2;
  uint64_t v6 = a3[6];
  uint64_t v108 = a1;
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (!v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v83, v84, v9);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
    goto LABEL_78;
  }
  if (v86)
  {
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v83, v84, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  uint64_t v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
  v89[4] = v90[4];
  v7[v15[19]] = v8[v15[19]];
  uint64_t v91 = v15[20];
  int v92 = &v7[v91];
  uint64_t v93 = &v8[v91];
  uint64_t v95 = *(void *)v93;
  uint64_t v94 = *((void *)v93 + 1);
  *(void *)int v92 = v95;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = v15[21];
  uint64_t v97 = &v7[v96];
  uint64_t v98 = &v8[v96];
  uint64_t v100 = *(void *)v98;
  uint64_t v99 = *((void *)v98 + 1);
  *(void *)uint64_t v97 = v100;
  *((void *)v97 + 1) = v99;
  swift_bridgeObjectRelease();
  uint64_t v101 = a3[7];
  uint64_t v102 = *(void *)(v108 + v101);
  unint64_t v103 = *(void *)(v108 + v101 + 8);
  *(_OWORD *)(v108 + v101) = *(_OWORD *)(v107 + v101);
  sub_100250CC4(v102, v103);
  uint64_t v104 = a3[8];
  unint64_t v105 = *(void **)(v108 + v104);
  *(void *)(v108 + v104) = *(void *)(v107 + v104);

  *(unsigned char *)(v108 + a3[9]) = *(unsigned char *)(v107 + a3[9]);
  return v108;
}

uint64_t sub_100288B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100288B58);
}

uint64_t sub_100288B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100288B70);
}

uint64_t sub_100288B74()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100288C34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    v11(a1 + 8, v8, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    int v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v80 = a3;
    uint64_t v81 = a2;
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    int v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    uint64_t v24 = v19[6];
    int v25 = &v13[v24];
    int v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    uint64_t v36 = v19[9];
    int v37 = &v13[v36];
    int v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    uint64_t v48 = v19[12];
    int v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    uint64_t v56 = v19[15];
    uint64_t v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    uint64_t v60 = v19[16];
    int v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      uint64_t v67 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    uint64_t v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    int v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    *(unsigned char *)(a1 + *(int *)(v80 + 28)) = *((unsigned char *)v81 + *(int *)(v80 + 28));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1002895D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  swift_bridgeObjectRelease();
  sub_10024D338(v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  long long v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v10 = v5 + v9[5];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v5 + v9[6];
  if (!v8(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = v5 + v9[7];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v5 + v9[8];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v5 + v9[9];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v5 + v9[10];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v5 + v9[11];
  if (!v8(v16, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = v5 + v9[12];
  if (!v8(v17, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = v5 + v9[14];
  if (!v8(v18, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = v5 + v9[15];
  if (!v8(v19, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = v5 + v9[16];
  if (!v8(v20, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = v5 + v9[17];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002899D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 8, v6, v8);
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  if (v15(&v12[v18], 1, v13))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v17[6];
  uint64_t v23 = &v11[v22];
  uint64_t v24 = &v12[v22];
  if (v15(&v12[v22], 1, v13))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  uint64_t v26 = v17[7];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  if (v15(&v12[v26], 1, v13))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v27, v28, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v17[8];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  if (v15(&v12[v30], 1, v13))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
  }
  uint64_t v34 = v17[9];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  if (v15(&v12[v34], 1, v13))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v35, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  }
  uint64_t v38 = v17[10];
  uint64_t v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  if (v15(&v12[v38], 1, v13))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  uint64_t v42 = v17[11];
  uint64_t v43 = &v11[v42];
  uint64_t v44 = &v12[v42];
  if (v15(&v12[v42], 1, v13))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = v17[12];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  if (v15(&v12[v46], 1, v13))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v47, 0, 1, v13);
  }
  v11[v17[13]] = v12[v17[13]];
  uint64_t v50 = v17[14];
  uint64_t v51 = &v11[v50];
  uint64_t v52 = &v12[v50];
  if (v15(&v12[v50], 1, v13))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v51, v52, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v51, 0, 1, v13);
  }
  uint64_t v54 = v17[15];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  if (v15(&v12[v54], 1, v13))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v56, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
  }
  uint64_t v58 = v17[16];
  uint64_t v59 = &v11[v58];
  uint64_t v60 = &v12[v58];
  if (v15(&v12[v58], 1, v13))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v59, v60, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v13);
  }
  uint64_t v62 = v17[17];
  uint64_t v63 = &v11[v62];
  uint64_t v64 = &v12[v62];
  if (v15(&v12[v62], 1, v13))
  {
    uint64_t v65 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v63, v64, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v63, 0, 1, v13);
  }
  uint64_t v66 = v17[18];
  uint64_t v67 = &v11[v66];
  uint64_t v68 = &v12[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v11[v17[19]] = v12[v17[19]];
  uint64_t v69 = v17[20];
  uint64_t v70 = &v11[v69];
  uint64_t v71 = &v12[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = v17[21];
  uint64_t v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  *(unsigned char *)(a1 + *(int *)(v78 + 28)) = *(unsigned char *)(v79 + *(int *)(v78 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10028A330(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4(a1 + 1, v6);
  uint64_t v100 = a2;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v101 = a1;
  uint64_t v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1, v10);
  int v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1, v10);
  int v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1, v10);
  int v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1, v10);
  int v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1, v10);
  int v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1, v10);
  int v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1, v10);
  int v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1, v10);
  int v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1, v10);
  int v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1, v10);
  int v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  int v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1, v10);
  int v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  int v92 = *(_DWORD *)v91;
  v90[4] = v91[4];
  *(_DWORD *)uint64_t v90 = v92;
  v8[v16[19]] = v9[v16[19]];
  uint64_t v93 = v16[20];
  uint64_t v94 = &v8[v93];
  uint64_t v95 = &v9[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = v16[21];
  uint64_t v97 = &v8[v96];
  uint64_t v98 = &v9[v96];
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = *((void *)v98 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = v101;
  *((unsigned char *)v101 + *(int *)(a3 + 28)) = *((unsigned char *)v100 + *(int *)(a3 + 28));
  return result;
}

uint64_t sub_10028B164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  long long v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  int v13 = &v5[v12];
  int v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  int v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  uint64_t v25 = &v5[v24];
  int v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  int v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  uint64_t v37 = &v5[v36];
  int v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  int v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  uint64_t v49 = &v5[v48];
  int v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  int v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  uint64_t v61 = &v5[v60];
  int v62 = &v6[v60];
  *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  *(_OWORD *)&v5[v11[20]] = *(_OWORD *)&v6[v11[20]];
  *(_OWORD *)&v5[v11[21]] = *(_OWORD *)&v6[v11[21]];
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10028BA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v102 = a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v103 = a1;
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (!v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v83, v84, v9);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
    goto LABEL_78;
  }
  if (v86)
  {
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v83, v84, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  uint64_t v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
  v89[4] = v90[4];
  v7[v15[19]] = v8[v15[19]];
  uint64_t v91 = v15[20];
  int v92 = &v7[v91];
  uint64_t v93 = &v8[v91];
  uint64_t v95 = *(void *)v93;
  uint64_t v94 = *((void *)v93 + 1);
  *(void *)int v92 = v95;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = v15[21];
  uint64_t v97 = &v7[v96];
  uint64_t v98 = &v8[v96];
  uint64_t v100 = *(void *)v98;
  uint64_t v99 = *((void *)v98 + 1);
  *(void *)uint64_t v97 = v100;
  *((void *)v97 + 1) = v99;
  swift_bridgeObjectRelease();
  uint64_t result = v103;
  *(unsigned char *)(v103 + *(int *)(a3 + 28)) = *(unsigned char *)(v102 + *(int *)(a3 + 28));
  return result;
}

uint64_t sub_10028C87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028C890);
}

uint64_t sub_10028C894(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10028C944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10028C958);
}

void *sub_10028C95C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10028CA04()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10028CAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10028CE24(a1, a2, a3);
}

uint64_t sub_10028CAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10028CC8C(a1, a2, a3, (void (*)(void))&type metadata accessor for SFAirDropReceive.ItemDestination);
}

uint64_t sub_10028CAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A7E8(a1, &qword_10096C920);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_10000A844(&qword_10096C4C0);
  return swift_task_create();
}

uint64_t sub_10028CC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10028CC8C(a1, a2, a3, (void (*)(void))&type metadata accessor for SFAirDrop.ContactRequest);
}

uint64_t sub_10028CC8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A7E8(a1, &qword_10096C920);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  a4(0);
  return swift_task_create();
}

uint64_t sub_10028CE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10028CE24(a1, a2, a3);
}

uint64_t sub_10028CE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10000A7E8(a1, &qword_10096C920);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10028CFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000092EC(a1, a2, a3);
}

uint64_t sub_10028CFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A7E8(a1, &qword_10096C920);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_10000A844(&qword_10096C4C0);
  return swift_task_create();
}

uint64_t sub_10028D188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000092EC(a1, a2, a3);
}

uint64_t sub_10028D1B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096C1C0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096C1C0);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

NSString sub_10028D278()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100994300 = (uint64_t)result;
  return result;
}

NSString sub_10028D2B0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100994308 = (uint64_t)result;
  return result;
}

NSString sub_10028D2E8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100994310 = (uint64_t)result;
  return result;
}

uint64_t sub_10028D320()
{
  uint64_t v1 = sub_10000A844((uint64_t *)&unk_10096C480);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SDNearFieldTap();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v20 - v10;
  __chkstk_darwin(v9);
  int v13 = (char *)&v20 - v12;
  uint64_t v14 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
  swift_beginAccess();
  sub_10024A330(v14, (uint64_t)v3, (uint64_t *)&unk_10096C480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10000A7E8((uint64_t)v3, (uint64_t *)&unk_10096C480);
  }
  else
  {
    sub_1002AD36C((uint64_t)v3, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    uint64_t result = (uint64_t)[self sharedMonitor];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = (void *)result;
    unsigned int v17 = [(id)result deviceKeyBagLocked];

    sub_1002AD36C((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    if (v17)
    {
      int v18 = v11[*(int *)(v4 + 48)];
      sub_1002AD36C((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      if (v18 == 1)
      {
        sub_1002AD3D4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
        return 1;
      }
      uint64_t v19 = *(void *)&v8[*(int *)(v4 + 24) + 8];
      swift_bridgeObjectRetain();
      sub_1002AD3D4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      if (v19)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    else
    {
      sub_1002AD3D4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    }
  }
  return 0;
}

uint64_t sub_10028D604()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

void (*sub_10028D67C(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return sub_10028D708;
}

void sub_10028D708(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();

  free(v1);
}

void sub_10028D770()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_notificationCenter];
  [v2 addObserver:v1 selector:"keyBagLockStateChangeWithNotification:" name:@"com.apple.sharingd.KeyBagLockStatusChanged" object:0];
  [v2 addObserver:v1 selector:"handleAirDropAllowedChanged" name:@"com.apple.sharingd.AirDropAllowedChanged" object:0];
  [v2 addObserver:v1 selector:"handleWifiStateChanged" name:@"com.apple.sharingd.WirelessPowerChanged" object:0];
  [v2 addObserver:v1 selector:"screenStateChangedWithNotification:" name:@"com.apple.sharingd.ScreenStateChanged" object:0];
  [v2 addObserver:v1 selector:"handleSystemUIChanged" name:@"com.apple.sharingd.SystemUIChanged" object:0];
  sub_10000B740(0, &qword_10096C6D8);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v4 = [ObjCClassFromMetadata defaultCenter];
  if (qword_100969B10 != -1) {
    swift_once();
  }
  [v4 addObserver:v1 selector:"handleProximityAppleIDSignInStarted" name:qword_100994308 object:0];

  id v5 = [ObjCClassFromMetadata defaultCenter];
  if (qword_100969B18 != -1) {
    swift_once();
  }
  [v5 addObserver:v1 selector:"handleProximityAppleIDSignInCompleted" name:qword_100994310 object:0];

  uint64_t v6 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v6, v1, (CFNotificationCallback)sub_10029A378, BYSetupAssistantExitedDarwinNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  int out_token = 0;
  uint64_t v7 = (const char *)[SFNotificationAirDropNearbySharingChanged UTF8String];
  sub_10000B740(0, (unint64_t *)&qword_10096A1A0);
  uint64_t v8 = static OS_dispatch_queue.main.getter();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v11[4] = sub_1002AF7A8;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1006CBFC8;
  v11[3] = &unk_1008D5058;
  uint64_t v10 = _Block_copy(v11);
  swift_release();
  notify_register_dispatch(v7, &out_token, v8, v10);
  _Block_release(v10);
}

id sub_10028DAEC()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  [*(id *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_notificationCenter] removeObserver:v0];
  sub_10000B740(0, &qword_10096C6D8);
  id v2 = [(id)swift_getObjCClassFromMetadata() defaultCenter];
  [v2 removeObserver:v0];

  uint64_t v3 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v3, v0);

  v5.receiver = v0;
  v5.super_class = ObjectType;
  return [super dealloc];
}

uint64_t sub_10028DD84()
{
  return type metadata accessor for SDAirDropNearFieldService(0);
}

uint64_t type metadata accessor for SDAirDropNearFieldService(uint64_t a1)
{
  return sub_10000B93C(a1, (uint64_t *)&unk_10096C278);
}

void sub_10028DDAC(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v110 = (uint64_t)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  id v109 = (char *)&v105 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v120 = (uint64_t)&v105 - v10;
  __chkstk_darwin(v9);
  uint64_t v122 = (char *)&v105 - v11;
  uint64_t v124 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v124 - 8);
  uint64_t v13 = __chkstk_darwin(v124);
  unint64_t v112 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  unsigned int v17 = (char *)&v105 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v105 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v107 = (char *)&v105 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v114 = (char *)&v105 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v116 = (char *)&v105 - v26;
  __chkstk_darwin(v25);
  unint64_t v119 = (char *)&v105 - v27;
  uint64_t v28 = sub_10000A844(&qword_100974EA0);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v113 = (uint64_t)&v105 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v121 = (char *)&v105 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v105 - v34;
  __chkstk_darwin(v33);
  int v37 = (char *)&v105 - v36;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v39 = sub_10000B47C(v38, (uint64_t)qword_10096C1C0);
  uint64_t v115 = (uint8_t *)a1;
  sub_10024A330(a1, (uint64_t)v37, &qword_100974EA0);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  uint64_t v111 = v20;
  uint64_t v123 = v39;
  uint64_t v108 = v17;
  if (v42)
  {
    uint64_t v117 = v2;
    int v43 = (uint8_t *)swift_slowAlloc();
    v127[0] = swift_slowAlloc();
    *(_DWORD *)int v43 = 136315138;
    sub_10024A330((uint64_t)v37, (uint64_t)v35, &qword_100974EA0);
    uint64_t v44 = v124;
    int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v35, 1, v124);
    uint64_t v118 = v12;
    if (v45 == 1)
    {
      sub_10000A7E8((uint64_t)v35, &qword_100974EA0);
      unint64_t v46 = 0xEA00000000004449;
      uint64_t v47 = 0x20746E6572727563;
    }
    else
    {
      uint64_t v47 = UUID.uuidString.getter();
      unint64_t v46 = v48;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v35, v44);
    }
    id v2 = v117;
    v125[0] = sub_100254634(v47, v46, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10000A7E8((uint64_t)v37, &qword_100974EA0);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "SDAirDropNearFieldService: requested end nearby sharing interaction:%s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v12 = v118;
  }
  else
  {
    sub_10000A7E8((uint64_t)v37, &qword_100974EA0);
  }
  uint64_t v49 = (uint64_t)v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess();
  uint64_t v106 = v49;
  uint64_t v50 = v49;
  uint64_t v51 = v120;
  sub_10024A330(v50, v120, (uint64_t *)&unk_10096C2A0);
  uint64_t v52 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v51, 1, v52);
  uint64_t v56 = (uint64_t)v122;
  if (v55 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10000A7E8(v51, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v122, v51, v52);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v56, 0, 1, v52);
  }
  if (v54(v56, 1, v52) == 1)
  {
    sub_10000A7E8(v56, (uint64_t *)&unk_10096C2A0);
    uint64_t v57 = (uint64_t)v121;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v121, 1, 1, v124);
LABEL_15:
    sub_10000A7E8(v57, &qword_100974EA0);
    int v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "SDAirDropNearFieldService: ignoring request to end request nearby sharing interaction, no current interaction", v64, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v58 = v121;
  SFAirDrop.NearbySharingInteraction.id.getter();
  uint64_t v59 = v56;
  uint64_t v57 = (uint64_t)v58;
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v59, v52);
  uint64_t v60 = v124;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v58, 0, 1, v124);
  int v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v61(v58, 1, v60) == 1) {
    goto LABEL_15;
  }
  uint64_t v120 = v53;
  uint64_t v117 = v2;
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v66 = v119;
  v65(v119, v58, v60);
  uint64_t v67 = v113;
  sub_10024A330((uint64_t)v115, v113, &qword_100974EA0);
  int v68 = v114;
  uint64_t v121 = *(char **)(v12 + 16);
  uint64_t v122 = (char *)(v12 + 16);
  ((void (*)(char *, char *, uint64_t))v121)(v114, v66, v60);
  if (v61((char *)v67, 1, v60) == 1)
  {
    uint64_t v69 = (uint64_t)v116;
    v65(v116, v68, v60);
    sub_10000A7E8(v67, &qword_100974EA0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v68, v60);
    uint64_t v69 = (uint64_t)v116;
    v65(v116, (char *)v67, v60);
  }
  uint64_t v118 = v12;
  uint64_t v70 = v119;
  char v71 = static UUID.== infix(_:_:)();
  uint64_t v72 = v120;
  if (v71)
  {
    int v73 = v107;
    ((void (*)(char *, uint64_t, uint64_t))v121)(v107, v69, v60);
    int v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      v125[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v76 = 136315138;
      uint64_t v115 = v76 + 4;
      sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v126 = sub_100254634(v77, v78, v125);
      uint64_t v60 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int v79 = *(void (**)(char *, uint64_t))(v118 + 8);
      v79(v73, v60);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "SDAirDropNearFieldService: end nearby sharing interaction:%s", v76, 0xCu);
      swift_arrayDestroy();
      int v80 = v79;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      int v80 = *(void (**)(char *, uint64_t))(v118 + 8);
      v80(v73, v60);
    }

    uint64_t v94 = v117;
    sub_100498700(v69);
    uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
    uint64_t v96 = (uint64_t)v109;
    v95(v109, 1, 1, v52);
    uint64_t v97 = v106;
    swift_beginAccess();
    sub_10026B410(v96, v97, (uint64_t *)&unk_10096C2A0);
    swift_endAccess();
    v95((char *)v96, 1, 1, v52);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10024A330(v96, v110, (uint64_t *)&unk_10096C2A0);
    v94;
    static Published.subscript.setter();
    sub_10000A7E8(v96, (uint64_t *)&unk_10096C2A0);
    uint64_t v98 = v111;
    ((void (*)(char *, uint64_t, uint64_t))v121)(v111, v69, v60);
    uint64_t v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v99, v100))
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      v125[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v101 = 136315138;
      sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v126 = sub_100254634(v102, v103, v125);
      uint64_t v60 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v80(v98, v60);
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "SDAirDropNearFieldService: Removing all assertions for nearby sharing interaction:%s", v101, 0xCu);
      swift_arrayDestroy();
      uint64_t v69 = (uint64_t)v116;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v80(v98, v60);
    }

    swift_beginAccess();
    sub_1002A862C(v69);
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_100295364();
    v80((char *)v69, v60);
    v80(v119, v60);
  }
  else
  {
    uint64_t v81 = v108;
    uint64_t v82 = v121;
    ((void (*)(char *, uint64_t, uint64_t))v121)(v108, v69, v60);
    uint64_t v83 = v112;
    ((void (*)(char *, char *, uint64_t))v82)(v112, v70, v60);
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.default.getter();
    int v86 = v85;
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v87 = swift_slowAlloc();
      uint64_t v123 = swift_slowAlloc();
      v125[0] = v123;
      *(_DWORD *)uint64_t v87 = 136315394;
      sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v126 = sub_100254634(v88, v89, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      LODWORD(v122) = v86;
      uint64_t v90 = *(void (**)(char *, uint64_t))(v118 + 8);
      v90(v81, v60);
      *(_WORD *)(v87 + 12) = 2080;
      uint64_t v91 = v112;
      uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v126 = sub_100254634(v92, v93, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v90(v91, v60);
      _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v122, "SDAirDropNearFieldService: ignoring request to end nearby sharing interaction:%s currentID:%s", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v90(v116, v60);
      v90(v119, v60);
    }
    else
    {

      uint64_t v104 = *(void (**)(char *, uint64_t))(v118 + 8);
      v104(v83, v60);
      v104(v81, v60);
      v104((char *)v69, v60);
      v104(v70, v60);
    }
  }
}

void sub_10028EDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v61 = a1;
  uint64_t v7 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v7 - 8);
  uint64_t v54 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v60 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  int v55 = (char *)&v46 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v46 - v19;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10000B47C(v21, (uint64_t)qword_10096C1C0);
  unint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v48(v20, a3, v13);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v62 = v14;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v57 = a3;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v58 = v3;
    v65[0] = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v47 = a2;
    sub_10000B980(&qword_10096C5D8, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v63 = sub_100254634(v28, v29, v65);
    a2 = v47;
    uint64_t v14 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void (**)(char *, uint64_t))(v14 + 8);
    v59(v20, v13);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "SDAirDropNearFieldService: connected… for interactionType:%s", v26, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v58;
    swift_slowDealloc();
    a3 = v57;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, uint64_t))(v14 + 8);
    v59(v20, v13);
  }

  uint64_t v30 = sub_10028D67C(v65);
  uint64_t v32 = v31;
  uint64_t v33 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33))
  {
    ((void (*)(uint64_t *, void))v30)(v65, 0);
  }
  else
  {
    v48(v55, a3, v13);
    uint64_t v34 = (int *)type metadata accessor for SDNearFieldTap();
    uint64_t v35 = v34[15];
    uint64_t v57 = a3;
    uint64_t v58 = v4;
    uint64_t v36 = v61;
    uint64_t v37 = v49;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
    uint64_t v47 = v32;
    uint64_t v39 = v50;
    v38(v56, v61 + v35, v50);
    unint64_t v48 = (void (*)(char *, uint64_t, uint64_t))v30;
    uint64_t v40 = v54;
    v38(v54, a2, v39);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, v39);
    uint64_t v41 = *(void *)(v36 + v34[7]);
    uint64_t v49 = *(void *)(v36 + v34[6]);
    uint64_t v50 = v41;
    uint64_t v46 = *(void *)(v36 + v34[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = v62;
    BOOL v42 = v51;
    SFAirDrop.NearbySharingInteraction.ConnectionContext.init(type:transactionIdentifier:endpointIdentifier:contactIdentifier:deviceName:deviceModel:accountID:isSameAccount:)();
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v42, enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:), v53);
    SFAirDrop.NearbySharingInteraction.state.setter();
    ((void (*)(uint64_t *, void))v48)(v65, 0);
  }
  int v43 = v60;
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v60, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:), v13);
  sub_10000B980(&qword_10096C5D0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v65[0] == v63 && v65[1] == v64)
  {
    swift_bridgeObjectRelease_n();
    v59(v43, v13);
  }
  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59(v43, v13);
    if ((v44 & 1) == 0) {
      return;
    }
  }
  uint64_t v45 = type metadata accessor for SDNearFieldTap();
  sub_10028F584(a2, (*(unsigned char *)(v61 + *(int *)(v45 + 44)) & 1) == 0, v61 + *(int *)(v45 + 60));
}

void sub_10028F584(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v43 = a3;
  int v45 = a2;
  uint64_t v4 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v4 - 8);
  uint64_t v48 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v46 = (char *)&v39 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v39 - v13;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000B47C(v15, (uint64_t)qword_10096C1C0);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v41(v14, a1, v6);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v47 = v7;
  uint64_t v42 = a1;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v50 = v20;
    *(_DWORD *)uint64_t v19 = 67109378;
    char v21 = v45;
    LODWORD(v49) = v45 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 8) = 2080;
    uint64_t v39 = v19 + 10;
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v49 = sub_100254634(v22, v23, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char v24 = v21;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v6);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SDAirDropNearFieldService: start NameDrop flow {isActive: %{BOOL}d endpointIdentifier: %s}", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    uint64_t v10 = v40;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = v46;
    if ((v24 & 1) == 0) {
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);

    uint64_t v25 = v46;
    if ((v45 & 1) == 0) {
      return;
    }
  }
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v48, 1, 1, v26);
  uint64_t v27 = v41;
  v41(v25, v42, v6);
  v27(v10, v43, v6);
  uint64_t v28 = qword_100969B90;
  id v29 = v44;
  uint64_t v30 = v10;
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v31 = static AirDropActor.shared;
  uint64_t v32 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v33 = v47;
  uint64_t v34 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v35 = (v34 + 40) & ~v34;
  uint64_t v36 = (v8 + v34 + v35) & ~v34;
  uint64_t v37 = (char *)swift_allocObject();
  *((void *)v37 + 2) = v31;
  *((void *)v37 + 3) = v32;
  *((void *)v37 + 4) = v29;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v38(&v37[v35], v25, v6);
  v38(&v37[v36], v30, v6);
  swift_retain();
  sub_1000092EC(v48, (uint64_t)&unk_10096C5E8, (uint64_t)v37);
  swift_release();
}

BOOL sub_10028FAC0(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v3) {
    return 0;
  }
  id v4 = [v3 currentApplicationLabel];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = type metadata accessor for SDNearFieldTap();
  sub_10024A1FC();
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(v6 + 68));
  return v8 != 2 && (v8 & 1) == 0;
}

uint64_t sub_10028FC08(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
  uint64_t result = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!result) {
    return result;
  }
  uint64_t v5 = v1;
  uint64_t v6 = &selRef_awdlStart;
  id v7 = [(id)result currentApplicationLabel];
  if (v7)
  {
    int v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v9 = type metadata accessor for SDNearFieldTap();
    sub_10024A1FC();
    if (StringProtocol.contains<A>(_:)())
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = &selRef_awdlStart;
    }
    else
    {
      char v10 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v6 = &selRef_awdlStart;
      if ((v10 & 1) == 0) {
        goto LABEL_10;
      }
    }
    int v11 = *(unsigned __int8 *)(a1 + *(int *)(v9 + 68));
    if (v11 != 2 && (v11 & 1) == 0) {
      return 0;
    }
  }
LABEL_10:
  uint64_t result = *(void *)(v5 + v3);
  if (result)
  {
    uint64_t result = (uint64_t)[(id)result v6[506]];
    if (result)
    {
      uint64_t v13 = (void *)result;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      os_log_type_t v17 = (void *)(a1 + *(int *)(type metadata accessor for SDNearFieldTap() + 40));
      if (*v17 == 0xD000000000000013 && v17[1] == 0x80000001007B76F0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (type metadata accessor for SFAirDropClient(),
            v18._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter(),
            Swift::Bool v19 = String.hasPrefix(_:)(v18),
            swift_bridgeObjectRelease(),
            v19))
      {
        if (v14 == 0xD000000000000013 && v16 == 0x80000001007B76F0
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
        type metadata accessor for SFAirDropClient();
        v20._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter();
        Swift::Bool v21 = String.hasPrefix(_:)(v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v21) {
          return 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_10028FEB4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SDNearFieldTap();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v6) {
    return 0;
  }
  id v7 = [v6 currentApplicationLabel];
  if (!v7) {
    return 0;
  }
  int v8 = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for SFAirDropClient();
  v9._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter();
  Swift::Bool v10 = String.hasPrefix(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002AE574(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  if (!v10)
  {
    v11._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter();
    Swift::Bool v12 = String.hasPrefix(_:)(v11);
    swift_bridgeObjectRelease();
    sub_1002AD3D4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    if (v12) {
      return !sub_10028FAC0(a1);
    }
    return 0;
  }
  sub_1002AD3D4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  return !sub_10028FAC0(a1);
}

uint64_t sub_10029005C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SDNearFieldTap();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (v6 && (id v7 = [v6 currentApplicationLabel]) != 0)
  {
    int v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (v9 == 0xD00000000000001BLL && v11 == 0x80000001007B7860)
    {
      swift_bridgeObjectRelease();
      sub_1002AE574(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      char v12 = 1;
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      sub_1002AE574(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      if ((v13 & 1) != 0
        || (uint64_t v14 = &v5[*(int *)(v3 + 40)], *(void *)v14 == 0xD00000000000001BLL)
        && *((void *)v14 + 1) == 0x80000001007B7860)
      {
        char v12 = 1;
      }
      else
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
    sub_1002AD3D4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_10029022C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SDNearFieldTap();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A844(&qword_10096C618);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = sub_10029005C(a1);
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  uint64_t v11 = (void *)static NSUserDefaults.airdrop.getter();
  SFAirDropUserDefaults.boopInteractionTypeOverride.getter();

  uint64_t v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v9, v12);
  }
  sub_10000A7E8((uint64_t)v9, &qword_10096C618);
  if (v10)
  {
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.peerPayment(_:);
  }
  else if (sub_10028FEB4(a1))
  {
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:);
  }
  else if (sub_10028FC08(a1))
  {
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.generic(_:);
  }
  else if (sub_1002ADD48(a1))
  {
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:);
  }
  else
  {
    int v16 = *(unsigned __int8 *)(a1 + *(int *)(v4 + 48));
    sub_1002AE574(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    if (v16 == 1)
    {
      sub_1002AD3D4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    }
    else
    {
      uint64_t v17 = *(void *)&v6[*(int *)(v4 + 24) + 8];
      sub_1002AD3D4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      if (!v17)
      {
        uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.unknown(_:);
        return (*(uint64_t (**)(uint64_t, void, uint64_t))(v13 + 104))(a2, *v14, v12);
      }
    }
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.share(_:);
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v13 + 104))(a2, *v14, v12);
}

uint64_t sub_1002904E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.PollingType();
  uint64_t v91 = *(void *)(v6 - 8);
  uint64_t v92 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v89 = &v73[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  char v10 = &v73[-v9];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v87 = *(void *)(v11 - 8);
  uint64_t v88 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  int v79 = &v73[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  int v80 = &v73[-v14];
  uint64_t v15 = sub_10000A844((uint64_t *)&unk_10096C4D0);
  __chkstk_darwin(v15 - 8);
  uint64_t v84 = &v73[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = sub_10000A844(&qword_100974EA0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  os_log_type_t v85 = &v73[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  unint64_t v78 = &v73[-v20];
  uint64_t v21 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  __chkstk_darwin(v21 - 8);
  uint64_t v83 = &v73[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = type metadata accessor for SFClientIdentity();
  uint64_t v93 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v25 = &v73[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  id v29 = &v73[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_10000B47C(v30, (uint64_t)qword_10096C1C0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 16))(v29, a1, v26);
  uint64_t v31 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v93 + 16);
  uint64_t v86 = a2;
  uint64_t v81 = v31;
  uint64_t v82 = v93 + 16;
  v31(v25, a2, v23);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  int v34 = v33;
  BOOL v35 = os_log_type_enabled(v32, v33);
  uint64_t v90 = v10;
  if (v35)
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v77 = v3;
    uint64_t v37 = v36;
    uint64_t v75 = swift_slowAlloc();
    v95[0] = v75;
    *(_DWORD *)uint64_t v37 = 136315394;
    int v74 = v34;
    uint64_t v38 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter();
    uint64_t v94 = sub_100254634(v38, v39, v95);
    uint64_t v76 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v29, v26);
    *(_WORD *)(v37 + 12) = 2080;
    sub_10000B980(&qword_10096C510, (void (*)(uint64_t))&type metadata accessor for SFClientIdentity);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v94 = sub_100254634(v40, v41, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v42 = v93;
    (*(void (**)(unsigned char *, uint64_t))(v93 + 8))(v25, v23);
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v74, "SDAirDropNearFieldService: start active nearby sharing discovery: %s for client: %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v77;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v29, v26);
    uint64_t v42 = v93;
    (*(void (**)(unsigned char *, uint64_t))(v93 + 8))(v25, v23);
  }

  uint64_t v43 = v23;
  uint64_t v44 = v42;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v45 = (uint64_t)v83;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v46 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46);
  sub_10000A7E8(v45, (uint64_t *)&unk_10096C2A0);
  uint64_t v49 = v87;
  uint64_t v48 = v88;
  if (v47 != 1)
  {
    uint64_t v50 = (uint64_t)v78;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v78, 1, 1, v88);
    sub_10028DDAC(v50);
    sub_10000A7E8(v50, &qword_100974EA0);
  }
  uint64_t v51 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter();
  uint64_t v53 = v52;
  uint64_t v54 = (uint64_t)v84;
  v81(v84, v86, v43);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v54, 0, 1, v43);
  swift_beginAccess();
  sub_10046680C(v54, v51, v53);
  swift_endAccess();
  uint64_t v55 = (uint64_t)v85;
  SFClientIdentity.connectionID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v55, 1, v48) == 1)
  {
    sub_10000A7E8(v55, &qword_100974EA0);
  }
  else
  {
    uint64_t v56 = v80;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v49 + 32))(v80, v55, v48);
    uint64_t v57 = (uint64_t)v79;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v49 + 16))(v79, v56, v48);
    uint64_t v58 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter();
    uint64_t v60 = v59;
    uint64_t v61 = (uint64_t *)(v3
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v94 = *v61;
    *uint64_t v61 = 0x8000000000000000;
    sub_100591A04(v58, v60, v57, isUniquelyReferenced_nonNull_native);
    *uint64_t v61 = v94;
    swift_bridgeObjectRelease();
    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v63(v57, v48);
    swift_endAccess();
    v63((uint64_t)v56, v48);
  }
  uint64_t v65 = v90;
  uint64_t v64 = v91;
  SFAirDrop.NearbySharingDiscovery.Request.pollingType.getter();
  uint64_t v66 = v89;
  uint64_t v67 = v92;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v64 + 16))(v89, v65, v92);
  int v68 = (*(uint64_t (**)(unsigned char *, uint64_t))(v64 + 88))(v66, v67);
  if (v68 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.automatic(_:))
  {
    uint64_t v69 = 0;
LABEL_17:
    (*(void (**)(unsigned char *, uint64_t))(v64 + 8))(v65, v67);
    uint64_t v70 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter();
    sub_1000099C0(v69, v70, v71, 1);
    return swift_bridgeObjectRelease();
  }
  if (v68 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.passive(_:))
  {
    uint64_t v69 = 1;
    goto LABEL_17;
  }
  if (v68 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.full(_:))
  {
    uint64_t v69 = 2;
    goto LABEL_17;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100290EFC(uint64_t a1)
{
  uint64_t v117 = a1;
  uint64_t v116 = sub_10000A844(&qword_10096C4F0);
  __chkstk_darwin(v116);
  uint64_t v2 = (char *)&v87 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for SFAirDrop.NearbySharingAssertion();
  uint64_t v92 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v4 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A844(&qword_10096C4F8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v91 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v87 - v8;
  uint64_t v10 = sub_10000A844(&qword_100974EA0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v106 = (char *)&v87 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v120 = (uint64_t)&v87 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (int64_t *)((char *)&v87 - v18);
  uint64_t v123 = type metadata accessor for UUID();
  uint64_t v95 = *(void *)(v123 - 8);
  uint64_t v20 = __chkstk_darwin(v123);
  uint64_t v107 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v88 = (char *)&v87 - v22;
  uint64_t v23 = type metadata accessor for SFClientIdentity();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v115 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v87 - v27;
  if (qword_100969B00 != -1) {
    goto LABEL_53;
  }
  while (1)
  {
    uint64_t v29 = type metadata accessor for Logger();
    sub_10000B47C(v29, (uint64_t)qword_10096C1C0);
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v28, v117, v23);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    int v32 = v31;
    BOOL v33 = os_log_type_enabled(v30, v31);
    uint64_t v105 = v13;
    uint64_t v108 = v23;
    if (v33)
    {
      os_log_t v121 = v30;
      uint64_t v34 = swift_slowAlloc();
      LODWORD(v118) = v32;
      BOOL v35 = (uint8_t *)v34;
      uint64_t v119 = swift_slowAlloc();
      uint64_t v125 = v119;
      *(_DWORD *)BOOL v35 = 136315138;
      unint64_t v114 = (void (*)(char *, uint64_t))(v35 + 4);
      sub_10000B980(&qword_10096C510, (void (*)(uint64_t))&type metadata accessor for SFClientIdentity);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v124 = sub_100254634(v36, v37, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v114 = *(void (**)(char *, uint64_t))(v24 + 8);
      v114(v28, v23);
      os_log_t v38 = v121;
      _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v118, "SDAirDropNearFieldService: Requested stop active nearby sharing discovery for client: %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v114 = *(void (**)(char *, uint64_t))(v24 + 8);
      v114(v28, v23);
    }
    uint64_t v13 = v106;
    SFClientIdentity.connectionID.getter();
    uint64_t v39 = v95;
    uint64_t v113 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v95 + 48);
    os_log_t v121 = (os_log_t)(v95 + 48);
    unsigned int v40 = v113(v19, 1, v123);
    uint64_t v41 = (uint64_t)v88;
    if (v40 == 1) {
      return sub_10000A7E8((uint64_t)v19, &qword_100974EA0);
    }
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 32);
    uint64_t v101 = v39 + 32;
    os_log_type_t v100 = v43;
    v43(v88, (uint64_t)v19, v123);
    uint64_t v44 = (uint64_t *)(v103
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID);
    swift_beginAccess();
    uint64_t v45 = *v44;
    if (!*(void *)(*v44 + 16)) {
      goto LABEL_10;
    }
    unint64_t v46 = sub_100583A00(v41);
    if (v47)
    {
      uint64_t v48 = (uint64_t *)(*(void *)(v45 + 56) + 16 * v46);
      uint64_t v49 = v24;
      uint64_t v50 = *v48;
      unint64_t v51 = v48[1];
      swift_endAccess();
      swift_bridgeObjectRetain();
      sub_100291D58(v50, v51);
      uint64_t v24 = v49;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1002A8A70(v41);
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_10:
      swift_endAccess();
    }
    uint64_t v28 = v91;
    uint64_t v23 = v108;
    uint64_t v52 = (uint64_t *)(v103
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
    swift_beginAccess();
    uint64_t v53 = *v52;
    uint64_t v54 = *(void *)(*v52 + 64);
    uint64_t v89 = *v52 + 64;
    uint64_t v55 = 1 << *(unsigned char *)(v53 + 32);
    uint64_t v56 = -1;
    if (v55 < 64) {
      uint64_t v56 = ~(-1 << v55);
    }
    unint64_t v57 = v56 & v54;
    uint64_t v93 = v95 + 16;
    uint64_t v112 = v92 + 16;
    id v109 = (uint64_t *)(v95 + 8);
    uint64_t v110 = (void (**)(char *, uint64_t))(v92 + 8);
    uint64_t v111 = v24 + 8;
    int64_t v90 = (unint64_t)(v55 + 63) >> 6;
    int64_t v87 = v90 - 1;
    uint64_t v94 = v53;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v98 = 0;
    uint64_t v102 = v4;
    uint64_t v96 = v9;
LABEL_16:
    if (v57)
    {
      uint64_t v99 = (v57 - 1) & v57;
      unint64_t v58 = __clz(__rbit64(v57)) | (v98 << 6);
      goto LABEL_18;
    }
    int64_t v62 = v98 + 1;
    if (!__OFADD__(v98, 1)) {
      break;
    }
    __break(1u);
LABEL_53:
    swift_once();
  }
  if (v62 >= v90) {
    goto LABEL_36;
  }
  unint64_t v63 = *(void *)(v89 + 8 * v62);
  if (v63) {
    goto LABEL_22;
  }
  int64_t v64 = v98 + 2;
  ++v98;
  if (v62 + 1 >= v90) {
    goto LABEL_36;
  }
  unint64_t v63 = *(void *)(v89 + 8 * v64);
  if (v63)
  {
LABEL_25:
    int64_t v62 = v64;
    goto LABEL_22;
  }
  int64_t v98 = v62 + 1;
  if (v62 + 2 >= v90) {
    goto LABEL_36;
  }
  unint64_t v63 = *(void *)(v89 + 8 * (v62 + 2));
  if (v63)
  {
    v62 += 2;
LABEL_22:
    uint64_t v99 = (v63 - 1) & v63;
    unint64_t v58 = __clz(__rbit64(v63)) + (v62 << 6);
    int64_t v98 = v62;
LABEL_18:
    uint64_t v59 = v94;
    (*(void (**)(char *, unint64_t, uint64_t))(v95 + 16))(v28, *(void *)(v94 + 48) + *(void *)(v95 + 72) * v58, v123);
    uint64_t v60 = *(void *)(v59 + 56);
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_10096C500);
    *(void *)&v28[*(int *)(v61 + 48)] = *(void *)(v60 + 8 * v58);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v28, 0, 1, v61);
    swift_bridgeObjectRetain();
    uint64_t v4 = v102;
    uint64_t v23 = v108;
    goto LABEL_37;
  }
  int64_t v64 = v62 + 3;
  int64_t v98 = v62 + 2;
  if (v62 + 3 >= v90) {
    goto LABEL_36;
  }
  unint64_t v63 = *(void *)(v89 + 8 * v64);
  if (v63) {
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v62 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      break;
    }
    if (v62 >= v90)
    {
      int64_t v98 = v87;
LABEL_36:
      uint64_t v65 = sub_10000A844((uint64_t *)&unk_10096C500);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v28, 1, 1, v65);
      uint64_t v99 = 0;
LABEL_37:
      sub_1002AE2A0((uint64_t)v28, (uint64_t)v9);
      uint64_t v66 = sub_10000A844((uint64_t *)&unk_10096C500);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48))(v9, 1, v66) == 1)
      {
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))*v109)(v88, v123);
      }
      uint64_t v67 = *(void *)&v9[*(int *)(v66 + 48)];
      uint64_t v68 = *(void *)(v67 + 16);
      if (v68)
      {
        unint64_t v69 = (*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
        uint64_t v97 = v67;
        unint64_t v70 = v67 + v69;
        uint64_t v71 = *(void *)(v92 + 72);
        uint64_t v118 = *(void (**)(char *, unint64_t, uint64_t))(v92 + 16);
        uint64_t v119 = v71;
        v118(v4, v67 + v69, v122);
        while (1)
        {
          uint64_t v72 = v115;
          int v73 = v4;
          SFAirDrop.NearbySharingAssertion.client.getter();
          uint64_t v74 = v120;
          SFClientIdentity.connectionID.getter();
          uint64_t v75 = v72;
          uint64_t v19 = (uint64_t *)v121;
          v114(v75, v23);
          SFClientIdentity.connectionID.getter();
          uint64_t v76 = (uint64_t)&v2[*(int *)(v116 + 48)];
          uint64_t v77 = v74;
          uint64_t v24 = (uint64_t)v13;
          sub_10024A330(v77, (uint64_t)v2, &qword_100974EA0);
          sub_10024A330((uint64_t)v13, v76, &qword_100974EA0);
          unint64_t v78 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v113;
          if (v113((uint64_t *)v2, 1, v123) == 1) {
            break;
          }
          uint64_t v24 = v120;
          uint64_t v79 = (uint64_t)v2;
          uint64_t v80 = (uint64_t)v2;
          uint64_t v81 = (uint64_t)v105;
          sub_10024A330(v79, (uint64_t)v105, &qword_100974EA0);
          uint64_t v19 = &qword_100974EA0;
          if (v78(v76, 1, v123) == 1)
          {
            uint64_t v13 = v106;
            sub_10000A7E8((uint64_t)v106, &qword_100974EA0);
            sub_10000A7E8(v24, &qword_100974EA0);
            ((void (*)(uint64_t, uint64_t))*v109)(v81, v123);
            uint64_t v2 = (char *)v80;
            uint64_t v23 = v108;
LABEL_41:
            sub_10000A7E8((uint64_t)v2, &qword_10096C4F0);
            uint64_t v4 = v73;
            goto LABEL_42;
          }
          uint64_t v82 = v107;
          uint64_t v83 = v123;
          v100(v107, v76, v123);
          sub_10000B980((unint64_t *)&unk_10096D460, (void (*)(uint64_t))&type metadata accessor for UUID);
          int v104 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v19 = v109;
          uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t))*v109;
          ((void (*)(char *, uint64_t))*v109)(v82, v83);
          uint64_t v13 = v106;
          sub_10000A7E8((uint64_t)v106, &qword_100974EA0);
          sub_10000A7E8(v24, &qword_100974EA0);
          v84(v81, v83);
          uint64_t v4 = v102;
          sub_10000A7E8(v80, &qword_100974EA0);
          uint64_t v2 = (char *)v80;
          uint64_t v23 = v108;
          if (v104) {
            goto LABEL_49;
          }
LABEL_42:
          (*v110)(v4, v122);
          v70 += v119;
          if (!--v68)
          {
            swift_bridgeObjectRelease();
            uint64_t v28 = v91;
            goto LABEL_15;
          }
          v118(v4, v70, v122);
        }
        sub_10000A7E8((uint64_t)v13, &qword_100974EA0);
        sub_10000A7E8(v120, &qword_100974EA0);
        if (v78(v76, 1, v123) != 1) {
          goto LABEL_41;
        }
        sub_10000A7E8((uint64_t)v2, &qword_100974EA0);
        uint64_t v4 = v73;
LABEL_49:
        uint64_t v85 = (uint64_t)v107;
        SFAirDrop.NearbySharingAssertion.id.getter();
        sub_100292614(v85);
        uint64_t v86 = v85;
        uint64_t v23 = v108;
        ((void (*)(uint64_t, uint64_t))*v109)(v86, v123);
        goto LABEL_42;
      }
      swift_bridgeObjectRelease();
LABEL_15:
      uint64_t v9 = v96;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))*v109)(v96, v123);
      unint64_t v57 = v99;
      goto LABEL_16;
    }
    unint64_t v63 = *(void *)(v89 + 8 * v62);
    ++v64;
    if (v63) {
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

void sub_100291D58(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = a1;
  uint64_t v5 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v5 - 8);
  BOOL v35 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10096C4D0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_10096C1C0);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100254634(v36, a2, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SDAirDropNearFieldService: Requested stop active nearby sharing discovery: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v14)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v15, v25))
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100254634(v36, a2, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v25, "SDAirDropNearFieldService: Near field controller not start. Fail to stop active nearby sharing discovery for: %s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_24;
  }
  uint64_t v15 = v14;
  id v16 = [v15 currentApplicationLabel];
  if (!v16)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_100254634(v36, a2, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "SDAirDropNearFieldService: missing current application label. Ignore request to to stop active nearby sharing discovery for: %s", v29, 0xCu);
      swift_arrayDestroy();
LABEL_18:
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_24:
      return;
    }

LABEL_23:
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  uint64_t v17 = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  uint64_t v21 = type metadata accessor for SFClientIdentity();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_10046680C((uint64_t)v9, v18, v20);
  swift_endAccess();
  if ((v18 != v36 || v20 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v39[0] = v18;
    v39[1] = v20;
    uint64_t v37 = v36;
    unint64_t v38 = a2;
    sub_10024A1FC();
    if ((StringProtocol.contains<A>(_:)() & 1) == 0)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        v39[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v37 = sub_100254634(v36, a2, v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v33 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v37 = sub_100254634(v18, v20, v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v27, v32, "SDAirDropNearFieldService: stop nearby sharing discovery for application label: %s failed because active application label is not matching: %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        goto LABEL_18;
      }

      swift_bridgeObjectRelease_n();
      goto LABEL_23;
    }
  }
  sub_1000099C0(*(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x80000001007B76F0, 0);
  swift_bridgeObjectRetain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100254634(v18, v20, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "SDAirDropNearFieldService: stop active nearby sharing discovery: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v30 = (uint64_t)v35;
  uint64_t v31 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  sub_10028DDAC(v30);

  sub_10000A7E8(v30, &qword_100974EA0);
}

void sub_100292614(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v125 = a1;
  uint64_t v3 = sub_10000A844((uint64_t *)&unk_10096C460);
  __chkstk_darwin(v3 - 8);
  uint64_t v118 = (uint64_t)v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v123 = *(void *)(v5 - 8);
  uint64_t v124 = (void (**)(void, void))v5;
  __chkstk_darwin(v5);
  uint64_t v120 = (char *)v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000A844(&qword_100974EA0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v117 = (char *)v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v122 = (char *)v109 - v13;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v126 = *(void *)(v14 - 8);
  uint64_t v127 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  os_log_t v121 = (char *)v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v119 = (void (*)(char *, uint64_t, uint64_t))((char *)v109 - v18);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v109 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)v109 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)v109 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)v109 - v29;
  __chkstk_darwin(v28);
  os_log_type_t v32 = (char *)v109 - v31;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v33 = v2;
  static Published.subscript.getter();
  swift_release();
  uint64_t v34 = v124;
  swift_release();
  uint64_t v35 = v123;
  if (!(*(unsigned int (**)(char *, uint64_t, void (**)(void, void)))(v123 + 48))(v9, 1, v34))
  {
    uint64_t v39 = v30;
    uint64_t v112 = v27;
    uint64_t v113 = v24;
    unint64_t v114 = v21;
    uint64_t v115 = v33;
    uint64_t v116 = v32;
    unsigned int v40 = v120;
    (*(void (**)(char *, char *, void (**)(void, void)))(v35 + 16))(v120, v9, v34);
    sub_10000A7E8((uint64_t)v9, (uint64_t *)&unk_10096C2A0);
    uint64_t v38 = (uint64_t)v122;
    SFAirDrop.NearbySharingInteraction.id.getter();
    (*(void (**)(char *, void))(v35 + 8))(v40, v34);
    uint64_t v36 = v126;
    uint64_t v37 = v127;
    uint64_t v42 = v126 + 56;
    uint64_t v41 = *(char **)(v126 + 56);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v41)(v38, 0, 1, v127);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v38, 1, v37) == 1) {
      goto LABEL_4;
    }
    uint64_t v52 = (uint64_t)v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v116, v38, v37);
    uint64_t v53 = (uint64_t *)(v115
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
    swift_beginAccess();
    uint64_t v54 = *v53;
    uint64_t v55 = v125;
    if (*(void *)(*v53 + 16) && (unint64_t v56 = sub_100583A00(v52), (v57 & 1) != 0))
    {
      uint64_t v122 = v41;
      uint64_t v123 = v42;
      uint64_t v130 = *(void *)(*(void *)(v54 + 56) + 8 * v56);
      uint64_t v58 = v130;
      swift_endAccess();
      uint64_t v59 = *(void *)(v58 + 16);
      if (v59)
      {
        uint64_t v111 = v53;
        uint64_t v60 = type metadata accessor for SFAirDrop.NearbySharingAssertion();
        uint64_t v120 = *(char **)(v60 - 8);
        os_log_t v121 = (char *)v60;
        unint64_t v61 = v58 + ((v120[80] + 32) & ~(unint64_t)v120[80]);
        uint64_t v62 = *((void *)v120 + 9);
        uint64_t v124 = (void (**)(void, void))(v36 + 8);
        swift_bridgeObjectRetain_n();
        unint64_t v63 = 0;
        while (1)
        {
          SFAirDrop.NearbySharingAssertion.id.getter();
          char v64 = static UUID.== infix(_:_:)();
          uint64_t v65 = (void (*)(char *, uint64_t))*v124;
          (*v124)(v39, v127);
          if (v64) {
            break;
          }
          ++v63;
          v61 += v62;
          if (v59 == v63)
          {
            swift_bridgeObjectRelease();
            uint64_t v36 = v126;
            uint64_t v37 = v127;
            uint64_t v52 = (uint64_t)v116;
            goto LABEL_18;
          }
        }
        swift_bridgeObjectRelease();
        if (qword_100969B00 != -1) {
          swift_once();
        }
        uint64_t v76 = type metadata accessor for Logger();
        uint64_t v77 = sub_10000B47C(v76, (uint64_t)qword_10096C1C0);
        uint64_t v78 = v127;
        uint64_t v79 = v126 + 16;
        uint64_t v80 = v112;
        uint64_t v119 = *(void (**)(char *, uint64_t, uint64_t))(v126 + 16);
        v119(v112, v55, v127);
        uint64_t v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v83 = swift_slowAlloc();
          uint64_t v126 = v77;
          uint64_t v84 = (uint8_t *)v83;
          uint64_t v110 = swift_slowAlloc();
          v129[0] = v110;
          *(_DWORD *)uint64_t v84 = 136315138;
          v109[1] = v84 + 4;
          sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v128 = sub_100254634(v85, v86, v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v65(v80, v78);
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "SDAirDropNearFieldService: Releasing assertion:%s", v84, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          v65(v80, v78);
        }

        uint64_t v87 = (uint64_t)v116;
        uint64_t v88 = v114;
        uint64_t v89 = v125;
        uint64_t v90 = v118;
        if (v130)
        {
          uint64_t v91 = (uint64_t)v116;
          sub_1002A6BA4(v63, v118);
          uint64_t v87 = v91;
          uint64_t v92 = 0;
        }
        else
        {
          uint64_t v92 = 1;
        }
        uint64_t v93 = v113;
        (*((void (**)(uint64_t, uint64_t, uint64_t, char *))v120 + 7))(v90, v92, 1, v121);
        sub_10000A7E8(v90, (uint64_t *)&unk_10096C460);
        if (v130 && !*(void *)(v130 + 16))
        {
          uint64_t v94 = v89;
          uint64_t v95 = v127;
          uint64_t v96 = v119;
          v119(v93, v94, v127);
          v96(v88, v87, v95);
          uint64_t v97 = Logger.logObject.getter();
          os_log_type_t v98 = static os_log_type_t.default.getter();
          int v99 = v98;
          if (os_log_type_enabled(v97, v98))
          {
            uint64_t v100 = swift_slowAlloc();
            uint64_t v126 = v79;
            uint64_t v101 = v100;
            uint64_t v125 = swift_slowAlloc();
            v129[0] = v125;
            *(_DWORD *)uint64_t v101 = 136315394;
            sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
            LODWORD(v121) = v99;
            uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v128 = sub_100254634(v102, v103, v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v65(v93, v95);
            *(_WORD *)(v101 + 12) = 2080;
            uint64_t v104 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v128 = sub_100254634(v104, v105, v129);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v65(v88, v95);
            _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v121, "SDAirDropNearFieldService: No more assertions:%s for nearby sharing interaction:%s", (uint8_t *)v101, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v65(v93, v95);
            v65(v88, v95);
          }

          uint64_t v106 = (uint64_t)v117;
          uint64_t v107 = v122;
          swift_beginAccess();
          uint64_t v108 = (uint64_t)v116;
          sub_1002A862C((uint64_t)v116);
          swift_endAccess();
          swift_bridgeObjectRelease();
          v119((char *)v106, v108, v95);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v107)(v106, 0, 1, v95);
          sub_10028DDAC(v106);
          sub_10000A7E8(v106, &qword_100974EA0);
          v65((char *)v108, v95);
        }
        else
        {
          v65((char *)v87, v127);
        }
        goto LABEL_23;
      }
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v130 = 0;
      swift_endAccess();
    }
LABEL_18:
    uint64_t v66 = (char *)v119;
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    sub_10000B47C(v67, (uint64_t)qword_10096C1C0);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v66, v55, v37);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = v36;
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      v129[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 136315138;
      sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v128 = sub_100254634(v72, v73, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v74 = *(void (**)(char *, uint64_t))(v70 + 8);
      v74(v66, v37);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "SDAirDropNearFieldService: Failed to release nearby sharing assertion %s because we don't have any active assertions for it.", v71, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v74(v116, v37);
    }
    else
    {

      uint64_t v75 = *(void (**)(char *, uint64_t))(v36 + 8);
      v75(v66, v37);
      v75((char *)v52, v37);
    }
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  sub_10000A7E8((uint64_t)v9, (uint64_t *)&unk_10096C2A0);
  uint64_t v36 = v126;
  uint64_t v37 = v127;
  uint64_t v38 = (uint64_t)v122;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v126 + 56))(v122, 1, 1, v127);
LABEL_4:
  sub_10000A7E8(v38, &qword_100974EA0);
  uint64_t v43 = v125;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_10000B47C(v44, (uint64_t)qword_10096C1C0);
  uint64_t v45 = v121;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v121, v43, v37);
  unint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = v36;
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    v129[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v49 = 136315138;
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v130 = sub_100254634(v50, v51, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v45, v37);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "SDAirDropNearFieldService: Failed to release assertion:%s because there is no active nearby sharing interaction", v49, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v45, v37);
  }
}

void sub_100293574()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B47C(v5, (uint64_t)qword_10096C1C0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SDAirDropNearFieldService: stop", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  sub_10028DDAC((uint64_t)v4);
  sub_10000A7E8((uint64_t)v4, &qword_100974EA0);
  sub_1002937C4(1);
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;
}

void sub_10029371C(void *a1, uint64_t a2)
{
  id v6 = String._bridgeToObjectiveC()();
  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v5 = UUID._bridgeToObjectiveC()().super.isa;
  [a1 startPolling:a2 applicationLabel:v6 pkData:isa bonjourListenerUUID:v5];
}

uint64_t sub_1002937C4(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (v12)
  {
    v16[1] = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue);
    uint64_t v17 = result;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(unsigned char *)(v13 + 24) = a1 & 1;
    aBlock[4] = sub_1002AE384;
    aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100296520;
    aBlock[3] = &unk_1008D4D60;
    uint64_t v14 = _Block_copy(aBlock);
    id v15 = v12;
    static DispatchQoS.unspecified.getter();
    uint64_t v18 = &_swiftEmptyArrayStorage;
    sub_10000B980((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A844((uint64_t *)&unk_10096C490);
    sub_1002AE308((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v17);
    return swift_release();
  }
  return result;
}

uint64_t sub_100293AA8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_10096C1C0);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SDAirDropNearFieldService: start", v13, 2u);
    swift_slowDealloc();
  }

  if (a2) {
    a1 = *(void *)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType);
  }
  if (a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = 0x80000001007B76F0;
  }
  if (a4) {
    uint64_t v15 = a3;
  }
  else {
    uint64_t v15 = 0xD000000000000013;
  }
  swift_bridgeObjectRetain();
  sub_1000099C0(a1, v15, v14, 0);

  return swift_bridgeObjectRelease();
}

void sub_100293C0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10000B47C(v5, (uint64_t)qword_10096C1C0);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SDAirDropNearFieldService: restart", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SDAirDropNearFieldService: stop", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  sub_10028DDAC((uint64_t)v4);
  sub_10000A7E8((uint64_t)v4, &qword_100974EA0);
  sub_1002937C4(1);
  uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;

  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SDAirDropNearFieldService: start", v16, 2u);
    swift_slowDealloc();
  }

  sub_1000099C0(*(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x80000001007B76F0, 0);
}

void sub_100293EC8()
{
  uint64_t v0 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v0 - 8);
  uint64_t v115 = (char *)&v92 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for SFPlatform();
  uint64_t v111 = *(void *)(v2 - 8);
  uint64_t v112 = v2;
  __chkstk_darwin(v2);
  uint64_t v110 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v113 = *(void *)(v4 - 8);
  uint64_t v114 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v108 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v109 = (char *)&v92 - v7;
  uint64_t v105 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v105);
  uint64_t v106 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v100 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v102 = (char *)&v92 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v104 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  int v99 = (char *)&v92 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  os_log_type_t v98 = (char *)&v92 - v20;
  uint64_t v103 = v21;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v92 - v22;
  uint64_t v24 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v92 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  Class isa = v31[-1].isa;
  os_log_t v117 = v31;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v92 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  uint64_t v34 = (void *)static NSUserDefaults.airdrop.getter();
  char v35 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if (v35)
  {
    SFAirDrop.NearbySharingInteraction.PresenceContext.init()();
    (*(void (**)(char *, void, uint64_t))(v28 + 104))(v30, enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:), v27);
    uint64_t v36 = v14;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v26, 1, 1, v13);
    SFAirDrop.NearbySharingInteraction.init(state:id:)();
    SFAirDrop.NearbySharingInteraction.id.getter();
    id v37 = [self sharedMonitor];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = v13;
      unsigned int v40 = [v37 deviceKeyBagLocked];

      uint64_t v101 = v33;
      uint64_t v96 = v23;
      uint64_t v97 = v13;
      uint64_t v95 = v14;
      if (v40)
      {
        if (qword_100969B00 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        sub_10000B47C(v41, (uint64_t)qword_10096C1C0);
        uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
        unint64_t v93 = (v14 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        uint64_t v43 = v98;
        v42(v98, v23, v13);
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        BOOL v46 = os_log_type_enabled(v44, v45);
        uint64_t v94 = v42;
        if (v46)
        {
          os_log_type_t v47 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v47 = 136315138;
          sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v118 = (void *)sub_100254634(v48, v49, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v14 + 8))(v43, v13);
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "SDAirDropNearFieldService: begin \"pending\" nearby sharing interaction:%s", v47, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v14 + 8))(v43, v13);
        }

        uint64_t v62 = v104;
        Class v64 = isa;
        os_log_t v63 = v117;
        uint64_t v65 = (uint64_t)v102;
        (*((void (**)(char *, char *, os_log_t))isa + 2))(v102, v101, v117);
        (*((void (**)(uint64_t, void, uint64_t, os_log_t))v64 + 7))(v65, 0, 1, v63);
        uint64_t v66 = v107;
        uint64_t v67 = (uint64_t)v107
            + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
        swift_beginAccess();
        sub_10026B410(v65, v67, (uint64_t *)&unk_10096C2A0);
        swift_endAccess();
      }
      else
      {
        if (qword_100969B00 != -1) {
          swift_once();
        }
        uint64_t v54 = type metadata accessor for Logger();
        sub_10000B47C(v54, (uint64_t)qword_10096C1C0);
        uint64_t v55 = v99;
        uint64_t v94 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
        v94(v99, v23, v39);
        unint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.default.getter();
        BOOL v58 = os_log_type_enabled(v56, v57);
        unint64_t v93 = (v36 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        if (v58)
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v59 = 136315138;
          sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v118 = (void *)sub_100254634(v60, v61, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v39);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "SDAirDropNearFieldService: begin nearby sharing interaction:%s", v59, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v39);
        }

        uint64_t v66 = v107;
        uint64_t v62 = v104;
        Class v69 = isa;
        os_log_t v68 = v117;
        uint64_t v70 = (uint64_t)v102;
        (*((void (**)(char *, char *, os_log_t))isa + 2))(v102, v101, v117);
        (*((void (**)(uint64_t, void, uint64_t, os_log_t))v69 + 7))(v70, 0, 1, v68);
        swift_getKeyPath();
        swift_getKeyPath();
        sub_10024A330(v70, v100, (uint64_t *)&unk_10096C2A0);
        id v71 = v66;
        static Published.subscript.setter();
        sub_10000A7E8(v70, (uint64_t *)&unk_10096C2A0);
        uint64_t v39 = v97;
      }
      sub_100294E94();
      uint64_t v72 = (uint64_t)v96;
      v94(v62, v96, v39);
      uint64_t v73 = v95;
      unint64_t v74 = (*(unsigned __int8 *)(v95 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
      uint64_t v75 = swift_allocObject();
      *(void *)(v75 + 16) = v66;
      (*(void (**)(unint64_t, char *, uint64_t))(v73 + 32))(v75 + v74, v62, v39);
      aBlock[4] = (uint64_t)sub_1002AF038;
      aBlock[5] = v75;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100296520;
      aBlock[3] = (uint64_t)&unk_1008D4EA0;
      _Block_copy(aBlock);
      uint64_t v118 = &_swiftEmptyArrayStorage;
      sub_10000B980((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      uint64_t v76 = v66;
      sub_10000A844((uint64_t *)&unk_10096C490);
      sub_1002AE308((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      uint64_t v77 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      uint64_t v78 = v108;
      static DispatchTime.now()();
      uint64_t v79 = v110;
      static SFPlatform.watchOS.getter();
      static SFPlatform.isPlatform(_:)();
      (*(void (**)(char *, uint64_t))(v111 + 8))(v79, v112);
      uint64_t v80 = v109;
      + infix(_:_:)();
      uint64_t v81 = v114;
      os_log_type_t v82 = *(void (**)(char *, uint64_t))(v113 + 8);
      v82(v78, v114);
      OS_dispatch_queue.asyncAfter(deadline:execute:)();
      v82(v80, v81);
      *(void *)&v76[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem] = v77;
      swift_retain();
      swift_release();
      sub_1002A5828(v72);
      uint64_t v83 = type metadata accessor for TaskPriority();
      uint64_t v84 = v115;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v115, 1, 1, v83);
      uint64_t v85 = qword_100969B90;
      unint64_t v86 = v76;
      BOOL v87 = v85 == -1;
      uint64_t v88 = (uint64_t)v84;
      if (!v87) {
        swift_once();
      }
      uint64_t v89 = static AirDropActor.shared;
      uint64_t v90 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
      uint64_t v91 = (void *)swift_allocObject();
      v91[2] = v89;
      v91[3] = v90;
      v91[4] = v86;
      swift_retain();
      sub_10028CE24(v88, (uint64_t)&unk_10096C630, (uint64_t)v91);
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v97);
      (*((void (**)(char *, os_log_t))isa + 1))(v101, v117);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_10000B47C(v50, (uint64_t)qword_10096C1C0);
    os_log_t v117 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v117, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, v51, "SDAirDropNearFieldService: Boop To Action is disabled on beginNearbySharingInteraction", v52, 2u);
      swift_slowDealloc();
    }
    os_log_t v53 = v117;
  }
}

uint64_t sub_100294E94()
{
  uint64_t v1 = sub_10000A844(&qword_100974EA0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v25 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v25 - v12;
  uint64_t v14 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID;
  swift_beginAccess();
  sub_10024A330(v14, (uint64_t)v6, &qword_100974EA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_10000A7E8((uint64_t)v6, &qword_100974EA0);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v28 = v4;
  uint64_t v16 = type metadata accessor for Logger();
  sub_10000B47C(v16, (uint64_t)qword_10096C1C0);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v30[0] = v27;
    uint64_t v26 = v19;
    *(_DWORD *)uint64_t v19 = 136315138;
    v25[1] = v19 + 4;
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = sub_100254634(v20, v21, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v11, v7);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService finish existing AirDrop connection for transaction:%s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v11, v7);
  }

  uint64_t v23 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v0 + v23) = 0;
  swift_release();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10046C064((uint64_t)v13);
    swift_unknownObjectRelease();
  }
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10034A458((uint64_t)v13);
    swift_unknownObjectRelease();
  }
  v22(v13, v7);
  uint64_t v24 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v28, 1, 1, v7);
  swift_beginAccess();
  sub_10026B410(v24, v14, &qword_100974EA0);
  return swift_endAccess();
}

void sub_100295364()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  uint64_t v88 = *(void *)(v2 - 8);
  uint64_t v89 = v2;
  __chkstk_darwin(v2);
  BOOL v87 = (char *)v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A844(&qword_10096C478);
  __chkstk_darwin(v4 - 8);
  uint64_t v83 = (void **)((char *)v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  uint64_t v92 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v92 + 64);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v81 = (uint64_t)v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v85 = (uint64_t)v76 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v84 = (uint64_t)v76 - v12;
  __chkstk_darwin(v11);
  uint64_t v93 = (uint64_t)v76 - v13;
  uint64_t v14 = sub_10000A844((uint64_t *)&unk_10096C480);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DispatchTime();
  uint64_t v78 = *(void **)(v79 - 8);
  uint64_t v17 = __chkstk_darwin(v79);
  uint64_t v19 = (char *)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)v76 - v20;
  uint64_t v91 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v86 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v90 = (char *)v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  os_log_t v82 = (os_log_t)sub_10000B47C(v26, (uint64_t)qword_10096C1C0);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "SDAirDropNearFieldService: stop services.", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID];
  swift_beginAccess();
  sub_10024A330(v30, (uint64_t)v25, &qword_100974EA0);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v31 - 8) + 48);
  uint64_t v80 = v31;
  LODWORD(v30) = v32(v25, 1);
  sub_10000A7E8((uint64_t)v25, &qword_100974EA0);
  uint64_t v33 = (int *)v6;
  if (v30 != 1)
  {
    uint64_t v34 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem;
    if (!*(void *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem])
    {
      if (sub_10028D320())
      {
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v1;
        int v99 = sub_1002A88E8;
        uint64_t v100 = v35;
        aBlock = _NSConcreteStackBlock;
        uint64_t v96 = 1107296256;
        uint64_t v97 = sub_100296520;
        os_log_type_t v98 = &unk_1008D4C70;
        uint64_t v77 = (uint64_t)_Block_copy(&aBlock);
        uint64_t v94 = &_swiftEmptyArrayStorage;
        v76[1] = sub_10000B980((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        uint64_t v36 = v1;
        sub_10000A844((uint64_t *)&unk_10096C490);
        sub_1002AE308((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        type metadata accessor for DispatchWorkItem();
        swift_allocObject();
        uint64_t v37 = DispatchWorkItem.init(flags:block:)();
        swift_release();
        *(void *)&v1[v34] = v37;
        swift_retain();
        swift_release();
        static DispatchTime.now()();
        + infix(_:_:)();
        uint64_t v77 = v6;
        uint64_t v38 = (void (*)(char *, uint64_t))v78[1];
        uint64_t v39 = v79;
        v38(v19, v79);
        OS_dispatch_queue.asyncAfter(deadline:execute:)();
        swift_release();
        v38(v21, v39);
        uint64_t v33 = (int *)v77;
      }
      else
      {
        sub_100294E94();
      }
    }
  }
  uint64_t v40 = type metadata accessor for SDNearFieldTap();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v16, 1, 1, v40);
  uint64_t v41 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap];
  swift_beginAccess();
  sub_10026B410((uint64_t)v16, v41, (uint64_t *)&unk_10096C480);
  swift_endAccess();
  uint64_t v42 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController];
  if (v42)
  {
    id v43 = v42;
    id v44 = [v43 currentTransaction];
    if (v44)
    {
      uint64_t v78 = v43;
      uint64_t v79 = (uint64_t)v44;
      uint64_t v45 = v93;
      UUID.init()();
      BOOL v46 = sub_10017E988((void *)kSecAttrKeyTypeECSECPrimeRandom, 256);
      *(void *)(v45 + v33[5]) = v46;
      id v47 = sub_10017EB90(v46);
      uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v50 = v49;

      os_log_type_t v51 = (uint64_t *)(v45 + v33[6]);
      uint64_t *v51 = v48;
      v51[1] = v50;
      uint64_t v52 = (uint64_t)v83;
      sub_1002AE574(v45, (uint64_t)v83, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      uint64_t v53 = v92;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v92 + 56))(v52, 0, 1, v33);
      uint64_t v54 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload];
      swift_beginAccess();
      sub_10026B410(v52, v54, &qword_10096C478);
      swift_endAccess();
      uint64_t v55 = v84;
      sub_1002AE574(v45, v84, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      uint64_t v56 = v85;
      sub_1002AE574(v45, v85, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      os_log_type_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        uint64_t v83 = (void **)swift_slowAlloc();
        aBlock = v83;
        *(_DWORD *)uint64_t v59 = 138412546;
        os_log_t v82 = v57;
        uint64_t v61 = v56;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v94 = isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v60 = isa;
        sub_1002AD3D4(v55, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        *(_WORD *)(v59 + 12) = 2080;
        sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v94 = (void *)sub_100254634(v63, v64, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1002AD3D4(v61, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        os_log_type_t v57 = v82;
        _os_log_impl((void *)&_mh_execute_header, v82, v58, "SDAirDropNearFieldService: Updating public key: %@ listener ID: %s", (uint8_t *)v59, 0x16u);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v53 = v92;
        swift_slowDealloc();
      }
      else
      {
        sub_1002AD3D4(v55, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        sub_1002AD3D4(v56, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      }

      uint64_t v65 = v81;
      uint64_t v92 = *(void *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue];
      uint64_t v66 = v93;
      sub_1002AE574(v93, v81, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      unint64_t v67 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      uint64_t v68 = swift_allocObject();
      Class v69 = v78;
      uint64_t v70 = v79;
      *(void *)(v68 + 16) = v78;
      *(void *)(v68 + 24) = v70;
      sub_1002AD36C(v65, v68 + v67, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      int v99 = sub_1002A8834;
      uint64_t v100 = v68;
      aBlock = _NSConcreteStackBlock;
      uint64_t v96 = 1107296256;
      uint64_t v97 = sub_100296520;
      os_log_type_t v98 = &unk_1008D4C20;
      id v71 = _Block_copy(&aBlock);
      id v72 = v69;
      swift_unknownObjectRetain();
      uint64_t v73 = v87;
      static DispatchQoS.unspecified.getter();
      uint64_t v94 = &_swiftEmptyArrayStorage;
      sub_10000B980((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000A844((uint64_t *)&unk_10096C490);
      sub_1002AE308((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
      unint64_t v74 = v90;
      uint64_t v75 = v91;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v71);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v86 + 8))(v74, v75);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v73, v89);
      sub_1002AD3D4(v66, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      swift_release();
    }
    else
    {
    }
  }
}

uint64_t sub_1002960B4()
{
  uint64_t v0 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &unk_10096C4A8;
  *(void *)(v5 + 24) = v4;
  sub_10000A844(&qword_10096C4C0);
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000A7E8((uint64_t)v2, &qword_10096C920);
}

uint64_t sub_10029620C(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v2 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002962A8, v2, 0);
}

uint64_t sub_1002962A8()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    sub_100294E94();
  }
  uint64_t v2 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v2(Strong == 0);
}

uint64_t sub_10029633C(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_10029640C;
  return v5();
}

uint64_t sub_10029640C(char a1)
{
  uint64_t v3 = *(unsigned char **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  unsigned char *v3 = a1 & 1;
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_100296520(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_100296564(void *a1, uint64_t a2)
{
  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v4 = UUID._bridgeToObjectiveC()().super.isa;
  [a1 invalidateTransaction:a2 updatedPkData:isa bonjourListenerUUID:v4];
}

uint64_t sub_1002965F4(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  v3[19] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[20] = v5;
  v3[21] = *(void *)(v5 + 64);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  sub_10000A844(&qword_100974EA0);
  v3[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[26] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[27] = v7;
  v3[28] = *(void *)(v7 + 64);
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  sub_10000A844(&qword_10096C478);
  v3[36] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v3[37] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[38] = v9;
  v3[39] = *(void *)(v9 + 64);
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  v3[43] = v10;
  v3[44] = *(void *)(v10 - 8);
  v3[45] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096C480);
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  v3[48] = v11;
  v3[49] = *(void *)(v11 - 8);
  v3[50] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096C2A0);
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  v3[53] = v12;
  v3[54] = *(void *)(v12 - 8);
  v3[55] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SDNearFieldTap();
  v3[56] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[57] = v14;
  v3[58] = *(void *)(v14 + 64);
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v15 = static AirDropActor.shared;
  v3[62] = static AirDropActor.shared;
  return _swift_task_switch(sub_100296ABC, v15, 0);
}

uint64_t sub_100296ABC()
{
  uint64_t v77 = v0;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[61];
  uint64_t v3 = type metadata accessor for Logger();
  v0[63] = sub_10000B47C(v3, (uint64_t)qword_10096C1C0);
  sub_1002AE574(v1, v2, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[61];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = sub_1004F0A8C();
    v0[15] = sub_100254634(v9, v10, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002AD3D4(v7, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SDAirDropNearFieldService: handle tap:%s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002AD3D4(v0[61], (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  }

  uint64_t v11 = v0[53];
  uint64_t v12 = v0[54];
  uint64_t v13 = v0[51];
  uint64_t v14 = v0[18] + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess();
  sub_10024A330(v14, v13, (uint64_t *)&unk_10096C2A0);
  uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v15(v13, 1, v11) == 1)
  {
    uint64_t v16 = v0[51];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10000A7E8(v16, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    uint64_t v17 = v0[53];
    uint64_t v18 = v0[54];
    uint64_t v19 = v0[52];
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 32))(v19, v0[51], v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v19, 0, 1, v17);
  }
  uint64_t v20 = v0[52];
  uint64_t v21 = v0[53];
  if (v15(v20, 1, v21) == 1)
  {
    sub_10000A7E8(v20, (uint64_t *)&unk_10096C2A0);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "SDAirDropNearFieldService: handling tap while we don't have a current nearbySharingInteraction.", v24, 2u);
      swift_slowDealloc();
    }

    goto LABEL_24;
  }
  uint64_t v26 = v0[49];
  uint64_t v25 = v0[50];
  uint64_t v27 = v0[48];
  (*(void (**)(void, uint64_t, uint64_t))(v0[54] + 32))(v0[55], v20, v21);
  SFAirDrop.NearbySharingInteraction.state.getter();
  char v28 = SFAirDrop.NearbySharingInteraction.State.isConnected.getter();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  if (v28)
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      uint64_t v32 = "SDAirDropNearFieldService: nearbySharingInteraction is already connected.";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v32, v31, 2u);
      swift_slowDealloc();
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  uint64_t v33 = v0[56];
  uint64_t v34 = v0[57];
  uint64_t v35 = v0[47];
  uint64_t v36 = v0[18] + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
  swift_beginAccess();
  sub_10024A330(v36, v35, (uint64_t *)&unk_10096C480);
  LODWORD(v33) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33);
  sub_10000A7E8(v35, (uint64_t *)&unk_10096C480);
  if (v33 != 1)
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      uint64_t v32 = "SDAirDropNearFieldService: still handling previous tap.";
      goto LABEL_22;
    }
LABEL_23:
    uint64_t v48 = v0[54];
    uint64_t v47 = v0[55];
    uint64_t v49 = v0[53];

    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
LABEL_24:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = (uint64_t (*)(void))v0[1];
    return v50();
  }
  uint64_t v37 = v0[56];
  uint64_t v38 = v0[16];
  if (*(unsigned char *)(v38 + *(int *)(v37 + 72)))
  {
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "SDAirDropNearFieldService: tap application label not supported.", v54, 2u);
      swift_slowDealloc();
    }
    uint64_t v55 = v0[18];

    uint64_t v56 = *(void **)(v55 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v56)
    {
      uint64_t v75 = v0[55];
      uint64_t v57 = v0[53];
      uint64_t v58 = v0[54];
      uint64_t v59 = v0[44];
      uint64_t v60 = (unsigned char *)v0[45];
      uint64_t v61 = v0[43];
      id v62 = v56;
      NSString v63 = String._bridgeToObjectiveC()();
      unsigned __int8 v64 = [v62 supportsApplicationLabel:v63];

      *uint64_t v60 = v64 ^ 1;
      (*(void (**)(unsigned char *, void, uint64_t))(v59 + 104))(v60, enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:), v61);
      sub_100298370((uint64_t)v60);

      (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v60, v61);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v75, v57);
    }
    else
    {
      (*(void (**)(void, void))(v0[54] + 8))(v0[55], v0[53]);
    }
    goto LABEL_24;
  }
  uint64_t v39 = v0[57];
  uint64_t v40 = v0[46];
  uint64_t v41 = v0[38];
  uint64_t v74 = v0[37];
  uint64_t v42 = v0[36];
  uint64_t v43 = v0[18];
  sub_1002AE574(v38, v40, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v37);
  swift_beginAccess();
  sub_10026B410(v40, v36, (uint64_t *)&unk_10096C480);
  swift_endAccess();
  uint64_t v44 = v43 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
  swift_beginAccess();
  sub_10024A330(v44, v42, &qword_10096C478);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v42, 1, v74) == 1)
  {
    uint64_t v45 = v0[36];
    BOOL v46 = &qword_10096C478;
LABEL_37:
    sub_10000A7E8(v45, v46);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "SDAirDropNearFieldService: Failed to get endpoint UUID from tap", v70, 2u);
      swift_slowDealloc();
    }
    uint64_t v72 = v0[54];
    uint64_t v71 = v0[55];
    uint64_t v73 = v0[53];

    sub_1002993FC("SDAirDropNearFieldService: received unexpected Payload");
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
    goto LABEL_24;
  }
  sub_1002AD36C(v0[36], v0[42], type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[64] = Strong;
  if (!Strong)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[27] + 56))(v0[25], 1, 1, v0[26]);
    uint64_t v67 = v0[25];
    sub_1002AD3D4(v0[42], type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    BOOL v46 = &qword_100974EA0;
    uint64_t v45 = v67;
    goto LABEL_37;
  }
  v0[65] = *(void *)(v0[42] + *(int *)(v0[37] + 20));
  uint64_t v66 = static AirDropActor.shared;
  v0[66] = static AirDropActor.shared;
  swift_unknownObjectRetain();
  return _swift_task_switch(sub_1002975AC, v66, 0);
}

uint64_t sub_1002975AC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[67] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10029765C;
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[16];
  uint64_t v4 = v0[17];
  return sub_10046B6FC(v3, v4, v2, v5);
}

uint64_t sub_10029765C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 528);
  swift_task_dealloc();
  return _swift_task_switch(sub_10029776C, v1, 0);
}

uint64_t sub_10029776C()
{
  uint64_t v1 = *(void *)(v0 + 496);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1002977E4, v1, 0);
}

uint64_t sub_1002977E4()
{
  uint64_t v118 = v0;
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v3, 0, 1, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 200);
    sub_1002AD3D4(*(void *)(v0 + 336), type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    sub_10000A7E8(v4, &qword_100974EA0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService: Failed to get endpoint UUID from tap", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void *)(v0 + 432);
    uint64_t v8 = *(void *)(v0 + 440);
    uint64_t v10 = *(void *)(v0 + 424);

    sub_1002993FC("SDAirDropNearFieldService: received unexpected Payload");
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 448);
    uint64_t v12 = *(void *)(v0 + 128);
    uint64_t v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v0 + 216) + 32);
    v13(*(void *)(v0 + 280), *(void *)(v0 + 200), *(void *)(v0 + 208));
    uint64_t v14 = (uint64_t *)(v12 + *(int *)(v11 + 52));
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    switch(v15 >> 62)
    {
      case 1uLL:
        if ((int)v16 != v16 >> 32) {
          goto LABEL_7;
        }
        goto LABEL_12;
      case 2uLL:
        if (*(void *)(v16 + 16) == *(void *)(v16 + 24)) {
          goto LABEL_12;
        }
        goto LABEL_7;
      case 3uLL:
        goto LABEL_12;
      default:
        if ((v15 & 0xFF000000000000) != 0)
        {
LABEL_7:
          uint64_t v17 = *(void *)(v0 + 480);
          uint64_t v113 = v17;
          uint64_t v88 = *(void *)(v0 + 472);
          uint64_t v96 = *(void *)(v0 + 464);
          uint64_t v94 = *(void *)(v0 + 456);
          uint64_t v102 = *(void *)(v0 + 448);
          uint64_t v84 = *(void *)(v0 + 336);
          uint64_t v106 = *(void *)(v0 + 328);
          uint64_t v90 = *(void *)(v0 + 320);
          uint64_t v98 = *(void *)(v0 + 312);
          uint64_t v95 = *(void *)(v0 + 304);
          uint64_t v86 = *(void *)(v0 + 280);
          uint64_t v83 = *(void *)(v0 + 272);
          uint64_t v108 = *(void *)(v0 + 264);
          uint64_t v110 = *(void *)(v0 + 256);
          uint64_t v89 = *(void *)(v0 + 248);
          uint64_t v91 = *(void *)(v0 + 240);
          uint64_t v18 = *(void *)(v0 + 216);
          uint64_t v97 = *(void *)(v0 + 224);
          uint64_t v101 = v13;
          uint64_t v104 = *(void *)(v0 + 208);
          uint64_t v19 = *(void *)(v0 + 184);
          uint64_t v20 = *(void *)(v0 + 192);
          uint64_t v85 = *(void *)(v0 + 176);
          uint64_t v21 = *(void *)(v0 + 160);
          uint64_t v93 = *(void *)(v0 + 168);
          uint64_t v87 = v21;
          uint64_t v22 = *(void *)(v0 + 152);
          uint64_t v116 = v22;
          uint64_t v99 = *(void *)(v0 + 144);
          uint64_t v23 = *(void *)(v0 + 128);
          uint64_t v100 = v23;
          SFAirDrop.NearbySharingInteraction.id.getter();
          sub_10029022C(v23, v20);
          sub_1002AE574(v23, v17, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
          os_log_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
          v82(v19, v20, v22);
          sub_1002AE574(v84, v106, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
          uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
          v24(v108, v83, v104);
          v24(v110, v86, v104);
          sub_1002AE574(v17, v88, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
          v82(v85, v19, v22);
          sub_1002AE574(v106, v90, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
          v24(v89, v108, v104);
          uint64_t v25 = v91;
          uint64_t v92 = v24;
          v24(v25, v110, v104);
          unint64_t v26 = (*(unsigned __int8 *)(v94 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
          unint64_t v27 = (v96 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v28 = (*(unsigned __int8 *)(v87 + 80) + v27 + 8) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
          unint64_t v29 = (v93 + *(unsigned __int8 *)(v95 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
          uint64_t v30 = *(unsigned __int8 *)(v18 + 80);
          unint64_t v31 = (v98 + v30 + v29) & ~v30;
          unint64_t v32 = (v97 + v30 + v31) & ~v30;
          uint64_t v33 = swift_allocObject();
          sub_1002AD36C(v113, v33 + v26, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
          *(void *)(v33 + v27) = v99;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v87 + 32))(v33 + v28, v19, v116);
          sub_1002AD36C(v106, v33 + v29, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
          v101(v33 + v31, v108, v104);
          v101(v33 + v32, v110, v104);
          uint64_t v34 = *(void *)(v0 + 272);
          if (*(unsigned char *)(v100 + *(int *)(v102 + 64)))
          {
            uint64_t v35 = *(void *)(v0 + 240);
            uint64_t v36 = *(void *)(v0 + 248);
            uint64_t v37 = *(void *)(v0 + 208);
            uint64_t v107 = *(void *)(v0 + 176);
            uint64_t v109 = *(void *)(v0 + 472);
            uint64_t v38 = *(void *)(v0 + 160);
            uint64_t v103 = *(void *)(v0 + 320);
            uint64_t v105 = *(void *)(v0 + 152);
            uint64_t v111 = *(void *)(v0 + 128);
            uint64_t v39 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 216) + 8);
            uint64_t v40 = (char *)*(id *)(v0 + 144);
            v39(v35, v37);
            uint64_t v114 = v39;
            v39(v36, v37);
            sub_1002AD3D4(v103, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
            uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
            v41(v107, v105);
            sub_1002AD3D4(v109, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
            uint64_t v42 = *(void *)&v40[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_singleBandManager];
            uint64_t v43 = v40;
            swift_retain();
            sub_1004999C0(v111, v34, v42, v43, sub_1002AE954, v33);
            swift_release_n();
          }
          else
          {
            uint64_t v54 = *(void **)(v0 + 144);
            v92(*(void *)(v0 + 232), *(void *)(v0 + 272), *(void *)(v0 + 208));
            id v55 = v54;
            uint64_t v56 = Logger.logObject.getter();
            os_log_type_t v57 = static os_log_type_t.default.getter();
            BOOL v58 = os_log_type_enabled(v56, v57);
            uint64_t v59 = *(void *)(v0 + 232);
            uint64_t v61 = *(void *)(v0 + 208);
            uint64_t v60 = *(void *)(v0 + 216);
            if (v58)
            {
              id v62 = (uint8_t *)swift_slowAlloc();
              uint64_t v115 = swift_slowAlloc();
              *(_DWORD *)id v62 = 136315138;
              uint64_t v117 = v115;
              sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v0 + 112) = sub_100254634(v63, v64, &v117);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
              v65(v59, v61);
              _os_log_impl((void *)&_mh_execute_header, v56, v57, "SDAirDropNearFieldService: Single band not required for Nearby Sharing Interaction:%s", v62, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
              v65(v59, v61);
            }

            uint64_t v66 = *(void *)(v0 + 472);
            uint64_t v67 = *(uint64_t **)(v0 + 320);
            uint64_t v69 = *(void *)(v0 + 240);
            uint64_t v68 = *(void *)(v0 + 248);
            uint64_t v70 = *(void *)(v0 + 208);
            uint64_t v71 = *(void *)(v0 + 176);
            uint64_t v72 = *(void *)(v0 + 160);
            uint64_t v112 = *(void *)(v0 + 152);
            sub_100298830(v66, *(char **)(v0 + 144), v71, v67, v68, v69);
            swift_release();
            v65(v69, v70);
            uint64_t v114 = v65;
            v65(v68, v70);
            sub_1002AD3D4((uint64_t)v67, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
            uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
            v41(v71, v112);
            sub_1002AD3D4(v66, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
          }
          uint64_t v74 = *(void *)(v0 + 432);
          uint64_t v73 = *(void *)(v0 + 440);
          uint64_t v75 = *(void *)(v0 + 424);
          uint64_t v76 = *(void *)(v0 + 336);
          uint64_t v78 = *(void *)(v0 + 272);
          uint64_t v77 = *(void *)(v0 + 280);
          uint64_t v79 = *(void *)(v0 + 208);
          v41(*(void *)(v0 + 192), *(void *)(v0 + 152));
          v114(v78, v79);
          v114(v77, v79);
          sub_1002AD3D4(v76, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
        }
        else
        {
LABEL_12:
          uint64_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v44, v45))
          {
            BOOL v46 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)BOOL v46 = 0;
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "SDAirDropNearFieldService: Tap doesn't contain any public key data, this isn't supported", v46, 2u);
            swift_slowDealloc();
          }
          uint64_t v48 = *(void *)(v0 + 432);
          uint64_t v47 = *(void *)(v0 + 440);
          uint64_t v49 = *(void *)(v0 + 424);
          uint64_t v50 = *(void *)(v0 + 336);
          uint64_t v51 = *(void *)(v0 + 280);
          uint64_t v52 = *(void *)(v0 + 208);
          uint64_t v53 = *(void *)(v0 + 216);

          sub_1002993FC("SDAirDropNearFieldService: received unexpected Payload");
          (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
          sub_1002AD3D4(v50, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
        }
        break;
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v80 = *(uint64_t (**)(void))(v0 + 8);
  return v80();
}

uint64_t sub_100298370(uint64_t a1)
{
  uint64_t v30 = a1;
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v5 - 8);
  unint64_t v31 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000B47C(v11, (uint64_t)qword_10096C1C0);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SDAirDropNearFieldService: near field interruption", v14, 2u);
    swift_slowDealloc();
  }

  unint64_t v15 = sub_10028D67C(v32);
  uint64_t v17 = v16;
  uint64_t v18 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
  {
    ((void (*)(void *, void))v15)(v32, 0);
    uint64_t v19 = v30;
  }
  else
  {
    uint64_t v19 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v10, v30, v1);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:), v7);
    SFAirDrop.NearbySharingInteraction.state.setter();
    ((void (*)(void *, void))v15)(v32, 0);
  }
  uint64_t v20 = type metadata accessor for TaskPriority();
  uint64_t v21 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v31, 1, 1, v20);
  uint64_t v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v1);
  uint64_t v23 = qword_100969B90;
  swift_retain();
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v24 = static AirDropActor.shared;
  uint64_t v25 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  unint64_t v26 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = v24;
  *((void *)v27 + 3) = v25;
  *((void *)v27 + 4) = v22;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(&v27[v26], v4, v1);
  swift_retain();
  swift_release();
  sub_1000092EC(v21, (uint64_t)&unk_10096C5C0, (uint64_t)v27);
  return swift_release();
}

void sub_100298830(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v81 = a6;
  uint64_t v77 = a5;
  uint64_t v78 = a4;
  uint64_t v86 = a3;
  uint64_t v88 = a2;
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v75 = (uint64_t)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v76 = (char *)&v73 - v11;
  __chkstk_darwin(v10);
  uint64_t v83 = (char *)&v73 - v12;
  uint64_t v80 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v82 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v74 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v14 - 8);
  uint64_t v85 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)type metadata accessor for SDNearFieldTap();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v79 = (uint64_t)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v84 = (char *)&v73 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v73 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v73 - v24;
  uint64_t v26 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v16[10];
  uint64_t v87 = a1;
  unint64_t v31 = (void *)(a1 + v30);
  if (*v31 == 0xD00000000000001BLL && v31[1] == 0x80000001007B7860
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v32 = &v88[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager];
    swift_beginAccess();
    sub_100278C8C((uint64_t)v32, (uint64_t)v89);
    uint64_t v33 = v16;
    uint64_t v34 = v90;
    uint64_t v35 = v91;
    sub_10026BB6C(v89, v90);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 80);
    uint64_t v37 = v35;
    uint64_t v16 = v33;
    v36(v87, v34, v37);
    sub_10024D338((uint64_t)v89);
  }
  (*(void (**)(char *, void, uint64_t))(v27 + 104))(v29, enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:), v26);
  sub_10000B980(&qword_10096C5C8, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  uint64_t v39 = v87;
  sub_1002AE574(v87, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  if (v38)
  {
    int v40 = v25[v16[11]];
    sub_1002AD3D4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    if (v40 != 1) {
      goto LABEL_16;
    }
  }
  else
  {
    sub_1002AD3D4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  }
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_10000B47C(v41, (uint64_t)qword_10096C1C0);
  sub_1002AE574(v39, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    v89[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v73 = v44 + 4;
    type metadata accessor for UUID();
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v92 = sub_100254634(v45, v46, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002AD3D4((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "SDAirDropNearFieldService: begin listening for incoming AirDrop connection for transaction:%s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002AD3D4((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  }

  uint64_t v47 = v39 + v16[15];
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = v39;
  uint64_t v51 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v85, v47, v48);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v48);
  uint64_t v52 = &v88[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID];
  swift_beginAccess();
  uint64_t v53 = (uint64_t)v51;
  uint64_t v39 = v50;
  sub_10026B410(v53, (uint64_t)v52, &qword_100974EA0);
  swift_endAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v54 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
    sub_100349E7C(v47, v78, *(uint64_t *)((char *)v78 + *(int *)(v54 + 20)), *(void *)(v50 + v16[13]), *(void *)(v50 + v16[13] + 8));
    swift_unknownObjectRelease();
  }
LABEL_16:
  id v55 = [self sharedMonitor];
  uint64_t v56 = (uint64_t)v84;
  if (v55)
  {
    os_log_type_t v57 = v55;
    unsigned int v58 = [v55 deviceKeyBagLocked];

    sub_1002AE574(v39, v56, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    uint64_t v59 = (uint64_t)v83;
    if (v58)
    {
      int v60 = *(unsigned __int8 *)(v56 + v16[12]);
      uint64_t v61 = v79;
      sub_1002AD36C(v56, v79, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      if (v60 == 1)
      {
        sub_1002AD3D4(v61, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
LABEL_26:
        uint64_t v70 = type metadata accessor for UUID();
        uint64_t v71 = *(void *)(v70 - 8);
        uint64_t v72 = (uint64_t)v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v85, v77, v70);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v72, 0, 1, v70);
        sub_10028DDAC(v72);
        sub_10000A7E8(v72, &qword_100974EA0);
        return;
      }
      uint64_t v69 = *(void *)(v61 + v16[6] + 8);
      sub_1002AD3D4(v61, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      if (v69) {
        goto LABEL_26;
      }
    }
    else
    {
      sub_1002AD3D4(v56, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    }
    id v62 = &v88[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction];
    swift_beginAccess();
    sub_10024A330((uint64_t)v62, v59, (uint64_t *)&unk_10096C2A0);
    uint64_t v63 = v80;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v59, 1, v80) == 1)
    {
      sub_10000A7E8(v59, (uint64_t *)&unk_10096C2A0);
    }
    else
    {
      uint64_t v64 = v82;
      uint64_t v65 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v74, v59, v63);
      uint64_t v66 = (uint64_t)v76;
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v76, v65, v63);
      uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56);
      v67(v66, 0, 1, v63);
      swift_getKeyPath();
      swift_getKeyPath();
      sub_10024A330(v66, v75, (uint64_t *)&unk_10096C2A0);
      uint64_t v68 = v88;
      static Published.subscript.setter();
      sub_10000A7E8(v66, (uint64_t *)&unk_10096C2A0);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v63);
      v67(v66, 1, 1, v63);
      uint64_t v39 = v87;
      swift_beginAccess();
      sub_10026B410(v66, (uint64_t)v62, (uint64_t *)&unk_10096C2A0);
      swift_endAccess();
    }
    sub_10028EDD0(v39, v81, v86);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002993BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1) {
    return sub_1002993FC("SDAirDropNearFieldService: Failed to enforce single band mode");
  }
  else {
    return a3();
  }
}

uint64_t sub_1002993FC(const char *a1)
{
  uint64_t v2 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000B47C(v12, (uint64_t)qword_10096C1C0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a1, v15, 2u);
    swift_slowDealloc();
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    sub_10000A7E8((uint64_t)v8, (uint64_t *)&unk_10096C2A0);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    sub_10000A7E8((uint64_t)v8, (uint64_t *)&unk_10096C2A0);
    SFAirDrop.NearbySharingInteraction.id.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 0, 1, v17);
  }
  sub_10028DDAC((uint64_t)v11);
  return sub_10000A7E8((uint64_t)v11, &qword_100974EA0);
}

uint64_t sub_100299758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096C2A0);
  v5[16] = swift_task_alloc();
  sub_10000A844(&qword_100974EA0);
  v5[17] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v9 = static AirDropActor.shared;
  v5[18] = static AirDropActor.shared;
  return _swift_task_switch(sub_10029996C, v9, 0);
}

uint64_t sub_10029996C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[19] = Strong;
  if (Strong)
  {
    uint64_t v2 = v0[16];
    uint64_t v3 = v0[13];
    uint64_t v4 = v0[14];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
    uint64_t v7 = v0[16];
    uint64_t v6 = v0[17];
    if (v5)
    {
      sub_10000A7E8(v0[16], (uint64_t *)&unk_10096C2A0);
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
    }
    else
    {
      uint64_t v10 = v0[14];
      uint64_t v9 = v0[15];
      uint64_t v11 = v0[13];
      (*(void (**)(uint64_t, void, uint64_t))(v10 + 16))(v9, v0[16], v11);
      sub_10000A7E8(v7, (uint64_t *)&unk_10096C2A0);
      SFAirDrop.NearbySharingInteraction.id.getter();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 0, 1, v12);
    }
    uint64_t v14 = v0[11];
    uint64_t v13 = v0[12];
    uint64_t v15 = v0[10];
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 16))(v13, v0[6], v15);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 88))(v13, v15) == enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:))
    {
      ContinuousClock.init()();
      uint64_t v21 = (char *)&dword_10096C598 + dword_10096C598;
      uint64_t v16 = (void *)swift_task_alloc();
      v0[20] = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_100299CC8;
      return ((uint64_t (*)(uint64_t, void, void, void, uint64_t))v21)(5000000000000000000, 0, 0, 0, 1);
    }
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    uint64_t v18 = (void *)v0[19];
    uint64_t v19 = v0[17];
    sub_10028DDAC(v19);

    sub_10000A7E8(v19, &qword_100974EA0);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_100299CC8()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v3 = v2[18];
  uint64_t v4 = v2[9];
  uint64_t v5 = v2[8];
  uint64_t v6 = v2[7];
  if (v0)
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = sub_1002B0414;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = sub_100299E74;
  }
  return _swift_task_switch(v7, v3, 0);
}

uint64_t sub_100299E74()
{
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = v0[17];
  sub_10028DDAC(v2);

  sub_10000A7E8(v2, &qword_100974EA0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100299F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  sub_10000A844(&qword_10096C5F0);
  v6[5] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  v6[6] = static AirDropActor.shared;
  return _swift_task_switch(sub_10029A000, v7, 0);
}

uint64_t sub_10029A000()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10029A0D0;
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:)(v2, &_swiftEmptyArrayStorage, v3, 0, 0xF000000000000000, 0, 0, 1);
}

uint64_t sub_10029A0D0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_10029A2C0;
  }
  else
  {
    uint64_t v4 = sub_10029A208;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10029A208()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = sub_10000A844(&qword_10096C5F8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_10000A7E8(v1, &qword_10096C5F0);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10029A2C0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = sub_10000A844(&qword_10096C5F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  sub_10000A7E8(v1, &qword_10096C5F0);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10029A378(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_10000A844(&qword_10096C920);
  uint64_t result = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v13 = type metadata accessor for TaskPriority();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    id v15 = a2;
    v14(v12, 1, 1, v13);
    uint64_t v16 = qword_100969B90;
    id v17 = a1;
    id v18 = a3;
    id v19 = a5;
    id v20 = v15;
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v21 = static AirDropActor.shared;
    uint64_t v22 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = v21;
    v23[3] = v22;
    v23[4] = v20;
    swift_retain();
    sub_1000092EC((uint64_t)v12, (uint64_t)&unk_10096C6F8, (uint64_t)v23);

    return swift_release();
  }
  return result;
}

uint64_t sub_10029A578()
{
  uint64_t v0 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
    uint64_t v6 = qword_100969B90;
    id v7 = v4;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = static AirDropActor.shared;
    uint64_t v9 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v8;
    v10[3] = v9;
    v10[4] = v7;
    swift_retain();
    sub_1000092EC((uint64_t)v2, (uint64_t)&unk_10096C6E8, (uint64_t)v10);

    return swift_release();
  }
  return result;
}

uint64_t sub_10029A75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000A844(&qword_100974EA0);
  *(void *)(v4 + 24) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029A828, v5, 0);
}

id sub_10029A828()
{
  uint64_t v1 = self;
  id result = [v1 sharedMonitor];
  if (!result)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v3 = result;
  unsigned int v4 = [result deviceKeyBagLocked];

  if (v4)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000B47C(v5, (uint64_t)qword_10096C1C0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "SDAirDropNearFieldService: device locked", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void *)(v0 + 24);

    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
    sub_10028DDAC(v9);
    sub_10000A7E8(v9, &qword_100974EA0);
    goto LABEL_10;
  }
  id result = [v1 sharedMonitor];
  if (!result)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  [result deviceUIUnlocked];

LABEL_10:
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return (id)v12();
}

uint64_t sub_10029AA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000A844(&qword_100974EA0);
  *(void *)(v4 + 24) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029AB08, v5, 0);
}

uint64_t sub_10029AB08()
{
  if ([*(id *)(v0[2] + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus) screenOn])
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService: switch Screen ON", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService: start", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = v0[2];

    sub_1000099C0(*(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x80000001007B76F0, 0);
  }
  else
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B47C(v9, (uint64_t)qword_10096C1C0);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SDAirDropNearFieldService: switch Screen OFF", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = v0[3];

    uint64_t v14 = type metadata accessor for UUID();
    id v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    v15(v13, 1, 1, v14);
    sub_10028DDAC(v13);
    sub_10000A7E8(v13, &qword_100974EA0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SDAirDropNearFieldService: stop", v18, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = v0[2];
    uint64_t v19 = v0[3];

    v15(v19, 1, 1, v14);
    sub_10028DDAC(v19);
    sub_10000A7E8(v19, &qword_100974EA0);
    sub_1002937C4(1);
    uint64_t v21 = *(void **)(v20 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(void *)(v20 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;
  }
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_10029AEE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Notification();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  uint64_t v15 = qword_100969B90;
  id v16 = a1;
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v17 = static AirDropActor.shared;
  uint64_t v18 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v18;
  v19[4] = v16;
  swift_retain();
  sub_1000092EC((uint64_t)v9, a5, (uint64_t)v19);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10029B13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029B1D8, v5, 0);
}

uint64_t sub_10029B1D8()
{
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B47C(v2, (uint64_t)qword_10096C1C0);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(char **)(v0 + 16);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109120;
    *(_DWORD *)(v0 + 24) = [*(id *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus] isAirDropAllowed];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SDAirDropNearFieldService airdrop allowed changed:%{BOOL}d - restarting", v8, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
  sub_100293C0C();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10029B380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000A844(&qword_100974EA0);
  *(void *)(v4 + 24) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029B44C, v5, 0);
}

uint64_t sub_10029B44C()
{
  if ([*(id *)(v0[2] + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus) wirelessEnabled])
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService wifi enabled, attempting to start", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService: start", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = v0[2];

    sub_1000099C0(*(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x80000001007B76F0, 0);
  }
  else
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B47C(v9, (uint64_t)qword_10096C1C0);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SDAirDropNearFieldService wifi disabled, stopping", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SDAirDropNearFieldService: stop", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v17 = v0[2];
    uint64_t v16 = v0[3];

    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 1, 1, v18);
    sub_10028DDAC(v16);
    sub_10000A7E8(v16, &qword_100974EA0);
    sub_1002937C4(1);
    uint64_t v19 = *(void **)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(void *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;
  }
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10029B7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029B870, v5, 0);
}

uint64_t sub_10029B870()
{
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService Buddy finished, attempting to start", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService: start", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = *(void *)(v0 + 16);

  sub_1000099C0(*(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x80000001007B76F0, 0);
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10029BA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000A844(&qword_100974EA0);
  *(void *)(v4 + 24) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029BB0C, v5, 0);
}

uint64_t sub_10029BB0C()
{
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  uint64_t v1 = (void *)static NSUserDefaults.airdrop.getter();
  char v2 = SFAirDropUserDefaults.nearFieldSharingEnabled.getter();

  if (v2)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000B47C(v3, (uint64_t)qword_10096C1C0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "SDAirDropNearFieldService Nearby sharing enabled, attempting to start", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[2];

    sub_1000099C0(*(void *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x80000001007B76F0, 0);
  }
  else
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10000B47C(v11, (uint64_t)qword_10096C1C0);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "SDAirDropNearFieldService Nearby sharing disabled, stopping", v14, 2u);
      swift_slowDealloc();
    }

    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SDAirDropNearFieldService: stop", v17, 2u);
      swift_slowDealloc();
    }
    uint64_t v19 = v0[2];
    uint64_t v18 = v0[3];

    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 1, 1, v20);
    sub_10028DDAC(v18);
    sub_10000A7E8(v18, &qword_100974EA0);
    sub_1002937C4(1);
    uint64_t v21 = *(void **)(v19 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(void *)(v19 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;
  }
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_10029BE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000A844(&qword_100974EA0);
  *(void *)(v4 + 24) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029BF54, v5, 0);
}

uint64_t sub_10029BF54()
{
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
  char v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService Proximity Apple ID Sign In progress, stopping", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService: stop", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[2];
  uint64_t v8 = v0[3];

  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  sub_10028DDAC(v8);
  sub_10000A7E8(v8, &qword_100974EA0);
  sub_1002937C4(1);
  uint64_t v11 = *(void **)(v9 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(void *)(v9 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0;

  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10029C174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029C210, v5, 0);
}

uint64_t sub_10029C210()
{
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
  char v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService Proximity Apple ID Sign In Finished, starting", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService: start", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = *(void *)(v0 + 16);

  sub_1000099C0(*(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x80000001007B76F0, 0);
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

void sub_10029C410()
{
  sub_10029C684(319, &qword_10096C288, (void (*)(uint64_t))type metadata accessor for SDNearFieldTap);
  if (v0 <= 0x3F)
  {
    sub_10029C684(319, &qword_10096C290, (void (*)(uint64_t))type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    if (v1 <= 0x3F)
    {
      sub_10029C6D8();
      if (v2 <= 0x3F)
      {
        sub_10029C684(319, &qword_10097C240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction);
        if (v3 <= 0x3F)
        {
          sub_10029C684(319, (unint64_t *)&qword_10096C2B0, (void (*)(uint64_t))&type metadata accessor for UUID);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

void sub_10029C684(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10029C6D8()
{
  if (!qword_10096C298)
  {
    sub_100247840((uint64_t *)&unk_10096C2A0);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10096C298);
    }
  }
}

uint64_t sub_10029C734(uint64_t a1, uint64_t a2)
{
  *(void *)(*v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate + 8) = a2;
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t sub_10029C784()
{
  return sub_100293AA8(0, 1, 0, 0);
}

void sub_10029C7B8()
{
}

void sub_10029C7DC(uint64_t a1)
{
}

void sub_10029C800(uint64_t a1)
{
  uint64_t v3 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v38 - v10;
  uint64_t v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v38 - v17;
  if (IsAppleInternalBuild())
  {
    uint64_t v44 = v1;
    if (qword_100969B00 != -1) {
      swift_once();
    }
    os_log_type_t v43 = v9;
    uint64_t v19 = type metadata accessor for Logger();
    sub_10000B47C(v19, (uint64_t)qword_10096C1C0);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v42 = a1;
    v20(v18, a1, v12);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v41 = (void (*)(char *, char *, uint64_t))v20;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v46 = v39;
      int v40 = v5;
      *(_DWORD *)uint64_t v24 = 136315138;
      v38[1] = v24 + 4;
      v41(v16, v18, v12);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v45 = sub_100254634(v25, v26, &v46);
      uint64_t v5 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "SDAirDropNearFieldService: updating nearby sharing interaction with simulated state: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v41;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }

    v20(v11, v42, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10024A330((uint64_t)v11, (uint64_t)v43, (uint64_t *)&unk_10096C2A0);
    unint64_t v31 = v44;
    static Published.subscript.setter();
    sub_10000A7E8((uint64_t)v11, (uint64_t *)&unk_10096C2A0);
    uint64_t v32 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v5, 1, 1, v32);
    uint64_t v33 = qword_100969B90;
    uint64_t v34 = v31;
    if (v33 != -1) {
      swift_once();
    }
    uint64_t v35 = static AirDropActor.shared;
    uint64_t v36 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
    uint64_t v37 = (void *)swift_allocObject();
    v37[2] = v35;
    v37[3] = v36;
    v37[4] = v34;
    swift_retain();
    sub_10028CE24((uint64_t)v5, (uint64_t)&unk_10096C6A8, (uint64_t)v37);
    swift_release();
  }
  else
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10000B47C(v27, (uint64_t)qword_10096C1C0);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v28, "Ignoring simulated nearby sharing interaction since we are not on an internal build", v29, 2u);
      swift_slowDealloc();
    }
    uint64_t v30 = v44;
  }
}

uint64_t sub_10029CE04(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10000A6F4;
  return sub_10029CEA0(a1);
}

uint64_t sub_10029CEA0(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = sub_10000A844(&qword_10096C478);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  v2[17] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v4 = static AirDropActor.shared;
  return _swift_task_switch(sub_10029CFFC, v4, 0);
}

uint64_t sub_10029CFFC()
{
  if (IsAppleInternalBuild())
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
    unint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService.at-a-distance: BEGIN", v4, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = v0[15];
    uint64_t v6 = v0[10];

    uint64_t v7 = v6 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
    swift_beginAccess();
    sub_10024A330(v7, v5, &qword_10096C478);
    Optional.tryUnwrap(_:file:line:)();
    uint64_t v14 = v0[10];
    sub_10000A7E8(v0[15], &qword_10096C478);
    uint64_t v15 = *(void **)(v14 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v15 && (id v16 = [v15 currentApplicationLabel]) != 0)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v20 = 0;
    }
    v0[7] = v18;
    v0[8] = v20;
    sub_10000A844(&qword_10096B540);
    Optional.tryUnwrap(_:file:line:)();
    uint64_t v21 = v0[17];
    uint64_t v24 = v0[16];
    uint64_t v25 = v0[12];
    uint64_t v26 = v0[13];
    uint64_t v27 = v0[11];
    swift_bridgeObjectRelease();
    os_log_type_t v28 = (uint64_t *)(v21 + *(int *)(v24 + 24));
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v21, v27);
    sub_10025ADCC(v29, v30);
    SFAirDropClient.BoopAtADistance.ServerInfo.init(applicationLabel:publicKeyData:bonjourUUID:)();
    sub_1002AD3D4(v21, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v22 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10000B47C(v8, (uint64_t)qword_10096C1C0);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "SDAirDropNearFieldService.at-a-distance: begin FAILED -- Not internal build", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v12 = type metadata accessor for SFError();
    sub_10000B980(&qword_10096C568, (void (*)(uint64_t))&type metadata accessor for SFError);
    swift_allocError();
    *uint64_t v13 = 0xD000000000000037;
    v13[1] = 0x80000001007B7790;
    id v13[2] = 0xD000000000000060;
    v13[3] = 0x80000001007B77D0;
    v13[4] = 986;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for SFError.notAvailable(_:), v12);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v22 = (uint64_t (*)(void))v0[1];
  }
  return v22();
}

uint64_t sub_10029D508(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A6F0;
  return sub_10029D5B0(a1, a2);
}

uint64_t sub_10029D5B0(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  type metadata accessor for SDNearFieldTap();
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v3[16] = v6;
  v3[17] = *(void *)(v6 - 8);
  v3[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction();
  v3[19] = v7;
  v3[20] = *(void *)(v7 - 8);
  v3[21] = swift_task_alloc();
  sub_10000A844(&qword_10096C920);
  v3[22] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v8 = static AirDropActor.shared;
  v3[23] = static AirDropActor.shared;
  return _swift_task_switch(sub_10029D820, v8, 0);
}

uint64_t sub_10029D820()
{
  if (IsAppleInternalBuild())
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    v0[12].receiver = (id)sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService.at-a-distance: UPDATE", v4, 2u);
      swift_slowDealloc();
    }
    receiver = (char *)v0[4].receiver;

    uint64_t v6 = *(objc_class **)&receiver[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController];
    v0[2].Class super_class = v6;
    uint64_t v7 = v6;
    sub_10000A844(&qword_10096C578);
    Optional.tryUnwrap(_:file:line:)();

    v0[12].Class super_class = (Class)v0[2].receiver;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "SDAirDropNearFieldService.at-a-distance: didDetectDeviceNearbyWithInitiatorRole", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = (uint64_t)v0[11].receiver;
    Class super_class = v0[9].super_class;
    uint64_t v12 = v0[10].receiver;
    Class v36 = v0[10].super_class;
    id v14 = v0[4].receiver;
    id v15 = v0[3].receiver;

    char v16 = SFAirDropClient.BoopAtADistance.Transaction.isInitiator.getter();
    uint64_t v17 = type metadata accessor for TaskPriority();
    v0[13].receiver = (id)v17;
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(objc_class **)(v18 + 56);
    v0[13].Class super_class = v19;
    v0[14].receiver = (id)((v18 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(v11, 1, 1, v17);
    uint64_t v20 = static AirDropActor.shared;
    uint64_t v21 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
    v0[14].Class super_class = (Class)v21;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = v21;
    *(unsigned char *)(v22 + 32) = v16 & 1;
    *(void *)(v22 + 40) = v14;
    id v23 = v14;
    swift_retain();
    sub_1000092EC(v11, (uint64_t)&unk_10096C590, v22);
    swift_release();
    uint64_t v24 = (void (*)(void, void, void))v12[2];
    v0[15].receiver = v24;
    v0[15].Class super_class = (Class)((unint64_t)(v12 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
    v24(v36, v15, super_class);
    uint64_t v25 = (objc_class *)type metadata accessor for SDBoopAtADistanceTransaction(0);
    uint64_t v26 = (char *)objc_allocWithZone(v25);
    v24(&v26[OBJC_IVAR____TtC16DaemoniOSLibrary28SDBoopAtADistanceTransaction_inner], v36, super_class);
    v0[1].receiver = v26;
    v0[1].Class super_class = v25;
    v0[16].receiver = [super init];
    ((void (*)(Class, Class))v12[1])(v36, super_class);
    ContinuousClock.init()();
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096C598 + dword_10096C598);
    uint64_t v27 = (objc_class *)swift_task_alloc();
    v0[16].Class super_class = v27;
    *(void *)uint64_t v27 = v0;
    *((void *)v27 + 1) = sub_10029DE94;
    return v37(1000000000000000000, 0, 0, 0, 1);
  }
  else
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10000B47C(v29, (uint64_t)qword_10096C1C0);
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "SDAirDropNearFieldService.at-a-distance: FAILED -- Not internal build", v32, 2u);
      swift_slowDealloc();
    }

    uint64_t v33 = type metadata accessor for SFError();
    sub_10000B980(&qword_10096C568, (void (*)(uint64_t))&type metadata accessor for SFError);
    swift_allocError();
    void *v34 = 0xD000000000000037;
    v34[1] = 0x80000001007B7790;
    v34[2] = 0xD000000000000060;
    v34[3] = 0x80000001007B77D0;
    v34[4] = 999;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v33 - 8) + 104))(v34, enum case for SFError.notAvailable(_:), v33);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = (uint64_t (*)(void))v0->super_class;
    return v35();
  }
}

uint64_t sub_10029DE94()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[23];
  (*(void (**)(void, void))(v2[17] + 8))(v2[18], v2[16]);
  if (v0) {
    uint64_t v4 = sub_10029E264;
  }
  else {
    uint64_t v4 = sub_10029E010;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10029E010()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SDAirDropNearFieldService.at-a-distance: nearFieldController.didBegin", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void *)v0[32];
  uint64_t v5 = v0[29];
  uint64_t v26 = (void (*)(uint64_t, uint64_t, uint64_t))v0[30];
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[27];
  uint64_t v7 = v0[26];
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[13];
  uint64_t v23 = v0[19];
  uint64_t v24 = v0[14];
  uint64_t v25 = v0[12];
  uint64_t v27 = v0[15];
  uint64_t v10 = (void *)v0[8];
  uint64_t v21 = v0[21];
  uint64_t v22 = v0[7];
  uint64_t v20 = v0[6];

  v6(v8, 1, 1, v7);
  uint64_t v11 = static AirDropActor.shared;
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  uint64_t v12[3] = v5;
  v12[4] = v4;
  v12[5] = v10;
  id v13 = v4;
  id v14 = v10;
  id v15 = v13;
  swift_retain();
  sub_10028CE24(v8, (uint64_t)&unk_10096C5A8, (uint64_t)v12);
  swift_release();

  v26(v21, v20, v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v24, v22, v25);
  sub_1004EFB20(v21, v24, v27);
  SFAirDropClient.BoopAtADistance.Transaction.identifier.getter();
  char v16 = (void *)swift_task_alloc();
  v0[35] = v16;
  *char v16 = v0;
  v16[1] = sub_10029E31C;
  uint64_t v17 = v0[15];
  uint64_t v18 = v0[11];
  return sub_1002965F4(v17, v18);
}

uint64_t sub_10029E264()
{
  uint64_t v1 = *(void **)(v0 + 200);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10029E31C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  uint64_t v4 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_10029E488, v1, 0);
}

uint64_t sub_10029E488()
{
  uint64_t v1 = *(void **)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 120);

  sub_1002AD3D4(v2, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_10029E568()
{
}

void sub_10029E58C()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (IsAppleInternalBuild())
  {
    uint64_t v6 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v7)
    {
      id v42 = [*(id *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) currentPreferredPollingType];
      uint64_t v8 = *(void **)(v0 + v6);
      if (v8)
      {
        id v9 = [v8 currentApplicationLabel];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v12 = v11;

LABEL_13:
          if (qword_100969B00 != -1) {
            swift_once();
          }
          uint64_t v19 = type metadata accessor for Logger();
          uint64_t v20 = sub_10000B47C(v19, (uint64_t)qword_10096C1C0);
          swift_bridgeObjectRetain_n();
          uint64_t v43 = v20;
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v38 = v6;
            uint64_t v39 = v5;
            uint64_t v40 = v1;
            uint64_t v37 = v7;
            uint64_t v23 = swift_slowAlloc();
            uint64_t v36 = swift_slowAlloc();
            uint64_t v46 = v36;
            *(_DWORD *)uint64_t v23 = 136315394;
            uint64_t v44 = (uint64_t)v42;
            LOBYTE(v45) = v7 == 0;
            sub_10000A844(&qword_10096C560);
            uint64_t v24 = String.init<A>(describing:)();
            uint64_t v44 = sub_100254634(v24, v25, &v46);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v23 + 12) = 2080;
            uint64_t v26 = v41;
            unint64_t v27 = v12;
            if (!v12)
            {
              uint64_t v26 = 0xD000000000000015;
              uint64_t v44 = 0;
              unint64_t v45 = 0xE000000000000000;
              _StringGuts.grow(_:)(17);
              swift_bridgeObjectRelease();
              unint64_t v27 = 0x80000001007B7770;
            }
            swift_bridgeObjectRetain();
            uint64_t v44 = sub_100254634(v26, v27, &v46);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "SDAirDropNearFieldService.at-a-distance: Restaring Field Service polling {lastPollingType: %s, lastApplicationLabel: %s}", (uint8_t *)v23, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v5 = v39;
            uint64_t v7 = v37;
            uint64_t v6 = v38;
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v28, v29))
          {
            unint64_t v30 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v30 = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "SDAirDropNearFieldService: stop", v30, 2u);
            swift_slowDealloc();
          }

          uint64_t v31 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v5, 1, 1, v31);
          sub_10028DDAC((uint64_t)v5);
          sub_10000A7E8((uint64_t)v5, &qword_100974EA0);
          sub_1002937C4(1);
          uint64_t v32 = *(void **)(v2 + v6);
          *(void *)(v2 + v6) = 0;

          sub_100293AA8((uint64_t)v42, v7 == 0, v41, v12);
          swift_bridgeObjectRelease();
          uint64_t v33 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v33, v34))
          {
            uint64_t v35 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "SDAirDropNearFieldService.at-a-distance: END", v35, 2u);
            swift_slowDealloc();
          }

          return;
        }
      }
    }
    else
    {
      id v42 = 0;
    }
    uint64_t v41 = 0;
    uint64_t v12 = 0;
    goto LABEL_13;
  }
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000B47C(v13, (uint64_t)qword_10096C1C0);
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    char v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SDAirDropNearFieldService.at-a-distance: FAILED -- Not internal build", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = type metadata accessor for SFError();
  sub_10000B980(&qword_10096C568, (void (*)(uint64_t))&type metadata accessor for SFError);
  swift_allocError();
  *uint64_t v18 = 0xD000000000000037;
  v18[1] = 0x80000001007B7790;
  v18[2] = 0xD000000000000060;
  v18[3] = 0x80000001007B77D0;
  v18[4] = 1022;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v18, enum case for SFError.notAvailable(_:), v17);
  swift_willThrow();
}

void sub_10029EBCC(uint64_t a1)
{
}

uint64_t sub_10029EBF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v11 = a1;
  uint64_t v1 = sub_10000A844(&qword_10096C518);
  __chkstk_darwin(v1);
  uint64_t v2 = sub_10000A844(&qword_10096C520);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A844(&qword_10096C528);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_10000A844(&qword_10096C530);
  Published.projectedValue.getter();
  swift_endAccess();
  sub_10000A844(&qword_10096C538);
  sub_1002AE308(&qword_10096C540, &qword_10096C520);
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1002AE308(&qword_10096C548, &qword_10096C528);
  Publisher<>.values.getter();
  sub_1002AE308(&qword_10096C550, &qword_10096C518);
  SFNoThrowAsyncSequence.init<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10029EED4(uint64_t a1, uint64_t a2)
{
  return sub_10029EEFC(a1, a2) & 1;
}

uint64_t sub_10029EEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  uint64_t v6 = (void *)static NSUserDefaults.airdrop.getter();
  char v7 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v7 & 1) != 0
    && (uint64_t v8 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap,
        swift_beginAccess(),
        uint64_t v9 = type metadata accessor for SDNearFieldTap(),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    && (uint64_t v12 = (void *)(v8 + *(int *)(v9 + 24)), (v13 = v12[1]) != 0))
  {
    if (*v12 == a1 && v13 == a2) {
      char v10 = 1;
    }
    else {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_10029F018(uint64_t a1)
{
  return sub_10029F040(a1) & 1;
}

uint64_t sub_10029F040(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096C480);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SDNearFieldTap();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  uint64_t v11 = (void *)static NSUserDefaults.airdrop.getter();
  char v12 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if (v12)
  {
    uint64_t v13 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
    swift_beginAccess();
    sub_10024A330(v13, (uint64_t)v6, (uint64_t *)&unk_10096C480);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      sub_1002AD36C((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      char v14 = sub_1004EFE60(a1);
      sub_1002AD3D4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
      return v14 & 1;
    }
    sub_10000A7E8((uint64_t)v6, (uint64_t *)&unk_10096C480);
  }
  char v14 = 0;
  return v14 & 1;
}

uint64_t sub_10029F238(uint64_t a1, uint64_t a2)
{
  return sub_1002904E4(a1, a2);
}

uint64_t sub_10029F25C(uint64_t a1)
{
  return sub_100290EFC(a1);
}

void sub_10029F280(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_10029F2A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10029F2C8(a1, a2, a3);
}

uint64_t sub_10029F2C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v200 = a2;
  uint64_t v219 = a1;
  uint64_t v215 = a3;
  uint64_t v199 = type metadata accessor for SFClientIdentity();
  uint64_t v198 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  v197 = (char *)v188 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v220 = type metadata accessor for SFAirDrop.NearbySharingAssertionRequest();
  uint64_t v217 = *(void *)(v220 - 8);
  uint64_t v4 = __chkstk_darwin(v220);
  v216 = (char *)v188 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v203 = (char *)v188 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v202 = (char *)v188 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v192 = (char *)v188 - v11;
  __chkstk_darwin(v10);
  os_log_t v194 = (char *)v188 - v12;
  uint64_t v13 = sub_10000A844((uint64_t *)&unk_10096C460);
  __chkstk_darwin(v13 - 8);
  v193 = (char *)v188 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = type metadata accessor for SFAirDrop.NearbySharingAssertion();
  uint64_t v208 = *(void *)(v212 - 8);
  uint64_t v15 = __chkstk_darwin(v212);
  unint64_t v201 = (char *)v188 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v196 = (char *)v188 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v207 = (char *)v188 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  id v206 = (char *)v188 - v22;
  __chkstk_darwin(v21);
  v195 = (char *)v188 - v23;
  uint64_t v24 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v218 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)v188 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  v210 = (void *)((char *)v188 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)v188 - v30;
  uint64_t v32 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v32 - 8);
  os_log_type_t v34 = (char *)v188 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v35 - 8);
  v214 = (void (*)(os_log_t, uint64_t))v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = ((char *)v188 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = __chkstk_darwin(v37);
  os_log_t v213 = (os_log_t)((char *)v188 - v41);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)v188 - v42;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t v44 = v218;
  swift_release();
  v209 = *(NSObject **)(v44 + 48);
  int v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v209)(v31, 1, v24);
  v211 = (void (*)(char *, char *, uint64_t))v24;
  v204 = v26;
  if (!v45)
  {
    uint64_t v189 = v39;
    v191 = v43;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v26, v31, v24);
    sub_10000A7E8((uint64_t)v31, (uint64_t *)&unk_10096C2A0);
    SFAirDrop.NearbySharingInteraction.id.getter();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v24);
    uint64_t v46 = *(char **)(v36 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v46)(v34, 0, 1, v35);
    uint64_t v47 = v35;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1) {
      goto LABEL_4;
    }
    v188[1] = v36 + 56;
    uint64_t v70 = (uint64_t)v191;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v191, v34, v35);
    os_log_t v71 = v213;
    SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter();
    char v72 = static UUID.== infix(_:_:)();
    uint64_t v73 = *(void (**)(os_log_t, uint64_t))(v36 + 8);
    v73(v71, v35);
    uint64_t v48 = v217;
    os_log_t v49 = v221;
    if ((v72 & 1) == 0)
    {
      v73((os_log_t)v70, v47);
      uint64_t v50 = v219;
      uint64_t v51 = v220;
      goto LABEL_5;
    }
    uint64_t v205 = v47;
    uint64_t v74 = v70;
    v216 = v46;
    v214 = v73;
    uint64_t v218 = v36 + 8;
    uint64_t v75 = (uint64_t *)((char *)v221
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
    swift_beginAccess();
    v210 = v75;
    uint64_t v76 = *v75;
    if (*(void *)(v76 + 16))
    {
      unint64_t v77 = sub_100583A00(v70);
      uint64_t v78 = v208;
      uint64_t v79 = v200;
      uint64_t v80 = v199;
      if (v81)
      {
        uint64_t v82 = *(void **)(*(void *)(v76 + 56) + 8 * v77);
        swift_endAccess();
        uint64_t v83 = v82[2];
        if (v83)
        {
          uint64_t v190 = v36;
          uint64_t v84 = v78 + 16;
          v211 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
          uint64_t v85 = (char *)v82
              + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
          uint64_t v86 = *(void *)(v84 + 56);
          uint64_t v87 = v82;
          swift_bridgeObjectRetain_n();
          uint64_t v88 = v212;
          uint64_t v89 = v206;
          while (1)
          {
            v211(v89, v85, v88);
            uint64_t v90 = SFAirDrop.NearbySharingAssertion.explanation.getter();
            uint64_t v92 = v91;
            if (v90 == SFAirDrop.NearbySharingAssertionRequest.explanation.getter() && v92 == v93)
            {
              uint64_t v82 = v87;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_45;
            }
            char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v94) {
              break;
            }
            uint64_t v89 = v206;
            uint64_t v88 = v212;
            (*(void (**)(char *, uint64_t))(v84 - 8))(v206, v212);
            v85 += v86;
            if (!--v83)
            {
              uint64_t v95 = v88;
              uint64_t v82 = v87;
              swift_bridgeObjectRelease();
              uint64_t v96 = 1;
              uint64_t v78 = v208;
              uint64_t v74 = (uint64_t)v191;
              uint64_t v36 = v190;
              uint64_t v97 = v195;
              uint64_t v98 = v194;
              uint64_t v99 = (uint64_t)v193;
              goto LABEL_46;
            }
          }
          uint64_t v82 = v87;
LABEL_45:
          uint64_t v97 = v195;
          swift_bridgeObjectRelease();
          uint64_t v78 = v208;
          uint64_t v99 = (uint64_t)v193;
          uint64_t v95 = v212;
          (*(void (**)(char *, char *, uint64_t))(v208 + 32))(v193, v206, v212);
          uint64_t v96 = 0;
          uint64_t v74 = (uint64_t)v191;
          uint64_t v36 = v190;
          uint64_t v98 = v194;
        }
        else
        {
          swift_bridgeObjectRetain_n();
          uint64_t v96 = 1;
          uint64_t v97 = v195;
          uint64_t v98 = v194;
          uint64_t v99 = (uint64_t)v193;
          uint64_t v95 = v212;
        }
LABEL_46:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v99, v96, 1, v95);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v99, 1, v95) != 1)
        {
          v211 = (void (*)(char *, char *, uint64_t))v82;
          uint64_t v156 = v99;
          uint64_t v157 = v205;
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v97, v156, v95);
          uint64_t v158 = v217;
          if (qword_100969B00 != -1) {
            swift_once();
          }
          uint64_t v159 = type metadata accessor for Logger();
          sub_10000B47C(v159, (uint64_t)qword_10096C1C0);
          v160 = *(void (**)(char *, uint64_t, uint64_t))(v158 + 16);
          v161 = v98;
          uint64_t v162 = v98;
          uint64_t v164 = v219;
          uint64_t v163 = v220;
          v160(v161, v219, v220);
          v165 = v192;
          v160(v192, v164, v163);
          uint64_t v166 = Logger.logObject.getter();
          os_log_type_t v167 = static os_log_type_t.default.getter();
          int v168 = v167;
          BOOL v169 = os_log_type_enabled(v166, v167);
          v170 = (void (*)(uint64_t, void, uint64_t, uint64_t))v216;
          if (v169)
          {
            uint64_t v171 = swift_slowAlloc();
            os_log_t v221 = (os_log_t)swift_slowAlloc();
            os_log_t v222 = v221;
            *(_DWORD *)uint64_t v171 = 136315394;
            v210 = (uint64_t *)(v171 + 4);
            os_log_t v172 = v213;
            LODWORD(v219) = v168;
            SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter();
            sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v173 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v175 = v174;
            os_log_t v213 = v166;
            v176 = v165;
            v214(v172, v157);
            uint64_t v223 = sub_100254634(v173, v175, (uint64_t *)&v222);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v177 = *(void (**)(char *, uint64_t))(v158 + 8);
            v177(v162, v163);
            *(_WORD *)(v171 + 12) = 2080;
            uint64_t v178 = SFAirDrop.NearbySharingAssertionRequest.explanation.getter();
            uint64_t v223 = sub_100254634(v178, v179, (uint64_t *)&v222);
            v170 = (void (*)(uint64_t, void, uint64_t, uint64_t))v216;
            v180 = v195;
            uint64_t v181 = v208;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v182 = v163;
            v183 = (void (*)(char *, uint64_t))v214;
            v177(v176, v182);
            os_log_t v184 = v213;
            _os_log_impl((void *)&_mh_execute_header, v213, (os_log_type_t)v219, "SDAirDropNearFieldService: Existing matching assertion for nearby sharing interaction:%s explanation:%s", (uint8_t *)v171, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v185 = v191;
          }
          else
          {
            uint64_t v186 = *(void (**)(char *, uint64_t))(v158 + 8);
            v186(v162, v163);
            v186(v165, v163);

            uint64_t v185 = v191;
            v183 = (void (*)(char *, uint64_t))v214;
            uint64_t v181 = v208;
            v180 = v195;
          }
          uint64_t v187 = v215;
          SFAirDrop.NearbySharingAssertion.id.getter();
          (*(void (**)(char *, uint64_t))(v181 + 8))(v180, v212);
          v183(v185, v157);
          v170(v187, 0, 1, v157);
          return swift_bridgeObjectRelease();
        }
        sub_10000A7E8(v99, (uint64_t *)&unk_10096C460);
        uint64_t v79 = v200;
        uint64_t v80 = v199;
        uint64_t v105 = v74;
        if (v82)
        {
LABEL_29:
          uint64_t v106 = *(void (**)(os_log_t, uint64_t, uint64_t))(v36 + 16);
          uint64_t v107 = v205;
          v106(v213, v105, v205);
          SFAirDrop.NearbySharingAssertionRequest.explanation.getter();
          (*(void (**)(char *, uint64_t, uint64_t))(v198 + 16))(v197, v79, v80);
          uint64_t v108 = v207;
          SFAirDrop.NearbySharingAssertion.init(nearbySharingInteractionID:explanation:client:)();
          uint64_t v109 = *(void (**)(char *, char *, uint64_t))(v208 + 16);
          uint64_t v110 = v196;
          v109(v196, v108, v212);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v82 = (void *)sub_100253470(0, v82[2] + 1, 1, (unint64_t)v82);
          }
          unint64_t v112 = v82[2];
          unint64_t v111 = v82[3];
          v211 = (void (*)(char *, char *, uint64_t))v82;
          if (v112 >= v111 >> 1) {
            v211 = (void (*)(char *, char *, uint64_t))sub_100253470(v111 > 1, v112 + 1, 1, (unint64_t)v211);
          }
          uint64_t v113 = (uint64_t)v211;
          *((void *)v211 + 2) = v112 + 1;
          unint64_t v114 = v113
               + ((*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80))
               + *(void *)(v208 + 72) * v112;
          uint64_t v115 = v212;
          (*(void (**)(unint64_t, char *, uint64_t))(v208 + 32))(v114, v110, v212);
          uint64_t v116 = (uint64_t)v189;
          v106(v189, (uint64_t)v191, v107);
          uint64_t v117 = v210;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v223 = *v117;
          *uint64_t v117 = 0x8000000000000000;
          sub_10059185C(v113, v116, isUniquelyReferenced_nonNull_native);
          *uint64_t v117 = v223;
          swift_bridgeObjectRelease();
          v214((os_log_t)v116, v107);
          swift_endAccess();
          if (qword_100969B00 != -1) {
            swift_once();
          }
          uint64_t v119 = type metadata accessor for Logger();
          sub_10000B47C(v119, (uint64_t)qword_10096C1C0);
          uint64_t v120 = v201;
          v109(v201, v207, v115);
          uint64_t v121 = v217;
          uint64_t v122 = *(void (**)(char *, uint64_t, uint64_t))(v217 + 16);
          uint64_t v123 = v202;
          uint64_t v125 = v219;
          uint64_t v124 = v220;
          v122(v202, v219, v220);
          uint64_t v126 = v203;
          v122(v203, v125, v124);
          uint64_t v127 = Logger.logObject.getter();
          os_log_type_t v128 = static os_log_type_t.default.getter();
          int v129 = v128;
          if (os_log_type_enabled(v127, v128))
          {
            uint64_t v130 = swift_slowAlloc();
            uint64_t v219 = swift_slowAlloc();
            os_log_t v222 = (os_log_t)v219;
            *(_DWORD *)uint64_t v130 = 136315650;
            id v206 = (char *)(v130 + 4);
            os_log_t v131 = v213;
            LODWORD(v210) = v129;
            SFAirDrop.NearbySharingAssertion.id.getter();
            sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter();
            v209 = v127;
            unint64_t v134 = v133;
            uint64_t v135 = (void (*)(char *, uint64_t))v214;
            v214(v131, v107);
            uint64_t v223 = sub_100254634(v132, v134, (uint64_t *)&v222);
            v204 = &v224;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            id v206 = *(char **)(v208 + 8);
            ((void (*)(char *, uint64_t))v206)(v201, v212);
            *(_WORD *)(v130 + 12) = 2080;
            unint64_t v201 = (char *)(v130 + 14);
            unint64_t v136 = v202;
            SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter();
            uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v139 = v138;
            os_log_t v140 = v131;
            uint64_t v141 = v135;
            v135((char *)v140, v107);
            uint64_t v223 = sub_100254634(v137, v139, (uint64_t *)&v222);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v142 = *(void (**)(char *, uint64_t))(v121 + 8);
            v142(v136, v124);
            *(_WORD *)(v130 + 22) = 2080;
            unint64_t v143 = v203;
            uint64_t v144 = SFAirDrop.NearbySharingAssertionRequest.explanation.getter();
            uint64_t v223 = sub_100254634(v144, v145, (uint64_t *)&v222);
            os_log_t v146 = v221;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v142(v143, v124);
            unint64_t v147 = v206;
            os_log_t v148 = v209;
            _os_log_impl((void *)&_mh_execute_header, v209, (os_log_type_t)v210, "SDAirDropNearFieldService: Created new assertion:%s for nearby sharing interaction:%s with explanation:%s", (uint8_t *)v130, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v149 = v120;
            unint64_t v147 = *(char **)(v208 + 8);
            ((void (*)(char *, uint64_t))v147)(v149, v212);
            os_log_type_t v150 = *(void (**)(char *, uint64_t))(v121 + 8);
            v150(v123, v124);
            v150(v126, v124);

            uint64_t v141 = (void (*)(char *, uint64_t))v214;
            os_log_t v146 = v221;
          }
          uint64_t v151 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem;
          if (*(Class *)((char *)&v146->isa
                        + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem))
          {
            swift_retain();
            dispatch thunk of DispatchWorkItem.cancel()();
            swift_release();
          }
          uint64_t v152 = v212;
          *(Class *)((char *)&v146->isa + v151) = 0;
          swift_release();
          uint64_t v153 = v215;
          uint64_t v154 = v207;
          SFAirDrop.NearbySharingAssertion.id.getter();
          ((void (*)(char *, uint64_t))v147)(v154, v152);
          uint64_t v155 = v205;
          v141(v191, v205);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v216)(v153, 0, 1, v155);
          return swift_bridgeObjectRelease();
        }
LABEL_28:
        uint64_t v82 = &_swiftEmptyArrayStorage;
        goto LABEL_29;
      }
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      uint64_t v79 = v200;
      uint64_t v80 = v199;
    }
    uint64_t v105 = v70;
    goto LABEL_28;
  }
  sub_10000A7E8((uint64_t)v31, (uint64_t *)&unk_10096C2A0);
  uint64_t v46 = *(char **)(v36 + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v34, 1, 1, v35);
  uint64_t v47 = v35;
LABEL_4:
  uint64_t v48 = v217;
  os_log_t v49 = v221;
  uint64_t v50 = v219;
  sub_10000A7E8((uint64_t)v34, &qword_100974EA0);
  uint64_t v51 = v220;
LABEL_5:
  uint64_t v52 = v216;
  v216 = v46;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  sub_10000B47C(v53, (uint64_t)qword_10096C1C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v52, v50, v51);
  uint64_t v54 = v49;
  id v55 = Logger.logObject.getter();
  int v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, (os_log_type_t)v56))
  {
    LODWORD(v219) = v56;
    os_log_t v221 = v55;
    uint64_t v57 = swift_slowAlloc();
    uint64_t v217 = swift_slowAlloc();
    os_log_t v222 = (os_log_t)v217;
    *(_DWORD *)uint64_t v57 = 136315394;
    uint64_t v212 = (uint64_t)v54;
    uint64_t v208 = v57 + 4;
    os_log_t v58 = v213;
    SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter();
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v61 = v60;
    uint64_t v63 = v36 + 8;
    id v62 = *(void (**)(os_log_t, uint64_t))(v36 + 8);
    uint64_t v205 = v47;
    uint64_t v190 = v63;
    v62(v58, v47);
    uint64_t v223 = sub_100254634(v59, v61, (uint64_t *)&v222);
    uint64_t v64 = (void *)v212;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v52, v220);
    *(_WORD *)(v57 + 12) = 2080;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v65 = (uint64_t)v210;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v66 = (unint64_t)v211;
    if (((unsigned int (*)(uint64_t, uint64_t, void))v209)(v65, 1, v211))
    {
      sub_10000A7E8(v65, (uint64_t *)&unk_10096C2A0);
      unint64_t v67 = 0x80000001007B76C0;
      unint64_t v68 = 0xD000000000000027;
      uint64_t v47 = v205;
    }
    else
    {
      uint64_t v100 = v218;
      uint64_t v101 = v204;
      (*(void (**)(char *, uint64_t, unint64_t))(v218 + 16))(v204, v65, v66);
      sub_10000A7E8(v65, (uint64_t *)&unk_10096C2A0);
      SFAirDrop.NearbySharingInteraction.id.getter();
      (*(void (**)(char *, unint64_t))(v100 + 8))(v101, v66);
      unint64_t v68 = UUID.uuidString.getter();
      unint64_t v67 = v102;
      uint64_t v47 = v205;
      v62(v58, v205);
    }
    uint64_t v223 = sub_100254634(v68, v67, (uint64_t *)&v222);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v103 = v221;
    _os_log_impl((void *)&_mh_execute_header, v221, (os_log_type_t)v219, "SDAirDropNearFieldService: Request to take assertion for nearby sharing interaction:%s failed because it's not matching the current active interaction:%s", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v69 = v215;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v52, v51);

    uint64_t v69 = v215;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v216)(v69, 1, 1, v47);
}

void sub_1002A0B10(uint64_t a1)
{
}

uint64_t sub_1002A0B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[10] = a4;
  v5[11] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096C2A0);
  v5[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v8 = static AirDropActor.shared;
  v5[21] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A0CDC, v8, 0);
}

uint64_t sub_1002A0CDC()
{
  uint64_t v48 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[22] = Strong;
  if (!Strong)
  {
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = (uint64_t (*)(void))v0[1];
    return v40();
  }
  uint64_t v2 = (char *)Strong;
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[16];
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    uint64_t v6 = v0[16];

    sub_10000A7E8(v6, (uint64_t *)&unk_10096C2A0);
    goto LABEL_12;
  }
  (*(void (**)(void, void, void))(v0[18] + 32))(v0[20], v0[16], v0[17]);
  SFAirDrop.NearbySharingInteraction.id.getter();
  uint64_t v7 = &v2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID];
  swift_beginAccess();
  uint64_t v8 = *(void *)v7;
  if (!*(void *)(v8 + 16) || (unint64_t v9 = sub_100583A00(v0[15]), (v10 & 1) == 0))
  {
    uint64_t v34 = v0[20];
    uint64_t v35 = v0[17];
    uint64_t v36 = v0[18];
    uint64_t v37 = v0[15];
    uint64_t v38 = v0[12];
    uint64_t v39 = v0[13];
    swift_endAccess();

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    goto LABEL_12;
  }
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[13];
  uint64_t v14 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
  swift_endAccess();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  swift_bridgeObjectRetain();
  v15(v11, v12);
  uint64_t v16 = *(void *)(v14 + 16);
  swift_bridgeObjectRelease();
  if (!v16)
  {
    (*(void (**)(void, void))(v0[18] + 8))(v0[20], v0[17]);

    goto LABEL_12;
  }
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v18 = v0[19];
  uint64_t v17 = v0[20];
  uint64_t v19 = v0[17];
  uint64_t v20 = v0[18];
  uint64_t v21 = type metadata accessor for Logger();
  v0[23] = sub_10000B47C(v21, (uint64_t)qword_10096C1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v17, v19);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = v0[18];
  if (v24)
  {
    uint64_t v44 = v15;
    uint64_t v26 = v0[19];
    uint64_t v45 = v0[17];
    uint64_t v27 = v0[14];
    uint64_t v28 = v0[12];
    os_log_type_t type = v23;
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    SFAirDrop.NearbySharingInteraction.id.getter();
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_t log = v22;
    unint64_t v32 = v31;
    v44(v27, v28);
    v0[9] = sub_100254634(v30, v32, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v33(v26, v45);
    uint64_t v22 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "SDAirDropNearFieldService relaunching AirDropUI after it crashed while nearby interaction %s was ongoing", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v33(v0[19], v0[17]);
  }

  v0[24] = v33;
  uint64_t v42 = (void *)swift_task_alloc();
  v0[25] = v42;
  void *v42 = v0;
  v42[1] = sub_1002A1214;
  return sub_100439494();
}

uint64_t sub_1002A1214()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v4 = sub_1002A13F4;
  }
  else {
    uint64_t v4 = sub_1002A1340;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002A1340()
{
  (*(void (**)(void, void))(v0 + 192))(*(void *)(v0 + 160), *(void *)(v0 + 136));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A13F4()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void **)(v0 + 176);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 64) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SDAirDropNearFieldService: Failed to launch AirDropUI process: %@", v4, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 176);

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  (*(void (**)(void, void))(v0 + 192))(*(void *)(v0 + 160), *(void *)(v0 + 136));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1002A1604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A16A4, v7, 0);
}

uint64_t sub_1002A16A4()
{
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService: nearFieldController did invalidate with error:%@", v4, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = (void *)v0[4];
  id v7 = [v6 currentPreferredPollingType];
  id v8 = [v6 currentApplicationLabel];
  if (v8)
  {
    uint64_t v9 = v8;
    unint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v12 = 0x80000001007B76F0;
    unint64_t v10 = 0xD000000000000013;
  }
  sub_1002937C4(0);
  sub_1000099C0((uint64_t)v7, v10, v12, 0);
  swift_bridgeObjectRelease();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1002A1CFC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a5;
  *(unsigned char *)(v5 + 112) = a4;
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  *(void *)(v5 + 56) = v6;
  *(void *)(v5 + 64) = *(void *)(v6 - 8);
  *(void *)(v5 + 72) = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096C2A0);
  *(void *)(v5 + 80) = swift_task_alloc();
  *(void *)(v5 + 88) = swift_task_alloc();
  *(void *)(v5 + 96) = swift_task_alloc();
  *(void *)(v5 + 104) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A1E50, v7, 0);
}

uint64_t sub_1002A1E50()
{
  uint64_t v35 = v0;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 112);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v34 = v6;
    if (v4) {
      uint64_t v7 = 0x6F74616974696E69;
    }
    else {
      uint64_t v7 = 0x7265766965636572;
    }
    if (v4) {
      unint64_t v8 = 0xEE00656C6F722072;
    }
    else {
      unint64_t v8 = 0xED0000656C6F7220;
    }
    *(void *)(v0 + 40) = sub_100254634(v7, v8, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService: did detect device nearby with %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v12 = *(void *)(v0 + 48)
      + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess();
  sub_10024A330(v12, v9, (uint64_t *)&unk_10096C2A0);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v14 = v13(v9, 1, v10);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 104);
  if (v14 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10000A7E8(v16, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 56);
    uint64_t v18 = *(void *)(v0 + 64);
    (*(void (**)(void, void, uint64_t))(v18 + 32))(*(void *)(v0 + 104), *(void *)(v0 + 96), v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v19 = *(void *)(v0 + 104);
  int v20 = v13(v19, 1, *(void *)(v0 + 56));
  sub_10000A7E8(v19, (uint64_t *)&unk_10096C2A0);
  if (v20 == 1) {
    sub_100293EC8();
  }
  uint64_t v21 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 56);
  sub_10024A330(v12, v21, (uint64_t *)&unk_10096C2A0);
  int v23 = v13(v21, 1, v22);
  uint64_t v25 = *(void *)(v0 + 80);
  uint64_t v24 = *(void *)(v0 + 88);
  if (v23 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10000A7E8(v25, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 56);
    uint64_t v27 = *(void *)(v0 + 64);
    (*(void (**)(void, void, uint64_t))(v27 + 32))(*(void *)(v0 + 88), *(void *)(v0 + 80), v26);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v28 = *(void *)(v0 + 88);
  uint64_t v29 = *(void *)(v0 + 56);
  if (v13(v28, 1, v29) == 1)
  {
    sub_10000A7E8(v28, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    uint64_t v31 = *(void *)(v0 + 64);
    uint64_t v30 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v30, v28, v29);
    SFAirDrop.NearbySharingInteraction.isInitiatorRoleExpected.setter();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v29);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_1002A2510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  sub_10000A844(&qword_10096C620);
  v5[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  v5[21] = v6;
  v5[22] = *(void *)(v6 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096C2A0);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  unsigned char v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[34] = v7;
  v5[35] = *(void *)(v7 - 8);
  v5[36] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v8 = static AirDropActor.shared;
  v5[37] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A273C, v8, 0);
}

uint64_t sub_1002A273C()
{
  uint64_t v66 = v0;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
  swift_unknownObjectRetain_n();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = *(void *)(v0 + 280);
    uint64_t v4 = *(void *)(v0 + 288);
    uint64_t v6 = *(void *)(v0 + 272);
    uint64_t v7 = *(void **)(v0 + 144);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    id v9 = [v7 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    *(void *)(v0 + 128) = sub_100254634(v10, v12, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    unsigned int v13 = [v7 isInitiator];
    BOOL v14 = v13 == 0;
    if (v13) {
      uint64_t v15 = 0x6F74616974696E69;
    }
    else {
      uint64_t v15 = 0x7265766965636572;
    }
    if (v14) {
      unint64_t v16 = 0xE800000000000000;
    }
    else {
      unint64_t v16 = 0xE900000000000072;
    }
    *(void *)(v0 + 136) = sub_100254634(v15, v16, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SDAirDropNearFieldService: did begin transaction:%s as %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v18 = *(void *)(v0 + 152)
      + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess();
  sub_10024A330(v18, v17, (uint64_t *)&unk_10096C2A0);
  uint64_t v19 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  uint64_t v24 = *(void *)(v0 + 256);
  uint64_t v23 = *(void *)(v0 + 264);
  uint64_t v64 = v18;
  if (v22 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10000A7E8(v24, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v23, v24, v19);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
  }
  uint64_t v25 = *(void *)(v0 + 264);
  int v26 = v21(v25, 1, v19);
  sub_10000A7E8(v25, (uint64_t *)&unk_10096C2A0);
  if (v26 == 1) {
    sub_100293EC8();
  }
  uint64_t v27 = *(void *)(v0 + 152);
  uint64_t v28 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem;
  if (*(void *)(v27
                 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  uint64_t v29 = *(void *)(v0 + 240);
  *(void *)(v27 + v28) = 0;
  swift_release();
  sub_10024A330(v18, v29, (uint64_t *)&unk_10096C2A0);
  int v30 = v21(v29, 1, v19);
  uint64_t v32 = *(void *)(v0 + 240);
  uint64_t v31 = *(void *)(v0 + 248);
  if (v30 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    sub_10000A7E8(v32, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(v20 + 32))(*(void *)(v0 + 248), *(void *)(v0 + 240), v19);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v31, 0, 1, v19);
  }
  uint64_t v33 = *(void *)(v0 + 248);
  if (v21(v33, 1, v19) == 1)
  {
    sub_10000A7E8(v33, (uint64_t *)&unk_10096C2A0);
LABEL_29:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
  uint64_t v34 = *(void *)(v0 + 192);
  uint64_t v35 = *(void *)(v0 + 168);
  uint64_t v36 = *(void *)(v0 + 176);
  SFAirDrop.NearbySharingInteraction.state.getter();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v33, v19);
  int v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 88))(v34, v35);
  int v38 = enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  if (v37 != v38) {
    goto LABEL_29;
  }
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "SDAirDropNearFieldService: connecting…", v41, 2u);
    swift_slowDealloc();
  }
  uint64_t v42 = *(void *)(v0 + 224);

  uint64_t v43 = v64;
  sub_10024A330(v64, v42, (uint64_t *)&unk_10096C2A0);
  int v44 = v21(v42, 1, v19);
  uint64_t v46 = *(void *)(v0 + 224);
  uint64_t v45 = *(void *)(v0 + 232);
  if (v44 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    uint64_t v43 = v64;
    swift_release();
    sub_10000A7E8(v46, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(v20 + 32))(*(void *)(v0 + 232), *(void *)(v0 + 224), v19);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v45, 0, 1, v19);
  }
  uint64_t v49 = *(void *)(v0 + 232);
  if (!v21(v49, 1, v19))
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 176) + 104))(*(void *)(v0 + 184), enum case for SFAirDrop.NearbySharingInteraction.State.connecting(_:), *(void *)(v0 + 168));
    SFAirDrop.NearbySharingInteraction.state.setter();
    uint64_t v49 = *(void *)(v0 + 232);
  }
  if (!v21(v49, 1, v19))
  {
    uint64_t v50 = *(void *)(v0 + 160);
    static ContinuousClock.Instant.now.getter();
    uint64_t v51 = type metadata accessor for ContinuousClock.Instant();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 0, 1, v51);
    SFAirDrop.NearbySharingInteraction.connectionTime.setter();
    uint64_t v49 = *(void *)(v0 + 232);
  }
  if (!v21(v49, 1, v19))
  {
    [*(id *)(v0 + 144) isInitiator];
    SFAirDrop.NearbySharingInteraction.isInitiator.setter();
  }
  uint64_t v52 = *(void *)(v0 + 216);
  sub_10024A330(v43, v52, (uint64_t *)&unk_10096C2A0);
  int v53 = v21(v52, 1, v19);
  sub_10000A7E8(v52, (uint64_t *)&unk_10096C2A0);
  uint64_t v54 = *(void *)(v0 + 232);
  if (v53 == 1)
  {
    uint64_t v56 = *(void *)(v0 + 200);
    uint64_t v55 = *(void *)(v0 + 208);
    uint64_t v57 = *(void **)(v0 + 152);
    sub_10024A330(*(void *)(v0 + 232), v55, (uint64_t *)&unk_10096C2A0);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10024A330(v55, v56, (uint64_t *)&unk_10096C2A0);
    id v58 = v57;
    static Published.subscript.setter();
    sub_10000A7E8(v55, (uint64_t *)&unk_10096C2A0);
  }
  else
  {
    swift_beginAccess();
    sub_1002AEFCC(v54, v43);
    swift_endAccess();
  }
  uint64_t v59 = *(void *)(v0 + 152) + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  swift_beginAccess();
  sub_100278C8C(v59, v0 + 16);
  uint64_t v60 = *(void *)(v0 + 40);
  uint64_t v61 = *(void *)(v0 + 48);
  sub_10026BB6C((void *)(v0 + 16), v60);
  uint64_t v63 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v61 + 40) + **(int **)(v61 + 40));
  id v62 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v62;
  *id v62 = v0;
  v62[1] = sub_1002A3290;
  return v63(v60, v61);
}

uint64_t sub_1002A3290()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 296);
  if (v0) {
    uint64_t v4 = sub_1002A34DC;
  }
  else {
    uint64_t v4 = sub_1002A33BC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002A33BC()
{
  sub_10024D338(v0 + 16);
  sub_10000A7E8(*(void *)(v0 + 232), (uint64_t *)&unk_10096C2A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A34DC()
{
  uint64_t v1 = *(void *)(v0 + 232);
  sub_10024D338(v0 + 16);
  sub_10000A7E8(v1, (uint64_t *)&unk_10096C2A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002A3690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  type metadata accessor for SDNearFieldTap();
  v6[7] = swift_task_alloc();
  sub_10000A844(&qword_100974EA0);
  v6[8] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v8 = static AirDropActor.shared;
  v6[12] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A37EC, v8, 0);
}

uint64_t sub_1002A37EC()
{
  uint64_t v47 = v0;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B47C(v2, (uint64_t)qword_10096C1C0);
  swift_unknownObjectRetain_n();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 72);
    id v9 = *(void **)(v0 + 32);
    uint64_t v45 = *(void **)(v0 + 40);
    uint64_t v10 = swift_slowAlloc();
    int v44 = (void *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    id v11 = [v9 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    *(void *)(v0 + 16) = sub_100254634(v12, v14, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2112;
    *(void *)(v0 + 24) = v45;
    id v15 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v44 = v45;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SDAirDropNearFieldService: did receive tap event for transaction: %s : %@", (uint8_t *)v10, 0x16u);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v16 = *(void **)(v0 + 40);
    swift_unknownObjectRelease_n();
  }
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  uint64_t v17 = (void *)static NSUserDefaults.airdrop.getter();
  char v18 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v18 & 1) == 0) {
    goto LABEL_9;
  }
  id v19 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v19 initWithSuiteName:v20];

  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    unsigned __int8 v23 = [v21 BOOLForKey:v22];

    if (v23)
    {
LABEL_9:
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        int v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "SDAirDropNearFieldService: Boop To Action is disabled on setSwiftTapEventHandler", v26, 2u);
        swift_slowDealloc();
      }

      goto LABEL_12;
    }
  }
  id v29 = [*(id *)(v0 + 40) deviceModel];
  if (v29)
  {
    id v30 = v29;
    unsigned int v31 = [v30 hasPrefix:@"Watch"];

    if (v31)
    {
      if ([*(id *)(v0 + 40) isSameAccount])
      {
        uint64_t v32 = *(void *)(v0 + 64);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 80) + 56))(v32, 1, 1, *(void *)(v0 + 72));
        sub_10028DDAC(v32);
        sub_10000A7E8(v32, &qword_100974EA0);
LABEL_12:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
        return v27();
      }
    }
  }
  uint64_t v33 = *(void *)(v0 + 88);
  uint64_t v34 = *(void *)(v0 + 56);
  uint64_t v35 = *(void **)(v0 + 32);
  uint64_t v36 = *(void **)(v0 + 40);
  char v37 = [v35 isInitiator] ^ 1;
  id v38 = v36;
  id v39 = [v35 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1004EF7E8(v38, v37, v33, v34);
  id v40 = [v35 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_1002A3E08;
  uint64_t v42 = *(void *)(v0 + 88);
  uint64_t v43 = *(void *)(v0 + 56);
  return sub_1002965F4(v43, v42);
}

uint64_t sub_1002A3E08()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  uint64_t v4 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_1002A3F74, v1, 0);
}

uint64_t sub_1002A3F74()
{
  sub_1002AD3D4(*(void *)(v0 + 56), (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A4210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[8] = v7;
  v5[9] = *(void *)(v7 - 8);
  v5[10] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v8 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A4364, v8, 0);
}

uint64_t sub_1002A4364()
{
  NSString v20 = v0;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096C1C0);
  swift_unknownObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t type = v3;
    uint64_t v5 = v0[9];
    uint64_t v4 = v0[10];
    uint64_t v6 = v0[8];
    uint64_t v7 = (void *)v0[3];
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [v7 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v0[2] = sub_100254634(v10, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, type, "SDAirDropNearFieldService: did interrupt transaction:%s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  uint64_t v14 = v0[6];
  uint64_t v13 = v0[7];
  uint64_t v15 = v0[5];
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:), v15);
  sub_100298370(v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1002A484C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10024A330(a1, (uint64_t)v10, (uint64_t *)&unk_10096C2A0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (result == 1)
  {
    unint64_t v12 = &_swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v13(v7, v10, v4);
    sub_10000A844(&qword_10096C558);
    unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v12 = (_OWORD *)swift_allocObject();
    v12[1] = xmmword_10076E7A0;
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v13)((char *)v12 + v14, v7, v4);
  }
  *a2 = v12;
  return result;
}

uint64_t sub_1002A4A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  *(void *)(v4 + 128) = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A4AA4, v5, 0);
}

uint64_t sub_1002A4AA4()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  v0[17] = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  uint64_t v3 = v1 + v2;
  swift_beginAccess();
  sub_100278C8C(v3, (uint64_t)(v0 + 2));
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  sub_10026BB6C(v0 + 2, v4);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 40) + **(int **)(v5 + 40));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[18] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1002A4BDC;
  return v8(v4, v5);
}

uint64_t sub_1002A4BDC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v4 = sub_1002B03C8;
  }
  else {
    uint64_t v4 = sub_1002B03F8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002A4D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v12 + v11, (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &unk_10096C660;
  *(void *)(v13 + 24) = v12;
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000A7E8((uint64_t)v8, &qword_10096C920);
}

uint64_t sub_1002A4F4C(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  uint64_t v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFPlatform();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State();
  v2[18] = v5;
  v2[19] = *(void *)(v5 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[21] = v6;
  v2[22] = *(void *)(v6 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096C2A0);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  v2[27] = v7;
  v2[28] = *(void *)(v7 - 8);
  v2[29] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v8 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A5204, v8, 0);
}

uint64_t sub_1002A5204()
{
  uint64_t v53 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v6 = Strong + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
    swift_beginAccess();
    sub_10024A330(v6, v5, (uint64_t *)&unk_10096C2A0);
    uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v7(v5, 1, v3) == 1)
    {
      uint64_t v8 = *(void *)(v0 + 200);
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_10000A7E8(v8, (uint64_t *)&unk_10096C2A0);
    }
    else
    {
      uint64_t v9 = *(void *)(v0 + 216);
      uint64_t v10 = *(void *)(v0 + 224);
      uint64_t v11 = *(void *)(v0 + 208);
      (*(void (**)(uint64_t, void, uint64_t))(v10 + 32))(v11, *(void *)(v0 + 200), v9);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v11, 0, 1, v9);
    }
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 216);
    if (v7(v12, 1, v13) == 1)
    {

      sub_10000A7E8(v12, (uint64_t *)&unk_10096C2A0);
    }
    else
    {
      uint64_t v14 = *(void *)(v0 + 192);
      uint64_t v15 = *(void *)(v0 + 168);
      uint64_t v16 = *(void *)(v0 + 176);
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 224) + 32))(*(void *)(v0 + 232), v12, v13);
      SFAirDrop.NearbySharingInteraction.id.getter();
      char v17 = static UUID.== infix(_:_:)();
      char v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v18(v14, v15);
      if (v17)
      {
        uint64_t v20 = *(void *)(v0 + 152);
        uint64_t v19 = *(void *)(v0 + 160);
        uint64_t v21 = *(void *)(v0 + 144);
        SFAirDrop.NearbySharingInteraction.state.getter();
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v20 + 88))(v19, v21) == enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:))
        {
          (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
          if (qword_100969B00 != -1) {
            swift_once();
          }
          uint64_t v23 = *(void *)(v0 + 176);
          uint64_t v22 = *(void *)(v0 + 184);
          uint64_t v24 = *(void *)(v0 + 168);
          uint64_t v25 = *(void *)(v0 + 88);
          uint64_t v26 = type metadata accessor for Logger();
          sub_10000B47C(v26, (uint64_t)qword_10096C1C0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
          uint64_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.default.getter();
          BOOL v29 = os_log_type_enabled(v27, v28);
          uint64_t v30 = *(void *)(v0 + 184);
          uint64_t v31 = *(void *)(v0 + 168);
          if (v29)
          {
            uint64_t v48 = *(void *)(v0 + 136);
            uint64_t v49 = *(void *)(v0 + 128);
            uint64_t v50 = *(void *)(v0 + 120);
            os_log_type_t type = v28;
            uint64_t v32 = swift_slowAlloc();
            uint64_t v52 = swift_slowAlloc();
            *(_DWORD *)uint64_t v32 = 136315394;
            sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 64) = sub_100254634(v33, v34, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v18(v30, v31);
            *(_WORD *)(v32 + 12) = 2048;
            static SFPlatform.watchOS.getter();
            char v35 = static SFPlatform.isPlatform(_:)();
            (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
            double v36 = 1.5;
            if (v35) {
              double v36 = 2.5;
            }
            *(double *)(v0 + 72) = v36;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v27, type, "SDAirDropNearFieldService: did fire timer to cancel nearby sharing interaction:%s after ~%fs if stuck in presence detected state.", (uint8_t *)v32, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            v18(*(void *)(v0 + 184), *(void *)(v0 + 168));
          }
          uint64_t v41 = *(void *)(v0 + 224);
          uint64_t v40 = *(void *)(v0 + 232);
          uint64_t v42 = *(void *)(v0 + 216);
          uint64_t v44 = *(void *)(v0 + 104);
          uint64_t v43 = *(void *)(v0 + 112);
          uint64_t v45 = *(void *)(v0 + 96);
          (*(void (**)(uint64_t, void, uint64_t))(v44 + 104))(v43, enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:), v45);
          sub_100298370(v43);

          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
          (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
        }
        else
        {
          uint64_t v38 = *(void *)(v0 + 152);
          uint64_t v37 = *(void *)(v0 + 160);
          uint64_t v39 = *(void *)(v0 + 144);
          (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));

          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
        }
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v0 + 224) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 216));
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
  return v46();
}

uint64_t sub_1002A5828(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v34 - v7;
  uint64_t v40 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v40);
  uint64_t v41 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v39 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v34 - v13;
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10000B47C(v15, (uint64_t)qword_10096C1C0);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v38(v14, a1, v9);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v36 = a1;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v35 = swift_slowAlloc();
    aBlock[0] = v35;
    uint64_t v37 = v1;
    *(_DWORD *)uint64_t v19 = 136315138;
    unint64_t v34 = v19 + 4;
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = (void *)sub_100254634(v20, v21, aBlock);
    uint64_t v2 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SDAirDropNearFieldService: start assertion timeout for nearby sharing interaction:%s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v36;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  }

  uint64_t v22 = v39;
  v38(v39, a1, v9);
  unint64_t v23 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v24 + v23, v22, v9);
  aBlock[4] = (uint64_t)sub_1002AF10C;
  aBlock[5] = v24;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100296520;
  aBlock[3] = (uint64_t)&unk_1008D4F18;
  _Block_copy(aBlock);
  uint64_t v46 = &_swiftEmptyArrayStorage;
  sub_10000B980((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v25 = v2;
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002AE308((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v26 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  sub_10000B740(0, (unint64_t *)&qword_10096A1A0);
  uint64_t v27 = (void *)static OS_dispatch_queue.main.getter();
  os_log_type_t v28 = v42;
  static DispatchTime.now()();
  BOOL v29 = v43;
  + infix(_:_:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v31 = v28;
  uint64_t v32 = v45;
  v30(v31, v45);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();

  v30(v29, v32);
  *(void *)&v25[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem] = v26;
  return swift_release();
}

uint64_t sub_1002A5E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  *(void *)(v4 + 128) = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A5EC0, v5, 0);
}

uint64_t sub_1002A5EC0()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  v0[17] = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  uint64_t v3 = v1 + v2;
  swift_beginAccess();
  sub_100278C8C(v3, (uint64_t)(v0 + 2));
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  sub_10026BB6C(v0 + 2, v4);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 40) + **(int **)(v5 + 40));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[18] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1002A5FF8;
  return v8(v4, v5);
}

uint64_t sub_1002A5FF8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v4 = sub_1002A61FC;
  }
  else {
    uint64_t v4 = sub_1002A6124;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002A6124()
{
  uint64_t v1 = v0[15] + v0[17];
  sub_10024D338((uint64_t)(v0 + 2));
  sub_100278C8C(v1, (uint64_t)(v0 + 7));
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  sub_10026BB6C(v0 + 7, v2);
  (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 64))(0xD000000000000023, 0x80000001007B78C0, v2, v3);
  sub_10024D338((uint64_t)(v0 + 7));
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1002A61FC()
{
  sub_10024D338(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A6260(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &unk_10096C648;
  *(void *)(v13 + 24) = v12;
  id v14 = a1;
  static Task<>.noThrow(priority:operation:)();
  swift_release();
  swift_release();
  return sub_10000A7E8((uint64_t)v9, &qword_10096C920);
}

uint64_t sub_1002A6484(uint64_t a1, uint64_t a2)
{
  v2[6] = a1;
  v2[7] = a2;
  sub_10000A844(&qword_100974EA0);
  v2[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096C2A0);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002A6648, v5, 0);
}

uint64_t sub_1002A6648()
{
  uint64_t v38 = v0;
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10000A7E8(v0[13], (uint64_t *)&unk_10096C2A0);
    goto LABEL_15;
  }
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];
  (*(void (**)(void, void, void))(v0[15] + 32))(v0[16], v0[13], v0[14]);
  SFAirDrop.NearbySharingInteraction.id.getter();
  char v7 = static UUID.== infix(_:_:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v8(v4, v5);
  if ((v7 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v9 = (uint64_t *)(v0[6]
                 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (*(void *)(v10 + 16) && (unint64_t v11 = sub_100583A00(v0[7]), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
    swift_endAccess();
    if (*(void *)(v13 + 16))
    {
LABEL_7:
      (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
      goto LABEL_15;
    }
  }
  else
  {
    swift_endAccess();
  }
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v15 = v0[10];
  uint64_t v14 = v0[11];
  uint64_t v16 = v0[9];
  uint64_t v17 = v0[7];
  uint64_t v18 = type metadata accessor for Logger();
  sub_10000B47C(v18, (uint64_t)qword_10096C1C0);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v19(v14, v17, v16);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v0[11];
  uint64_t v24 = v0[9];
  if (v22)
  {
    os_log_type_t type = v21;
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_100254634(v26, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v8(v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v20, type, "SDAirDropNearFieldService: did fire timer to cancel nearby sharing interaction:%s after 5 seconds if no clients took an assertion for it.", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v8(v0[11], v0[9]);
  }

  uint64_t v29 = v0[15];
  uint64_t v28 = v0[16];
  uint64_t v30 = v0[14];
  uint64_t v31 = v0[9];
  uint64_t v32 = v0[10];
  uint64_t v33 = v0[8];
  v19(v33, v0[7], v31);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v31);
  sub_10028DDAC(v33);
  sub_10000A7E8(v33, &qword_100974EA0);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v34 = (uint64_t (*)(void))v0[1];
  return v34();
}

uint64_t sub_1002A6AC4(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1002AD434((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      char v7 = &v3[16 * a1];
      uint64_t v8 = *((void *)v7 + 4);
      memmove(v7 + 32, v7 + 48, 16 * v6);
      *((void *)v3 + 2) = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002A6BA4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_1002AD448(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingAssertion();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  unint64_t *v2 = v5;
  return result;
}

uint64_t sub_1002A6D00@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_1002AD4B0(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    sub_1002AF688((long long *)&v5[5 * a1 + 4], a2);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = (uint64_t)memmove(&v5[5 * a1 + 4], &v5[5 * a1 + 9], 40 * (v7 - a1));
      v5[2] = v7;
      unint64_t *v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002A6DF4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_1002AD4D8(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = *(void *)(type metadata accessor for SDAirDropService.TransferPresenterClient() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  uint64_t result = sub_1002AD36C(v10, a2, (uint64_t (*)(void))type metadata accessor for SDAirDropService.TransferPresenterClient);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  unint64_t *v2 = v5;
  return result;
}

uint64_t sub_1002A6F7C(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    unint64_t v3 = sub_1002AD4EC(v3);
    *uint64_t v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002A7060()
{
  _StringGuts.grow(_:)(56);
  v1._object = (void *)0x80000001007B7930;
  v1._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v1);
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0) + 24));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  sub_10025ADCC(*v2, v4);
  v5._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_100250CC4(v3, v4);
  v6._countAndFlagsBits = 0x6E657473696C202CLL;
  v6._object = (void *)0xEF3A444955557265;
  String.append(_:)(v6);
  type metadata accessor for UUID();
  sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

id sub_1002A7244(void *a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v15 - v10;
  id v12 = a1;
  a4();

  uint64_t v13 = (void *)a5();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

  return v13;
}

id HeadphoneProxFeatureClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_1002A747C()
{
  return type metadata accessor for SDBoopAtADistanceTransaction(0);
}

uint64_t type metadata accessor for SDBoopAtADistanceTransaction(uint64_t a1)
{
  return sub_10000B93C(a1, (uint64_t *)&unk_10096C3A8);
}

uint64_t sub_1002A74A4()
{
  uint64_t result = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1002A7534(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    unint64_t v12 = *((void *)v10 + 1);
    swift_unknownObjectRetain();
    sub_10025ADCC(v11, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t sub_1002A7620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_unknownObjectRelease();
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];

  return sub_100250CC4(v6, v7);
}

uint64_t sub_1002A76A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = *(void *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  swift_unknownObjectRetain();
  sub_10025ADCC(v9, v10);
  *uint64_t v8 = v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_1002A7740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_10025ADCC(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_100250CC4(v12, v13);
  return a1;
}

uint64_t sub_1002A77F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1002A7878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_unknownObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100250CC4(v8, v9);
  return a1;
}

uint64_t sub_1002A7914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002A7928);
}

uint64_t sub_1002A7928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1002A79E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A79FC);
}

uint64_t sub_1002A79FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1002A7AB8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002A7B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_1002A7C5C, 0, 0);
}

uint64_t sub_1002A7C5C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_10000B980(&qword_10096C670, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_10000B980(&qword_10096C678, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002A7DFC;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1002A7DFC()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_1002A7FB8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1002A7FB8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002A8024()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_1002A80A4(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v13 - v8;
  sub_10024A330(a1, (uint64_t)&v13 - v8, (uint64_t *)&unk_10096C2A0);
  uint64_t v10 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10024A330((uint64_t)v9, (uint64_t)v7, (uint64_t *)&unk_10096C2A0);
  id v11 = v10;
  static Published.subscript.setter();
  return sub_10000A7E8((uint64_t)v9, (uint64_t *)&unk_10096C2A0);
}

double sub_1002A81B4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100583878(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10058CA44();
      uint64_t v9 = v11;
    }
    sub_10025B0A8(*(void *)(v9 + 48) + 40 * v6);
    sub_100249444((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1002AA6BC(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1002A82B0(uint64_t a1, uint64_t a2)
{
  return sub_1002A8CA8(a1, a2, (void (*)(void))sub_10058CC2C);
}

double sub_1002A82C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10058CC38();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100249444((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1002AA888(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1002A83CC(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10058392C(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10058CE20();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1002AB5A8(v4, v7, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, &qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier, (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1002A8508@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10058CE40();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1002AD354((long long *)(*(void *)(v11 + 56) + 48 * v8), a3);
    sub_1002AAA60(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t sub_1002A8614(uint64_t a1)
{
  return sub_1002AA1D8(a1, (void (*)(void))sub_10058D02C);
}

uint64_t sub_1002A862C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100583A00(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10058D038();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1002AAC4C(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002A8724()
{
  uint64_t v1 = (int *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;

  swift_unknownObjectRelease();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_unknownObjectRelease();
  sub_100250CC4(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

void sub_1002A8834()
{
  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);

  sub_100296564(v1, v2);
}

uint64_t sub_1002A8898(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002A88A8()
{
  return swift_release();
}

uint64_t sub_1002A88B0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002A88E8()
{
  return sub_1002960B4();
}

uint64_t sub_1002A88F0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002A8928()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_10024DEC4;
  return sub_10029620C(v0);
}

uint64_t sub_1002A89B8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A6F0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10096C4B0 + dword_10096C4B0);
  return v6(a1, v4);
}

uint64_t sub_1002A8A70(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100583A00(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10058D2D0();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_1002AAF44(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002A8B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002A98B4(a1, a2, (uint64_t (*)(void))&type metadata accessor for SFClientIdentity, (uint64_t (*)(void))&type metadata accessor for SFClientIdentity, (void (*)(void))sub_10058D5A8, a3);
}

uint64_t sub_1002A8BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002A96B0(a1, a2, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (void (*)(void))sub_10058D5C8, a3);
}

uint64_t sub_1002A8C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002A9450(a1, (uint64_t (*)(void))&type metadata accessor for NWEndpoint, (uint64_t (*)(void))&type metadata accessor for NWEndpoint, (void (*)(void))sub_10058D610, a2);
}

uint64_t sub_1002A8C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002A9450(a1, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer, (void (*)(void))sub_10058D644, a2);
}

uint64_t sub_1002A8C90(uint64_t a1, uint64_t a2)
{
  return sub_1002A8CA8(a1, a2, (void (*)(void))sub_10058D678);
}

uint64_t sub_1002A8CA8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  char v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  uint64_t v14 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v11 = v14;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_1002AC648(v8, v11);
  uint64_t *v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1002A8D88(uint64_t a1)
{
  return sub_1002A8DA0(a1, (void (*)(void))sub_10058D82C);
}

uint64_t sub_1002A8DA0(uint64_t a1, void (*a2)(void))
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100583A00(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1002AB5A8(v6, v9, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1002A8EEC(uint64_t a1, uint64_t a2)
{
  return sub_1002AA068(a1, a2, (void (*)(void))sub_10058D84C);
}

uint64_t sub_1002A8F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002A96B0(a1, a2, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint, type metadata accessor for SDAirDropDiscoveredEndpoint, (void (*)(void))sub_10058D858, a3);
}

uint64_t sub_1002A8F58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10058DB20();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1002AB8A0(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002A9040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10058392C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10058DCDC();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for SFAirDrop.TransferIdentifier();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_10000A844((uint64_t *)&unk_10096C7C0);
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_1002ABA78(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_10000A844((uint64_t *)&unk_10096C7C0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1002A9218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10058392C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10058DD04();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for SFAirDrop.TransferIdentifier();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_1002AD36C(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    sub_1002AB254(v6, v9, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1002A93F8(uint64_t a1)
{
  return sub_1002AA1D8(a1, (void (*)(void))sub_10058E064);
}

uint64_t sub_1002A9410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002A9450(a1, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer, (void (*)(void))sub_10058E314, a2);
}

uint64_t sub_1002A9450@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = v5;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_10058392C(a1);
  LOBYTE(a1) = v13;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v9;
    uint64_t v27 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      uint64_t v15 = v27;
    }
    uint64_t v16 = *(void *)(v15 + 48);
    uint64_t v17 = type metadata accessor for SFAirDrop.TransferIdentifier();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v12, v17);
    uint64_t v18 = *(void *)(v15 + 56);
    uint64_t v19 = a2(0);
    uint64_t v26 = *(void *)(v19 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 32))(a5, v18 + *(void *)(v26 + 72) * v12, v19);
    sub_1002AB254(v12, v15, a3);
    *uint64_t v9 = v15;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v21 = a5;
    uint64_t v22 = 0;
    uint64_t v23 = v19;
  }
  else
  {
    uint64_t v24 = a2(0);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    uint64_t v23 = v24;
    uint64_t v21 = a5;
    uint64_t v22 = 1;
  }

  return v20(v21, v22, 1, v23);
}

uint64_t sub_1002A9644(uint64_t a1, uint64_t a2)
{
  return sub_1002A8CA8(a1, a2, (void (*)(void))sub_10058E72C);
}

uint64_t sub_1002A965C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002A96B0(a1, a2, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState, (void (*)(void))sub_10058E8E4, a3);
}

uint64_t sub_1002A96B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X8>)
{
  unint64_t v12 = v7;
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v17;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v12;
    uint64_t v29 = *v12;
    *unint64_t v12 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a6();
      uint64_t v19 = v29;
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v19 + 56);
    uint64_t v21 = a3(0);
    uint64_t v28 = *(void *)(v21 - 8);
    sub_1002AD36C(v20 + *(void *)(v28 + 72) * v16, a7, a4);
    sub_1002ACA40(v16, v19, a5);
    *unint64_t v12 = v19;
    swift_bridgeObjectRelease();
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    uint64_t v23 = a7;
    uint64_t v24 = 0;
    uint64_t v25 = v21;
  }
  else
  {
    uint64_t v26 = a3(0);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    uint64_t v25 = v26;
    uint64_t v23 = a7;
    uint64_t v24 = 1;
  }

  return v22(v23, v24, 1, v25);
}

uint64_t sub_1002A9874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002A98B4(a1, a2, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(void))&type metadata accessor for Date, (void (*)(void))sub_10058E92C, a3);
}

uint64_t sub_1002A98B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = v6;
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v15;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v10;
    uint64_t v27 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      uint64_t v17 = v27;
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v17 + 56);
    uint64_t v19 = a3(0);
    uint64_t v26 = *(void *)(v19 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 32))(a6, v18 + *(void *)(v26 + 72) * v14, v19);
    sub_1002ACA40(v14, v17, a4);
    *uint64_t v10 = v17;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v21 = a6;
    uint64_t v22 = 0;
    uint64_t v23 = v19;
  }
  else
  {
    uint64_t v24 = a3(0);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    uint64_t v23 = v24;
    uint64_t v21 = a6;
    uint64_t v22 = 1;
  }

  return v20(v21, v22, 1, v23);
}

double sub_1002A9A80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100583A00(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10058E94C();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_1002AF688((long long *)(*(void *)(v9 + 56) + 40 * v6), a2);
    sub_1002AC154(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1002A9BB4(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100583A00(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10058EC20();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1002AAC4C(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002A9CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 2;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10058F144();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v9 + 56) + v6);
  sub_1002AC470(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002A9D88(uint64_t a1, uint64_t a2)
{
  return sub_1002A8CA8(a1, a2, (void (*)(void))sub_10058F150);
}

uint64_t sub_1002A9DA0(uint64_t a1, uint64_t a2)
{
  return sub_1002A8CA8(a1, a2, (void (*)(void))sub_10058F15C);
}

uint64_t sub_1002A9DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10058F168();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1002AC648(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002A9E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10058F324();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = sub_10000A844(&qword_10096C6C8);
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    sub_1002AC820(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_10000A844(&qword_10096C6C8);
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1002AA038(uint64_t a1, uint64_t a2)
{
  return sub_1002A8CA8(a1, a2, (void (*)(void))sub_10058F5EC);
}

uint64_t sub_1002AA050(uint64_t a1, uint64_t a2)
{
  return sub_1002AA068(a1, a2, (void (*)(void))sub_10058F7A4);
}

uint64_t sub_1002AA068(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  char v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1005838BC(a1, a2);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  uint64_t v14 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v11 = v14;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_1002AC648(v8, v11);
  uint64_t *v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1002AA150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002A98B4(a1, a2, (uint64_t (*)(void))&type metadata accessor for NWBrowser.Result, (uint64_t (*)(void))&type metadata accessor for NWBrowser.Result, (void (*)(void))sub_10058F958, a3);
}

uint64_t sub_1002AA190(uint64_t a1, uint64_t a2)
{
  return sub_1002A8CA8(a1, a2, (void (*)(void))sub_10058FC3C);
}

uint64_t sub_1002AA1A8(uint64_t a1, uint64_t a2)
{
  return sub_1002A8CA8(a1, a2, (void (*)(void))sub_10058FC48);
}

uint64_t sub_1002AA1C0(uint64_t a1)
{
  return sub_1002AA1D8(a1, (void (*)(void))sub_10058FFBC);
}

uint64_t sub_1002AA1D8(uint64_t a1, void (*a2)(void))
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100583A00(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1002AAF44(v6, v9);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1002AA2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1005838BC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1005905B8();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1002AB8A0(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002AA3D4(uint64_t a1)
{
  return sub_1002A8DA0(a1, (void (*)(void))sub_10059077C);
}

uint64_t sub_1002AA3EC(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100583A00(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100590A34();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1002AAC4C(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1002AA4E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100583A00(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100590CCC();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_10000A844(&qword_10096C6B0);
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_1002AD008(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_10000A844(&qword_10096C6B0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

unint64_t sub_1002AA6BC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1002AF920(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = sub_10025B0A8((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              long long v17 = *v16;
              long long v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AA888(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          long long v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    long long v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    long long v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *long long v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AAA60(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          long long v17 = (long long *)(v16 + 48 * v3);
          long long v18 = (long long *)(v16 + 48 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 3))
          {
            long long v9 = *v18;
            long long v10 = v18[2];
            v17[1] = v18[1];
            v17[2] = v10;
            *long long v17 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AAC4C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_10000B980(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            BOOL v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *BOOL v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AAF44(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_10000B980(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            BOOL v23 = (_OWORD *)(v22 + 16 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *BOOL v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AB23C(int64_t a1, uint64_t a2)
{
  return sub_1002AB254(a1, a2, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer);
}

unint64_t sub_1002AB254(int64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v40 = (result + 1) & v13;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v14 = v6 + 16;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v41 = v14;
      uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v14 - 8);
      uint64_t v39 = v15;
      uint64_t v36 = v13;
      do
      {
        uint64_t v17 = v10;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v12;
        v39(v9, *(void *)(a2 + 48) + v16 * v12, v5);
        sub_10000B980(&qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v38)(v9, v5);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v40)
        {
          if (v21 >= v40 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            uint64_t v25 = *(void *)(*(void *)(v37(0) - 8) + 72);
            int64_t v26 = v25 * a1;
            unint64_t result = v24 + v25 * a1;
            int64_t v27 = v25 * v12;
            unint64_t v28 = v24 + v25 * v12 + v25;
            BOOL v29 = v26 < v27 || result >= v28;
            uint64_t v10 = v17;
            if (v29)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v12;
              uint64_t v13 = v36;
            }
            else
            {
              a1 = v12;
              uint64_t v13 = v36;
              if (v26 != v27)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v12;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v40 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v10 = v17;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v13;
        uint64_t v16 = v18;
      }
      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  uint64_t *v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AB5A8(int64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v43 = a4;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t result = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = a2 + 64;
  uint64_t v14 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(void *)(a2 + 64 + 8 * (v15 >> 6))) != 0)
  {
    uint64_t v16 = ~v14;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      uint64_t v17 = (result + 1) & v16;
      uint64_t v41 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v42 = v9 + 16;
      uint64_t v46 = *(void *)(v9 + 72);
      unint64_t v40 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
      do
      {
        uint64_t v18 = v13;
        int64_t v19 = v46 * v15;
        v41(v12, *(void *)(a2 + 48) + v46 * v15, v8);
        unint64_t v20 = v17;
        uint64_t v21 = v16;
        sub_10000B980(v43, v44);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v40)(v12, v8);
        uint64_t v23 = v22 & v21;
        uint64_t v16 = v21;
        uint64_t v17 = v20;
        if (a1 >= (uint64_t)v20)
        {
          if (v23 >= v20 && a1 >= v23)
          {
LABEL_17:
            uint64_t v26 = *(void *)(a2 + 48);
            unint64_t result = v26 + v46 * a1;
            unint64_t v27 = v26 + v19 + v46;
            if (v46 * a1 < v19 || result >= v27)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              uint64_t v13 = v18;
            }
            else
            {
              BOOL v29 = v46 * a1 == v19;
              uint64_t v13 = v18;
              if (!v29) {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
              }
            }
            uint64_t v30 = *(void *)(a2 + 56);
            uint64_t v31 = (void *)(v30 + 8 * a1);
            uint64_t v32 = (void *)(v30 + 8 * v15);
            if (a1 != v15 || (a1 = v15, v31 >= v32 + 1))
            {
              *uint64_t v31 = *v32;
              a1 = v15;
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v20 || a1 >= v23)
        {
          goto LABEL_17;
        }
        uint64_t v13 = v18;
LABEL_5:
        unint64_t v15 = (v15 + 1) & v16;
      }
      while (((*(void *)(v13 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    uint64_t v33 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v33;
    uint64_t v35 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v33 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v35 = *v33;
    uint64_t v34 = (-1 << a1) - 1;
  }
  uint64_t *v33 = v35 & v34;
  uint64_t v36 = *(void *)(a2 + 16);
  BOOL v37 = __OFSUB__(v36, 1);
  uint64_t v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AB888(unint64_t a1, uint64_t a2)
{
  return sub_1002ACA40(a1, a2, type metadata accessor for SDAirDropDiscoveredEndpoint);
}

unint64_t sub_1002AB8A0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002ABA78(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      BOOL v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_10000B980(&qword_10096C610, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(sub_10000A844((uint64_t *)&unk_10096C7C0) - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002ABDC4(int64_t a1, uint64_t a2)
{
  return sub_1002AB254(a1, a2, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer);
}

unint64_t sub_1002ABDDC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      BOOL v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_10000B980(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for SFNWInterfaceType() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AC124(unint64_t a1, uint64_t a2)
{
  return sub_1002ACA40(a1, a2, type metadata accessor for RegistrationState);
}

unint64_t sub_1002AC13C(unint64_t a1, uint64_t a2)
{
  return sub_1002ACA40(a1, a2, (uint64_t (*)(void))&type metadata accessor for Date);
}

unint64_t sub_1002AC154(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v37 = (result + 1) & v12;
      uint64_t v38 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v39 = v5 + 16;
      uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v11;
        uint64_t v19 = v15;
        v38(v8, *(void *)(a2 + 48) + v14 * v11, v4);
        sub_10000B980(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v36)(v8, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v17 * a1;
            uint64_t v9 = v16;
            if (v17 * a1 < v18 || (uint64_t v14 = v17, result >= v24 + v18 + v17))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v25 = *(void *)(a2 + 56);
            unint64_t v26 = v25 + 40 * a1;
            unint64_t v27 = (long long *)(v25 + 40 * v11);
            if (a1 != v11 || (a1 = v11, v26 >= (unint64_t)v27 + 40))
            {
              long long v28 = *v27;
              long long v29 = v27[1];
              *(void *)(v26 + 32) = *((void *)v27 + 4);
              *(_OWORD *)unint64_t v26 = v28;
              *(_OWORD *)(v26 + 16) = v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v15;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  uint64_t *v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AC470(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (unsigned char *)(v14 + v3);
          uint64_t v16 = (unsigned char *)(v14 + v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AC648(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AC820(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(sub_10000A844(&qword_10096C6C8) - 8) + 72);
        int64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002ACA40(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v12 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = (_OWORD *)(v13 + 16 * v4);
        uint64_t v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1) {
          *uint64_t v14 = *v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v18 = v17 * v4;
        unint64_t result = v16 + v17 * v4;
        int64_t v19 = v17 * v7;
        unint64_t v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v18 == v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v12 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002ACC64(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        sub_10025ADCC(v10, v11);
        Data.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = sub_100250CC4(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          int64_t v18 = (void *)(v17 + 8 * v3);
          int64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *int64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002ACE4C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (void *)(v11 + 8 * v3);
          unint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::Int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002AD008(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      unint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_10000B980(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(sub_10000A844(&qword_10096C6B0) - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    long long v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    long long v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1002AD354(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_1002AD36C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002AD3D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *sub_1002AD434(uint64_t a1)
{
  return sub_100253360(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1002AD448(unint64_t a1)
{
  return sub_100253470(0, *(void *)(a1 + 16), 0, a1);
}

char *sub_1002AD45C(uint64_t a1)
{
  return sub_100253724(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1002AD474(void *a1)
{
  return sub_100253C84(0, a1[2], 0, a1);
}

void *sub_1002AD488(void *a1)
{
  return sub_100253AF8(0, a1[2], 0, a1);
}

void *sub_1002AD49C(void *a1)
{
  return sub_100253C3C(0, a1[2], 0, a1);
}

void *sub_1002AD4B0(void *a1)
{
  return sub_100253DD4(0, a1[2], 0, a1);
}

void *sub_1002AD4C4(void *a1)
{
  return sub_100253DE8(0, a1[2], 0, a1);
}

uint64_t sub_1002AD4D8(unint64_t a1)
{
  return sub_100254228(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1002AD4EC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *sub_1002AD568(void *a1)
{
  return sub_10025438C(0, a1[2], 0, a1);
}

uint64_t sub_1002AD57C(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_1002AD65C;
  return v5(v2 + 32);
}

uint64_t sub_1002AD65C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  unsigned char *v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

id sub_1002AD770(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v45 = a1;
  uint64_t v46 = a3;
  uint64_t v44 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = type metadata accessor for SFAirDropClient.Identifier();
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  __chkstk_darwin(v5);
  uint64_t v47 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000A844(&qword_10096C530);
  uint64_t v7 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  uint64_t v10 = __chkstk_darwin(v42);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v42 - v13;
  *(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType] = 0;
  *(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController] = 0;
  uint64_t v15 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap];
  uint64_t v16 = type metadata accessor for SDNearFieldTap();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload];
  uint64_t v18 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService__nearbySharingInteraction];
  uint64_t v20 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  BOOL v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v14, 1, 1, v20);
  sub_10024A330((uint64_t)v14, (uint64_t)v12, (uint64_t *)&unk_10096C2A0);
  uint64_t v22 = v4;
  Published.init(initialValue:)();
  sub_10000A7E8((uint64_t)v14, (uint64_t *)&unk_10096C2A0);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v9, v43);
  v21(&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction], 1, 1, v20);
  uint64_t v23 = v44;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem] = 0;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem] = 0;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem] = 0;
  uint64_t v24 = &v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID];
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  unint64_t v27 = v45;
  int64_t v26 = v46;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue] = v45;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus] = v26;
  sub_100278C8C(v23, (uint64_t)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager]);
  BOOL v28 = self;
  id v29 = v27;
  id v30 = v26;
  id v31 = [v28 defaultCenter];
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_notificationCenter] = v31;
  type metadata accessor for SFAirDropClient();
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v47, enum case for SFAirDropClient.Identifier.boop(_:), v49);
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropClient] = SFAirDropClient.__allocating_init(identifier:)();
  if ([self isAvailable])
  {
    sub_10000B740(0, (unint64_t *)&qword_10096AC60);
    uint64_t v32 = (void *)static NSUserDefaults.airdrop.getter();
    char v33 = SFAirDropUserDefaults.nearFieldControllerEnabled.getter();
  }
  else
  {
    char v33 = 0;
  }
  v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldControllerIsAvailable] = v33 & 1;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID] = &_swiftEmptyDictionarySingleton;
  type metadata accessor for SDAirDropAWDLSingleBandManager();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = &_swiftEmptySetSingleton;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_singleBandManager] = v34;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID] = &_swiftEmptyDictionarySingleton;
  *(void *)&v22[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel] = &_swiftEmptyDictionarySingleton;

  v51.receiver = v22;
  v51.Class super_class = ObjectType;
  id v35 = [super init];
  uint64_t v36 = (uint64_t)v35 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_airDropUISessionManager;
  swift_beginAccess();
  uint64_t v37 = *(void *)(v36 + 24);
  uint64_t v38 = *(void *)(v36 + 32);
  sub_1002AF758(v36, v37);
  unint64_t v39 = *(void (**)(id, _UNKNOWN **, uint64_t, uint64_t))(v38 + 16);
  id v40 = v35;
  v39(v35, &off_1008D4B40, v37, v38);
  swift_endAccess();
  sub_10028D770();

  sub_10024D338(v23);
  return v40;
}

BOOL sub_1002ADD48(uint64_t a1)
{
  uint64_t v2 = (int *)type metadata accessor for SDNearFieldTap();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithSuiteName:v6];

  if (v7)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    unsigned __int8 v9 = [v7 BOOLForKey:v8];

    if (v9) {
      return 1;
    }
  }
  if (*(unsigned char *)(a1 + v2[12])) {
    return 0;
  }
  int v11 = *(unsigned __int8 *)(a1 + v2[17]);
  if (v11 == 2) {
    return 0;
  }
  sub_1002AE574(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
  if (v11)
  {
    uint64_t v12 = *(void *)&v4[v2[6] + 8];
    sub_1002AD3D4((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    return v12 == 0;
  }
  else
  {
    sub_1002AD3D4((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SDNearFieldTap);
    return 1;
  }
}

void sub_1002ADF04()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldControllerIsAvailable) == 1)
  {
    uint64_t v1 = v0;
    uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
    if (*(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController)) {
      return;
    }
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000B47C(v7, (uint64_t)qword_10096C1C0);
    NSString v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "SDAirDropNearFieldService nearFieldController is available", v10, 2u);
      swift_slowDealloc();
    }

    id v11 = [objc_allocWithZone((Class)SDRPNearFieldController) initWithDispatchQueue:*(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue) delegate:v1];
    NSString v6 = *(NSObject **)(v1 + v2);
    *(void *)(v1 + v2) = v11;
  }
  else
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10000B47C(v3, (uint64_t)qword_10096C1C0);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "SDAirDropNearFieldService nearFieldController is NOT available", v5, 2u);
      swift_slowDealloc();
    }
    NSString v6 = oslog;
  }
}

uint64_t sub_1002AE128()
{
  uint64_t v1 = (int *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;

  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_unknownObjectRelease();
  sub_100250CC4(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

void sub_1002AE238()
{
  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);

  sub_10029371C(v1, v2);
}

uint64_t sub_1002AE2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_10096C4F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002AE308(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100247840(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002AE34C()
{
  return _swift_deallocObject(v0, 25, 7);
}

id sub_1002AE384()
{
  uint64_t v1 = *(void **)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 24);
  id result = [v1 stop];
  if (v2 == 1)
  {
    return [v1 invalidate];
  }
  return result;
}

uint64_t sub_1002AE3EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  NSString v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *NSString v8 = v2;
  v8[1] = sub_10000A6F0;
  return sub_1002A1CFC(a1, v4, v5, v6, v7);
}

uint64_t sub_1002AE4B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  NSString v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *NSString v8 = v2;
  v8[1] = sub_10000A6F0;
  return sub_1002A2510(a1, v4, v5, v7, v6);
}

uint64_t sub_1002AE574(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002AE5DC()
{
  uint64_t v1 = (int *)(type metadata accessor for SDNearFieldTap() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = (v2 + 16) & ~v2;
  unint64_t v24 = (*(void *)(*(void *)v1 + 64) + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType();
  uint64_t v25 = *(void *)(v3 - 8);
  uint64_t v26 = v3;
  uint64_t v4 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v21 = (v24 + v4 + 8) & ~v4;
  uint64_t v5 = *(void *)(v25 + 64);
  uint64_t v6 = (int *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v21 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(*(void *)v6 + 64);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = v2 | v4 | v7 | v12 | 7;
  uint64_t v15 = (v8 + v9 + v12) & ~v12;
  uint64_t v16 = (v13 + v12 + v15) & ~v12;
  uint64_t v22 = v16 + v13;
  uint64_t v23 = v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v0 + v20, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100250CC4(*(void *)(v0 + v20 + v1[15]), *(void *)(v0 + v20 + v1[15] + 8));
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v18(v0 + v20 + v1[16], v10);
  v18(v0 + v20 + v1[17], v10);

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v0 + v21, v26);
  v18(v0 + v8, v10);
  swift_unknownObjectRelease();
  sub_100250CC4(*(void *)(v0 + v8 + v6[8]), *(void *)(v0 + v8 + v6[8] + 8));
  v18(v0 + v15, v10);
  v18(v0 + v16, v10);

  return _swift_deallocObject(v0, v22, v23);
}

void sub_1002AE954()
{
  uint64_t v1 = *(void *)(type metadata accessor for SDNearFieldTap() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType() - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (v8 + v9 + v11) & ~v11;
  uint64_t v13 = *(char **)(v0 + v3);
  uint64_t v14 = v0 + ((*(void *)(v10 + 64) + v11 + v12) & ~v11);

  sub_100298830(v0 + v2, v13, v0 + v5, (uint64_t *)(v0 + v8), v0 + v12, v14);
}

uint64_t sub_1002AEB1C()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002AEBF0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000A6F0;
  return sub_100299758(a1, v5, v6, v7, v8);
}

uint64_t sub_1002AECEC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_unknownObjectRelease();

  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1002AEDE8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 40) & ~v5;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v6;
  uint64_t v11 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = sub_10000A6F0;
  return sub_100299F2C(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1002AEF14(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A6F0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10096C600 + dword_10096C600);
  return v6(a1, v4);
}

uint64_t sub_1002AEFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096C2A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002AF038()
{
  return sub_1002AF124(sub_1002A4D08);
}

uint64_t sub_1002AF054(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_1002A5E20(a1, v4, v5, v6);
}

uint64_t sub_1002AF10C()
{
  return sub_1002AF124((uint64_t (*)(uint64_t, uint64_t))sub_1002A6260);
}

uint64_t sub_1002AF124(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_1002AF1A0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002AF26C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10000A6F0;
  return sub_1002A6484(v3, v4);
}

uint64_t sub_1002AF340()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002AF378(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A6F0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100975798 + dword_100975798);
  return v6(a1, v4);
}

uint64_t sub_1002AF430()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002AF4FC()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10000A6F0;
  return sub_1002A4F4C(v3, v4);
}

uint64_t sub_1002AF5D4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_1002A4A04(a1, v4, v5, v6);
}

uint64_t sub_1002AF688(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1002AF6A0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A6F0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10096C6B8 + dword_10096C6B8);
  return v6(a1, v4);
}

uint64_t sub_1002AF758(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1002AF7A8()
{
  return sub_10029A578();
}

uint64_t sub_1002AF7B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10029BA40(a1, v4, v5, v6);
}

uint64_t sub_1002AF86C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10029B7D4(a1, v4, v5, v6);
}

uint64_t sub_1002AF920(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002AF980(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000A6F0;
  return sub_1002A4210(a1, v4, v5, v7, v6);
}

uint64_t sub_1002AFA40()
{
  return sub_1002AFE30((void (*)(void))&_swift_unknownObjectRelease, 56);
}

uint64_t sub_1002AFA5C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000A6F4;
  return sub_1002A3690(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1002AFB24(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = qword_100969B90;
  swift_unknownObjectRetain();
  id v9 = a2;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = static AirDropActor.shared;
  uint64_t v11 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  unint64_t v12 = (void *)swift_allocObject();
  v12[2] = v10;
  uint64_t v12[3] = v11;
  v12[4] = a1;
  v12[5] = v9;
  swift_retain();
  sub_10028CE24((uint64_t)v6, (uint64_t)&unk_10096C720, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_1002AFCC4()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002AFD0C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000A6F4;
  return sub_1002A2510(a1, v4, v5, v7, v6);
}

uint64_t sub_1002AFDD4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002AFE14()
{
  return sub_1002AFE30((void (*)(void))&_swift_errorRelease, 64);
}

uint64_t sub_1002AFE30(void (*a1)(void), uint64_t a2)
{
  swift_unknownObjectRelease();
  a1(*(void *)(v2 + 32));

  return _swift_deallocObject(v2, a2, 7);
}

uint64_t sub_1002AFE9C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = sub_10000A6F0;
  return sub_1002A1604(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1002AFF74(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10029C174(a1, v4, v5, v6);
}

uint64_t sub_1002B002C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10029BE88(a1, v4, v5, v6);
}

uint64_t sub_1002B00EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10029B380(a1, v4, v5, v6);
}

uint64_t sub_1002B01A4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10029B13C(a1, v4, v5, v6);
}

uint64_t sub_1002B025C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10029AA3C(a1, v4, v5, v6);
}

uint64_t sub_1002B0314(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10029A75C(a1, v4, v5, v6);
}

uint64_t sub_1002B0418()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096C7D0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096C7D0);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002B0570()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_1002B4B7C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = &unk_1008D5328;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_1002B5514((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002B4B9C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_1002B0808(uint64_t a1)
{
  uint64_t v38 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000A844(&qword_10096C8F8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (int64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = (unint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
  swift_beginAccess();
  unint64_t v11 = *v10;
  uint64_t v13 = (void *)(*v10 + 64);
  uint64_t v12 = *v13;
  char v33 = v10;
  uint64_t v34 = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v12;
  int64_t v35 = (unint64_t)(v14 + 63) >> 6;
  int64_t v32 = v35 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v37 = (char *)&type metadata for () + 8;
  if (!v16) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  unint64_t v20 = v19 | (v18 << 6);
  while (2)
  {
    uint64_t v21 = *(void *)(v11 + 56);
    uint64_t v22 = (void *)(*(void *)(v11 + 48) + 16 * v20);
    uint64_t v23 = v22[1];
    *uint64_t v7 = *v22;
    v7[1] = v23;
    uint64_t v24 = v21 + *(void *)(v36 + 72) * v20;
    uint64_t v25 = sub_10000A844(&qword_10096C900);
    sub_1002B4BF8(v24, (uint64_t)v7 + *(int *)(v25 + 48));
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 0, 1, v25);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1002B4C5C((uint64_t)v7, (uint64_t)v9);
      uint64_t v30 = sub_10000A844(&qword_10096C900);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v9, 1, v30) == 1)
      {
        swift_release();
        unint64_t v31 = sub_100245BDC((uint64_t)_swiftEmptyArrayStorage);
        unint64_t *v33 = v31;
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_1002B4CC4((uint64_t)&v9[*(int *)(v30 + 48)], (uint64_t)v3);
      sub_10000A844(&qword_10096BBA8);
      SFProgressContinuation.cancel(_:)();
      Task.cancel()();
      uint64_t result = sub_1002B4D28((uint64_t)v3);
      if (v16) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v26 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v26 < v35)
      {
        unint64_t v27 = v34[v26];
        if (v27) {
          goto LABEL_11;
        }
        int64_t v28 = v18 + 2;
        ++v18;
        if (v26 + 1 < v35)
        {
          unint64_t v27 = v34[v28];
          if (v27) {
            goto LABEL_14;
          }
          int64_t v18 = v26 + 1;
          if (v26 + 2 < v35)
          {
            unint64_t v27 = v34[v26 + 2];
            if (v27)
            {
              v26 += 2;
              goto LABEL_11;
            }
            int64_t v28 = v26 + 3;
            int64_t v18 = v26 + 2;
            if (v26 + 3 < v35) {
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v29 = sub_10000A844(&qword_10096C900);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v7, 1, 1, v29);
      unint64_t v16 = 0;
    }
    unint64_t v27 = v34[v28];
    if (v27)
    {
LABEL_14:
      int64_t v26 = v28;
LABEL_11:
      unint64_t v16 = (v27 - 1) & v27;
      unint64_t v20 = __clz(__rbit64(v27)) + (v26 << 6);
      int64_t v18 = v26;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v35)
    {
      int64_t v18 = v32;
      goto LABEL_25;
    }
    unint64_t v27 = v34[v26];
    ++v28;
    if (v27) {
      goto LABEL_11;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1002B0C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v40 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  unint64_t v39 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v32 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SFAirDropReceive.AskResponse();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v34, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a4, v9);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + v19 + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v21 + v17, v16, v13);
  uint64_t v22 = v32;
  uint64_t v23 = v33;
  *(void *)(v21 + v18) = v33;
  uint64_t v24 = (void *)(v21 + v19);
  uint64_t v25 = v38;
  *uint64_t v24 = v37;
  v24[1] = v25;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v21 + v20, v12, v22);
  aBlock[4] = sub_1002B56E0;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = &unk_1008D54E0;
  int64_t v26 = _Block_copy(aBlock);
  id v27 = v23;
  swift_bridgeObjectRetain();
  int64_t v28 = v36;
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = &_swiftEmptyArrayStorage;
  sub_1002B5514((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002B4B9C();
  uint64_t v30 = v39;
  uint64_t v29 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v29);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v42);
  return swift_release();
}

uint64_t sub_1002B10BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v28[1] = a4;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AcceptContext();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SFAirDropReceive.AskResponse();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == enum case for SFAirDropReceive.AskResponse.accept(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    uint64_t v15 = sub_10000A844(&qword_10096C950);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, &v13[*(int *)(v15 + 48)], v6);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      unint64_t v17 = (void *)Strong;
      NSString v18 = String._bridgeToObjectiveC()();
      URL._bridgeToObjectiveC()(v19);
      uint64_t v21 = v20;
      [v17 alertManager:a2 acceptingTransferWithRecordID:v18 withDestinationURL:v20 shouldExtractMediaFromPhotosBundlesForRecordID:SFAirDropReceive.AcceptContext.shouldExtractMedia.getter() & 1];
      swift_unknownObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v22 = type metadata accessor for SFAirDropReceive.ItemDestination();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v13, v22);
  }
  if (v14 == enum case for SFAirDropReceive.AskResponse.decline(_:))
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (!result) {
      return result;
    }
    uint64_t v24 = (void *)result;
    NSString v25 = String._bridgeToObjectiveC()();
    [v24 alertManager:a2 cancelingTransferWithRecordID:v25 withFailureReason:0];
    goto LABEL_14;
  }
  if (v14 == enum case for SFAirDropReceive.AskResponse.error(_:))
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (!result) {
      return result;
    }
    int64_t v26 = (void *)result;
    NSString v25 = String._bridgeToObjectiveC()();
    [v26 alertManager:a2 cancelingTransferWithRecordID:v25 withFailureReason:1];
    goto LABEL_14;
  }
  if (v14 != enum case for SFAirDropReceive.AskResponse.mixedTypes(_:))
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return result;
  }
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v27 = (void *)result;
    NSString v25 = String._bridgeToObjectiveC()();
    [v27 alertManager:a2 cancelingTransferWithRecordID:v25 withFailureReason:2];
LABEL_14:

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1002B1480@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!a3)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  swift_bridgeObjectRetain();
  v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  SFAirDropReceive.AskRequest.init(recordID:initialInfo:)(v5, a2, v7.super.isa, a4);
  uint64_t v8 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v9(a4, 0, 1, v8);
}

uint64_t sub_1002B1834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_queue];
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  void v15[4] = v3;
  v15[5] = a3;
  aBlock[4] = sub_1002B52D4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = &unk_1008D5468;
  unint64_t v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v17 = v3;
  static DispatchQoS.unspecified.getter();
  v19[1] = &_swiftEmptyArrayStorage;
  sub_1002B5514((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002B4B9C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

Class sub_1002B1AF0(uint64_t a1, void *a2, char *a3, objc_class *a4)
{
  uint64_t v104 = a4;
  uint64_t v105 = a3;
  uint64_t v6 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  uint64_t v100 = *(void *)(v6 - 8);
  uint64_t v101 = v6;
  __chkstk_darwin(v6);
  uint64_t v92 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v8 - 8);
  uint64_t v93 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for SFAirDrop.Progress();
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v87 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A844(&qword_10096BBA8);
  uint64_t v90 = *(void *)(v11 - 8);
  uint64_t v91 = v11;
  __chkstk_darwin(v11);
  char v94 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000A844(&qword_10096C908);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v89 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v98 = (void (**)(unint64_t, char *, uint64_t))((char *)&v84 - v16);
  uint64_t v17 = sub_10000A844((uint64_t *)&unk_10096C928);
  __chkstk_darwin(v17 - 8);
  unint64_t v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v96 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v85 = (char *)&v84 - v25;
  __chkstk_darwin(v24);
  id v27 = (char *)&v84 - v26;
  if (qword_100969B20 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v29 = sub_10000B47C(v28, (uint64_t)qword_10096C7D0);
  swift_bridgeObjectRetain_n();
  uint64_t v97 = v29;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v102 = a1;
  os_log_t v103 = v27;
  if (v32)
  {
    uint64_t v99 = v20;
    uint64_t v95 = v21;
    char v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    *(_DWORD *)char v33 = 136315138;
    unint64_t v34 = (unint64_t)a2;
    if (!a2)
    {
      v107[0] = 0;
      v107[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      a1 = 0xD000000000000015;
      unint64_t v34 = 0x80000001007B7770;
    }
    swift_bridgeObjectRetain();
    v107[0] = sub_100254634(a1, v34, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Incoming transfer %s from senderNode", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v21 = v95;
    uint64_t v20 = v99;
    a1 = v102;
    id v27 = v103;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  sub_1002B1480(a1, a2, (uint64_t)v104, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    return (Class)sub_10000A7E8((uint64_t)v19, (uint64_t *)&unk_10096C928);
  }
  uint64_t v36 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 32);
  Class result = (Class)v36(v27, v19, v20);
  if (!a2)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v37 = &v105[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations];
  swift_beginAccess();
  uint64_t v38 = *(void *)v37;
  uint64_t v39 = *(void *)(*(void *)v37 + 16);
  uint64_t v84 = (void (*)(unint64_t, char *, uint64_t))v36;
  if (v39)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_1005838BC(a1, (uint64_t)a2);
    if (v41)
    {
      uint64_t v42 = *(void *)(v38 + 56);
      uint64_t v43 = v100;
      uint64_t v44 = (void (*)(void, void, void, void))v98;
      sub_1002B4BF8(v42 + *(void *)(v100 + 72) * v40, (uint64_t)v98);
      uint64_t v45 = *(void (**)(void (**)(unint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v43 + 56);
      uint64_t v46 = (void (**)(unint64_t, char *, uint64_t))v44;
      uint64_t v47 = 0;
    }
    else
    {
      uint64_t v43 = v100;
      uint64_t v45 = *(void (**)(void (**)(unint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v100 + 56);
      uint64_t v44 = (void (*)(void, void, void, void))v98;
      uint64_t v46 = v98;
      uint64_t v47 = 1;
    }
    uint64_t v48 = v101;
    v45(v46, v47, 1, v101);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = v100;
    uint64_t v48 = v101;
    uint64_t v45 = *(void (**)(void (**)(unint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v100 + 56);
    uint64_t v44 = (void (*)(void, void, void, void))v98;
    v45(v98, 1, 1, v101);
  }
  swift_endAccess();
  int v49 = (*(uint64_t (**)(void (*)(void, void, void, void), uint64_t, uint64_t))(v43 + 48))(v44, 1, v48);
  sub_10000A7E8((uint64_t)v44, &qword_10096C908);
  if (v49 == 1)
  {
    Class result = v104;
    if (v104)
    {
      uint64_t v99 = v20;
      Class result = Dictionary._bridgeToObjectiveC()().super.isa;
      if (kSFOperationReceiverClassroomDestination)
      {
        Class v50 = result;
        sub_10000B740(0, (unint64_t *)&unk_10096B280);
        NSDictionary.sf_value<A>(_:as:file:line:)();
        uint64_t v97 = v107[0];
        (*(void (**)(char *, void, uint64_t))(v86 + 104))(v87, enum case for SFAirDrop.Progress.notStarted(_:), v88);
        sub_10000A844((uint64_t *)&unk_10096C8B0);
        SFProgressContinuation.init(_:initialProgress:file:line:)();
        uint64_t v62 = type metadata accessor for TaskPriority();
        uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56);
        uint64_t v104 = v50;
        v63(v93, 1, 1, v62);
        uint64_t v95 = v21;
        uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
        uint64_t v98 = (void (**)(unint64_t, char *, uint64_t))v45;
        uint64_t v65 = v85;
        uint64_t v66 = v99;
        v64(v85, v103, v99);
        unint64_t v67 = (*(unsigned __int8 *)(v21 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        unint64_t v68 = (v22 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v69 = (v68 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v70 = swift_allocObject();
        id v71 = v105;
        *(void *)(v70 + 16) = v105;
        v84(v70 + v67, v65, v66);
        char v72 = (uint64_t *)(v70 + v68);
        uint64_t v73 = v102;
        *char v72 = v102;
        v72[1] = (uint64_t)a2;
        uint64_t v74 = (void *)v97;
        *(void *)(v70 + v69) = v97;
        swift_bridgeObjectRetain();
        id v75 = v71;
        uint64_t v105 = v74;
        uint64_t v76 = (uint64_t)v93;
        uint64_t v77 = static Task<>.noThrow(priority:operation:)();
        swift_release();
        sub_10000A7E8(v76, &qword_10096C920);
        uint64_t v78 = v90;
        uint64_t v79 = v91;
        uint64_t v80 = (uint64_t)v92;
        char v81 = v94;
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v92, v94, v91);
        uint64_t v82 = v101;
        *(void *)(v80 + *(int *)(v101 + 20)) = v77;
        uint64_t v83 = v89;
        sub_1002B4BF8(v80, v89);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v98)(v83, 0, 1, v82);
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_retain();
        sub_100466854(v83, v73, (uint64_t)a2);
        swift_endAccess();

        swift_release();
        sub_1002B4D28(v80);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v81, v79);
        return (Class)(*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v103, v99);
      }
      goto LABEL_26;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  objc_super v51 = v96;
  uint64_t v52 = v103;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v96, v103, v20);
  uint64_t v53 = v20;
  uint64_t v54 = Logger.logObject.getter();
  uint64_t v55 = v21;
  os_log_type_t v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    v107[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 136315138;
    sub_1002B5514(&qword_10096C948, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v106 = sub_100254634(v58, v59, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
    v60(v51, v53);
    _os_log_impl((void *)&_mh_execute_header, v54, v56, "Repeated ask requests for the same transfer. Dropping {askInfo: %s}", v57, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (Class)((uint64_t (*)(char *, uint64_t))v60)(v103, v53);
  }
  else
  {

    uint64_t v61 = *(void (**)(char *, uint64_t))(v55 + 8);
    v61(v51, v53);
    return (Class)((uint64_t (*)(char *, uint64_t))v61)(v52, v53);
  }
}

uint64_t sub_1002B27C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  uint64_t v7 = type metadata accessor for URL();
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDropReceive.AskResponse();
  v6[10] = v8;
  v6[11] = *(void *)(v8 - 8);
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_1002B28EC, 0, 0);
}

void sub_1002B28EC()
{
  uint64_t v1 = v0[5];
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[13] = v2;
    void *v2 = v0;
    v2[1] = sub_1002B29A8;
    uint64_t v3 = v0[12];
    uint64_t v4 = v0[3];
    uint64_t v5 = v0[4];
    uint64_t v6 = v0[2];
    sub_100543914(v3, v6, v4, v5, v1);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002B29A8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1002B2AA4, 0, 0);
}

uint64_t sub_1002B2AA4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[4];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1002B0C4C(v1, v8, v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_1002B2BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A844(&qword_10096C908);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
    swift_beginAccess();
    uint64_t v14 = *v13;
    if (*(void *)(v14 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1005838BC(a2, a3);
      if (v16)
      {
        sub_1002B4BF8(*(void *)(v14 + 56) + *(void *)(v10 + 72) * v15, (uint64_t)v8);
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v17, 1, v9);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
      {
        sub_1002B4CC4((uint64_t)v8, (uint64_t)v12);
        swift_endAccess();
        sub_10000A844(&qword_10096BBA8);
        SFProgressContinuation.cancel(_:)();
        Task.cancel()();
        sub_1002B4D28((uint64_t)v12);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    sub_10000A7E8((uint64_t)v8, &qword_10096C908);
    swift_endAccess();
    if (qword_100969B20 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B47C(v18, (uint64_t)qword_10096C7D0);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Received progress event after continuation had been cleared. Dropping.", v21, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002B2EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A844(&qword_10096BBA8);
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000A844(&qword_10096C908);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    char v16 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
    swift_beginAccess();
    uint64_t v17 = *v16;
    if (*(void *)(v17 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_1005838BC(a2, a3);
      if (v19)
      {
        sub_1002B4BF8(*(void *)(v17 + 56) + *(void *)(v13 + 72) * v18, (uint64_t)v11);
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v20, 1, v12);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        sub_1002B4CC4((uint64_t)v11, (uint64_t)v15);
        swift_endAccess();
        uint64_t v25 = v28;
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v8, v15, v6);
        uint64_t v26 = type metadata accessor for SFAirDropReceive.Failure();
        sub_1002B5514(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v27, enum case for SFAirDropReceive.Failure.senderCancelled(_:), v26);
        SFProgressContinuation.fail(with:)();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
        swift_errorRelease();
        swift_retain();
        Task.cancel()();
        swift_release();
        sub_1002B4D28((uint64_t)v15);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    }
    sub_10000A7E8((uint64_t)v11, &qword_10096C908);
    swift_endAccess();
    if (qword_100969B20 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000B47C(v21, (uint64_t)qword_10096C7D0);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Receive error event after continuation has been cleared. Dropping.", v24, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002B3394(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v14 = 0;
  unint64_t v16 = 0;
  if (a4) {
LABEL_3:
  }
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:
  id v17 = a1;
  sub_1002B4DD8(v14, v16, a5, a6, a7, a8);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002B3474(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v27 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B20 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000B47C(v13, (uint64_t)qword_10096C7D0);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v25 = v3;
    uint64_t v26 = v7;
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = a1;
    os_log_type_t v31 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v16 = 136315138;
    uint64_t v24 = a1;
    unint64_t v18 = a2;
    if (!a2)
    {
      uint64_t aBlock = 0;
      unint64_t v33 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v18 = 0x80000001007B7770;
      uint64_t v17 = 0xD000000000000015;
    }
    swift_bridgeObjectRetain();
    uint64_t aBlock = sub_100254634(v17, v18, (uint64_t *)&v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "finishedEvent {recordID: %s}", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v4 = v25;
    uint64_t v7 = v26;
    a1 = v24;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  char v19 = (void *)swift_allocObject();
  void v19[2] = v4;
  v19[3] = a1;
  uint64_t v20 = v27;
  v19[4] = a2;
  v19[5] = v20;
  uint64_t v36 = sub_1002B4DCC;
  uint64_t v37 = v19;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v33 = 1107296256;
  unint64_t v34 = sub_100296520;
  uint64_t v35 = &unk_1008D5378;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v22 = v4;
  static DispatchQoS.unspecified.getter();
  os_log_type_t v31 = &_swiftEmptyArrayStorage;
  sub_1002B5514((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002B4B9C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  return swift_release();
}

void sub_1002B38E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v44 = (char *)v43 - v13;
  uint64_t v49 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v45 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  Class v50 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000A844(&qword_10096C908);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  uint64_t v18 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (uint64_t)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3) {
    goto LABEL_33;
  }
  uint64_t v20 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
  swift_beginAccess();
  uint64_t v21 = *v20;
  if (!*(void *)(v21 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1, 1, v48);
LABEL_8:
    sub_10000A7E8((uint64_t)v17, &qword_10096C908);
    swift_endAccess();
    if (qword_100969B20 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10000B47C(v26, (uint64_t)qword_10096C7D0);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Received finish after continuation had been cleared. Dropping.", v29, 2u);
      swift_slowDealloc();
    }

    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1005838BC(a2, a3);
  if (v23)
  {
    sub_1002B4BF8(*(void *)(v21 + 56) + *(void *)(v18 + 72) * v22, (uint64_t)v17);
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = 1;
  }
  uint64_t v25 = v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, v24, 1, v48);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v25) == 1) {
    goto LABEL_8;
  }
  sub_1002B4CC4((uint64_t)v17, v47);
  swift_endAccess();
  if (!a4) {
    goto LABEL_34;
  }
  v30.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!kSFOperationItemsKey)
  {
LABEL_35:
    __break(1u);
    return;
  }
  Class isa = v30.super.isa;
  sub_10000B740(0, &qword_10096C910);
  NSDictionary.sf_value<A>(_:as:file:line:)();
  v43[1] = "eClassroomHandler";

  BOOL v32 = (void *)v53;
  uint64_t v33 = (uint64_t)[(id)v53 count];
  uint64_t v55 = &_swiftEmptyArrayStorage;
  sub_10025539C(0, v33 & ~(v33 >> 63), 0);
  id v34 = v32;
  NSArray.makeIterator()();

  if (v33 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v43[0] = v34;
  if (v33)
  {
    uint64_t v46 = v9 + 32;
    sub_1002B5514(&qword_10096C918, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
    do
    {
      dispatch thunk of IteratorProtocol.next()();
      if (!v54) {
        goto LABEL_32;
      }
      tryCast<A>(_:as:description:file:line:)();
      sub_10024D338((uint64_t)&v53);
      uint64_t v35 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10025539C(0, v35[2] + 1, 1);
        uint64_t v35 = v55;
      }
      unint64_t v37 = v35[2];
      unint64_t v36 = v35[3];
      if (v37 >= v36 >> 1)
      {
        sub_10025539C(v36 > 1, v37 + 1, 1);
        uint64_t v35 = v55;
      }
      v35[2] = v37 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v35+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v37, v12, v8);
      uint64_t v55 = v35;
    }
    while (--v33);
  }
  sub_1002B5514(&qword_10096C918, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v38 = v44;
  while (v52)
  {
    sub_100249444(&v51, &v53);
    tryCast<A>(_:as:description:file:line:)();
    sub_10024D338((uint64_t)&v53);
    uint64_t v39 = v55;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10025539C(0, v39[2] + 1, 1);
      uint64_t v39 = v55;
    }
    unint64_t v41 = v39[2];
    unint64_t v40 = v39[3];
    if (v41 >= v40 >> 1)
    {
      sub_10025539C(v40 > 1, v41 + 1, 1);
      uint64_t v39 = v55;
    }
    v39[2] = v41 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v39+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v41, v38, v8);
    uint64_t v55 = v39;
    dispatch thunk of IteratorProtocol.next()();
  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v50, v49);
  sub_10000A7E8((uint64_t)&v51, (uint64_t *)&unk_10096AC20);
  *(void *)&long long v53 = v55;
  sub_10000A844(&qword_10096BBA8);
  uint64_t v42 = v47;
  SFProgressContinuation.finish(with:)();

  sub_1002B4D28(v42);
  swift_release();
}

uint64_t sub_1002B4350(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = a4;
  if (a3)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v8 = 0;
  uint64_t v10 = 0;
  if (a4) {
LABEL_3:
  }
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:
  id v11 = a1;
  a5(v8, v10, v6);

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SDAirDropReceiveClassroomHandler()
{
  return self;
}

uint64_t *sub_1002B44E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_10000A844(&qword_10096BBA8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_1002B45B4(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096BBA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_1002B462C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A844(&qword_10096BBA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_1002B46B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A844(&qword_10096BBA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1002B4740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A844(&qword_10096BBA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1002B47C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A844(&qword_10096BBA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_1002B4848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B485C);
}

uint64_t sub_1002B485C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A844(&qword_10096BBA8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1002B4920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B4934);
}

uint64_t sub_1002B4934(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000A844(&qword_10096BBA8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation()
{
  uint64_t result = qword_10096C898;
  if (!qword_10096C898) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002B4A40()
{
  sub_1002B4AD8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1002B4AD8()
{
  if (!qword_10096C8A8)
  {
    type metadata accessor for SFAirDrop.Progress();
    sub_100247840((uint64_t *)&unk_10096C8B0);
    unint64_t v0 = type metadata accessor for SFProgressContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10096C8A8);
    }
  }
}

uint64_t sub_1002B4B44()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B4B7C()
{
  return sub_1002B0808(*(void *)(v0 + 16));
}

uint64_t sub_1002B4B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002B4B94()
{
  return swift_release();
}

unint64_t sub_1002B4B9C()
{
  unint64_t result = qword_10096C8F0;
  if (!qword_10096C8F0)
  {
    sub_100247840((uint64_t *)&unk_10096C490);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096C8F0);
  }
  return result;
}

uint64_t sub_1002B4BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B4C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_10096C8F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B4CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B4D28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002B4D84()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002B4DCC()
{
  sub_1002B38E8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1002B4DD8(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v33 = a3;
  uint64_t v8 = v6;
  uint64_t v38 = a1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v37 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B20 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10000B47C(v17, (uint64_t)qword_10096C7D0);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v29 = a6;
    NSDictionary v30 = v6;
    uint64_t v31 = v11;
    uint64_t v32 = v10;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v21 = v38;
    unint64_t v22 = a2;
    if (!a2)
    {
      uint64_t aBlock = 0;
      unint64_t v41 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v22 = 0x80000001007B7770;
      uint64_t v21 = 0xD000000000000015;
    }
    swift_bridgeObjectRetain();
    uint64_t aBlock = sub_100254634(v21, v22, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v33, v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = v31;
    uint64_t v10 = v32;
    a6 = v29;
    uint64_t v8 = v30;
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  char v23 = (void *)swift_allocObject();
  uint64_t v24 = v38;
  v23[2] = v8;
  v23[3] = v24;
  v23[4] = a2;
  uint64_t v44 = v35;
  uint64_t v45 = v23;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v41 = 1107296256;
  uint64_t v42 = sub_100296520;
  uint64_t v43 = a6;
  uint64_t v25 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  id v26 = v8;
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = &_swiftEmptyArrayStorage;
  sub_1002B5514((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002B4B9C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
  return swift_release();
}

void sub_1002B5230()
{
  sub_1002B2EF0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002B5240()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002B5280()
{
  sub_1002B2BAC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002B528C()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

Class sub_1002B52D4()
{
  return sub_1002B1AF0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(char **)(v0 + 32), *(objc_class **)(v0 + 40));
}

uint64_t sub_1002B52E0()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1002B53DC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDropReceive.AskRequest() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v6 + 8);
  uint64_t v11 = *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_10000A6F4;
  return sub_1002B27C8(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1002B5514(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B555C()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.AskResponse();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8;
  unint64_t v12 = v9 + *(void *)(v7 + 64);
  uint64_t v10 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v12, v10);
}

uint64_t sub_1002B56E0()
{
  uint64_t v1 = *(void *)(type metadata accessor for SFAirDropReceive.AskResponse() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for URL();
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = *(void *)(v0 + v4 + 8);

  return sub_1002B10BC(v0 + v2, v5, v6, v7);
}

uint64_t sub_1002B57F4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B62F0();
  unint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1002B641C;
  uint64_t v13 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = &unk_1008D5598;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1002B63C4();
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002B4B9C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1002B5A5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1002B62F0();
  uint64_t *v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (v1[2])
  {
    if (v1[3]) {
      goto LABEL_4;
    }
  }
  else
  {
    id v7 = [objc_allocWithZone((Class)UINotificationFeedbackGenerator) init];
    uint64_t v8 = (void *)v1[2];
    v1[2] = v7;

    if (v1[3])
    {
LABEL_4:
      if (v1[4]) {
        return;
      }
LABEL_8:
      id v11 = [objc_allocWithZone((Class)UISelectionFeedbackGenerator) init];
      unint64_t v12 = (void *)v1[4];
      v1[4] = v11;

      return;
    }
  }
  id v9 = [objc_allocWithZone((Class)UIImpactFeedbackGenerator) init];
  uint64_t v10 = (void *)v1[3];
  v1[3] = v9;

  if (!v1[4]) {
    goto LABEL_8;
  }
}

uint64_t sub_1002B5C08(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B62F0();
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(unsigned char *)(v12 + 24) = a1;
  aBlock[4] = sub_1002B63A0;
  void aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = &unk_1008D5570;
  uint64_t v13 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1002B63C4();
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002B4B9C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1002B5EA8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    if (qword_100969C50 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000B47C(v5, (uint64_t)qword_100994540);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v9 = String.init<A>(describing:)();
      uint64_t v19 = sub_100254634(v9, v10, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Firing haptics for %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_1002B5A5C();
    uint64_t v11 = *(void **)(v4 + 16);
    if (v11 && *(void *)(v4 + 24) && *(void *)(v4 + 32))
    {
      switch((char)a2)
      {
        case 1:
          [*(id *)(v4 + 24) impactOccurred:a2:v19:v20];
          break;
        case 2:
          [v11 notificationOccurred:0];
          break;
        case 3:
          [self playAlertForType:12];
          break;
        case 4:
          [v11 notificationOccurred:2];
          break;
        case 5:
          [v11 notificationOccurred:1];
          break;
        default:
          [*(id *)(v4 + 32) selectionChanged:a2, v19, v20];
          break;
      }
    }
    else
    {
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "SDAirDropiOSHapticsManager's FeedbackGenerators are nil when trying to fire haptics", v14, 2u);
        swift_slowDealloc();
        swift_release();

        return;
      }
    }
    swift_release();
  }
  else
  {
    if (qword_100969C50 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10000B47C(v15, (uint64_t)qword_100994540);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SDAirDropiOSHapticsManager is nil when trying to fire haptics", v18, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1002B6280()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SDAirDropiOSHapticsManager()
{
  return self;
}

unint64_t sub_1002B62F0()
{
  unint64_t result = qword_10096A1A0;
  if (!qword_10096A1A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10096A1A0);
  }
  return result;
}

uint64_t sub_1002B6330()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B6368()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_1002B63A0()
{
  sub_1002B5EA8(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1002B63AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002B63BC()
{
  return swift_release();
}

unint64_t sub_1002B63C4()
{
  unint64_t result = qword_10096C8E0;
  if (!qword_10096C8E0)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096C8E0);
  }
  return result;
}

uint64_t sub_1002B6428(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  sub_10000A844(&qword_10096CCA0);
  v2[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Transfer();
  v2[20] = v5;
  v2[21] = *(void *)(v5 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  sub_10000A844(&qword_10096CC70);
  v2[24] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  v2[25] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002B665C, v6, 0);
}

uint64_t sub_1002B665C()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[11] + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess();
  sub_100278C8C(v2, (uint64_t)(v0 + 2));
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  sub_10026BB6C(v0 + 2, v3);
  CurrentValueSubject.value.getter();
  uint64_t v5 = sub_10000A844(&qword_10096BBA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[26] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1002B67C8;
  uint64_t v8 = v0[23];
  uint64_t v7 = v0[24];
  uint64_t v9 = v0[19];
  return sub_1005AE41C(v7, v8, v9, v3, v4);
}

uint64_t sub_1002B67C8()
{
  uint64_t v2 = *v1;
  v2[27] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[25];
  uint64_t v4 = v2[23];
  uint64_t v5 = v2[21];
  uint64_t v6 = v2[20];
  sub_10000A7E8(v2[19], &qword_10096CCA0);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v8 = v5 + 8;
  uint64_t v7 = v9;
  if (v0)
  {
    v7(v4, v6);
    unint64_t v10 = sub_1002B7270;
  }
  else
  {
    v2[28] = (uint64_t)v7;
    v2[29] = v8 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v4, v6);
    unint64_t v10 = sub_1002B699C;
  }
  return _swift_task_switch(v10, v3, 0);
}

uint64_t sub_1002B699C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v5 = v0[18];
  uint64_t v7 = v0[16];
  sub_10024D338((uint64_t)(v0 + 2));
  uint64_t v8 = sub_10000A844(&qword_10096B2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v5, v2, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:), v7);
  sub_1006BE3BC(v5, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v1(v3, v4);
  return _swift_task_switch(sub_1002B6AD8, 0, 0);
}

uint64_t sub_1002B6AD8()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = swift_task_alloc();
  v0[30] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[31] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[32] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002B6BE0;
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[12];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_10096CCA8, v2, sub_1002BC234, v3, 0, 0, v6);
}

uint64_t sub_1002B6BE0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1002B7054;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 200);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_1002B6D10;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_1002B6D10()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for SFAirDropReceive.ItemDestination.noItem(_:), v2);
  sub_1002BC1EC(&qword_10096CCB0, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination);
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v1, v2);
  uint64_t v6 = v0[24];
  uint64_t v7 = v0[15];
  if (v4)
  {
    uint64_t v8 = v0[12];
    type metadata accessor for CancellationError();
    sub_1002BC1EC(&qword_10096CCB8, (void (*)(uint64_t))&type metadata accessor for CancellationError);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    v5(v7, v8);
    sub_10000A7E8(v6, &qword_10096CC70);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Classroom AskRequest declined", v11, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();

    uint64_t v12 = (unsigned int *)&enum case for SFAirDropReceive.AskResponse.decline(_:);
  }
  else
  {
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[13];
    uint64_t v15 = v0[10];
    sub_10000A844(&qword_10096C950);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v7, v13);
    SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)();
    v5(v7, v13);
    sub_10000A7E8(v6, &qword_10096CC70);
    uint64_t v12 = (unsigned int *)&enum case for SFAirDropReceive.AskResponse.accept(_:);
  }
  uint64_t v16 = v0[10];
  uint64_t v17 = *v12;
  uint64_t v18 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v16, v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1002B7054()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1002B70C8, v1, 0);
}

uint64_t sub_1002B70C8()
{
  sub_10000A7E8(v0[24], &qword_10096CC70);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Classroom AskRequest declined", v3, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  uint64_t v4 = v0[10];
  uint64_t v5 = enum case for SFAirDropReceive.AskResponse.decline(_:);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002B7270()
{
  sub_10024D338(v0 + 16);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Classroom AskRequest declined", v3, 2u);
    swift_slowDealloc();
  }
  swift_errorRelease();

  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = enum case for SFAirDropReceive.AskResponse.decline(_:);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1002B7410(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 368) = a5;
  *(void *)(v6 + 376) = v5;
  *(void *)(v6 + 352) = a3;
  *(void *)(v6 + 360) = a4;
  *(unsigned char *)(v6 + 761) = a2;
  *(void *)(v6 + 344) = a1;
  uint64_t v7 = type metadata accessor for SFAirDropReceive.Failure();
  *(void *)(v6 + 384) = v7;
  *(void *)(v6 + 392) = *(void *)(v7 - 8);
  *(void *)(v6 + 400) = swift_task_alloc();
  uint64_t v8 = sub_10000A844(&qword_10096CC68);
  *(void *)(v6 + 408) = v8;
  *(void *)(v6 + 416) = *(void *)(v8 - 8);
  *(void *)(v6 + 424) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDropReceive.Transfer.State();
  *(void *)(v6 + 432) = v9;
  *(void *)(v6 + 440) = *(void *)(v9 - 8);
  *(void *)(v6 + 448) = swift_task_alloc();
  *(void *)(v6 + 456) = swift_task_alloc();
  sub_10000A844(&qword_10096CC70);
  *(void *)(v6 + 464) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDropReceive.ItemDestination();
  *(void *)(v6 + 472) = v10;
  *(void *)(v6 + 480) = *(void *)(v10 - 8);
  *(void *)(v6 + 488) = swift_task_alloc();
  *(void *)(v6 + 496) = swift_task_alloc();
  *(void *)(v6 + 504) = swift_task_alloc();
  *(void *)(v6 + 512) = swift_task_alloc();
  *(void *)(v6 + 520) = swift_task_alloc();
  *(void *)(v6 + 528) = swift_task_alloc();
  *(void *)(v6 + 536) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SFAirDrop.TransferType();
  *(void *)(v6 + 544) = v11;
  *(void *)(v6 + 552) = *(void *)(v11 - 8);
  *(void *)(v6 + 560) = swift_task_alloc();
  *(void *)(v6 + 568) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SFAirDropReceive.AskRequest();
  *(void *)(v6 + 576) = v12;
  *(void *)(v6 + 584) = *(void *)(v12 - 8);
  *(void *)(v6 + 592) = swift_task_alloc();
  *(void *)(v6 + 600) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for SFAirDropReceive.Transfer();
  *(void *)(v6 + 608) = v13;
  *(void *)(v6 + 616) = *(void *)(v13 - 8);
  *(void *)(v6 + 624) = swift_task_alloc();
  *(void *)(v6 + 632) = swift_task_alloc();
  *(void *)(v6 + 640) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v14 = static AirDropActor.shared;
  *(void *)(v6 + 648) = static AirDropActor.shared;
  return _swift_task_switch(sub_1002B780C, v14, 0);
}

uint64_t sub_1002B780C()
{
  uint64_t v150 = v0;
  uint64_t v1 = *(void *)(v0 + 640);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 576);
  uint64_t v7 = *(void *)(v0 + 568);
  uint64_t v8 = *(void *)(v0 + 552);
  uint64_t v146 = *(void *)(v0 + 544);
  CurrentValueSubject.value.getter();
  SFAirDropReceive.Transfer.askRequest.getter();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 656) = v9;
  *(void *)(v0 + 664) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v10 = v1;
  uint64_t v11 = v8;
  v9(v10, v3);
  uint64_t v12 = v9;
  SFAirDropReceive.AskRequest.type.getter();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v13(v4, v6);
  char v14 = SFAirDrop.TransferType.isLinks.getter();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v15(v7, v146);
  if ((v14 & 1) == 0)
  {
    uint64_t v132 = v13;
    uint64_t v135 = v15;
    uint64_t v16 = *(void *)(v0 + 632);
    uint64_t v17 = *(void *)(v0 + 608);
    uint64_t v18 = *(void *)(v0 + 592);
    uint64_t v19 = *(void *)(v0 + 576);
    uint64_t v20 = *(void *)(v0 + 560);
    uint64_t v147 = *(void *)(v0 + 544);
    CurrentValueSubject.value.getter();
    SFAirDropReceive.Transfer.askRequest.getter();
    v12(v16, v17);
    SFAirDropReceive.AskRequest.type.getter();
    v13(v18, v19);
    char v21 = SFAirDrop.TransferType.isFiles.getter();
    v135(v20, v147);
    if ((v21 & 1) == 0)
    {
      swift_retain_n();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = *(void *)(v0 + 632);
        uint64_t v50 = *(void *)(v0 + 592);
        uint64_t v120 = *(void *)(v0 + 608);
        uint64_t v121 = *(void *)(v0 + 576);
        uint64_t v51 = *(void *)(v0 + 560);
        uint64_t v124 = *(void *)(v0 + 544);
        os_log_type_t v148 = v48;
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        v149[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 136315138;
        CurrentValueSubject.value.getter();
        SFAirDropReceive.Transfer.askRequest.getter();
        v12(v49, v120);
        SFAirDropReceive.AskRequest.type.getter();
        v132(v50, v121);
        sub_1002BC1EC((unint64_t *)&unk_10097F240, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
        uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v55 = v54;
        v135(v51, v124);
        *(void *)(v0 + 320) = sub_100254634(v53, v55, v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v47, v148, "Classroom Ask open/move SKIP. {type: %s}", v52, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_22;
      }

LABEL_21:
      swift_release_n();
      goto LABEL_22;
    }
  }
  uint64_t v22 = *(void *)(v0 + 376)
      + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess();
  sub_100278C8C(v22, v0 + 96);
  sub_10000A844(&qword_10097F210);
  sub_10000A844(&qword_10096CC78);
  if (!swift_dynamicCast())
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(void *)(v0 + 48) = 0;
    sub_10000A7E8(v0 + 16, &qword_10096CC80);
    swift_retain_n();
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      v149[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      sub_100278C8C(v22, v0 + 136);
      sub_10026BB6C((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t DynamicType = swift_getDynamicType();
      uint64_t v44 = *(void *)(v0 + 168);
      sub_10024D338(v0 + 136);
      *(void *)(v0 + 288) = DynamicType;
      *(void *)(v0 + 296) = v44;
      sub_10000A844(&qword_10096CC88);
      uint64_t v45 = String.init<A>(describing:)();
      *(void *)(v0 + 312) = sub_100254634(v45, v46, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Classroom Ask open/move SKIP. {handler: %s}", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_22:
      (*(void (**)(void, void, void))(*(void *)(v0 + 480) + 16))(*(void *)(v0 + 344), *(void *)(v0 + 368), *(void *)(v0 + 472));
      swift_bridgeObjectRetain();
      unsigned int v126 = 0;
      uint64_t v125 = *(void *)(v0 + 360);
LABEL_23:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v90 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
      return v90(v126, v125);
    }

    goto LABEL_21;
  }
  uint64_t v139 = v22;
  uint64_t v130 = v12;
  uint64_t v23 = *(void *)(v0 + 536);
  uint64_t v24 = *(void *)(v0 + 472);
  uint64_t v25 = *(void *)(v0 + 480);
  uint64_t v26 = *(void *)(v0 + 368);
  sub_1002AF688((long long *)(v0 + 16), v0 + 56);
  *(void *)(v0 + 672) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  uint64_t v27 = v25 + 16;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  *(void *)(v0 + 680) = v28;
  *(void *)(v0 + 688) = v27 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v28(v23, v26, v24);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = *(void *)(v0 + 536);
  unint64_t v136 = (void *)(v0 + 56);
  if (v31)
  {
    uint64_t v33 = *(void *)(v0 + 528);
    uint64_t v34 = *(void *)(v0 + 472);
    uint64_t v35 = *(void *)(v0 + 480);
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    v149[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315138;
    v28(v33, v32, v34);
    uint64_t v37 = String.init<A>(describing:)();
    *(void *)(v0 + 336) = sub_100254634(v37, v38, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v39(v32, v34);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Classroom Ask open/move START. {destination: %s}", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v56 = *(void *)(v0 + 472);
    uint64_t v57 = *(void *)(v0 + 480);

    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
    v39(v32, v56);
  }
  uint64_t v58 = v139;
  *(void *)(v0 + 696) = v39;
  char v59 = *(unsigned char *)(v0 + 761);
  v28(*(void *)(v0 + 520), *(void *)(v0 + 368), *(void *)(v0 + 472));
  if (v59)
  {
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      os_log_t v140 = *(void (**)(uint64_t, uint64_t))(v0 + 696);
      uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 680);
      uint64_t v63 = *(void *)(v0 + 528);
      uint64_t v64 = *(void *)(v0 + 520);
      uint64_t v65 = *(void *)(v0 + 504);
      uint64_t v66 = *(void *)(v0 + 472);
      os_log_type_t type = v61;
      unint64_t v67 = (uint8_t *)swift_slowAlloc();
      v149[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v67 = 136315138;
      swift_beginAccess();
      v62(v63, v64, v66);
      v62(v65, v63, v66);
      uint64_t v68 = String.init<A>(describing:)();
      unint64_t v70 = v69;
      v140(v63, v66);
      *(void *)(v0 + 328) = sub_100254634(v68, v70, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, type, "Classroom Ask open/move END - accepted {destination: %s}", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 680);
    unint64_t v138 = *(void (**)(uint64_t, uint64_t))(v0 + 656);
    uint64_t v128 = *(void *)(v0 + 632);
    uint64_t v131 = *(void *)(v0 + 608);
    uint64_t v72 = *(void *)(v0 + 520);
    uint64_t v133 = *(void *)(v0 + 496);
    uint64_t v73 = *(void *)(v0 + 472);
    *(void *)os_log_type_t typea = *(void *)(v0 + 488);
    uint64_t v145 = *(void *)(v0 + 480);
    uint64_t v75 = *(void *)(v0 + 440);
    uint64_t v74 = *(void *)(v0 + 448);
    uint64_t v76 = *(void *)(v0 + 352);
    uint64_t v122 = *(void *)(v0 + 360);
    uint64_t v123 = *(void *)(v0 + 432);
    uint64_t v77 = sub_10000A844((uint64_t *)&unk_10096B2B0);
    uint64_t v78 = *(int *)(v77 + 48);
    uint64_t v79 = *(int *)(v77 + 64);
    swift_beginAccess();
    v71(v74, v72, v73);
    *(void *)(v74 + v78) = v76;
    *(void *)(v74 + v79) = v122;
    (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v74, enum case for SFAirDropReceive.Transfer.State.opening(_:), v123);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1006BE3BC(v74, v128);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v123);
    v138(v128, v131);
    v71(v133, v72, v73);
    v71(*(void *)typea, v133, v73);
    int v80 = (*(uint64_t (**)(os_log_type_t *, uint64_t))(v145 + 88))(*(os_log_type_t **)typea, v73);
    if (v80 == enum case for SFAirDropReceive.ItemDestination.customApp(_:))
    {
      char v81 = *(uint64_t **)(v0 + 488);
      (*(void (**)(uint64_t *, void))(*(void *)(v0 + 480) + 96))(v81, *(void *)(v0 + 472));
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      if (v82 == 0xD000000000000034 && v83 == 0x80000001007B7D20)
      {
        swift_bridgeObjectRelease();
LABEL_27:
        (*(void (**)(void, void))(v0 + 696))(*(void *)(v0 + 496), *(void *)(v0 + 472));
LABEL_28:
        uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v0 + 696);
        uint64_t v93 = *(void *)(v0 + 520);
        uint64_t v94 = *(void *)(v0 + 472);
        (*(void (**)(void, uint64_t, uint64_t))(v0 + 680))(*(void *)(v0 + 344), v93, v94);
        swift_bridgeObjectRetain();
        v92(v93, v94);
        sub_10024D338((uint64_t)v136);
        uint64_t v125 = *(void *)(v0 + 360);
        unsigned int v126 = 1;
        goto LABEL_23;
      }
      uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v0 + 696);
      uint64_t v106 = *(void *)(v0 + 496);
      uint64_t v107 = *(void *)(v0 + 472);
      uint64_t v108 = *(void *)(v0 + 480);
      char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v110 = (v108 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v105(v106, v107);
      if (v109) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v80 == enum case for SFAirDropReceive.ItemDestination.noItem(_:)) {
        goto LABEL_27;
      }
      unint64_t v111 = *(void (**)(uint64_t, uint64_t))(v0 + 696);
      uint64_t v112 = *(void *)(v0 + 496);
      uint64_t v113 = *(void *)(v0 + 472);
      uint64_t v110 = (*(void *)(v0 + 480) + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v111(*(void *)(v0 + 488), v113);
      v111(v112, v113);
    }
    *(void *)(v0 + 736) = v110;
    uint64_t v114 = *(void *)(v0 + 520);
    uint64_t v115 = *(void *)(v0 + 360);
    uint64_t v116 = *(void *)(v0 + 80);
    uint64_t v117 = *(void *)(v0 + 88);
    sub_10026BB6C(v136, v116);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 8))(v115, v114, v116, v117);
    uint64_t v118 = (void *)swift_task_alloc();
    *(void *)(v0 + 744) = v118;
    *uint64_t v118 = v0;
    v118[1] = sub_1002B9AC4;
    uint64_t v119 = *(void *)(v0 + 408);
    return SFProgressTask.finalValue.getter(v0 + 760, v119);
  }
  else
  {
    unint64_t v134 = v28;
    uint64_t v84 = *(void *)(v0 + 624);
    uint64_t v85 = *(void *)(v0 + 464);
    uint64_t v86 = *(void *)(v0 + 360);
    uint64_t v141 = *(void **)(v0 + 368);
    sub_100278C8C(v58, v0 + 176);
    uint64_t v87 = *(void *)(v0 + 200);
    uint64_t v88 = *(void *)(v0 + 208);
    sub_10026BB6C((void *)(v0 + 176), v87);
    CurrentValueSubject.value.getter();
    sub_1005B023C(v84, v86, 0, v141, v87, v88, v85);
    uint64_t v89 = *(void *)(v0 + 472);
    uint64_t v137 = *(void *)(v0 + 608);
    uint64_t v95 = *(void *)(v0 + 456);
    uint64_t v96 = *(void *)(v0 + 440);
    uint64_t v127 = *(void *)(v0 + 464);
    uint64_t v129 = *(void *)(v0 + 432);
    uint64_t v97 = *(void *)(v0 + 368);
    uint64_t typeb = *(void *)(v0 + 632);
    uint64_t v98 = *(void *)(v0 + 352);
    uint64_t v99 = *(void *)(v0 + 360);
    ((void (*)(void))v130)(*(void *)(v0 + 624));
    sub_10024D338(v0 + 176);
    uint64_t v100 = (int *)sub_10000A844((uint64_t *)&unk_100972400);
    uint64_t v101 = v100[12];
    uint64_t v102 = v100[16];
    uint64_t v103 = v95 + v100[20];
    v134(v95, v97, v89);
    *(void *)(v95 + v101) = v98;
    *(void *)(v95 + v102) = v99;
    uint64_t v104 = sub_10000A844(&qword_10096B2C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16))(v103, v127, v104);
    (*(void (**)(uint64_t, void, uint64_t))(v96 + 104))(v95, enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:), v129);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1006BE3BC(v95, typeb);
    v130(typeb, v137);
    return _swift_task_switch(sub_1002B8C24, 0, 0);
  }
}

uint64_t sub_1002B8C24()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = swift_task_alloc();
  v0[88] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = swift_task_alloc();
  v0[89] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[90] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002B8D2C;
  uint64_t v5 = v0[64];
  uint64_t v6 = v0[59];
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v5, &unk_10096CC90, v2, sub_1002BC144, v3, 0, 0, v6);
}

uint64_t sub_1002B8D2C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 728) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1002B957C;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 648);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = sub_1002B8E60;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_1002B8E60()
{
  uint64_t v63 = v0;
  uint64_t v60 = v0 + 7;
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v4 = v0[59];
  uint64_t v3 = v0[60];
  uint64_t v5 = v0[58];
  (*(void (**)(void, void))(v0[55] + 8))(v0[57], v0[54]);
  sub_10000A7E8(v5, &qword_10096CC70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v1, v2, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))v0[85];
    uint64_t v9 = v0[66];
    os_log_type_t type = v7;
    uint64_t v10 = v0[65];
    uint64_t v11 = v0[63];
    uint64_t v12 = v0[59];
    unint64_t v55 = (void (*)(uint64_t, uint64_t))v0[87];
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_beginAccess();
    v8(v9, v10, v12);
    v8(v11, v9, v12);
    uint64_t v14 = String.init<A>(describing:)();
    unint64_t v16 = v15;
    v55(v9, v12);
    v0[41] = sub_100254634(v14, v16, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Classroom Ask open/move END - accepted {destination: %s}", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))v0[85];
  uint64_t v56 = (void (*)(uint64_t, uint64_t))v0[82];
  uint64_t v52 = v0[79];
  uint64_t v53 = v0[76];
  uint64_t v18 = v0[65];
  uint64_t v54 = v0[62];
  uint64_t v19 = v0[59];
  uint64_t v57 = v0[61];
  *(void *)os_log_type_t typea = v0[60];
  uint64_t v21 = v0[55];
  uint64_t v20 = v0[56];
  uint64_t v22 = v0[44];
  uint64_t v50 = v0[45];
  uint64_t v51 = v0[54];
  uint64_t v23 = sub_10000A844((uint64_t *)&unk_10096B2B0);
  uint64_t v24 = *(int *)(v23 + 48);
  uint64_t v25 = *(int *)(v23 + 64);
  swift_beginAccess();
  v17(v20, v18, v19);
  *(void *)(v20 + v24) = v22;
  *(void *)(v20 + v25) = v50;
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, enum case for SFAirDropReceive.Transfer.State.opening(_:), v51);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1006BE3BC(v20, v52);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v51);
  v56(v52, v53);
  v17(v54, v18, v19);
  v17(v57, v54, v19);
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)typea + 88))(v57, v19);
  if (v26 == enum case for SFAirDropReceive.ItemDestination.customApp(_:))
  {
    uint64_t v27 = (uint64_t *)v0[61];
    (*(void (**)(uint64_t *, void))(v0[60] + 96))(v27, v0[59]);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    if (v28 == 0xD000000000000034 && v29 == 0x80000001007B7D20)
    {
      swift_bridgeObjectRelease();
LABEL_8:
      ((void (*)(void, void))v0[87])(v0[62], v0[59]);
LABEL_10:
      uint64_t v36 = (void (*)(uint64_t, uint64_t))v0[87];
      uint64_t v37 = v0[65];
      uint64_t v38 = v0[59];
      ((void (*)(void, uint64_t, uint64_t))v0[85])(v0[43], v37, v38);
      swift_bridgeObjectRetain();
      v36(v37, v38);
      sub_10024D338((uint64_t)v60);
      uint64_t v61 = v0[45];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
      return v39(1, v61);
    }
    os_log_type_t v30 = (void (*)(uint64_t, uint64_t))v0[87];
    uint64_t v31 = v0[62];
    uint64_t v32 = v0[59];
    uint64_t v33 = v0[60];
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = (v33 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v30(v31, v32);
    if (v34) {
      goto LABEL_10;
    }
  }
  else
  {
    if (v26 == enum case for SFAirDropReceive.ItemDestination.noItem(_:)) {
      goto LABEL_8;
    }
    os_log_type_t v41 = (void (*)(uint64_t, uint64_t))v0[87];
    uint64_t v42 = v0[62];
    uint64_t v43 = v0[59];
    uint64_t v35 = (v0[60] + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v41(v0[61], v43);
    v41(v42, v43);
  }
  v0[92] = v35;
  uint64_t v44 = v0[65];
  uint64_t v45 = v0[45];
  uint64_t v46 = v0[10];
  uint64_t v47 = v0[11];
  sub_10026BB6C(v60, v46);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8))(v45, v44, v46, v47);
  os_log_type_t v48 = (void *)swift_task_alloc();
  v0[93] = v48;
  void *v48 = v0;
  v48[1] = sub_1002B9AC4;
  uint64_t v49 = v0[51];
  return SFProgressTask.finalValue.getter(v0 + 95, v49);
}

uint64_t sub_1002B957C()
{
  uint64_t v1 = *(void *)(v0 + 648);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1002B95F4, v1, 0);
}

uint64_t sub_1002B95F4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[87];
  uint64_t v2 = v0[65];
  uint64_t v3 = v0[59];
  uint64_t v4 = v0[58];
  (*(void (**)(void, void))(v0[55] + 8))(v0[57], v0[54]);
  sub_10000A7E8(v4, &qword_10096CC70);
  v1(v2, v3);
  v0[38] = v0[91];
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    int v5 = (*(uint64_t (**)(void, void))(v0[49] + 88))(v0[50], v0[48]);
    if (v5 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      swift_errorRelease();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        uint64_t v9 = "Classroom Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v6, v7, v9, v8, 2u);
        swift_slowDealloc();
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    if (v5 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      swift_errorRelease();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        uint64_t v9 = "Classroom Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }
LABEL_9:
      uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t))v0[85];
      uint64_t v11 = v0[59];
      uint64_t v12 = v0[46];
      uint64_t v13 = v0[43];

      v10(v13, v12, v11);
      swift_errorRelease();
      sub_10024D338((uint64_t)(v0 + 7));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v14 = (uint64_t (*)(void, void *))v0[1];
      return v14(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(void, void))(v0[49] + 8))(v0[50], v0[48]);
  }
  swift_errorRelease();
  sub_10024D338((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16(0);
}

uint64_t sub_1002B9AC4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 752) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[81];
  (*(void (**)(void, void))(v2[52] + 8))(v2[53], v2[51]);
  if (v0) {
    uint64_t v4 = sub_1002B9E14;
  }
  else {
    uint64_t v4 = sub_1002B9C40;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002B9C40()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 520);
  uint64_t v3 = *(void *)(v0 + 472);
  unsigned int v7 = *(unsigned __int8 *)(v0 + 760);
  (*(void (**)(void, uint64_t, uint64_t))(v0 + 680))(*(void *)(v0 + 344), v2, v3);
  swift_bridgeObjectRetain();
  v1(v2, v3);
  sub_10024D338(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 360);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
  return v4(v7, v6);
}

uint64_t sub_1002B9E14()
{
  (*(void (**)(void, void))(v0 + 696))(*(void *)(v0 + 520), *(void *)(v0 + 472));
  *(void *)(v0 + 304) = *(void *)(v0 + 752);
  swift_errorRetain();
  sub_10000A844(&qword_10096BAF0);
  if (swift_dynamicCast())
  {
    int v1 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 392) + 88))(*(void *)(v0 + 400), *(void *)(v0 + 384));
    if (v1 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      swift_errorRelease();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v4 = 0;
        int v5 = "Classroom Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v2, v3, v5, v4, 2u);
        swift_slowDealloc();
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    if (v1 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      swift_errorRelease();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v4 = 0;
        int v5 = "Classroom Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }
LABEL_9:
      uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 680);
      uint64_t v7 = *(void *)(v0 + 472);
      uint64_t v8 = *(void *)(v0 + 368);
      uint64_t v9 = *(void *)(v0 + 344);

      v6(v9, v8, v7);
      swift_errorRelease();
      sub_10024D338(v0 + 56);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v10 = *(uint64_t (**)(void, void *))(v0 + 8);
      return v10(0, _swiftEmptyArrayStorage);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 392) + 8))(*(void *)(v0 + 400), *(void *)(v0 + 384));
  }
  swift_errorRelease();
  sub_10024D338(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12(0);
}

uint64_t sub_1002BA2AC()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_classroomHandler));

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002BA2F0()
{
  objc_release(*(id *)(sub_1006BE258()
                     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_classroomHandler));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002BA378()
{
  return _s15ClassroomRunnerCMa();
}

uint64_t _s15ClassroomRunnerCMa()
{
  uint64_t result = qword_10096CA30;
  if (!qword_10096CA30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002BA3CC()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1002BA41C(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Failure();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFAirDropReceive.ItemDestination();
  v3[22] = v5;
  v3[23] = *(void *)(v5 - 8);
  v3[24] = swift_task_alloc();
  v3[25] = sub_10000A844((uint64_t *)&unk_10097F230);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = sub_10000A844(&qword_10096CC50);
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer.State();
  v3[31] = v6;
  v3[32] = *(void *)(v6 - 8);
  v3[33] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v3[34] = v7;
  v3[35] = *(void *)(v7 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SFAirDrop.DeclineAction();
  v3[38] = v8;
  v3[39] = *(void *)(v8 - 8);
  v3[40] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SFAirDropReceive.AskRequest();
  v3[41] = v9;
  v3[42] = *(void *)(v9 - 8);
  v3[43] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SFAirDropReceive.Transfer();
  v3[44] = v10;
  v3[45] = *(void *)(v10 - 8);
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  uint64_t v11 = sub_10000A844(&qword_10096CC58);
  v3[48] = v11;
  v3[49] = *(void *)(v11 - 8);
  v3[50] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v12 = static AirDropActor.shared;
  v3[51] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002BA84C, v12, 0);
}

uint64_t sub_1002BA84C()
{
  uint64_t v34 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v45 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v43 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v31 = *(void *)(v0 + 328);
  uint64_t v44 = *(void *)(v0 + 320);
  uint64_t v39 = *(void *)(v0 + 312);
  uint64_t v40 = *(void *)(v0 + 304);
  uint64_t v35 = *(void *)(v0 + 264);
  uint64_t v41 = *(void *)(v0 + 256);
  uint64_t v42 = *(void *)(v0 + 248);
  uint64_t v38 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v36 = *(void *)(v0 + 184);
  uint64_t v37 = *(void *)(v0 + 136);
  sub_10000A844(&qword_10096BBA8);
  SFProgressContinuation.task.getter();
  uint64_t v5 = v4 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess();
  sub_100278C8C(v5, v0 + 16);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10026BB6C((void *)(v0 + 16), v7);
  CurrentValueSubject.value.getter();
  uint64_t v30 = v1;
  SFAirDropReceive.Transfer.askRequest.getter();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  *(void *)(v0 + 416) = v8;
  *(void *)(v0 + 424) = (v45 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v43);
  uint64_t v9 = v8;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v2, 1, v7, v6);
  uint64_t v32 = v11;
  uint64_t v33 = v10;
  *(void *)(v0 + 432) = v10;
  *(void *)(v0 + 440) = v11;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v31);
  sub_10024D338(v0 + 16);
  sub_100278C8C(v5, v0 + 56);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 88);
  sub_10026BB6C((void *)(v0 + 56), v12);
  CurrentValueSubject.value.getter();
  uint64_t v14 = type metadata accessor for SFAirDrop.Progress();
  *(void *)(v0 + 448) = v14;
  uint64_t v15 = sub_10000A844((uint64_t *)&unk_10096C8B0);
  sub_1005AFD80(v30, 0x726566736E617274, (void *)0xEC000000676E6972, v34, v12, v14, v15, v13, v44);
  v8(v30, v43);
  sub_10024D338(v0 + 56);
  static Date.now.getter();
  unint64_t v16 = (int *)sub_10000A844(&qword_100972410);
  *(void *)(v0 + 456) = v16;
  uint64_t v17 = v35 + v16[12];
  uint64_t v18 = (uint64_t *)(v35 + v16[16]);
  uint64_t v19 = v35 + v16[20];
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  *(void *)(v0 + 464) = v20;
  *(void *)(v0 + 472) = (v36 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v20(v35, v37, v38);
  uint64_t v21 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
  uint64_t v22 = *(void *)(v14 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 104);
  *(void *)(v0 + 480) = v23;
  *(void *)(v0 + 488) = (v22 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v23(v17, v21, v14);
  *uint64_t v18 = v33;
  v18[1] = v32;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
  *(void *)(v0 + 496) = v24;
  *(void *)(v0 + 504) = (v39 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v24(v19, v44, v40);
  *(_DWORD *)(v0 + 672) = enum case for SFAirDropReceive.Transfer.State.transferring(_:);
  uint64_t v25 = *(void (**)(uint64_t))(v41 + 104);
  *(void *)(v0 + 512) = v25;
  *(void *)(v0 + 520) = (v41 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v25(v35);
  swift_bridgeObjectRetain();
  sub_1006BE3BC(v35, v30);
  int v26 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  *(void *)(v0 + 528) = v26;
  *(void *)(v0 + 536) = (v41 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v26(v35, v42);
  v9(v30, v43);
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_1002BACC0;
  uint64_t v28 = *(void *)(v0 + 384);
  return SFProgressTask.finalValue.getter(v0 + 120, v28);
}

uint64_t sub_1002BACC0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 408);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1002BBB94;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 408);
    uint64_t v4 = sub_1002BADE8;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1002BADE8()
{
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  uint64_t v33 = *(void (**)(uint64_t, void, uint64_t))(v0 + 512);
  unsigned int v32 = *(_DWORD *)(v0 + 672);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v30 = *(void (**)(uint64_t *, void, uint64_t))(v0 + 480);
  uint64_t v1 = *(void (**)(uint64_t, void, uint64_t))(v0 + 464);
  uint64_t v2 = *(int **)(v0 + 456);
  uint64_t v27 = *(void *)(v0 + 448);
  uint64_t v29 = *(void *)(v0 + 440);
  uint64_t v28 = *(void *)(v0 + 432);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v34 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 120);
  *(void *)(v0 + 560) = v8;
  uint64_t v9 = (uint64_t *)(v5 + v2[12]);
  uint64_t v10 = (void *)(v5 + v2[16]);
  uint64_t v11 = v5 + v2[20];
  v1(v5, *(void *)(v0 + 136), v7);
  *uint64_t v9 = v8;
  v30(v9, enum case for SFAirDrop.Progress.completed(_:), v27);
  *uint64_t v10 = v28;
  v10[1] = v29;
  v31(v11, v4, v26);
  v33(v5, v32, v6);
  swift_bridgeObjectRetain();
  sub_1006BE3BC(v5, v3);
  v39(v5, v6);
  v36(v3, v34);
  static Date.now.getter();
  sub_1002BC1EC((unint64_t *)&unk_100974490, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v35 = *(void *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 272);
    uint64_t v14 = *(void **)(v0 + 280);
    uint64_t v40 = *(void *)(v0 + 232);
    uint64_t v41 = *(void *)(v0 + 224);
    uint64_t v42 = *(void *)(v0 + 240);
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v38 = v16;
    uint64_t v43 = *(void *)(v0 + 216);
    uint64_t v17 = v43 + *(int *)(v16 + 48);
    uint64_t v18 = (void (*)(void))v14[2];
    v18();
    uint64_t v19 = (void (*)(uint64_t, uint64_t, uint64_t))v14[4];
    uint64_t v37 = v17;
    v19(v17, v35, v13);
    uint64_t v20 = v15 + *(int *)(v16 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v15, v43, v13);
    ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v20, v17, v13);
    v19(v40, v15, v13);
    uint64_t v21 = (void (*)(uint64_t, uint64_t))v14[1];
    *(void *)(v0 + 568) = v21;
    *(void *)(v0 + 576) = (unint64_t)(v14 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v21(v20, v13);
    uint64_t v22 = v15 + *(int *)(v38 + 48);
    v19(v15, v43, v13);
    v19(v22, v37, v13);
    v19(v40 + *(int *)(v41 + 36), v22, v13);
    v21(v15, v13);
    sub_1002BC03C(v40, v42);
    ClosedRange<>.interval.getter();
    *(void *)(v0 + 584) = v23;
    sub_10000A7E8(v42, &qword_10096CC50);
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_1002BB1D8;
    uint64_t v25 = *(void *)(v0 + 136);
    return sub_1006BEEC4(v8, v25);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002BB1D8(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[75] = a1;
  v4[76] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[51];
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1002BBCB4, v6, 0);
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v4[77] = v7;
    *uint64_t v7 = v5;
    v7[1] = sub_1002BB394;
    uint64_t v8 = v4[70];
    uint64_t v9 = v4[24];
    uint64_t v10 = v4[17];
    return sub_1002B7410(v9, 1, v8, a1, v10);
  }
}

uint64_t sub_1002BB394(char a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  uint64_t v7 = (void *)*v3;
  v6[78] = a2;
  v6[79] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = v6[51];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1002BBDD0, v8, 0);
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v6[80] = v9;
    *uint64_t v9 = v7;
    v9[1] = sub_1002BB568;
    uint64_t v10 = v6[75];
    uint64_t v11 = v6[70];
    uint64_t v12 = v6[46];
    uint64_t v13 = v6[24];
    return sub_1006C4510(v12, v11, v10, a2, 1, a1 & 1, v13, 0);
  }
}

uint64_t sub_1002BB568()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 648) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 408);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1002BBEEC;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 408);
    (*(void (**)(void, void))(v2 + 416))(*(void *)(v2 + 368), *(void *)(v2 + 352));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1002BB710;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002BB710()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[71];
  uint64_t v2 = v0[49];
  uint64_t v11 = v0[50];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v7 = v0[37];
  uint64_t v6 = v0[38];
  uint64_t v8 = v0[34];
  (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  v1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1002BB89C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 416);
  uint64_t v2 = *(void *)(*(void *)v0 + 408);
  uint64_t v3 = *(void *)(*(void *)v0 + 376);
  uint64_t v4 = *(void *)(*(void *)v0 + 352);
  uint64_t v5 = *(void *)(*(void *)v0 + 168);
  uint64_t v6 = *(void *)(*(void *)v0 + 160);
  uint64_t v7 = *(void *)(*(void *)v0 + 152);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v1(v3, v4);
  return _swift_task_switch(sub_1002BBA74, v2, 0);
}

uint64_t sub_1002BBA74()
{
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002BBB94()
{
  uint64_t v2 = v0[49];
  uint64_t v1 = v0[50];
  uint64_t v3 = v0[48];
  uint64_t v5 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v6 = v0[38];
  (*(void (**)(void, void))(v0[35] + 8))(v0[37], v0[34]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[82] = v0[69];
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[83] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002BB89C;
  uint64_t v8 = v0[47];
  uint64_t v9 = v0[21];
  return sub_1006C5AA8(v8, v9);
}

uint64_t sub_1002BBCB4()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 304);
  (*(void (**)(void, void))(v0 + 568))(*(void *)(v0 + 296), *(void *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(void *)(v0 + 656) = *(void *)(v0 + 608);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 664) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002BB89C;
  uint64_t v8 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 168);
  return sub_1006C5AA8(v8, v9);
}

uint64_t sub_1002BBDD0()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 304);
  (*(void (**)(void, void))(v0 + 568))(*(void *)(v0 + 296), *(void *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(void *)(v0 + 656) = *(void *)(v0 + 632);
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 664) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002BB89C;
  uint64_t v8 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 168);
  return sub_1006C5AA8(v8, v9);
}

uint64_t sub_1002BBEEC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[71];
  uint64_t v2 = v0[49];
  uint64_t v13 = v0[50];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v7 = v0[37];
  uint64_t v6 = v0[38];
  uint64_t v8 = v0[34];
  (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  v1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v3);
  v0[82] = v0[81];
  swift_errorRetain();
  SFAirDropReceive.Failure.init(_:)();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[83] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1002BB89C;
  uint64_t v10 = v0[47];
  uint64_t v11 = v0[21];
  return sub_1006C5AA8(v10, v11);
}

uint64_t sub_1002BC03C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_10096CC50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BC0A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A6F0;
  return sub_100539E70(a1, v4);
}

void sub_1002BC144()
{
  sub_10053A16C(*(void *)(v0 + 16));
}

uint64_t sub_1002BC14C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000A6F4;
  return sub_100539E70(a1, v4);
}

uint64_t sub_1002BC1EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002BC238()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10024D338(v0 + 144);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PersonaSession()
{
  return self;
}

uint64_t sub_1002BC2A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096CDA0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096CDA0);
  if (qword_100969CD0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_1009946C0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1002BC36C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (void *)((char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (qword_100969B28 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000B47C(v7, (uint64_t)qword_10096CDA0);
  uint64_t v8 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    v18[1] = v8;
    uint64_t v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SDAuthenticationAuthSession: Invalidating %@", v11, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v9 = v8;
  }

  if (*(Class *)((char *)&v8->isa + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession))
  {
    swift_retain();
    sub_100425B8C();
    swift_release();
  }
  uint64_t v14 = *(Class *)((char *)&v8->isa + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_wifiRequest);
  if (v14)
  {
    uint64_t v15 = self;
    id v16 = v14;
    id v17 = [v15 sharedManager];
    [v17 cancelWiFiRequest:v16];
  }
}

uint64_t sub_1002BC66C()
{
  swift_release();

  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo);
  unint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo + 8);

  return sub_100250CC4(v1, v2);
}

id sub_1002BC6C0()
{
  v2.receiver = v0;
  v2.Class super_class = (Class)type metadata accessor for SDAuthenticationAuthSession();
  return [super dealloc];
}

uint64_t sub_1002BC758()
{
  return type metadata accessor for SDAuthenticationAuthSession();
}

uint64_t type metadata accessor for SDAuthenticationAuthSession()
{
  uint64_t result = qword_10096CDE0;
  if (!qword_10096CDE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002BC7AC()
{
  return swift_updateClassMetadata2();
}

id sub_1002BC7FC(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v26 = a1;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession;
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession] = 0;
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_wifiRequest] = 0;
  if ((unint64_t)(a5 - 1) > 3)
  {
    *(void *)&v5[v14] = 0;
    id v16 = v5;
  }
  else
  {
    type metadata accessor for SDAuthenticationRangingSession(0);
    swift_allocObject();
    uint64_t v15 = v5;
    *(void *)&v5[v14] = sub_100421E80();
  }
  swift_release();
  id v17 = (uint64_t *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo];
  *id v17 = a2;
  v17[1] = a3;
  sub_10025ADCC(a2, a3);

  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v13, (uint64_t)a4, v10);
  uint64_t v19 = &v5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  *(_OWORD *)uint64_t v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((void *)v19 + 4) = 0;
  uint64_t v20 = &v5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  *(_OWORD *)uint64_t v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((void *)v20 + 4) = 0;
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer] = 0;
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue] = v26;
  v18(&v5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID], (uint64_t)v13, v10);
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type] = a5;
  uint64_t v21 = (objc_class *)type metadata accessor for SDAuthenticationSession();
  v27.receiver = v5;
  v27.Class super_class = v21;
  id v22 = [super init];
  uint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v13, v10);
  v23(a4, v10);
  return v22;
}

uint64_t sub_1002BCA4C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096CDF0);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096CDF0);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1002BCB14(void *a1)
{
  if (a1)
  {
    uint64_t v2 = self;
    id v21 = 0;
    id v3 = a1;
    id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v21];
    id v5 = v21;
    if (v4)
    {
      uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v8 = v7;

      id v9 = [self standardUserDefaults];
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v11 = String._bridgeToObjectiveC()();
      [v9 setObject:isa forKey:v11];

      sub_100250CC4(v6, v8);
    }
    else
    {
      uint64_t v13 = v5;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100969B30 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10000B47C(v14, (uint64_t)qword_10096CDF0);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = (void *)swift_slowAlloc();
        *(_DWORD *)id v17 = 138412290;
        swift_errorRetain();
        uint64_t v19 = (void *)_swift_stdlib_bridgeErrorToNSError();
        id v21 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v18 = v19;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to persist current pseudonym with error: %@", v17, 0xCu);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  else
  {
    id v12 = [self standardUserDefaults];
    id v20 = String._bridgeToObjectiveC()();
    [v12 removeObjectForKey:];
  }
}

uint64_t sub_1002BCECC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000A844((uint64_t *)&unk_100975040);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100249444(v25, v26);
    sub_10024D2D4((uint64_t)v26, (uint64_t)v25);
    uint64_t v8 = type metadata accessor for Date();
    int v9 = swift_dynamicCast();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    if (v9)
    {
      uint64_t v11 = *(void *)(v8 - 8);
      v10((uint64_t)v4, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v8) != 1)
      {
        sub_10024D338((uint64_t)v26);
        (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v4, v8);
        uint64_t v12 = a1;
        uint64_t v13 = 0;
        return v10(v12, v13, 1, v8);
      }
    }
    else
    {
      v10((uint64_t)v4, 1, 1, v8);
    }
    sub_10000A7E8((uint64_t)v4, (uint64_t *)&unk_100975040);
    if (qword_100969B30 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000B47C(v21, (uint64_t)qword_10096CDF0);
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No valid after first use date to load", v24, 2u);
      swift_slowDealloc();
    }

    sub_10024D338((uint64_t)v26);
    uint64_t v12 = a1;
    uint64_t v13 = 1;
    return v10(v12, v13, 1, v8);
  }
  if (qword_100969B30 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B47C(v14, (uint64_t)qword_10096CDF0);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "No after first expiration date to load", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);

  return v19(a1, 1, 1, v18);
}

uint64_t sub_1002BD2E8(uint64_t a1)
{
  uint64_t v2 = sub_10000A844((uint64_t *)&unk_100975040);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002BEBA4(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000A7E8((uint64_t)v4, (uint64_t *)&unk_100975040);
    id v9 = [self standardUserDefaults];
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 removeObjectForKey:v10];

    return sub_10000A7E8(a1, (uint64_t *)&unk_100975040);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    id v12 = [self standardUserDefaults];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    NSString v14 = String._bridgeToObjectiveC()();
    [v12 setObject:isa forKey:v14];

    sub_10000A7E8(a1, (uint64_t *)&unk_100975040);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void sub_1002BD554(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    id v44 = [self standardUserDefaults];
    id v54 = String._bridgeToObjectiveC()();
    [v44 removeObjectForKey:];

    return;
  }
  uint64_t v2 = sub_100245C24((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v52 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  id v53 = (id)((unint64_t)(v3 + 63) >> 6);
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v6 << 6);
      goto LABEL_27;
    }
    uint64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_56;
    }
    if (v11 >= (uint64_t)v53) {
      break;
    }
    unint64_t v12 = *(void *)(v52 + 8 * v11);
    ++v6;
    if (!v12)
    {
      uint64_t v6 = v11 + 1;
      if (v11 + 1 >= (uint64_t)v53) {
        break;
      }
      unint64_t v12 = *(void *)(v52 + 8 * v6);
      if (!v12)
      {
        uint64_t v6 = v11 + 2;
        if (v11 + 2 >= (uint64_t)v53) {
          break;
        }
        unint64_t v12 = *(void *)(v52 + 8 * v6);
        if (!v12)
        {
          uint64_t v6 = v11 + 3;
          if (v11 + 3 >= (uint64_t)v53) {
            break;
          }
          unint64_t v12 = *(void *)(v52 + 8 * v6);
          if (!v12)
          {
            uint64_t v6 = v11 + 4;
            if (v11 + 4 >= (uint64_t)v53) {
              break;
            }
            unint64_t v12 = *(void *)(v52 + 8 * v6);
            if (!v12)
            {
              uint64_t v13 = v11 + 5;
              if (v13 >= (uint64_t)v53) {
                break;
              }
              unint64_t v12 = *(void *)(v52 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  uint64_t v6 = v13 + 1;
                  if (__OFADD__(v13, 1)) {
                    goto LABEL_57;
                  }
                  if (v6 >= (uint64_t)v53) {
                    goto LABEL_44;
                  }
                  unint64_t v12 = *(void *)(v52 + 8 * v6);
                  ++v13;
                  if (v12) {
                    goto LABEL_26;
                  }
                }
              }
              uint64_t v6 = v13;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v6 << 6);
LABEL_27:
    NSString v14 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    id v15 = v14;
    NSString v16 = String._bridgeToObjectiveC()();
    if ((v2 & 0xC000000000000001) != 0)
    {
      if (v2 >= 0) {
        v2 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      id v17 = v15;
      uint64_t v18 = __CocoaDictionary.count.getter();
      if (__OFADD__(v18, 1)) {
        goto LABEL_54;
      }
      uint64_t v2 = sub_1002BDD4C(v2, v18 + 1);
    }
    else
    {
      id v19 = v15;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v55 = (id)v2;
    unint64_t v22 = sub_1005838E8((uint64_t)v16);
    uint64_t v23 = *(void *)(v2 + 16);
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      swift_once();
      goto LABEL_50;
    }
    char v26 = v21;
    if (*(void *)(v2 + 24) >= v25)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v2 = (uint64_t)v55;
        if (v21) {
          goto LABEL_5;
        }
      }
      else
      {
        sub_10058D684();
        uint64_t v2 = (uint64_t)v55;
        if (v26) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      sub_100586E24(v25, isUniquelyReferenced_nonNull_native);
      unint64_t v27 = sub_1005838E8((uint64_t)v16);
      if ((v26 & 1) != (v28 & 1))
      {
        sub_10000B740(0, (unint64_t *)&unk_10096BA70);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      unint64_t v22 = v27;
      uint64_t v2 = (uint64_t)v55;
      if (v26)
      {
LABEL_5:
        uint64_t v7 = *(void *)(v2 + 56);
        uint64_t v8 = 8 * v22;

        *(void *)(v7 + v8) = v15;
        goto LABEL_6;
      }
    }
    *(void *)(v2 + 8 * (v22 >> 6) + 64) |= 1 << v22;
    uint64_t v29 = 8 * v22;
    *(void *)(*(void *)(v2 + 48) + v29) = v16;
    *(void *)(*(void *)(v2 + 56) + v29) = v15;
    uint64_t v30 = *(void *)(v2 + 16);
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_55;
    }
    *(void *)(v2 + 16) = v32;
    id v33 = v16;
LABEL_6:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_44:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v34 = self;
  sub_10000B740(0, (unint64_t *)&unk_10096BA70);
  sub_10000B740(0, &qword_10096CE10);
  sub_10026B9A4();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v55 = 0;
  id v36 = [v34 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v55];

  id v37 = v55;
  if (v36)
  {
    uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;

    id v41 = [self standardUserDefaults];
    Class v42 = Data._bridgeToObjectiveC()().super.isa;
    NSString v43 = String._bridgeToObjectiveC()();
    [v41 setObject:v42 forKey:v43];

    sub_100250CC4(v38, v40);
    return;
  }
  uint64_t v45 = v37;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_100969B30 != -1) {
    goto LABEL_58;
  }
LABEL_50:
  uint64_t v46 = type metadata accessor for Logger();
  sub_10000B47C(v46, (uint64_t)qword_10096CDF0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v49 = 138412290;
    swift_errorRetain();
    uint64_t v51 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v55 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v50 = v51;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failed to persist pseudonyms to revoke error: %@", v49, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_1002BDC7C(void *a1)
{
}

uint64_t sub_1002BDC94(uint64_t a1)
{
  return sub_1002BD2E8(a1);
}

void (*sub_1002BDCAC(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = sub_1002BE3D0();
  return sub_1002BDCF4;
}

void sub_1002BDCF4(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    sub_1002BD554(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1002BD554(*a1);
  }
}

Swift::Int sub_1002BDD4C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000A844(&qword_10096AE78);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10000B740(0, (unint64_t *)&unk_10096BA70);
      do
      {
        swift_dynamicCast();
        sub_10000B740(0, &qword_10096CE10);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100586E24(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_1002BDFA0()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 dataForKey:v1];

  if (!v2)
  {
    if (qword_100969B30 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10000B47C(v7, (uint64_t)qword_10096CDF0);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No current pseudonym to load", v10, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  sub_10000B740(0, &qword_10096D3C0);
  sub_10000B740(0, &qword_10096CE10);
  uint64_t v6 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  uint64_t v11 = v6;
  if (!v6)
  {
    if (qword_100969B30 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10000B47C(v13, (uint64_t)qword_10096CDF0);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No valid current pseudonym to load", v16, 2u);
      swift_slowDealloc();
    }
    sub_100250CC4(v3, v5);

    return 0;
  }
  sub_100250CC4(v3, v5);
  return v11;
}

void *sub_1002BE3D0()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 dataForKey:v1];

  if (!v2)
  {
    if (qword_100969B30 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000B47C(v12, (uint64_t)qword_10096CDF0);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v13, "No pseudonyms to revoke to load", v14, 2u);
      swift_slowDealloc();
    }
    goto LABEL_48;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  sub_10000B740(0, &qword_10096D3C0);
  sub_10000A844(&qword_10096CE08);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1007709D0;
  *(void *)(v6 + 32) = sub_10000B740(0, (unint64_t *)&unk_10096B270);
  *(void *)(v6 + 40) = sub_10000B740(0, (unint64_t *)&unk_10096BA70);
  *(void *)(v6 + 48) = sub_10000B740(0, &qword_10096CE10);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
  swift_bridgeObjectRelease();
  if (!v55[3])
  {
    sub_10000A7E8((uint64_t)v55, (uint64_t *)&unk_10096AC20);
    goto LABEL_50;
  }
  sub_10000A844(&qword_10096CE18);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_50:
    if (qword_100969B30 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_10000B47C(v45, (uint64_t)qword_10096CDF0);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "No valid pseudonyms to revoke", v48, 2u);
      swift_slowDealloc();
    }
    sub_100250CC4(v3, v5);

    return &_swiftEmptyDictionarySingleton;
  }
  unint64_t v50 = v5;
  uint64_t v51 = v3;
  os_log_type_t v15 = (void *)sub_100245C18((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v52 = v54 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v54 + 64);
  int64_t v53 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v18)
    {
      unint64_t v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v23 = v22 | (v19 << 6);
    }
    else
    {
      int64_t v24 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_60;
      }
      if (v24 >= v53)
      {
LABEL_57:
        swift_release();
        sub_100250CC4(v51, v50);
        swift_bridgeObjectRelease();
        return v15;
      }
      unint64_t v25 = *(void *)(v52 + 8 * v24);
      ++v19;
      if (!v25)
      {
        int64_t v19 = v24 + 1;
        if (v24 + 1 >= v53) {
          goto LABEL_57;
        }
        unint64_t v25 = *(void *)(v52 + 8 * v19);
        if (!v25)
        {
          int64_t v19 = v24 + 2;
          if (v24 + 2 >= v53) {
            goto LABEL_57;
          }
          unint64_t v25 = *(void *)(v52 + 8 * v19);
          if (!v25)
          {
            int64_t v19 = v24 + 3;
            if (v24 + 3 >= v53) {
              goto LABEL_57;
            }
            unint64_t v25 = *(void *)(v52 + 8 * v19);
            if (!v25)
            {
              int64_t v19 = v24 + 4;
              if (v24 + 4 >= v53) {
                goto LABEL_57;
              }
              unint64_t v25 = *(void *)(v52 + 8 * v19);
              if (!v25)
              {
                int64_t v26 = v24 + 5;
                if (v26 >= v53) {
                  goto LABEL_57;
                }
                unint64_t v25 = *(void *)(v52 + 8 * v26);
                if (!v25)
                {
                  while (1)
                  {
                    int64_t v19 = v26 + 1;
                    if (__OFADD__(v26, 1)) {
                      break;
                    }
                    if (v19 >= v53) {
                      goto LABEL_57;
                    }
                    unint64_t v25 = *(void *)(v52 + 8 * v19);
                    ++v26;
                    if (v25) {
                      goto LABEL_35;
                    }
                  }
                  __break(1u);
LABEL_62:
                  Swift::Int result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return result;
                }
                int64_t v19 = v26;
              }
            }
          }
        }
      }
LABEL_35:
      unint64_t v18 = (v25 - 1) & v25;
      unint64_t v23 = __clz(__rbit64(v25)) + (v19 << 6);
    }
    unint64_t v27 = (uint64_t *)(*(void *)(v54 + 48) + 16 * v23);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = *(void **)(*(void *)(v54 + 56) + 8 * v23);
    swift_bridgeObjectRetain();
    id v31 = v30;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v55[0] = v15;
    unint64_t v34 = sub_1005838BC(v29, v28);
    uint64_t v35 = v15[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      break;
    }
    char v38 = v33;
    if (v15[3] >= v37)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        os_log_type_t v15 = (void *)v55[0];
        if (v33) {
          goto LABEL_14;
        }
      }
      else
      {
        sub_10058D678();
        os_log_type_t v15 = (void *)v55[0];
        if (v38) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      sub_100586E18(v37, isUniquelyReferenced_nonNull_native);
      uint64_t v39 = sub_1005838BC(v29, v28);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_62;
      }
      unint64_t v34 = v39;
      os_log_type_t v15 = (void *)v55[0];
      if (v38)
      {
LABEL_14:
        uint64_t v20 = v15[7];
        uint64_t v21 = 8 * v34;

        *(void *)(v20 + v21) = v31;
        goto LABEL_15;
      }
    }
    v15[(v34 >> 6) + 8] |= 1 << v34;
    id v41 = (uint64_t *)(v15[6] + 16 * v34);
    *id v41 = v29;
    v41[1] = v28;
    *(void *)(v15[7] + 8 * v34) = v31;
    uint64_t v42 = v15[2];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43) {
      goto LABEL_59;
    }
    v15[2] = v44;
    swift_bridgeObjectRetain();
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  swift_once();
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000B47C(v7, (uint64_t)qword_10096CDF0);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 138412290;
    swift_errorRetain();
    v55[0] = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v55[0];
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to load pseudonyms to revoke with error: %@", v10, 0xCu);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    return &_swiftEmptyDictionarySingleton;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
LABEL_48:

  return &_swiftEmptyDictionarySingleton;
}

ValueMetadata *type metadata accessor for SDPseudonymStorage()
{
  return &type metadata for SDPseudonymStorage;
}

uint64_t sub_1002BEBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_100975040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BEC0C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100994370);
  sub_10000B47C(v0, (uint64_t)qword_100994370);
  return Logger.init(subsystem:category:)();
}

uint64_t HeadphoneProxFeatureClient.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t HeadphoneProxFeatureClient.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*HeadphoneProxFeatureClient.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_1002BEE6C;
}

void sub_1002BEE6C(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

id sub_1002BEEEC()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary26HeadphoneProxFeatureClient_manager;
  type metadata accessor for HeadphoneProxFeatureManager();
  uint64_t v3 = v0;
  *(void *)&v0[v2] = static HeadphoneProxFeatureManager.shared.getter();
  swift_unknownObjectWeakInit();

  v7.receiver = v3;
  v7.Class super_class = ObjectType;
  id v4 = [super init];
  sub_1002BF5C0();
  id v5 = v4;
  swift_retain();
  dispatch thunk of HeadphoneProxFeatureManager.delegate.setter();
  swift_release();

  return v5;
}

uint64_t HeadphoneProxFeatureClient.readyToShow(device:features:)(void *a1)
{
  if (qword_100969B38 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10000B47C(v2, (uint64_t)qword_100994370);
  id v3 = a1;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    id v8 = [v4 bluetoothAddress:v18];
    if (v8)
    {
      os_log_type_t v9 = v8;
      unint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v12 = 0x80000001007B7770;
      unint64_t v10 = 0xD000000000000015;
    }
    uint64_t v19 = sub_100254634(v10, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v13 = Array.description.getter();
    uint64_t v19 = sub_100254634(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "HeadphoneProxFeatureService: [Sharing] Features Ready To Show: Device: %s, Features: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v16 = (void *)result;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v16 readyToShowWithDevice:v4 features:isa];

    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Bool __swiftcall HeadphoneProxFeatureClient.shouldShowWhatsNewCard(deviceAddress:)(Swift::String deviceAddress)
{
  object = deviceAddress._object;
  uint64_t countAndFlagsBits = deviceAddress._countAndFlagsBits;
  char v3 = dispatch thunk of HeadphoneProxFeatureManager.shouldShowWhatsNewCard(deviceAddress:)();
  if (qword_100969B38 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10000B47C(v4, (uint64_t)qword_100994370);
  swift_bridgeObjectRetain_n();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_bridgeObjectRetain();
    sub_100254634(countAndFlagsBits, (unint64_t)object, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    if (v3) {
      uint64_t v8 = 5457241;
    }
    else {
      uint64_t v8 = 20302;
    }
    if (v3) {
      unint64_t v9 = 0xE300000000000000;
    }
    else {
      unint64_t v9 = 0xE200000000000000;
    }
    sub_100254634(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "HeadphoneProxFeatureService: [Sharing] Should Show Whats New Card for Device: %s -> %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v3 & 1;
}

uint64_t type metadata accessor for HeadphoneProxFeatureClient()
{
  return self;
}

unint64_t sub_1002BF5C0()
{
  unint64_t result = qword_10096CE58;
  if (!qword_10096CE58)
  {
    type metadata accessor for HeadphoneProxFeatureClient();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096CE58);
  }
  return result;
}

uint64_t sub_1002BF614(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  char v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  char v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  BOOL v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = __chkstk_darwin(AssociatedTypeWitness);
  os_log_type_t v15 = (char *)&v26 - v14;
  __chkstk_darwin(v13);
  char v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  unint64_t v27 = v15;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  id v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    int64_t v24 = v27;
    while (1)
    {
      unint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

void URL.realPathURL()(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URLResourceValues();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (NSURL *)((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (char *)((char *)v25 - (char *)v6);
  URL._bridgeToObjectiveC()(v6);
  CFURLRef v9 = v8;
  uint64_t v10 = (__CFString *)CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);

  if (!v10)
  {
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a1, 1, 1, v17);
    return;
  }
  uint64_t v27 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  unint64_t v12 = realpath_DARWIN_EXTSN((const char *)(v11 + 32), 0);
  swift_release();
  if (v12)
  {
    uint64_t v26 = a1;
    uint64_t v13 = String.init(cString:)();
    free(v12);
    v25[1] = v13;
    uint64_t v14 = String.utf8CString.getter();
    v25[0] = strlen((const char *)(v14 + 32));
    swift_release();
    sub_10000A844((uint64_t *)&unk_10096CE70);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
    *(void *)(inited + 32) = NSURLIsDirectoryKey;
    uint64_t v16 = NSURLIsDirectoryKey;
    sub_1002C89FC(inited);
    swift_setDeallocating();
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy();
    URL.resourceValues(forKeys:)();
    if (v1)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    char v19 = URLResourceValues.isDirectory.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v3);
    uint64_t v20 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    CFURLRef v21 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)(v20 + 32), v25[0], v19 & 1);
    swift_release();
    if (v21)
    {
      uint64_t v22 = v26;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v23 = type metadata accessor for URL();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
      return;
    }
    uint64_t v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v26, 1, 1, v24);
  }
  else
  {
    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
}

uint64_t sub_1002BFD7C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  char v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  id v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int64_t v53 = (char *)&v40 - v13;
  os_log_type_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  id v41 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  char v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v50 = *((void *)v15 - 1);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v30 = (char *)&v40 - v29;
  Swift::Int v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v61 = ContiguousArray.init()();
  uint64_t v56 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  char v59 = v30;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    char v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        uint64_t v35 = v54;
        BOOL v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  BOOL v36 = v51;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  id v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    char v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t SDRunState.rawValue.getter(char a1)
{
  uint64_t result = 0x7472617453746F6ELL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6572676F72506E69;
      break;
    case 2:
      uint64_t result = 0x6574656C706D6F63;
      break;
    case 3:
      uint64_t result = 0x64656C696166;
      break;
    case 4:
      uint64_t result = 1885956979;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002C0528(unsigned __int8 *a1, char *a2)
{
  return sub_1005E9184(*a1, *a2);
}

Swift::Int sub_1002C0534()
{
  return Hasher._finalize()();
}

uint64_t sub_1002C0628()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002C0704()
{
  return Hasher._finalize()();
}

unint64_t sub_1002C07F4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s16DaemoniOSLibrary10SDRunStateO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1002C0824(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000006465;
  uint64_t v3 = 0x7472617453746F6ELL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEA00000000007373;
      uint64_t v3 = 0x6572676F72506E69;
      goto LABEL_3;
    case 2:
      *a1 = 0x6574656C706D6F63;
      a1[1] = 0xE900000000000064;
      break;
    case 3:
      *a1 = 0x64656C696166;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 1885956979;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t Optional<A>.description.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    uint64_t v14 = 0x6C616E6F6974704FLL;
    unint64_t v15 = 0xE90000000000003CLL;
    v10._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0x656E6F6E2E3ELL;
    v11._object = (void *)0xE600000000000000;
    String.append(_:)(v11);
    return v14;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  return v12;
}

uint64_t sub_1002C0B08(uint64_t a1)
{
  return Optional<A>.description.getter(a1);
}

uint64_t sub_1002C0B10()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int sub_1002C0B48()
{
  return Hasher._finalize()();
}

void sub_1002C0B8C()
{
}

Swift::Int sub_1002C0BB4()
{
  return Hasher._finalize()();
}

uint64_t sub_1002C0BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v45 = a7;
  uint64_t v46 = *((void *)a3 - 1);
  __chkstk_darwin(a1);
  uint64_t v44 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v14;
  id v41 = *(uint64_t **)(*(void *)(*(void *)(v14 + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  char v38 = (char *)&v33 - v15;
  uint64_t v43 = a6;
  uint64_t v16 = type metadata accessor for EnumeratedSequence();
  uint64_t v35 = *(void *)(v16 - 8);
  uint64_t v36 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v37 = a1;
  uint64_t v42 = a4;
  uint64_t v19 = dispatch thunk of Collection.count.getter();
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  if ((unsigned __int128)(v19 * (__int128)result) >> 64 == (v19 * result) >> 63)
  {
    if (v19 * result == dispatch thunk of static FixedWidthInteger.bitWidth.getter())
    {
      uint64_t v21 = v42;
      uint64_t v22 = Sequence.enumerated()();
      uint64_t v33 = (uint64_t)&v33;
      __chkstk_darwin(v22);
      uint64_t v34 = a2;
      *(&v33 - 6) = a2;
      *(&v33 - 5) = (uint64_t)a3;
      *(&v33 - 4) = v21;
      *(&v33 - 3) = a5;
      uint64_t v23 = a5;
      uint64_t v24 = v51;
      uint64_t v25 = v43;
      *(&v33 - 2) = v51;
      *(&v33 - 1) = v25;
      uint64_t v26 = v36;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v28 = v40;
      uint64_t v30 = sub_1002BFD7C((void (*)(char *, char *))sub_1002CE900, (uint64_t)(&v33 - 8), v26, a3, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v29);
      uint64_t v40 = v30;
      uint64_t v37 = v28;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v26);
      uint64_t v47 = v30;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      Swift::Int v31 = v44;
      uint64_t v32 = dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      id v41 = &v33;
      __chkstk_darwin(v32);
      *(&v33 - 6) = v34;
      *(&v33 - 5) = (uint64_t)a3;
      *(&v33 - 4) = v21;
      *(&v33 - 3) = v23;
      *(&v33 - 2) = v24;
      *(&v33 - 1) = v25;
      type metadata accessor for Array();
      swift_getWitnessTable();
      Sequence.reduce<A>(_:_:)();
      (*(void (**)(char *, char *))(v46 + 8))(v31, a3);
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v47 = a2;
      uint64_t v48 = a3;
      uint64_t v49 = a5;
      uint64_t v50 = v51;
      type metadata accessor for IntegerPacker.PackError();
      swift_getWitnessTable();
      swift_allocError();
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C10A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v31 = a5;
  uint64_t v37 = a4;
  uint64_t v33 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = __chkstk_darwin(TupleTypeMetadata2 - 8);
  uint64_t v32 = *(char **)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v34 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v36 = (char *)&v29 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v35 = (char *)&v29 - v21;
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 16))(v22 + *(int *)(v20 + 56), (char *)a1 + *(int *)(v20 + 56), a2);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v38 = 0;
  unint64_t v23 = sub_1002CE960();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  dispatch thunk of static BinaryInteger.~ prefix(_:)();
  uint64_t v24 = (void (*)(char *, uint64_t))*((void *)v32 + 1);
  v24(v16, a3);
  uint64_t v38 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v32 = v19;
  uint64_t v25 = v34;
  unint64_t v29 = v23;
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
  uint64_t v30 = v16;
  dispatch thunk of static BinaryInteger.~ prefix(_:)();
  dispatch thunk of static BinaryInteger.& infix(_:_:)();
  v24(v25, a3);
  uint64_t v26 = *v33;
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  if ((unsigned __int128)(v26 * (__int128)result) >> 64 == (v26 * result) >> 63)
  {
    uint64_t v38 = v26 * result;
    dispatch thunk of BinaryInteger.init<A>(_:)();
    uint64_t v28 = v36;
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    v24(v25, a3);
    v24(v28, a3);
    v24(v30, a3);
    v24(v32, a3);
    return ((uint64_t (*)(char *, uint64_t))v24)(v35, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C1484(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v98 = a2;
  uint64_t v99 = a8;
  uint64_t v14 = *(void *)(*(void *)(a8 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v92 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v91 = (char *)&v74 - v18;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v90 = type metadata accessor for Range();
  uint64_t v105 = *(char **)(v90 - 8);
  uint64_t v19 = __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v88 = (char *)&v74 - v21;
  uint64_t v100 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v100 - 8);
  uint64_t v23 = __chkstk_darwin(v100);
  uint64_t v87 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v86 = (char *)&v74 - v26;
  uint64_t v107 = AssociatedTypeWitness;
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v94 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v101 = (char *)&v74 - v30;
  uint64_t v104 = a1;
  uint64_t v95 = v14;
  uint64_t v96 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = dispatch thunk of Collection.count.getter();
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v34 = v32 * result;
  if ((unsigned __int128)(v32 * (__int128)result) >> 64 != (v32 * result) >> 63)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v35 = a4;
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  if (!result)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v34 == 0x8000000000000000 && result == -1) {
    goto LABEL_18;
  }
  if (v34 % result)
  {
    uint64_t v109 = a3;
    uint64_t v110 = a4;
    uint64_t v111 = v31;
    uint64_t v112 = a7;
    type metadata accessor for IntegerPacker.PackError();
    swift_getWitnessTable();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    uint64_t v75 = a3;
    uint64_t v76 = v31;
    uint64_t v77 = a7;
    uint64_t v78 = (uint64_t)a4;
    uint64_t v109 = static Array._allocateUninitialized(_:)();
    uint64_t v36 = v22;
    uint64_t v37 = v101;
    uint64_t v38 = v96;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v39 = (char **)(v27 + 8);
    uint64_t v85 = (void (**)(char *, char *, uint64_t))(v27 + 16);
    uint64_t v84 = (void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v83 = (void (**)(char *, char *, uint64_t))(v105 + 32);
    uint64_t v82 = (void (**)(char *, uint64_t))(v105 + 8);
    char v81 = (void (**)(char *, char *, uint64_t))(v36 + 16);
    int v80 = (void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v40 = v94;
    uint64_t v106 = (char **)(v27 + 8);
    while (1)
    {
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v41 = v107;
      char v42 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v43 = *v39;
      uint64_t v44 = ((uint64_t (*)(char *, uint64_t))*v39)(v40, v41);
      if ((v42 & 1) == 0) {
        break;
      }
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
        __break(1u);
        goto LABEL_16;
      }
      uint64_t v45 = TupleTypeMetadata2;
      uint64_t v46 = v37;
      uint64_t v47 = v91;
      uint64_t v48 = &v91[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v49 = v107;
      uint64_t v50 = *v85;
      (*v85)(v91, v46, v107);
      uint64_t v102 = v48;
      v50(v48, v40, v49);
      uint64_t v51 = *(int *)(v45 + 48);
      uint64_t v52 = v92;
      uint64_t v105 = v43;
      int64_t v53 = &v92[v51];
      v50(v92, v47, v49);
      v50(v53, v48, v49);
      uint64_t v54 = *v84;
      id v55 = v89;
      (*v84)(v89, v52, v49);
      uint64_t v103 = v54;
      uint64_t v56 = (void (*)(char *, uint64_t))v105;
      ((void (*)(char *, uint64_t))v105)(v53, v49);
      uint64_t v57 = &v52[*(int *)(v45 + 48)];
      v54(v52, v47, v49);
      v54(v57, v102, v49);
      uint64_t v58 = v90;
      uint64_t v59 = v96;
      v54(&v55[*(int *)(v90 + 36)], v57, v49);
      v56(v52, v49);
      uint64_t v60 = v88;
      (*v83)(v88, v55, v58);
      uint64_t v61 = v86;
      dispatch thunk of Collection.subscript.getter();
      (*v82)(v60, v58);
      uint64_t v62 = v100;
      (*v81)(v87, v61, v100);
      type metadata accessor for Array();
      uint64_t v40 = v94;
      Array.append(_:)();
      uint64_t v63 = v61;
      uint64_t v39 = v106;
      uint64_t v64 = v62;
      uint64_t v37 = v101;
      (*v80)(v63, v64);
      ((void (*)(char *, uint64_t))v105)(v37, v49);
      v103(v37, v40, v49);
      uint64_t v38 = v59;
    }
    uint64_t v65 = v43;
    uint64_t v113 = v109;
    __chkstk_darwin(v44);
    uint64_t v66 = v78;
    *(&v74 - 8) = v75;
    *(&v74 - 7) = v66;
    uint64_t v67 = v76;
    *(&v74 - 6) = v38;
    *(&v74 - 5) = v67;
    uint64_t v68 = v99;
    *(&v74 - 4) = v77;
    *(&v74 - 3) = v68;
    *(&v74 - 2) = v98;
    uint64_t v69 = type metadata accessor for Array();
    uint64_t v70 = sub_10000A844(&qword_10096BAF0);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v35 = &v113;
    uint64_t v72 = v79;
    uint64_t v73 = sub_1002BF614((void (*)(char *, char *))sub_1002CEB10, (uint64_t)(&v74 - 10), v69, v66, v70, WitnessTable, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v108);
    if (!v72) {
      uint64_t v35 = (void *)v73;
    }
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v65)(v101, v107);
  }
  return (uint64_t)v35;
}

uint64_t sub_1002C1DAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>, void *a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = sub_1002C0BF4(a1, a2, a3, AssociatedTypeWitness, a4, AssociatedConformanceWitness, a5);
  if (v14) {
    *a6 = v14;
  }
  return result;
}

uint64_t PushableTimer.noLaterThan.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1002C9048(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, a1);
}

uint64_t PushableTimer.__allocating_init(fireAt:noLaterThan:queue:handler:)(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  swift_allocObject();
  uint64_t v10 = sub_1002C9CCC(a1, a2, a3, a4, a5);

  swift_release();
  return v10;
}

uint64_t PushableTimer.init(fireAt:noLaterThan:queue:handler:)(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_1002C9CCC(a1, a2, a3, a4, a5);

  swift_release();
  return v6;
}

uint64_t sub_1002C1F64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_1002C1FD8@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t PushableTimer.reschedule(deadline:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v30 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void *)(v30 - 8);
  uint64_t v5 = __chkstk_darwin(v30);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v28 - v8;
  uint64_t v10 = sub_10000A844(&qword_10097D410);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v28 - v18;
  sub_1002C9048(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    static DispatchTime.distantFuture.getter();
    sub_10000A7E8((uint64_t)v12, &qword_10097D410);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
  }
  sub_1002CC248(&qword_10096CE80, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    uint64_t v20 = v19;
    uint64_t v21 = v17;
  }
  else
  {
    uint64_t v20 = v19;
    uint64_t v21 = a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v21, v13);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  v28[1] = v14 + 8;
  uint64_t v29 = v22;
  v22(v17, v13);
  swift_getObjectType();
  uint64_t v23 = v4;
  uint64_t v24 = *(void (**)(char *, void, uint64_t))(v4 + 104);
  uint64_t v25 = v30;
  v24(v9, enum case for DispatchTimeInterval.never(_:), v30);
  *(void *)uint64_t v7 = 0;
  v24(v7, enum case for DispatchTimeInterval.nanoseconds(_:), v25);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v23 + 8);
  v26(v7, v25);
  v26(v9, v25);
  return v29(v19, v13);
}

Swift::Void __swiftcall PushableTimer.resume()()
{
}

Swift::Void __swiftcall PushableTimer.cancel()()
{
}

uint64_t sub_1002C2424(uint64_t (*a1)(uint64_t))
{
  uint64_t ObjectType = swift_getObjectType();
  return a1(ObjectType);
}

uint64_t PushableTimer.deinit()
{
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  sub_10000A7E8(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, &qword_10097D410);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t PushableTimer.__deallocating_deinit()
{
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  sub_10000A7E8(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, &qword_10097D410);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t SDB389BubbleMonitor.allDevices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SDB389BubbleMonitor.allDevices.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SDB389BubbleMonitor.allDevices.modify())()
{
  return j__swift_endAccess;
}

void *SDB389BubbleMonitor.queue.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void SDB389BubbleMonitor.queue.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = a1;
}

uint64_t (*SDB389BubbleMonitor.queue.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SDB389BubbleMonitor.inBubbleCount.getter()
{
  swift_beginAccess();
  return *(void *)(*(void *)(v0 + 80) + 16);
}

uint64_t SDB389BubbleMonitor.updateHandler.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1002CA420(v1);
  return v1;
}

uint64_t SDB389BubbleMonitor.updateHandler.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return sub_1002CA430(v5);
}

uint64_t (*SDB389BubbleMonitor.updateHandler.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SDB389BubbleMonitor.lostHandler.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1002CA420(v1);
  return v1;
}

uint64_t SDB389BubbleMonitor.lostHandler.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return sub_1002CA430(v5);
}

uint64_t (*SDB389BubbleMonitor.lostHandler.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SDB389BubbleMonitor.closestB389sInBubble.getter()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_100254CD8(v0);
  sub_1002C75B8((uint64_t *)&v3);
  uint64_t v1 = sub_1002C29B8((unint64_t)v3);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1002C29B8(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  uint64_t v18 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v17 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v17 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3) {
      return v2;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v7 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        uint64_t v8 = v18;
        if ((v18 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v9) {
            goto LABEL_34;
          }
          id v10 = *(id *)(v18 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v9) {
            goto LABEL_37;
          }
          uint64_t v11 = (uint64_t)v10;
          id v12 = *(id *)(v18 + 32 + 8 * v1);
        }
        id v13 = v12;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v8 = sub_1002AD470(v18);
          uint64_t v18 = v8;
        }
        uint64_t v14 = (v8 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(void *)(v14 + 32) = v13;
        specialized Array._endMutation()();
        uint64_t v15 = v18;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v15 = sub_1002AD470(v18);
          uint64_t v18 = v15;
        }
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_38;
        }
        uint64_t v6 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(void *)(v6 + 32) = v11;
        specialized Array._endMutation()();
      }
      unint64_t v5 = v7;
      if (v4 == v7) {
        return v18;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)sub_100254BE0(v1);
    uint64_t v18 = v2;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
}

uint64_t sub_1002C2BD4(uint64_t a1)
{
  *(void *)(v1 + 16) = sub_100245D30((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v1 + 24) = (id)CUMainQueue();
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(void *)(v1 + 64) = [objc_allocWithZone((Class)SFDeviceDiscovery) init];
  unint64_t v3 = sub_100245D30((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  return v1;
}

void sub_1002C2C54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)(v3 + 64);
  [v6 setChangeFlags:13];
  [v6 setDiscoveryFlags:2];
  swift_beginAccess();
  if (*(void *)(v3 + 24))
  {
    [v6 setDispatchQueue:];
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 setPurpose:v7];

    uint64_t v17 = sub_1002CEA84;
    uint64_t v18 = v3;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v14 = 1107296256;
    uint64_t v15 = (void (*)(uint64_t, void *))sub_10032A9D8;
    uint64_t v16 = &unk_1008D57B8;
    uint64_t v8 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v6 setDeviceFoundHandler:v8];
    _Block_release(v8);
    uint64_t v17 = sub_1002CEA8C;
    uint64_t v18 = v3;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v14 = 1107296256;
    uint64_t v15 = sub_10061C830;
    uint64_t v16 = &unk_1008D57E0;
    unint64_t v9 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v6 setDeviceChangedHandler:v9];
    _Block_release(v9);
    uint64_t v17 = sub_1002CEA94;
    uint64_t v18 = v3;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v14 = 1107296256;
    uint64_t v15 = (void (*)(uint64_t, void *))sub_10032A9D8;
    uint64_t v16 = &unk_1008D5808;
    id v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v6 setDeviceLostHandler:v10];
    _Block_release(v10);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = a1;
    *(void *)(v11 + 24) = a2;
    uint64_t v17 = sub_1002CEAD4;
    uint64_t v18 = v11;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v14 = 1107296256;
    uint64_t v15 = sub_1006B210C;
    uint64_t v16 = &unk_1008D5858;
    id v12 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v6 activateWithCompletion:v12];
    _Block_release(v12);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002C2F70(void *a1, void *a2)
{
  uint64_t v4 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)&v46 - v12;
  id v14 = [a1 identifier];
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_10000A7E8((uint64_t)v6, &qword_100974EA0);
  }
  uint64_t v15 = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v16(v6, v11, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_10000A7E8((uint64_t)v6, &qword_100974EA0);
  }
  v16(v13, v6, v7);
  id v17 = [a1 bleDevice];
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = [v17 advertisementFields];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v49 = 0x65707954627573;
      unint64_t v50 = 0xE700000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v21 + 16) && (unint64_t v22 = sub_100583878((uint64_t)v51), (v23 & 1) != 0))
      {
        sub_10024D2D4(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v52);
      }
      else
      {
        long long v52 = 0u;
        long long v53 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_10025B0A8((uint64_t)v51);
      if (*((void *)&v53 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0 && v49 == 5)
        {
          uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
          v48(v11, v13, v7);
          swift_beginAccess();
          id v25 = a1;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v52 = a2[2];
          a2[2] = 0x8000000000000000;
          sub_100592508((uint64_t)v25, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
          a2[2] = v52;
          swift_bridgeObjectRelease();
          uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
          v27(v11, v7);
          swift_endAccess();
          uint64_t v28 = a2[9];
          if ((v28 & 0x8000000000000000) == 0)
          {

            swift_beginAccess();
            uint64_t v29 = (void *)sub_1002A8D88((uint64_t)v13);
            swift_endAccess();

            swift_beginAccess();
            uint64_t v30 = (void (*)(uint64_t))a2[4];
            if (v30)
            {
              uint64_t v31 = swift_retain();
              v30(v31);
              sub_1002CA430((uint64_t)v30);
            }
            return ((uint64_t (*)(char *, uint64_t))v27)(v13, v7);
          }
          uint64_t v47 = (uint64_t (*)(char *, uint64_t))v27;
          uint64_t v35 = (uint64_t)[v18 rssi];

          if ((v35 & 0x8000000000000000) == 0)
          {
            swift_beginAccess();
            uint64_t v36 = (void *)sub_1002A8D88((uint64_t)v13);
            swift_endAccess();

            swift_beginAccess();
            uint64_t v37 = (void (*)(uint64_t))a2[4];
            if (v37)
            {
              uint64_t v38 = swift_retain();
              v37(v38);
              sub_1002CA430((uint64_t)v37);
            }
            return v47(v13, v7);
          }
          if ((sub_1002CEAFC(v35, v28) & 0x80000000) != 0)
          {
            swift_beginAccess();
            uint64_t v45 = (void *)sub_1002A8D88((uint64_t)v13);
            swift_endAccess();

            swift_beginAccess();
            uint64_t v43 = (void (*)(uint64_t))a2[4];
            char v42 = v47;
            if (!v43) {
              return v42(v13, v7);
            }
          }
          else
          {
            swift_beginAccess();
            uint64_t v39 = (void *)sub_1002A8D88((uint64_t)v13);
            swift_endAccess();

            v48(v11, v13, v7);
            swift_beginAccess();
            id v40 = v25;
            char v41 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v52 = a2[10];
            a2[10] = 0x8000000000000000;
            sub_100592508((uint64_t)v40, (uint64_t)v11, v41);
            a2[10] = v52;
            swift_bridgeObjectRelease();
            char v42 = v47;
            v47(v11, v7);
            swift_endAccess();
            swift_beginAccess();
            uint64_t v43 = (void (*)(uint64_t))a2[4];
            if (!v43) {
              return v42(v13, v7);
            }
          }
          uint64_t v44 = swift_retain();
          v43(v44);
          sub_1002CA430((uint64_t)v43);
          return v42(v13, v7);
        }
      }
      else
      {
        sub_10000A7E8((uint64_t)&v52, (uint64_t *)&unk_10096AC20);
      }
    }
  }
  swift_beginAccess();
  uint64_t v32 = (void *)sub_1002A8D88((uint64_t)v13);
  swift_endAccess();

  swift_beginAccess();
  uint64_t v33 = (void (*)(uint64_t))a2[4];
  if (v33)
  {
    uint64_t v34 = swift_retain();
    v33(v34);
    sub_1002CA430((uint64_t)v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

void sub_1002C3660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = [*(id *)(a3 + 64) deviceFoundHandler];
  if (v4)
  {
    uint64_t v5 = v4;
    (*((void (**)(id, uint64_t))v4 + 2))(v4, a1);
    _Block_release(v5);
  }
}

uint64_t sub_1002C36D0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  id v13 = &v23[-v12];
  id v14 = [a1 identifier];
  if (!v14)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_10000A7E8((uint64_t)v6, &qword_100974EA0);
  }
  uint64_t v15 = v14;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32);
  v16(v6, v11, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_10000A7E8((uint64_t)v6, &qword_100974EA0);
  }
  v16(v13, v6, v7);
  swift_beginAccess();
  id v17 = (void *)sub_1002A8D88((uint64_t)v13);
  swift_endAccess();

  swift_beginAccess();
  uint64_t v18 = (void *)sub_1002A8D88((uint64_t)v13);
  swift_endAccess();

  swift_beginAccess();
  id v19 = *(void (**)(uint64_t))(a2 + 32);
  if (v19)
  {
    uint64_t v20 = swift_retain();
    v19(v20);
    sub_1002CA430((uint64_t)v19);
  }
  swift_beginAccess();
  uint64_t v21 = *(void (**)(unsigned char *))(a2 + 48);
  if (v21)
  {
    swift_retain();
    v21(v13);
    sub_1002CA430((uint64_t)v21);
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_1002C39CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void **)(v0 + 24);
  if (v9)
  {
    aBlock[4] = sub_1002CEA5C;
    void aBlock[5] = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100296520;
    aBlock[3] = &unk_1008D5790;
    uint64_t v10 = _Block_copy(aBlock);
    id v11 = v9;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v15 = _swiftEmptyArrayStorage;
    sub_1002CC248((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000A844((uint64_t *)&unk_10096C490);
    sub_1002AE308((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v10);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
    swift_release();
    swift_beginAccess();
    uint64_t v12 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = 0;
    return sub_1002CA430(v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SDB389BubbleMonitor.deinit()
{
  swift_bridgeObjectRelease();

  sub_1002CA430(*(void *)(v0 + 32));
  sub_1002CA430(*(void *)(v0 + 48));

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SDB389BubbleMonitor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  sub_1002CA430(*(void *)(v0 + 32));
  sub_1002CA430(*(void *)(v0 + 48));

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t b389VersionString(from:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969CB0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10000B47C(v4, (uint64_t)qword_100994660);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_10025ADCC(a1, a2);
  sub_10025ADCC(a1, a2);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v35 = v7;
  if (v11)
  {
    uint64_t v33 = v5;
    uint64_t v34 = v4;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v14 = (id)SFHexStringForData();

    if (!v14)
    {
      uint64_t result = sub_100250CC4(a1, a2);
      __break(1u);
      return result;
    }
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v36 = sub_100254634(v15, v17, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100250CC4(a1, a2);
    sub_100250CC4(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "b389VersionString from %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v5 = v33;
    uint64_t v4 = v34;
    uint64_t v7 = v35;
  }
  else
  {

    sub_100250CC4(a1, a2);
    sub_100250CC4(a1, a2);
  }
  unsigned int v18 = sub_1002C92B8(a1, a2);
  int v19 = (v18 >> 20) & 0xF;
  int v20 = HIWORD(v18) & 0xF;
  __int16 v21 = (unsigned __int16)v18 >> 4;
  sub_10000A844(&qword_10096B500);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1007709D0;
  LOBYTE(v37[0]) = v19;
  *(void *)(v22 + 32) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v22 + 40) = v23;
  LOBYTE(v37[0]) = v20;
  *(void *)(v22 + 48) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v22 + 56) = v24;
  LOWORD(v37[0]) = v21;
  *(void *)(v22 + 64) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v22 + 72) = v25;
  v37[0] = v22;
  sub_10000A844((uint64_t *)&unk_100974C30);
  sub_1002AE308((unint64_t *)&qword_10096CE90, (uint64_t *)&unk_100974C30);
  uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_100254634(v26, v28, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Result version: %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v35, v4);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v26;
}

uint64_t sub_1002C43EC()
{
  _StringGuts.grow(_:)(194);
  v1._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v1._object = (void *)0x80000001007B80A0;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x3A6C65646F6D202CLL;
  v3._object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v0 + 8);
  uint64_t v5 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x203A65646F6D20;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  uint64_t v8 = type metadata accessor for B389PresentationConfig(0);
  type metadata accessor for B389PresentationConfig.Mode(0);
  _print_unlocked<A, B>(_:_:)();
  v9._uint64_t countAndFlagsBits = 0x43726F6C6F63202CLL;
  v9._object = (void *)0xED0000203A65646FLL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x7375655A7369202CLL;
  v11._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v11);
  if (*(unsigned char *)(v0 + *(int *)(v8 + 32))) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + *(int *)(v8 + 32))) {
    unint64_t v13 = 0xE400000000000000;
  }
  else {
    unint64_t v13 = 0xE500000000000000;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0xD000000000000012;
  v15._object = (void *)0x80000001007B80C0;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x80000001007B80E0;
  v17._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v17);
  if (*(unsigned char *)(v0 + *(int *)(v8 + 40))) {
    uint64_t v18 = 1702195828;
  }
  else {
    uint64_t v18 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + *(int *)(v8 + 40))) {
    unint64_t v19 = 0xE400000000000000;
  }
  else {
    unint64_t v19 = 0xE500000000000000;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x80000001007B8100;
  v21._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0xD000000000000015;
  v23._object = (void *)0x80000001007B8120;
  String.append(_:)(v23);
  DefaultStringInterpolation.appendInterpolation<A>(nilPrint:)();
  v24._object = (void *)0xED0000203A656D61;
  v24._uint64_t countAndFlagsBits = 0x4E6E65766967202CLL;
  String.append(_:)(v24);
  DefaultStringInterpolation.appendInterpolation<A>(nilPrint:)();
  v25._object = (void *)0x80000001007B8140;
  v25._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v25);
  sub_1002CE57C();
  DefaultStringInterpolation.appendInterpolation<A>(nilPrint:)();
  v26._uint64_t countAndFlagsBits = 62;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  return 0;
}

unint64_t sub_1002C47FC(char a1)
{
  unint64_t result = 6580592;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C65646F6DLL;
      break;
    case 2:
      unint64_t result = 1701080941;
      break;
    case 3:
      unint64_t result = 0x646F43726F6C6F63;
      break;
    case 4:
      unint64_t result = 0x7375655A7369;
      break;
    case 5:
      unint64_t result = 0x5079726574746162;
      break;
    case 6:
      unint64_t result = 0x5479726574746162;
      break;
    case 7:
      unint64_t result = 0x6572685469737372;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0x6D614E6E65766967;
      break;
    case 10:
      unint64_t result = 0x6E69766172676E65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002C4970()
{
  return sub_1002C47FC(*v0);
}

uint64_t sub_1002C4978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002CBBFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002C49A0()
{
  return 0;
}

void sub_1002C49AC(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1002C49B8(uint64_t a1)
{
  unint64_t v2 = sub_1002CE460();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C49F4(uint64_t a1)
{
  unint64_t v2 = sub_1002CE460();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002C4A30(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000A844(&qword_10096D438);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10026BB6C(a1, a1[3]);
  sub_1002CE460();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = type metadata accessor for B389PresentationConfig(0);
    LOBYTE(v12) = 2;
    type metadata accessor for B389PresentationConfig.Mode(0);
    sub_1002CC248(&qword_10096D440, (void (*)(uint64_t))type metadata accessor for B389PresentationConfig.Mode);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 56));
    v11[15] = 10;
    sub_1002CC290();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002C4D98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v41 = type metadata accessor for B389PresentationConfig.Mode(0);
  __chkstk_darwin(v41);
  id v40 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000A844(&qword_10096D420);
  uint64_t v39 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for B389PresentationConfig(0);
  uint64_t v7 = (int *)__chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)uint64_t v9 = 21760;
  *((void *)v9 + 1) = 0x2C31676154726941;
  *((void *)v9 + 2) = 0xE900000000000031;
  uint64_t v38 = v7[7];
  *(_DWORD *)&v9[v38] = 0;
  uint64_t v10 = v7[8];
  v9[v10] = 0;
  uint64_t v11 = v7[9];
  v9[v11] = 0;
  uint64_t v12 = v7[10];
  v9[v12] = 0;
  uint64_t v13 = v7[11];
  *(void *)&v9[v13] = -50;
  unint64_t v14 = &v9[v7[12]];
  *(void *)unint64_t v14 = 0;
  v14[8] = 1;
  Swift::String v15 = &v9[v7[13]];
  *(void *)Swift::String v15 = 0;
  *((void *)v15 + 1) = 0;
  uint64_t v48 = (uint64_t *)v15;
  uint64_t v49 = v9;
  uint64_t v43 = v7;
  uint64_t v45 = &v9[v7[14]];
  uint64_t v46 = a1;
  *(_OWORD *)uint64_t v45 = xmmword_100770AE0;
  sub_10026BB6C(a1, a1[3]);
  sub_1002CE460();
  uint64_t v44 = v5;
  uint64_t v16 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    unint64_t v20 = v45;
    sub_10024D338((uint64_t)v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100250CB0(*(void *)v20, *((void *)v20 + 1));
  }
  else
  {
    uint64_t v47 = v10;
    uint64_t v17 = (uint64_t)v40;
    uint64_t v35 = v13;
    uint64_t v36 = v11;
    uint64_t v34 = (uint64_t *)v14;
    uint64_t v18 = v39;
    LOBYTE(v50) = 0;
    int v19 = KeyedDecodingContainer.decode(_:forKey:)();
    Swift::String v21 = v49;
    *uint64_t v49 = v19;
    LOBYTE(v50) = 1;
    *((void *)v21 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v21 + 2) = v22;
    LOBYTE(v50) = 2;
    sub_1002CC248(&qword_10096D430, (void (*)(uint64_t))type metadata accessor for B389PresentationConfig.Mode);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1002CE9B4(v17, (uint64_t)v21 + v43[6], type metadata accessor for B389PresentationConfig.Mode);
    LOBYTE(v50) = 3;
    *(_DWORD *)((char *)v21 + v38) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v50) = 4;
    *((unsigned char *)v21 + v47) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v50) = 5;
    *((unsigned char *)v21 + v36) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v50) = 6;
    *((unsigned char *)v21 + v12) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v50) = 7;
    *(void *)((char *)v21 + v35) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v50) = 8;
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    Swift::String v24 = v34;
    uint64_t *v34 = v23;
    *((unsigned char *)v24 + 8) = v25 & 1;
    LOBYTE(v50) = 9;
    uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v27 = v48;
    uint64_t *v48 = v26;
    v27[1] = v28;
    char v52 = 10;
    sub_1002CC1F4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v44, v42);
    uint64_t v29 = v50;
    uint64_t v30 = v51;
    uint64_t v31 = v45;
    sub_100250CB0(*(void *)v45, *((void *)v45 + 1));
    *(void *)uint64_t v31 = v29;
    *((void *)v31 + 1) = v30;
    uint64_t v32 = v49;
    sub_1002CE4B4((uint64_t)v49, v37, type metadata accessor for B389PresentationConfig);
    sub_10024D338((uint64_t)v46);
    return sub_1002CE51C((uint64_t)v32, type metadata accessor for B389PresentationConfig);
  }
}

uint64_t sub_1002C53B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002C4D98(a1, a2);
}

uint64_t sub_1002C53D0(void *a1)
{
  return sub_1002C4A30(a1);
}

uint64_t sub_1002C53F0(unsigned __int8 *a1, char *a2)
{
  return sub_1005E7FEC(*a1, *a2);
}

Swift::Int sub_1002C53FC()
{
  return Hasher._finalize()();
}

uint64_t sub_1002C54E4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002C55B4()
{
  return Hasher._finalize()();
}

unint64_t sub_1002C5698@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002CC0E4(*a1);
  *a2 = result;
  return result;
}

void sub_1002C56C8(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEE00726569666974;
  uint64_t v3 = 0x6E65644965736163;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x444955557462;
      goto LABEL_3;
    case 2:
      *a1 = 0x69666E6F4363666ELL;
      a1[1] = 0xE900000000000067;
      break;
    case 3:
      *a1 = 0x69746C754D7369;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1002C5770()
{
  uint64_t result = 0x6E65644965736163;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x444955557462;
      break;
    case 2:
      uint64_t result = 0x69666E6F4363666ELL;
      break;
    case 3:
      uint64_t result = 0x69746C754D7369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002C580C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002CC0E4(a1);
  *a2 = result;
  return result;
}

void sub_1002C5834(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1002C5840(uint64_t a1)
{
  unint64_t v2 = sub_1002CC14C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002C587C(uint64_t a1)
{
  unint64_t v2 = sub_1002CC14C();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1002C58B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1002C58D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000A844(&qword_10096D3A0);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for B389PresentationConfig.Mode(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v36 = a1;
  sub_10026BB6C(a1, v12);
  sub_1002CC14C();
  uint64_t v13 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_9;
  }
  unint64_t v14 = v5;
  uint64_t v37 = v11;
  uint64_t v32 = v9;
  uint64_t v15 = v34;
  uint64_t v16 = v35;
  LOBYTE(v38) = 0;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = v8;
  if (!v17)
  {
    LOBYTE(v38) = 3;
    char v23 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v6);
    uint64_t v24 = (uint64_t)v36;
    uint64_t v25 = (uint64_t)v37;
    unsigned char *v37 = v23 & 1;
LABEL_13:
    swift_storeEnumTagMultiPayload();
    sub_1002CE9B4(v25, v16, type metadata accessor for B389PresentationConfig.Mode);
    return sub_10024D338(v24);
  }
  uint64_t v19 = v15;
  if (v17 == 1)
  {
    LOBYTE(v38) = 1;
    sub_1002CC248((unint64_t *)&unk_10096D3D0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    LOBYTE(v38) = 3;
    char v29 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v6);
    uint64_t v30 = *(int *)(sub_10000A844(&qword_10096D228) + 48);
    uint64_t v25 = (uint64_t)v37;
    (*(void (**)(unsigned char *, char *, uint64_t))(v33 + 32))(v37, v14, v3);
    *(unsigned char *)(v25 + v30) = v29 & 1;
    uint64_t v24 = (uint64_t)v36;
    goto LABEL_13;
  }
  if (v17 == 2)
  {
    char v40 = 2;
    sub_1002CC1F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v21 = v38;
    unint64_t v20 = v39;
    sub_10000B740(0, &qword_10096D3C0);
    sub_10000B740(0, &qword_10096D3C8);
    uint64_t v22 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    uint64_t v28 = v22;
    uint64_t v24 = (uint64_t)v36;
    if (!v22)
    {
      sub_1002CC1A0();
      swift_allocError();
      *uint64_t v31 = 0;
      swift_willThrow();
      sub_100250CC4(v21, v20);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v6);
      return sub_10024D338(v24);
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v6);
    sub_100250CC4(v21, v20);
    uint64_t v25 = (uint64_t)v37;
    *(void *)uint64_t v37 = v28;
    goto LABEL_13;
  }
  sub_1002CC1A0();
  swift_allocError();
  *uint64_t v26 = 1;
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v6);
LABEL_9:
  uint64_t v24 = (uint64_t)v36;
  return sub_10024D338(v24);
}

uint64_t sub_1002C5E4C(void *a1)
{
  uint64_t v2 = sub_10000A844(&qword_100974EA0);
  __chkstk_darwin(v2 - 8);
  id v55 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for B389PresentationConfig.Mode(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v54 = (void **)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v59 = (char *)&v53 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v57 = (uint64_t)&v53 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v56 = (uint64_t)&v53 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v62 = (char *)&v53 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v53 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v53 - v18;
  uint64_t v20 = sub_10000A844(&qword_10096D3E0);
  uint64_t v58 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10026BB6C(a1, a1[3]);
  sub_1002CC14C();
  uint64_t v23 = v60;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1002CE4B4(v23, (uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v19, v25);
    }
    else
    {
      sub_1002CE51C((uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
    }
  }
  uint64_t v26 = v22;
  uint64_t v27 = (uint64_t)v59;
  LOBYTE(v64[0]) = 0;
  uint64_t v28 = v61;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v29 = (uint64_t)v62;
  if (v28) {
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v26, v20);
  }
  sub_1002CE4B4(v23, (uint64_t)v17, type metadata accessor for B389PresentationConfig.Mode);
  int v31 = swift_getEnumCaseMultiPayload();
  if (v31)
  {
    if (v31 == 1)
    {
      uint64_t v32 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8))(v17, v32);
    }
    else
    {
      sub_1002CE51C((uint64_t)v17, type metadata accessor for B389PresentationConfig.Mode);
    }
    sub_1002CE4B4(v23, v29, type metadata accessor for B389PresentationConfig.Mode);
    sub_1002CE4B4(v29, v56, type metadata accessor for B389PresentationConfig.Mode);
    int v34 = swift_getEnumCaseMultiPayload();
    uint64_t v33 = (uint64_t)v55;
    if (!v34)
    {
      sub_1002CE51C(v29, type metadata accessor for B389PresentationConfig.Mode);
      goto LABEL_24;
    }
    if (v34 != 1)
    {
      sub_1002CE51C(v56, type metadata accessor for B389PresentationConfig.Mode);
      sub_1002CE51C(v29, type metadata accessor for B389PresentationConfig.Mode);
      goto LABEL_24;
    }
    uint64_t v35 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v56, v35);
  }
  else
  {
    sub_1002CE4B4(v23, v29, type metadata accessor for B389PresentationConfig.Mode);
    uint64_t v33 = (uint64_t)v55;
  }
  sub_1002CE51C(v29, type metadata accessor for B389PresentationConfig.Mode);
  sub_1002CE4B4(v23, v57, type metadata accessor for B389PresentationConfig.Mode);
  int v36 = swift_getEnumCaseMultiPayload();
  if (v36)
  {
    if (v36 == 1)
    {
      sub_10000A844(&qword_10096D228);
      uint64_t v37 = v57;
      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v37, v38);
    }
    else
    {
      sub_1002CE51C(v57, type metadata accessor for B389PresentationConfig.Mode);
    }
  }
  LOBYTE(v64[0]) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
LABEL_24:
  sub_1002CE4B4(v23, v27, type metadata accessor for B389PresentationConfig.Mode);
  uint64_t v62 = (char *)v4;
  int v39 = swift_getEnumCaseMultiPayload();
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = v27;
  uint64_t v43 = v41;
  if (v39 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v33, v42, v40);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v33, 0, 1, v40);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v33, 1, 1, v40);
    sub_1002CE51C(v42, type metadata accessor for B389PresentationConfig.Mode);
  }
  LOBYTE(v64[0]) = 1;
  sub_1002CC248(&qword_10096D3E8, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  sub_10000A7E8(v33, &qword_100974EA0);
  uint64_t v44 = v54;
  sub_1002CE4B4(v23, (uint64_t)v54, type metadata accessor for B389PresentationConfig.Mode);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_1002CE51C((uint64_t)v44, type metadata accessor for B389PresentationConfig.Mode);
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v26, v20);
  }
  uint64_t v45 = *v44;
  uint64_t v46 = self;
  v64[0] = 0;
  id v47 = [v46 archivedDataWithRootObject:v45 requiringSecureCoding:1 error:v64];
  id v48 = v64[0];
  if (!v47)
  {
    char v52 = v48;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v26, v20);
  }
  uint64_t v49 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;

  v64[0] = v49;
  v64[1] = v51;
  char v63 = 2;
  sub_1002CC290();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v26, v20);

  return sub_100250CC4((uint64_t)v49, (unint64_t)v51);
}

uint64_t sub_1002C6714@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002C58D0(a1, a2);
}

uint64_t sub_1002C672C(void *a1)
{
  return sub_1002C5E4C(a1);
}

void *sub_1002C6744()
{
  unint64_t result = (void *)sub_100245D44((uint64_t)_swiftEmptyArrayStorage);
  off_10096CE60 = result;
  return result;
}

uint64_t sub_1002C676C()
{
  sub_10000A844((uint64_t *)&unk_10096D4C0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  qword_10096CE68 = result;
  return result;
}

uint64_t sub_1002C67A4(uint64_t a1)
{
  if (qword_100969B48 != -1) {
    a1 = swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)qword_10096CE68;
  __chkstk_darwin(a1);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  sub_1002CEA38(v3);
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1002C6888(uint64_t a1)
{
  if (qword_100969B40 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  swift_beginAccess();
  if (*((void *)off_10096CE60 + 2))
  {
    swift_bridgeObjectRetain();
    sub_1005838BC(v3, v2);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  sub_10000A844(&qword_10096D4B8);
  uint64_t result = Optional.unwrap(_:file:line:)();
  uint64_t v5 = v7 - 1;
  if (v7 == 1)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1002A8EEC(v3, v2);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  else if (v7)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = off_10096CE60;
    off_10096CE60 = (_UNKNOWN *)0x8000000000000000;
    sub_100592514(v5, v3, v2, isUniquelyReferenced_nonNull_native);
    off_10096CE60 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C6A90(Swift::String *a1)
{
  _StringGuts.grow(_:)(23);
  v2._object = (void *)0x80000001007B81A0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v2);
  String.append(_:)(a1[1]);
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t sub_1002C6B14(uint64_t a1)
{
  sub_1002C67A4(a1);

  return swift_deallocClassInstance();
}

uint64_t URL.fileUTType()()
{
  uint64_t v1 = type metadata accessor for URLResourceValues();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844((uint64_t *)&unk_10096CE70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)(inited + 32) = NSURLContentTypeKey;
  uint64_t v6 = NSURLContentTypeKey;
  sub_1002C89FC(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v0)
  {
    URLResourceValues.contentType.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.fileTypeIdentifier()()
{
  uint64_t v2 = type metadata accessor for URLResourceValues();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844((uint64_t *)&unk_10096CE70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)(inited + 32) = NSURLTypeIdentifierKey;
  uint64_t v7 = NSURLTypeIdentifierKey;
  sub_1002C89FC(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    uint64_t v0 = URLResourceValues.typeIdentifier.getter();
    uint64_t inited = v8;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v9 = v0;
  uint64_t v10 = (void *)inited;
  result.value._object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.fileSize()()
{
  uint64_t v0 = sub_1002C7014((void **)&NSURLFileSizeKey, (uint64_t (*)(uint64_t))&URLResourceValues.fileSize.getter);
  result.value = (Swift::Int)v0;
  result.is_nil = v1;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.isDirectory()()
{
  uint64_t v1 = type metadata accessor for URLResourceValues();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844((uint64_t *)&unk_10096CE70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  uint64_t v6 = NSURLIsDirectoryKey;
  sub_1002C89FC(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    char v8 = URLResourceValues.isDirectory.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    char v7 = v8 & 1;
  }
  return v7 & 1;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.availableStorage()()
{
  uint64_t v0 = sub_1002C7014((void **)&NSURLVolumeAvailableCapacityKey, (uint64_t (*)(uint64_t))&URLResourceValues.volumeAvailableCapacity.getter);
  result.value = (Swift::Int)v0;
  result.is_nil = v1;
  return result;
}

uint64_t (*sub_1002C7014(void **a1, uint64_t (*a2)(uint64_t)))(uint64_t)
{
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844((uint64_t *)&unk_10096CE70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  uint64_t v10 = *a1;
  *(void *)(inited + 32) = *a1;
  id v11 = v10;
  sub_1002C89FC(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  uint64_t v12 = swift_bridgeObjectRelease();
  if (!v2)
  {
    a2 = (uint64_t (*)(uint64_t))a2(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return a2;
}

uint64_t Sequence.batch(size:)(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v5 = (char *)&v24 - v4;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = *(void *)(a2 - 8);
  __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v24 - v14;
  type metadata accessor for Array();
  uint64_t v33 = Array.init()();
  uint64_t v32 = Array.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v30, a2);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v29 = v15;
  uint64_t v30 = v13;
  uint64_t v27 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v17 = v25;
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v18(v9, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v20(v5, v9, AssociatedTypeWitness);
    while (1)
    {
      Array.append(_:)();
      uint64_t v21 = v32;
      swift_bridgeObjectRetain();
      uint64_t v22 = Array.count.getter();
      swift_bridgeObjectRelease();
      if (v22 > v28)
      {
        uint64_t v31 = v21;
        type metadata accessor for Array();
        swift_bridgeObjectRetain();
        Array.append(_:)();
        Array.removeAll(keepingCapacity:)(0);
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v18(v9, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      v20(v5, v9, AssociatedTypeWitness);
    }
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v30);
  uint64_t v19 = v32;
  uint64_t v31 = v32;
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = v19;
    type metadata accessor for Array();
    Array.append(_:)();
  }
  return v33;
}

uint64_t sub_1002C75B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100482D64(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1002C7634(v6);
  return specialized ContiguousArray._endMutation()();
}

void sub_1002C7634(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if (v3) {
      sub_1002C7E84(0, v3, 1, a1);
    }
    return;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_152;
  }
  Swift::Int v112 = v4;
  uint64_t v109 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v122 = (uint64_t)&_swiftEmptyArrayStorage;
    uint64_t v120 = (char *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_104:
      if (v13 >= 2)
      {
        uint64_t v103 = *v109;
        do
        {
          unint64_t v104 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_133;
          }
          if (!v103) {
            goto LABEL_149;
          }
          uint64_t v105 = *(void *)&v8[16 * v104 + 32];
          uint64_t v106 = *(void *)&v8[16 * v13 + 24];
          sub_1002C7FE4((id *)(v103 + 8 * v105), (id *)(v103 + 8 * *(void *)&v8[16 * v13 + 16]), v103 + 8 * v106, v120);
          if (v1) {
            break;
          }
          if (v106 < v105) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_100482474((uint64_t)v8);
          }
          if (v104 >= *((void *)v8 + 2)) {
            goto LABEL_135;
          }
          uint64_t v107 = &v8[16 * v104 + 32];
          *(void *)uint64_t v107 = v105;
          *((void *)v107 + 1) = v106;
          unint64_t v108 = *((void *)v8 + 2);
          if (v13 > v108) {
            goto LABEL_136;
          }
          memmove(&v8[16 * v13 + 16], &v8[16 * v13 + 32], 16 * (v108 - v13));
          *((void *)v8 + 2) = v108 - 1;
          unint64_t v13 = v108 - 1;
        }
        while (v108 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_10000B740(0, &qword_10096D4E8);
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    uint64_t v120 = (char *)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v122 = v7;
  }
  Swift::Int v9 = v3;
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v110 = *a1 - 8;
  uint64_t v111 = *a1 + 16;
  uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v12 = &selRef_awdlStart;
  uint64_t v121 = *a1;
  Swift::Int v117 = v9;
  while (1)
  {
    Swift::Int v14 = v10++;
    uint64_t v115 = v8;
    Swift::Int v116 = v14;
    if (v10 < v9)
    {
      uint64_t v15 = *(void **)(v11 + 8 * v10);
      uint64_t v16 = *(void **)(v11 + 8 * v14);
      id v17 = v15;
      id v18 = v16;
      id v19 = [v17 v12[53]];
      if (!v19) {
        goto LABEL_150;
      }
      uint64_t v20 = v19;
      id v118 = [v19 rssiFloor];

      id v21 = [v18 v12[53]];
      if (!v21) {
        goto LABEL_151;
      }
      uint64_t v22 = v21;
      id v113 = [v21 rssiFloor];

      Swift::Int v14 = v116;
      Swift::Int v10 = v116 + 2;
      if (v116 + 2 < v117)
      {
        uint64_t v23 = (id *)(v111 + 8 * v116);
        while (1)
        {
          uint64_t v24 = *(v23 - 1);
          id v25 = *v23;
          id v26 = v24;
          id v27 = [v25 v12[53]];
          if (!v27) {
            goto LABEL_146;
          }
          uint64_t v28 = v27;
          id v29 = [v27 rssiFloor];

          id v30 = [v26 v12[53]];
          if (!v30) {
            goto LABEL_147;
          }
          uint64_t v31 = v30;
          id v32 = [v30 rssiFloor];

          if ((uint64_t)v118 < (uint64_t)v113 == (uint64_t)v29 >= (uint64_t)v32) {
            break;
          }
          ++v10;
          ++v23;
          uint64_t v8 = v115;
          uint64_t v12 = &selRef_awdlStart;
          if (v117 == v10)
          {
            Swift::Int v10 = v117;
            goto LABEL_26;
          }
        }
        uint64_t v8 = v115;
        uint64_t v12 = &selRef_awdlStart;
LABEL_26:
        Swift::Int v14 = v116;
      }
      uint64_t v11 = v121;
      if ((uint64_t)v118 < (uint64_t)v113)
      {
        if (v10 < v14) {
          goto LABEL_139;
        }
        if (v14 < v10)
        {
          uint64_t v33 = (uint64_t *)(v110 + 8 * v10);
          Swift::Int v34 = v10;
          Swift::Int v35 = v14;
          int v36 = (uint64_t *)(v121 + 8 * v14);
          do
          {
            if (v35 != --v34)
            {
              if (!v121) {
                goto LABEL_148;
              }
              uint64_t v37 = *v36;
              *int v36 = *v33;
              uint64_t *v33 = v37;
            }
            ++v35;
            --v33;
            ++v36;
          }
          while (v35 < v34);
        }
      }
    }
    if (v10 < v117)
    {
      if (__OFSUB__(v10, v14)) {
        goto LABEL_137;
      }
      if (v10 - v14 < v112) {
        break;
      }
    }
LABEL_55:
    if (v10 < v14) {
      goto LABEL_132;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = sub_100481FEC(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    unint64_t v53 = *((void *)v8 + 2);
    unint64_t v52 = *((void *)v8 + 3);
    unint64_t v13 = v53 + 1;
    uint64_t v11 = v121;
    if (v53 >= v52 >> 1)
    {
      uint64_t v102 = sub_100481FEC((char *)(v52 > 1), v53 + 1, 1, v8);
      uint64_t v11 = v121;
      uint64_t v8 = v102;
    }
    *((void *)v8 + 2) = v13;
    uint64_t v54 = v8 + 32;
    id v55 = &v8[16 * v53 + 32];
    *(void *)id v55 = v14;
    *((void *)v55 + 1) = v10;
    if (v53)
    {
      while (1)
      {
        unint64_t v56 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v61 = &v54[16 * v13];
          uint64_t v62 = *((void *)v61 - 8);
          uint64_t v63 = *((void *)v61 - 7);
          BOOL v67 = __OFSUB__(v63, v62);
          uint64_t v64 = v63 - v62;
          if (v67) {
            goto LABEL_121;
          }
          uint64_t v66 = *((void *)v61 - 6);
          uint64_t v65 = *((void *)v61 - 5);
          BOOL v67 = __OFSUB__(v65, v66);
          uint64_t v59 = v65 - v66;
          char v60 = v67;
          if (v67) {
            goto LABEL_122;
          }
          unint64_t v68 = v13 - 2;
          uint64_t v69 = &v54[16 * v13 - 32];
          uint64_t v71 = *(void *)v69;
          uint64_t v70 = *((void *)v69 + 1);
          BOOL v67 = __OFSUB__(v70, v71);
          uint64_t v72 = v70 - v71;
          if (v67) {
            goto LABEL_124;
          }
          BOOL v67 = __OFADD__(v59, v72);
          uint64_t v73 = v59 + v72;
          if (v67) {
            goto LABEL_127;
          }
          if (v73 >= v64)
          {
            uint64_t v91 = &v54[16 * v56];
            uint64_t v93 = *(void *)v91;
            uint64_t v92 = *((void *)v91 + 1);
            BOOL v67 = __OFSUB__(v92, v93);
            uint64_t v94 = v92 - v93;
            if (v67) {
              goto LABEL_131;
            }
            BOOL v84 = v59 < v94;
            goto LABEL_92;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v85 = *((void *)v8 + 4);
            uint64_t v86 = *((void *)v8 + 5);
            BOOL v67 = __OFSUB__(v86, v85);
            uint64_t v78 = v86 - v85;
            char v79 = v67;
            goto LABEL_86;
          }
          uint64_t v58 = *((void *)v8 + 4);
          uint64_t v57 = *((void *)v8 + 5);
          BOOL v67 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          char v60 = v67;
        }
        if (v60) {
          goto LABEL_123;
        }
        unint64_t v68 = v13 - 2;
        uint64_t v74 = &v54[16 * v13 - 32];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v77 = __OFSUB__(v75, v76);
        uint64_t v78 = v75 - v76;
        char v79 = v77;
        if (v77) {
          goto LABEL_126;
        }
        int v80 = &v54[16 * v56];
        uint64_t v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        BOOL v67 = __OFSUB__(v81, v82);
        uint64_t v83 = v81 - v82;
        if (v67) {
          goto LABEL_129;
        }
        if (__OFADD__(v78, v83)) {
          goto LABEL_130;
        }
        if (v78 + v83 >= v59)
        {
          BOOL v84 = v59 < v83;
LABEL_92:
          if (v84) {
            unint64_t v56 = v68;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v79) {
          goto LABEL_125;
        }
        uint64_t v87 = &v54[16 * v56];
        uint64_t v89 = *(void *)v87;
        uint64_t v88 = *((void *)v87 + 1);
        BOOL v67 = __OFSUB__(v88, v89);
        uint64_t v90 = v88 - v89;
        if (v67) {
          goto LABEL_128;
        }
        if (v90 < v78) {
          goto LABEL_14;
        }
LABEL_94:
        unint64_t v95 = v56 - 1;
        if (v56 - 1 >= v13)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v11) {
          goto LABEL_145;
        }
        uint64_t v96 = v8;
        uint64_t v97 = &v54[16 * v95];
        uint64_t v98 = *(void *)v97;
        uint64_t v99 = &v54[16 * v56];
        uint64_t v100 = *((void *)v99 + 1);
        sub_1002C7FE4((id *)(v11 + 8 * *(void *)v97), (id *)(v11 + 8 * *(void *)v99), v11 + 8 * v100, v120);
        if (v1) {
          goto LABEL_115;
        }
        if (v100 < v98) {
          goto LABEL_118;
        }
        if (v56 > *((void *)v96 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v97 = v98;
        *(void *)&v54[16 * v95 + 8] = v100;
        unint64_t v101 = *((void *)v96 + 2);
        if (v56 >= v101) {
          goto LABEL_120;
        }
        uint64_t v8 = v96;
        unint64_t v13 = v101 - 1;
        memmove(&v54[16 * v56], v99 + 16, 16 * (v101 - 1 - v56));
        *((void *)v96 + 2) = v101 - 1;
        uint64_t v11 = v121;
        if (v101 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v9 = v117;
    uint64_t v12 = &selRef_awdlStart;
    if (v10 >= v117) {
      goto LABEL_104;
    }
  }
  if (__OFADD__(v14, v112)) {
    goto LABEL_140;
  }
  Swift::Int v38 = v117;
  if (v14 + v112 < v117) {
    Swift::Int v38 = v14 + v112;
  }
  if (v38 >= v14)
  {
    if (v10 != v38)
    {
      uint64_t v39 = v110 + 8 * v10;
      Swift::Int v114 = v38;
      do
      {
        uint64_t v40 = *(void **)(v11 + 8 * v10);
        Swift::Int v41 = v14;
        uint64_t v119 = v39;
        while (1)
        {
          uint64_t v42 = *(void **)v39;
          id v43 = v40;
          id v44 = v42;
          id v45 = [v43 v12[53]];
          if (!v45) {
            goto LABEL_142;
          }
          uint64_t v46 = v45;
          id v47 = [v45 rssiFloor];

          id v48 = [v44 v12[53]];
          if (!v48) {
            goto LABEL_143;
          }
          uint64_t v49 = v48;
          id v50 = [v48 rssiFloor];

          if ((uint64_t)v47 >= (uint64_t)v50) {
            break;
          }
          uint64_t v11 = v121;
          if (!v121) {
            goto LABEL_144;
          }
          uint64_t v51 = *(void **)v39;
          uint64_t v40 = *(void **)(v39 + 8);
          *(void *)uint64_t v39 = v40;
          *(void *)(v39 + 8) = v51;
          v39 -= 8;
          ++v41;
          uint64_t v12 = &selRef_awdlStart;
          if (v10 == v41) {
            goto LABEL_46;
          }
        }
        uint64_t v11 = v121;
        uint64_t v12 = &selRef_awdlStart;
LABEL_46:
        ++v10;
        uint64_t v39 = v119 + 8;
        Swift::Int v14 = v116;
      }
      while (v10 != v114);
      Swift::Int v10 = v114;
      uint64_t v8 = v115;
    }
    goto LABEL_55;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1002C7E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v27 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    uint64_t v6 = &selRef_awdlStart;
    uint64_t v7 = &selRef_perspectiveDataForActivityMoreListEntryForActivityTitle_labelColor_activityCategory_;
LABEL_5:
    uint64_t v8 = *(void **)(v27 + 8 * v4);
    uint64_t v9 = a1;
    uint64_t v26 = v5;
    uint64_t v28 = v4;
    while (1)
    {
      Swift::Int v10 = *(void **)v5;
      id v11 = v8;
      id v12 = v10;
      id v13 = [v11 v6[53]];
      if (!v13) {
        break;
      }
      Swift::Int v14 = v13;
      id v15 = [v13 v7[487]];

      id v16 = [v12 v6[53]];
      if (!v16) {
        goto LABEL_14;
      }
      id v17 = v16;
      id v18 = [v16 v7[487]];
      id v19 = v7;
      uint64_t v20 = v6;
      id v21 = v18;

      BOOL v22 = (uint64_t)v15 < (uint64_t)v21;
      uint64_t v6 = v20;
      uint64_t v7 = v19;
      if (v22)
      {
        if (!v27) {
          goto LABEL_15;
        }
        uint64_t v23 = *(void **)v5;
        uint64_t v8 = *(void **)(v5 + 8);
        *(void *)uint64_t v5 = v8;
        *(void *)(v5 + 8) = v23;
        v5 -= 8;
        if (v28 != ++v9) {
          continue;
        }
      }
      uint64_t v4 = v28 + 1;
      uint64_t v5 = v26 + 8;
      if (v28 + 1 == a2) {
        return;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

uint64_t sub_1002C7FE4(id *a1, id *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  uint64_t v5 = (char *)__src - (char *)a1;
  uint64_t v6 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v6 = (char *)__src - (char *)a1;
  }
  uint64_t v7 = v6 >> 3;
  uint64_t v8 = a3 - (void)__src;
  uint64_t v9 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v9 = a3 - (void)__src;
  }
  uint64_t v10 = v9 >> 3;
  unint64_t v53 = a1;
  unint64_t v52 = a4;
  if (v7 < v9 >> 3)
  {
    if (v5 < -7) {
      goto LABEL_56;
    }
    if (a4 != (char *)a1 || &a1[v7] <= (id *)a4) {
      memmove(a4, a1, 8 * v7);
    }
    id v47 = &a4[8 * v7];
    uint64_t v51 = v47;
    if ((unint64_t)v4 < a3 && v5 >= 8)
    {
      id v11 = (void **)a4;
      id v12 = &selRef_perspectiveDataForActivityMoreListEntryForActivityTitle_labelColor_activityCategory_;
      id v13 = a1;
      while (1)
      {
        Swift::Int v14 = v4;
        id v15 = v11;
        id v16 = *v11;
        id v17 = *v4;
        id v18 = v16;
        id v19 = [v17 bleDevice];
        if (!v19) {
          goto LABEL_54;
        }
        uint64_t v20 = v19;
        id v21 = [v19 v12[487]];

        id v22 = [v18 bleDevice];
        if (!v22) {
          goto LABEL_55;
        }
        uint64_t v23 = v22;
        id v24 = [v22 v12[487]];

        if ((uint64_t)v21 >= (uint64_t)v24)
        {
          if (v13 != v15) {
            *id v13 = *v15;
          }
          id v11 = v15 + 1;
          unint64_t v52 = (char *)(v15 + 1);
          id v25 = v14;
        }
        else
        {
          id v25 = v14 + 1;
          id v11 = v15;
          if (v13 >= v14 && v13 < v25)
          {
            id v12 = &selRef_perspectiveDataForActivityMoreListEntryForActivityTitle_labelColor_activityCategory_;
            if (v13 != v14) {
              *id v13 = *v14;
            }
            goto LABEL_25;
          }
          *id v13 = *v14;
        }
        id v12 = &selRef_perspectiveDataForActivityMoreListEntryForActivityTitle_labelColor_activityCategory_;
LABEL_25:
        ++v13;
        if (v11 < (void **)v47)
        {
          uint64_t v4 = v25;
          if ((unint64_t)v25 < a3) {
            continue;
          }
        }
        unint64_t v53 = v13;
        break;
      }
    }
LABEL_51:
    sub_1004821B8((void **)&v53, (const void **)&v52, &v51);
    return 1;
  }
  if (v8 < -7) {
    goto LABEL_56;
  }
  if (a4 != (char *)__src || &__src[v10] <= (id *)a4) {
    memmove(a4, __src, 8 * v10);
  }
  uint64_t v26 = &a4[8 * v10];
  uint64_t v51 = v26;
  unint64_t v53 = v4;
  if (a1 >= v4 || v8 < 8) {
    goto LABEL_51;
  }
  uint64_t v27 = (id *)(a3 - 8);
  uint64_t v28 = &selRef_awdlStart;
  id v29 = &selRef_perspectiveDataForActivityMoreListEntryForActivityTitle_labelColor_activityCategory_;
  id v30 = v4;
  while (1)
  {
    unint64_t v48 = (unint64_t)v26;
    id v50 = v4;
    uint64_t v31 = v26 - 8;
    id v32 = *--v30;
    id v33 = *((id *)v26 - 1);
    id v34 = v32;
    id v35 = [v33 v28[53]];
    if (!v35) {
      break;
    }
    int v36 = v35;
    uint64_t v37 = v29;
    id v38 = [v35 v29[487]];

    id v39 = [v34 v28[53]];
    if (!v39) {
      goto LABEL_53;
    }
    uint64_t v40 = v39;
    Swift::Int v41 = v27 + 1;
    id v42 = [v39 v37[487]];

    if ((uint64_t)v38 >= (uint64_t)v42)
    {
      uint64_t v51 = v31;
      id v30 = v50;
      if ((unint64_t)v41 >= v48 && (unint64_t)v27 < v48)
      {
        id v29 = &selRef_perspectiveDataForActivityMoreListEntryForActivityTitle_labelColor_activityCategory_;
        if (v41 != (id *)v48) {
          *uint64_t v27 = *(id *)v31;
        }
        uint64_t v26 = v31;
        id v43 = a4;
        uint64_t v28 = &selRef_awdlStart;
        goto LABEL_49;
      }
      *uint64_t v27 = *(id *)v31;
      uint64_t v26 = v31;
    }
    else
    {
      uint64_t v26 = (char *)v48;
      if (v41 != v50 || v27 >= v50) {
        *uint64_t v27 = *v30;
      }
      unint64_t v53 = v30;
    }
    id v43 = a4;
    uint64_t v28 = &selRef_awdlStart;
    id v29 = &selRef_perspectiveDataForActivityMoreListEntryForActivityTitle_labelColor_activityCategory_;
LABEL_49:
    if (v30 > a1)
    {
      --v27;
      uint64_t v4 = v30;
      if (v26 > v43) {
        continue;
      }
    }
    goto LABEL_51;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002C83D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for B389PresentationConfig.Mode(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (void **)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v34 - v14;
  uint64_t v16 = sub_10000A844(&qword_10096D410);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  id v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = &v19[*(int *)(v17 + 56)];
  sub_1002CE4B4(a1, (uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
  sub_1002CE4B4(a2, (uint64_t)v20, type metadata accessor for B389PresentationConfig.Mode);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1002CE4B4((uint64_t)v19, (uint64_t)v15, type metadata accessor for B389PresentationConfig.Mode);
    if (!swift_getEnumCaseMultiPayload())
    {
      char v29 = *v15 ^ *v20;
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1002CE4B4((uint64_t)v19, (uint64_t)v10, type metadata accessor for B389PresentationConfig.Mode);
    uint64_t v31 = *v10;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      id v32 = *(void **)v20;
      sub_10000B740(0, (unint64_t *)&qword_10096D418);
      char v30 = static NSObject.== infix(_:_:)();

      sub_1002CE51C((uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
      return v30 & 1;
    }

    goto LABEL_13;
  }
  sub_1002CE4B4((uint64_t)v19, (uint64_t)v13, type metadata accessor for B389PresentationConfig.Mode);
  uint64_t v22 = *(int *)(sub_10000A844(&qword_10096D228) + 48);
  char v23 = v13[v22];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
LABEL_13:
    sub_10000A7E8((uint64_t)v19, &qword_10096D410);
LABEL_14:
    char v30 = 0;
    return v30 & 1;
  }
  char v24 = v20[v22];
  uint64_t v26 = v34;
  uint64_t v25 = v35;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v6, v20, v35);
  char v27 = static UUID.== infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
  v28(v6, v25);
  v28(v13, v25);
  if ((v27 & 1) == 0)
  {
    sub_1002CE51C((uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
    goto LABEL_14;
  }
  char v29 = v23 ^ v24;
LABEL_8:
  sub_1002CE51C((uint64_t)v19, type metadata accessor for B389PresentationConfig.Mode);
  char v30 = v29 ^ 1;
  return v30 & 1;
}

BOOL sub_1002C87BC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v5 & 1) != 0))
  {
    uint64_t v7 = (int *)type metadata accessor for B389PresentationConfig(0);
    if ((sub_1002C83D4(a1 + v7[6], a2 + v7[6]) & 1) == 0
      || *(_DWORD *)(a1 + v7[7]) != *(_DWORD *)(a2 + v7[7])
      || *(unsigned __int8 *)(a1 + v7[8]) != *(unsigned __int8 *)(a2 + v7[8])
      || *(unsigned __int8 *)(a1 + v7[9]) != *(unsigned __int8 *)(a2 + v7[9])
      || *(unsigned __int8 *)(a1 + v7[10]) != *(unsigned __int8 *)(a2 + v7[10])
      || *(void *)(a1 + v7[11]) != *(void *)(a2 + v7[11]))
    {
      return 0;
    }
    uint64_t v8 = v7[12];
    uint64_t v9 = (double *)(a1 + v8);
    char v10 = *(unsigned char *)(a1 + v8 + 8);
    uint64_t v11 = (double *)(a2 + v8);
    int v12 = *(unsigned __int8 *)(a2 + v8 + 8);
    if (v10)
    {
      if (!v12) {
        return 0;
      }
    }
    else
    {
      if (*v9 != *v11) {
        LOBYTE(v12) = 1;
      }
      if (v12) {
        return 0;
      }
    }
    uint64_t v13 = v7[13];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = *(void *)(a1 + v13 + 8);
    uint64_t v16 = (void *)(a2 + v13);
    uint64_t v17 = v16[1];
    if (v15)
    {
      if (!v17) {
        return 0;
      }
      if (*v14 != *v16 || v15 != v17)
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v18 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
    uint64_t v19 = v7[14];
    uint64_t v20 = a1 + v19;
    uint64_t v21 = *(void *)(a1 + v19);
    unint64_t v22 = *(void *)(v20 + 8);
    char v23 = (uint64_t *)(a2 + v19);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    if (v22 >> 60 == 15)
    {
      if (v25 >> 60 == 15) {
        return 1;
      }
      goto LABEL_30;
    }
    if (v25 >> 60 == 15)
    {
LABEL_30:
      sub_100278C78(v21, *(void *)(v20 + 8));
      sub_100278C78(v24, v25);
      sub_100250CB0(v21, v22);
      sub_100250CB0(v24, v25);
      return 0;
    }
    sub_100278C78(v21, *(void *)(v20 + 8));
    sub_100278C78(v24, v25);
    char v26 = sub_10031C480(v21, v22, v24, v25);
    sub_100250CB0(v24, v25);
    sub_100250CB0(v21, v22);
    return (v26 & 1) != 0;
  }
  return result;
}

void *sub_1002C89FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000A844(qword_10096D510);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      BOOL result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        BOOL result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          BOOL result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v11) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1002C8C2C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000A844(&qword_10096D470);
  uint64_t v6 = __chkstk_darwin(v5);
  Swift::Int v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_34;
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if ((unint64_t)(v9 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_33;
      }
      if ((v9 & 0x1FFFFFFFFFFFFFFFLL) != 2)
      {
LABEL_10:
        uint64_t v14 = sub_10000A844(&qword_10096D498);
        sub_1002AE308((unint64_t *)&unk_10096D4A0, &qword_10096D498);
        swift_allocError();
        swift_willThrow();
        return v14;
      }
      v30[1] = v2;
      uint64_t v31 = v6;
      sub_10025ADCC(a1, a2);
      int v36 = (int8x16_t *)_swiftEmptyArrayStorage;
      sub_100255740(0, 0, 0);
      uint64_t v13 = v36;
      if (a2 >> 62)
      {
        sub_10025ADCC(a1, a2);
        sub_10025ADCC(a1, a2);
      }
      Data.Iterator.init(_:at:)();
      uint64_t v32 = a1;
      unint64_t v33 = a2;
      sub_100250CC4(a1, a2);
      type metadata accessor for Data.Iterator();
      sub_1002CC248((unint64_t *)&unk_10096B460, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v15 = 0;
      if ((v35 & 1) == 0)
      {
        uint64_t v15 = 0;
        do
        {
          if (v15 == 0x2000)
          {
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            JUMPOUT(0x1002C8FECLL);
          }
          if ((v15 & 0x1FFE) != 0) {
            __int16 v18 = 0;
          }
          else {
            __int16 v18 = v34 << (8 * (v15 & 1));
          }
          int v36 = v13;
          unint64_t v20 = v13[1].u64[0];
          unint64_t v19 = v13[1].u64[1];
          if (v20 >= v19 >> 1)
          {
            sub_100255740(v19 > 1, v20 + 1, 1);
            uint64_t v13 = v36;
          }
          v13[1].i64[0] = v20 + 1;
          v13[2].i16[v20] = v18;
          dispatch thunk of IteratorProtocol.next()();
          ++v15;
        }
        while (v35 != 1);
      }
      *(void *)&v8[*(int *)(v31 + 36)] = v15;
      sub_10000A7E8((uint64_t)v8, &qword_10096D470);
      sub_100250CC4(v32, v33);
      unint64_t v16 = v36[1].u64[0];
      if (!v16)
      {
        uint64_t v14 = 0;
        goto LABEL_30;
      }
      if (v16 < 0x10)
      {
        uint64_t v17 = 0;
        LODWORD(v14) = 0;
LABEL_28:
        unint64_t v26 = v16 - v17;
        char v27 = (unsigned __int16 *)&v36[2] + v17;
        do
        {
          int v28 = *v27++;
          uint64_t v14 = v28 | v14;
          --v26;
        }
        while (v26);
        goto LABEL_30;
      }
      uint64_t v17 = v16 & 0x7FFFFFFFFFFFFFF0;
      uint64_t v21 = v36 + 3;
      int8x16_t v22 = 0uLL;
      uint64_t v23 = v16 & 0x7FFFFFFFFFFFFFF0;
      int8x16_t v24 = 0uLL;
      do
      {
        int8x16_t v22 = vorrq_s8(v21[-1], v22);
        int8x16_t v24 = vorrq_s8(*v21, v24);
        v21 += 2;
        v23 -= 16;
      }
      while (v23);
      int8x16_t v25 = vorrq_s8(v24, v22);
      *(int8x8_t *)v25.i8 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
      uint64_t v14 = v25.i32[0] | v25.i32[1] | ((unint64_t)(v25.i64[0] | HIDWORD(v25.i64[0])) >> 16);
      if (v16 != v17) {
        goto LABEL_28;
      }
LABEL_30:
      swift_release();
      return v14;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_35;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t _s16DaemoniOSLibrary10SDRunStateO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008D2778, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_1002C9048(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000A844(&qword_10097D410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C90B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1002C91E4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))sub_100630300);
}

uint64_t sub_1002C90C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1002C91E4(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t))sub_100630B64);
}

void sub_1002C90E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v15 = a1;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  char v14 = sub_10059634C(&v15, v13);
  swift_endAccess();
  if (v14) {
    sub_100632A80(a5, a6, a7, a8);
  }
}

uint64_t sub_1002C91CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1002C91E4(a1, a2, a3, a4, a5, sub_100637FE4);
}

uint64_t sub_1002C91E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v12 = a1;
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  char v10 = sub_10059634C(&v12, v9);
  uint64_t result = swift_endAccess();
  if (v10) {
    return a6(a5);
  }
  return result;
}

uint64_t sub_1002C92B8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000A844(&qword_10096D470);
  uint64_t v6 = __chkstk_darwin(v5);
  int v36 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_34;
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      if ((unint64_t)(v8 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_33;
      }
      if ((v8 & 0x1FFFFFFFFFFFFFFFLL) != 4)
      {
LABEL_10:
        uint64_t v13 = sub_10000A844(&qword_10096D4D8);
        sub_1002AE308(&qword_10096D4E0, &qword_10096D4D8);
        swift_allocError();
        swift_willThrow();
        return v13;
      }
      uint64_t v32 = v2;
      uint64_t v33 = v6;
      sub_10025ADCC(a1, a2);
      id v39 = (int8x16_t *)_swiftEmptyArrayStorage;
      sub_1002554B4(0, 0, 0);
      uint64_t v12 = v39;
      if (a2 >> 62)
      {
        sub_10025ADCC(a1, a2);
        sub_10025ADCC(a1, a2);
      }
      Data.Iterator.init(_:at:)();
      uint64_t v34 = a1;
      unint64_t v35 = a2;
      sub_100250CC4(a1, a2);
      type metadata accessor for Data.Iterator();
      sub_1002CC248((unint64_t *)&unk_10096B460, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v14 = 0;
      if ((v38 & 1) == 0)
      {
        char v18 = 0;
        uint64_t v14 = 0;
        do
        {
          if (v14 == 0x20000000)
          {
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            JUMPOUT(0x1002C9688);
          }
          if ((v14 & 0x1FFFFFFC) != 0) {
            int v19 = 0;
          }
          else {
            int v19 = v37 << (v18 & 0x18);
          }
          id v39 = v12;
          unint64_t v21 = v12[1].u64[0];
          unint64_t v20 = v12[1].u64[1];
          if (v21 >= v20 >> 1)
          {
            sub_1002554B4(v20 > 1, v21 + 1, 1);
            uint64_t v12 = v39;
          }
          v12[1].i64[0] = v21 + 1;
          v12[2].i32[v21] = v19;
          dispatch thunk of IteratorProtocol.next()();
          v18 += 8;
          ++v14;
        }
        while (v38 != 1);
      }
      uint64_t v15 = (uint64_t)v36;
      *(void *)&v36[*(int *)(v33 + 36)] = v14;
      sub_10000A7E8(v15, &qword_10096D470);
      sub_100250CC4(v34, v35);
      unint64_t v16 = v39[1].u64[0];
      if (!v16)
      {
        uint64_t v13 = 0;
        goto LABEL_30;
      }
      if (v16 < 8)
      {
        uint64_t v17 = 0;
        LODWORD(v13) = 0;
LABEL_28:
        unint64_t v28 = v16 - v17;
        BOOL v29 = &v39[2].i32[v17];
        do
        {
          int v30 = *v29++;
          uint64_t v13 = v30 | v13;
          --v28;
        }
        while (v28);
        goto LABEL_30;
      }
      uint64_t v17 = v16 & 0x7FFFFFFFFFFFFFF8;
      int8x16_t v22 = v39 + 3;
      int8x16_t v23 = 0uLL;
      uint64_t v24 = v16 & 0x7FFFFFFFFFFFFFF8;
      int8x16_t v25 = 0uLL;
      do
      {
        int8x16_t v23 = vorrq_s8(v22[-1], v23);
        int8x16_t v25 = vorrq_s8(*v22, v25);
        v22 += 2;
        v24 -= 8;
      }
      while (v24);
      int8x16_t v26 = vorrq_s8(v25, v23);
      int8x8_t v27 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
      uint64_t v13 = (v27.i32[0] | v27.i32[1]);
      if (v16 != v17) {
        goto LABEL_28;
      }
LABEL_30:
      swift_release();
      return v13;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_35;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1002C9698(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000A844(&qword_10096D470);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_34;
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if ((unint64_t)(v9 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_33;
      }
      if ((v9 & 0x1FFFFFFFFFFFFFFFLL) != 8)
      {
LABEL_10:
        uint64_t v14 = sub_10000A844(&qword_10096D478);
        sub_1002AE308((unint64_t *)&qword_10096D480, &qword_10096D478);
        swift_allocError();
        swift_willThrow();
        return v14;
      }
      uint64_t v37 = v6;
      sub_10025ADCC(a1, a2);
      Swift::Int v41 = (int8x16_t *)_swiftEmptyArrayStorage;
      sub_100255720(0, 0, 0);
      uint64_t v13 = v41;
      if (a2 >> 62)
      {
        sub_10025ADCC(a1, a2);
        sub_10025ADCC(a1, a2);
      }
      Data.Iterator.init(_:at:)();
      sub_100250CC4(a1, a2);
      uint64_t v15 = type metadata accessor for Data.Iterator();
      sub_1002CC248((unint64_t *)&unk_10096B460, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
      uint64_t v38 = v15;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v16 = 0;
      if ((v40 & 1) == 0)
      {
        uint64_t v34 = a1;
        unint64_t v35 = a2;
        uint64_t v36 = v2;
        unint64_t v17 = 0;
        uint64_t v18 = 0;
        do
        {
          if (v18 == 0xF000000000000000)
          {
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            JUMPOUT(0x1002C9A70);
          }
          int v19 = v8;
          if (v17 >= 0x40) {
            unint64_t v20 = 0;
          }
          else {
            unint64_t v20 = (unint64_t)v39 << (v17 & 0x38);
          }
          Swift::Int v41 = v13;
          unint64_t v22 = v13[1].u64[0];
          unint64_t v21 = v13[1].u64[1];
          if (v22 >= v21 >> 1)
          {
            sub_100255720(v21 > 1, v22 + 1, 1);
            uint64_t v13 = v41;
          }
          v13[1].i64[0] = v22 + 1;
          v13[2].i64[v22] = v20;
          uint64_t v8 = v19;
          dispatch thunk of IteratorProtocol.next()();
          --v18;
          v17 += 8;
        }
        while (v40 != 1);
        uint64_t v16 = -v18;
        a2 = v35;
        a1 = v34;
      }
      *(void *)&v8[*(int *)(v37 + 36)] = v16;
      sub_10000A7E8((uint64_t)v8, &qword_10096D470);
      sub_100250CC4(a1, a2);
      unint64_t v23 = v41[1].u64[0];
      if (!v23)
      {
        uint64_t v14 = 0;
        goto LABEL_30;
      }
      if (v23 < 4)
      {
        uint64_t v24 = 0;
        uint64_t v14 = 0;
LABEL_28:
        unint64_t v30 = v23 - v24;
        uint64_t v31 = &v41[2].i64[v24];
        do
        {
          uint64_t v32 = *v31++;
          v14 |= v32;
          --v30;
        }
        while (v30);
        goto LABEL_30;
      }
      uint64_t v24 = v23 & 0x7FFFFFFFFFFFFFFCLL;
      int8x16_t v25 = v41 + 3;
      int8x16_t v26 = 0uLL;
      uint64_t v27 = v23 & 0x7FFFFFFFFFFFFFFCLL;
      int8x16_t v28 = 0uLL;
      do
      {
        int8x16_t v26 = vorrq_s8(v25[-1], v26);
        int8x16_t v28 = vorrq_s8(*v25, v28);
        v25 += 2;
        v27 -= 4;
      }
      while (v27);
      int8x16_t v29 = vorrq_s8(v28, v26);
      uint64_t v14 = (uint64_t)vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
      if (v23 != v24) {
        goto LABEL_28;
      }
LABEL_30:
      swift_release();
      return v14;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_35;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_1002C9A80(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((unint64_t)(v5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((v5 & 0x1FFFFFFFFFFFFFFFLL) != 2)
  {
    sub_10000A844(&qword_10096D498);
    sub_1002AE308((unint64_t *)&unk_10096D4A0, &qword_10096D498);
    swift_allocError();
    swift_willThrow();
    return;
  }
  swift_unknownObjectRetain();
  sub_100255740(0, 0, 0);
  if (v4 == a3)
  {
LABEL_16:
    swift_unknownObjectRelease();
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    if (v13)
    {
      if (v13 >= 0x10)
      {
        uint64_t v14 = v13 & 0x7FFFFFFFFFFFFFF0;
        uint64_t v16 = (int8x16_t *)&_swiftEmptyArrayStorage[6];
        int8x16_t v17 = 0uLL;
        uint64_t v18 = v13 & 0x7FFFFFFFFFFFFFF0;
        int8x16_t v19 = 0uLL;
        do
        {
          int8x16_t v17 = vorrq_s8(v16[-1], v17);
          int8x16_t v19 = vorrq_s8(*v16, v19);
          v16 += 2;
          v18 -= 16;
        }
        while (v18);
        int8x16_t v20 = vorrq_s8(v19, v17);
        *(int8x8_t *)v20.i8 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
        int v15 = v20.i32[0] | v20.i32[1] | ((unint64_t)(v20.i64[0] | HIDWORD(v20.i64[0])) >> 16);
        if (v13 == v14) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v14 = 0;
        int v15 = 0;
      }
      unint64_t v21 = v13 - v14;
      unint64_t v22 = (unsigned __int16 *)&_swiftEmptyArrayStorage[4] + v14;
      do
      {
        int v23 = *v22++;
        v15 |= v23;
        --v21;
      }
      while (v21);
    }
LABEL_25:
    swift_release();
    return;
  }
  if (v4 > a3)
  {
    swift_unknownObjectRetain();
    uint64_t v8 = 0;
    uint64_t v9 = a2 + a3;
    while (v8 != 0x2000)
    {
      if ((v8 & 0x1FFE) != 0) {
        __int16 v10 = 0;
      }
      else {
        __int16 v10 = *(unsigned __int8 *)(v9 + v8) << (8 * (v8 & 1));
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_100255740(v11 > 1, v12 + 1, 1);
      }
      ++v8;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      *((_WORD *)&_swiftEmptyArrayStorage[4] + v12) = v10;
      if (v5 == v8)
      {
        swift_unknownObjectRelease();
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_1002C9CCC(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  id v49 = a3;
  uint64_t v60 = a2;
  uint64_t v61 = a1;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v56 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  id v55 = (char *)&v44 - v11;
  uint64_t v12 = sub_10000A844(&qword_10097D410);
  __chkstk_darwin(v12 - 8);
  unint64_t v52 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for DispatchTime();
  uint64_t v46 = *(void *)(v59 - 8);
  uint64_t v14 = __chkstk_darwin(v59);
  unint64_t v53 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v54 = (char *)&v44 - v16;
  uint64_t v48 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v48);
  id v47 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002C9048(a2, v5 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan);
  sub_10000B740(0, (unint64_t *)&qword_10096D4F0);
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1002CC248(&qword_10096D4F8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_10000A844(&qword_10096D500);
  sub_1002AE308(&qword_10096D508, &qword_10096D500);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v22 = v49;
  uint64_t v23 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v24 = v46;
  *(void *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer) = v23;
  aBlock[4] = v50;
  void aBlock[5] = v51;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100296520;
  aBlock[3] = &unk_1008D5880;
  _Block_copy(aBlock);
  uint64_t v62 = &_swiftEmptyArrayStorage;
  sub_1002CC248((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002AE308((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v25 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t v26 = (uint64_t)v52;
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v51 = v25;
  uint64_t v27 = v59;
  OS_dispatch_source.setEventHandler(handler:)();
  swift_unknownObjectRelease();
  sub_1002C9048(v60, v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v27) == 1)
  {
    int8x16_t v28 = v53;
    static DispatchTime.distantFuture.getter();
    sub_10000A7E8(v26, &qword_10097D410);
  }
  else
  {
    int8x16_t v28 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v53, v26, v27);
  }
  sub_1002CC248(&qword_10096CE80, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
  int8x16_t v29 = v61;
  char v30 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v31 = v54;
  if (v30)
  {
    uint64_t v32 = v54;
    uint64_t v33 = v28;
  }
  else
  {
    uint64_t v32 = v54;
    uint64_t v33 = v29;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v32, v33, v27);
  uint64_t v54 = *(char **)(v24 + 8);
  ((void (*)(char *, uint64_t))v54)(v28, v27);
  uint64_t v45 = v6;
  swift_getObjectType();
  uint64_t v35 = v57;
  uint64_t v34 = v58;
  uint64_t v36 = *(void (**)(char *, void, uint64_t))(v57 + 104);
  uint64_t v37 = v55;
  v36(v55, enum case for DispatchTimeInterval.never(_:), v58);
  uint64_t v38 = (char *)v56;
  *unint64_t v56 = 0;
  v36(v38, enum case for DispatchTimeInterval.nanoseconds(_:), v34);
  unsigned __int8 v39 = v31;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  swift_release();
  sub_10000A7E8(v60, &qword_10097D410);
  uint64_t v40 = v59;
  Swift::Int v41 = (void (*)(char *, uint64_t))v54;
  ((void (*)(char *, uint64_t))v54)(v61, v59);
  id v42 = *(void (**)(void *, uint64_t))(v35 + 8);
  v42(v38, v34);
  v42(v37, v34);
  v41(v39, v40);
  return v45;
}

uint64_t sub_1002CA420(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1002CA430(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

unint64_t sub_1002CA444()
{
  unint64_t result = qword_10096CE98;
  if (!qword_10096CE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096CE98);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SDRunState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SDRunState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002CA5F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDRunState()
{
  return &type metadata for SDRunState;
}

uint64_t type metadata accessor for OnceManager()
{
  return self;
}

uint64_t sub_1002CA650()
{
  return type metadata accessor for PushableTimer(0);
}

uint64_t type metadata accessor for PushableTimer(uint64_t a1)
{
  return sub_10000B93C(a1, (uint64_t *)&unk_10096CF90);
}

void sub_1002CA678()
{
  sub_1002CA710();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1002CA710()
{
  if (!qword_10096CFA0)
  {
    type metadata accessor for DispatchTime();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10096CFA0);
    }
  }
}

uint64_t type metadata accessor for SDB389BubbleMonitor()
{
  return self;
}

uint64_t sub_1002CA790()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for InstanceCounter()
{
  return sub_1002CEB48();
}

char *sub_1002CA7EC(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = *a2;
      *(void *)a1 = *a2;
      uint64_t v12 = v11;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = sub_10000A844(&qword_10096D228);
      a1[*(int *)(v9 + 48)] = *((unsigned char *)a2 + *(int *)(v9 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

void sub_1002CA928(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    int v5 = *a1;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = type metadata accessor for UUID();
    unsigned int v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(a1, v3);
  }
}

void **sub_1002CA9CC(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    id v10 = v9;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = sub_10000A844(&qword_10096D228);
    *((unsigned char *)a1 + *(int *)(v8 + 48)) = *((unsigned char *)a2 + *(int *)(v8 + 48));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void **sub_1002CAAC4(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002CE51C((uint64_t)a1, type metadata accessor for B389PresentationConfig.Mode);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = *a2;
      *a1 = *a2;
      id v10 = v9;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = sub_10000A844(&qword_10096D228);
      *((unsigned char *)a1 + *(int *)(v8 + 48)) = *((unsigned char *)a2 + *(int *)(v8 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata accessor for B389PresentationConfig.Mode(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096D2A0);
}

unsigned char *sub_1002CAC00(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = sub_10000A844(&qword_10096D228);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *sub_1002CACD0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002CE51C((uint64_t)a1, type metadata accessor for B389PresentationConfig.Mode);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = sub_10000A844(&qword_10096D228);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1002CADC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1002CADEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1002CAE18()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1002CAE28()
{
  uint64_t v3 = &unk_100771878;
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    unsigned int v4 = &v2;
    int v5 = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1002CAEDC(void *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (void **)((char *)a1 + v8);
    id v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for B389PresentationConfig.Mode(0);
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v16 = *v10;
      *uint64_t v9 = *v10;
      id v17 = v16;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      uint64_t v14 = sub_10000A844(&qword_10096D228);
      *((unsigned char *)v9 + *(int *)(v14 + 48)) = *((unsigned char *)v10 + *(int *)(v14 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    uint64_t v18 = a3[8];
    *(_DWORD *)((char *)v4 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    *((unsigned char *)v4 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v19) = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[12];
    *(void *)((char *)v4 + a3[11]) = *(void *)((char *)a2 + a3[11]);
    unint64_t v21 = (char *)v4 + v20;
    id v22 = (char *)a2 + v20;
    *(void *)unint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = a3[13];
    uint64_t v24 = a3[14];
    uint64_t v25 = (void *)((char *)v4 + v23);
    uint64_t v26 = (void *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    int8x16_t v28 = (char *)v4 + v24;
    int8x16_t v29 = (_OWORD *)((char *)a2 + v24);
    unint64_t v30 = *(void *)((char *)a2 + v24 + 8);
    swift_bridgeObjectRetain();
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)int8x16_t v28 = *v29;
    }
    else
    {
      uint64_t v31 = *(void *)v29;
      sub_10025ADCC(v31, v30);
      *(void *)int8x16_t v28 = v31;
      *((void *)v28 + 1) = v30;
    }
  }
  return v4;
}

uint64_t sub_1002CB100(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unsigned int v4 = (id *)(a1 + *(int *)(a2 + 24));
  type metadata accessor for B389PresentationConfig.Mode(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(id *, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 56));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = *v8;
    return sub_100250CC4(v10, v9);
  }
  return result;
}

uint64_t sub_1002CB1F0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void **)(a1 + v7);
  unint64_t v9 = (void **)(a2 + v7);
  uint64_t v10 = type metadata accessor for B389PresentationConfig.Mode(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v14 = *v9;
    *uint64_t v8 = *v9;
    id v15 = v14;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
    uint64_t v13 = sub_10000A844(&qword_10096D228);
    *((unsigned char *)v8 + *(int *)(v13 + 48)) = *((unsigned char *)v9 + *(int *)(v13 + 48));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v16 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  uint64_t v21 = a3[13];
  uint64_t v22 = a3[14];
  uint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = a1 + v22;
  uint64_t v27 = (_OWORD *)(a2 + v22);
  unint64_t v28 = *(void *)(a2 + v22 + 8);
  swift_bridgeObjectRetain();
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v26 = *v27;
  }
  else
  {
    uint64_t v29 = *(void *)v27;
    sub_10025ADCC(v29, v28);
    *(void *)uint64_t v26 = v29;
    *(void *)(v26 + 8) = v28;
  }
  return a1;
}

uint64_t sub_1002CB3C4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[6];
    uint64_t v7 = (void **)(a1 + v6);
    uint64_t v8 = (void **)(a2 + v6);
    sub_1002CE51C(a1 + v6, type metadata accessor for B389PresentationConfig.Mode);
    uint64_t v9 = type metadata accessor for B389PresentationConfig.Mode(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = *v8;
      *uint64_t v7 = *v8;
      id v14 = v13;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
      uint64_t v12 = sub_10000A844(&qword_10096D228);
      *((unsigned char *)v7 + *(int *)(v12 + 48)) = *((unsigned char *)v8 + *(int *)(v12 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v15 = a3[12];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(unsigned char *)(v16 + 8) = *((unsigned char *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[13];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[14];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = *(void *)(a2 + v22 + 8);
  if (*(void *)(a1 + v22 + 8) >> 60 != 15)
  {
    if (v25 >> 60 != 15)
    {
      uint64_t v27 = *v24;
      sub_10025ADCC(v27, v25);
      uint64_t v28 = *v23;
      unint64_t v29 = v23[1];
      *uint64_t v23 = v27;
      v23[1] = v25;
      sub_100250CC4(v28, v29);
      return a1;
    }
    sub_10026F904((uint64_t)v23);
    goto LABEL_12;
  }
  if (v25 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    return a1;
  }
  uint64_t v26 = *v24;
  sub_10025ADCC(v26, v25);
  *uint64_t v23 = v26;
  v23[1] = v25;
  return a1;
}

uint64_t sub_1002CB62C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (unsigned char *)(a1 + v6);
  uint64_t v8 = (unsigned char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for B389PresentationConfig.Mode(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    uint64_t v11 = sub_10000A844(&qword_10096D228);
    v7[*(int *)(v11 + 48)] = v8[*(int *)(v11 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v12 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  return a1;
}

uint64_t sub_1002CB78C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = a3[6];
    uint64_t v8 = (unsigned char *)(a1 + v7);
    uint64_t v9 = (unsigned char *)(a2 + v7);
    sub_1002CE51C(a1 + v7, type metadata accessor for B389PresentationConfig.Mode);
    uint64_t v10 = type metadata accessor for B389PresentationConfig.Mode(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      uint64_t v12 = sub_10000A844(&qword_10096D228);
      v8[*(int *)(v12 + 48)] = v9[*(int *)(v12 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v13 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = a3[13];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[14];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  unint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a1 + v23 + 8);
  if (v26 >> 60 != 15)
  {
    unint64_t v27 = v25[1];
    if (v27 >> 60 != 15)
    {
      uint64_t v28 = *v24;
      *uint64_t v24 = *v25;
      v24[1] = v27;
      sub_100250CC4(v28, v26);
      return a1;
    }
    sub_10026F904((uint64_t)v24);
  }
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  return a1;
}

uint64_t sub_1002CB970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CB984);
}

uint64_t sub_1002CB984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for B389PresentationConfig.Mode(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002CBA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CBA48);
}

uint64_t sub_1002CBA48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for B389PresentationConfig.Mode(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for B389PresentationConfig(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096D330);
}

uint64_t sub_1002CBB10()
{
  uint64_t result = type metadata accessor for B389PresentationConfig.Mode(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002CBBFC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6580592 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646F43726F6C6F63 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7375655A7369 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x5079726574746162 && a2 == 0xEE0064616F6C7961 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5479726574746162 && a2 == 0xED0000776F4C6F6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6572685469737372 && a2 == 0xED0000646C6F6873 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001007B8270 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6D614E6E65766967 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E69766172676E65 && a2 == 0xED00006174614467)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

unint64_t sub_1002CC0E4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008D2810, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

void sub_1002CC130(unint64_t a1)
{
}

unint64_t sub_1002CC14C()
{
  unint64_t result = qword_10096D3A8;
  if (!qword_10096D3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D3A8);
  }
  return result;
}

unint64_t sub_1002CC1A0()
{
  unint64_t result = qword_10096D3B0;
  if (!qword_10096D3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D3B0);
  }
  return result;
}

unint64_t sub_1002CC1F4()
{
  unint64_t result = qword_10096D3B8;
  if (!qword_10096D3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D3B8);
  }
  return result;
}

uint64_t sub_1002CC248(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002CC290()
{
  unint64_t result = qword_10096D3F0;
  if (!qword_10096D3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D3F0);
  }
  return result;
}

Swift::Int sub_1002CC2E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000A844(&qword_10096D408);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      int v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_1002CC428(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000A844((uint64_t *)&unk_10096B8F0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      sub_1002AF920(v6 + 40 * v4, (uint64_t)v21);
      Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v3 + 40));
      uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
      unint64_t v9 = result & v8;
      unint64_t v10 = (result & (unint64_t)v8) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1 << (result & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          sub_1002AF920(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v20);
          char v13 = static AnyHashable.== infix(_:_:)();
          Swift::Int result = sub_10025B0A8((uint64_t)v20);
          if (v13) {
            break;
          }
          unint64_t v9 = (v9 + 1) & v8;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            goto LABEL_8;
          }
        }
        sub_10025B0A8((uint64_t)v21);
      }
      else
      {
LABEL_8:
        *(void *)(v5 + 8 * v10) = v12 | v11;
        uint64_t v14 = *(void *)(v3 + 48) + 40 * v9;
        long long v15 = v21[0];
        long long v16 = v21[1];
        *(void *)(v14 + 32) = v22;
        *(_OWORD *)uint64_t v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        uint64_t v17 = *(void *)(v3 + 16);
        BOOL v18 = __OFADD__(v17, 1);
        uint64_t v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v19;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_1002CC590(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_10000A844(&qword_10096D4D0);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  int v7 = (char *)(v3 + 7);
  uint64_t v42 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v11 = v9;
      Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
      uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
      unint64_t v14 = v12 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        type metadata accessor for SDAirDropSendConnection(0);
        id v18 = *(id *)(v3[6] + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v7[8 * v15] = v17 | v16;
      *(void *)(v3[6] + 8 * v14) = v11;
      uint64_t v23 = v3[2];
      BOOL v10 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v10) {
        goto LABEL_37;
      }
      v3[2] = v24;
LABEL_12:
      if (v8 == v42) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v41 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v41)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(a1 + 32 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      type metadata accessor for SDAirDropSendConnection(0);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35) {
        goto LABEL_23;
      }
      uint64_t v36 = ~v29;
      unint64_t v30 = (v30 + 1) & v36;
      unint64_t v31 = v30 >> 6;
      uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
      uint64_t v33 = 1 << v30;
      if ((v32 & (1 << v30)) != 0)
      {
        while (1)
        {
          id v37 = *(id *)(v3[6] + 8 * v30);
          char v38 = static NSObject.== infix(_:_:)();

          if (v38) {
            break;
          }
          unint64_t v30 = (v30 + 1) & v36;
          unint64_t v31 = v30 >> 6;
          uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
          uint64_t v33 = 1 << v30;
          if ((v32 & (1 << v30)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v5 = v42;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v5 = v42;
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_24:
    if (++v25 == v5) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void *sub_1002CC8E8(uint64_t a1)
{
  uint64_t v164 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0);
  uint64_t v2 = __chkstk_darwin(v164);
  uint64_t v174 = (uint64_t)&v158 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v158 - v5;
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v169 = (uint64_t)&v158 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v173 = (uint64_t)&v158 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v158 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v172 = (uint64_t)&v158 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v158 - v16);
  uint64_t v18 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0);
  __chkstk_darwin(v18 - 8);
  v170 = (char **)((char *)&v158 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0);
  __chkstk_darwin(v20 - 8);
  uint64_t v165 = (uint64_t)&v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = sub_10000A844((uint64_t *)&unk_10096EE70);
  __chkstk_darwin(v177);
  uint64_t v23 = (char *)&v158 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  v176 = (void **)((char *)&v158 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v179 = (uint64_t *)((char *)&v158 - v29);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char **)((char *)&v158 - v31);
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v175 = (uint64_t)&v158 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  id v37 = (char *)&v158 - v36;
  __chkstk_darwin(v35);
  uint64_t v184 = (uint64_t)&v158 - v38;
  uint64_t v39 = a1;
  uint64_t v40 = *(void *)(a1 + 16);
  if (v40)
  {
    v180 = v17;
    int v168 = v6;
    sub_10000A844(&qword_10096D4B0);
    uint64_t v41 = static _SetStorage.allocate(capacity:)();
    uint64_t v42 = 0;
    uint64_t v178 = v41;
    uint64_t v182 = v41 + 56;
    uint64_t v163 = v39 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    uint64_t v183 = *(void *)(v25 + 72);
    os_log_type_t v167 = v13;
    uint64_t v43 = v177;
    uint64_t v44 = v179;
    uint64_t v166 = v32;
    uint64_t v162 = v40;
    while (1)
    {
      uint64_t v171 = v42;
      sub_1002CE4B4(v163 + v183 * v42, v184, type metadata accessor for SDAirDropDiscoveredEndpoint);
      uint64_t v45 = v178;
      Hasher.init(_seed:)();
      sub_1003156D8();
      Swift::Int v46 = Hasher._finalize()();
      uint64_t v181 = ~(-1 << *(unsigned char *)(v45 + 32));
      unint64_t v47 = v46 & v181;
      unint64_t v48 = (v46 & (unint64_t)v181) >> 6;
      uint64_t v49 = *(void *)(v182 + 8 * v48);
      uint64_t v50 = 1 << (v46 & v181);
      if ((v50 & v49) != 0) {
        break;
      }
LABEL_7:
      *(void *)(v182 + 8 * v48) = v50 | v49;
      sub_1002CE9B4(v184, *(void *)(v45 + 48) + v47 * v183, type metadata accessor for SDAirDropDiscoveredEndpoint);
      uint64_t v51 = *(void *)(v45 + 16);
      BOOL v52 = __OFADD__(v51, 1);
      uint64_t v53 = v51 + 1;
      if (v52)
      {
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
      }
      *(void *)(v45 + 16) = v53;
LABEL_5:
      uint64_t v42 = v171 + 1;
      if (v171 + 1 == v162) {
        return (void *)v178;
      }
    }
    while (1)
    {
      sub_1002CE4B4(*(void *)(v45 + 48) + v47 * v183, (uint64_t)v37, type metadata accessor for SDAirDropDiscoveredEndpoint);
      uint64_t v54 = (void **)&v23[*(int *)(v43 + 48)];
      sub_1002CE4B4((uint64_t)v37, (uint64_t)v23, type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_1002CE4B4(v184, (uint64_t)v54, type metadata accessor for SDAirDropDiscoveredEndpoint);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_1002CE4B4((uint64_t)v23, (uint64_t)v32, type metadata accessor for SDAirDropDiscoveredEndpoint);
          if (swift_getEnumCaseMultiPayload() != 1)
          {
            sub_1002CE51C((uint64_t)v32, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
            goto LABEL_10;
          }
          unint64_t v56 = v170;
          sub_1002CE9B4((uint64_t)v54, (uint64_t)v170, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
          char v57 = sub_10031D658(v32, v56);
          uint64_t v58 = (uint64_t)v56;
          uint64_t v44 = v179;
          sub_1002CE51C(v58, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
          sub_1002CE51C((uint64_t)v32, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
          if (v57) {
            goto LABEL_3;
          }
          goto LABEL_143;
        case 2u:
          sub_1002CE4B4((uint64_t)v23, (uint64_t)v44, type metadata accessor for SDAirDropDiscoveredEndpoint);
          if (swift_getEnumCaseMultiPayload() == 2)
          {
            uint64_t v59 = (uint64_t)v54;
            uint64_t v60 = v180;
            sub_1002CE9B4(v59, (uint64_t)v180, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
            uint64_t v61 = *v44;
            unint64_t v62 = v44[1];
            uint64_t v64 = *v60;
            unint64_t v63 = v60[1];
            uint64_t v65 = 0;
            switch(v62 >> 62)
            {
              case 1uLL:
                LODWORD(v65) = HIDWORD(v61) - v61;
                if (__OFSUB__(HIDWORD(v61), v61)) {
                  goto LABEL_161;
                }
                uint64_t v65 = (int)v65;
                break;
              case 2uLL:
                uint64_t v74 = *(void *)(v61 + 16);
                uint64_t v73 = *(void *)(v61 + 24);
                BOOL v52 = __OFSUB__(v73, v74);
                uint64_t v65 = v73 - v74;
                if (!v52) {
                  break;
                }
                goto LABEL_162;
              case 3uLL:
                break;
              default:
                uint64_t v65 = BYTE6(v62);
                break;
            }
            unint64_t v75 = v63 >> 62;
            switch(v63 >> 62)
            {
              case 1uLL:
                LODWORD(v76) = HIDWORD(v64) - v64;
                if (__OFSUB__(HIDWORD(v64), v64)) {
                  goto LABEL_163;
                }
                uint64_t v76 = (int)v76;
LABEL_36:
                if (v65 == v76)
                {
                  if (v65 >= 1)
                  {
                    switch(v62 >> 62)
                    {
                      case 1uLL:
                        uint64_t v87 = (int)v61;
                        if ((int)v61 > v61 >> 32) {
                          goto LABEL_165;
                        }
                        uint64_t v161 = v60[1];
                        uint64_t v160 = v61;
                        sub_10025ADCC(v61, v62);
                        uint64_t v88 = __DataStorage._bytes.getter();
                        if (v88)
                        {
                          uint64_t v159 = (const void *)v64;
                          uint64_t v89 = v88;
                          uint64_t v90 = __DataStorage._offset.getter();
                          if (__OFSUB__(v87, v90)) {
                            goto LABEL_167;
                          }
                          uint64_t v91 = (const void *)(v89 + v87 - v90);
                          uint64_t v64 = (uint64_t)v159;
                          __DataStorage._length.getter();
                          if (!v75)
                          {
LABEL_83:
                            __s1[0] = v64;
                            LODWORD(__s1[1]) = v161;
                            WORD2(__s1[1]) = WORD2(v161);
                            if (!v91) {
                              goto LABEL_188;
                            }
                            int v96 = memcmp(v91, __s1, BYTE6(v161));
                            goto LABEL_135;
                          }
                        }
                        else
                        {
                          uint64_t v91 = 0;
                          __DataStorage._length.getter();
                          if (!v75) {
                            goto LABEL_83;
                          }
                        }
                        uint64_t v159 = v91;
                        if (v75 == 1)
                        {
                          if (v64 >> 32 < (int)v64) {
                            goto LABEL_176;
                          }
                          uint64_t v158 = (char *)((v64 >> 32) - (int)v64);
                          swift_retain();
                          uint64_t v92 = (char *)__DataStorage._bytes.getter();
                          if (v92)
                          {
                            uint64_t v93 = __DataStorage._offset.getter();
                            if (__OFSUB__((int)v64, v93)) {
                              goto LABEL_183;
                            }
                            v92 += (int)v64 - v93;
                          }
                          uint64_t v94 = __DataStorage._length.getter();
                          uint64_t v95 = (uint64_t)v158;
                          if (v94 < (uint64_t)v158) {
                            uint64_t v95 = v94;
                          }
                          if (!v159) {
                            goto LABEL_185;
                          }
                          if (!v92) {
                            goto LABEL_186;
                          }
                          int v96 = memcmp(v159, v92, v95);
                          sub_100250CC4(v64, v161);
                        }
                        else
                        {
                          uint64_t v161 = *(void *)(v64 + 16);
                          uint64_t v158 = *(char **)(v64 + 24);
                          swift_retain();
                          swift_retain();
                          uint64_t v128 = (char *)__DataStorage._bytes.getter();
                          if (v128)
                          {
                            uint64_t v129 = __DataStorage._offset.getter();
                            unint64_t v130 = v161;
                            if (__OFSUB__(v161, v129)) {
                              goto LABEL_182;
                            }
                            v128 += v161 - v129;
                          }
                          else
                          {
                            unint64_t v130 = v161;
                          }
                          unint64_t v136 = &v158[-v130];
                          if (__OFSUB__(v158, v130)) {
                            goto LABEL_177;
                          }
                          uint64_t v137 = __DataStorage._length.getter();
                          if (v137 >= (uint64_t)v136) {
                            size_t v138 = (size_t)v136;
                          }
                          else {
                            size_t v138 = v137;
                          }
                          if (!v159) {
                            goto LABEL_196;
                          }
                          if (!v128) {
                            goto LABEL_197;
                          }
                          int v96 = memcmp(v159, v128, v138);
                          swift_release();
                          swift_release();
                        }
LABEL_135:
                        uint64_t v105 = v160;
                        unint64_t v106 = v62;
LABEL_136:
                        sub_100250CC4(v105, v106);
LABEL_137:
                        uint64_t v83 = v172;
                        goto LABEL_138;
                      case 2uLL:
                        uint64_t v161 = v60[1];
                        uint64_t v97 = *(void *)(v61 + 16);
                        uint64_t v160 = v61;
                        swift_retain();
                        swift_retain();
                        uint64_t v98 = __DataStorage._bytes.getter();
                        uint64_t v159 = (const void *)(v62 & 0x3FFFFFFFFFFFFFFFLL);
                        if (v98)
                        {
                          uint64_t v99 = v98;
                          uint64_t v100 = __DataStorage._offset.getter();
                          if (__OFSUB__(v97, v100)) {
                            goto LABEL_166;
                          }
                          uint64_t v158 = (char *)(v99 + v97 - v100);
                        }
                        else
                        {
                          uint64_t v158 = 0;
                        }
                        __DataStorage._length.getter();
                        uint64_t v83 = v172;
                        if (!v75)
                        {
                          __s1[0] = v64;
                          LODWORD(__s1[1]) = v161;
                          WORD2(__s1[1]) = WORD2(v161);
                          if (!v158) {
                            goto LABEL_191;
                          }
                          int v96 = memcmp(v158, __s1, BYTE6(v161));
LABEL_125:
                          swift_release();
                          goto LABEL_126;
                        }
                        if (v75 == 1)
                        {
                          if (v64 >> 32 < (int)v64) {
                            goto LABEL_170;
                          }
                          swift_retain();
                          uint64_t v107 = __DataStorage._bytes.getter();
                          if (v107)
                          {
                            uint64_t v108 = v107;
                            uint64_t v109 = __DataStorage._offset.getter();
                            if (__OFSUB__((int)v64, v109)) {
                              goto LABEL_181;
                            }
                            uint64_t v110 = (const void *)(v108 + (int)v64 - v109);
                          }
                          else
                          {
                            uint64_t v110 = 0;
                          }
                          uint64_t v134 = __DataStorage._length.getter();
                          if (v134 >= (v64 >> 32) - (int)v64) {
                            size_t v135 = (v64 >> 32) - (int)v64;
                          }
                          else {
                            size_t v135 = v134;
                          }
                          if (!v158) {
                            goto LABEL_194;
                          }
                          uint64_t v83 = v172;
                          if (!v110) {
                            goto LABEL_195;
                          }
                          int v96 = memcmp(v158, v110, v135);
                          sub_100250CC4(v64, v161);
                          goto LABEL_125;
                        }
                        uint64_t v121 = *(void *)(v64 + 16);
                        uint64_t v122 = *(void *)(v64 + 24);
                        swift_retain();
                        swift_retain();
                        uint64_t v123 = __DataStorage._bytes.getter();
                        if (v123)
                        {
                          uint64_t v124 = v123;
                          uint64_t v125 = __DataStorage._offset.getter();
                          if (__OFSUB__(v121, v125)) {
                            goto LABEL_180;
                          }
                          uint64_t v126 = v122;
                          uint64_t v127 = (const void *)(v124 + v121 - v125);
                        }
                        else
                        {
                          uint64_t v126 = v122;
                          uint64_t v127 = 0;
                        }
                        BOOL v52 = __OFSUB__(v126, v121);
                        int64_t v131 = v126 - v121;
                        uint64_t v83 = v172;
                        if (v52) {
                          goto LABEL_175;
                        }
                        uint64_t v132 = __DataStorage._length.getter();
                        if (v132 >= v131) {
                          size_t v133 = v131;
                        }
                        else {
                          size_t v133 = v132;
                        }
                        if (!v158) {
                          goto LABEL_192;
                        }
                        if (!v127) {
                          goto LABEL_193;
                        }
                        int v96 = memcmp(v158, v127, v133);
                        swift_release();
                        swift_release();
                        swift_release();
LABEL_126:
                        swift_release();
LABEL_138:
                        sub_1002CE4B4((uint64_t)v44, v83, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        BOOL v84 = v44;
                        uint64_t v85 = (uint64_t)v180;
                        uint64_t v86 = (uint64_t)v167;
                        sub_1002CE4B4((uint64_t)v180, (uint64_t)v167, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        if (v96) {
                          goto LABEL_139;
                        }
                        goto LABEL_144;
                      case 3uLL:
                        memset(__s1, 0, 14);
                        uint64_t v83 = v172;
                        if (!v75)
                        {
                          uint64_t __s2 = v64;
                          __int16 v186 = v63;
                          char v187 = BYTE2(v63);
                          char v188 = BYTE3(v63);
                          char v189 = BYTE4(v63);
                          char v190 = BYTE5(v63);
                          int v96 = memcmp(__s1, &__s2, BYTE6(v63));
                          goto LABEL_138;
                        }
                        if (v75 == 1)
                        {
                          if (v64 >> 32 < (int)v64) {
                            goto LABEL_169;
                          }
                          uint64_t v160 = (v64 >> 32) - (int)v64;
                          uint64_t v161 = v63;
                          swift_retain();
                          uint64_t v101 = __DataStorage._bytes.getter();
                          if (!v101) {
                            goto LABEL_187;
                          }
                          uint64_t v80 = v101;
                          uint64_t v102 = __DataStorage._offset.getter();
                          uint64_t v82 = (int)v64 - v102;
                          if (__OFSUB__((int)v64, v102)) {
                            goto LABEL_174;
                          }
LABEL_71:
                          uint64_t v103 = __DataStorage._length.getter();
                          if (v103 >= v160) {
                            size_t v104 = v160;
                          }
                          else {
                            size_t v104 = v103;
                          }
                          int v96 = memcmp(__s1, (const void *)(v80 + v82), v104);
                          uint64_t v105 = v64;
                          unint64_t v106 = v161;
                          goto LABEL_136;
                        }
                        uint64_t v118 = *(void *)(v64 + 16);
                        uint64_t v117 = *(void *)(v64 + 24);
                        swift_retain();
                        swift_retain();
                        id v113 = (char *)__DataStorage._bytes.getter();
                        if (v113)
                        {
                          uint64_t v119 = __DataStorage._offset.getter();
                          if (__OFSUB__(v118, v119)) {
                            goto LABEL_179;
                          }
                          v113 += v118 - v119;
                        }
                        BOOL v52 = __OFSUB__(v117, v118);
                        int64_t v115 = v117 - v118;
                        if (v52) {
                          goto LABEL_172;
                        }
                        uint64_t v116 = __DataStorage._length.getter();
                        if (!v113) {
                          goto LABEL_190;
                        }
LABEL_98:
                        if (v116 >= v115) {
                          size_t v120 = v115;
                        }
                        else {
                          size_t v120 = v116;
                        }
                        int v96 = memcmp(__s1, v113, v120);
                        swift_release();
                        swift_release();
                        goto LABEL_137;
                      default:
                        __s1[0] = *v44;
                        LOWORD(__s1[1]) = v62;
                        BYTE2(__s1[1]) = BYTE2(v62);
                        BYTE3(__s1[1]) = BYTE3(v62);
                        BYTE4(__s1[1]) = BYTE4(v62);
                        BYTE5(__s1[1]) = BYTE5(v62);
                        if (!v75)
                        {
                          uint64_t __s2 = v64;
                          __int16 v186 = v63;
                          char v187 = BYTE2(v63);
                          char v188 = BYTE3(v63);
                          char v189 = BYTE4(v63);
                          char v190 = BYTE5(v63);
                          int v96 = memcmp(__s1, &__s2, BYTE6(v63));
                          goto LABEL_137;
                        }
                        if (v75 == 1)
                        {
                          if (v64 >> 32 < (int)v64) {
                            goto LABEL_168;
                          }
                          uint64_t v160 = (v64 >> 32) - (int)v64;
                          uint64_t v161 = v63;
                          swift_retain();
                          uint64_t v79 = __DataStorage._bytes.getter();
                          if (!v79)
                          {
                            __DataStorage._length.getter();
                            __break(1u);
LABEL_185:
                            __break(1u);
LABEL_186:
                            __break(1u);
LABEL_187:
                            __DataStorage._length.getter();
                            __break(1u);
LABEL_188:
                            __break(1u);
LABEL_189:
                            __break(1u);
LABEL_190:
                            __break(1u);
LABEL_191:
                            __break(1u);
LABEL_192:
                            __break(1u);
LABEL_193:
                            __break(1u);
LABEL_194:
                            __break(1u);
LABEL_195:
                            __break(1u);
LABEL_196:
                            __break(1u);
LABEL_197:
                            __break(1u);
                            JUMPOUT(0x1002CE0A0);
                          }
                          uint64_t v80 = v79;
                          uint64_t v81 = __DataStorage._offset.getter();
                          uint64_t v82 = (int)v64 - v81;
                          if (__OFSUB__((int)v64, v81)) {
                            goto LABEL_173;
                          }
                          goto LABEL_71;
                        }
                        uint64_t v112 = *(void *)(v64 + 16);
                        uint64_t v111 = *(void *)(v64 + 24);
                        swift_retain();
                        swift_retain();
                        id v113 = (char *)__DataStorage._bytes.getter();
                        if (v113)
                        {
                          uint64_t v114 = __DataStorage._offset.getter();
                          if (__OFSUB__(v112, v114)) {
                            goto LABEL_178;
                          }
                          v113 += v112 - v114;
                        }
                        BOOL v52 = __OFSUB__(v111, v112);
                        int64_t v115 = v111 - v112;
                        if (v52) {
                          goto LABEL_171;
                        }
                        uint64_t v116 = __DataStorage._length.getter();
                        if (!v113) {
                          goto LABEL_189;
                        }
                        goto LABEL_98;
                    }
                  }
LABEL_48:
                  uint64_t v83 = v172;
                  sub_1002CE4B4((uint64_t)v44, v172, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  BOOL v84 = v44;
                  uint64_t v85 = (uint64_t)v180;
                  uint64_t v86 = (uint64_t)v167;
                  sub_1002CE4B4((uint64_t)v180, (uint64_t)v167, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
LABEL_144:
                  char v146 = static UUID.== infix(_:_:)();
                  sub_1002CE51C(v86, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  sub_1002CE51C(v83, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  uint64_t v147 = (uint64_t)v84;
                  uint64_t v140 = v173;
                  sub_1002CE4B4(v147, v173, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  uint64_t v141 = v169;
                  sub_1002CE4B4(v85, v169, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  if (v146)
                  {
                    uint64_t v148 = *(int *)(v164 + 28);
                    uint64_t v149 = (void *)(v140 + v148);
                    uint64_t v150 = *(void *)(v140 + v148 + 8);
                    uint64_t v151 = (void *)(v141 + v148);
                    uint64_t v152 = v151[1];
                    if (v150)
                    {
                      uint64_t v142 = (uint64_t)v179;
                      if (v152)
                      {
                        if (*v149 == *v151 && v150 == v152)
                        {
                          swift_bridgeObjectRetain();
                          sub_1002CE51C(v141, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                          sub_1002CE51C(v173, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                          swift_bridgeObjectRelease();
                          goto LABEL_151;
                        }
                        char v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRetain();
                        sub_1002CE51C(v141, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        sub_1002CE51C(v173, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        swift_bridgeObjectRelease();
                        uint64_t v143 = (uint64_t)v168;
                        sub_1002CE4B4(v142, (uint64_t)v168, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        uint64_t v144 = (uint64_t)v180;
                        uint64_t v145 = v174;
                        sub_1002CE4B4((uint64_t)v180, v174, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        if (v153)
                        {
LABEL_155:
                          uint64_t v154 = v164;
                          int v155 = *(unsigned __int8 *)(v143 + *(int *)(v164 + 32));
                          sub_1002CE51C(v143, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                          LODWORD(v154) = *(unsigned __int8 *)(v174 + *(int *)(v154 + 32));
                          sub_1002CE51C(v174, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                          sub_1002CE51C(v144, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                          sub_1002CE51C(v142, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                          BOOL v156 = v155 == v154;
                          uint64_t v44 = (uint64_t *)v142;
                          uint64_t v32 = v166;
                          uint64_t v43 = v177;
                          uint64_t v45 = v178;
                          if (v156)
                          {
LABEL_3:
                            sub_1002CE51C((uint64_t)v23, type metadata accessor for SDAirDropDiscoveredEndpoint);
LABEL_4:
                            sub_1002CE51C((uint64_t)v37, type metadata accessor for SDAirDropDiscoveredEndpoint);
                            sub_1002CE51C(v184, type metadata accessor for SDAirDropDiscoveredEndpoint);
                            goto LABEL_5;
                          }
                          goto LABEL_143;
                        }
LABEL_142:
                        sub_1002CE51C(v145, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        sub_1002CE51C(v143, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        sub_1002CE51C(v144, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        sub_1002CE51C(v142, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        uint64_t v44 = (uint64_t *)v142;
                        uint64_t v32 = v166;
                        uint64_t v43 = v177;
                        uint64_t v45 = v178;
LABEL_143:
                        sub_1002CE51C((uint64_t)v23, type metadata accessor for SDAirDropDiscoveredEndpoint);
                        goto LABEL_11;
                      }
                      swift_bridgeObjectRetain();
                      sub_1002CE51C(v141, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                      sub_1002CE51C(v173, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      sub_1002CE51C(v141, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                      sub_1002CE51C(v140, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                      uint64_t v142 = (uint64_t)v179;
                      if (!v152)
                      {
LABEL_151:
                        uint64_t v143 = (uint64_t)v168;
                        sub_1002CE4B4(v142, (uint64_t)v168, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        uint64_t v144 = (uint64_t)v180;
                        sub_1002CE4B4((uint64_t)v180, v174, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                        goto LABEL_155;
                      }
                    }
                    swift_bridgeObjectRelease();
LABEL_141:
                    uint64_t v143 = (uint64_t)v168;
                    sub_1002CE4B4(v142, (uint64_t)v168, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                    uint64_t v144 = (uint64_t)v180;
                    uint64_t v145 = v174;
                    sub_1002CE4B4((uint64_t)v180, v174, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                    goto LABEL_142;
                  }
                }
                else
                {
LABEL_47:
                  uint64_t v83 = v172;
                  sub_1002CE4B4((uint64_t)v44, v172, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  BOOL v84 = v44;
                  uint64_t v85 = (uint64_t)v180;
                  uint64_t v86 = (uint64_t)v167;
                  sub_1002CE4B4((uint64_t)v180, (uint64_t)v167, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
LABEL_139:
                  sub_1002CE51C(v86, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  sub_1002CE51C(v83, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  uint64_t v139 = (uint64_t)v84;
                  uint64_t v140 = v173;
                  sub_1002CE4B4(v139, v173, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                  uint64_t v141 = v169;
                  sub_1002CE4B4(v85, v169, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                }
                sub_1002CE51C(v141, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                sub_1002CE51C(v140, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
                uint64_t v142 = (uint64_t)v179;
                goto LABEL_141;
              case 2uLL:
                uint64_t v78 = *(void *)(v64 + 16);
                uint64_t v77 = *(void *)(v64 + 24);
                BOOL v52 = __OFSUB__(v77, v78);
                uint64_t v76 = v77 - v78;
                if (!v52) {
                  goto LABEL_36;
                }
                goto LABEL_164;
              case 3uLL:
                if (v65) {
                  goto LABEL_47;
                }
                goto LABEL_48;
              default:
                uint64_t v76 = BYTE6(v63);
                goto LABEL_36;
            }
          }
          sub_1002CE51C((uint64_t)v44, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
LABEL_10:
          sub_10000A7E8((uint64_t)v23, (uint64_t *)&unk_10096EE70);
LABEL_11:
          sub_1002CE51C((uint64_t)v37, type metadata accessor for SDAirDropDiscoveredEndpoint);
          unint64_t v47 = (v47 + 1) & v181;
          unint64_t v48 = v47 >> 6;
          uint64_t v49 = *(void *)(v182 + 8 * (v47 >> 6));
          uint64_t v50 = 1 << v47;
          if ((v49 & (1 << v47)) == 0) {
            goto LABEL_7;
          }
          break;
        case 3u:
          uint64_t v66 = v176;
          sub_1002CE4B4((uint64_t)v23, (uint64_t)v176, type metadata accessor for SDAirDropDiscoveredEndpoint);
          BOOL v67 = *v66;
          if (swift_getEnumCaseMultiPayload() != 3)
          {

            goto LABEL_10;
          }
          unint64_t v68 = *v54;
          sub_10000B740(0, (unint64_t *)&qword_10096D418);
          char v69 = static NSObject.== infix(_:_:)();

          uint64_t v43 = v177;
          if (v69) {
            goto LABEL_3;
          }
          goto LABEL_143;
        default:
          uint64_t v55 = v175;
          sub_1002CE4B4((uint64_t)v23, v175, type metadata accessor for SDAirDropDiscoveredEndpoint);
          if (swift_getEnumCaseMultiPayload())
          {
            sub_1002CE51C(v55, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            goto LABEL_10;
          }
          uint64_t v70 = v165;
          sub_1002CE9B4((uint64_t)v54, v165, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          char v71 = sub_10031C718(v55, v70);
          uint64_t v72 = v70;
          uint64_t v44 = v179;
          sub_1002CE51C(v72, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          uint64_t v45 = v178;
          sub_1002CE51C(v55, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          sub_1002CE51C((uint64_t)v23, type metadata accessor for SDAirDropDiscoveredEndpoint);
          if (v71) {
            goto LABEL_4;
          }
          goto LABEL_11;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_1002CE0E0(unint64_t a1)
{
}

void sub_1002CE0FC(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_10000A844(a2);
      uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        sub_10000B740(0, a3);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      uint64_t v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      sub_10000B740(0, a3);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    uint64_t v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

unint64_t sub_1002CE460()
{
  unint64_t result = qword_10096D428;
  if (!qword_10096D428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D428);
  }
  return result;
}

uint64_t sub_1002CE4B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002CE51C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1002CE57C()
{
  unint64_t result = qword_10096D448;
  if (!qword_10096D448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D448);
  }
  return result;
}

void *sub_1002CE5D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_10000A844((uint64_t *)&unk_10096D450);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    Swift::Int v15 = (void (**)(char *, uint64_t))(v11 - 8);
    Swift::Int v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_1002CC248(&qword_10096C4C8, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_1002CC248((unint64_t *)&unk_10096D460, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        char v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        unint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t type metadata accessor for IntegerPacker.PackError()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1002CE900@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002C10A4(a1, v2[2], v2[3], v2[5], a2);
}

uint64_t sub_1002CE928()
{
  return dispatch thunk of static BinaryInteger.| infix(_:_:)();
}

unint64_t sub_1002CE960()
{
  unint64_t result = qword_10096D490;
  if (!qword_10096D490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D490);
  }
  return result;
}

uint64_t sub_1002CE9B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002CEA1C()
{
  return sub_1002C6888(v0);
}

uint64_t sub_1002CEA38(uint64_t a1)
{
  return sub_1003B80DC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1002CEA54()
{
  return sub_1002C6A90(v0);
}

id sub_1002CEA5C()
{
  return [*(id *)(v0 + 64) invalidate];
}

uint64_t sub_1002CEA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002CEA7C()
{
  return swift_release();
}

uint64_t sub_1002CEA84(void *a1)
{
  return sub_1002C2F70(a1, v1);
}

void sub_1002CEA8C(uint64_t a1, uint64_t a2)
{
  sub_1002C3660(a1, a2, v2);
}

uint64_t sub_1002CEA94(void *a1)
{
  return sub_1002C36D0(a1, v1);
}

uint64_t sub_1002CEA9C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002CEAD4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002CEAFC(uint64_t a1, uint64_t a2)
{
  return (a1 > a2) - (a1 < a2);
}

uint64_t sub_1002CEB10@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002C1DAC(a1, *(void *)(v3 + 16), *(char **)(v3 + 24), *(void *)(v3 + 40), a3, a2);
}

uint64_t sub_1002CEB48()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1002CEB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t type metadata accessor for IntegerPacker()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1002CEB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t _s7RequestV4KindOwet(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_1002CEBF4(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002CEC90);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for B389PresentationConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for B389PresentationConfig.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002CEE14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for B389PresentationConfig.CodingKeys()
{
  return &type metadata for B389PresentationConfig.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SDNearFieldTapType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for B389PresentationConfig.Mode.DecodeError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002CEFA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1002CEFD0(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for B389PresentationConfig.Mode.DecodeError()
{
  return &type metadata for B389PresentationConfig.Mode.DecodeError;
}

unsigned char *storeEnumTagSinglePayload for B389PresentationConfig.Mode.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002CF0B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for B389PresentationConfig.Mode.CodingKeys()
{
  return &type metadata for B389PresentationConfig.Mode.CodingKeys;
}

unint64_t sub_1002CF0F4()
{
  unint64_t result = qword_10096D618;
  if (!qword_10096D618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D618);
  }
  return result;
}

unint64_t sub_1002CF14C()
{
  unint64_t result = qword_10096D620;
  if (!qword_10096D620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D620);
  }
  return result;
}

unint64_t sub_1002CF1A4()
{
  unint64_t result = qword_10096D628;
  if (!qword_10096D628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D628);
  }
  return result;
}

uint64_t sub_1002CF1F8()
{
  return swift_getWitnessTable();
}

unint64_t sub_1002CF218()
{
  unint64_t result = qword_10096D630;
  if (!qword_10096D630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D630);
  }
  return result;
}

unint64_t sub_1002CF270()
{
  unint64_t result = qword_10096D638;
  if (!qword_10096D638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D638);
  }
  return result;
}

unint64_t sub_1002CF2C8()
{
  unint64_t result = qword_10096D640;
  if (!qword_10096D640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D640);
  }
  return result;
}

unint64_t sub_1002CF320()
{
  unint64_t result = qword_10096D648;
  if (!qword_10096D648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10096D648);
  }
  return result;
}

uint64_t sub_1002CF3A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096D650);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096D650);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002CF470(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.AskRequest();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v4 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002CF568, v4, 0);
}

uint64_t sub_1002CF568()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  uint64_t v5 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v8 = v0[4];
  if (!v5)
  {
    (*(void (**)(void, void))(v7 + 8))(v0[6], v0[4]);
    char v10 = 0;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(SFAirDropReceive.AskRequest.urlItems.getter() + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if (v9)
  {
    char v10 = 0;
    goto LABEL_10;
  }
  if (SFAirDropReceive.AskRequest.senderBundleID.getter() == 0xD000000000000014 && v11 == 0x80000001007B83C0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v10 = 0;
    if ((v12 & 1) == 0) {
      goto LABEL_10;
    }
  }
  char v10 = sub_1002CF6E8(v0[2]);
LABEL_10:
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13(v10 & 1);
}

uint64_t sub_1002CF6E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for SFAirDropReceive.AskRequest();
  uint64_t v8 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  char v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = SFVoiceMemosAppAvailable();
  if (result)
  {
    uint64_t v42 = v5;
    uint64_t v43 = v4;
    uint64_t v44 = a1;
    uint64_t v16 = SFAirDropReceive.AskRequest.files.getter();
    uint64_t v17 = v16;
    uint64_t v48 = *(void *)(v16 + 16);
    if (v48)
    {
      v39[0] = v7;
      v39[1] = v8;
      uint64_t v40 = v2;
      char v41 = v10;
      unint64_t v18 = (void *)(v16
                     + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)));
      uint64_t v19 = v12 + 16;
      uint64_t v46 = *(NSObject **)(v12 + 16);
      unint64_t v47 = v18;
      ((void (*)(char *))v46)(v14);
      SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      int v21 = SFIsVoiceMemo();

      uint64_t v2 = v12 + 8;
      uint64_t v22 = *(void *)(v12 + 8);
      ((void (*)(char *, uint64_t))v22)(v14, v11);
      if (!v21)
      {
LABEL_8:
        swift_bridgeObjectRelease();
        return 0;
      }
      unint64_t v23 = 1;
      while (1)
      {
        if (v48 == v23)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = v40;
          goto LABEL_11;
        }
        if (v23 >= *(void *)(v17 + 16)) {
          break;
        }
        ((void (*)(char *, char *, uint64_t))v46)(v14, (char *)v47 + *(void *)(v12 + 72) * v23++, v11);
        SFAirDropReceive.AskRequest.ItemInfo.fileType.getter();
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v24 = SFIsVoiceMemo();

        ((void (*)(char *, uint64_t))v22)(v14, v11);
        if ((v24 & 1) == 0) {
          goto LABEL_8;
        }
      }
      __break(1u);
      swift_once();
      uint64_t v27 = type metadata accessor for Logger();
      sub_10000B47C(v27, (uint64_t)qword_10096D650);
      (*(void (**)(uint64_t, uint64_t, unint64_t))(v22 + 16))(v19, v17, v23);
      swift_errorRetain();
      swift_errorRetain();
      BOOL v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        char v41 = (char *)(v12 + 16);
        uint64_t v31 = v30;
        unint64_t v47 = (void *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        uint64_t v50 = v48;
        *(_DWORD *)uint64_t v31 = 136315394;
        uint64_t v45 = v31 + 4;
        SFAirDropReceive.AskRequest.id.getter();
        sub_1002D0A88(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
        uint64_t v46 = v28;
        uint64_t v32 = v43;
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v35 = v34;
        (*(void (**)(NSString, uint64_t))(v42 + 8))(v20, v32);
        uint64_t v49 = sub_100254634(v33, v35, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, unint64_t))(v22 + 8))(v41, v23);
        *(_WORD *)(v31 + 12) = 2112;
        swift_errorRetain();
        uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v49 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v47 = v36;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v37 = v46;
        _os_log_impl((void *)&_mh_execute_header, v46, v29, "Failed to get Voice Memo app for ask request %s: %@", (uint8_t *)v31, 0x16u);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        (*(void (**)(uint64_t, unint64_t))(v22 + 8))(v19, v23);
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
LABEL_11:
      id v25 = objc_allocWithZone((Class)LSApplicationRecord);
      id v26 = sub_1006A5458(0xD000000000000014, 0x80000001007B83C0, 1);
      char v38 = *(void **)(v2 + 16);
      *(void *)(v2 + 16) = v26;
    }
    return *(void *)(v2 + 16) != 0;
  }
  return result;
}

uint64_t sub_1002CFD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002CFDD0, v5, 0);
}

uint64_t sub_1002CFDD0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = static AirDropActor.shared;
  uint64_t v3 = sub_1002D0A88((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v4 = swift_task_alloc();
  v0[4] = v4;
  *(void *)(v4 + 16) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  uint64_t v6 = sub_10000A844((uint64_t *)&unk_10096C8B0);
  void *v5 = v0;
  v5[1] = sub_1002CFF14;
  uint64_t v7 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v7, v2, v3, 0xD000000000000027, 0x80000001007B8370, sub_1002D0950, v4, v6);
}

uint64_t sub_1002CFF14()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1002D0028(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096D778);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = self;
  type metadata accessor for URL();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_1002D09EC;
  void aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002D0258;
  aBlock[3] = &unk_1008D5BA0;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  [v5 importMemosForItems:isa completion:v9];
  _Block_release(v9);
}

uint64_t sub_1002D0200()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1002D0258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for URL();
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D02D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_10000A844((uint64_t *)&unk_10097F1D0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *(void **)(v3 + 16);
  type metadata accessor for SDAirDropContentHandlerUtilities();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.ItemDestination();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  id v13 = v10;
  sub_10039FAA0(a1, v10, 1, a3);

  return sub_10024DFE8((uint64_t)v9);
}

uint64_t type metadata accessor for SDAirDropContentHandlerVoiceMemos()
{
  return self;
}

uint64_t sub_1002D0440@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SDAirDropContentHandlerVoiceMemos();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_1002D0478(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10024DEC4;
  return sub_1002CF470(a1);
}

uint64_t sub_1002D0514(uint64_t a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  sub_10000A844((uint64_t *)&unk_10096C8B0);
  return SFProgressTask.init(_:initialProgress:operation:file:line:)();
}

uint64_t sub_1002D05E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1002D02D8(a1, a2, a3);
}

void sub_1002D0608(uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)(SFAirDropReceive.AskRequest.files.getter() + 16);
  swift_bridgeObjectRelease();
  sub_10000A844(&qword_10096D760);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
  *(void *)(inited + 32) = 0x454D5F4543494F56;
  *(void *)(inited + 40) = 0xEA00000000004F4DLL;
  *(void *)(inited + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = 95;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0x454D5F4543494F56;
  v6._object = (void *)0xEA00000000004F4DLL;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  if (v3 > 1)
  {
    v7._uint64_t countAndFlagsBits = 0x4C4152554C505FLL;
    v7._object = (void *)0xE700000000000000;
    String.append(_:)(v7);
  }
  swift_bridgeObjectRelease();
  if (a2)
  {
    v8._uint64_t countAndFlagsBits = 0x4C4154495041435FLL;
    v8._object = (void *)0xEC00000044455A49;
    String.append(_:)(v8);
  }
  v9._uint64_t countAndFlagsBits = 0x545845545FLL;
  v9._object = (void *)0xE500000000000000;
  String.append(_:)(v9);
  swift_setDeallocating();
  sub_10000A844((uint64_t *)&unk_100977CB0);
  swift_arrayDestroy();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = (id)SFLocalizedStringForKey();

  if (v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000A844((uint64_t *)&unk_10096EE60);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_10076E7A0;
    *(void *)(v12 + 56) = &type metadata for Int;
    *(void *)(v12 + 64) = &protocol witness table for Int;
    *(void *)(v12 + 32) = v3;
    static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002D0860()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002D0898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  Swift::String v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *Swift::String v9 = v4;
  v9[1] = sub_10000A6F4;
  return sub_1002CFD34(a1, a2, a3, v8);
}

void sub_1002D0950(uint64_t a1)
{
}

uint64_t sub_1002D0958()
{
  uint64_t v1 = sub_10000A844(&qword_10096D778);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002D09EC()
{
  sub_10000A844(&qword_10096D778);

  return sub_1002D0200();
}

uint64_t sub_1002D0A70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002D0A80()
{
  return swift_release();
}

uint64_t sub_1002D0A88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SDAirDropClassroomBrowserFactory()
{
  return self;
}

uint64_t sub_1002D0AF4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096D780);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096D780);
  if (qword_100969C80 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_1009945D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1002D0BBC()
{
  uint64_t v1 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser;
  if (!*(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser))
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_managedConfig);
    if (v2)
    {
      if ([v2 isClassroomEnabled])
      {
        id v3 = [objc_allocWithZone((Class)CRKShareTargetBrowser) initWithDelegate:v0 queue:*(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browserQueue)];
        uint64_t v4 = *(void **)(v0 + v1);
        *(void *)(v0 + v1) = v3;

        uint64_t v5 = *(void **)(v0 + v1);
        if (v5)
        {
          [v5 resume];
        }
      }
    }
  }
}

uint64_t sub_1002D0C78(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v67 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0);
  __chkstk_darwin(v67);
  uint64_t v66 = (void *)((char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v65 = (void *)((char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  unint64_t v63 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v62 = (uint64_t)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v11 = __chkstk_darwin(v70);
  id v13 = (char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (id *)((char *)v59 - v15);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)v59 - v18;
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    int v21 = (void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_classroomEndpoints);
    uint64_t v22 = a1;
    uint64_t v23 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    uint64_t v69 = *(void *)(v17 + 72);
    uint64_t v60 = v2;
    uint64_t v61 = (void (**)(char *, uint64_t))(v7 + 8);
    v59[1] = v22;
    swift_bridgeObjectRetain();
    unint64_t v68 = v16;
    char v71 = v19;
    while (1)
    {
      sub_10025AE8C(v23, (uint64_t)v19);
      sub_10025AE8C((uint64_t)v19, (uint64_t)v16);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v32 = v65;
          sub_1002D331C((uint64_t)v16, (uint64_t)v65, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
          uint64_t v27 = *v32;
          uint64_t v29 = v32[1];
          swift_bridgeObjectRetain();
          unint64_t v34 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint;
          goto LABEL_11;
        case 2u:
          uint64_t v32 = v66;
          sub_1002D331C((uint64_t)v16, (uint64_t)v66, type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
          uint64_t v27 = UUID.uuidString.getter();
          uint64_t v29 = v33;
          unint64_t v34 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint;
LABEL_11:
          uint64_t v30 = v34;
          uint64_t v31 = (uint64_t)v32;
          goto LABEL_12;
        case 3u:
          id v35 = *v16;
          id v36 = [*v16 identifier];
          if (!v36) {
            goto LABEL_28;
          }
          os_log_t v37 = v36;
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v38;

          break;
        default:
          uint64_t v25 = v62;
          sub_1002D331C((uint64_t)v16, v62, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          id v26 = v63;
          sub_10031430C();
          uint64_t v27 = UUID.uuidString.getter();
          uint64_t v29 = v28;
          (*v61)(v26, v64);
          uint64_t v30 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint;
          uint64_t v31 = v25;
          uint64_t v19 = v71;
LABEL_12:
          sub_1002D3384(v31, v30);
          break;
      }
      swift_beginAccess();
      uint64_t v39 = (uint64_t)v13;
      sub_10025AE8C((uint64_t)v19, (uint64_t)v13);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v72 = (void *)*v21;
      char v41 = v72;
      *int v21 = 0x8000000000000000;
      unint64_t v43 = sub_1005838BC(v27, v29);
      uint64_t v44 = v41[2];
      BOOL v45 = (v42 & 1) == 0;
      uint64_t v46 = v44 + v45;
      if (__OFADD__(v44, v45))
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x1002D12F4);
      }
      char v47 = v42;
      if (v41[3] >= v46)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v50 = v72;
          if ((v42 & 1) == 0) {
            goto LABEL_20;
          }
        }
        else
        {
          sub_10058D858();
          uint64_t v50 = v72;
          if ((v47 & 1) == 0) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        sub_1005870F8(v46, isUniquelyReferenced_nonNull_native);
        uint64_t v48 = sub_1005838BC(v27, v29);
        if ((v47 & 1) != (v49 & 1)) {
          goto LABEL_29;
        }
        unint64_t v43 = v48;
        uint64_t v50 = v72;
        if ((v47 & 1) == 0)
        {
LABEL_20:
          v50[(v43 >> 6) + 8] |= 1 << v43;
          uint64_t v51 = (uint64_t *)(v50[6] + 16 * v43);
          uint64_t *v51 = v27;
          v51[1] = v29;
          uint64_t v24 = v69;
          id v13 = (char *)v39;
          sub_1002D331C(v39, v50[7] + v43 * v69, type metadata accessor for SDAirDropDiscoveredEndpoint);
          uint64_t v52 = v50[2];
          BOOL v53 = __OFADD__(v52, 1);
          uint64_t v54 = v52 + 1;
          if (v53) {
            goto LABEL_27;
          }
          v50[2] = v54;
          swift_bridgeObjectRetain();
          goto LABEL_4;
        }
      }
      uint64_t v24 = v69;
      id v13 = (char *)v39;
      sub_1002D32B8(v39, v50[7] + v43 * v69);
LABEL_4:
      *int v21 = v50;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v19 = v71;
      sub_1002D3384((uint64_t)v71, type metadata accessor for SDAirDropDiscoveredEndpoint);
      v23 += v24;
      --v20;
      uint64_t v16 = v68;
      if (!v20)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v60;
        break;
      }
    }
  }
  uint64_t v55 = *(void (**)(void *))(v2
                                        + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_endpointsUpdateHandler);
  swift_beginAccess();
  uint64_t v56 = swift_bridgeObjectRetain();
  char v57 = sub_100254CF0(v56);
  swift_bridgeObjectRelease();
  v55(v57);
  return swift_release();
}

uint64_t sub_1002D1304(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000A844(&qword_10096D8B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v25 = v2;
    uint64_t v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_classroomEndpoints);
    swift_bridgeObjectRetain();
    uint64_t v24 = a1;
    uint64_t v9 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v11 = *(v9 - 1);
      uint64_t v12 = *v9;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v13 = sub_1005838BC(v11, v12);
      LOBYTE(v11) = v14;
      swift_bridgeObjectRelease();
      if (v11)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v16 = *v8;
        uint64_t v26 = *v8;
        *uint64_t v8 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10058D858();
          uint64_t v16 = v26;
        }
        swift_bridgeObjectRelease();
        uint64_t v17 = *(void *)(v16 + 56);
        uint64_t v18 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
        uint64_t v19 = *(void *)(v18 - 8);
        sub_1002D331C(v17 + *(void *)(v19 + 72) * v13, (uint64_t)v6, type metadata accessor for SDAirDropDiscoveredEndpoint);
        sub_1002AB888(v13, v16);
        *uint64_t v8 = v16;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v6, 0, 1, v18);
      }
      else
      {
        uint64_t v10 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
      }
      v9 += 2;
      swift_bridgeObjectRelease();
      sub_1002D3110((uint64_t)v6);
      swift_endAccess();
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    uint64_t v2 = v25;
  }
  uint64_t v20 = *(void (**)(void *))(v2
                                        + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_endpointsUpdateHandler);
  swift_beginAccess();
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_100254CF0(v21);
  swift_bridgeObjectRelease();
  v20(v22);
  return swift_release();
}

uint64_t sub_1002D15D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  return _swift_task_switch(sub_1002D15F4, 0, 0);
}

uint64_t sub_1002D15F4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    type metadata accessor for MainActor();
    *(void *)(v0 + 72) = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_1002D16F0, v3, v2);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1002D16F0()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_release();
  sub_1002D0C78(v2);

  return _swift_task_switch(sub_1002D1768, 0, 0);
}

uint64_t sub_1002D1768()
{
  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 64) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002D17A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  return _swift_task_switch(sub_1002D17CC, 0, 0);
}

uint64_t sub_1002D17CC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    type metadata accessor for MainActor();
    *(void *)(v0 + 72) = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_1002D18C8, v3, v2);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1002D18C8()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_release();
  sub_1002D1304(v2);

  return _swift_task_switch(sub_1002D33E4, 0, 0);
}

uint64_t sub_1002D1958(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6 = a4;
  if (a4)
  {
    sub_10000B740(0, &qword_10096D8A0);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v9 = a3;
  id v10 = a1;
  a5(v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D19F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[13] = a4;
  v5[14] = a5;
  sub_10000A844(&qword_10096C920);
  v5[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v5[16] = v6;
  v5[17] = *(void *)(v6 - 8);
  v5[18] = swift_task_alloc();
  return _swift_task_switch(sub_1002D1AE0, 0, 0);
}

uint64_t sub_1002D1AE0()
{
  uint64_t v30 = v0;
  if (qword_100969B58 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v4 = sub_10000B47C(v3, (uint64_t)qword_10096D780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[13];
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v29 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    if (!v7)
    {
      __break(1u);
      return _swift_task_switch(v9, v10, v11);
    }
    uint64_t v12 = v0[17];
    uint64_t v28 = v0[18];
    uint64_t v27 = v0[16];
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    v0[12] = sub_100254634(v13, v14, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Classroom browser failed %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v28, v27);
  }
  else
  {
    uint64_t v16 = v0[17];
    uint64_t v15 = v0[18];
    uint64_t v17 = v0[16];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[19] = Strong;
  if (Strong)
  {
    v0[20] = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_delegate;
    v0[21] = type metadata accessor for MainActor();
    v0[22] = static MainActor.shared.getter();
    uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v21 = v20;
    uint64_t v22 = sub_1002D1E88;
    goto LABEL_11;
  }
  swift_beginAccess();
  uint64_t v23 = swift_unknownObjectWeakLoadStrong();
  v0[24] = v23;
  if (v23)
  {
    type metadata accessor for MainActor();
    v0[25] = static MainActor.shared.getter();
    uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v21 = v24;
    uint64_t v22 = sub_1002D2314;
LABEL_11:
    uint64_t v9 = (uint64_t)v22;
    uint64_t v10 = v19;
    uint64_t v11 = v21;
    return _swift_task_switch(v9, v10, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_1002D1E88()
{
  swift_release();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 184) = Strong;
  if (Strong) {
    uint64_t v2 = sub_1002D1F14;
  }
  else {
    uint64_t v2 = sub_1002D1FB4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002D1F14()
{
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v1 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002D20C4, v1, 0);
}

uint64_t sub_1002D1FB4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 192) = Strong;
  if (Strong)
  {
    type metadata accessor for MainActor();
    *(void *)(v0 + 200) = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_1002D2314, v3, v2);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1002D20C4()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  uint64_t v4 = static MainActor.shared.getter();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v4;
  v5[3] = &protocol witness table for MainActor;
  v5[4] = v3;
  swift_release();
  sub_10028CFA8(v1, (uint64_t)&unk_10096D898, (uint64_t)v5);
  swift_release();
  swift_unknownObjectRelease();
  return _swift_task_switch(sub_1002D2210, 0, 0);
}

uint64_t sub_1002D2210()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[24] = Strong;
  if (Strong)
  {
    type metadata accessor for MainActor();
    v0[25] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_1002D2314, v3, v2);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1002D2314()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_release();
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser);
  uint64_t v4 = *(void **)(v0 + 192);
  if (v3)
  {
    [v3 invalidate];
    uint64_t v5 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = 0;

    uint64_t v4 = v5;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t type metadata accessor for SDAirDropClassroomBrowser()
{
  return self;
}

id sub_1002D2604(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v6 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browserQueue;
  sub_10000B740(0, (unint64_t *)&qword_10096A1A0);
  uint64_t v7 = v2;
  *(void *)&v2[v6] = static OS_dispatch_queue.main.getter();
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v8 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_managedConfig;
  *(void *)&v7[v8] = [self sharedConnection];
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_browser] = 0;
  *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_classroomEndpoints] = &_swiftEmptyDictionarySingleton;
  uint64_t v9 = &v7[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropClassroomBrowser_endpointsUpdateHandler];
  *(void *)uint64_t v9 = a1;
  *((void *)v9 + 1) = a2;
  swift_retain();

  v11.receiver = v7;
  v11.Class super_class = ObjectType;
  return [super init];
}

uint64_t sub_1002D2720()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002D2758()
{
  return sub_1002D319C((void (*)(void))&_swift_errorRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1002D2784(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10000A6F0;
  return sub_1002D19F0(a1, v4, v5, v7, v6);
}

uint64_t sub_1002D2844()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002D2884(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F4;
  return sub_1004724C8(a1, v4, v5, v6);
}

uint64_t sub_1002D2938(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (void **)((char *)v34 - v9);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v34 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (void *)((char *)v34 - v14);
  uint64_t v16 = sub_10000A844(&qword_10096C920);
  uint64_t result = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_24;
  }
  v34[0] = v19;
  v34[1] = v1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v20 = result;
    if (result) {
      goto LABEL_4;
    }
LABEL_21:
    uint64_t v22 = _swiftEmptyArrayStorage;
LABEL_22:
    swift_bridgeObjectRelease_n();
    uint64_t v30 = type metadata accessor for TaskPriority();
    uint64_t v31 = v34[0];
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v34[0], 1, 1, v30);
    uint64_t v32 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v33 = (void *)swift_allocObject();
    void v33[2] = 0;
    v33[3] = 0;
    v33[4] = v32;
    v33[5] = v22;
    sub_10028CFD4(v31, (uint64_t)&unk_10096D8C8, (uint64_t)v33);
    return swift_release();
  }
  uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (!v20) {
    goto LABEL_21;
  }
LABEL_4:
  if (v20 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v21 = 0;
      uint64_t v22 = _swiftEmptyArrayStorage;
      do
      {
        *uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_storeEnumTagMultiPayload();
        sub_1002D331C((uint64_t)v15, (uint64_t)v13, type metadata accessor for SDAirDropDiscoveredEndpoint);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = (void *)sub_1002539B4(0, v22[2] + 1, 1, (unint64_t)v22);
        }
        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1) {
          uint64_t v22 = (void *)sub_1002539B4(v23 > 1, v24 + 1, 1, (unint64_t)v22);
        }
        ++v21;
        _OWORD v22[2] = v24 + 1;
        sub_1002D331C((uint64_t)v13, (uint64_t)v22+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v24, type metadata accessor for SDAirDropDiscoveredEndpoint);
      }
      while (v20 != v21);
    }
    else
    {
      uint64_t v25 = (void **)(a1 + 32);
      uint64_t v22 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v26 = *v25;
        *uint64_t v10 = *v25;
        swift_storeEnumTagMultiPayload();
        sub_1002D331C((uint64_t)v10, (uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
        id v27 = v26;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = (void *)sub_1002539B4(0, v22[2] + 1, 1, (unint64_t)v22);
        }
        unint64_t v29 = v22[2];
        unint64_t v28 = v22[3];
        if (v29 >= v28 >> 1) {
          uint64_t v22 = (void *)sub_1002539B4(v28 > 1, v29 + 1, 1, (unint64_t)v22);
        }
        _OWORD v22[2] = v29 + 1;
        sub_1002D331C((uint64_t)v7, (uint64_t)v22+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v29, type metadata accessor for SDAirDropDiscoveredEndpoint);
        ++v25;
        --v20;
      }
      while (v20);
    }
    goto LABEL_22;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1002D2D9C(unint64_t a1)
{
  uint64_t v3 = sub_10000A844(&qword_10096C920);
  uint64_t result = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_21;
  }
  uint64_t v25 = v6;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v7 = result;
    uint64_t v24 = v1;
    if (result) {
      goto LABEL_4;
    }
LABEL_18:
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
LABEL_19:
    swift_bridgeObjectRelease_n();
    uint64_t v20 = type metadata accessor for TaskPriority();
    uint64_t v21 = (uint64_t)v25;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v25, 1, 1, v20);
    uint64_t v22 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unint64_t v23 = (void *)swift_allocObject();
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = v22;
    v23[5] = v9;
    sub_10028CFD4(v21, (uint64_t)&unk_10096D8B0, (uint64_t)v23);
    return swift_release();
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  uint64_t v24 = v1;
  if (!v7) {
    goto LABEL_18;
  }
LABEL_4:
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      id v12 = [v10 identifier:v24];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_100253208(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v18 = *((void *)v9 + 2);
        unint64_t v17 = *((void *)v9 + 3);
        if (v18 >= v17 >> 1) {
          uint64_t v9 = sub_100253208((char *)(v17 > 1), v18 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v18 + 1;
        uint64_t v19 = &v9[16 * v18];
        *((void *)v19 + 4) = v14;
        *((void *)v19 + 5) = v16;
      }
      else
      {
      }
      ++v8;
    }
    while (v7 != v8);
    goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1002D3030()
{
  return sub_1002D319C((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002D305C(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10000A6F0;
  *(_OWORD *)(v4 + 48) = v5;
  *(void *)(v4 + 40) = a1;
  return _swift_task_switch(sub_1002D17CC, 0, 0);
}

uint64_t sub_1002D3110(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096D8B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002D3170()
{
  return sub_1002D319C((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002D319C(void (*a1)(void), void (*a2)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v2 + 32));
  a2(*(void *)(v2 + 40));

  return _swift_deallocObject(v2, 48, 7);
}

uint64_t sub_1002D3204(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 32);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10000A6F0;
  *(_OWORD *)(v4 + 48) = v5;
  *(void *)(v4 + 40) = a1;
  return _swift_task_switch(sub_1002D15F4, 0, 0);
}

uint64_t sub_1002D32B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002D331C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002D3384(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_1002D33EC()
{
  uint64_t v1 = *(int *)(_s10NanoWalletV18InitialLockContextVMa(0) + 44);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }
  id result = [objc_allocWithZone((Class)SDAuthenticationRequest) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002D345C()
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100771F30;
  if (qword_100969B60 != -1) {
    swift_once();
  }
  *(void *)(v0 + 56) = &type metadata for SDAuthentication.Operation.CheckIsBluetoothEnabled;
  *(void *)(v0 + 64) = &off_1009718E8;
  *(void *)(v0 + 96) = &type metadata for SDAuthentication.Operation.CheckIsWiFiEnabled;
  *(void *)(v0 + 104) = &off_1009718C8;
  *(void *)(v0 + 136) = &type metadata for SDAuthentication.Operation.CheckWatchIsNearby;
  *(void *)(v0 + 144) = &off_1009718A8;
  *(void *)(v0 + 176) = &type metadata for SDAuthentication.Operation.CheckRemoteDeviceOSVersionIsSupported;
  *(void *)(v0 + 184) = &off_100971888;
  *(void *)(v0 + 216) = &type metadata for SDAuthentication.Operation.RecordRemoteDevice;
  *(void *)(v0 + 224) = &off_100971868;
  *(void *)(v0 + 256) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v0 + 264) = &off_100971848;
  *(void *)(v0 + 296) = &type metadata for SDAuthentication.Operation.IncludeAWDLInfoInMessage;
  *(void *)(v0 + 304) = &off_100971828;
  *(void *)(v0 + 336) = &type metadata for SDAuthentication.Operation.IncludeLastUnlockDateInMessage;
  *(void *)(v0 + 344) = &off_100971808;
  *(void *)(v0 + 376) = &type metadata for SDAuthentication.Operation.IncludeRangingTokenInMessage;
  *(void *)(v0 + 384) = &off_1009717E8;
  *(void *)(v0 + 416) = &type metadata for SDAuthentication.Operation.SendRequestMessage;
  *(void *)(v0 + 424) = &off_1009717C8;
  return v0;
}

uint64_t sub_1002D359C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    unint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v102 = a3;
    uint64_t v103 = (char *)a2;
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    uint64_t v28 = v19[7];
    unint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    unint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    uint64_t v36 = v19[9];
    os_log_t v37 = &v13[v36];
    uint64_t v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    uint64_t v40 = v19[10];
    char v41 = &v13[v40];
    char v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    uint64_t v44 = v19[11];
    BOOL v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    uint64_t v48 = v19[12];
    char v49 = &v13[v48];
    uint64_t v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    BOOL v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    uint64_t v56 = v19[15];
    char v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    uint64_t v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      uint64_t v67 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    uint64_t v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    uint64_t v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v102[7];
    uint64_t v80 = (void *)(a1 + v79);
    uint64_t v81 = &v103[v79];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17(v81, 1, v15))
    {
      uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v80, v81, *(void *)(*(void *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v80, v81, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v80, 0, 1, v15);
    }
    uint64_t v83 = v102[8];
    BOOL v84 = (void *)(a1 + v83);
    uint64_t v85 = &v103[v83];
    if (v17(&v103[v83], 1, v15))
    {
      uint64_t v86 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v84, v85, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v84, 0, 1, v15);
    }
    uint64_t v87 = v102[9];
    uint64_t v88 = (uint64_t *)(a1 + v87);
    uint64_t v89 = (uint64_t *)&v103[v87];
    uint64_t v90 = *v89;
    unint64_t v91 = v89[1];
    sub_10025ADCC(*v89, v91);
    *uint64_t v88 = v90;
    v88[1] = v91;
    uint64_t v92 = v102[10];
    uint64_t v93 = a1 + v92;
    uint64_t v94 = (uint64_t *)&v103[v92];
    unint64_t v95 = v94[1];
    if (v95 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
    }
    else
    {
      uint64_t v96 = *v94;
      sub_10025ADCC(*v94, v94[1]);
      *(void *)uint64_t v93 = v96;
      *(void *)(v93 + 8) = v95;
    }
    uint64_t v97 = v102[11];
    uint64_t v98 = v102[12];
    uint64_t v99 = *(void **)&v103[v97];
    *(void *)(a1 + v97) = v99;
    *(unsigned char *)(a1 + v98) = v103[v98];
    id v100 = v99;
  }
  return a1;
}

void sub_1002D40DC(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + 8;
  swift_bridgeObjectRelease();
  sub_10024D338(v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  long long v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v10 = v5 + v9[5];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v5 + v9[6];
  if (!v8(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = v5 + v9[7];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v5 + v9[8];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v5 + v9[9];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v5 + v9[10];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v5 + v9[11];
  if (!v8(v16, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = v5 + v9[12];
  if (!v8(v17, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = v5 + v9[14];
  if (!v8(v18, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = v5 + v9[15];
  if (!v8(v19, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = v5 + v9[16];
  if (!v8(v20, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = v5 + v9[17];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = a1 + a2[7];
  if (!v8(v22, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v22, v6);
  }
  uint64_t v23 = a1 + a2[8];
  if (!v8(v23, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v23, v6);
  }
  sub_100250CC4(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v24 = (uint64_t *)(a1 + a2[10]);
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_100250CC4(*v24, v25);
  }
  uint64_t v26 = *(void **)(a1 + a2[11]);
}

uint64_t sub_1002D45A4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 8, v6, v8);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  id v100 = a3;
  uint64_t v101 = a2;
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  if (v15(&v12[v18], 1, v13))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v17[6];
  uint64_t v23 = &v11[v22];
  uint64_t v24 = &v12[v22];
  if (v15(&v12[v22], 1, v13))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  uint64_t v26 = v17[7];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  if (v15(&v12[v26], 1, v13))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v27, v28, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v17[8];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  if (v15(&v12[v30], 1, v13))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
  }
  uint64_t v34 = v17[9];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  if (v15(&v12[v34], 1, v13))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v35, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  }
  uint64_t v38 = v17[10];
  uint64_t v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  if (v15(&v12[v38], 1, v13))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  uint64_t v42 = v17[11];
  uint64_t v43 = &v11[v42];
  uint64_t v44 = &v12[v42];
  if (v15(&v12[v42], 1, v13))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = v17[12];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  if (v15(&v12[v46], 1, v13))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v47, 0, 1, v13);
  }
  v11[v17[13]] = v12[v17[13]];
  uint64_t v50 = v17[14];
  uint64_t v51 = &v11[v50];
  uint64_t v52 = &v12[v50];
  if (v15(&v12[v50], 1, v13))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v51, v52, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v51, 0, 1, v13);
  }
  uint64_t v54 = v17[15];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  if (v15(&v12[v54], 1, v13))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v56, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
  }
  uint64_t v58 = v17[16];
  uint64_t v59 = &v11[v58];
  uint64_t v60 = &v12[v58];
  if (v15(&v12[v58], 1, v13))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v59, v60, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v13);
  }
  uint64_t v62 = v17[17];
  uint64_t v63 = &v11[v62];
  uint64_t v64 = &v12[v62];
  if (v15(&v12[v62], 1, v13))
  {
    uint64_t v65 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v63, v64, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v63, 0, 1, v13);
  }
  uint64_t v66 = v17[18];
  uint64_t v67 = &v11[v66];
  uint64_t v68 = &v12[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v11[v17[19]] = v12[v17[19]];
  uint64_t v69 = v17[20];
  uint64_t v70 = &v11[v69];
  uint64_t v71 = &v12[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = v17[21];
  uint64_t v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  uint64_t v77 = v100[7];
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (void *)(v101 + v77);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15((char *)v79, 1, v13))
  {
    uint64_t v80 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v78, v79, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v78, 0, 1, v13);
  }
  uint64_t v81 = v100[8];
  uint64_t v82 = (void *)(a1 + v81);
  uint64_t v83 = (const void *)(v101 + v81);
  if (v15((char *)(v101 + v81), 1, v13))
  {
    uint64_t v84 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v82, v83, *(void *)(*(void *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v82, v83, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v82, 0, 1, v13);
  }
  uint64_t v85 = v100[9];
  uint64_t v86 = (uint64_t *)(a1 + v85);
  uint64_t v87 = (uint64_t *)(v101 + v85);
  uint64_t v88 = *v87;
  unint64_t v89 = v87[1];
  sub_10025ADCC(*v87, v89);
  uint64_t *v86 = v88;
  v86[1] = v89;
  uint64_t v90 = v100[10];
  uint64_t v91 = a1 + v90;
  uint64_t v92 = (uint64_t *)(v101 + v90);
  unint64_t v93 = v92[1];
  if (v93 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
  }
  else
  {
    uint64_t v94 = *v92;
    sub_10025ADCC(*v92, v92[1]);
    *(void *)uint64_t v91 = v94;
    *(void *)(v91 + 8) = v93;
  }
  uint64_t v95 = v100[11];
  uint64_t v96 = v100[12];
  uint64_t v97 = *(void **)(v101 + v95);
  *(void *)(a1 + v95) = v97;
  *(unsigned char *)(a1 + v96) = *(unsigned char *)(v101 + v96);
  id v98 = v97;
  return a1;
}

char *sub_1002D509C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4(a1 + 1, v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  uint64_t v132 = a2;
  size_t v133 = (char *)a1;
  int64_t v131 = a3;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1, v10);
  int v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1, v10);
  int v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1, v10);
  int v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1, v10);
  int v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1, v10);
  int v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1, v10);
  int v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1, v10);
  int v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1, v10);
  int v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1, v10);
  int v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1, v10);
  int v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1, v10);
  int v87 = v12(v85, 1, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  int v92 = *(_DWORD *)v91;
  v90[4] = v91[4];
  *(_DWORD *)uint64_t v90 = v92;
  v8[v16[19]] = v9[v16[19]];
  uint64_t v93 = v16[20];
  uint64_t v94 = &v8[v93];
  uint64_t v95 = &v9[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = v16[21];
  uint64_t v97 = &v8[v96];
  id v98 = &v9[v96];
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = *((void *)v98 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v99 = v131[7];
  id v100 = &v133[v99];
  uint64_t v101 = (char *)v132 + v99;
  int v102 = v12(&v133[v99], 1, v10);
  int v103 = v12(v101, 1, v10);
  if (v102)
  {
    if (!v103)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v100, v101, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v100, 0, 1, v10);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v103)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v100, v10);
LABEL_84:
    uint64_t v104 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v100, v101, v10);
LABEL_85:
  uint64_t v105 = v131[8];
  unint64_t v106 = &v133[v105];
  uint64_t v107 = (char *)v132 + v105;
  int v108 = v12(&v133[v105], 1, v10);
  int v109 = v12(v107, 1, v10);
  if (v108)
  {
    if (!v109)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v106, v107, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v106, 0, 1, v10);
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  if (v109)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v106, v10);
LABEL_90:
    uint64_t v110 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64));
    goto LABEL_91;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v106, v107, v10);
LABEL_91:
  uint64_t v111 = v131[9];
  uint64_t v112 = (uint64_t *)&v133[v111];
  id v113 = (void *)((char *)v132 + v111);
  uint64_t v114 = *v113;
  unint64_t v115 = v113[1];
  sub_10025ADCC(*v113, v115);
  uint64_t v116 = *v112;
  unint64_t v117 = v112[1];
  *uint64_t v112 = v114;
  v112[1] = v115;
  sub_100250CC4(v116, v117);
  uint64_t v118 = v131[10];
  uint64_t v119 = (uint64_t *)&v133[v118];
  size_t v120 = (void *)((char *)v132 + v118);
  unint64_t v121 = *(void *)((char *)v132 + v118 + 8);
  if (*(void *)&v133[v118 + 8] >> 60 != 15)
  {
    if (v121 >> 60 != 15)
    {
      uint64_t v123 = *v120;
      sub_10025ADCC(*v120, v121);
      uint64_t v124 = *v119;
      unint64_t v125 = v119[1];
      *uint64_t v119 = v123;
      v119[1] = v121;
      sub_100250CC4(v124, v125);
      goto LABEL_98;
    }
    sub_10026F904((uint64_t)v119);
    goto LABEL_96;
  }
  if (v121 >> 60 == 15)
  {
LABEL_96:
    *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
    goto LABEL_98;
  }
  uint64_t v122 = *v120;
  sub_10025ADCC(*v120, v121);
  *uint64_t v119 = v122;
  v119[1] = v121;
LABEL_98:
  uint64_t v126 = v131[11];
  uint64_t v127 = *(void **)&v133[v126];
  uint64_t v128 = *(void **)((char *)v132 + v126);
  *(void *)&v133[v126] = v128;
  id v129 = v128;

  v133[v131[12]] = *((unsigned char *)v132 + v131[12]);
  return v133;
}

uint64_t sub_1002D618C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v76 = a3;
  uint64_t v77 = a2;
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  int v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v14 = v13[5];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  if (v11(&v8[v14], 1, v9))
  {
    uint64_t v17 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  uint64_t v18 = v13[6];
  uint64_t v19 = &v7[v18];
  int v20 = &v8[v18];
  if (v11(&v8[v18], 1, v9))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  uint64_t v22 = v13[7];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  if (v11(&v8[v22], 1, v9))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
  }
  uint64_t v26 = v13[8];
  int v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  if (v11(&v8[v26], 1, v9))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v28, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
  }
  uint64_t v30 = v13[9];
  uint64_t v31 = &v7[v30];
  int v32 = &v8[v30];
  if (v11(&v8[v30], 1, v9))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v32, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
  }
  uint64_t v34 = v13[10];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  if (v11(&v8[v34], 1, v9))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
  }
  uint64_t v38 = v13[11];
  int v39 = &v7[v38];
  uint64_t v40 = &v8[v38];
  if (v11(&v8[v38], 1, v9))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v39, v40, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
  }
  uint64_t v42 = v13[12];
  uint64_t v43 = &v7[v42];
  int v44 = &v8[v42];
  if (v11(&v8[v42], 1, v9))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v43, v44, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
  }
  v7[v13[13]] = v8[v13[13]];
  uint64_t v46 = v13[14];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  if (v11(&v8[v46], 1, v9))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
  }
  uint64_t v50 = v13[15];
  int v51 = &v7[v50];
  uint64_t v52 = &v8[v50];
  if (v11(&v8[v50], 1, v9))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v51, v52, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0, 1, v9);
  }
  uint64_t v54 = v13[16];
  uint64_t v55 = &v7[v54];
  int v56 = &v8[v54];
  if (v11(&v8[v54], 1, v9))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v55, v56, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
  }
  uint64_t v58 = v13[17];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  if (v11(&v8[v58], 1, v9))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
  }
  uint64_t v62 = v13[18];
  int v63 = &v7[v62];
  uint64_t v64 = &v8[v62];
  *(_DWORD *)int v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
  *(_OWORD *)&v7[v13[21]] = *(_OWORD *)&v8[v13[21]];
  uint64_t v65 = v76[7];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (const void *)(v77 + v65);
  if (v11((char *)(v77 + v65), 1, v9))
  {
    uint64_t v68 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v66, v67, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v66, 0, 1, v9);
  }
  uint64_t v69 = v76[8];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (const void *)(v77 + v69);
  if (v11((char *)(v77 + v69), 1, v9))
  {
    uint64_t v72 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v70, v71, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v70, 0, 1, v9);
  }
  uint64_t v73 = v76[10];
  *(_OWORD *)(a1 + v76[9]) = *(_OWORD *)(v77 + v76[9]);
  *(_OWORD *)(a1 + v73) = *(_OWORD *)(v77 + v73);
  uint64_t v74 = v76[12];
  *(void *)(a1 + v76[11]) = *(void *)(v77 + v76[11]);
  *(unsigned char *)(a1 + v74) = *(unsigned char *)(v77 + v74);
  return a1;
}

uint64_t sub_1002D6BE8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v126 = a2;
  uint64_t v127 = a1;
  unint64_t v125 = a3;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v83, v84, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v83, v84, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  uint64_t v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
  v89[4] = v90[4];
  v7[v15[19]] = v8[v15[19]];
  uint64_t v91 = v15[20];
  int v92 = &v7[v91];
  uint64_t v93 = &v8[v91];
  uint64_t v95 = *(void *)v93;
  uint64_t v94 = *((void *)v93 + 1);
  *(void *)int v92 = v95;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = v15[21];
  uint64_t v97 = &v7[v96];
  id v98 = &v8[v96];
  uint64_t v100 = *(void *)v98;
  uint64_t v99 = *((void *)v98 + 1);
  *(void *)uint64_t v97 = v100;
  *((void *)v97 + 1) = v99;
  swift_bridgeObjectRelease();
  uint64_t v101 = v125[7];
  int v102 = (void *)(v127 + v101);
  int v103 = (char *)(v126 + v101);
  int v104 = v11((char *)(v127 + v101), 1, v9);
  int v105 = v11(v103, 1, v9);
  if (v104)
  {
    if (!v105)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 32))(v102, v103, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v102, 0, 1, v9);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v105)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v102, v9);
LABEL_84:
    uint64_t v106 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 40))(v102, v103, v9);
LABEL_85:
  uint64_t v107 = v125[8];
  int v108 = (void *)(v127 + v107);
  int v109 = (char *)(v126 + v107);
  int v110 = v11((char *)(v127 + v107), 1, v9);
  int v111 = v11(v109, 1, v9);
  if (v110)
  {
    if (!v111)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 32))(v108, v109, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v108, 0, 1, v9);
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  if (v111)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v108, v9);
LABEL_90:
    uint64_t v112 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v108, v109, *(void *)(*(void *)(v112 - 8) + 64));
    goto LABEL_91;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 40))(v108, v109, v9);
LABEL_91:
  uint64_t v113 = v125[9];
  uint64_t v114 = *(void *)(v127 + v113);
  unint64_t v115 = *(void *)(v127 + v113 + 8);
  *(_OWORD *)(v127 + v113) = *(_OWORD *)(v126 + v113);
  sub_100250CC4(v114, v115);
  uint64_t v116 = v125[10];
  unint64_t v117 = (uint64_t *)(v127 + v116);
  uint64_t v118 = (uint64_t *)(v126 + v116);
  unint64_t v119 = *(void *)(v127 + v116 + 8);
  if (v119 >> 60 != 15)
  {
    unint64_t v120 = v118[1];
    if (v120 >> 60 != 15)
    {
      uint64_t v121 = *v117;
      *unint64_t v117 = *v118;
      v117[1] = v120;
      sub_100250CC4(v121, v119);
      goto LABEL_96;
    }
    sub_10026F904((uint64_t)v117);
  }
  *(_OWORD *)unint64_t v117 = *(_OWORD *)v118;
LABEL_96:
  uint64_t v122 = v125[11];
  uint64_t v123 = *(void **)(v127 + v122);
  *(void *)(v127 + v122) = *(void *)(v126 + v122);

  *(unsigned char *)(v127 + v125[12]) = *(unsigned char *)(v126 + v125[12]);
  return v127;
}

uint64_t sub_1002D7C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002D7C8C);
}

uint64_t sub_1002D7C8C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000A844((uint64_t *)&unk_100975040);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1002D7DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D7DD0);
}

void *sub_1002D7DD0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *id result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10000A844((uint64_t *)&unk_100975040);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t _s10NanoWalletV18InitialLockContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096D928);
}

void sub_1002D7F20()
{
  type metadata accessor for SDAuthenticationSessionMetrics();
  if (v0 <= 0x3F)
  {
    sub_100271710();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1002D8028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002D803C);
}

uint64_t sub_1002D803C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1002D8100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D8114);
}

uint64_t sub_1002D8114(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t _s10NanoWalletV4FlowVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096D9D8);
}

uint64_t sub_1002D81F4()
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002D8298(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    v11(a1 + 8, v8, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v90 = a3;
    uint64_t v91 = a2;
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    int v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    uint64_t v24 = v19[6];
    int v25 = &v13[v24];
    int v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    uint64_t v36 = v19[9];
    int v37 = &v13[v36];
    int v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    uint64_t v48 = v19[12];
    int v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    uint64_t v56 = v19[15];
    uint64_t v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    uint64_t v60 = v19[16];
    int v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      uint64_t v67 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    uint64_t v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    int v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = *(int *)(v90 + 28);
    int v80 = (uint64_t *)(a1 + v79);
    uint64_t v81 = (uint64_t *)((char *)v91 + v79);
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10025ADCC(v82, v83);
    *int v80 = v82;
    v80[1] = v83;
    uint64_t v84 = *(int *)(v90 + 32);
    uint64_t v85 = a1 + v84;
    int v86 = (uint64_t *)((char *)v91 + v84);
    unint64_t v87 = v86[1];
    if (v87 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
    }
    else
    {
      uint64_t v88 = *v86;
      sub_10025ADCC(*v86, v86[1]);
      *(void *)uint64_t v85 = v88;
      *(void *)(v85 + 8) = v87;
    }
  }
  return a1;
}

uint64_t sub_1002D8C88(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + 8;
  swift_bridgeObjectRelease();
  sub_10024D338(v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  long long v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v10 = v5 + v9[5];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v5 + v9[6];
  if (!v8(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = v5 + v9[7];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v5 + v9[8];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v5 + v9[9];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v5 + v9[10];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v5 + v9[11];
  if (!v8(v16, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = v5 + v9[12];
  if (!v8(v17, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = v5 + v9[14];
  if (!v8(v18, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = v5 + v9[15];
  if (!v8(v19, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = v5 + v9[16];
  if (!v8(v20, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = v5 + v9[17];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_100250CC4(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  uint64_t v23 = (uint64_t *)(a1 + a2[8]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15)
  {
    uint64_t v25 = *v23;
    return sub_100250CC4(v25, v24);
  }
  return result;
}

uint64_t sub_1002D90E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 8, v6, v8);
  uint64_t v88 = a3;
  uint64_t v89 = a2;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  if (v15(&v12[v18], 1, v13))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v17[6];
  uint64_t v23 = &v11[v22];
  unint64_t v24 = &v12[v22];
  if (v15(&v12[v22], 1, v13))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  uint64_t v26 = v17[7];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  if (v15(&v12[v26], 1, v13))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v27, v28, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v17[8];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  if (v15(&v12[v30], 1, v13))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
  }
  uint64_t v34 = v17[9];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  if (v15(&v12[v34], 1, v13))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v35, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  }
  uint64_t v38 = v17[10];
  uint64_t v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  if (v15(&v12[v38], 1, v13))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  uint64_t v42 = v17[11];
  uint64_t v43 = &v11[v42];
  uint64_t v44 = &v12[v42];
  if (v15(&v12[v42], 1, v13))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = v17[12];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  if (v15(&v12[v46], 1, v13))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v47, 0, 1, v13);
  }
  v11[v17[13]] = v12[v17[13]];
  uint64_t v50 = v17[14];
  uint64_t v51 = &v11[v50];
  uint64_t v52 = &v12[v50];
  if (v15(&v12[v50], 1, v13))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v51, v52, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v51, 0, 1, v13);
  }
  uint64_t v54 = v17[15];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  if (v15(&v12[v54], 1, v13))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v56, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
  }
  uint64_t v58 = v17[16];
  uint64_t v59 = &v11[v58];
  uint64_t v60 = &v12[v58];
  if (v15(&v12[v58], 1, v13))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v59, v60, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v13);
  }
  uint64_t v62 = v17[17];
  uint64_t v63 = &v11[v62];
  uint64_t v64 = &v12[v62];
  if (v15(&v12[v62], 1, v13))
  {
    uint64_t v65 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v63, v64, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v63, 0, 1, v13);
  }
  uint64_t v66 = v17[18];
  uint64_t v67 = &v11[v66];
  uint64_t v68 = &v12[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v11[v17[19]] = v12[v17[19]];
  uint64_t v69 = v17[20];
  uint64_t v70 = &v11[v69];
  uint64_t v71 = &v12[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = v17[21];
  uint64_t v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  uint64_t v77 = *(int *)(v88 + 28);
  uint64_t v78 = (uint64_t *)(a1 + v77);
  uint64_t v79 = (uint64_t *)(v89 + v77);
  uint64_t v80 = *v79;
  unint64_t v81 = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10025ADCC(v80, v81);
  *uint64_t v78 = v80;
  v78[1] = v81;
  uint64_t v82 = *(int *)(v88 + 32);
  uint64_t v83 = a1 + v82;
  uint64_t v84 = (uint64_t *)(v89 + v82);
  unint64_t v85 = v84[1];
  if (v85 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
  }
  else
  {
    uint64_t v86 = *v84;
    sub_10025ADCC(*v84, v84[1]);
    *(void *)uint64_t v83 = v86;
    *(void *)(v83 + 8) = v85;
  }
  return a1;
}

void *sub_1002D9A88(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4(a1 + 1, v6);
  unint64_t v115 = a2;
  uint64_t v7 = a3[6];
  uint64_t v116 = a1;
  uint64_t v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1, v10);
  int v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  unint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1, v10);
  int v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1, v10);
  int v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1, v10);
  int v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1, v10);
  int v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1, v10);
  int v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1, v10);
  int v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1, v10);
  int v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1, v10);
  int v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1, v10);
  int v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  unint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1, v10);
  int v87 = v12(v85, 1, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  int v92 = *(_DWORD *)v91;
  v90[4] = v91[4];
  *(_DWORD *)uint64_t v90 = v92;
  v8[v16[19]] = v9[v16[19]];
  uint64_t v93 = v16[20];
  uint64_t v94 = &v8[v93];
  uint64_t v95 = &v9[v93];
  *(void *)uint64_t v94 = *(void *)v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = v16[21];
  uint64_t v97 = &v8[v96];
  id v98 = &v9[v96];
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = *((void *)v98 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v99 = a3[7];
  uint64_t v100 = (void *)((char *)v116 + v99);
  uint64_t v101 = (void *)((char *)v115 + v99);
  uint64_t v102 = *v101;
  unint64_t v103 = v101[1];
  sub_10025ADCC(*v101, v103);
  uint64_t v104 = *v100;
  unint64_t v105 = v100[1];
  *uint64_t v100 = v102;
  v100[1] = v103;
  sub_100250CC4(v104, v105);
  uint64_t v106 = a3[8];
  uint64_t v107 = (void *)((char *)v116 + v106);
  int v108 = (void *)((char *)v115 + v106);
  unint64_t v109 = *(void *)((char *)v115 + v106 + 8);
  if (*(void *)((char *)v116 + v106 + 8) >> 60 != 15)
  {
    if (v109 >> 60 != 15)
    {
      uint64_t v111 = *v108;
      sub_10025ADCC(*v108, v109);
      uint64_t v112 = *v107;
      unint64_t v113 = v107[1];
      uint64_t *v107 = v111;
      v107[1] = v109;
      sub_100250CC4(v112, v113);
      return v116;
    }
    sub_10026F904((uint64_t)v107);
    goto LABEL_84;
  }
  if (v109 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
    return v116;
  }
  uint64_t v110 = *v108;
  sub_10025ADCC(*v108, v109);
  uint64_t *v107 = v110;
  v107[1] = v109;
  return v116;
}

uint64_t sub_1002DA95C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = a3[6];
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  long long v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  int v13 = &v5[v12];
  int v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  int v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  uint64_t v25 = &v5[v24];
  int v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  int v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  uint64_t v37 = &v5[v36];
  int v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  int v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  uint64_t v49 = &v5[v48];
  int v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  int v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  uint64_t v61 = &v5[v60];
  int v62 = &v6[v60];
  *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  *(_OWORD *)&v5[v11[20]] = *(_OWORD *)&v6[v11[20]];
  *(_OWORD *)&v5[v11[21]] = *(_OWORD *)&v6[v11[21]];
  uint64_t v63 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v63) = *(_OWORD *)(a2 + v63);
  return a1;
}

uint64_t sub_1002DB264(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v111 = a2;
  uint64_t v6 = a3[6];
  uint64_t v112 = a1;
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v83, v84, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v83, v84, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  uint64_t v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
  v89[4] = v90[4];
  v7[v15[19]] = v8[v15[19]];
  uint64_t v91 = v15[20];
  int v92 = &v7[v91];
  uint64_t v93 = &v8[v91];
  uint64_t v95 = *(void *)v93;
  uint64_t v94 = *((void *)v93 + 1);
  *(void *)int v92 = v95;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = v15[21];
  uint64_t v97 = &v7[v96];
  id v98 = &v8[v96];
  uint64_t v100 = *(void *)v98;
  uint64_t v99 = *((void *)v98 + 1);
  *(void *)uint64_t v97 = v100;
  *((void *)v97 + 1) = v99;
  swift_bridgeObjectRelease();
  uint64_t v101 = a3[7];
  uint64_t v102 = *(void *)(v112 + v101);
  unint64_t v103 = *(void *)(v112 + v101 + 8);
  *(_OWORD *)(v112 + v101) = *(_OWORD *)(v111 + v101);
  sub_100250CC4(v102, v103);
  uint64_t v104 = a3[8];
  unint64_t v105 = (uint64_t *)(v112 + v104);
  uint64_t v106 = (uint64_t *)(v111 + v104);
  unint64_t v107 = *(void *)(v112 + v104 + 8);
  if (v107 >> 60 != 15)
  {
    unint64_t v108 = v106[1];
    if (v108 >> 60 != 15)
    {
      uint64_t v109 = *v105;
      *unint64_t v105 = *v106;
      v105[1] = v108;
      sub_100250CC4(v109, v107);
      return v112;
    }
    sub_10026F904((uint64_t)v105);
  }
  *(_OWORD *)unint64_t v105 = *(_OWORD *)v106;
  return v112;
}

uint64_t sub_1002DC0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002DC0F0);
}

uint64_t sub_1002DC0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002DC108);
}

uint64_t _s10NanoWalletV17InitialKeyContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096DA70);
}

uint64_t sub_1002DC12C()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002DC1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002BEBA4(v2 + *(int *)(a1 + 32), a2);
}

uint64_t sub_1002DC1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3 + *(int *)(a3 + 40);
  uint64_t result = sub_100250CB0(*(void *)v6, *(void *)(v6 + 8));
  *(void *)uint64_t v6 = a1;
  *(void *)(v6 + 8) = a2;
  return result;
}

uint64_t sub_1002DC23C(uint64_t a1, uint64_t a2)
{
  return sub_1002DCD0C(a1, a2, (uint64_t (*)(void))sub_1002D33EC);
}

uint64_t sub_1002DC268(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

uint64_t sub_1002DC278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002DD5EC(v2 + *(int *)(a1 + 24), a2, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
}

id sub_1002DC2B0()
{
  uint64_t v1 = *(int *)(_s10NanoWalletV20HandleRequestContextVMa(0) + 48);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }
  id result = [objc_allocWithZone((Class)SDAuthenticationResponse) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_1002DC320(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096BBB0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100771F40;
  if (qword_100969B60 != -1) {
    swift_once();
  }
  *(void *)(v9 + 56) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v9 + 64) = &off_100971848;
  *(void *)(v9 + 96) = &type metadata for SDAuthentication.Operation.RangeAsResponder;
  *(void *)(v9 + 104) = &off_100971A88;
  *(void *)(v9 + 136) = &type metadata for SDAuthentication.Operation.IncludeAWDLInfoInMessage;
  *(void *)(v9 + 144) = &off_100971828;
  *(void *)(v9 + 176) = &type metadata for SDAuthentication.Operation.SendResponseMessage;
  *(void *)(v9 + 184) = &off_100971C48;
  *a3 = v9;
  uint64_t v10 = (int *)_s10NanoWalletV20HandleRequestContextVMa(0);
  uint64_t v11 = v10[12];
  *(uint64_t *)((char *)a3 + v11) = 0;
  *((unsigned char *)a3 + v10[13]) = 1;
  if ([a1 hasVersion]
    && [a1 hasType]
    && [a1 hasAwdlInfo]
    && [a1 hasRangingToken]
    && [a1 hasUnlockDate])
  {
    uint64_t v12 = _s10NanoWalletV17InitialKeyContextVMa(0);
    sub_1002DD5EC(a2 + *(int *)(v12 + 24), (uint64_t)a3 + v10[6], (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    sub_100278C8C(a2 + 8, (uint64_t)(a3 + 1));
    int v13 = (uint64_t *)(a2 + *(int *)(v12 + 28));
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = (uint64_t *)((char *)a3 + v10[10]);
    *uint64_t v16 = v14;
    v16[1] = v15;
    sub_10025ADCC(v14, v15);
    *(_DWORD *)((char *)a3 + v10[9]) = [a1 version];
    id v17 = [a1 awdlInfo];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v20;

      uint64_t v21 = (uint64_t *)((char *)a3 + v10[11]);
      uint64_t v22 = v39;
      *uint64_t v21 = v19;
      v21[1] = v22;
      id v23 = [a1 rangingToken];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v39 = v26;

        uint64_t v27 = (uint64_t *)((char *)a3 + v10[8]);
        uint64_t v28 = v39;
        *uint64_t v27 = v25;
        v27[1] = v28;
        [a1 unlockDate];
        Date.init(timeIntervalSince1970:)();

        sub_1002DD58C(a2, _s10NanoWalletV17InitialKeyContextVMa);
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))((char *)a3 + v10[7], v8, v6);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    id v29 = [a1 description];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();

    uint64_t v40 = v30;
    unint64_t v41 = v32;
    v33._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v33._object = (void *)0x80000001007B8510;
    String.append(_:)(v33);
    v34._object = (void *)0x8000000100772120;
    v34._uint64_t countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v34);
    uint64_t v35 = v40;
    unint64_t v36 = v41;
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v37 = 1;
    *(void *)(v37 + 8) = v35;
    *(void *)(v37 + 16) = v36;
    swift_willThrow();

    sub_1002DD58C(a2, _s10NanoWalletV17InitialKeyContextVMa);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002DC770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1002DC7E0(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 40);
  uint64_t v3 = *(void *)v2;
  sub_10025ADCC(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1002DC81C(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 44);
  uint64_t v3 = *(void *)v2;
  sub_10025ADCC(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1002DC85C(uint64_t a1, uint64_t a2)
{
  return sub_1002DCD0C(a1, a2, (uint64_t (*)(void))sub_1002DC2B0);
}

id sub_1002DC888()
{
  uint64_t v1 = *(int *)(_s10NanoWalletV21HandleResponseContextVMa(0) + 40);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }
  id result = [objc_allocWithZone((Class)SDAuthenticationConfirmation) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_1002DC8F8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1007706B0;
  if (qword_100969B60 != -1) {
    swift_once();
  }
  *(void *)(v6 + 56) = &type metadata for SDAuthentication.Operation.RecordKeyExchangeEnd;
  *(void *)(v6 + 64) = &off_100971C88;
  *(void *)(v6 + 96) = &type metadata for SDAuthentication.Operation.RecordAWDLBringUpStart;
  *(void *)(v6 + 104) = &off_100971A68;
  *(void *)(v6 + 136) = &type metadata for SDAuthentication.Operation.RangeAsInitiator;
  *(void *)(v6 + 144) = &off_100971A48;
  *(void *)(v6 + 176) = &type metadata for SDAuthentication.Operation.SendConfirmation;
  *(void *)(v6 + 184) = &off_100971EC8;
  *(void *)(v6 + 216) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(void *)(v6 + 224) = &off_100971BC8;
  *a3 = v6;
  uint64_t v7 = (int *)_s10NanoWalletV21HandleResponseContextVMa(0);
  uint64_t v8 = v7[10];
  *(uint64_t *)((char *)a3 + v8) = 0;
  *((unsigned char *)a3 + v7[11]) = 2;
  uint64_t v9 = _s10NanoWalletV18InitialLockContextVMa(0);
  uint64_t v10 = a2 + *(int *)(v9 + 40);
  unint64_t v11 = *(void *)(v10 + 8);
  if (v11 >> 60 == 15)
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = 10;
    *(void *)(v12 + 8) = 0xD000000000000015;
    *(void *)(v12 + 16) = 0x80000001007B8530;
    swift_willThrow();

LABEL_9:
    sub_1002DD58C(a2, _s10NanoWalletV18InitialLockContextVMa);
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v13 = v9;
  uint64_t v14 = *(void *)v10;
  sub_10025ADCC(*(void *)v10, *(void *)(v10 + 8));
  if (![a1 hasAwdlInfo])
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)(v21 + 8) = 0xD000000000000011;
    *(void *)(v21 + 16) = 0x80000001007B8550;
    swift_willThrow();

    sub_100250CB0(v14, v11);
    goto LABEL_9;
  }
  sub_1002DD5EC(a2 + *(int *)(v13 + 24), (uint64_t)a3 + v7[5], (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
  sub_100278C8C(a2 + 8, (uint64_t)a3 + v7[6]);
  unint64_t v15 = (uint64_t *)((char *)a3 + v7[7]);
  *unint64_t v15 = v14;
  v15[1] = v11;
  sub_10025ADCC(v14, v11);
  *(_DWORD *)((char *)a3 + v7[8]) = [a1 version];
  id v16 = [a1 awdlInfo];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v19;

    sub_100250CB0(v14, v11);
    sub_1002DD58C(a2, _s10NanoWalletV18InitialLockContextVMa);
    uint64_t v20 = (uint64_t *)((char *)a3 + v7[9]);
    *uint64_t v20 = v18;
    v20[1] = v22;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002DCC2C(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 36);
  uint64_t v3 = *(void *)v2;
  sub_10025ADCC(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1002DCC68(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 28);
  uint64_t v3 = *(void *)v2;
  sub_10025ADCC(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1002DCCA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002DD5EC(v2 + *(int *)(a1 + 20), a2, (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t sub_1002DCCE0(uint64_t a1, uint64_t a2)
{
  return sub_1002DCD0C(a1, a2, (uint64_t (*)(void))sub_1002DC888);
}

uint64_t sub_1002DCD0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = (void *)a3();
  id v4 = [v3 data];

  if (v4)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return v5;
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 10;
    *(void *)(v7 + 8) = 0xD00000000000001ALL;
    *(void *)(v7 + 16) = 0x80000001007B72F0;
    return swift_willThrow();
  }
}

uint64_t sub_1002DCDD0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_1002DCDDC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10000A844(&qword_10096BBB0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100770AD0;
  if (qword_100969B60 != -1) {
    swift_once();
  }
  *(void *)(v6 + 56) = &type metadata for SDAuthentication.Operation.HandleSucceededResult;
  *(void *)(v6 + 64) = &off_100971EA8;
  *(void *)(v6 + 96) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(void *)(v6 + 104) = &off_100971BC8;
  *a3 = v6;
  if ([a1 hasSuccess])
  {
    uint64_t v7 = a2 + *(int *)(_s10NanoWalletV20HandleRequestContextVMa(0) + 24);
    uint64_t v8 = _s10NanoWalletV25HandleConfirmationContextVMa(0);
    sub_1002DD5EC(v7, (uint64_t)a3 + *(int *)(v8 + 24), (uint64_t (*)(void))type metadata accessor for SDAuthenticationSessionMetrics);
    sub_100278C8C(a2 + 8, (uint64_t)(a3 + 1));
    LOBYTE(v7) = [a1 success];

    uint64_t result = sub_1002DD58C(a2, _s10NanoWalletV20HandleRequestContextVMa);
    *((unsigned char *)a3 + *(int *)(v8 + 28)) = v7;
  }
  else
  {
    sub_10024D280();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 1;
    *(void *)(v10 + 8) = 0xD000000000000016;
    *(void *)(v10 + 16) = 0x80000001007B72D0;
    swift_willThrow();

    sub_1002DD58C(a2, _s10NanoWalletV20HandleRequestContextVMa);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1002DCFB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v32 = _s10NanoWalletV25HandleConfirmationContextVMa(0);
  __chkstk_darwin(v32);
  Swift::String v34 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = _s10NanoWalletV18InitialLockContextVMa(0);
  __chkstk_darwin(v35);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = _s10NanoWalletV21HandleResponseContextVMa(0);
  __chkstk_darwin(v33);
  uint64_t v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = _s10NanoWalletV17InitialKeyContextVMa(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = _s10NanoWalletV20HandleRequestContextVMa(0);
  uint64_t v13 = __chkstk_darwin(v36);
  unint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v17 = (uint64_t *)((char *)&v32 - v16);
  sub_100278C8C(a1, (uint64_t)v39);
  sub_10000A844(&qword_100977940);
  sub_10000B740(0, &qword_10096BDD0);
  if (!swift_dynamicCast())
  {
    uint64_t v25 = v38;
    sub_100278C8C(a1, (uint64_t)v39);
    sub_10000B740(0, &qword_10096BDD8);
    if (swift_dynamicCast())
    {
      uint64_t v26 = v40;
      sub_100278C8C(a2, (uint64_t)v39);
      id v19 = v26;
      sub_10000A844(&qword_10096BDF0);
      swift_dynamicCast();
      sub_1002DC8F8(v19, (uint64_t)v7, v9);
      if (v25) {
        goto LABEL_12;
      }
      uint64_t v27 = v37;
      v37[3] = v33;
      v27[4] = (uint64_t)&off_1008D6168;
      uint64_t v22 = sub_100278AE4(v27);
      uint64_t v28 = _s10NanoWalletV21HandleResponseContextVMa;
    }
    else
    {
      sub_100278C8C(a1, (uint64_t)v39);
      sub_10000B740(0, &qword_10096BDE8);
      if (!swift_dynamicCast())
      {
        sub_10024D280();
        swift_allocError();
        *(_DWORD *)uint64_t v31 = 10;
        *(void *)(v31 + 8) = 0xD00000000000001FLL;
        *(void *)(v31 + 16) = 0x80000001007B6FF0;
        swift_willThrow();
        return;
      }
      id v29 = v40;
      sub_100278C8C(a2, (uint64_t)v39);
      id v19 = v29;
      sub_10000A844(&qword_10096BDF0);
      swift_dynamicCast();
      uint64_t v9 = v34;
      sub_1002DCDDC(v19, (uint64_t)v15, v34);
      if (v25) {
        goto LABEL_12;
      }
      uint64_t v30 = v37;
      v37[3] = v32;
      v30[4] = (uint64_t)&off_1008D6180;
      uint64_t v22 = sub_100278AE4(v30);
      uint64_t v28 = _s10NanoWalletV25HandleConfirmationContextVMa;
    }
    id v23 = v28;
    uint64_t v24 = (uint64_t)v9;
    goto LABEL_11;
  }
  uint64_t v18 = v40;
  sub_100278C8C(a2, (uint64_t)v39);
  id v19 = v18;
  sub_10000A844(&qword_10096BDF0);
  swift_dynamicCast();
  uint64_t v20 = v38;
  sub_1002DC320(v19, (uint64_t)v12, v17);
  if (!v20)
  {
    uint64_t v21 = v37;
    v37[3] = v36;
    v21[4] = (uint64_t)&off_1008D6150;
    uint64_t v22 = sub_100278AE4(v21);
    id v23 = _s10NanoWalletV20HandleRequestContextVMa;
    uint64_t v24 = (uint64_t)v17;
LABEL_11:
    sub_1002DD524(v24, (uint64_t)v22, v23);
  }
LABEL_12:
}

uint64_t sub_1002DD478@<X0>(uint64_t a1@<X8>)
{
  return sub_1002DD5EC(v1, a1, (uint64_t (*)(void))type metadata accessor for SDAuthenticationCommonOperationInput);
}

void sub_1002DD4AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t _s10NanoWalletV25HandleConfirmationContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096DC68);
}

uint64_t _s10NanoWalletV21HandleResponseContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096DBC0);
}

uint64_t _s10NanoWalletV20HandleRequestContextVMa(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096DB10);
}

uint64_t sub_1002DD524(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002DD58C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002DD5EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002DD654(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2 + 1;
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain();
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    id v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v102 = a3;
    unint64_t v103 = a2;
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    id v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1, v15))
    {
      uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
    }
    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    if (v17(&v14[v24], 1, v15))
    {
      uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
    uint64_t v28 = v19[7];
    id v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1, v15))
    {
      uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
    }
    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    Swift::String v34 = &v14[v32];
    if (v17(&v14[v32], 1, v15))
    {
      uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0, 1, v15);
    }
    uint64_t v36 = v19[9];
    uint64_t v37 = &v13[v36];
    uint64_t v38 = &v14[v36];
    if (v17(&v14[v36], 1, v15))
    {
      uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0, 1, v15);
    }
    uint64_t v40 = v19[10];
    unint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1, v15))
    {
      uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0, 1, v15);
    }
    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1, v15))
    {
      uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
    }
    uint64_t v48 = v19[12];
    int v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1, v15))
    {
      uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
    }
    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1, v15))
    {
      uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v15);
    }
    uint64_t v56 = v19[15];
    uint64_t v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1, v15))
    {
      uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
    }
    uint64_t v60 = v19[16];
    int v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1, v15))
    {
      uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
    }
    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1, v15))
    {
      uint64_t v67 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0, 1, v15);
    }
    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    uint64_t v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    int v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v102[7];
    uint64_t v80 = a1 + v79;
    uint64_t v81 = (uint64_t)v103 + v79;
    uint64_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82(v80, v81, v15);
    uint64_t v83 = v102[8];
    uint64_t v84 = (uint64_t *)(a1 + v83);
    int v85 = (uint64_t *)((char *)v103 + v83);
    uint64_t v86 = *v85;
    unint64_t v87 = v85[1];
    sub_10025ADCC(*v85, v87);
    uint64_t *v84 = v86;
    v84[1] = v87;
    uint64_t v88 = v102[10];
    *(_DWORD *)(a1 + v102[9]) = *(_DWORD *)((char *)v103 + v102[9]);
    uint64_t v89 = (uint64_t *)(a1 + v88);
    uint64_t v90 = *(uint64_t *)((char *)v103 + v88);
    unint64_t v91 = *(uint64_t *)((char *)v103 + v88 + 8);
    sub_10025ADCC(v90, v91);
    uint64_t *v89 = v90;
    v89[1] = v91;
    uint64_t v92 = v102[11];
    uint64_t v93 = (uint64_t *)(a1 + v92);
    uint64_t v94 = (uint64_t *)((char *)v103 + v92);
    uint64_t v95 = *v94;
    unint64_t v96 = v94[1];
    sub_10025ADCC(*v94, v96);
    *uint64_t v93 = v95;
    v93[1] = v96;
    uint64_t v97 = v102[12];
    uint64_t v98 = v102[13];
    uint64_t v99 = *(void **)((char *)v103 + v97);
    *(void *)(a1 + v97) = v99;
    *(unsigned char *)(a1 + v98) = *((unsigned char *)v103 + v98);
    id v100 = v99;
  }
  return a1;
}

void sub_1002DE094(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + 8;
  swift_bridgeObjectRelease();
  sub_10024D338(v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  long long v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v10 = v5 + v9[5];
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v5 + v9[6];
  if (!v8(v11, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = v5 + v9[7];
  if (!v8(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = v5 + v9[8];
  if (!v8(v13, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = v5 + v9[9];
  if (!v8(v14, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = v5 + v9[10];
  if (!v8(v15, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = v5 + v9[11];
  if (!v8(v16, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = v5 + v9[12];
  if (!v8(v17, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = v5 + v9[14];
  if (!v8(v18, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = v5 + v9[15];
  if (!v8(v19, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = v5 + v9[16];
  if (!v8(v20, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = v5 + v9[17];
  if (!v8(v21, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1 + a2[7], v6);
  sub_100250CC4(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  sub_100250CC4(*(void *)(a1 + a2[10]), *(void *)(a1 + a2[10] + 8));
  sub_100250CC4(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
  uint64_t v22 = *(void **)(a1 + a2[12]);
}

uint64_t sub_1002DE4FC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a2 + 8;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v8 = v7;
  long long v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_bridgeObjectRetain();
  v9(a1 + 8, v6, v8);
  id v100 = a3;
  uint64_t v101 = a2;
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = &v12[v18];
  if (v15(&v12[v18], 1, v13))
  {
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
  }
  uint64_t v22 = v17[6];
  uint64_t v23 = &v11[v22];
  uint64_t v24 = &v12[v22];
  if (v15(&v12[v22], 1, v13))
  {
    uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  uint64_t v26 = v17[7];
  uint64_t v27 = &v11[v26];
  uint64_t v28 = &v12[v26];
  if (v15(&v12[v26], 1, v13))
  {
    uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v27, v28, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v27, 0, 1, v13);
  }
  uint64_t v30 = v17[8];
  uint64_t v31 = &v11[v30];
  uint64_t v32 = &v12[v30];
  if (v15(&v12[v30], 1, v13))
  {
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
  }
  uint64_t v34 = v17[9];
  uint64_t v35 = &v11[v34];
  uint64_t v36 = &v12[v34];
  if (v15(&v12[v34], 1, v13))
  {
    uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v35, v36, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  }
  uint64_t v38 = v17[10];
  uint64_t v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  if (v15(&v12[v38], 1, v13))
  {
    uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  }
  uint64_t v42 = v17[11];
  uint64_t v43 = &v11[v42];
  uint64_t v44 = &v12[v42];
  if (v15(&v12[v42], 1, v13))
  {
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v43, v44, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v43, 0, 1, v13);
  }
  uint64_t v46 = v17[12];
  uint64_t v47 = &v11[v46];
  uint64_t v48 = &v12[v46];
  if (v15(&v12[v46], 1, v13))
  {
    uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v47, v48, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v47, 0, 1, v13);
  }
  v11[v17[13]] = v12[v17[13]];
  uint64_t v50 = v17[14];
  uint64_t v51 = &v11[v50];
  uint64_t v52 = &v12[v50];
  if (v15(&v12[v50], 1, v13))
  {
    uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v51, v52, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v51, 0, 1, v13);
  }
  uint64_t v54 = v17[15];
  uint64_t v55 = &v11[v54];
  uint64_t v56 = &v12[v54];
  if (v15(&v12[v54], 1, v13))
  {
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v56, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v55, 0, 1, v13);
  }
  uint64_t v58 = v17[16];
  uint64_t v59 = &v11[v58];
  uint64_t v60 = &v12[v58];
  if (v15(&v12[v58], 1, v13))
  {
    uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v59, v60, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v59, 0, 1, v13);
  }
  uint64_t v62 = v17[17];
  uint64_t v63 = &v11[v62];
  uint64_t v64 = &v12[v62];
  if (v15(&v12[v62], 1, v13))
  {
    uint64_t v65 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v63, v64, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v63, 0, 1, v13);
  }
  uint64_t v66 = v17[18];
  uint64_t v67 = &v11[v66];
  uint64_t v68 = &v12[v66];
  *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v11[v17[19]] = v12[v17[19]];
  uint64_t v69 = v17[20];
  uint64_t v70 = &v11[v69];
  uint64_t v71 = &v12[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = v17[21];
  uint64_t v74 = &v11[v73];
  uint64_t v75 = &v12[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  uint64_t v77 = v100[7];
  uint64_t v78 = a1 + v77;
  uint64_t v79 = v101 + v77;
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v80(v78, v79, v13);
  uint64_t v81 = v100[8];
  uint64_t v82 = (uint64_t *)(a1 + v81);
  uint64_t v83 = (uint64_t *)(v101 + v81);
  uint64_t v84 = *v83;
  unint64_t v85 = v83[1];
  sub_10025ADCC(*v83, v85);
  *uint64_t v82 = v84;
  v82[1] = v85;
  uint64_t v86 = v100[10];
  *(_DWORD *)(a1 + v100[9]) = *(_DWORD *)(v101 + v100[9]);
  unint64_t v87 = (uint64_t *)(a1 + v86);
  uint64_t v88 = *(void *)(v101 + v86);
  unint64_t v89 = *(void *)(v101 + v86 + 8);
  sub_10025ADCC(v88, v89);
  *unint64_t v87 = v88;
  v87[1] = v89;
  uint64_t v90 = v100[11];
  unint64_t v91 = (uint64_t *)(a1 + v90);
  uint64_t v92 = (uint64_t *)(v101 + v90);
  uint64_t v93 = *v92;
  unint64_t v94 = v92[1];
  sub_10025ADCC(*v92, v94);
  uint64_t *v91 = v93;
  v91[1] = v94;
  uint64_t v95 = v100[12];
  uint64_t v96 = v100[13];
  uint64_t v97 = *(void **)(v101 + v95);
  *(void *)(a1 + v95) = v97;
  *(unsigned char *)(a1 + v96) = *(unsigned char *)(v101 + v96);
  id v98 = v97;
  return a1;
}

char *sub_1002DEEF4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4(a1 + 1, v6);
  unint64_t v125 = (char *)a2;
  uint64_t v7 = a3[6];
  uint64_t v126 = (char *)a1;
  uint64_t v8 = (char *)a1 + v7;
  long long v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1, v10);
  int v21 = v12(v19, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1, v10);
  int v27 = v12(v25, 1, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1, v10);
  int v33 = v12(v31, 1, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1, v10);
  int v39 = v12(v37, 1, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v10);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1, v10);
  int v45 = v12(v43, 1, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0, 1, v10);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1, v10);
  int v51 = v12(v49, 1, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0, 1, v10);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1, v10);
  int v57 = v12(v55, 1, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1, v10);
  int v63 = v12(v61, 1, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0, 1, v10);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1, v10);
  int v69 = v12(v67, 1, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0, 1, v10);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1, v10);
  int v75 = v12(v73, 1, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0, 1, v10);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1, v10);
  int v81 = v12(v79, 1, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0, 1, v10);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  unint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1, v10);
  int v87 = v12(v85, 1, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v84, v85, v10);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }
  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0, 1, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  unint64_t v91 = &v9[v89];
  int v92 = *(_DWORD *)v91;
  v90[4] = v91[4];
  *(_DWORD *)uint64_t v90 = v92;
  v8[v16[19]] = v9[v16[19]];
  uint64_t v93 = v16[20];
  unint64_t v94 = &v8[v93];
  uint64_t v95 = &v9[v93];
  *(void *)unint64_t v94 = *(void *)v95;
  *((void *)v94 + 1) = *((void *)v95 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v96 = v16[21];
  uint64_t v97 = &v8[v96];
  id v98 = &v9[v96];
  *(void *)uint64_t v97 = *(void *)v98;
  *((void *)v97 + 1) = *((void *)v98 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(&v126[a3[7]], &v125[a3[7]], v10);
  uint64_t v99 = a3[8];
  id v100 = (uint64_t *)&v126[v99];
  uint64_t v101 = (uint64_t *)&v125[v99];
  uint64_t v102 = *v101;
  unint64_t v103 = v101[1];
  sub_10025ADCC(*v101, v103);
  uint64_t v104 = *v100;
  unint64_t v105 = v100[1];
  *id v100 = v102;
  v100[1] = v103;
  sub_100250CC4(v104, v105);
  *(_DWORD *)&v126[a3[9]] = *(_DWORD *)&v125[a3[9]];
  uint64_t v106 = a3[10];
  unint64_t v107 = (uint64_t *)&v126[v106];
  unint64_t v108 = (uint64_t *)&v125[v106];
  uint64_t v109 = *v108;
  unint64_t v110 = v108[1];
  sub_10025ADCC(*v108, v110);
  uint64_t v111 = *v107;
  unint64_t v112 = v107[1];
  uint64_t *v107 = v109;
  v107[1] = v110;
  sub_100250CC4(v111, v112);
  uint64_t v113 = a3[11];
  uint64_t v114 = (uint64_t *)&v126[v113];
  unint64_t v115 = (uint64_t *)&v125[v113];
  uint64_t v116 = *v115;
  unint64_t v117 = v115[1];
  sub_10025ADCC(*v115, v117);
  uint64_t v118 = *v114;
  unint64_t v119 = v114[1];
  *uint64_t v114 = v116;
  v114[1] = v117;
  sub_100250CC4(v118, v119);
  uint64_t v120 = a3[12];
  uint64_t v121 = *(void **)&v126[v120];
  uint64_t v122 = *(void **)&v125[v120];
  *(void *)&v126[v120] = v122;
  id v123 = v122;

  v126[a3[13]] = v125[a3[13]];
  return v126;
}

uint64_t sub_1002DFDF0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = a3[6];
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  long long v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  int v13 = &v5[v12];
  int v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  int v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  uint64_t v25 = &v5[v24];
  int v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  int v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  uint64_t v37 = &v5[v36];
  int v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  int v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  uint64_t v49 = &v5[v48];
  int v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  int v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  }
  else
  {
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v60(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v61 = v11[18];
  int v62 = &v5[v61];
  int v63 = &v6[v61];
  *(_DWORD *)int v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v5[v11[19]] = v6[v11[19]];
  *(_OWORD *)&v5[v11[20]] = *(_OWORD *)&v6[v11[20]];
  *(_OWORD *)&v5[v11[21]] = *(_OWORD *)&v6[v11[21]];
  v60((char *)(a1 + a3[7]), (char *)(a2 + a3[7]), v7);
  uint64_t v64 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v64) = *(_DWORD *)(a2 + v64);
  uint64_t v65 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v65) = *(_OWORD *)(a2 + v65);
  uint64_t v66 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v66) = *(unsigned char *)(a2 + v66);
  return a1;
}

uint64_t sub_1002E0748(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v115 = a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v116 = v10;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  uint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (v85)
  {
    if (v86)
    {
      uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
      uint64_t v88 = v116;
    }
    else
    {
      uint64_t v88 = v116;
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v83, v84, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v83, 0, 1, v9);
    }
  }
  else
  {
    uint64_t v88 = v116;
    if (v86)
    {
      (*(void (**)(char *, uint64_t))(v116 + 8))(v83, v9);
      uint64_t v89 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v83, v84, *(void *)(*(void *)(v89 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v116 + 40))(v83, v84, v9);
    }
  }
  uint64_t v90 = v15[18];
  unint64_t v91 = &v7[v90];
  int v92 = &v8[v90];
  *(_DWORD *)unint64_t v91 = *(_DWORD *)v92;
  v91[4] = v92[4];
  v7[v15[19]] = v8[v15[19]];
  uint64_t v93 = v15[20];
  unint64_t v94 = &v7[v93];
  uint64_t v95 = &v8[v93];
  uint64_t v97 = *(void *)v95;
  uint64_t v96 = *((void *)v95 + 1);
  *(void *)unint64_t v94 = v97;
  *((void *)v94 + 1) = v96;
  swift_bridgeObjectRelease();
  uint64_t v98 = v15[21];
  uint64_t v99 = &v7[v98];
  id v100 = &v8[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 40))(a1 + a3[7], v115 + a3[7], v9);
  uint64_t v103 = a3[8];
  uint64_t v104 = *(void *)(a1 + v103);
  unint64_t v105 = *(void *)(a1 + v103 + 8);
  *(_OWORD *)(a1 + v103) = *(_OWORD *)(v115 + v103);
  sub_100250CC4(v104, v105);
  uint64_t v106 = a3[10];
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(v115 + a3[9]);
  uint64_t v107 = *(void *)(a1 + v106);
  unint64_t v108 = *(void *)(a1 + v106 + 8);
  *(_OWORD *)(a1 + v106) = *(_OWORD *)(v115 + v106);
  sub_100250CC4(v107, v108);
  uint64_t v109 = a3[11];
  uint64_t v110 = *(void *)(a1 + v109);
  unint64_t v111 = *(void *)(a1 + v109 + 8);
  *(_OWORD *)(a1 + v109) = *(_OWORD *)(v115 + v109);
  sub_100250CC4(v110, v111);
  uint64_t v112 = a3[12];
  uint64_t v113 = *(void **)(a1 + v112);
  *(void *)(a1 + v112) = *(void *)(v115 + v112);

  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(v115 + a3[13]);
  return a1;
}

uint64_t sub_1002E1688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E169C);
}

uint64_t sub_1002E169C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for Date();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1002E17C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E17DC);
}

void *sub_1002E17DC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for Date();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1002E1908()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_1002E1A18(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a3[5];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    uint64_t v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v14 = v13[5];
    uint64_t v15 = &v7[v14];
    uint64_t v16 = &v8[v14];
    if (v11(&v8[v14], 1, v9))
    {
      uint64_t v17 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v16, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    }
    uint64_t v18 = v13[6];
    int v19 = &v7[v18];
    int v20 = &v8[v18];
    if (v11(&v8[v18], 1, v9))
    {
      uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v20, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
    }
    uint64_t v22 = v13[7];
    uint64_t v23 = &v7[v22];
    uint64_t v24 = &v8[v22];
    if (v11(&v8[v22], 1, v9))
    {
      uint64_t v25 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
    }
    uint64_t v26 = v13[8];
    uint64_t v27 = &v7[v26];
    uint64_t v28 = &v8[v26];
    if (v11(&v8[v26], 1, v9))
    {
      uint64_t v29 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, v28, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
    }
    uint64_t v30 = v13[9];
    int v31 = &v7[v30];
    int v32 = &v8[v30];
    if (v11(&v8[v30], 1, v9))
    {
      uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v32, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
    }
    uint64_t v34 = v13[10];
    uint64_t v35 = &v7[v34];
    uint64_t v36 = &v8[v34];
    if (v11(&v8[v34], 1, v9))
    {
      uint64_t v37 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
    }
    uint64_t v38 = v13[11];
    uint64_t v39 = &v7[v38];
    uint64_t v40 = &v8[v38];
    if (v11(&v8[v38], 1, v9))
    {
      uint64_t v41 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v39, v40, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0, 1, v9);
    }
    uint64_t v42 = v13[12];
    int v43 = &v7[v42];
    int v44 = &v8[v42];
    if (v11(&v8[v42], 1, v9))
    {
      uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v44, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0, 1, v9);
    }
    v7[v13[13]] = v8[v13[13]];
    uint64_t v46 = v13[14];
    uint64_t v47 = &v7[v46];
    uint64_t v48 = &v8[v46];
    if (v11(&v8[v46], 1, v9))
    {
      uint64_t v49 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
    }
    uint64_t v50 = v13[15];
    uint64_t v51 = &v7[v50];
    uint64_t v52 = &v8[v50];
    if (v11(&v8[v50], 1, v9))
    {
      uint64_t v53 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v51, v52, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0, 1, v9);
    }
    uint64_t v54 = v13[16];
    int v55 = &v7[v54];
    int v56 = &v8[v54];
    if (v11(&v8[v54], 1, v9))
    {
      uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v55, v56, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0, 1, v9);
    }
    uint64_t v58 = v13[17];
    uint64_t v59 = &v7[v58];
    uint64_t v60 = &v8[v58];
    if (v11(&v8[v58], 1, v9))
    {
      uint64_t v61 = sub_10000A844((uint64_t *)&unk_100975040);
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
    }
    uint64_t v62 = v13[18];
    uint64_t v63 = &v7[v62];
    uint64_t v64 = &v8[v62];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    v7[v13[19]] = v8[v13[19]];
    uint64_t v65 = v13[20];
    uint64_t v66 = &v7[v65];
    int v67 = &v8[v65];
    uint64_t v68 = *((void *)v67 + 1);
    *(void *)uint64_t v66 = *(void *)v67;
    *((void *)v66 + 1) = v68;
    uint64_t v69 = v13[21];
    uint64_t v70 = &v7[v69];
    uint64_t v71 = &v8[v69];
    uint64_t v72 = *((void *)v71 + 1);
    *(void *)uint64_t v70 = *(void *)v71;
    *((void *)v70 + 1) = v72;
    uint64_t v73 = a3[6];
    int v74 = (char *)v5 + v73;
    uint64_t v75 = (char *)a2 + v73;
    long long v76 = *(_OWORD *)((char *)a2 + v73 + 24);
    *(_OWORD *)((char *)v5 + v73 + 24) = v76;
    uint64_t v77 = v76;
    uint64_t v78 = **(void (***)(char *, char *, uint64_t))(v76 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v78(v74, v75, v77);
    uint64_t v79 = a3[7];
    int v80 = (void *)((char *)v5 + v79);
    uint64_t v81 = (void *)((char *)a2 + v79);
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    sub_10025ADCC(*v81, v83);
    *int v80 = v82;
    v80[1] = v83;
    uint64_t v84 = a3[9];
    *(_DWORD *)((char *)v5 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    int v85 = (void *)((char *)v5 + v84);
    uint64_t v86 = *(void *)((char *)a2 + v84);
    unint64_t v87 = *(void *)((char *)a2 + v84 + 8);
    sub_10025ADCC(v86, v87);
    uint64_t *v85 = v86;
    v85[1] = v87;
    uint64_t v88 = a3[10];
    uint64_t v89 = a3[11];
    uint64_t v90 = *(void **)((char *)a2 + v88);
    *(void *)((char *)v5 + v88) = v90;
    *((unsigned char *)v5 + v89) = *((unsigned char *)a2 + v89);
    id v91 = v90;
  }
  return v5;
}

void sub_1002E2438(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v9 = v4 + v8[5];
  if (!v7(v9, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = v4 + v8[6];
  if (!v7(v10, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = v4 + v8[7];
  if (!v7(v11, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = v4 + v8[8];
  if (!v7(v12, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = v4 + v8[9];
  if (!v7(v13, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v13, v5);
  }
  uint64_t v14 = v4 + v8[10];
  if (!v7(v14, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = v4 + v8[11];
  if (!v7(v15, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v16 = v4 + v8[12];
  if (!v7(v16, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = v4 + v8[14];
  if (!v7(v17, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = v4 + v8[15];
  if (!v7(v18, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = v4 + v8[16];
  if (!v7(v19, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = v4 + v8[17];
  if (!v7(v20, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10024D338(a1 + a2[6]);
  sub_100250CC4(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  sub_100250CC4(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v21 = *(void **)(a1 + a2[10]);
}

void *sub_1002E2870(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v5[v12];
  uint64_t v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  uint64_t v25 = &v5[v24];
  uint64_t v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  uint64_t v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  uint64_t v37 = &v5[v36];
  uint64_t v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  uint64_t v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  uint64_t v49 = &v5[v48];
  uint64_t v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  uint64_t v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  uint64_t v61 = &v5[v60];
  uint64_t v62 = &v6[v60];
  *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  uint64_t v63 = v11[20];
  uint64_t v64 = &v5[v63];
  uint64_t v65 = &v6[v63];
  uint64_t v66 = *((void *)v65 + 1);
  *(void *)uint64_t v64 = *(void *)v65;
  *((void *)v64 + 1) = v66;
  uint64_t v67 = v11[21];
  uint64_t v68 = &v5[v67];
  uint64_t v69 = &v6[v67];
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)uint64_t v68 = *(void *)v69;
  *((void *)v68 + 1) = v70;
  uint64_t v71 = a3[6];
  uint64_t v72 = (char *)a1 + v71;
  uint64_t v73 = (char *)a2 + v71;
  long long v74 = *(_OWORD *)((char *)a2 + v71 + 24);
  *(_OWORD *)((char *)a1 + v71 + 24) = v74;
  uint64_t v75 = v74;
  long long v76 = **(void (***)(char *, char *, uint64_t))(v74 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76(v72, v73, v75);
  uint64_t v77 = a3[7];
  uint64_t v78 = (void *)((char *)a1 + v77);
  uint64_t v79 = (void *)((char *)a2 + v77);
  uint64_t v80 = *v79;
  unint64_t v81 = v79[1];
  sub_10025ADCC(*v79, v81);
  *uint64_t v78 = v80;
  v78[1] = v81;
  uint64_t v82 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  unint64_t v83 = (void *)((char *)a1 + v82);
  uint64_t v84 = *(void *)((char *)a2 + v82);
  unint64_t v85 = *(void *)((char *)a2 + v82 + 8);
  sub_10025ADCC(v84, v85);
  uint64_t *v83 = v84;
  v83[1] = v85;
  uint64_t v86 = a3[10];
  uint64_t v87 = a3[11];
  uint64_t v88 = *(void **)((char *)a2 + v86);
  *(void *)((char *)a1 + v86) = v88;
  *((unsigned char *)a1 + v87) = *((unsigned char *)a2 + v87);
  id v89 = v88;
  return a1;
}

void *sub_1002E3230(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v117 = a2;
  uint64_t v6 = a3[5];
  uint64_t v118 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  unint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (!v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v83, v84, v9);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
    goto LABEL_78;
  }
  if (v86)
  {
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v83, v84, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  id v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  int v91 = *(_DWORD *)v90;
  v89[4] = v90[4];
  *(_DWORD *)id v89 = v91;
  v7[v15[19]] = v8[v15[19]];
  uint64_t v92 = v15[20];
  uint64_t v93 = &v7[v92];
  unint64_t v94 = &v8[v92];
  *(void *)uint64_t v93 = *(void *)v94;
  *((void *)v93 + 1) = *((void *)v94 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v95 = v15[21];
  uint64_t v96 = &v7[v95];
  uint64_t v97 = &v8[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  *((void *)v96 + 1) = *((void *)v97 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10026F6D4((void *)((char *)v118 + a3[6]), (void *)((char *)v117 + a3[6]));
  uint64_t v98 = a3[7];
  uint64_t v99 = (void *)((char *)v118 + v98);
  id v100 = (void *)((char *)v117 + v98);
  uint64_t v101 = *v100;
  unint64_t v102 = v100[1];
  sub_10025ADCC(*v100, v102);
  uint64_t v103 = *v99;
  unint64_t v104 = v99[1];
  *uint64_t v99 = v101;
  v99[1] = v102;
  sub_100250CC4(v103, v104);
  *(_DWORD *)((char *)v118 + a3[8]) = *(_DWORD *)((char *)v117 + a3[8]);
  uint64_t v105 = a3[9];
  uint64_t v106 = (void *)((char *)v118 + v105);
  uint64_t v107 = (void *)((char *)v117 + v105);
  uint64_t v108 = *v107;
  unint64_t v109 = v107[1];
  sub_10025ADCC(*v107, v109);
  uint64_t v110 = *v106;
  unint64_t v111 = v106[1];
  *uint64_t v106 = v108;
  v106[1] = v109;
  sub_100250CC4(v110, v111);
  uint64_t v112 = a3[10];
  uint64_t v113 = *(void **)((char *)v118 + v112);
  uint64_t v114 = *(void **)((char *)v117 + v112);
  *(void *)((char *)v118 + v112) = v114;
  id v115 = v114;

  *((unsigned char *)v118 + a3[11]) = *((unsigned char *)v117 + a3[11]);
  return v118;
}

void *sub_1002E40D8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v12 = v11[5];
  int v13 = &v5[v12];
  uint64_t v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    uint64_t v15 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  uint64_t v16 = v11[6];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  if (v9(&v6[v16], 1, v7))
  {
    uint64_t v19 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v18, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  }
  uint64_t v20 = v11[7];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  if (v9(&v6[v20], 1, v7))
  {
    uint64_t v23 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v21, v22, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  uint64_t v24 = v11[8];
  int v25 = &v5[v24];
  int v26 = &v6[v24];
  if (v9(&v6[v24], 1, v7))
  {
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v25, v26, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
  }
  uint64_t v28 = v11[9];
  uint64_t v29 = &v5[v28];
  uint64_t v30 = &v6[v28];
  if (v9(&v6[v28], 1, v7))
  {
    uint64_t v31 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v29, v30, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
  }
  uint64_t v32 = v11[10];
  uint64_t v33 = &v5[v32];
  uint64_t v34 = &v6[v32];
  if (v9(&v6[v32], 1, v7))
  {
    uint64_t v35 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v33, v34, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v33, 0, 1, v7);
  }
  uint64_t v36 = v11[11];
  int v37 = &v5[v36];
  int v38 = &v6[v36];
  if (v9(&v6[v36], 1, v7))
  {
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v37, v38, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v7);
  }
  uint64_t v40 = v11[12];
  uint64_t v41 = &v5[v40];
  uint64_t v42 = &v6[v40];
  if (v9(&v6[v40], 1, v7))
  {
    uint64_t v43 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v42, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v41, 0, 1, v7);
  }
  v5[v11[13]] = v6[v11[13]];
  uint64_t v44 = v11[14];
  uint64_t v45 = &v5[v44];
  uint64_t v46 = &v6[v44];
  if (v9(&v6[v44], 1, v7))
  {
    uint64_t v47 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v46, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v45, 0, 1, v7);
  }
  uint64_t v48 = v11[15];
  int v49 = &v5[v48];
  int v50 = &v6[v48];
  if (v9(&v6[v48], 1, v7))
  {
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v50, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v49, 0, 1, v7);
  }
  uint64_t v52 = v11[16];
  uint64_t v53 = &v5[v52];
  uint64_t v54 = &v6[v52];
  if (v9(&v6[v52], 1, v7))
  {
    uint64_t v55 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v53, v54, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v53, 0, 1, v7);
  }
  uint64_t v56 = v11[17];
  uint64_t v57 = &v5[v56];
  uint64_t v58 = &v6[v56];
  if (v9(&v6[v56], 1, v7))
  {
    uint64_t v59 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v57, v58, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v57, 0, 1, v7);
  }
  uint64_t v60 = v11[18];
  int v61 = &v5[v60];
  int v62 = &v6[v60];
  *(_DWORD *)int v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v5[v11[19]] = v6[v11[19]];
  *(_OWORD *)&v5[v11[20]] = *(_OWORD *)&v6[v11[20]];
  *(_OWORD *)&v5[v11[21]] = *(_OWORD *)&v6[v11[21]];
  uint64_t v63 = a3[6];
  uint64_t v64 = a3[7];
  uint64_t v65 = (char *)a1 + v63;
  uint64_t v66 = (char *)a2 + v63;
  long long v67 = *((_OWORD *)v66 + 1);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *((_OWORD *)v65 + 1) = v67;
  *((void *)v65 + 4) = *((void *)v66 + 4);
  *(_OWORD *)((char *)a1 + v64) = *(_OWORD *)((char *)a2 + v64);
  uint64_t v68 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v68) = *(_OWORD *)((char *)a2 + v68);
  uint64_t v69 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + v69) = *((unsigned char *)a2 + v69);
  return a1;
}

void *sub_1002E4A00(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v114 = a2;
  uint64_t v6 = a3[5];
  id v115 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for SDAuthenticationSessionMetrics();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
LABEL_12:
    uint64_t v21 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
LABEL_13:
  uint64_t v22 = v15[6];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  int v25 = v11(&v7[v22], 1, v9);
  int v26 = v11(v24, 1, v9);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
LABEL_18:
    uint64_t v27 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v23, v24, v9);
LABEL_19:
  uint64_t v28 = v15[7];
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  int v31 = v11(&v7[v28], 1, v9);
  int v32 = v11(v30, 1, v9);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
LABEL_24:
    uint64_t v33 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v29, v30, v9);
LABEL_25:
  uint64_t v34 = v15[8];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  int v37 = v11(&v7[v34], 1, v9);
  int v38 = v11(v36, 1, v9);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_30:
    uint64_t v39 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v35, v36, v9);
LABEL_31:
  uint64_t v40 = v15[9];
  uint64_t v41 = &v7[v40];
  uint64_t v42 = &v8[v40];
  int v43 = v11(&v7[v40], 1, v9);
  int v44 = v11(v42, 1, v9);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v42, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v41, 0, 1, v9);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
LABEL_36:
    uint64_t v45 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v41, v42, v9);
LABEL_37:
  uint64_t v46 = v15[10];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  int v49 = v11(&v7[v46], 1, v9);
  int v50 = v11(v48, 1, v9);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
LABEL_42:
    uint64_t v51 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v47, v48, v9);
LABEL_43:
  uint64_t v52 = v15[11];
  uint64_t v53 = &v7[v52];
  uint64_t v54 = &v8[v52];
  int v55 = v11(&v7[v52], 1, v9);
  int v56 = v11(v54, 1, v9);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v53, v54, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v53, 0, 1, v9);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v9);
LABEL_48:
    uint64_t v57 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v53, v54, v9);
LABEL_49:
  uint64_t v58 = v15[12];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  int v61 = v11(&v7[v58], 1, v9);
  int v62 = v11(v60, 1, v9);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0, 1, v9);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
LABEL_54:
    uint64_t v63 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v59, v60, v9);
LABEL_55:
  v7[v15[13]] = v8[v15[13]];
  uint64_t v64 = v15[14];
  uint64_t v65 = &v7[v64];
  uint64_t v66 = &v8[v64];
  int v67 = v11(&v7[v64], 1, v9);
  int v68 = v11(v66, 1, v9);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v65, v66, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v65, 0, 1, v9);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v65, v9);
LABEL_60:
    uint64_t v69 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v65, v66, v9);
LABEL_61:
  uint64_t v70 = v15[15];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  int v73 = v11(&v7[v70], 1, v9);
  int v74 = v11(v72, 1, v9);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v71, v72, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v71, v9);
LABEL_66:
    uint64_t v75 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v71, v72, v9);
LABEL_67:
  uint64_t v76 = v15[16];
  uint64_t v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  int v79 = v11(&v7[v76], 1, v9);
  int v80 = v11(v78, 1, v9);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v77, v78, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v77, 0, 1, v9);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v80)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
LABEL_72:
    uint64_t v81 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v77, v78, v9);
LABEL_73:
  uint64_t v82 = v15[17];
  unint64_t v83 = &v7[v82];
  uint64_t v84 = &v8[v82];
  int v85 = v11(&v7[v82], 1, v9);
  int v86 = v11(v84, 1, v9);
  if (!v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v83, v84, v9);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v83, v9);
    goto LABEL_78;
  }
  if (v86)
  {
LABEL_78:
    uint64_t v87 = sub_10000A844((uint64_t *)&unk_100975040);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v83, v84, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v83, 0, 1, v9);
LABEL_79:
  uint64_t v88 = v15[18];
  id v89 = &v7[v88];
  uint64_t v90 = &v8[v88];
  *(_DWORD *)id v89 = *(_DWORD *)v90;
  v89[4] = v90[4];
  v7[v15[19]] = v8[v15[19]];
  uint64_t v91 = v15[20];
  uint64_t v92 = &v7[v91];
  uint64_t v93 = &v8[v91];
  uint64_t v95 = *(void *)v93;
  uint64_t v94 = *((void *)v93 + 1);
  *(void *)uint64_t v92 = v95;
  *((void *)v92 + 1) = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = v15[21];
  uint64_t v97 = &v7[v96];
  uint64_t v98 = &v8[v96];
  uint64_t v100 = *(void *)v98;
  uint64_t v99 = *((void *)v98 + 1);
  *(void *)uint64_t v97 = v100;
  *((void *)v97 + 1) = v99;
  swift_bridgeObjectRelease();
  uint64_t v101 = a3[6];
  unint64_t v102 = (char *)v115 + v101;
  uint64_t v103 = (char *)v114 + v101;
  sub_10024D338((uint64_t)v115 + v101);
  long long v104 = *((_OWORD *)v103 + 1);
  *(_OWORD *)unint64_t v102 = *(_OWORD *)v103;
  *((_OWORD *)v102 + 1) = v104;
  *((void *)v102 + 4) = *((void *)v103 + 4);
  uint64_t v105 = a3[7];
  uint64_t v106 = *(void *)((char *)v115 + v105);
  unint64_t v107 = *(void *)((char *)v115 + v105 + 8);
  *(_OWORD *)((char *)v115 + v105) = *(_OWORD *)((char *)v114 + v105);
  sub_100250CC4(v106, v107);
  uint64_t v108 = a3[9];
  *(_DWORD *)((char *)v115 + a3[8]) = *(_DWORD *)((char *)v114 + a3[8]);
  uint64_t v109 = *(void *)((char *)v115 + v108);
  unint64_t v110 = *(void *)((char *)v115 + v108 + 8);
  *(_OWORD *)((char *)v115 + v108) = *(_OWORD *)((char *)v114 + v108);
  sub_100250CC4(v109, v110);
  uint64_t v111 = a3[10];
  uint64_t v112 = *(void **)((char *)v115 + v111);
  *(void *)((char *)v115 + v111) = *(void *)((char *)v114 + v111);

  *((unsigned char *)v115 + a3[11]) = *((unsigned char *)v114 + a3[11]);
  return v115;
}

uint64_t sub_1002E586C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E5880);
}

uint64_t sub_1002E5880(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002E5930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E5944);
}

void *sub_1002E5944(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1002E59EC()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002E5AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E5AD4);
}

uint64_t sub_1002E5AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E5AEC);
}

uint64_t sub_1002E5AF0()
{
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002E5BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002E5BF8(a1, (uint64_t (*)(void))&type metadata accessor for URL, (void (*)(void))sub_1002E615C, a2);
}

uint64_t sub_1002E5BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002E5BF8(a1, type metadata accessor for SDAirDropDiscoveredEndpoint, (void (*)(void))sub_1002E6224, a2);
}

uint64_t sub_1002E5BF8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1002E60BC(a1);
  if (v10) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 36) != v9)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32))
  {
    uint64_t v11 = a2(0);
    int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a4;
    uint64_t v15 = 1;
  }
  else
  {
    a3();
    uint64_t v16 = a2(0);
    int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v13 = v16;
    uint64_t v14 = a4;
    uint64_t v15 = 0;
  }

  return v12(v14, v15, 1, v13);
}

uint64_t sub_1002E5CF8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unsigned __int8 v4 = a1;
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v4 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        unsigned __int8 v4 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      }
      else {
        unsigned __int8 v4 = *(unsigned char *)_StringObject.sharedUTF8.getter();
      }
    }
  }
  else
  {
    unsigned __int8 v4 = 0;
  }
  return v4 | ((v3 == 0) << 8);
}

uint64_t sub_1002E5D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10097F1D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for SFPlatform();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static SFPlatform.macOS.getter();
  char v11 = static SFPlatform.isPlatform(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    type metadata accessor for SDAirDropContentHandlerUtilities();
    id v15 = 0;
  }
  else
  {
    id v12 = objc_allocWithZone((Class)LSApplicationRecord);
    id v15 = sub_1006A5458(0xD000000000000016, 0x80000001007B85B0, 1);
    type metadata accessor for SDAirDropContentHandlerUtilities();
    if (v15) {
      id v16 = v15;
    }
  }
  uint64_t v13 = type metadata accessor for SFAirDropReceive.ItemDestination();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  sub_10039FAA0(a1, v15, 1, a2);

  return sub_10000A7E8((uint64_t)v6, (uint64_t *)&unk_10097F1D0);
}

uint64_t type metadata accessor for SDAirDropContentHandlerWebLinks()
{
  return self;
}

uint64_t sub_1002E5FC0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SDAirDropContentHandlerWebLinks();
  uint64_t result = swift_allocObject();
  *a1 = result;
  return result;
}

uint64_t sub_1002E5FF4(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_10096DD70 + dword_10096DD70);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10024DEC4;
  return v5(a1);
}

uint64_t sub_1002E60A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002E5D8C(a1, a2);
}

uint64_t sub_1002E60BC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1002E615C@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3) {
    goto LABEL_12;
  }
  uint64_t v5 = result;
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v7 = *(void *)(a4 + 48);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  uint64_t v11 = v7 + *(void *)(v9 + 72) * v5;

  return v10(a5, v11, v8);
}

uint64_t sub_1002E6224@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3) {
    goto LABEL_12;
  }
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a4 + 48);
  uint64_t v7 = v6 + *(void *)(*(void *)(type metadata accessor for SDAirDropDiscoveredEndpoint(0) - 8) + 72) * result;

  return sub_10025AE8C(v7, a5);
}

uint64_t sub_1002E62D4(uint64_t a1, char a2)
{
  uint64_t v3 = sub_10000A844((uint64_t *)&unk_10096AC10);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(SFAirDropReceive.AskRequest.urlItems.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v11 = SFAirDropReceive.AskRequest.itemsDescription.getter();
  uint64_t v13 = v12;
  if (v10 != 1) {
    goto LABEL_4;
  }
  uint64_t v14 = v11;
  swift_bridgeObjectRetain();
  uint64_t v15 = SFAirDropReceive.AskRequest.urlItems.getter();
  sub_1002E5BF8(v15, (uint64_t (*)(void))&type metadata accessor for URL, (void (*)(void))sub_1002E615C, (uint64_t)v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000A7E8((uint64_t)v5, (uint64_t *)&unk_10096AC10);
LABEL_4:
    sub_10000A844(&qword_10096D760);
    uint64_t inited = swift_initStackObject();
    long long v43 = xmmword_10076E7A0;
    *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
    *(void *)(inited + 32) = 0x45544953424557;
    *(void *)(inited + 40) = 0xE700000000000000;
    *(void *)(inited + 48) = v10;
    uint64_t v44 = 0x545F4E5245444F4DLL;
    unint64_t v45 = 0xEF524546534E4152;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = 95;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = 0x45544953424557;
    v18._object = (void *)0xE700000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    if (v10 > 1)
    {
      v19._uint64_t countAndFlagsBits = 0x4C4152554C505FLL;
      v19._object = (void *)0xE700000000000000;
      String.append(_:)(v19);
    }
    swift_bridgeObjectRelease();
    if (a2)
    {
      v20._uint64_t countAndFlagsBits = 0x4C4154495041435FLL;
      v20._object = (void *)0xEC00000044455A49;
      String.append(_:)(v20);
    }
    v21._uint64_t countAndFlagsBits = 0x545845545FLL;
    v21._object = (void *)0xE500000000000000;
    String.append(_:)(v21);
    swift_setDeallocating();
    sub_10000A844((uint64_t *)&unk_100977CB0);
    swift_arrayDestroy();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = (id)SFLocalizedStringForKey();

    if (v23)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000A844((uint64_t *)&unk_10096EE60);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v43;
      *(void *)(v24 + 56) = &type metadata for Int;
      *(void *)(v24 + 64) = &protocol witness table for Int;
      *(void *)(v24 + 32) = v10;
      uint64_t v25 = static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_20:
      swift_bridgeObjectRelease();
      return v25;
    }
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_22;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  if (SFAirDropReceive.AskRequest.senderBundleID.getter() == 0xD000000000000016 && v26 == 0x80000001007B85B0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28)
  {
LABEL_14:
    uint64_t v29 = v13;
    if (v13) {
      goto LABEL_16;
    }
  }
  URL._bridgeToObjectiveC()(v27);
  int v31 = v30;
  id v32 = [v30 _lp_simplifiedDisplayString];

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v33;

  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRetain();
  sub_10000A844(&qword_10096D760);
  uint64_t v34 = swift_initStackObject();
  *(void *)(v34 + 32) = 0xD000000000000012;
  long long v43 = xmmword_10076E7A0;
  *(_OWORD *)(v34 + 16) = xmmword_10076E7A0;
  *(void *)(v34 + 40) = 0x80000001007B85D0;
  *(void *)(v34 + 48) = 1;
  uint64_t v44 = 0x545F4E5245444F4DLL;
  unint64_t v45 = 0xEF524546534E4152;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35._uint64_t countAndFlagsBits = 95;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = 0xD000000000000012;
  v36._object = (void *)0x80000001007B85D0;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a2)
  {
    v37._uint64_t countAndFlagsBits = 0x4C4154495041435FLL;
    v37._object = (void *)0xEC00000044455A49;
    String.append(_:)(v37);
  }
  v38._uint64_t countAndFlagsBits = 0x545845545FLL;
  v38._object = (void *)0xE500000000000000;
  String.append(_:)(v38);
  swift_setDeallocating();
  sub_10000A844((uint64_t *)&unk_100977CB0);
  swift_arrayDestroy();
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v40 = (id)SFLocalizedStringForKey();

  if (v40)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10000A844((uint64_t *)&unk_10096EE60);
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = v43;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_1002E695C();
    *(void *)(v41 + 32) = v14;
    *(void *)(v41 + 40) = v29;
    uint64_t v25 = static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_20;
  }
LABEL_22:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

unint64_t sub_1002E695C()
{
  unint64_t result = qword_100977CC0;
  if (!qword_100977CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100977CC0);
  }
  return result;
}

uint64_t sub_1002E69B0(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096AC10);
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SFAirDrop.TransferType();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v4 = static AirDropActor.shared;
  return _swift_task_switch(sub_1002E6B34, v4, 0);
}

uint64_t sub_1002E6B34()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  SFAirDropReceive.AskRequest.type.getter();
  char v4 = SFAirDrop.TransferType.isLinks.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if ((v4 & 1) == 0)
  {
    uint64_t v25 = 0;
LABEL_37:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(uint64_t))v0[1];
    return v26(v25);
  }
  uint64_t v5 = v0[4];
  uint64_t result = SFAirDropReceive.AskRequest.urlItems.getter();
  uint64_t v7 = result;
  int64_t v8 = 0;
  uint64_t v28 = result + 56;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << *(unsigned char *)(result + 32);
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(result + 56);
  int64_t v29 = (unint64_t)(63 - v10) >> 6;
  uint64_t v12 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v27 = result;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v15 >= v29) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v28 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v29) {
        goto LABEL_36;
      }
      unint64_t v16 = *(void *)(v28 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_36;
        }
        unint64_t v16 = *(void *)(v28 + 8 * v8);
        if (!v16) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_22:
    uint64_t v18 = v0[6];
    uint64_t v19 = v0[3];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16))(v18, *(void *)(v7 + 48) + *(void *)(v5 + 72) * v14, v19);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v19);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v18, 1, v19) == 1)
    {
      swift_release();
      uint64_t v25 = 1;
      goto LABEL_37;
    }
    (*(void (**)(void, void, void))(v5 + 32))(v0[5], v0[6], v0[3]);
    URL.scheme.getter();
    if (!v20)
    {
      (*v12)(v0[5], v0[3]);
LABEL_35:
      swift_release();
      uint64_t v25 = 0;
      goto LABEL_37;
    }
    Swift::String v21 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v21._countAndFlagsBits == 1886680168 && v21._object == (void *)0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      (*v12)(v0[5], v0[3]);
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = v0[5];
      uint64_t v23 = v0[3];
      if (v21._countAndFlagsBits == 0x7370747468 && v21._object == (void *)0xE500000000000000)
      {
        (*v12)(v0[5], v0[3]);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v7 = v27;
      }
      else
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        (*v12)(v22, v23);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v7 = v27;
        if ((v24 & 1) == 0) {
          goto LABEL_35;
        }
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v29)
  {
LABEL_36:
    uint64_t v25 = 1;
    (*(void (**)(void, uint64_t, uint64_t, void))(v5 + 56))(v0[6], 1, 1, v0[3]);
    swift_release();
    goto LABEL_37;
  }
  unint64_t v16 = *(void *)(v28 + 8 * v17);
  if (v16)
  {
    int64_t v8 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v8 >= v29) {
      goto LABEL_36;
    }
    unint64_t v16 = *(void *)(v28 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002E6F78()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_10096DD80);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_10096DD80);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002E7040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v30 = a2;
  uint64_t v5 = _s12HelloRequestVMa();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v29 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844(&qword_10096DF48);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A844((uint64_t *)&unk_100975040);
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B47C(v14, (uint64_t)qword_10096DD80);
  int64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sending HELLO request", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = (uint64_t)v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  swift_beginAccess();
  Date.init()();
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 0, 1, v19);
  sub_10026B410((uint64_t)v13, v18, (uint64_t *)&unk_100975040);
  swift_endAccess();
  sub_1002FA830(a1, (uint64_t)v10, (uint64_t (*)(void))_s12HelloRequestVMa);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  uint64_t v20 = (uint64_t)v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloRequest;
  swift_beginAccess();
  sub_10026B410((uint64_t)v10, v20, &qword_10096DF48);
  swift_endAccess();
  strcpy((char *)v31, "Send HELLO [");
  HIBYTE(v31[6]) = 0;
  v31[7] = -5120;
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1002FA308(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 93;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  uint64_t v23 = v29;
  sub_1002FA830(a1, v29, (uint64_t (*)(void))_s12HelloRequestVMa);
  unint64_t v24 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v3;
  sub_1002FA430(v23, v25 + v24, (uint64_t (*)(void))_s12HelloRequestVMa);
  id v26 = v3;
  withProgressTask<A, B>(_:initialProgress:operation:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E7494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = *(void *)(_s12HelloRequestVMa() - 8);
  v3[8] = v4;
  v3[9] = *(void *)(v4 + 64);
  v3[10] = swift_task_alloc();
  sub_10000A844(&qword_10096C920);
  v3[11] = swift_task_alloc();
  sub_10000A844(&qword_10096DF50);
  v3[12] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002E75F8, v5, 0);
}

uint64_t sub_1002E75F8()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = sub_10000A844(&qword_10096DE50);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  uint64_t v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess();
  sub_10026B410(v1, v6, &qword_10096DF50);
  swift_endAccess();
  uint64_t v7 = sub_1002E7AD4(0, 0);
  v0[14] = v7;
  uint64_t v8 = v7;
  uint64_t v10 = v0[10];
  uint64_t v9 = v0[11];
  uint64_t v12 = v0[8];
  uint64_t v11 = v0[9];
  uint64_t v14 = (char *)v0[6];
  uint64_t v13 = v0[7];
  *(void *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection] = v7;
  swift_retain();
  swift_release();
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
  sub_1002FA830(v13, v10, (uint64_t (*)(void))_s12HelloRequestVMa);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v17 = swift_allocObject();
  v0[15] = v17;
  *(void *)(v17 + 16) = v14;
  sub_1002FA430(v10, v17 + v16, (uint64_t (*)(void))_s12HelloRequestVMa);
  *(void *)(v17 + ((v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v8;
  uint64_t v18 = swift_allocObject();
  v0[16] = v18;
  *(void *)(v18 + 16) = v14;
  uint64_t v19 = v14;
  swift_retain();
  uint64_t v20 = v19;
  Swift::String v21 = (void *)swift_task_alloc();
  v0[17] = v21;
  *Swift::String v21 = v0;
  v21[1] = sub_1002E7944;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_1002E7944()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  sub_10000A7E8(*(void *)(v2 + 88), &qword_10096C920);
  swift_release();
  swift_release();
  if (v0) {
    uint64_t v4 = sub_1002FB168;
  }
  else {
    uint64_t v4 = sub_1002FB164;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E7AD4(char a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v31 - v11;
  uint64_t v13 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint;
  sub_1002FA830(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint, (uint64_t)v31 - v11, type metadata accessor for SDAirDropDiscoveredEndpoint);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v15 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      goto LABEL_6;
    case 2:
      unint64_t v16 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint;
      goto LABEL_4;
    case 3:
      uint64_t v15 = type metadata accessor for SDAirDropDiscoveredEndpoint;
LABEL_6:
      sub_1002F6F68((uint64_t)v12, v15);
      if (a2) {
        NWConnection.cancel()();
      }
      goto LABEL_8;
    default:
      unint64_t v16 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint;
LABEL_4:
      sub_1002F6F68((uint64_t)v12, v16);
LABEL_8:
      sub_1002FA830(v13, (uint64_t)v10, type metadata accessor for SDAirDropDiscoveredEndpoint);
      int v17 = swift_getEnumCaseMultiPayload();
      uint64_t v18 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint;
      switch(v17)
      {
        case 1:
          uint64_t v19 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint;
          goto LABEL_13;
        case 2:
          uint64_t v18 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint;
          goto LABEL_11;
        case 3:
          uint64_t v19 = type metadata accessor for SDAirDropDiscoveredEndpoint;
LABEL_13:
          sub_1002F6F68((uint64_t)v10, v19);
          a2 = 0;
          goto LABEL_14;
        default:
LABEL_11:
          sub_1002F6F68((uint64_t)v10, v18);
          swift_retain();
LABEL_14:
          uint64_t v20 = sub_1002F0A4C(a2, v4, a1 & 1);
          if (!v3)
          {
            uint64_t v21 = swift_allocObject();
            swift_unknownObjectWeakInit();
            uint64_t v22 = swift_allocObject();
            swift_weakInit();
            uint64_t v23 = swift_allocObject();
            *(void *)(v23 + 16) = v21;
            *(void *)(v23 + 24) = v22;
            swift_retain();
            swift_retain();
            NWConnection.stateUpdateHandler.setter();
            swift_release();
            swift_release();
            if (qword_100969B68 != -1) {
              swift_once();
            }
            uint64_t v24 = type metadata accessor for Logger();
            sub_10000B47C(v24, (uint64_t)qword_10096DD80);
            swift_retain_n();
            uint64_t v25 = Logger.logObject.getter();
            os_log_type_t v26 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v25, v26))
            {
              uint64_t v27 = (uint8_t *)swift_slowAlloc();
              uint64_t v32 = swift_slowAlloc();
              uint64_t v34 = v32;
              *(_DWORD *)uint64_t v27 = 136315138;
              v31[1] = v27 + 4;
              uint64_t v28 = NWConnection.debugDescription.getter();
              uint64_t v33 = sub_100254634(v28, v29, &v34);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v25, v26, "Starting connection %s", v27, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release_n();
            }
            NWConnection.start(queue:)();
          }
          swift_release();
          return v20;
      }
  }
}

uint64_t sub_1002E7F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a2;
  sub_10000A844((uint64_t *)&unk_100975040);
  v4[9] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  v4[10] = static AirDropActor.shared;
  uint64_t v7 = (void *)swift_task_alloc();
  v4[11] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1002E80C0;
  return sub_1006A6FC0(a3, a4);
}

uint64_t sub_1002E80C0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 80);
    return _swift_task_switch(sub_1002E820C, v6, 0);
  }
}

uint64_t sub_1002E820C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  v0[12] = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  uint64_t v4 = v1 + v3;
  swift_beginAccess();
  Date.init()();
  uint64_t v5 = type metadata accessor for Date();
  v0[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  v0[14] = v7;
  v0[15] = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v2, 0, 1, v5);
  uint64_t v8 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  v0[16] = v8;
  sub_10026B410(v2, v4 + *(int *)(v8 + 20), (uint64_t *)&unk_100975040);
  swift_endAccess();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[17] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1002E8354;
  return sub_1002E8548();
}

uint64_t sub_1002E8354()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002E8464, v1, 0);
}

uint64_t sub_1002E8464()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[14];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[8] + v0[12];
  swift_beginAccess();
  Date.init()();
  v3(v4, 0, 1, v2);
  sub_10026B410(v4, v5 + *(int *)(v1 + 24), (uint64_t *)&unk_100975040);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1002E8548()
{
  v1[11] = v0;
  sub_10000A844(&qword_10096DF50);
  v1[12] = swift_task_alloc();
  uint64_t v2 = sub_10000A844(&qword_10096DE50);
  v1[13] = v2;
  v1[14] = *(void *)(v2 - 8);
  v1[15] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v3 = static AirDropActor.shared;
  v1[16] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002E8678, v3, 0);
}

uint64_t sub_1002E8678()
{
  uint64_t v1 = *(void *)(v0[11] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection);
  v0[17] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[18] = v2;
    void *v2 = v0;
    v2[1] = sub_1002E8788;
    return sub_1006A7CA4(v1);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1002E8788(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 152) = a1;
  *(void *)(v4 + 160) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 128);
  if (v1) {
    uint64_t v6 = sub_1002E8A88;
  }
  else {
    uint64_t v6 = sub_1002E88BC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1002E88BC()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  *(_DWORD *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_receiverFeatureFlags) = *(void *)(v0 + 152);
  *(void *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection) = v1;
  swift_retain();
  swift_release();
  uint64_t v5 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2))
  {
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v5, v9);
    *(_DWORD *)(v0 + 168) = v6;
    *(unsigned char *)(v0 + 172) = BYTE4(v6);
    SFProgressContinuation.finish(with:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56))(v10, 1, 1, *(void *)(v0 + 104));
  uint64_t v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess();
  sub_10026B410(v10, v12, &qword_10096DF50);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_1002E8A88()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  sub_1002EF8F8(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection, "Cancelling HELLO connection %s");
  uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1))
  {
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = v0[14];
    uint64_t v5 = v0[15];
    uint64_t v7 = v0[13];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
    SFProgressContinuation.fail(with:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  uint64_t v9 = v0[11];
  uint64_t v8 = v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[14] + 56))(v8, 1, 1, v0[13]);
  uint64_t v10 = v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess();
  sub_10026B410(v8, v10, &qword_10096DF50);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1002E8C3C(uint64_t a1, uint64_t a2)
{
  v2[5] = a2;
  uint64_t v3 = sub_10000A844(&qword_10096DE50);
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropSend.Failure();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  v2[15] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002E8DF4, v6, 0);
}

uint64_t sub_1002E8DF4()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096C598 + dword_10096C598);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002E8EBC;
  return v3(0x70801D946C940000, 2, 0, 0, 1);
}

uint64_t sub_1002E8EBC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[15];
  (*(void (**)(void, void))(v2[13] + 8))(v2[14], v2[12]);
  if (v0) {
    uint64_t v4 = sub_1002E9370;
  }
  else {
    uint64_t v4 = sub_1002E9038;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E9038()
{
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096DD80);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "HELLO request timeout", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v10 = v0[5];

  sub_1002EF8F8(1, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection, "Cancelling HELLO connection %s");
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for SFAirDropSend.Failure.receiverDeclined(_:), v7);
  uint64_t v11 = v10 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
  {
    uint64_t v13 = v0[10];
    uint64_t v12 = v0[11];
    uint64_t v15 = v0[8];
    uint64_t v14 = v0[9];
    uint64_t v16 = v0[6];
    uint64_t v17 = v0[7];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v11, v16);
    sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v18, v12, v14);
    SFProgressContinuation.fail(with:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    swift_errorRelease();
  }
  uint64_t v20 = v0[10];
  uint64_t v19 = v0[11];
  uint64_t v21 = v0[9];
  sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v22, v19, v21);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1002E9370()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E93F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v31 = a2;
  uint64_t v5 = _s14descr1008C9AB9V10AskRequestVMa();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v30 = (uint64_t)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000A844(&qword_10096DF58);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000A844((uint64_t *)&unk_100975040);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10000B47C(v14, (uint64_t)qword_10096DD80);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sending ASK request", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = &v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry];
  swift_beginAccess();
  Date.init()();
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 0, 1, v19);
  uint64_t v20 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  sub_10026B410((uint64_t)v13, (uint64_t)&v18[*(int *)(v20 + 28)], (uint64_t *)&unk_100975040);
  swift_endAccess();
  sub_1002FA830(a1, (uint64_t)v10, (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  uint64_t v21 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest];
  swift_beginAccess();
  sub_10026B410((uint64_t)v10, v21, &qword_10096DF58);
  swift_endAccess();
  uint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0x4B534120646E6553;
  v22._object = (void *)0xEA00000000005B20;
  String.append(_:)(v22);
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1002FA308(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v23._uint64_t countAndFlagsBits = 93;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  uint64_t v24 = v30;
  sub_1002FA830(a1, v30, (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa);
  unint64_t v25 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v3;
  sub_1002FA430(v24, v26 + v25, (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa);
  uint64_t v27 = v3;
  withProgressTask<A, B>(_:initialProgress:operation:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E9848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = *(void *)(_s14descr1008C9AB9V10AskRequestVMa() - 8);
  v3[8] = v4;
  v3[9] = *(void *)(v4 + 64);
  v3[10] = swift_task_alloc();
  sub_10000A844(&qword_10096C920);
  v3[11] = swift_task_alloc();
  sub_10000A844(&qword_10096DF60);
  v3[12] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002E99AC, v5, 0);
}

uint64_t sub_1002E99AC()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = sub_10000A844(&qword_10096DE68);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  uint64_t v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess();
  sub_10026B410(v1, v6, &qword_10096DF60);
  swift_endAccess();
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain();
  uint64_t v8 = sub_1002E7AD4(0, v7);
  v0[14] = v8;
  uint64_t v9 = v8;
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v15 = (char *)v0[6];
  uint64_t v14 = v0[7];
  swift_release();
  *(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection] = v9;
  swift_retain();
  swift_release();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  sub_1002FA830(v14, v10, (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = swift_allocObject();
  v0[15] = v18;
  *(void *)(v18 + 16) = v15;
  sub_1002FA430(v10, v18 + v17, (uint64_t (*)(void))_s14descr1008C9AB9V10AskRequestVMa);
  *(void *)(v18 + ((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = v9;
  uint64_t v19 = swift_allocObject();
  v0[16] = v19;
  *(void *)(v19 + 16) = v15;
  uint64_t v20 = v15;
  swift_retain();
  uint64_t v21 = v20;
  Swift::String v22 = (void *)swift_task_alloc();
  v0[17] = v22;
  *Swift::String v22 = v0;
  v22[1] = sub_1002E9D20;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_1002E9D20()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  sub_10000A7E8(*(void *)(v2 + 88), &qword_10096C920);
  swift_release();
  swift_release();
  if (v0) {
    uint64_t v4 = sub_1002E9F3C;
  }
  else {
    uint64_t v4 = sub_1002E9EB0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002E9EB0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E9F3C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002E9FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a2;
  sub_10000A844((uint64_t *)&unk_100975040);
  v4[9] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  v4[10] = static AirDropActor.shared;
  uint64_t v7 = (void *)swift_task_alloc();
  v4[11] = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1002EA0EC;
  return sub_1006A7338(a3, a4);
}

uint64_t sub_1002EA0EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 80);
    return _swift_task_switch(sub_1002EA238, v6, 0);
  }
}

uint64_t sub_1002EA238()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  v0[12] = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  uint64_t v4 = v1 + v3;
  swift_beginAccess();
  Date.init()();
  uint64_t v5 = type metadata accessor for Date();
  v0[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  v0[14] = v7;
  v0[15] = (v6 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v7(v2, 0, 1, v5);
  uint64_t v8 = type metadata accessor for SDAirDropSendConnectionTelemetry(0);
  v0[16] = v8;
  sub_10026B410(v2, v4 + *(int *)(v8 + 32), (uint64_t *)&unk_100975040);
  swift_endAccess();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[17] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1002EA380;
  return sub_1002EA574();
}

uint64_t sub_1002EA380()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002EA490, v1, 0);
}

uint64_t sub_1002EA490()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[14];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[8] + v0[12];
  swift_beginAccess();
  Date.init()();
  v3(v4, 0, 1, v2);
  sub_10026B410(v4, v5 + *(int *)(v1 + 36), (uint64_t *)&unk_100975040);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1002EA574()
{
  v1[40] = v0;
  sub_10000A844(&qword_10096DF60);
  v1[41] = swift_task_alloc();
  uint64_t v2 = sub_10000A844(&qword_10096DE68);
  v1[42] = v2;
  v1[43] = *(void *)(v2 - 8);
  v1[44] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v3 = static AirDropActor.shared;
  v1[45] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002EA6A4, v3, 0);
}

uint64_t sub_1002EA6A4()
{
  uint64_t v1 = *(void *)(v0[40] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection);
  v0[46] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[47] = v2;
    void *v2 = v0;
    v2[1] = sub_1002EA7C0;
    return sub_1006A8270((uint64_t)(v0 + 2), v1);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1002EA7C0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 360);
  if (v0) {
    uint64_t v4 = sub_1002EAE5C;
  }
  else {
    uint64_t v4 = sub_1002EA8EC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002EA8EC()
{
  uint64_t v42 = v0;
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  if (!v3) {
    uint64_t v3 = swift_retain();
  }
  *(void *)(v1 + v2) = v3;
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void **)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void **)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v8 = *(void **)(v0 + 96);
  uint64_t v10 = qword_100969B68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10000B47C(v11, (uint64_t)qword_10096DD80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v12, v37))
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    if (!*(void *)(v1 + v2)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  os_log_t log = v12;
  uint64_t v35 = v9;
  uint64_t v38 = v7;
  uint64_t v36 = v1;
  uint64_t v13 = swift_slowAlloc();
  uint64_t v39 = swift_slowAlloc();
  *(_DWORD *)uint64_t v13 = 136315650;
  uint64_t v14 = v5;
  unint64_t v15 = (unint64_t)v4;
  if (!v4)
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    unint64_t v15 = 0x80000001007B7770;
    uint64_t v14 = 0xD000000000000015;
  }
  swift_bridgeObjectRetain();
  *(void *)(v0 + 296) = sub_100254634(v14, v15, &v39);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v13 + 12) = 2080;
  uint64_t v16 = v38;
  unint64_t v17 = (unint64_t)v6;
  if (!v6)
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    unint64_t v17 = 0x80000001007B7770;
    uint64_t v16 = 0xD000000000000015;
  }
  swift_bridgeObjectRetain();
  *(void *)(v0 + 304) = sub_100254634(v16, v17, &v39);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v13 + 22) = 2080;
  uint64_t v9 = v35;
  uint64_t v18 = v35;
  unint64_t v19 = (unint64_t)v8;
  if (!v8)
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0x80000001007B7770;
    uint64_t v18 = 0xD000000000000015;
  }
  swift_bridgeObjectRetain();
  *(void *)(v0 + 312) = sub_100254634(v18, v19, &v39);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, log, v37, "Sender extracted IDS session ID %s, pseudonym: %s, push token: %s from ask response", (uint8_t *)v13, 0x20u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v7 = v38;
  if (*(void *)(v36 + v2))
  {
LABEL_15:
    swift_retain();
    sub_10065E534(v5, v4, v7, v6, v9, v8);
    swift_release();
  }
LABEL_16:
  uint64_t v20 = *(void *)(v0 + 336);
  uint64_t v21 = *(void *)(v0 + 344);
  uint64_t v22 = *(void *)(v0 + 320) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20))
  {
    uint64_t v24 = *(void *)(v0 + 344);
    uint64_t v23 = *(void *)(v0 + 352);
    uint64_t v25 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v22, v25);
    long long v26 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 200) = v26;
    *(void *)(v0 + 216) = *(void *)(v0 + 112);
    long long v27 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 136) = v27;
    long long v28 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 168) = v28;
    SFProgressContinuation.finish(with:)();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  sub_1002FB0E0(v0 + 16);
  uint64_t v30 = *(void *)(v0 + 320);
  uint64_t v29 = *(void *)(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 344) + 56))(v29, 1, 1, *(void *)(v0 + 336));
  uint64_t v31 = v30 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess();
  sub_10026B410(v29, v31, &qword_10096DF60);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_1002EAE5C()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[40];
  sub_1002EF8F8(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection, "Cancelling ASK connection %s");
  uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1))
  {
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = v0[43];
    uint64_t v5 = v0[44];
    uint64_t v7 = v0[42];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
    SFProgressContinuation.fail(with:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  uint64_t v9 = v0[40];
  uint64_t v8 = v0[41];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[43] + 56))(v8, 1, 1, v0[42]);
  uint64_t v10 = v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess();
  sub_10026B410(v8, v10, &qword_10096DF60);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1002EB010(uint64_t a1, uint64_t a2)
{
  v2[5] = a2;
  uint64_t v3 = sub_10000A844(&qword_10096DE68);
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropSend.Failure();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferType();
  v2[15] = v6;
  v2[16] = *(void *)(v6 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  v2[19] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002EB234, v7, 0);
}

uint64_t sub_1002EB234()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  SFAirDropSend.Request.type.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for SFAirDrop.TransferType.peerPayment(_:), v3);
  char v5 = static SFAirDrop.TransferType.== infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  v6(v1, v3);
  if (v5) {
    unint64_t v7 = 0x8155A43676E00000;
  }
  else {
    unint64_t v7 = 0x70801D946C940000;
  }
  if (v5) {
    uint64_t v8 = 6;
  }
  else {
    uint64_t v8 = 2;
  }
  ContinuousClock.init()();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096C598 + dword_10096C598);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[20] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1002EB3C0;
  return v11(v7, v8, 0, 0, 1);
}

uint64_t sub_1002EB3C0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[19];
  (*(void (**)(void, void))(v2[13] + 8))(v2[14], v2[12]);
  if (v0) {
    uint64_t v4 = sub_1002EB888;
  }
  else {
    uint64_t v4 = sub_1002EB53C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002EB53C()
{
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096DD80);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ASK request timeout", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v10 = v0[5];

  sub_1002EF8F8(1, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection, "Cancelling ASK connection %s");
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for SFAirDropSend.Failure.receiverDeclined(_:), v7);
  uint64_t v11 = v10 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
  {
    uint64_t v13 = v0[10];
    uint64_t v12 = v0[11];
    uint64_t v15 = v0[8];
    uint64_t v14 = v0[9];
    uint64_t v16 = v0[6];
    uint64_t v17 = v0[7];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v11, v16);
    sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v18, v12, v14);
    SFProgressContinuation.fail(with:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    swift_errorRelease();
  }
  uint64_t v20 = v0[10];
  uint64_t v19 = v0[11];
  uint64_t v21 = v0[9];
  sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v22, v19, v21);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1002EB888()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EB928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.Progress();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10000B47C(v12, (uint64_t)qword_10096DD80);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v31 = a2;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v30 = swift_slowAlloc();
    v35[0] = v30;
    uint64_t v33 = a3;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v29 = v16 + 4;
    type metadata accessor for URL();
    uint64_t v32 = v4;
    uint64_t v17 = v11;
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    swift_bridgeObjectRetain();
    uint64_t v20 = Array.description.getter();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v23 = v20;
    uint64_t v8 = v19;
    uint64_t v9 = v18;
    uint64_t v11 = v17;
    uint64_t v4 = v32;
    uint64_t v34 = sub_100254634(v23, v22, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Sending UPLOAD request %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v35[0] = 0;
  v35[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v35, "Send UPLOAD [");
  HIWORD(v35[1]) = -4864;
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1002FA308(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 93;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for SFAirDrop.Progress.notStarted(_:), v8);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v4;
  *(void *)(v26 + 24) = a1;
  swift_bridgeObjectRetain();
  id v27 = v4;
  withProgressTask<A, B>(_:initialProgress:operation:)();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1002EBD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[10] = a2;
  v3[11] = a3;
  v3[9] = a1;
  uint64_t v4 = type metadata accessor for SFSecurityScopedURL();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SFSandboxTokenURLPair();
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  sub_10000A844(&qword_10096DF70);
  v3[18] = swift_task_alloc();
  sub_10000A844(&qword_10096DF58);
  v3[19] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  v3[20] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002EBEDC, v6, 0);
}

uint64_t sub_1002EBEDC()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[10] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest;
  swift_beginAccess();
  sub_10024A330(v2, v1, &qword_10096DF58);
  uint64_t v3 = _s14descr1008C9AB9V10AskRequestVMa();
  LODWORD(v2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v1, 1, v3);
  sub_10000A7E8(v1, &qword_10096DF58);
  if (v2 == 1)
  {
    uint64_t v4 = type metadata accessor for SFAirDropSend.Failure();
    sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for SFAirDropSend.Failure.badRequest(_:), v4);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  else
  {
    v0[8] = v0[11];
    sub_10000A844((uint64_t *)&unk_10096C8B0);
    sub_1002F9DA4();
    uint64_t v6 = RandomAccessCollection<>.securityScopedURLs.getter();
    int64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = v0[16];
      uint64_t v9 = v0[13];
      uint64_t v33 = _swiftEmptyArrayStorage;
      sub_1002554D4(0, v7, 0);
      uint64_t v11 = *(void (**)(void, unint64_t, void))(v9 + 16);
      uint64_t v10 = v9 + 16;
      unint64_t v12 = v6 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
      uint64_t v31 = *(void *)(v10 + 56);
      uint64_t v32 = v11;
      do
      {
        v32(v0[14], v12, v0[12]);
        static SFSecurityScopedURL.consumeSandboxToken(item:)();
        (*(void (**)(void, void))(v10 - 8))(v0[14], v0[12]);
        uint64_t v13 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002554D4(0, v33[2] + 1, 1);
          uint64_t v13 = v33;
        }
        unint64_t v15 = v13[2];
        unint64_t v14 = v13[3];
        if (v15 >= v14 >> 1)
        {
          sub_1002554D4(v14 > 1, v15 + 1, 1);
          uint64_t v13 = v33;
        }
        uint64_t v16 = v0[17];
        uint64_t v17 = v0[15];
        void v13[2] = v15 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v15, v16, v17);
        uint64_t v33 = v13;
        v12 += v31;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = _swiftEmptyArrayStorage;
    }
    uint64_t v18 = v0[18];
    uint64_t v20 = v0[9];
    uint64_t v19 = v0[10];
    *(void *)(v19 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs) = v13;
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_10000A844(&qword_10096DE80);
    uint64_t v22 = *(void *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v18, v20, v21);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    uint64_t v23 = v19 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
    swift_beginAccess();
    sub_10026B410(v18, v23, &qword_10096DF70);
    swift_endAccess();
    uint64_t v24 = *(void *)(v19 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
    swift_retain();
    uint64_t v25 = sub_1002E7AD4(0, v24);
    v0[21] = v25;
    uint64_t v28 = v25;
    uint64_t v29 = v0[10];
    swift_release();
    *(void *)(v29 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection) = v28;
    swift_retain();
    swift_release();
    uint64_t v30 = static AirDropActor.shared;
    v0[22] = static AirDropActor.shared;
    return _swift_task_switch(sub_1002EC408, v30, 0);
  }
}

uint64_t sub_1002EC408()
{
  uint64_t v1 = v0[11];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = (void *)v0[10];
    type metadata accessor for SDAirDropSendCompressionAdapter();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v3 = v2;
    id v4 = sub_10025BE1C(v1, (uint64_t)v2, (uint64_t)&off_1008D6210);
    v0[24] = v4;
    *(void *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = v4;
    swift_retain();
    swift_release();
    sub_1002FA308(&qword_10096B888, (void (*)(uint64_t))type metadata accessor for SDAirDropSendCompressionAdapter);
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
    uint64_t v8 = sub_1002EC688;
    uint64_t v9 = v5;
    uint64_t v10 = v7;
  }
  else
  {
    uint64_t v11 = v0[20];
    uint64_t v12 = type metadata accessor for SFAirDropSend.Failure();
    sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    v0[23] = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for SFAirDropSend.Failure.badRequest(_:), v12);
    swift_willThrow();
    uint64_t v8 = sub_1002EC5F4;
    uint64_t v9 = v11;
    uint64_t v10 = 0;
  }
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_1002EC5F4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EC688()
{
  if (qword_100969AE8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096B7B0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting Send Compression Adapter", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);

  uint64_t v7 = *(void **)(v5 + 24);
  [v7 zip];
  id v8 = [v7 copyReadStream];
  uint64_t v9 = *(void **)(v5 + 32);
  *(void *)(v5 + 32) = v8;

  return _swift_task_switch(sub_1002EC7DC, v6, 0);
}

uint64_t sub_1002EC7DC()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release();
  return _swift_task_switch(sub_1002EC848, v1, 0);
}

uint64_t sub_1002EC848()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EC8E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = _s14descr1008C9A51V15ExchangeRequestVMa(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10000B47C(v7, (uint64_t)qword_10096DD80);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending EXCHANGE request", v10, 2u);
    swift_slowDealloc();
  }

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v17[0] = 0x43584520646E6553;
  v17[1] = 0xEF5B2045474E4148;
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1002FA308(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 93;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  sub_1002FA830(a1, (uint64_t)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), _s14descr1008C9A51V15ExchangeRequestVMa);
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v2;
  sub_1002FA430((uint64_t)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, _s14descr1008C9A51V15ExchangeRequestVMa);
  _s14descr1008C9A51V16ExchangeResponseVMa(0);
  id v15 = v2;
  withProgressTask<A, B>(_:initialProgress:operation:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002ECBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = *(void *)(_s14descr1008C9A51V15ExchangeRequestVMa(0) - 8);
  v3[8] = v4;
  v3[9] = *(void *)(v4 + 64);
  v3[10] = swift_task_alloc();
  sub_10000A844(&qword_10096C920);
  v3[11] = swift_task_alloc();
  sub_10000A844(&qword_10096DF78);
  v3[12] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002ECD2C, v5, 0);
}

uint64_t sub_1002ECD2C()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = sub_10000A844((uint64_t *)&unk_10096DE90);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  uint64_t v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess();
  sub_10026B410(v1, v6, &qword_10096DF78);
  swift_endAccess();
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain();
  uint64_t v8 = sub_1002E7AD4(0, v7);
  v0[14] = v8;
  uint64_t v9 = v8;
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  id v15 = (char *)v0[6];
  uint64_t v14 = v0[7];
  swift_release();
  *(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection] = v9;
  swift_retain();
  swift_release();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  sub_1002FA830(v14, v10, _s14descr1008C9A51V15ExchangeRequestVMa);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = swift_allocObject();
  v0[15] = v18;
  *(void *)(v18 + 16) = v15;
  sub_1002FA430(v10, v18 + v17, _s14descr1008C9A51V15ExchangeRequestVMa);
  *(void *)(v18 + ((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = v9;
  uint64_t v19 = swift_allocObject();
  v0[16] = v19;
  *(void *)(v19 + 16) = v15;
  uint64_t v20 = v15;
  swift_retain();
  uint64_t v21 = v20;
  uint64_t v22 = (void *)swift_task_alloc();
  v0[17] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1002E7944;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_1002ED0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a2;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1002ED188;
  return sub_1006A77EC(a3, a4);
}

uint64_t sub_1002ED188()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 32) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_1002ED2F8;
    return sub_1002ED3F0();
  }
}

uint64_t sub_1002ED2F8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1002ED3F0()
{
  v1[11] = v0;
  sub_10000A844(&qword_10096DF78);
  v1[12] = swift_task_alloc();
  uint64_t v2 = sub_10000A844((uint64_t *)&unk_10096DE90);
  v1[13] = v2;
  v1[14] = *(void *)(v2 - 8);
  v1[15] = swift_task_alloc();
  _s14descr1008C9A51V16ExchangeResponseVMa(0);
  v1[16] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v3 = static AirDropActor.shared;
  v1[17] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002ED54C, v3, 0);
}

uint64_t sub_1002ED54C()
{
  uint64_t v1 = *(void *)(v0[11] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection);
  v0[18] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[19] = v2;
    void *v2 = v0;
    v2[1] = sub_1002ED66C;
    uint64_t v3 = v0[16];
    return sub_1006A8CB8(v3, v1);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1002ED66C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v4 = sub_1002ED97C;
  }
  else {
    uint64_t v4 = sub_1002ED798;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002ED798()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess();
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  uint64_t v5 = v0[16];
  if (v4)
  {
    sub_1002F6F68(v0[16], _s14descr1008C9A51V16ExchangeResponseVMa);
    swift_endAccess();
  }
  else
  {
    uint64_t v7 = v0[14];
    uint64_t v6 = v0[15];
    uint64_t v8 = v0[13];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v3, v8);
    swift_endAccess();
    SFProgressContinuation.finish(with:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_1002F6F68(v5, _s14descr1008C9A51V16ExchangeResponseVMa);
  }
  uint64_t v10 = v0[11];
  uint64_t v9 = v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[14] + 56))(v9, 1, 1, v0[13]);
  uint64_t v11 = v10 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess();
  sub_10026B410(v9, v11, &qword_10096DF78);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1002ED97C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  sub_1002EF8F8(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection, "Cancelling UPLOAD connection %s");
  uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1))
  {
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = v0[14];
    uint64_t v5 = v0[15];
    uint64_t v7 = v0[13];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
    SFProgressContinuation.fail(with:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  uint64_t v9 = v0[11];
  uint64_t v8 = v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[14] + 56))(v8, 1, 1, v0[13]);
  uint64_t v10 = v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess();
  sub_10026B410(v8, v10, &qword_10096DF78);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1002EDB38(uint64_t a1, uint64_t a2)
{
  v2[5] = a2;
  uint64_t v3 = sub_10000A844((uint64_t *)&unk_10096DE90);
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropSend.Failure();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v6 = static AirDropActor.shared;
  v2[15] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002EDCF0, v6, 0);
}

uint64_t sub_1002EDCF0()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096C598 + dword_10096C598);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002EDDB8;
  return v3(0x70801D946C940000, 2, 0, 0, 1);
}

uint64_t sub_1002EDDB8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[15];
  (*(void (**)(void, void))(v2[13] + 8))(v2[14], v2[12]);
  if (v0) {
    uint64_t v4 = sub_1002FB178;
  }
  else {
    uint64_t v4 = sub_1002EDF34;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002EDF34()
{
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096DD80);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "EXCHANGE request timeout", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v10 = v0[5];

  sub_1002EF8F8(1, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection, "Cancelling UPLOAD connection %s");
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for SFAirDropSend.Failure.receiverDeclined(_:), v7);
  uint64_t v11 = v10 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
  {
    uint64_t v13 = v0[10];
    uint64_t v12 = v0[11];
    uint64_t v15 = v0[8];
    uint64_t v14 = v0[9];
    uint64_t v16 = v0[6];
    uint64_t v17 = v0[7];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v11, v16);
    sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v18, v12, v14);
    SFProgressContinuation.fail(with:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    swift_errorRelease();
  }
  uint64_t v20 = v0[10];
  uint64_t v19 = v0[11];
  uint64_t v21 = v0[9];
  sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v22, v19, v21);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1002EE26C(uint64_t a1)
{
  uint64_t v3 = _s14descr1008C9841V12ErrorRequestVMa();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_10096DD80);
  sub_1002FA830(a1, (uint64_t)v9, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = v4;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v26 = a1;
    v30[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    id v27 = v7;
    uint64_t v16 = CodableError.description.getter();
    uint64_t v29 = sub_100254634(v16, v17, v30);
    uint64_t v7 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002F6F68((uint64_t)v9, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Sending ERROR request %s", v14, 0xCu);
    swift_arrayDestroy();
    a1 = v26;
    swift_slowDealloc();
    uint64_t v4 = v25;
    swift_slowDealloc();
  }
  else
  {
    sub_1002F6F68((uint64_t)v9, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
  }

  strcpy((char *)v30, "Send ERROR [");
  BYTE5(v30[1]) = 0;
  HIWORD(v30[1]) = -5120;
  type metadata accessor for SFAirDrop.TransferIdentifier();
  sub_1002FA308(&qword_10096DFC0, (void (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier);
  v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 93;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  sub_1002FA830(a1, (uint64_t)v7, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
  unint64_t v20 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v1;
  sub_1002FA430((uint64_t)v7, v21 + v20, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
  id v22 = v1;
  withProgressTask<A, B>(_:initialProgress:operation:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002EE670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = *(void *)(_s14descr1008C9841V12ErrorRequestVMa() - 8);
  v3[4] = v4;
  v3[5] = *(void *)(v4 + 64);
  v3[6] = swift_task_alloc();
  sub_10000A844(&qword_10096C920);
  v3[7] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  v3[8] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002EE7A0, v5, 0);
}

uint64_t sub_1002EE7A0()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain();
  uint64_t v2 = sub_1002E7AD4(0, v1);
  v0[9] = v2;
  swift_release();
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v8 = (char *)v0[2];
  uint64_t v7 = v0[3];
  *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection] = v2;
  swift_retain();
  swift_release();
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  sub_1002FA830(v7, v3, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  v0[10] = v11;
  *(void *)(v11 + 16) = v8;
  sub_1002FA430(v3, v11 + v10, (uint64_t (*)(void))_s14descr1008C9841V12ErrorRequestVMa);
  *(void *)(v11 + ((v5 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = v2;
  uint64_t v12 = swift_allocObject();
  v0[11] = v12;
  *(void *)(v12 + 16) = v8;
  uint64_t v13 = v8;
  swift_retain();
  uint64_t v14 = v13;
  uint64_t v15 = (void *)swift_task_alloc();
  v0[12] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1002EEA40;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_1002EEA40()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  sub_10000A7E8(v3, &qword_10096C920);
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v5 = sub_1002EEC48;
  }
  else {
    uint64_t v5 = sub_1002EEBD0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002EEBD0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EEC48()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a2;
  v4[3] = a3;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint;
  v4[4] = static AirDropActor.shared;
  v4[5] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v4[6] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1002EEDB4;
  return sub_1006A7A48(a3, a4);
}

uint64_t sub_1002EEDB4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = static AirDropActor.shared;
    *(void *)(v2 + 56) = static AirDropActor.shared;
    return _swift_task_switch(sub_1002EEF04, v6, 0);
  }
}

uint64_t sub_1002EEF04()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection);
  v0[8] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[9] = v2;
    void *v2 = v0;
    v2[1] = sub_1002EF004;
    return sub_1006A9354(v1);
  }
  else
  {
    uint64_t v4 = v0[4];
    return _swift_task_switch(sub_1002EF254, v4, 0);
  }
}

uint64_t sub_1002EF004(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 80) = v2;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v6 + 56);
  if (v2)
  {
    uint64_t v8 = sub_1002EF1B8;
  }
  else
  {
    sub_100250CC4(a1, a2);
    uint64_t v8 = sub_1002EF150;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1002EF150()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 32);
  return _swift_task_switch(sub_1002EF254, v1, 0);
}

uint64_t sub_1002EF1B8()
{
  sub_1002EF8F8(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection, "Cancelling ERROR connection %s");
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 32);
  return _swift_task_switch(sub_1002EF254, v1, 0);
}

uint64_t sub_1002EF254()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = v1 + *(int *)(_s14descr1008C9841V12ErrorRequestVMa() + 20);
  uint64_t v3 = type metadata accessor for CodableError();
  sub_1002FA308(&qword_10096E0A0, (void (*)(uint64_t))&type metadata accessor for CodableError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
  swift_willThrow();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1002EF368(uint64_t a1, uint64_t a2)
{
  v2[2] = a2;
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v4 = static AirDropActor.shared;
  v2[6] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002EF464, v4, 0);
}

uint64_t sub_1002EF464()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10096C598 + dword_10096C598);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002EF52C;
  return v3(5000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_1002EF52C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void *)(*v1 + 24);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v7 = sub_1002EF894;
  }
  else {
    uint64_t v7 = sub_1002EF6B4;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1002EF6B4()
{
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10000B47C(v1, (uint64_t)qword_10096DD80);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ERROR request timeout", v4, 2u);
    swift_slowDealloc();
  }

  sub_1002EF8F8(1, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection, "Cancelling ERROR connection %s");
  uint64_t v5 = type metadata accessor for SFAirDropSend.Failure();
  sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for SFAirDropSend.Failure.receiverDeclined(_:), v5);
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1002EF894()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EF8F8(uint64_t result, uint64_t *a2, char *a3)
{
  uint64_t v4 = *a2;
  if (*(void *)(v3 + *a2))
  {
    uint64_t v6 = v3;
    char v7 = result;
    uint64_t v8 = qword_100969B68;
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10000B47C(v9, (uint64_t)qword_10096DD80);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      format = a3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v13 = NWConnection.debugDescription.getter();
      sub_100254634(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, format, v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if ((v7 & 1) == 0)
      {
LABEL_6:
        NWConnection.cancel()();
LABEL_9:
        swift_release();
        *(void *)(v6 + v4) = 0;
        return swift_release();
      }
    }
    else
    {

      swift_release_n();
      if ((v7 & 1) == 0) {
        goto LABEL_6;
      }
    }
    NWConnection.forceCancel()();
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1002EFAF8(int a1)
{
  uint64_t v3 = type metadata accessor for SFSandboxTokenURLPair();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10000B47C(v10, (uint64_t)qword_10096DD80);
  os_log_type_t v11 = v1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    LODWORD(v36) = a1;
    os_log_type_t v37 = v9;
    *(_DWORD *)unint64_t v14 = 136315138;
    uint64_t v39 = v15;
    v35[1] = v14 + 4;
    uint64_t v16 = sub_100313BE0();
    uint64_t v38 = sub_100254634(v16, v17, &v39);
    uint64_t v9 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Finish send connection to endpoint %s", v14, 0xCu);
    swift_arrayDestroy();
    LOBYTE(a1) = v36;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v18 = a1 & 1;
  sub_1002EF8F8(v18, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection, "Cancelling HELLO connection %s");
  sub_1002EF8F8(v18, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection, "Cancelling ASK connection %s");
  sub_1002EF8F8(v18, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection, "Cancelling UPLOAD connection %s");
  sub_1002EF8F8(v18, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection, "Cancelling UPLOAD connection %s");
  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
  uint64_t v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v21 = v11;
  uint64_t v22 = qword_100969B90;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = static AirDropActor.shared;
  uint64_t v24 = sub_1002FA308((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  uint64_t v25 = (void *)swift_allocObject();
  CFIndex v25[2] = v23;
  v25[3] = v24;
  v25[4] = v20;
  swift_retain();
  swift_release();
  sub_10028CFA8((uint64_t)v9, (uint64_t)&unk_10096E040, (uint64_t)v25);
  swift_release();
  uint64_t v26 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs;
  uint64_t v27 = *(void *)&v21[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs];
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    uint64_t v36 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs;
    os_log_type_t v37 = v21;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v30 = v4 + 16;
    uint64_t v29 = v31;
    uint64_t v32 = v27 + ((*(unsigned __int8 *)(v30 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64));
    uint64_t v33 = *(void *)(v30 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v29(v6, v32, v3);
      SFSandboxTokenURLPair.releaseSandboxExtension()();
      (*(void (**)(char *, uint64_t))(v30 - 8))(v6, v3);
      v32 += v33;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    uint64_t v26 = v36;
    uint64_t v21 = v37;
  }
  *(void *)&v21[v26] = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002EFFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  *(void *)(v4 + 72) = static AirDropActor.shared;
  return _swift_task_switch(sub_1002F0064, v5, 0);
}

uint64_t sub_1002F0064()
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = *(void *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    v0[10] = v3;
    if (v3)
    {
      swift_retain();

      uint64_t v4 = (void *)swift_task_alloc();
      v0[11] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_1002F01B4;
      return sub_10025CCD4();
    }
  }
  swift_beginAccess();
  uint64_t v6 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v6)
  {
    *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = 0;

    swift_release();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002F01B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1002F02E0, v1, 0);
}

uint64_t sub_1002F02E0()
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    *(void *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = 0;

    swift_release();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002F037C()
{
  v1[13] = v0;
  sub_10000A844(&qword_10096DF70);
  v1[14] = swift_task_alloc();
  uint64_t v2 = sub_10000A844(&qword_10096DE80);
  v1[15] = v2;
  v1[16] = *(void *)(v2 - 8);
  v1[17] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v3 = static AirDropActor.shared;
  v1[18] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002F04AC, v3, 0);
}

uint64_t sub_1002F04AC()
{
  uint64_t v1 = *(void *)(v0[13] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection);
  v0[19] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[20] = v2;
    void *v2 = v0;
    v2[1] = sub_1002F05BC;
    return sub_1006A8860(v1);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1002F05BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[21] = a1;
  v5[22] = a2;
  v5[23] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[18];
  if (v2) {
    uint64_t v7 = sub_1002F0898;
  }
  else {
    uint64_t v7 = sub_1002F06F4;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1002F06F4()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[13] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1))
  {
    uint64_t v4 = v0[21];
    unint64_t v5 = v0[22];
  }
  else
  {
    uint64_t v7 = v0[21];
    unint64_t v6 = v0[22];
    uint64_t v9 = v0[16];
    uint64_t v8 = v0[17];
    uint64_t v10 = v0[15];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v3, v10);
    v0[11] = v7;
    v0[12] = v6;
    SFProgressContinuation.finish(with:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v4 = v7;
    unint64_t v5 = v6;
  }
  sub_100250CC4(v4, v5);
  uint64_t v12 = v0[13];
  uint64_t v11 = v0[14];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[16] + 56))(v11, 1, 1, v0[15]);
  uint64_t v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess();
  sub_10026B410(v11, v13, &qword_10096DF70);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_1002F0898()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[13];
  sub_1002EF8F8(0, &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection, "Cancelling UPLOAD connection %s");
  uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1))
  {
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = v0[16];
    uint64_t v5 = v0[17];
    uint64_t v7 = v0[15];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
    SFProgressContinuation.fail(with:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  uint64_t v9 = v0[13];
  uint64_t v8 = v0[14];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[16] + 56))(v8, 1, 1, v0[15]);
  uint64_t v10 = v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess();
  sub_10026B410(v8, v10, &qword_10096DF70);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1002F0A4C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for NWEndpoint();
  __chkstk_darwin(v7);
  uint64_t v10 = (nw_endpoint_t *)((char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    uint64_t v11 = qword_100969B68;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10000B47C(v12, (uint64_t)qword_10096DD80);
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v16 = NWConnection.debugDescription.getter();
      v27[1] = sub_100254634(v16, v17, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Creating new AirDrop connection from existing %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v22 = sub_100666E70();
    swift_release();
  }
  else
  {
    v27[0] = v8;
    if (qword_100969B68 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B47C(v18, (uint64_t)qword_10096DD80);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Creating new AirDrop connection", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = a2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint;
    uint64_t v23 = *(NSObject **)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_queue);
    uint64_t v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    sub_10065E8D0(v23, a2, a3 & 1, (uint64_t)sub_1002F9BB8, v24, (uint64_t)sub_1002F9BC0, v25);
    swift_release_n();
    swift_release_n();
    if (!v3)
    {
      *uint64_t v10 = sub_100313F6C();
      (*(void (**)(nw_endpoint_t *, void, uint64_t))(v27[0] + 104))(v10, enum case for NWEndpoint.opaque(_:), v7);
      type metadata accessor for NWConnection();
      swift_allocObject();
      return NWConnection.init(to:using:)();
    }
  }
  return v22;
}

void sub_1002F0E98(uint64_t a1, NSObject *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    sub_1002F97FC(a2, a3);
  }
}

uint64_t sub_1002F0F10(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    sub_10045F320();
    a2();

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1002F0FA0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWConnection.State();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = swift_allocObject();
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  swift_unknownObjectWeakInit();

  uint64_t v11 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(&v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v2);
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v9;
  (*(void (**)(char *, unsigned char *, uint64_t))(v3 + 32))(&v13[v12], &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  sub_10028CFA8((uint64_t)v7, (uint64_t)&unk_10096E010, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_1002F1220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  return _swift_task_switch(sub_1002F1244, 0, 0);
}

uint64_t sub_1002F1244()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[11] = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    swift_beginAccess();
    uint64_t v3 = swift_unknownObjectWeakLoadStrong();
    v0[12] = v3;
    if (v3)
    {
      uint64_t v4 = (void *)swift_task_alloc();
      v0[13] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_1002F1378;
      uint64_t v5 = v0[10];
      return sub_1002F14EC(v5, v2);
    }
    swift_release();
  }
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002F1378()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 96);
  swift_task_dealloc();

  return _swift_task_switch(sub_1002F148C, 0, 0);
}

uint64_t sub_1002F148C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002F14EC(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v3[16] = type metadata accessor for SDAirDropDiscoveredEndpoint(0);
  v3[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SFAirDropSend.Transfer.Metrics.TransferResult();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for NWError();
  v3[21] = v5;
  v3[22] = *(void *)(v5 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for NWConnection.State();
  v3[29] = v6;
  v3[30] = *(void *)(v6 - 8);
  v3[31] = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v7 = static AirDropActor.shared;
  v3[32] = static AirDropActor.shared;
  return _swift_task_switch(sub_1002F1714, v7, 0);
}

uint64_t sub_1002F1714()
{
  uint64_t v132 = v0;
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = v0[29];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[13], v3);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 != enum case for NWConnection.State.waiting(_:))
  {
    if (v4 == enum case for NWConnection.State.failed(_:))
    {
      uint64_t v31 = v0[31];
      uint64_t v32 = v0[24];
      uint64_t v33 = v0[21];
      uint64_t v34 = v0[22];
      (*(void (**)(uint64_t, void))(v0[30] + 96))(v31, v0[29]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v32, v31, v33);
      if (qword_100969B68 != -1) {
        swift_once();
      }
      uint64_t v36 = v0[23];
      uint64_t v35 = v0[24];
      uint64_t v37 = v0[21];
      uint64_t v38 = v0[22];
      uint64_t v39 = type metadata accessor for Logger();
      sub_10000B47C(v39, (uint64_t)qword_10096DD80);
      unint64_t v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
      v130(v36, v35, v37);
      swift_retain_n();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      BOOL v42 = os_log_type_enabled(v40, v41);
      uint64_t v44 = v0[22];
      uint64_t v43 = v0[23];
      uint64_t v45 = v0[21];
      if (v42)
      {
        uint64_t v46 = swift_slowAlloc();
        os_log_t log = (os_log_t)swift_slowAlloc();
        uint64_t v131 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315394;
        uint64_t v47 = NWConnection.debugDescription.getter();
        unint64_t v125 = v40;
        v0[4] = sub_100254634(v47, v48, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v46 + 12) = 2112;
        sub_1002FA308(&qword_10096E020, (void (*)(uint64_t))&type metadata accessor for NWError);
        swift_allocError();
        v130(v49, v43, v45);
        uint64_t v50 = _swift_stdlib_bridgeErrorToNSError();
        v0[5] = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        log->Class isa = (Class)v50;
        uint64_t v53 = *(void (**)(void, void))(v44 + 8);
        uint64_t v52 = v44 + 8;
        uint64_t v51 = v53;
        v53(v43, v45);
        _os_log_impl((void *)&_mh_execute_header, v125, v41, "Transfer connection failed %s %@", (uint8_t *)v46, 0x16u);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
        uint64_t v93 = *(void (**)(void, void))(v44 + 8);
        uint64_t v52 = v44 + 8;
        uint64_t v51 = v93;
        v93(v43, v45);
      }
      v0[36] = v52;
      v0[37] = v51;
      uint64_t v94 = v0[24];
      uint64_t v95 = v0[21];
      NWConnection.cancel()();
      sub_1002FA308(&qword_10096E020, (void (*)(uint64_t))&type metadata accessor for NWError);
      uint64_t v89 = swift_allocError();
      v0[38] = v89;
      v130(v96, v94, v95);
      uint64_t v91 = (void *)swift_task_alloc();
      v0[39] = v91;
      void *v91 = v0;
      uint64_t v92 = sub_1002F2E20;
      goto LABEL_30;
    }
    if (v4 == enum case for NWConnection.State.setup(_:))
    {
      if (qword_100969B68 != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      sub_10000B47C(v72, (uint64_t)qword_10096DD80);
      swift_retain_n();
      int v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 136315138;
        uint64_t v131 = v76;
        uint64_t v77 = NWConnection.debugDescription.getter();
        v0[12] = sub_100254634(v77, v78, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Setting up transfer connection %s", v75, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }
      goto LABEL_59;
    }
    if (v4 == enum case for NWConnection.State.preparing(_:))
    {
      if (qword_100969B68 != -1) {
        swift_once();
      }
      uint64_t v99 = type metadata accessor for Logger();
      sub_10000B47C(v99, (uint64_t)qword_10096DD80);
      swift_retain_n();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v100, v101))
      {
        unint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v131 = swift_slowAlloc();
        *(_DWORD *)unint64_t v102 = 136315138;
        uint64_t v103 = NWConnection.debugDescription.getter();
        v0[7] = sub_100254634(v103, v104, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v105 = "Preparing transfer connection %s";
LABEL_45:
        _os_log_impl((void *)&_mh_execute_header, v100, v101, v105, v102, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_46:
        swift_slowDealloc();

LABEL_59:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v122 = (uint64_t (*)(void))v0[1];
        return v122();
      }
    }
    else if (v4 == enum case for NWConnection.State.ready(_:))
    {
      if (qword_100969B68 != -1) {
        swift_once();
      }
      uint64_t v107 = type metadata accessor for Logger();
      sub_10000B47C(v107, (uint64_t)qword_10096DD80);
      swift_retain_n();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v100, v101))
      {
        unint64_t v102 = (uint8_t *)swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        *(_DWORD *)unint64_t v102 = 136315138;
        uint64_t v131 = v108;
        uint64_t v109 = NWConnection.debugDescription.getter();
        v0[6] = sub_100254634(v109, v110, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v105 = "Transfer connection ready %s";
        goto LABEL_45;
      }
    }
    else
    {
      if (v4 != enum case for NWConnection.State.cancelled(_:))
      {
        if (qword_100969B68 != -1) {
          swift_once();
        }
        uint64_t v116 = type metadata accessor for Logger();
        sub_10000B47C(v116, (uint64_t)qword_10096DD80);
        swift_retain_n();
        unint64_t v117 = Logger.logObject.getter();
        os_log_type_t v118 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v117, v118))
        {
          unint64_t v119 = (uint8_t *)swift_slowAlloc();
          uint64_t v131 = swift_slowAlloc();
          *(_DWORD *)unint64_t v119 = 136315138;
          uint64_t v120 = NWConnection.debugDescription.getter();
          v0[2] = sub_100254634(v120, v121, &v131);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "Unknown transfer connection state %s", v119, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
        goto LABEL_59;
      }
      if (qword_100969B68 != -1) {
        swift_once();
      }
      uint64_t v111 = type metadata accessor for Logger();
      sub_10000B47C(v111, (uint64_t)qword_10096DD80);
      swift_retain_n();
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v112 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v100, v112))
      {
        uint64_t v113 = (uint8_t *)swift_slowAlloc();
        uint64_t v131 = swift_slowAlloc();
        *(_DWORD *)uint64_t v113 = 136315138;
        uint64_t v114 = NWConnection.debugDescription.getter();
        v0[3] = sub_100254634(v114, v115, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v100, v112, "Transfer connection invalidated %s", v113, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_46;
      }
    }
    swift_release_n();

    goto LABEL_59;
  }
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[28];
  uint64_t v7 = v0[27];
  uint64_t v8 = v0[21];
  uint64_t v9 = v0[22];
  (*(void (**)(uint64_t, void))(v0[30] + 96))(v5, v0[29]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v6, v5, v8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v10(v7, v6, v8);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v7, v8);
  uint64_t v12 = v0[21];
  uint64_t v13 = v0[22];
  if (v11 == enum case for NWError.posix(_:))
  {
    (*(void (**)(void, uint64_t))(v13 + 96))(v0[27], v12);
    int v14 = POSIXErrorCode.rawValue.getter();
    if (v14 == POSIXErrorCode.rawValue.getter())
    {
      if (qword_100969B68 != -1) {
        swift_once();
      }
      uint64_t v15 = v0[28];
      uint64_t v16 = v0[26];
      uint64_t v17 = v0[21];
      uint64_t v18 = type metadata accessor for Logger();
      sub_10000B47C(v18, (uint64_t)qword_10096DD80);
      v10(v16, v15, v17);
      swift_retain_n();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t type = static os_log_type_t.default.getter();
      BOOL v20 = os_log_type_enabled(v19, type);
      uint64_t v21 = v0[28];
      uint64_t v22 = v0[26];
      uint64_t v23 = v0[21];
      uint64_t v24 = v0[22];
      if (v20)
      {
        uint64_t v25 = swift_slowAlloc();
        id v123 = (void *)swift_slowAlloc();
        uint64_t v131 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 138412546;
        sub_1002FA308(&qword_10096E020, (void (*)(uint64_t))&type metadata accessor for NWError);
        swift_allocError();
        os_log_t v124 = v21;
        v10(v26, v22, v23);
        uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
        v0[10] = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v123 = v27;
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
        v28(v22, v23);
        *(_WORD *)(v25 + 12) = 2080;
        uint64_t v29 = NWConnection.debugDescription.getter();
        v0[11] = sub_100254634(v29, v30, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v19, type, "Ignoring error %@ for connection %s", (uint8_t *)v25, 0x16u);
        sub_10000A844(&qword_10096B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v28((uint64_t)v124, v23);
      }
      else
      {

        swift_release_n();
        uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
        v106(v22, v23);
        v106((uint64_t)v21, v23);
      }
      goto LABEL_59;
    }
  }
  else
  {
    (*(void (**)(void, uint64_t))(v13 + 8))(v0[27], v12);
  }
  if (qword_100969B68 != -1) {
    swift_once();
  }
  uint64_t v54 = v0[28];
  uint64_t v55 = v0[25];
  uint64_t v56 = v0[21];
  uint64_t v57 = type metadata accessor for Logger();
  sub_10000B47C(v57, (uint64_t)qword_10096DD80);
  uint64_t v58 = v56;
  uint64_t v59 = v10;
  v10(v55, v54, v58);
  swift_retain_n();
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v63 = v0[25];
  uint64_t v65 = v0[21];
  uint64_t v64 = v0[22];
  if (v62)
  {
    uint64_t v66 = swift_slowAlloc();
    os_log_t loga = (os_log_t)swift_slowAlloc();
    uint64_t v131 = swift_slowAlloc();
    *(_DWORD *)uint64_t v66 = 136315394;
    uint64_t v67 = NWConnection.debugDescription.getter();
    uint64_t v126 = v60;
    v0[8] = sub_100254634(v67, v68, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v66 + 12) = 2112;
    sub_1002FA308(&qword_10096E020, (void (*)(uint64_t))&type metadata accessor for NWError);
    swift_allocError();
    v59(v69, v63, v65);
    uint64_t v70 = _swift_stdlib_bridgeErrorToNSError();
    v0[9] = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    loga->Class isa = (Class)v70;
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v71(v63, v65);
    uint64_t v60 = v126;
    _os_log_impl((void *)&_mh_execute_header, v126, v61, "Waiting for transfer connection %s %@", (uint8_t *)v66, 0x16u);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v71(v63, v65);
  }

  v0[33] = v71;
  uint64_t v79 = v0[15] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint;
  sub_1002FA830(v79, v0[17], type metadata accessor for SDAirDropDiscoveredEndpoint);
  BOOL v80 = swift_getEnumCaseMultiPayload() == 1;
  if (v80) {
    uint64_t v81 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint;
  }
  else {
    uint64_t v81 = type metadata accessor for SDAirDropDiscoveredEndpoint;
  }
  sub_1002F6F68(v0[17], v81);
  uint64_t v83 = v0[19];
  uint64_t v82 = (BOOL *)v0[20];
  uint64_t v84 = v0[18];
  uint64_t v85 = v0[15] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendRequest;
  *uint64_t v82 = v80;
  uint64_t v86 = enum case for SFAirDropSend.Failure.resolveFailure(_:);
  uint64_t v87 = type metadata accessor for SFAirDropSend.Failure();
  uint64_t v88 = *(void (**)(BOOL *, uint64_t, uint64_t))(*(void *)(v87 - 8) + 104);
  v88(v82, v86, v87);
  (*(void (**)(BOOL *, void, uint64_t))(v83 + 104))(v82, enum case for SFAirDropSend.Transfer.Metrics.TransferResult.failure(_:), v84);
  sub_1003BA74C(v85, v79, (uint64_t)v82);
  (*(void (**)(BOOL *, uint64_t))(v83 + 8))(v82, v84);
  NWConnection.cancel()();
  sub_1002FA308(&qword_100974F50, (void (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure);
  uint64_t v89 = swift_allocError();
  v0[34] = v89;
  *uint64_t v90 = 0;
  v88(v90, v86, v87);
  uint64_t v91 = (void *)swift_task_alloc();
  v0[35] = v91;
  void *v91 = v0;
  uint64_t v92 = sub_1002F2C0C;
LABEL_30:
  v91[1] = v92;
  uint64_t v97 = v0[14];
  return sub_1002F3030(v97, v89);
}