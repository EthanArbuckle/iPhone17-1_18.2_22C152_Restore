uint64_t sub_100008B50()
{
  uint64_t v0;
  uint64_t vars8;

  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100008BE0(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  v8 = (void *)static NSUserDefaults.airdrop.getter();
  char v9 = SFAirDropUserDefaults.nearFieldSharingEnabled.getter();

  if ((v9 & 1) == 0 && a1 != 2)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10000B47C(v10, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - feature disabled";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v11, v12, v14, v13, 2u);
    swift_slowDealloc();
LABEL_18:

    return 0;
  }
  v15 = (void *)static NSUserDefaults.airdrop.getter();
  char v16 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v16 & 1) == 0)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10000B47C(v19, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - BoopToAction feature flag disabled";
    goto LABEL_17;
  }
  v17 = *(void **)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus);
  if ([v17 isClarityBoardEnabled])
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10000B47C(v18, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - ClarityBoard Enabled";
    goto LABEL_17;
  }
  if ((a2 & 1) == 0 && [v17 lowPowerModeEnabled])
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10000B47C(v21, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - Low power mode enabled";
    goto LABEL_17;
  }
  if ((a3 & 1) == 0 && ([v17 isAirDropAllowed] & 1) == 0)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10000B47C(v24, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - AirDrop is restricted";
    goto LABEL_17;
  }
  if (SFStoreDemoMode())
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10000B47C(v22, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - Store Demo Mode Enabled";
    goto LABEL_17;
  }
  if (![v17 screenOn])
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10000B47C(v25, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - screen is off";
    goto LABEL_17;
  }
  if (![v17 wirelessEnabled])
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10000B47C(v26, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - wifi is off";
    goto LABEL_17;
  }
  if (BYSetupAssistantNeedsToRun())
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10000B47C(v23, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - device in Buddy";
    goto LABEL_17;
  }
  if (([v17 systemUIFlags] & 0x80000) != 0)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10000B47C(v27, (uint64_t)qword_10096C1C0);
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_18;
    }
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "SDAirDropNearFieldService.startNearFieldController SKIP - Buddy is visible";
    goto LABEL_17;
  }
  return 1;
}

uint64_t sub_1000092EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000A7E8(a1, &qword_10096C920);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_100009490(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000A844(&qword_10096C920);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = qword_100969B90;
  id v11 = a1;
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v12 = static AirDropActor.shared;
  uint64_t v13 = sub_10000B980((unint64_t *)&qword_1009744A0, (void (*)(uint64_t))type metadata accessor for AirDropActor);
  v14 = (void *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v11;
  swift_retain();
  sub_1000092EC((uint64_t)v8, a4, (uint64_t)v14);
  swift_release();
}

uint64_t sub_100009638()
{
  uint64_t v1 = v0[2];
  id v2 = [*(id *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus) systemUIFlags];
  uint64_t v3 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if ((v2 & 0x80000) != 0)
  {
    if (v4)
    {
      if (qword_100969B00 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10000B47C(v13, (uint64_t)qword_10096C1C0);
      v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        char v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "SDAirDropNearFieldService Buddy visible, stopping", v16, 2u);
        swift_slowDealloc();
      }

      v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService: stop", v19, 2u);
        swift_slowDealloc();
      }
      uint64_t v20 = v0[3];

      uint64_t v21 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
      sub_10028DDAC(v20);
      sub_10000A7E8(v20, &qword_100974EA0);
      sub_1002937C4(1);
      uint64_t v22 = *(void **)(v1 + v3);
      *(void *)(v1 + v3) = 0;
    }
  }
  else if (!v4)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10000B47C(v5, (uint64_t)qword_10096C1C0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "SDAirDropNearFieldService Buddy not visible, attempting to start", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "SDAirDropNearFieldService: start", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = v0[2];

    sub_1000099C0(*(void *)(v12 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType), 0xD000000000000013, 0x80000001007B76F0, 0);
  }
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

void sub_1000099C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v99) = a4;
  uint64_t v102 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v94 = *(void *)(v7 - 8);
  uint64_t v95 = v7;
  ((void (*)(void))__chkstk_darwin)();
  v92 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for DispatchQoS();
  uint64_t v91 = *(void *)(v93 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v90 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A844(&qword_10096C478);
  ((void (*)(void))__chkstk_darwin)();
  v84 = (uint64_t *)((char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v96 = v11;
  uint64_t v97 = v12;
  uint64_t v13 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v88 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v86 = (uint64_t)&v83 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v85 = (uint64_t)&v83 - v18;
  uint64_t v87 = v19;
  __chkstk_darwin(v17);
  v100 = (char *)&v83 - v20;
  uint64_t v21 = type metadata accessor for SFClientAccessLevel();
  uint64_t v83 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v83 - v25;
  uint64_t v27 = sub_10000A844((uint64_t *)&unk_10096C4D0);
  __chkstk_darwin(v27 - 8);
  v29 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for SFClientIdentity();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = v4;
  v34 = (uint64_t *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel);
  swift_beginAccess();
  uint64_t v35 = *v34;
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v98 = a3;
  uint64_t v89 = a2;
  if (!v36)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, 1, 1, v30);
LABEL_7:
    sub_10000A7E8((uint64_t)v29, (uint64_t *)&unk_10096C4D0);
    swift_endAccess();
    char v40 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_1005838BC(a2, a3);
  if (v38)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v29, *(void *)(v35 + 56) + *(void *)(v31 + 72) * v37, v30);
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, v39, 1, v30);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1) {
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v33, v29, v30);
  swift_endAccess();
  SFClientIdentity.accessLevel.getter();
  static SFClientAccessLevel.allowRestrictedBoop.getter();
  sub_10000B980((unint64_t *)&unk_10096C4E0, (void (*)(uint64_t))&type metadata accessor for SFClientAccessLevel);
  char v40 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v41 = *(void (**)(char *, uint64_t))(v83 + 8);
  v41(v24, v21);
  v41(v26, v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
LABEL_9:
  uint64_t v43 = (uint64_t)v100;
  uint64_t v42 = v101;
  if ((sub_100008BE0(v102, v99 & 1, v40 & 1) & 1) == 0)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_10000B47C(v66, (uint64_t)qword_10096C1C0);
    v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v67, v68)) {
      goto LABEL_24;
    }
    v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v69 = 0;
    v70 = "SDAirDropNearFieldService: Near field Controller is not available.";
    goto LABEL_23;
  }
  sub_1002ADF04();
  v44 = *(void **)(v42 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v44)
  {
    if (qword_100969B00 != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    sub_10000B47C(v71, (uint64_t)qword_10096C1C0);
    v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v67, v68)) {
      goto LABEL_24;
    }
    v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v69 = 0;
    v70 = "SDAirDropNearFieldService: missing Near field Controller, will not start polling";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v67, v68, v70, v69, 2u);
    swift_slowDealloc();
LABEL_24:

    return;
  }
  v45 = v44;
  UUID.init()();
  v46 = sub_10017E988((void *)kSecAttrKeyTypeECSECPrimeRandom, 256);
  uint64_t v47 = v96;
  *(void *)(v43 + *(int *)(v96 + 20)) = v46;
  id v48 = sub_10017EB90(v46);
  uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;

  v52 = (uint64_t *)(v43 + *(int *)(v47 + 24));
  uint64_t *v52 = v49;
  v52[1] = v51;
  uint64_t v53 = (uint64_t)v84;
  sub_1002AE574(v43, (uint64_t)v84, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v97 + 56))(v53, 0, 1, v47);
  uint64_t v54 = v42 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
  swift_beginAccess();
  sub_10026B410(v53, v54, &qword_10096C478);
  swift_endAccess();
  if (qword_100969B00 != -1) {
    swift_once();
  }
  uint64_t v55 = type metadata accessor for Logger();
  sub_10000B47C(v55, (uint64_t)qword_10096C1C0);
  uint64_t v56 = v85;
  sub_1002AE574(v43, v85, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  uint64_t v57 = v86;
  sub_1002AE574(v43, v86, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = swift_slowAlloc();
    v61 = (void *)swift_slowAlloc();
    v84 = v61;
    uint64_t v99 = swift_slowAlloc();
    aBlock[0] = v99;
    *(_DWORD *)uint64_t v60 = 138412546;
    v62.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    v100 = v45;
    Class isa = v62.super.isa;
    v103 = v62.super.isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v61 = isa;
    sub_1002AD3D4(v56, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    *(_WORD *)(v60 + 12) = 2080;
    type metadata accessor for UUID();
    sub_10000B980((unint64_t *)&qword_10096C470, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
    v103 = (void *)sub_100254634(v64, v65, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v45 = v100;
    sub_1002AD3D4(v57, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "SDAirDropNearFieldService: Starting to poll with public key: %@ listener ID: %s", (uint8_t *)v60, 0x16u);
    sub_10000A844(&qword_10096B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002AD3D4(v56, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    sub_1002AD3D4(v57, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  }

  uint64_t v72 = v98;
  uint64_t v73 = v89;
  uint64_t v74 = v88;
  sub_1002AE574(v43, v88, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  unint64_t v75 = (*(unsigned __int8 *)(v97 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  v76 = (void *)swift_allocObject();
  uint64_t v77 = v102;
  v76[2] = v45;
  v76[3] = v77;
  v76[4] = v73;
  v76[5] = v72;
  sub_1002AD36C(v74, (uint64_t)v76 + v75, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  aBlock[4] = (uint64_t)sub_1002AE238;
  aBlock[5] = (uint64_t)v76;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100296520;
  aBlock[3] = (uint64_t)&unk_1008D4D10;
  v78 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v79 = v45;
  v80 = v90;
  static DispatchQoS.unspecified.getter();
  v103 = &_swiftEmptyArrayStorage;
  sub_10000B980((unint64_t *)&qword_10096C8E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000A844((uint64_t *)&unk_10096C490);
  sub_1002AE308((unint64_t *)&qword_10096C8F0, (uint64_t *)&unk_10096C490);
  v81 = v92;
  uint64_t v82 = v95;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v78);

  (*(void (**)(char *, uint64_t))(v94 + 8))(v81, v82);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v80, v93);
  sub_1002AD3D4(v43, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  swift_release();
}

uint64_t sub_10000A6F4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10000A7E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000A844(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000A844(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

id sub_10000A888(uint64_t a1)
{
  id v2 = +[SDStatusMonitor sharedMonitor];
  unsigned int v3 = [v2 systemUIFlags];

  if ((v3 & 2) != 0) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = [*(id *)(a1 + 32) wasInLockScreen];
  }
  uint64_t v5 = paired_unlock_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if ((v3 & 2) != 0) {
      CFStringRef v6 = @"YES";
    }
    int v9 = 138412290;
    CFStringRef v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "on lock screen: %@", (uint8_t *)&v9, 0xCu);
  }

  id result = [*(id *)(a1 + 32) setWasInLockScreen:(v3 >> 1) & 1];
  if (v4)
  {
    uint64_t v8 = paired_unlock_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Transitioned out of lock screen.", (uint8_t *)&v9, 2u);
    }

    return [*(id *)(a1 + 32) beginUnlockIfNotOnLockScreen];
  }
  return result;
}

id sub_10000AB18(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 168) systemUIFlags];
  if (dword_100966E40 <= 30)
  {
    id v3 = v2;
    if (dword_100966E40 != -1 || _LogCategory_Initialize())
    {
      if ([*(id *)(a1 + 32) _systemCanTrigger]) {
        unsigned int v4 = "yes";
      }
      else {
        unsigned int v4 = "no";
      }
      uint64_t v8 = &unk_10076DEF8;
      int v9 = v4;
      id v7 = v3;
      LogPrintF();
    }
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_systemCanTrigger", v7, v8, v9) & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 144) requestRemoveAll];
  }
  uint64_t v5 = *(void **)(a1 + 32);

  return [v5 _update];
}

void sub_10000B03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 256), 8);
  _Block_object_dispose((const void *)(v41 - 208), 8);
  _Block_object_dispose((const void *)(v41 - 160), 8);
  _Block_object_dispose((const void *)(v41 - 112), 8);
  _Block_object_dispose((const void *)(v41 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10000B0B4(uint64_t a1, uint64_t a2, void *a3)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  unsigned int v4 = [a3 elements];
  id v5 = [v4 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_22;
  }
  id v6 = v5;
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)v25;
  do
  {
    for (i = 0; i != v6; i = (char *)i + 1)
    {
      if (*(void *)v25 != v8) {
        objc_enumerationMutation(v4);
      }
      CFStringRef v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
      uint64_t v11 = [v10 identifier];
      if (v11)
      {
        uint64_t v12 = [*(id *)(a1 + 32) objectForKeyedSubscript:v11];
        uint64_t v13 = v12;
        BOOL v14 = v12 != 0;
        if (v12) {
          uint64_t v7 = [v12 unsignedIntValue] | v7;
        }
      }
      else
      {
        BOOL v14 = 0;
      }
      uint64_t v15 = [v10 bundleIdentifier];
      if (v15
        && ([*(id *)(a1 + 32) objectForKeyedSubscript:v15],
            (uint64_t v16 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        uint64_t v17 = v16;
        uint64_t v7 = [v16 unsignedIntValue] | v7;
      }
      else
      {
        if (v14) {
          goto LABEL_18;
        }
        uint64_t v17 = daemon_log();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          v29 = v11;
          __int16 v30 = 2112;
          uint64_t v31 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "SystemUI unknown identifier: '%@'/ '%@'", buf, 0x16u);
        }
      }

LABEL_18:
    }
    id v6 = [v4 countByEnumeratingWithState:&v24 objects:v32 count:16];
  }
  while (v6);
LABEL_22:

  pthread_mutex_lock(&stru_100969508);
  uint64_t v18 = NSPrintF();
  uint64_t v19 = NSPrintF();
  uint64_t v20 = daemon_log();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v29 = v18;
    __int16 v30 = 2112;
    uint64_t v31 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "SystemUI changed: %@ -> %@", buf, 0x16u);
  }

  uint64_t v21 = *(void *)(a1 + 40);
  int v22 = *(_DWORD *)(v21 + 496);
  *(_DWORD *)(v21 + 496) = v7;
  pthread_mutex_unlock(&stru_100969508);
  if (v22 != v7)
  {
    uint64_t v23 = +[NSNotificationCenter defaultCenter];
    [v23 postNotificationName:@"com.apple.sharingd.SystemUIChanged" object:0];
  }
}

uint64_t sub_10000B47C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10000B4B4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10000B5AC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = sub_10000A6F0;
  id v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10096C680 + dword_10096C680);
  return v6(a1, v4);
}

uint64_t sub_10000B664(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000B4B4;
  return v6(a1);
}

uint64_t sub_10000B740(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000B77C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10000A6F0;
  return sub_10000B830(a1, v4, v5, v6);
}

uint64_t sub_10000B830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  sub_10000A844(&qword_100974EA0);
  *(void *)(v4 + 24) = swift_task_alloc();
  if (qword_100969B90 != -1) {
    swift_once();
  }
  uint64_t v5 = static AirDropActor.shared;
  return _swift_task_switch(sub_100009638, v5, 0);
}

uint64_t type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(uint64_t a1)
{
  return sub_10000B93C(a1, qword_10096C410);
}

uint64_t sub_10000B93C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AirDropActor.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_10000B980(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000B9C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BA10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BA58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BAA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BAE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BB30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BB78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000BBC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10000C170(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t start()
{
  uint64_t v1 = daemon_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Starting Up...", buf, 2u);
  }

  [@"com.apple.sharingd" UTF8String];
  _set_user_dir_suffix();
  sub_1001B499C();
  uint64_t v2 = +[NSUserDefaults standardUserDefaults];
  uint64_t v3 = [v2 objectForKey:@"OneTimeAirDropReset2"];

  if (!v3)
  {
    [v2 removeObjectForKey:kSFOperationDiscoverableModeKey];
    [v2 setObject:&__kCFBooleanTrue forKey:@"OneTimeAirDropReset2"];
  }
  id v4 = &_dispatch_main_q;
  *(void *)buf = 0;
  uint64_t v35 = buf;
  uint64_t v36 = 0x3032000000;
  uint64_t v37 = sub_10000D6EC;
  char v38 = sub_10000D6FC;
  dispatch_source_t v39 = 0;
  dispatch_source_t v39 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler(*((dispatch_source_t *)v35 + 5), &stru_1008CA010);
  uint64_t v5 = *((void *)v35 + 5);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10000D764;
  handler[3] = &unk_1008CA038;
  handler[4] = buf;
  dispatch_source_set_cancel_handler(v5, handler);
  dispatch_resume(*((dispatch_object_t *)v35 + 5));
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x3032000000;
  __int16 v30 = sub_10000D6EC;
  uint64_t v31 = sub_10000D6FC;
  dispatch_source_t v32 = 0;
  dispatch_source_t v32 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1DuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v28[5], &stru_1008CA058);
  uint64_t v6 = v28[5];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10000D810;
  v26[3] = &unk_1008CA038;
  v26[4] = &v27;
  dispatch_source_set_cancel_handler(v6, v26);
  dispatch_resume((dispatch_object_t)v28[5]);
  signal(30, (void (__cdecl *)(int))1);
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x3032000000;
  uint64_t v23 = sub_10000D6EC;
  long long v24 = sub_10000D6FC;
  dispatch_source_t v25 = 0;
  dispatch_source_t v25 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1EuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v21[5], &stru_1008CA078);
  uint64_t v7 = v21[5];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10000D8B8;
  v19[3] = &unk_1008CA038;
  v19[4] = &v20;
  dispatch_source_set_cancel_handler(v7, v19);
  dispatch_resume((dispatch_object_t)v21[5]);
  signal(31, (void (__cdecl *)(int))1);
  uint64_t v13 = 0;
  BOOL v14 = &v13;
  uint64_t v15 = 0x3032000000;
  uint64_t v16 = sub_10000D6EC;
  uint64_t v17 = sub_10000D6FC;
  dispatch_source_t v18 = 0;
  dispatch_source_t v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1FuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v14[5], &stru_1008CA098);
  uint64_t v8 = v14[5];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10000D960;
  v12[3] = &unk_1008CA038;
  v12[4] = &v13;
  dispatch_source_set_cancel_handler(v8, v12);
  dispatch_resume((dispatch_object_t)v14[5]);
  uint64_t v9 = +[SharingDaemon sharedDaemon];
  [v9 start];

  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v20, 8);

  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(buf, 8);

  CFStringRef v10 = +[NSRunLoop mainRunLoop];
  [v10 run];

  return 1;
}

void sub_10000D6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D6EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000D6FC(uint64_t a1)
{
}

void sub_10000D704(id a1)
{
  uint64_t v1 = daemon_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SIGTERM received, shutting down.", v2, 2u);
  }

  exit(0);
}

void sub_10000D764(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_10000D778(id a1)
{
  uint64_t v1 = daemon_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SIGINFO received, requesting debug output.", v3, 2u);
  }

  sub_1001B499C();
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"com.apple.sharingd.DebugInfoRequested" object:0];
}

void sub_10000D810(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_10000D824(id a1)
{
  uint64_t v1 = daemon_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SIGUSR1 received, requesting reset state.", v3, 2u);
  }

  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"com.apple.sharingd.ResetState" object:0];
}

void sub_10000D8B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_10000D8CC(id a1)
{
  uint64_t v1 = daemon_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SIGUSR2 received, requesting reset state 2.", v3, 2u);
  }

  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"com.apple.sharingd.ResetState2" object:0];
}

void sub_10000D960(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void *acm_mem_alloc_data(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result) {
    qword_10097FAF8 += size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_10097FAF8 - __n;
    if (qword_10097FAF8 < __n) {
      uint64_t v4 = 0;
    }
    qword_10097FAF8 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result) {
    qword_10097FB00 += size;
  }
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_10097FB00 - __n;
    if (qword_10097FB00 < __n) {
      uint64_t v4 = 0;
    }
    qword_10097FB00 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_10097FAF0 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v6 = "NULL";
    if (result) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = "NULL";
    }
    if (a4) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = "NULL";
    }
    if (a6) {
      uint64_t v6 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_10097FAF0, 0, qword_10097FAF8, qword_10097FB00, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_10097FAF0 - a3;
    if (qword_10097FAF0 < a3) {
      uint64_t v6 = 0;
    }
    qword_10097FAF0 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v7 = "NULL";
    if (result) {
      uint64_t v8 = result;
    }
    else {
      uint64_t v8 = "NULL";
    }
    if (a4) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = "NULL";
    }
    if (a6) {
      uint64_t v7 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_10097FAF0, 0, qword_10097FAF8, qword_10097FB00, v9, a5, v7);
  }
  return result;
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v8 = "ACMLib";
    __int16 v9 = 2080;
    CFStringRef v10 = "ACMContextCreate";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v6 = 0;
  uint64_t v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *))sub_10000DE3C, (uint64_t)&v6, a1, &byte_100965D21, 1);
  if (v2)
  {
    sub_10000EE00();
    unsigned int v3 = 70;
  }
  else
  {
    unsigned int v3 = 10;
    if (a1 && byte_100965D21 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *a1;
        if (*a1) {
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        }
        *(_DWORD *)buf = 136315650;
        uint64_t v8 = "ACMLib";
        __int16 v9 = 2080;
        CFStringRef v10 = "ACMContextCreate";
        __int16 v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      unsigned int v3 = 10;
    }
  }
  if (v3 >= byte_100965D21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v8 = "ACMLib";
    __int16 v9 = 2080;
    CFStringRef v10 = "ACMContextCreate";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t sub_10000DE3C(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    uint64_t v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    uint64_t v14 = sub_10000E634();
    unsigned int v15 = 70;
    if (v14)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = sub_10000E818(*a1, a2, a3, a4, a5, a6, a7);
      if (v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }
  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293;
  }
  if (v15 >= byte_100965D21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    uint64_t v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    CFStringRef v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v8 = 0;
  uint64_t v4 = LibCall_ACMContextCreateWithExternalForm((uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *))sub_10000DE3C, (uint64_t)&v8, a1, a2, &byte_100965D21, 1);
  if (v4)
  {
    if (byte_100965D21 <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      int v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      CFStringRef v10 = "ACMLib";
      __int16 v11 = 2080;
      uint64_t v12 = "ACMContextCreateWithExternalForm";
      __int16 v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] acquired.\n", buf, 0x1Cu);
    }
    unsigned int v6 = 30;
  }
  else
  {
    sub_10000EE00();
    unsigned int v6 = 70;
  }
  if (v6 >= byte_100965D21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    CFStringRef v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, -> ctx = %p.\n", buf, 0x20u);
  }
  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4 = byte_100965D21;
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    unsigned int v4 = byte_100965D21;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = a1[4];
    unsigned int v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    uint64_t v12 = "ACMLib";
    uint64_t v14 = "ACMContextDelete";
    __int16 v13 = 2080;
    if (a2) {
      unsigned int v6 = "destroyed";
    }
    __int16 v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(void *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  CFStringRef v10 = a1;
  uint64_t v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))sub_10000DE3C, (uint64_t)&v10, a1, a2);
  if (v7) {
    unsigned int v8 = 70;
  }
  else {
    unsigned int v8 = 10;
  }
  if (v8 >= byte_100965D21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    __int16 v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v4, 0x16u);
  }
  if (!a1
    || !a2
    || sub_10000E634()
    || sub_10000E818((uint64_t)a1, 19, 0, a1, 0x10uLL, 0, 0))
  {
    (*(void (**)(uint64_t, void, void))(a2 + 16))(a2, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16);
  }
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t sub_10000E634()
{
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if (byte_10097FB0C)
  {
    uint64_t v0 = 0;
  }
  else
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291;
      goto LABEL_10;
    }
    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_10097FB08);
    if (v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_10097FB0C = 1;
  }
  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_100965D21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_10000E818(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    dispatch_source_t v25 = "ACMLib";
    __int16 v26 = 2080;
    uint64_t v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t inputStructCnt = 0;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    __int16 v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293;
    }
    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_10097FB08, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if (v17)
      {
        if (byte_100965D21 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          dispatch_source_t v25 = "ACMLib";
          __int16 v26 = 2080;
          uint64_t v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)uint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_100965D21 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          dispatch_source_t v25 = "ACMLib";
          __int16 v26 = 2080;
          uint64_t v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)uint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        uint64_t v18 = 0;
        if (a7) {
          *a7 = v22;
        }
      }
    }
    size_t v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if (v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }
  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291;
  }
  if (v20 >= byte_100965D21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    dispatch_source_t v25 = "ACMLib";
    __int16 v26 = 2080;
    uint64_t v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)uint64_t v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMContextContainsCredentialTypeEx(_OWORD *a1, int a2, int a3)
{
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsCredentialTypeEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  int v14 = 0;
  size_t v13 = 4;
  if (a1)
  {
    uint64_t v6 = sub_10000E634();
    if (v6)
    {
      uint64_t v11 = v6;
      unsigned int v8 = 70;
    }
    else
    {
      uint64_t v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 576, "ACMContextContainsCredentialTypeEx");
      unsigned int v8 = 70;
      if (v7)
      {
        *(_OWORD *)uint64_t v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        unsigned int v9 = sub_10000E818((uint64_t)a1, 4, 0, v7, 0x18uLL, &v14, &v13);
        if (v14) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = -7;
        }
        if (v9) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = v10;
        }
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 590, "ACMContextContainsCredentialTypeEx");
        acm_mem_free_data(v7, 0x18uLL);
        if (v11) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }
      else
      {
        uint64_t v11 = 4294967292;
      }
    }
  }
  else
  {
    unsigned int v8 = 70;
    uint64_t v11 = 4294967293;
  }
  if (v8 >= byte_100965D21 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    size_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsCredentialTypeEx";
    __int16 v19 = 2048;
    uint64_t v20 = (int)v11;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v11;
}

void sub_10000EE00()
{
  if (byte_100965D21 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_10097FB08, 2u, 0, 0, &output, &outputCnt)) {
    goto LABEL_8;
  }
  unsigned __int8 v0 = output;
  unsigned int v1 = output;
  byte_100965D21 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    __int16 v8 = 1024;
    int v9 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    unsigned int v1 = byte_100965D21;
  }
  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

unsigned char *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  }
  uint64_t v12 = 0;
  if (a5) {
    BOOL v13 = a4 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)uint64_t v12 = 1396920900;
        v12[4] = a1;
        void v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  }
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *), uint64_t a2, void *a3, unsigned char *a4, int a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  }
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293;
  if (!a1 || !a3) {
    goto LABEL_25;
  }
  uint64_t v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    unsigned int v10 = 70;
    uint64_t v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    uint64_t v18 = 21;
    uint64_t v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!v13)
    {
      if (v18 != 21)
      {
        uint64_t v11 = 4294967291;
        goto LABEL_23;
      }
      uint64_t v11 = 0;
      goto LABEL_20;
    }
    uint64_t v11 = v13;
    if (v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      unsigned int v10 = 70;
      goto LABEL_25;
    }
  }
  uint64_t v18 = 17;
  unsigned int v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = -5;
  }
  if (v14) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = v15;
  }
  if (!v14 && v18 == 17)
  {
LABEL_20:
    int v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4) {
      *a4 = v19[16];
    }
  }
  if (v11) {
    goto LABEL_23;
  }
  unsigned int v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  }
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, unsigned char *a5, int a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm");
  }
  uint64_t v12 = 0;
  unsigned int v13 = 70;
  int v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      uint64_t v20 = 9;
      int v15 = a1(a2, 37, 0, a3, 16, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          int v14 = 0;
          goto LABEL_19;
        }
        int v14 = -5;
        goto LABEL_28;
      }
      int v14 = v15;
      if (v15 != -3) {
        goto LABEL_28;
      }
    }
    uint64_t v20 = 5;
    int v16 = a1(a2, 18, 0, a3, 16, v21, &v20);
    if (v20 == 5) {
      int v17 = 0;
    }
    else {
      int v17 = -5;
    }
    if (v16) {
      int v14 = v16;
    }
    else {
      int v14 = v17;
    }
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        uint64_t v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 128, "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          unsigned int v13 = 70;
          int v14 = -4;
          goto LABEL_31;
        }
        int v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)uint64_t v12 = *a3;
        v12[4] = v18;
        if (a5) {
          *a5 = BYTE4(v21[0]);
        }
        if (v14)
        {
          acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 147, "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          unsigned int v13 = 70;
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      goto LABEL_30;
    }
LABEL_28:
    uint64_t v12 = 0;
    if (v14) {
      goto LABEL_29;
    }
LABEL_30:
    int v14 = 0;
    unsigned int v13 = 10;
  }
LABEL_31:
  if (v13 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm", v14);
  }
  return v12;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, void, void *, uint64_t, void, void), uint64_t a2, void *a3, int a4)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  }
  if (a1 && a3)
  {
    if (a4) {
      a1(a2, 2, 0, a3, 16, 0, 0);
    }
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    uint64_t v8 = 0;
    unsigned int v9 = 10;
    goto LABEL_8;
  }
  unsigned int v9 = 70;
  uint64_t v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  }
  return v8;
}

uint64_t SDUnlockRelockRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockStashConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 20) |= 4u;
      while (1)
      {
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0) {
          goto LABEL_48;
        }
        v18 += 7;
        BOOL v9 = v19++ >= 9;
        if (v9)
        {
          uint64_t v20 = 0;
          goto LABEL_50;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_48:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v20 = 0;
      }
LABEL_50:
      *(unsigned char *)(a1 + 16) = v20 != 0;
    }
    else
    {
      if (v12 == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v15 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_52;
          }
          v23 += 7;
          BOOL v9 = v24++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_54;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_54:
        uint64_t v28 = 8;
      }
      else
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_44;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_46;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_44:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_46:
        uint64_t v28 = 12;
      }
      *(_DWORD *)(a1 + v28) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAuthenticationTokenReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        uint64_t v25 = 32;
        goto LABEL_45;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
        goto LABEL_29;
      case 3u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
LABEL_29:
        uint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
      v14 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_42;
      }
      v21 += 7;
      BOOL v9 = v22++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_44:
    uint64_t v25 = 16;
LABEL_45:
    *(_DWORD *)(a1 + v25) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100013054(uint64_t a1, int a2)
{
  io_object_t v3 = [*(id *)(a1 + 32) transfer];
  id v5 = v3;
  if (a2) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2;
  }
  [v3 setUserResponse:v4];
}

void sub_100013880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000138D0(id *a1)
{
  uint64_t v2 = +[LSApplicationWorkspace defaultWorkspace];
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  uint64_t v4 = [WeakRetained transfer];
  id v5 = [v4 completedURLs];
  unint64_t v6 = [v5 firstObject];
  id v7 = objc_loadWeakRetained(a1);
  char v8 = [v7 handlingAppBundleID];
  [v2 _LSFailedToOpenURL:v6 withBundle:v8];

  id v10 = objc_loadWeakRetained(a1);
  BOOL v9 = [v10 completionHandler];
  v9[2](v9, 1, 0, 1);
}

void sub_100013C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100013C70(uint64_t a1)
{
  uint64_t v2 = airdrop_ui_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "User clicked on Open button", v6, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = [WeakRetained transfer];
  id v5 = [v4 completedURLs];
  [WeakRetained openURLs:v5];
}

uint64_t sub_100014030(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000142D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000142FC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000143C0;
  block[3] = &unk_1008CA178;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  char v10 = a2;
  id v8 = v5;
  id v6 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v9);
}

void sub_1000143C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained handleMoveToAppShareSheetCompletedWithSuccess:*(unsigned __int8 *)(a1 + 48) error:*(void *)(a1 + 32)];
}

id sub_100014DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = [v3 bundleIdentifier];
  if ([v4 containsObject:v5])
  {

LABEL_6:
    id v9 = v3;
    goto LABEL_8;
  }
  if ([*(id *)(a1 + 40) handlingAppInstalled])
  {
  }
  else
  {
    id v6 = [v3 bundleIdentifier];
    id v7 = [*(id *)(a1 + 40) handlingAppBundleID];
    unsigned int v8 = [v6 isEqualToString:v7];

    if (v8) {
      goto LABEL_6;
    }
  }
  id v9 = 0;
LABEL_8:

  return v9;
}

uint64_t sub_1000157B0(uint64_t a1, uint64_t a2)
{
  if (qword_10097FB10 != -1) {
    dispatch_once(&qword_10097FB10, &stru_1008CA1E8);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)qword_10097FB18, "ADClientAddValueForScalarKey");
  off_100965D28 = v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void sub_100015834(id a1)
{
  qword_10097FB18 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary", 2);
}

void sub_100015860(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100015888()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No items to open with Share Sheet", v2, v3, v4, v5, v6);
}

void sub_1000158BC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Share Sheet was cancelled", v2, v3, v4, v5, v6);
}

void sub_1000158F0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Share Sheet failed with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100015968()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "logReceiverBundleID appIdentifier is nil", v2, v3, v4, v5, v6);
}

void sub_10001599C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 path];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "failed to remove item at %@", (uint8_t *)&v4, 0xCu);
}

void sub_100015A34()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Cannot open empty list of URLs", v2, v3, v4, v5, v6);
}

void sub_1000173A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000173CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = airdrop_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SDAirDropSession: cancellation handler called for sessionID: %@", (uint8_t *)&v5, 0xCu);
  }

  [WeakRetained stop];
}

id sub_100017784(uint64_t a1)
{
  return _[*(id *)(a1 + 32) observeValueForKeyPath:*(void *)(a1 + 40) ofObject:*(void *)(a1 + 48) change:*(void *)(a1 + 56) context:*(void *)(a1 + 64)];
}

void sub_100017918(uint64_t a1, uint64_t a2, os_log_t log)
{
  if ((unint64_t)(a1 - 1) > 0xE) {
    CFStringRef v3 = @"?";
  }
  else {
    CFStringRef v3 = *(&off_1008CA290 + a1 - 1);
  }
  int v4 = 138412547;
  CFStringRef v5 = v3;
  __int16 v6 = 2113;
  uint64_t v7 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "SDAirDropSession: Received event %@, properties = %{private}@", (uint8_t *)&v4, 0x16u);
}

void sub_1000179C4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropSession: startProgress sessionID is NULL", v1, 2u);
}

void sub_100017A5C(id a1)
{
  uint64_t v1 = objc_alloc_init(SDMISManager);
  uint64_t v2 = (void *)qword_10097FB20;
  qword_10097FB20 = (uint64_t)v1;
}

id sub_100017B80(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 handleMISStateChanged];
}

void sub_100017D0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int sub_100017D2C(id a1, int a2, OS_xpc_object *a3)
{
  if (a2 == 1001 && xpc_dictionary_get_uint64(a3, netrbClientNotificationKey) >> 1 == 2501)
  {
    CFStringRef v3 = +[SDMISManager sharedManager];
    [v3 detachMIS];
  }
  return 0;
}

void sub_100017E3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000187DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100018800(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  if (!notify_get_state(token, &state64))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained handleBioLockoutStateChanged:state64];
  }
}

void sub_100018D34(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100018D50(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100018DBC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100018E28(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100018E94(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Could not force bio lockout", v1, 2u);
}

uint64_t SDUnlockSetupCreateSecretReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadData();
      uint64_t v19 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v18;
    }
    else
    {
      if (v12 == 2)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v15 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0) {
            goto LABEL_42;
          }
          v20 += 7;
          BOOL v9 = v21++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v25 = 8;
      }
      else
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v25 = 24;
      }
      *(_DWORD *)(a1 + v25) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10001A410(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 processIdentifier];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "process %d tried to connect to the Collaboration User Defaults server, but it was not entitled.", (uint8_t *)v3, 8u);
}

void sub_10001B390(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "_UIHostActivityProxy:%@ is restricted.", (uint8_t *)&v2, 0xCu);
}

void sub_10001B724(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4) {
    [a2 handleEvent:a4];
  }
}

void sub_10001C450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001C470(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleTimerFired];
}

void sub_10001C75C(uint64_t a1)
{
  if (*(unsigned __int16 *)(a1 + 56) - 2002 <= 2)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = auto_unlock_log();
    char v4 = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(unsigned __int16 *)(a1 + 56);
        unsigned int v6 = [*(id *)(a1 + 40) length];
        int v17 = 67109376;
        *(_DWORD *)uint64_t v18 = v5;
        *(_WORD *)&v18[4] = 1024;
        *(_DWORD *)&v18[6] = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received protobuf (type = %d, size = %u)", (uint8_t *)&v17, 0xEu);
      }

      char v4 = [[SDAutoUnlockSessionWrapper alloc] initWithData:*(void *)(a1 + 40)];
      if ([v4 hasSessionID]
        && ([v4 sessionID],
            unint64_t v7 = objc_claimAutoreleasedReturnValue(),
            id v8 = [v7 length],
            v7,
            v8 == (id)16))
      {
        id v9 = objc_alloc((Class)NSUUID);
        id v10 = [v4 sessionID];
        uint64_t v11 = [v9 initWithUUIDBytes:[v10 bytes]];

        unint64_t v12 = [*(id *)(a1 + 48) sessionID];
        unsigned int v13 = [v11 isEqual:v12];

        if (v13)
        {
          unsigned int v14 = *(void **)(a1 + 48);
          uint64_t v15 = [v4 payload];
          [v14 handleMessage:v15 fromDeviceID:*(void *)(a1 + 32) type:*(unsigned __int16 *)(a1 + 56)];
        }
        else
        {
          uint64_t v15 = auto_unlock_log();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v16 = [*(id *)(a1 + 48) sessionID];
            int v17 = 138412546;
            *(void *)uint64_t v18 = v11;
            *(_WORD *)&v18[8] = 2112;
            uint64_t v19 = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Incoming message session ID (%@) doesn't match current one (%@)", (uint8_t *)&v17, 0x16u);
          }
        }
      }
      else
      {
        uint64_t v11 = auto_unlock_log();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_10001CB44(v4, (uint64_t *)(a1 + 40), v11);
        }
      }
    }
    else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      sub_10001CB00(v4);
    }
  }
}

void sub_10001CB00(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Incoming message from unknown device", v1, 2u);
}

void sub_10001CB44(void *a1, uint64_t *a2, NSObject *a3)
{
  unsigned int v6 = [a1 sessionID];
  uint64_t v7 = *a2;
  int v8 = 138412802;
  id v9 = v6;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  __int16 v12 = 2112;
  uint64_t v13 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Incoming message missing info (session = %@, wrapper = %@, data = %@)", (uint8_t *)&v8, 0x20u);
}

void sub_10001CC04()
{
  unsigned __int8 v0 = auto_unlock_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Locking key bag", v2, 2u);
  }

  if (aks_lock_bag())
  {
    uint64_t v1 = auto_unlock_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1000200D0();
    }
  }
}

void sub_10001CCA0(uint64_t *a1)
{
  if (ACMContextCreate(a1))
  {
    uint64_t v1 = auto_unlock_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_100020104();
    }
  }
}

void sub_10001CCF4(void *a1, void *a2)
{
  id v3 = a1;
  char v4 = ACMContextCreateWithExternalForm([v3 bytes], (uint64_t)[v3 length]);
  if (!v4)
  {
    int v5 = auto_unlock_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10002016C((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  if (a2) {
    *a2 = v4;
  }
}

void sub_10001CD84(const void *a1, void *a2, void *a3)
{
  uint64_t v20 = 0;
  unsigned int v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x3032000000;
  int v17 = sub_10001CFB4;
  uint64_t v18 = sub_10001CFC4;
  id v19 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10001CFCC;
  v10[3] = &unk_1008CA400;
  __int16 v12 = &v20;
  uint64_t v13 = &v14;
  uint64_t v6 = dispatch_semaphore_create(0);
  uint64_t v11 = v6;
  ACMContextGetExternalForm(a1, (uint64_t)v10);
  dispatch_time_t v7 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v6, v7)) {
    v21[3] = 60;
  }
  uint64_t v8 = auto_unlock_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = v15[5];
    *(_DWORD *)buf = 138412290;
    uint64_t v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Returning context data %@", buf, 0xCu);
  }

  if (a2) {
    *a2 = (id) v15[5];
  }
  if (a3) {
    *a3 = v21[3];
  }

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v20, 8);
}

void sub_10001CF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001CFB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001CFC4(uint64_t a1)
{
}

intptr_t sub_10001CFCC(uint64_t a1, const void *a2, int64_t size)
{
  uint64_t v6 = malloc_type_malloc(size, 0xC060F670uLL);
  if (v6)
  {
    dispatch_time_t v7 = v6;
    memcpy(v6, a2, size);
    if (size >= 1)
    {
      uint64_t v8 = +[NSData dataWithBytes:v7 length:size];
      uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }
    free(v7);
  }
  else
  {
    uint64_t v11 = auto_unlock_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1000201D8();
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 12;
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL sub_10001D0A0(_OWORD *a1)
{
  int v1 = ACMContextContainsCredentialTypeEx(a1, 9, 0);
  uint64_t v2 = auto_unlock_log();
  id v3 = v2;
  if (v1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10002020C();
    }
  }
  else if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ACM context contains credential", v5, 2u);
  }

  return v1 == 0;
}

id sub_10001D144()
{
  unsigned __int8 v0 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  if (aks_get_bag_uuid())
  {
    int v1 = auto_unlock_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_100020274();
    }

    id v2 = 0;
  }
  else
  {
    id v2 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v0];
  }
  free(v0);

  return v2;
}

uint64_t sub_10001D204(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  if ((unint64_t)(a2 - 1) >= 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (a2 + 8);
  }
  dispatch_time_t v7 = auto_unlock_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v8 = @"NO";
    int v16 = 134218499;
    uint64_t v17 = v6;
    if (a3) {
      CFStringRef v8 = @"YES";
    }
    __int16 v18 = 2112;
    CFStringRef v19 = v8;
    __int16 v20 = 2113;
    id v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Validating local LTK (aks keyclass: %ld, touch bar: %@, local LTK: %{private}@)", (uint8_t *)&v16, 0x20u);
  }

  id v9 = v5;
  [v9 bytes];
  [v9 length];
  int v10 = aks_validate_local_key();
  uint64_t v11 = auto_unlock_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 67109120;
    LODWORD(v17) = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Validated local LTK (status: %d)", (uint8_t *)&v16, 8u);
  }

  uint64_t v12 = 0;
  if (v10 != -536362989 && v10 != -536362984)
  {
    uint64_t v12 = 0;
    char v13 = v10 == -536870212 ? a3 : 0;
    if ((v13 & 1) == 0 && v10 != -536362971)
    {
      if (v10)
      {
        uint64_t v14 = auto_unlock_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 67109120;
          LODWORD(v17) = v10;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Validating local LTK returned unexpected status (status: %d)", (uint8_t *)&v16, 8u);
        }
      }
      uint64_t v12 = 1;
    }
  }

  return v12;
}

void sub_10001D42C()
{
  unsigned __int8 v0 = auto_unlock_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    sub_1000202DC();
  }

  if (aks_remote_session_reset_all())
  {
    int v1 = auto_unlock_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Failed to reset all sessions", v2, 2u);
    }
  }
}

uint64_t sub_10001D4C4(void *a1)
{
  id v1 = a1;
  id v2 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    id v4 = v1;
    [v4 bytes];
    [v4 length];
    int state = aks_remote_peer_get_state();
    int v6 = state;
    if (state && state != -536870184)
    {
      id v9 = auto_unlock_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10002031C();
      }

      uint64_t v8 = 100;
    }
    else
    {
      dispatch_time_t v7 = auto_unlock_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
        sub_100020384(v3, v6, v7);
      }

      uint64_t v8 = sub_10001D6AC(*(void *)v3, *(void *)(v3 + 8));
    }
    free((void *)v3);
  }
  else
  {
    uint64_t v8 = 100;
  }

  return v8;
}

id sub_10001D5E4(uint64_t a1, int a2)
{
  if (a1 > 6) {
    id v2 = 0;
  }
  else {
    id v2 = off_1008CA470[(int)a1];
  }
  CFStringRef v3 = @"escrow_record_not_found";
  if (HIDWORD(a1) == 1) {
    CFStringRef v4 = @"escrow_record_not_found";
  }
  else {
    CFStringRef v4 = 0;
  }
  if (HIDWORD(a1)) {
    id v5 = (__CFString *)v4;
  }
  else {
    id v5 = @"escrow_record_valid";
  }
  if (a2 != 1) {
    CFStringRef v3 = 0;
  }
  if (a2) {
    CFStringRef v6 = v3;
  }
  else {
    CFStringRef v6 = @"escrow_record_valid";
  }
  dispatch_time_t v7 = v5;
  uint64_t v8 = +[NSString stringWithFormat:@"State: {\n\ttoken status: %@,\n\tunwrapped record status: %@\n\twrapped record status: %@\n}", v2, v7, v6];

  return v8;
}

uint64_t sub_10001D6AC(unint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  if (HIDWORD(a1))
  {
    switch((int)a1)
    {
      case 0:
        uint64_t v5 = 100;
        if ((a2 & 0x400000000) == 0) {
          uint64_t v5 = 9;
        }
        if ((a2 & 0x100000000) != 0) {
          uint64_t result = v5;
        }
        else {
          uint64_t result = 10;
        }
        break;
      case 1:
        uint64_t result = 4;
        break;
      case 2:
        uint64_t result = 5;
        break;
      case 3:
        uint64_t result = 6;
        break;
      case 4:
        uint64_t result = 7;
        break;
      case 5:
        uint64_t result = 1;
        break;
      case 6:
        uint64_t result = 8;
        break;
      default:
        uint64_t result = 100;
        break;
    }
  }
  else
  {
    uint64_t v3 = 100;
    if ((a2 & 0x400000000) == 0) {
      uint64_t v3 = 10;
    }
    uint64_t v4 = 2;
    if ((a2 & 0x100000000) != 0) {
      uint64_t v4 = v3;
    }
    if (a1) {
      return v4;
    }
    else {
      return 3;
    }
  }
  return result;
}

void sub_10001D790(void *a1)
{
  id v1 = a1;
  id v2 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = v1;
    [v4 bytes];
    [v4 length];
    int state = aks_remote_peer_get_state();
    int v6 = state;
    if (!state || state == -536870184)
    {
      dispatch_time_t v7 = auto_unlock_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = sub_10001D5E4(*v3, v3[1]);
        id v9 = sub_10001D8FC(*((_DWORD *)v3 + 3));
        v10[0] = 67109634;
        v10[1] = v6;
        __int16 v11 = 2112;
        uint64_t v12 = v8;
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Status %d, Peer State: %@, flags: %@", (uint8_t *)v10, 0x1Cu);
      }
    }
    free(v3);
  }
}

id sub_10001D8FC(char a1)
{
  id v2 = +[NSMutableArray array];
  uint64_t v3 = v2;
  if (a1)
  {
    [v2 addObject:@"registered"];
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:@"originator"];
  if ((a1 & 4) != 0) {
LABEL_4:
  }
    [v3 addObject:@"armed"];
LABEL_5:
  id v4 = [v3 componentsJoinedByString:@", "];

  return v4;
}

CFStringRef sub_10001D9A8(uint64_t a1)
{
  CFStringRef result = @"SDAKSPeerStateNotSetUp";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      CFStringRef result = @"SDAKSPeerStateNotAvailable";
      break;
    case 2:
      CFStringRef result = @"SDAKSPeerStateOnlyEscrowAvailable";
      break;
    case 3:
      CFStringRef result = @"SDAKSPeerStateTokenAvailable";
      break;
    case 4:
      CFStringRef result = @"SDAKSPeerStateNoPasscodeUnlockWithinWindow";
      break;
    case 5:
      CFStringRef result = @"SDAKSPeerStateNoRemoteUnlockWithinWindow";
      break;
    case 6:
      CFStringRef result = @"SDAKSPeerStateTooManyFailedPasscodeEntries";
      break;
    case 7:
      CFStringRef result = @"SDAKSPeerStatePasscodeDisabled";
      break;
    case 8:
      CFStringRef result = @"SDAKSPeerStateBioLockout";
      break;
    case 9:
      CFStringRef result = @"SDAKSPeerStateNotArmed";
      break;
    default:
      if (a1 == 100) {
        CFStringRef result = @"SDAKSPeerStateUnknown";
      }
      else {
        CFStringRef result = @"Unexpected type";
      }
      break;
  }
  return result;
}

uint64_t sub_10001DA8C()
{
  __int16 v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  aks_get_device_state();
  int v0 = MKBDeviceUnlockedSinceBoot();
  id v1 = auto_unlock_log();
  BOOL v2 = os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
  if (v0 == 1)
  {
    if (v2)
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "biometric timer expired, but reporting bio armed anyway", v5, 2u);
    }
    uint64_t v3 = 1;
  }
  else
  {
    if (v2)
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "not armed", v5, 2u);
    }
    uint64_t v3 = 0;
  }

  return v3;
}

id sub_10001DBC0(uint64_t a1, int a2)
{
  uint64_t v3 = auto_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SDAKSGenerateLocalLTK attested: %d", buf, 8u);
  }

  if (!a2)
  {
    aks_create_signing_key();
    goto LABEL_19;
  }
  id v4 = MAECopyDCRTWithError();
  id v5 = 0;
  if (v4)
  {
    aks_params_create();
    *(void *)buf = 4;
    id v6 = v4;
    [v6 bytes];
    [v6 length];
    if (aks_params_set_data())
    {
      long long v7 = auto_unlock_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100020600();
      }
    }
    else if (aks_params_set_number())
    {
      long long v7 = auto_unlock_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100020594();
      }
    }
    else
    {
      if (!aks_params_get_der())
      {
        aks_create_signing_key_with_params();
        goto LABEL_18;
      }
      long long v7 = auto_unlock_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_100020528();
      }
    }
  }
  else
  {
    long long v7 = auto_unlock_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000204BC((uint64_t)v5, v7, v8, v9, v10, v11, v12, v13);
    }
  }

LABEL_18:
LABEL_19:
  uint64_t v14 = auto_unlock_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_100020450();
  }

  return 0;
}

id sub_10001DEDC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a3;
  if ((unint64_t)(a4 - 1) >= 3) {
    int v9 = 0;
  }
  else {
    int v9 = a4 + 8;
  }
  if ((unint64_t)(a2 - 1) >= 3) {
    int v10 = 0;
  }
  else {
    int v10 = a2 + 8;
  }
  uint64_t v11 = auto_unlock_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v12 = @"YES";
    *(_DWORD *)buf = 67110659;
    int v19 = 0;
    __int16 v20 = 1024;
    if (v8) {
      CFStringRef v13 = @"YES";
    }
    else {
      CFStringRef v13 = @"NO";
    }
    int v21 = v9;
    if (!v7) {
      CFStringRef v12 = @"NO";
    }
    __int16 v22 = 2112;
    CFStringRef v23 = v13;
    __int16 v24 = 2113;
    id v25 = v8;
    __int16 v26 = 1024;
    int v27 = v10;
    __int16 v28 = 2112;
    CFStringRef v29 = v12;
    __int16 v30 = 2113;
    id v31 = v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Signing (handle = %d, local class %d, local exists %@, local data %{private}@, remote class %d, remote exists %@, remote data %{private}@)", buf, 0x3Cu);
  }

  id v14 = v8;
  [v14 bytes];
  [v14 length];
  id v15 = v7;
  [v15 bytes];
  [v15 length];
  aks_sign_signing_key();
  int v16 = auto_unlock_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
    sub_10002066C();
  }

  return 0;
}

void sub_10001E16C(void *a1)
{
  id v1 = a1;
  BOOL v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning DCRT retrieval", buf, 2u);
  }

  id v4 = v1;
  id v3 = v1;
  MAEIssueDCRTWithCallback();
}

void sub_10001E248(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = auto_unlock_log();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000206D8((uint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }

    CFStringRef v12 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFStringRef v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "DCRT retrieval finished", v13, 2u);
    }

    CFStringRef v12 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v12();
}

uint64_t sub_10001E314(void *a1, void *a2, int a3, _DWORD *a4, int a5)
{
  if (a5) {
    int v5 = 4;
  }
  else {
    int v5 = 10;
  }
  if (a3) {
    int v6 = v5 | 0x80;
  }
  else {
    int v6 = v5;
  }
  return sub_10001E340(a1, a2, v6, 0, 0, a4);
}

uint64_t sub_10001E340(void *a1, void *a2, int a3, void *a4, int a5, _DWORD *a6)
{
  id v10 = a1;
  id v11 = a2;
  id v12 = a4;
  int v41 = 0;
  int v39 = a5;
  if ((a5 & 1) == 0)
  {
    CFStringRef v13 = auto_unlock_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v43 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SDAKSCreateSession flags: %d", buf, 8u);
    }
  }
  id v38 = v11;
  if (!v10 || !v11)
  {
    id v14 = auto_unlock_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if (v10) {
        CFStringRef v31 = @"YES";
      }
      else {
        CFStringRef v31 = @"NO";
      }
      if (v11) {
        CFStringRef v32 = @"YES";
      }
      else {
        CFStringRef v32 = @"NO";
      }
      int v33 = +[NSThread callStackSymbols];
      *(_DWORD *)buf = 138413571;
      *(void *)uint64_t v43 = v31;
      *(_WORD *)&v43[8] = 2113;
      *(void *)v44 = v10;
      *(_WORD *)&v44[8] = 2112;
      *(void *)v45 = v32;
      *(_WORD *)&v45[8] = 2113;
      *(void *)v46 = v38;
      *(_WORD *)&v46[8] = 1024;
      *(_DWORD *)uint64_t v47 = a3;
      *(_WORD *)&v47[4] = 2112;
      *(void *)&v47[6] = v33;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Either local or remoteLTK is nil. This shouldn't happen; expect AKS to throw an error. local exists %@, localKey"
        " = %{private}@,\n"
        " remote exists %@, remoteKey = %{private}@, flags: %d. Callstack:\n"
        "%@",
        buf,
        0x3Au);

      id v11 = v38;
    }
  }
  id v37 = v10;
  id v15 = v10;
  [v15 bytes];
  [v15 length];
  id v16 = v11;
  [v16 bytes];
  [v16 length];
  id v17 = v12;
  [v17 bytes];
  [v17 length];
  int v18 = aks_remote_session();
  int v19 = a6;
  if (v18 == -536870211)
  {
    __int16 v20 = auto_unlock_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Received no memory error when creating session, clearing and retrying", buf, 2u);
    }

    sub_10001D42C();
    int v41 = 0;
    id v21 = v15;
    [v21 bytes:&v41];
    [v21 length];
    id v22 = v16;
    [v22 bytes];
    [v22 length];
    id v23 = v17;
    [v23 bytes];
    [v23 length];
    int v18 = aks_remote_session();
    int v19 = a6;
  }
  __int16 v24 = auto_unlock_log();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)uint64_t v43 = v41;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Auth session -- create (session id: %d)", buf, 8u);
  }

  if (!v18)
  {
    uint64_t v26 = v41;
    if (!v19) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (!v39)
  {
    int v27 = auto_unlock_log();
    __int16 v28 = v27;
    if (v18 == -536870160)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)uint64_t v43 = -536870160;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Escrow record not found status = %d", buf, 8u);
      }
    }
    else
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v34 = @"NO";
        *(_DWORD *)buf = 67110915;
        *(_DWORD *)uint64_t v43 = v18;
        *(_WORD *)&v43[4] = 1024;
        if (v37) {
          CFStringRef v35 = @"YES";
        }
        else {
          CFStringRef v35 = @"NO";
        }
        *(_DWORD *)&v43[6] = a3;
        if (v38) {
          CFStringRef v36 = @"YES";
        }
        else {
          CFStringRef v36 = @"NO";
        }
        *(_WORD *)v44 = 2112;
        if (v17) {
          CFStringRef v34 = @"YES";
        }
        *(void *)&v44[2] = v35;
        *(_WORD *)v45 = 2113;
        *(void *)&v45[2] = v15;
        *(_WORD *)v46 = 2112;
        *(void *)&v46[2] = v36;
        *(_WORD *)uint64_t v47 = 2113;
        *(void *)&v47[2] = v16;
        *(_WORD *)&v47[10] = 2112;
        *(void *)&v47[12] = v34;
        __int16 v48 = 2113;
        id v49 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "AKS session failure: (status = %d, flags = %d,\n local exists %@, localKey = %{private}@,\n remote exists %@, remoteKey = %{private}@\n secret exists: %@, secret = %{private}@)", buf, 0x4Au);
      }

      sub_10001D790(v16);
    }
LABEL_34:
    uint64_t v26 = -1;
    if (!v19) {
      goto LABEL_36;
    }
LABEL_35:
    *int v19 = v18;
    goto LABEL_36;
  }
  if (v18 != -536363000 && v18 != -536870184)
  {
    CFStringRef v29 = auto_unlock_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v43 = v18;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "got error: %d", buf, 8u);
    }

    goto LABEL_34;
  }
  id v25 = auto_unlock_log();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Record exists, but not available", buf, 2u);
  }

  uint64_t v26 = 0;
  if (v19) {
    goto LABEL_35;
  }
LABEL_36:

  return v26;
}

uint64_t sub_10001E908(void *a1, void *a2, int a3, _DWORD *a4)
{
  if (a3) {
    int v4 = 129;
  }
  else {
    int v4 = 1;
  }
  return sub_10001E340(a1, a2, v4, 0, 0, a4);
}

uint64_t sub_10001E924(void *a1, void *a2, int a3, int a4, int a5, void *a6, _DWORD *a7)
{
  return sub_10001E958(a1, a2, a3, a4, a5, 0, a6, 0, a7);
}

uint64_t sub_10001E958(void *a1, void *a2, int a3, int a4, int a5, int a6, void *a7, int a8, _DWORD *a9)
{
  if (a3) {
    int v15 = 128;
  }
  else {
    int v15 = 0;
  }
  if (a5) {
    v15 |= 7u;
  }
  if (a7) {
    int v16 = 1;
  }
  else {
    int v16 = a4;
  }
  if (v16) {
    int v17 = 5;
  }
  else {
    int v17 = 2;
  }
  int v18 = v17 | v15;
  int v19 = v15 | 0x100;
  if (a6) {
    int v20 = v19;
  }
  else {
    int v20 = v18;
  }
  id v21 = a7;
  id v22 = a2;
  id v23 = a1;
  __int16 v24 = auto_unlock_log();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v25 = @"NO";
    if (a3) {
      CFStringRef v26 = @"YES";
    }
    else {
      CFStringRef v26 = @"NO";
    }
    if (a5) {
      CFStringRef v27 = @"YES";
    }
    else {
      CFStringRef v27 = @"NO";
    }
    int v31 = 138413058;
    CFStringRef v32 = v26;
    if (a4) {
      CFStringRef v28 = @"YES";
    }
    else {
      CFStringRef v28 = @"NO";
    }
    __int16 v33 = 2112;
    CFStringRef v34 = v27;
    __int16 v35 = 2112;
    CFStringRef v36 = v28;
    if (v21) {
      CFStringRef v25 = @"YES";
    }
    __int16 v37 = 2112;
    CFStringRef v38 = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Creating auth session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@", (uint8_t *)&v31, 0x2Au);
  }

  uint64_t v29 = sub_10001E340(v23, v22, v20, v21, a8, a9);
  return v29;
}

uint64_t sub_10001EB08(void *a1, void *a2, int a3, int a4, int a5, void *a6, int a7, _DWORD *a8)
{
  id v15 = a6;
  id v16 = a2;
  id v17 = a1;
  int v18 = auto_unlock_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v19 = @"NO";
    if (a3) {
      CFStringRef v20 = @"YES";
    }
    else {
      CFStringRef v20 = @"NO";
    }
    if (a5) {
      CFStringRef v21 = @"YES";
    }
    else {
      CFStringRef v21 = @"NO";
    }
    int v27 = 138413058;
    CFStringRef v28 = v20;
    if (a4) {
      CFStringRef v22 = @"YES";
    }
    else {
      CFStringRef v22 = @"NO";
    }
    __int16 v29 = 2112;
    CFStringRef v30 = v21;
    __int16 v31 = 2112;
    CFStringRef v32 = v22;
    if (v15) {
      CFStringRef v19 = @"YES";
    }
    __int16 v33 = 2112;
    CFStringRef v34 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Creating bio arm session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@", (uint8_t *)&v27, 0x2Au);
  }
  if (a3) {
    int v23 = 128;
  }
  else {
    int v23 = 0;
  }
  if (a5) {
    v23 |= 4u;
  }
  int v24 = v23 | 0xB;

  uint64_t v25 = sub_10001E340(v17, v16, v24, v15, a7, a8);
  return v25;
}

uint64_t sub_10001EC98(void *a1, void *a2, int a3, int a4, int a5, void *a6, int a7, _DWORD *a8)
{
  id v15 = a6;
  id v16 = a2;
  id v17 = a1;
  int v18 = auto_unlock_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v19 = @"NO";
    if (a3) {
      CFStringRef v20 = @"YES";
    }
    else {
      CFStringRef v20 = @"NO";
    }
    if (a5) {
      CFStringRef v21 = @"YES";
    }
    else {
      CFStringRef v21 = @"NO";
    }
    int v27 = 138413058;
    CFStringRef v28 = v20;
    if (a4) {
      CFStringRef v22 = @"YES";
    }
    else {
      CFStringRef v22 = @"NO";
    }
    __int16 v29 = 2112;
    CFStringRef v30 = v21;
    __int16 v31 = 2112;
    CFStringRef v32 = v22;
    if (v15) {
      CFStringRef v19 = @"YES";
    }
    __int16 v33 = 2112;
    CFStringRef v34 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Creating assert delay session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@", (uint8_t *)&v27, 0x2Au);
  }
  if (a3) {
    int v23 = 128;
  }
  else {
    int v23 = 0;
  }
  if (a5) {
    v23 |= 3u;
  }
  int v24 = v23 | 0xC;

  uint64_t v25 = sub_10001E340(v17, v16, v24, v15, a7, a8);
  return v25;
}

uint64_t sub_10001EE24(void *a1, void *a2, void *a3, _DWORD *a4)
{
  return sub_10001E340(a1, a2, 7, a3, 0, a4);
}

id sub_10001EE38()
{
  if (aks_remote_session_token() == -536870212)
  {
    int v0 = auto_unlock_log();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      sub_100020744();
    }
  }

  return 0;
}

BOOL sub_10001EEF4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  int v5 = auto_unlock_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Disabling AKS escrow record", buf, 2u);
  }

  id v6 = v4;
  [v6 bytes];
  [v6 length];

  id v7 = v3;
  [v7 bytes];
  [v7 length];

  int v8 = aks_remote_session();
  if (v8 == -536870212)
  {
    uint64_t v9 = auto_unlock_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100020778();
    }
  }
  return v8 != -536870212;
}

BOOL sub_10001F034(int a1, id a2, void *a3)
{
  id v4 = a2;
  [v4 bytes];
  [v4 length];

  int v5 = aks_remote_session_step();
  id v6 = auto_unlock_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Step status: %d", buf, 8u);
  }

  if (v5)
  {
    id v7 = auto_unlock_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000207AC();
    }
  }
  else if (a3)
  {
    *a3 = +[NSData dataWithBytes:0 length:0];
  }
  return v5 == 0;
}

id sub_10001F19C()
{
  uint64_t v10 = 0;
  id v11 = 0;
  if (aks_remote_peer_confirm() == -536870212 || v10 == 0)
  {
    id v1 = auto_unlock_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1000207E0((uint64_t)&v10, v1, v2, v3, v4, v5, v6, v7);
    }

    int v8 = 0;
  }
  else
  {
    int v8 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v11);
  }
  if (v11) {
    free(v11);
  }

  return v8;
}

uint64_t sub_10001F254(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (v2 && [v2 length])
  {
    uint64_t v4 = [v3 dataUsingEncoding:4];
    [v4 bytes];
    [v4 length];
    unsigned int v5 = aks_remote_peer_setup();
    uint64_t v6 = v5;
    if (v5)
    {
      if (v5 == -536870194)
      {
        uint64_t v7 = auto_unlock_log();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_1000208B8();
        }
        uint64_t v6 = 147;
      }
      else
      {
        uint64_t v7 = auto_unlock_log();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_100020850();
        }
        uint64_t v6 = 172;
      }
    }
  }
  else
  {
    uint64_t v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v8 = @"YES";
      if (!v3) {
        CFStringRef v8 = @"NO";
      }
      int v10 = 138412290;
      CFStringRef v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Missing passcode (exists: %@)", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v6 = 175;
  }

  return v6;
}

uint64_t sub_10001F3F4()
{
  if (!aks_remote_peer_setup()) {
    return 0;
  }
  int v0 = auto_unlock_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    sub_1000208EC();
  }

  return 172;
}

BOOL sub_10001F464(int a1)
{
  int v2 = aks_remote_peer_confirm();
  uint64_t v3 = auto_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = a1;
    __int16 v6 = 1024;
    int v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Auth session -- peer_confirm (session id: %d), status=%d", (uint8_t *)v5, 0xEu);
  }

  return v2 != -536870212;
}

BOOL sub_10001F53C(int a1)
{
  int v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Auth session -- reset (session id: %d)", (uint8_t *)v4, 8u);
  }

  return aks_reset_session() != -536870212;
}

id sub_10001F5F8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v29 = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v26 = 0;
  memset(v27, 0, sizeof(v27));
  uint64_t v23 = 0;
  int v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v19 = 0;
  CFStringRef v20 = &v19;
  uint64_t v21 = 0x2020000000;
  uint64_t v22 = 0;
  if (!v3)
  {
    int v10 = auto_unlock_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100020954();
    }
    goto LABEL_72;
  }
  id v5 = v3;
  [v5 UTF8String];
  [v5 length];
  __int16 v6 = auto_unlock_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Authorization Test: Creating keybags", buf, 2u);
  }

  if (aks_create_bag() || aks_remote_session_reset_all()) {
    goto LABEL_50;
  }
  int v7 = auto_unlock_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Authorization Test: Creating LTKs", buf, 2u);
  }

  if (aks_create_signing_key())
  {
    int v10 = auto_unlock_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100020C10();
    }
    goto LABEL_72;
  }
  if (aks_create_signing_key())
  {
    int v10 = auto_unlock_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100020BA0();
    }
    goto LABEL_72;
  }
  if (aks_sign_signing_key())
  {
    int v10 = auto_unlock_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100020B30();
    }
    goto LABEL_72;
  }
  if (aks_sign_signing_key())
  {
    int v10 = auto_unlock_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100020AC0();
    }
    goto LABEL_72;
  }
  CFStringRef v8 = auto_unlock_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Authorization Test: Enabling test keybag", buf, 2u);
  }

  if (aks_remote_session()
    || aks_remote_session()
    || sub_10001FE70()
    || aks_remote_peer_setup()
    || aks_remote_peer_confirm())
  {
    goto LABEL_50;
  }
  uint64_t v9 = auto_unlock_log();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Authorization Test: Creating ACM context", buf, 2u);
  }

  if (!v4)
  {
    ACMContextCreate(v27);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10001FF44;
    v17[3] = &unk_1008CA450;
    v17[4] = &v23;
    v17[5] = &v19;
    ACMContextGetExternalForm((const void *)v27[0], (uint64_t)v17);
    if (v24[3])
    {
      if (ACMContextContainsCredentialTypeEx((_OWORD *)v27[0], 9, 0))
      {
        +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v24[3], v20[3], v28);
        id v4 = (id)objc_claimAutoreleasedReturnValue();
        free((void *)v24[3]);
        v24[3] = 0;
        goto LABEL_28;
      }
      int v10 = auto_unlock_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000209BC();
      }
    }
    else
    {
      int v10 = auto_unlock_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100020988();
      }
    }
    id v4 = 0;
    goto LABEL_72;
  }
  id v4 = v4;
  v27[0] = (uint64_t)ACMContextCreateWithExternalForm([v4 bytes], (uint64_t)[v4 length]);
  if (!v27[0])
  {
    int v10 = auto_unlock_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100020A8C();
    }
    goto LABEL_72;
  }
LABEL_28:
  CFStringRef v11 = auto_unlock_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Authorization Test: Starting authorization session", buf, 2u);
  }

  id v4 = v4;
  [v4 bytes];
  [v4 length];
  if (!aks_remote_session()
    && !aks_remote_session()
    && !sub_10001FE70()
    && !aks_remote_session_reset()
    && !aks_remote_session_reset())
  {
    id v12 = auto_unlock_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Authorization Test: Session complete checking for credential", buf, 2u);
    }

    if (ACMContextContainsCredentialTypeEx((_OWORD *)v27[0], 9, 0))
    {
      int v10 = auto_unlock_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100020A58();
      }
    }
    else
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_10001FFB8;
      v16[3] = &unk_1008CA450;
      v16[4] = &v23;
      v16[5] = &v19;
      ACMContextGetExternalForm((const void *)v27[0], (uint64_t)v16);
      if (v20[3])
      {
        CFStringRef v13 = +[NSData dataWithBytes:v24[3] length:v28];
        if (v13)
        {
          int v10 = auto_unlock_log();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Authorization Test: Returning credential", buf, 2u);
          }
          goto LABEL_42;
        }
        int v10 = auto_unlock_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_100020A24();
        }
      }
      else
      {
        int v10 = auto_unlock_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_1000209F0();
        }
      }
    }
LABEL_72:
    CFStringRef v13 = 0;
LABEL_42:

    goto LABEL_43;
  }
LABEL_50:
  CFStringRef v13 = 0;
LABEL_43:
  id v14 = (void *)v24[3];
  if (v14) {
    free(v14);
  }
  if (v27[0]) {
    ACMContextDelete((_DWORD *)v27[0], 0);
  }
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);

  return v13;
}

void sub_10001FE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_10001FE70()
{
  return aks_remote_session_step();
}

void *sub_10001FF44(uint64_t a1, const void *a2, size_t size)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = malloc_type_malloc(size, 0xC5DFED7CuLL);
  CFStringRef result = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    CFStringRef result = memcpy(result, a2, size);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = size;
  }
  return result;
}

void *sub_10001FFB8(uint64_t a1, const void *a2, size_t size)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = malloc_type_malloc(size, 0x27DFC569uLL);
  CFStringRef result = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    CFStringRef result = memcpy(result, a2, size);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = size;
  }
  return result;
}

void sub_10002002C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_100020070(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

void sub_1000200B0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void sub_1000200D0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to lock keybag", v2, v3, v4, v5, v6);
}

void sub_100020104()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Failed to create ACM context (status: %d)", v2, v3, v4, v5, v6);
}

void sub_10002016C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000201D8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create ACM context (malloc failure)", v2, v3, v4, v5, v6);
}

void sub_10002020C()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "ACM context does not contain credential (status: %d)", v2, v3, v4, v5, v6);
}

void sub_100020274()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Failed to get keybag UUID (status: %d)", v2, v3, v4, v5, v6);
}

void sub_1000202DC()
{
  sub_10001587C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Resetting all AKS sessions -- we shouldn't ever need to do this", v1, 2u);
}

void sub_10002031C()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Failed to get peer state (status = %d)", v2, v3, v4, v5, v6);
}

void sub_100020384(uint64_t a1, int a2, NSObject *a3)
{
  uint8_t v6 = sub_10001D5E4(*(void *)a1, *(void *)(a1 + 8));
  int v7 = *(_DWORD *)(a1 + 12);
  v8[0] = 67109634;
  v8[1] = a2;
  __int16 v9 = 2112;
  int v10 = v6;
  __int16 v11 = 1024;
  int v12 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Status %d, Peer State: %@, flags %d", (uint8_t *)v8, 0x18u);
}

void sub_100020450()
{
  sub_100020098();
  sub_1000200B0((void *)&_mh_execute_header, v0, v1, "Local key generation failed (error %d, output length = %d)", v2, v3);
}

void sub_1000204BC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100020528()
{
  sub_10002005C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Could not construct der parameters (%d)", v2, v3, v4, v5, v6);
}

void sub_100020594()
{
  sub_10002005C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Could not set key type (%d)", v2, v3, v4, v5, v6);
}

void sub_100020600()
{
  sub_10002005C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Could not add certificate to AKS parameters (%d)", v2, v3, v4, v5, v6);
}

void sub_10002066C()
{
  sub_100020098();
  sub_1000200B0((void *)&_mh_execute_header, v0, v1, "Failed to sign remote key (error = %d, output length = %d)", v2, v3);
}

void sub_1000206D8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100020744()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create token", v2, v3, v4, v5, v6);
}

void sub_100020778()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to disable record", v2, v3, v4, v5, v6);
}

void sub_1000207AC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Step failed", v2, v3, v4, v5, v6);
}

void sub_1000207E0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "Escrow generation failed (length = %d)", a5, a6, a7, a8, 0);
}

void sub_100020850()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Remote peer setup, could not validate escrow %d", v2, v3, v4, v5, v6);
}

void sub_1000208B8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Remote peer setup, incorrect user password", v2, v3, v4, v5, v6);
}

void sub_1000208EC()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Remote peer setup, could not finalize registration %d", v2, v3, v4, v5, v6);
}

void sub_100020954()
{
  sub_10001587C();
}

void sub_100020988()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to create external ACM form", v2, v3, v4, v5, v6);
}

void sub_1000209BC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Authorization Test: Unexpected credential in the acmref", v2, v3, v4, v5, v6);
}

void sub_1000209F0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Authorization Test: External form is empty", v2, v3, v4, v5, v6);
}

void sub_100020A24()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Authorization Test: External data unable to be created", v2, v3, v4, v5, v6);
}

void sub_100020A58()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Authorization Test: Credential missing", v2, v3, v4, v5, v6);
}

void sub_100020A8C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to create ACM context from external form", v2, v3, v4, v5, v6);
}

void sub_100020AC0()
{
  sub_100020048();
  sub_100020070((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to sign real signing key, aks_sign_signing_key()@%d expect:0, got:%x", v2, v3, v4, v5, 0);
}

void sub_100020B30()
{
  sub_100020048();
  sub_100020070((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to sign test signing key, aks_sign_signing_key()@%d expect:0, got:%x", v2, v3, v4, v5, 0);
}

void sub_100020BA0()
{
  sub_100020048();
  sub_100020070((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to create test signing key, aks_create_signing_key()@%d expect:0, got:%x", v2, v3, v4, v5, 0);
}

void sub_100020C10()
{
  sub_100020048();
  sub_100020070((void *)&_mh_execute_header, v0, v1, "Authorization Test: Failed to create local signing key, aks_create_signing_key()@%d expect:0, got:%x", v2, v3, v4, v5, 0);
}

uint64_t SDUnlockSessionConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_56;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_58;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_58:
        uint64_t v37 = 12;
        goto LABEL_63;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_62:
        uint64_t v37 = 8;
LABEL_63:
        *(_DWORD *)(a1 + v37) = v14;
        continue;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 20) |= 4u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                uint64_t v24 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0;
        }
LABEL_67:
        BOOL v38 = v24 != 0;
        uint64_t v39 = 16;
        goto LABEL_76;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 20) |= 8u;
        while (2)
        {
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              BOOL v9 = v28++ >= 9;
              if (v9)
              {
                uint64_t v29 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v29 = 0;
        }
LABEL_71:
        BOOL v38 = v29 != 0;
        uint64_t v39 = 17;
        goto LABEL_76;
      case 5u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        *(unsigned char *)(a1 + 20) |= 0x10u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v35 == -1 || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v36 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
      v34 |= (unint64_t)(v36 & 0x7F) << v32;
      if ((v36 & 0x80) == 0) {
        goto LABEL_73;
      }
      v32 += 7;
      BOOL v9 = v33++ >= 9;
      if (v9)
      {
        uint64_t v34 = 0;
        goto LABEL_75;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_73:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v34 = 0;
    }
LABEL_75:
    BOOL v38 = v34 != 0;
    uint64_t v39 = 18;
LABEL_76:
    *(unsigned char *)(a1 + v39) = v38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100021FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100021FE4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerAppStoreSearch];
  uint64_t v1 = [WeakRetained transfer];
  uint64_t v2 = [v1 cancelAction];
  [WeakRetained actionSelected:v2];
}

uint64_t SDUnlockSessionKeyExchangeResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v29 = 20;
        goto LABEL_50;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v29 = 16;
LABEL_50:
        *(_DWORD *)(a1 + v29) = v14;
        continue;
      case 3u:
        uint64_t v22 = PBReaderReadData();
        unsigned int v23 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v22;

        continue;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 28) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v26 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0) {
        goto LABEL_52;
      }
      v24 += 7;
      BOOL v9 = v25++ >= 9;
      if (v9)
      {
        uint64_t v26 = 0;
        goto LABEL_54;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v26 = 0;
    }
LABEL_54:
    *(unsigned char *)(a1 + 24) = v26 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100023F44(void *a1, NSObject *a2)
{
  id v3 = [a1 fileSystemRepresentation];
  int v4 = *__error();
  int v5 = 136315394;
  id v6 = v3;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to issue sandbox extension for %s with error %d", (uint8_t *)&v5, 0x12u);
}

id sub_1000248B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_100024AD8(uint64_t a1)
{
  [*(id *)(a1 + 32) releaseIdleSleepAssertion];
  [*(id *)(a1 + 32) invalidateAssertionTimer];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 logAutoUnlockEnd];
}

void sub_1000252DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000252F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginAKSSession];
}

void sub_1000256F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_10002571C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000257D8;
  v6[3] = &unk_1008CA4E0;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);

  objc_destroyWeak(&v8);
}

void sub_1000257D8(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting wifi request", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained nq_handleWiFiRequestStartedWithStartAWDLHandler:*(void *)(a1 + 32)];
}

void sub_10002585C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100025904;
  block[3] = &unk_1008CA530;
  v6[1] = a3;
  objc_copyWeak(v6, (id *)(a1 + 48));
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(v4, block);
  objc_destroyWeak(v6);
}

void sub_100025904(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v2 = auto_unlock_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100029738(a1, v2);
    }

    id v3 = (id *)(a1 + 40);
    id WeakRetained = objc_loadWeakRetained(v3);
    [WeakRetained invalidateResponseTimer];

    id v5 = objc_loadWeakRetained(v3);
    uint64_t v6 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    CFStringRef v11 = @"Starting AWDL failed";
    id v7 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
    id v8 = +[NSError errorWithDomain:v6 code:114 userInfo:v7];
    [v5 notifyDelegateWithError:v8];
  }
  else
  {
    id v9 = objc_loadWeakRetained((id *)(a1 + 40));
    [v9 nq_awdlNetworkStarted];
  }
}

void sub_100025A88(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100025B18;
  block[3] = &unk_1008CA3B0;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_100025B18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained nq_handleWiFiRequestInvalidated];
}

void sub_1000263C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100026C1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100027CAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error sending SDAutoUnlockAWDLInfo (error: %@)", buf, 0xCu);
    }

    [*(id *)(a1 + 32) invalidateResponseTimer];
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    CFStringRef v10 = @"AWDL info exchange failed";
    id v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    id v8 = +[NSError errorWithDomain:v6 code:103 userInfo:v7];
    [v5 notifyDelegateWithError:v8];
  }
}

void sub_100027F78(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = auto_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100029D2C();
  }

  [*(id *)(a1 + 32) invalidateResponseTimer];
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
  CFStringRef v10 = @"Exchange request failed";
  id v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  id v8 = +[NSError errorWithDomain:v6 code:201 userInfo:v7];
  [v5 notifyDelegateWithError:v8];
}

void sub_100028238(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = auto_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100029D94();
  }

  [*(id *)(a1 + 32) invalidateResponseTimer];
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
  CFStringRef v10 = @"Exchange request failed";
  id v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  id v8 = +[NSError errorWithDomain:v6 code:103 userInfo:v7];
  [v5 notifyDelegateWithError:v8];
}

void sub_10002853C(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 32) sessionCompleted])
  {
    uint64_t v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AuthToken ack after session completed", buf, 2u);
    }
  }
  else
  {
    if (a2)
    {
      [*(id *)(a1 + 32) invalidateResponseTimer];
      id v5 = *(void **)(a1 + 32);
      uint64_t v6 = SFAutoUnlockErrorDomain;
      NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
      CFStringRef v13 = @"Exchange request failed";
      id v7 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
      id v8 = +[NSError errorWithDomain:v6 code:103 userInfo:v7];
      [v5 notifyDelegateWithError:v8];

      return;
    }
    if (*(void *)(a1 + 40))
    {
      id v10 = [*(id *)(a1 + 32) exchangeResponse];
      if ([v10 version] < 2
        || ![*(id *)(a1 + 32) userRequestRequired])
      {
        uint64_t v9 = *(void *)(a1 + 48);

        if (v9) {
          return;
        }
        id v10 = [*(id *)(a1 + 32) wifiRequestStartedHandler];
        (*((void (**)(id, uint64_t))v10 + 2))(v10, 1);
      }
    }
  }
}

void sub_100028888(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setShouldAlertOnNotify:0];
  [*(id *)(a1 + 32) alertOfUnlock];
  [*(id *)(a1 + 32) invalidateResponseTimer];
  [*(id *)(a1 + 32) notifyDelegateWithError:v4];
}

id sub_100028D58(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Assertion timer fired", v4, 2u);
  }

  [*(id *)(a1 + 32) setAssertionTimer:0];
  return [*(id *)(a1 + 32) releaseIdleSleepAssertion];
}

void sub_100029738(uint64_t a1, NSObject *a2)
{
  id v3 = [*(id *)(a1 + 32) wifiRequest];
  int v4 = 136315650;
  id v5 = "-[SDAutoUnlockKeySession createWiFiRequest]_block_invoke_2";
  __int16 v6 = 2112;
  CFStringRef v7 = @"Starting AWDL failed";
  __int16 v8 = 2112;
  uint64_t v9 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s error %@ request:%@", (uint8_t *)&v4, 0x20u);
}

void sub_1000297F8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "WiFi request invalidated", v2, v3, v4, v5, v6);
}

void sub_10002982C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000298A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100029914()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Local device needs to be armed", v2, v3, v4, v5, v6);
}

void sub_100029948(uint64_t a1, NSObject *a2)
{
  int v2 = 138412546;
  CFStringRef v3 = @"Auth prompt request missing info";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@ (request: %@)", (uint8_t *)&v2, 0x16u);
}

void sub_1000299D4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Received image data but already using cache", v2, v3, v4, v5, v6);
}

void sub_100029A08()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Received image data message without data %@", v2, v3, v4, v5, v6);
}

void sub_100029A70()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handleSessionKeyExchangeResponse: %@", v2, v3, v4, v5, v6);
}

void sub_100029AD8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "%@", v2, v3, v4, v5, v6);
}

void sub_100029B40()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Sending auth token for approve %@", v1, 0xCu);
}

void sub_100029BB4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to generate ranging session token", v2, v3, v4, v5, v6);
}

void sub_100029BE8()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Sending auth token %@", v1, 0xCu);
}

void sub_100029C5C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Creating auth token failed", v2, v3, v4, v5, v6);
}

void sub_100029C90()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Confirmation failed", v2, v3, v4, v5, v6);
}

void sub_100029CC4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed awdl info serialization", v2, v3, v4, v5, v6);
}

void sub_100029CF8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "WiFi interface disabled", v2, v3, v4, v5, v6);
}

void sub_100029D2C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error sending auth prompt response %@", v2, v3, v4, v5, v6);
}

void sub_100029D94()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error sending request %@", v2, v3, v4, v5, v6);
}

void sub_100029DFC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IOPMAssertionDeclareSystemActivity for key session returned %x", (uint8_t *)v2, 8u);
}

uint64_t SDAuthenticationResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_39;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_41:
        uint64_t v25 = 40;
        goto LABEL_46;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 32;
        goto LABEL_37;
      case 3u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
        goto LABEL_37;
      case 4u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        break;
      case 5u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
LABEL_37:
        char v24 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
      v14 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_43;
      }
      v20 += 7;
      BOOL v9 = v21++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_45;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_45:
    uint64_t v25 = 24;
LABEL_46:
    *(_DWORD *)(a1 + v25) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10002AD48(id a1)
{
  uint64_t v1 = objc_alloc_init(SDUnlockIDSController);
  uint64_t v2 = (void *)qword_10097FB30;
  qword_10097FB30 = (uint64_t)v1;
}

void sub_10002B2B4(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionary];
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    [v2 setObject:v4 forKeyedSubscript:IDSSendMessageOptionTimeoutKey];
  }
  else
  {
    unsigned int v5 = +[NSNumber numberWithDouble:IDSMaxMessageTimeout];
    [v3 setObject:v5 forKeyedSubscript:IDSSendMessageOptionTimeoutKey];
  }
  [v3 setObject:&__kCFBooleanFalse forKeyedSubscript:IDSSendMessageOptionEnforceRemoteTimeoutsKey];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    [v3 setObject:v6 forKeyedSubscript:IDSSendMessageOptionQueueOneIdentifierKey];
  }
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = &IDSSendMessageOptionLocalDeliveryKey;
  if (v7 != 1)
  {
    if (v7) {
      goto LABEL_10;
    }
    [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSSendMessageOptionLocalDeliveryKey];
    char v8 = &IDSSendMessageOptionRequireBluetoothKey;
  }
  [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:*v8];
LABEL_10:
  id v9 = [objc_alloc((Class)IDSProtobuf) initWithProtobufData:*(void *)(a1 + 48) type:*(unsigned __int16 *)(a1 + 88) isResponse:0];
  int v10 = [*(id *)(a1 + 56) idsService];
  if (*(void *)(a1 + 80) == 2)
  {
    uint64_t v11 = [*(id *)(a1 + 56) idsServiceClassA];

    int v10 = (void *)v11;
  }
  char v12 = paired_unlock_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(unsigned __int16 *)(a1 + 88);
    id v14 = [*(id *)(a1 + 48) length];
    unint64_t v15 = [*(id *)(a1 + 56) dataClassStringForDataClass:*(void *)(a1 + 80)];
    uint64_t v16 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)char v28 = v13;
    *(_WORD *)&v28[4] = 2048;
    *(void *)&v28[6] = v14;
    __int16 v29 = 2112;
    unint64_t v30 = v15;
    __int16 v31 = 2112;
    uint64_t v32 = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sending protobuf (type = %d, size = %lu, data class = %@, data = %@)", buf, 0x26u);
  }
  id v17 = +[NSSet setWithObject:IDSDefaultPairedDevice];
  id v25 = 0;
  id v26 = 0;
  [v10 sendProtobuf:v9 toDestinations:v17 priority:300 options:v3 identifier:&v26 error:&v25];
  id v18 = v26;
  id v19 = v25;

  char v20 = paired_unlock_log();
  unsigned int v21 = v20;
  if (v19)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_10002C898((uint64_t)v19, v21);
    }

    uint64_t v22 = *(void *)(a1 + 64);
    if (v22) {
      (*(void (**)(uint64_t, id))(v22 + 16))(v22, v19);
    }
  }
  else
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)char v28 = v18;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Sent message with identifier = %@", buf, 0xCu);
    }

    char v23 = *(void **)(a1 + 64);
    if (v23)
    {
      id v24 = [v23 copy];
      [*(id *)(*(void *)(a1 + 56) + 64) setObject:v24 forKeyedSubscript:v18];
    }
  }
}

void sub_10002B6E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegates];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10002B7F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegates];
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_10002C898(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IDS send error = %@", (uint8_t *)&v2, 0xCu);
}

void sub_10002C910(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IDS device identifier not found for device: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10002C988(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No error handler for message sent callback", v1, 2u);
}

void sub_10002C9CC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Incoming protobuf is nil", v1, 2u);
}

id sub_10002CC00(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_start];
}

id sub_10002CD10(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_cancel];
}

void sub_10002DD58(id a1, BOOL a2, NSError *a3)
{
  if (a3)
  {
    uint64_t v3 = auto_unlock_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10002EBD8(v3);
    }
  }
}

void sub_10002E1DC(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidateResponseTimer];
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
  CFStringRef v7 = @"Setup created response failed";
  uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  unsigned int v5 = +[NSError errorWithDomain:v3 code:103 userInfo:v4];
  [v2 notifyDelegateWithError:v5];
}

void sub_10002E4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    CFStringRef v9 = @"Setup created response failed";
    NSErrorUserInfoKey v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    CFStringRef v7 = +[NSError errorWithDomain:v5 code:103 userInfo:v6];
    [v4 notifyDelegateWithError:v7];
  }
}

void sub_10002E72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    CFStringRef v9 = @"Setup created response failed";
    NSErrorUserInfoKey v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    CFStringRef v7 = +[NSError errorWithDomain:v5 code:103 userInfo:v6];
    [v4 notifyDelegateWithError:v7];
  }
}

id sub_10002E8FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMessage:*(void *)(a1 + 40) fromDeviceID:*(void *)(a1 + 48) type:*(unsigned __int16 *)(a1 + 56)];
}

void sub_10002EAD8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Hash from setup doesn't match preferred LTK", v1, 2u);
}

void sub_10002EB1C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Timeout waiting for LTK response from Companion", v1, 2u);
}

void sub_10002EB60(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "handleCreateEscrowSecret: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10002EBD8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Sending key device locked failed", v1, 2u);
}

uint64_t SDAuthenticationPairingCreateSecretReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadData();
      uint64_t v19 = 16;
    }
    else
    {
      if (v12 != 2)
      {
        if (v12 == 1)
        {
          char v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_33;
            }
            v13 += 7;
            BOOL v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_35;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v15) = 0;
          }
LABEL_35:
          *(_DWORD *)(a1 + 24) = v15;
        }
        else
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        continue;
      }
      uint64_t v18 = PBReaderReadString();
      uint64_t v19 = 8;
    }
    char v20 = *(void **)(a1 + v19);
    *(void *)(a1 + v19) = v18;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10002FDC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002FE08(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) localLTK];
  uint64_t v3 = [*(id *)(a1 + 32) remoteLTK];
  [*(id *)(a1 + 32) setAksSessionID:sub_10001E314(v2, v3, (int)objc_msgSend(*(id *)(a1 + 32), "originator"), (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 1)];

  char v4 = auto_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = [*(id *)(a1 + 32) sessionIsValid];
    CFStringRef v6 = @"NO";
    if (v5) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138412290;
    CFStringRef v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fix worked for pairing session: %@", (uint8_t *)&v7, 0xCu);
  }
}

void sub_10002FF30(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) localLTK];
  uint64_t v3 = [*(id *)(a1 + 32) remoteLTK];
  int v4 = [*(id *)(a1 + 32) originator];
  int v5 = [*(id *)(a1 + 32) usingEscrow];
  CFStringRef v6 = [*(id *)(a1 + 32) escrowSecret];
  [*(id *)(a1 + 32) setAksSessionID:sub_10001E924(v2, v3, v4, v5, 0, v6, (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))];

  int v7 = auto_unlock_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = [*(id *)(a1 + 32) sessionIsValid];
    CFStringRef v9 = @"NO";
    if (v8) {
      CFStringRef v9 = @"YES";
    }
    int v10 = 138412290;
    CFStringRef v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fix worked for auth session: %@", (uint8_t *)&v10, 0xCu);
  }
}

void sub_10003008C(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) localLTK];
  uint64_t v3 = [*(id *)(a1 + 32) remoteLTK];
  int v4 = [*(id *)(a1 + 32) originator];
  int v5 = [*(id *)(a1 + 32) usingEscrow];
  CFStringRef v6 = [*(id *)(a1 + 32) escrowSecret];
  [*(id *)(a1 + 32) setAksSessionID:sub_10001E924(v2, v3, v4, v5, 0, v6, (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))];

  int v7 = auto_unlock_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = [*(id *)(a1 + 32) sessionIsValid];
    CFStringRef v9 = @"NO";
    if (v8) {
      CFStringRef v9 = @"YES";
    }
    int v10 = 138412290;
    CFStringRef v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fix worked for auth session: %@", (uint8_t *)&v10, 0xCu);
  }
}

void sub_100030918(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error creating authorization record: %d", (uint8_t *)v3, 8u);
}

void sub_100030E78(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 processIdentifier];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "process %d tried to connect to the Share Sheet User Defaults server, but it was not entitled.", (uint8_t *)v3, 8u);
}

void sub_100031748(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100031858;
  block[3] = &unk_1008CA6F8;
  id v14 = v5;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  CFStringRef v9 = *(void **)(a1 + 48);
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = v9;
  char v21 = *(unsigned char *)(a1 + 66);
  id v10 = *(id *)(a1 + 56);
  __int16 v20 = *(_WORD *)(a1 + 64);
  id v18 = v6;
  id v19 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_100031858(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = +[SDActivityEncryptionManager sharedEncryptionManager];
    id v3 = [v2 newDecryptionKeyFromDataRepresentation:*(void *)(a1 + 32)];

    if (v3)
    {
      if ([v3 isEqual:*(void *)(a1 + 40)])
      {
        unsigned int v4 = *(unsigned __int16 *)(a1 + 80);
        unsigned int v5 = [*(id *)(a1 + 48) lastCounter];
        id v6 = handoff_log();
        BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
        if (v4 <= v5)
        {
          if (v7)
          {
            int v13 = *(unsigned __int16 *)(a1 + 80);
            unsigned int v14 = [*(id *)(a1 + 48) lastCounter];
            id v15 = [*(id *)(*(void *)(a1 + 48) + 24) uniqueIDOverride];
            uint64_t v16 = SFHexStringForData();
            v17[0] = 67109890;
            v17[1] = v13;
            __int16 v18 = 1024;
            unsigned int v19 = v14;
            __int16 v20 = 2112;
            char v21 = v15;
            __int16 v22 = 2112;
            char v23 = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "New counter %d is not greater than previous %d from %@ with rawAdvertisementData %@. New key is same. Replay!", (uint8_t *)v17, 0x22u);
          }
        }
        else if (v7)
        {
          sub_100032060(a1 + 48);
        }
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 48);
        id v10 = *(void **)(v9 + 48);
        *(void *)(v9 + 48) = 0;

        id v11 = +[SDActivityEncryptionManager sharedEncryptionManager];
        id v12 = [*(id *)(*(void *)(a1 + 48) + 24) uniqueIDOverride];
        [v11 setDecryptionKey:v3 forDeviceIdentifier:v12];

        [*(id *)(a1 + 48) updateWithRawAdvertisementData:*(void *)(a1 + 56) receivedViaScanning:*(unsigned __int8 *)(a1 + 82) isReplay:1 newAdvertisementHandler:*(void *)(a1 + 72)];
      }
    }
  }
  else
  {
    uint64_t v8 = handoff_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100031FC0(a1, v8);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_100031E50(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100031E70(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 24) uniqueIDOverride];
  uint64_t v2 = SFHexStringForData();
  sub_100031E38();
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Failed to decrypt advertisement with new key from %@ with rawAdvertisementData %@. Discarding advertisement", v5, v6, v7, v8, v9);
}

void sub_100031F18(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 24) uniqueIDOverride];
  uint64_t v2 = SFHexStringForData();
  sub_100031E38();
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Failed to decrypt advertisement from %@ with rawAdvertisementData %@. Requesting new key", v5, v6, v7, v8, v9);
}

void sub_100031FC0(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = [*(id *)(*(void *)(a1 + 48) + 24) uniqueIDOverride];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to retrieve new key from %@", (uint8_t *)&v4, 0xCu);
}

void sub_100032060(uint64_t a1)
{
  uint64_t v1 = [*(id *)(*(void *)a1 + 24) uniqueIDOverride];
  uint64_t v2 = SFHexStringForData();
  sub_100031E38();
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Failed to decrypt advertisement from %@ with rawAdvertisementData %@. New key is same. Replay?", v5, v6, v7, v8, v9);
}

void sub_100032160(id a1)
{
  uint64_t v1 = objc_alloc_init(SDClassroomBrowser);
  uint64_t v2 = (void *)qword_10097FB48;
  qword_10097FB48 = (uint64_t)v1;
}

id sub_100032C20(uint64_t a1)
{
  uint64_t v2 = airdrop_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v6 = 138478083;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SDClassroomBrowser: cancellation handler called for personID %{private}@ sessionID %@", (uint8_t *)&v6, 0x16u);
  }

  return [*(id *)(a1 + 48) cancelSendingItemsToPersonWithID:*(void *)(a1 + 32) sessionID:*(void *)(a1 + 40) clientBundleID:*(void *)(a1 + 56)];
}

Class sub_100033FBC()
{
  if (qword_10097FB58 != -1) {
    dispatch_once(&qword_10097FB58, &stru_1008CA790);
  }
  Class result = objc_getClass("CRKShareTargetBrowser");
  qword_10097FB50 = (uint64_t)result;
  off_1009661B0 = (uint64_t (*)())sub_100034020;
  return result;
}

id sub_100034020()
{
  return (id)qword_10097FB50;
}

void sub_10003402C(id a1)
{
  qword_10097FB60 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ClassroomKit.framework/ClassroomKit", 2);
}

void sub_100034058(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100034078()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "App provided JSON: %@", v1, 0xCu);
}

void sub_1000340EC(uint64_t a1, void *a2, NSObject *a3)
{
  int v5 = 138412802;
  uint64_t v6 = a1;
  __int16 v7 = 2048;
  id v8 = [a2 completedUnitCount];
  __int16 v9 = 2048;
  id v10 = [a2 totalUnitCount];
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "SDClassroomBrowser send operation to %@ progress %ld/%ld", (uint8_t *)&v5, 0x20u);
}

void sub_1000341AC(uint64_t a1, void *a2, NSObject *a3)
{
  int v5 = [a2 error];
  int v6 = 138412546;
  uint64_t v7 = a1;
  __int16 v8 = 2112;
  __int16 v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDClassroomBrowser failed send operation to %@ (%@)", (uint8_t *)&v6, 0x16u);
}

void sub_100034260()
{
  sub_10002972C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "SDClassroomBrowser didInterruptWithError %@", v1, 0xCu);
}

void sub_1000342D4()
{
  os_log_t v0 = SFCompactStringFromCollection();
  sub_10002972C();
  sub_100034058((void *)&_mh_execute_header, v1, v2, "SDClassroomBrowser shareTargetBrowser:didFindTargets: %@", v3, v4, v5, v6, v7);
}

void sub_100034358()
{
  os_log_t v0 = SFCompactStringFromCollection();
  sub_10002972C();
  sub_100034058((void *)&_mh_execute_header, v1, v2, "SDClassroomBrowser shareTargetBrowser:didRemoveTargets: %@", v3, v4, v5, v6, v7);
}

id sub_100034558(uint64_t a1)
{
  [*(id *)(a1 + 32) stop];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 start];
}

void sub_100034A7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
  [WeakRetained bonjourPublisher:*(void *)(a1 + 32) propertiesDidChange:*(void *)(*(void *)(a1 + 32) + 64)];
}

id sub_100034E40(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 publishCallBack:a2];
}

id sub_100034EC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) publish];
}

void sub_1000350F8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Bonjour name conflict for %@", (uint8_t *)&v2, 0xCu);
}

void sub_100035170()
{
  sub_1000350E0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Bonjour advertise failed (%ld|%d)", v1, 0x12u);
}

void sub_1000351F0(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v3, 0xCu);
}

void sub_10003526C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropPublisher: dataFromTXTRecordDictionary returned nil", v1, 2u);
}

void sub_1000352B0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropPublisher: copyAirDropID returned NULL", v1, 2u);
}

void sub_1000352F4()
{
  sub_1000350E0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "SDAirDropPublisher: CFNetServiceRegisterWithOptions returned (%ld, %d)", v1, 0x12u);
}

id sub_100035720(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_start];
}

id sub_100035CCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_cancel];
}

id sub_100035E50(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_updateForCloudPairing];
}

void sub_100036B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100036B8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleLTKTimerFired];
}

void sub_10003902C(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setSendState:1];
  uint64_t v5 = objc_alloc_init(SDUnlockSetupRequest);
  -[SDUnlockSetupRequest setVersion:](v5, "setVersion:", [(id)objc_opt_class() setupRequestVersion]);
  [(SDUnlockSetupRequest *)v5 setLongTermKey:v4];

  uint64_t v6 = objc_opt_new();
  [*(id *)(a1 + 32) setKeyExchangeDate:v6];

  uint8_t v7 = auto_unlock_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int16 v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending SDUnlockSetupRequest %@", buf, 0xCu);
  }

  unsigned int v8 = [*(id *)(a1 + 32) useAttestedProtocol];
  __int16 v9 = [*(id *)(a1 + 32) transport];
  id v10 = [(SDUnlockSetupRequest *)v5 data];
  id v11 = [*(id *)(a1 + 32) deviceID];
  id v12 = [*(id *)(a1 + 32) sessionID];
  int v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) messageTimeout]);
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 3221225472;
  __int16 v18 = sub_100039294;
  unsigned int v19 = &unk_1008CA6A8;
  uint64_t v20 = *(void *)(a1 + 32);
  if (v8) {
    uint64_t v14 = 2001;
  }
  else {
    uint64_t v14 = 101;
  }
  id v15 = [v9 sendAutoUnlockPayload:v10 toDevice:v11 type:v14 sessionID:v12 queueOneID:0 timeout:v13 completion:&v16 queueOneID:v16 queueTwoID:v17 queueThreeID:v18 queueFourID:v19 queueFiveID:v20];
  [*(id *)(a1 + 32) setSetupMessageIdentifier:v15];

  [*(id *)(a1 + 32) restartResponseTimer:[sub_1001B1AF8((double)(uint64_t)objc_msgSend(*(id *)(a1 + 32), "responseTimeout"))]];
}

void sub_100039294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    [*(id *)(a1 + 32) setSetupError:];
    [*(id *)(a1 + 32) setErrorType:5];
    [*(id *)(a1 + 32) invalidateResponseTimer];
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    CFStringRef v9 = @"Setup request failed";
    uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    uint8_t v7 = +[NSError errorWithDomain:v5 code:151 userInfo:v6];
    [v4 notifyDelegateWithError:v7];
  }
}

uint64_t sub_100039390(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000395B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    [*(id *)(a1 + 32) setSetupError:];
    [*(id *)(a1 + 32) setErrorType:6];
    [*(id *)(a1 + 32) invalidateResponseTimer];
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    CFStringRef v9 = @"Setup request failed";
    uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    uint8_t v7 = +[NSError errorWithDomain:v5 code:152 userInfo:v6];
    [v4 notifyDelegateWithError:v7];
  }
}

id sub_10003979C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMessage:*(void *)(a1 + 40) fromDeviceID:*(void *)(a1 + 48) type:*(unsigned __int16 *)(a1 + 56)];
}

void sub_10003AC90()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Internet Sharing enabled", v2, v3, v4, v5, v6);
}

void sub_10003ACC4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 passcode];
  CFStringRef v4 = @"YES";
  if (!v3) {
    CFStringRef v4 = @"NO";
  }
  int v5 = 138412290;
  CFStringRef v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid parameters (passcode = %@)", (uint8_t *)&v5, 0xCu);
}

void sub_10003AD74()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Passcode can't unlock keybag", v2, v3, v4, v5, v6);
}

void sub_10003ADA8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Not enabling, view not syncing", v2, v3, v4, v5, v6);
}

void sub_10003ADDC(void *a1, NSObject *a2)
{
  if ([a1 isConnected]) {
    CFStringRef v4 = @"YES";
  }
  else {
    CFStringRef v4 = @"NO";
  }
  if ([a1 isNearby]) {
    CFStringRef v5 = @"YES";
  }
  else {
    CFStringRef v5 = @"NO";
  }
  int v6 = 138412546;
  CFStringRef v7 = v4;
  __int16 v8 = 2112;
  CFStringRef v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "### Device is either not connected or not nearby (isConnected:%@, isNearby:%@)", (uint8_t *)&v6, 0x16u);
}

void sub_10003AEB0()
{
  sub_10001587C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Hash from setup doesn't match preferred LTK", v1, 2u);
}

void sub_10003AEF0(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error in session created response: %d", (uint8_t *)v2, 8u);
}

void sub_10003AF68()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Watch missing LTK and is unable to communicate with Companion to potentially sync it", v2, v3, v4, v5, v6);
}

void sub_10003AF9C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Watch missing LTK for Mac", v2, v3, v4, v5, v6);
}

void sub_10003AFD0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Watch has old LTK for Mac", v2, v3, v4, v5, v6);
}

void sub_10003B004()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handleEscrowSessionRequest: %@", v2, v3, v4, v5, v6);
}

void sub_10003B06C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "AKS session invalid", v2, v3, v4, v5, v6);
}

void sub_10003B0A0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Remote LTK does not exist", v2, v3, v4, v5, v6);
}

void sub_10003B0D4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handleSetupCreateRecord: %@", v2, v3, v4, v5, v6);
}

void sub_10003B13C()
{
  sub_10001587C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Missing proxy companion IDS ID -- this shouldn't happen", v1, 2u);
}

void sub_10003B17C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Unlock not enabled and cloud pairing not syncing after pairing (device: %@)", v2, v3, v4, v5, v6);
}

uint64_t SDAutoUnlockAuthPromptResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v29 = 24;
        goto LABEL_54;
      case 2u:
        uint64_t v18 = PBReaderReadData();
        unsigned int v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;

        continue;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_49:
        *(unsigned char *)(a1 + 28) = v22 != 0;
        continue;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v14 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0) {
        goto LABEL_51;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v29 = 8;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10003C2DC(id a1)
{
  uint64_t v1 = objc_alloc_init(SDPairedDeviceAgent);
  uint64_t v2 = (void *)qword_10097FB70;
  qword_10097FB70 = (uint64_t)v1;
}

id sub_10003C47C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_10003C68C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _idsEnsureCoalescersStarted];
}

id sub_10003C71C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_10003CB08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _companionLinkDevicesChanged];
}

id sub_10003CB10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _companionLinkDevicesChanged];
}

id sub_10003CB18(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _companionLinkDevicesChanged];
}

void sub_10003CB20(id a1)
{
  uint64_t v1 = charging_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_100041A90();
  }
}

void sub_10003CB64(id a1)
{
  uint64_t v1 = charging_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_100041AC4();
  }
}

void sub_10003CBA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    char v4 = charging_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100041AF8();
    }
  }
  else
  {
    [*(id *)(a1 + 32) _companionLinkRegisterEvents];
  }
}

id sub_10003D180(uint64_t a1)
{
  uint64_t v2 = charging_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Connection action handler called", v4, 2u);
  }

  return [*(id *)(a1 + 32) _idsUpdateConnectedState];
}

id sub_10003D1F4(uint64_t a1)
{
  uint64_t v2 = charging_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sync action handler called", v4, 2u);
  }

  return [*(id *)(a1 + 32) _idsEnsureSynced];
}

id sub_10003DA44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _idsTimerInfoFired];
}

id sub_10003E120(uint64_t a1)
{
  uint64_t v2 = charging_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Triggering sync for connection", v4, 2u);
  }

  return [*(id *)(a1 + 32) _idsTriggerSync];
}

id sub_10003E794(uint64_t a1)
{
  return [*(id *)(a1 + 32) _idsTriggerSync];
}

void sub_10003F624(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v8 = NRDevicePropertyName;
    if ([v5 isEqualToString:NRDevicePropertyName])
    {
      if (*(void *)(*(void *)(a1 + 32) + 208))
      {
        BOOL v9 = +[NRPairedDeviceRegistry sharedInstance];
        int v10 = [v9 getActivePairedDevice];

        id v11 = [v10 valueForProperty:v8];
        char v12 = [*(id *)(*(void *)(a1 + 32) + 208) name];
        unsigned __int8 v13 = [v12 isEqualToString:v11];

        if ((v13 & 1) == 0)
        {
          [*(id *)(*(void *)(a1 + 32) + 208) setName:v11];
          unsigned int v14 = [*(id *)(*(void *)(a1 + 32) + 208) publish];
          unint64_t v15 = charging_log();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 208);
            int v17 = 138412546;
            uint64_t v18 = v16;
            __int16 v19 = 1024;
            unsigned int v20 = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Published name update for %@ status %x", (uint8_t *)&v17, 0x12u);
          }
        }
      }
    }
  }
}

void sub_1000406D8(id a1)
{
  uint64_t v1 = charging_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_1000420B4();
  }
}

void sub_10004071C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      unint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) _powerSourceChanged:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        unint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_10004080C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      unint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) _powerSourceChanged:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        unint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_1000408FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      unint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) _powerSourceLost:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        unint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_1000409EC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = charging_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Activated power source monitor (error: %@)", (uint8_t *)&v4, 0xCu);
  }
}

id sub_100040D50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _wristStateChanged];
}

id sub_100041080(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _lowPowerModeChanged];
}

void sub_100041600(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 104))
  {
    uint64_t v2 = charging_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling dismiss UI handler after timeout", v5, 2u);
    }

    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 104) + 16))();
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(void **)(v3 + 104);
    *(void *)(v3 + 104) = 0;
  }
}

void sub_100041A90()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "CompanionLink interrupted", v2, v3, v4, v5, v6);
}

void sub_100041AC4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "CompanionLink invalidated", v2, v3, v4, v5, v6);
}

void sub_100041AF8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Companion link failed to activate: %@", v2, v3, v4, v5, v6);
}

void sub_100041B60()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Companion disconnected during UI sync, dismissing UI", v2, v3, v4, v5, v6);
}

void sub_100041B94()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "State update missing message type", v2, v3, v4, v5, v6);
}

void sub_100041BC8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error sending state update (error: %@)", v2, v3, v4, v5, v6);
}

void sub_100041C30(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100041CA0(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  sub_10002972C();
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Update not an NSDictionary: %@", v5, 0xCu);
}

void sub_100041D38()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Lock state changed", v2, v3, v4, v5, v6);
}

void sub_100041D6C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Nil message data", v2, v3, v4, v5, v6);
}

void sub_100041DA0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Message missing type: %@", v2, v3, v4, v5, v6);
}

void sub_100041E08(const __CFString *a1, NSObject *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  CFStringRef v7 = @"unknown";
  if (isKindOfClass) {
    CFStringRef v7 = a1;
  }
  int v8 = 138412546;
  long long v9 = v5;
  __int16 v10 = 2112;
  CFStringRef v11 = v7;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Message not an NSDictionary: %@ (%@)", (uint8_t *)&v8, 0x16u);
}

void sub_100041EE4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100041F54()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Dashboard entry missing name", v2, v3, v4, v5, v6);
}

void sub_100041F88()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Dashboard entry missing dict", v2, v3, v4, v5, v6);
}

void sub_100041FBC(void *a1, NSObject *a2)
{
  [a1 unsignedLongValue];
  sub_10002972C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Message ID doesn't exist for remove: %lu", v3, 0xCu);
}

void sub_100042044(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000420B4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Power source monitor invalidated", v2, v3, v4, v5, v6);
}

uint64_t SDUnlockSessionKeyExchangeRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_50;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_52;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_52:
        uint64_t v33 = 28;
        goto LABEL_65;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_56:
        uint64_t v33 = 24;
        goto LABEL_65;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 36) |= 8u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                uint64_t v24 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0;
        }
LABEL_60:
        *(unsigned char *)(a1 + 32) = v24 != 0;
        continue;
      case 4u:
        uint64_t v27 = PBReaderReadData();
        char v28 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v27;

        continue;
      case 5u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v31 == -1 || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
      v14 |= (unint64_t)(v32 & 0x7F) << v29;
      if ((v32 & 0x80) == 0) {
        goto LABEL_62;
      }
      v29 += 7;
      BOOL v9 = v30++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_64;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_62:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_64:
    uint64_t v33 = 8;
LABEL_65:
    *(_DWORD *)(a1 + v33) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockRelockRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockWiFiAWDLInfoReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 24;
        goto LABEL_50;
      case 2u:
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
            v17 |= (unint64_t)(v19 & 0x7F) << v15;
            if (v19 < 0)
            {
              v15 += 7;
              BOOL v9 = v16++ >= 9;
              if (v9)
              {
                LODWORD(v17) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_54:
        uint64_t v33 = 12;
        goto LABEL_67;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v17 |= (unint64_t)(v23 & 0x7F) << v20;
            if (v23 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                LODWORD(v17) = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_58:
        uint64_t v33 = 32;
        goto LABEL_67;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + 40) |= 8u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v17 |= (unint64_t)(v27 & 0x7F) << v24;
            if (v27 < 0)
            {
              v24 += 7;
              BOOL v9 = v25++ >= 9;
              if (v9)
              {
                LODWORD(v17) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_62:
        uint64_t v33 = 36;
        goto LABEL_67;
      case 5u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        break;
      case 6u:
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 16;
LABEL_50:
        char v32 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v30 == -1 || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v31 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
      v17 |= (unint64_t)(v31 & 0x7F) << v28;
      if ((v31 & 0x80) == 0) {
        goto LABEL_64;
      }
      v28 += 7;
      BOOL v9 = v29++ >= 9;
      if (v9)
      {
        LODWORD(v17) = 0;
        goto LABEL_66;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_64:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v17) = 0;
    }
LABEL_66:
    uint64_t v33 = 8;
LABEL_67:
    *(_DWORD *)(a1 + v33) = v17;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockStashKeyExchangeResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v28 = 28;
        goto LABEL_54;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v28 = 24;
        goto LABEL_54;
      case 3u:
        uint64_t v22 = PBReaderReadData();
        char v23 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v22;

        continue;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
      v14 |= (unint64_t)(v27 & 0x7F) << v24;
      if ((v27 & 0x80) == 0) {
        goto LABEL_51;
      }
      v24 += 7;
      BOOL v9 = v25++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v28 = 8;
LABEL_54:
    *(_DWORD *)(a1 + v28) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100045F38(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7, double a8)
{
  unint64_t v14 = (unint64_t)fmax(a7, 0.0);
  int v15 = sub_1000461A0(a8);
  id v16 = a6;
  uint64_t v17 = a2;
  char v18 = a1;
  unsigned int v19 = +[NSNumber numberWithUnsignedChar:a3, @"sender"];
  v31[0] = v19;
  v31[1] = &__kCFBooleanTrue;
  v30[1] = @"success";
  v30[2] = @"bytesPerSec";
  uint64_t v20 = +[NSNumber numberWithUnsignedLongLong:v14];
  char v21 = (void *)v20;
  if (v17) {
    CFStringRef v22 = v17;
  }
  else {
    CFStringRef v22 = &stru_1008E7020;
  }
  v31[2] = v20;
  v31[3] = v22;
  v30[3] = @"modelCode";
  v30[4] = @"bundleID";
  if (v18) {
    CFStringRef v23 = v18;
  }
  else {
    CFStringRef v23 = &stru_1008E7020;
  }
  v31[4] = v23;
  v31[5] = &__kCFBooleanFalse;
  v30[5] = @"legacy";
  v30[6] = @"totalBytesBucket";
  char v24 = +[NSString stringWithUTF8String:(&off_1008CAA00)[v15]];
  v31[6] = v24;
  v30[7] = @"discoverabilityLevel";
  unsigned int v25 = +[NSNumber numberWithInteger:a4];
  v31[7] = v25;
  v30[8] = @"fromShareSheet";
  unint64_t v26 = +[NSNumber numberWithUnsignedChar:a5];
  v31[8] = v26;
  char v27 = +[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:9];

  uint64_t v28 = sub_1001AC934(v16, v27);

  unsigned int v29 = airdrop_log();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
    sub_1000477AC();
  }

  SFMetricsLog();
}

uint64_t sub_1000461A0(double a1)
{
  if (a1 < 0.0) {
    return 0;
  }
  if (a1 == 0.0) {
    return 1;
  }
  if (a1 <= 1000000.0) {
    return 2;
  }
  if (a1 <= 5000000.0) {
    return 3;
  }
  if (a1 <= 20000000.0) {
    return 4;
  }
  if (a1 <= 50000000.0) {
    return 5;
  }
  if (a1 <= 100000000.0) {
    return 6;
  }
  if (a1 <= 250000000.0) {
    return 7;
  }
  if (a1 <= 500000000.0) {
    return 8;
  }
  if (a1 <= 1000000000.0) {
    return 9;
  }
  if (a1 <= 5000000000.0) {
    return 10;
  }
  if (a1 <= 1.0e10) {
    return 11;
  }
  if (a1 <= 1.5e10) {
    return 12;
  }
  if (a1 <= 2.0e10) {
    return 13;
  }
  return 14;
}

void sub_1000462E0(void *a1, void *a2, uint64_t a3, __CFError *a4, uint64_t a5, unsigned int a6, void *a7, double a8)
{
  unint64_t v14 = a1;
  int v15 = a2;
  id v31 = a7;
  int v16 = sub_1000461A0(a8);
  if (a4)
  {
    CFIndex Code = CFErrorGetCode(a4);
    Domain = (__CFString *)CFErrorGetDomain(a4);
  }
  else
  {
    CFIndex Code = 0;
    Domain = &stru_1008E7020;
  }
  v32[0] = @"sender";
  unsigned int v19 = Domain;
  uint64_t v20 = +[NSNumber numberWithUnsignedChar:a3];
  v33[0] = v20;
  v33[1] = &__kCFBooleanFalse;
  v32[1] = @"success";
  v32[2] = @"modelCode";
  if (v15) {
    CFStringRef v21 = v15;
  }
  else {
    CFStringRef v21 = &stru_1008E7020;
  }
  if (v14) {
    CFStringRef v22 = v14;
  }
  else {
    CFStringRef v22 = &stru_1008E7020;
  }
  v33[2] = v21;
  v33[3] = v22;
  v32[3] = @"bundleID";
  v32[4] = @"legacy";
  v33[4] = &__kCFBooleanFalse;
  v32[5] = @"errorCode";
  CFStringRef v23 = +[NSNumber numberWithInt:Code];
  v33[5] = v23;
  v33[6] = v19;
  v32[6] = @"errorDomain";
  v32[7] = @"totalBytesBucket";
  char v24 = +[NSString stringWithUTF8String:(&off_1008CAA00)[v16]];
  v33[7] = v24;
  v32[8] = @"discoverabilityLevel";
  unsigned int v25 = +[NSNumber numberWithInteger:a5];
  v33[8] = v25;
  v32[9] = @"fromShareSheet";
  unint64_t v26 = +[NSNumber numberWithUnsignedChar:a6];
  v33[9] = v26;
  char v27 = +[NSDictionary dictionaryWithObjects:v33 forKeys:v32 count:10];

  uint64_t v28 = sub_1001AC934(v31, v27);

  unsigned int v29 = airdrop_log();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
    sub_100047814();
  }

  SFMetricsLog();
}

void sub_100046584(double a1)
{
  v3[0] = @"_cat";
  v3[1] = @"_op";
  v4[0] = @"AD";
  v4[1] = @"TimeSpent";
  _DWORD v3[2] = @"time";
  uint64_t v1 = +[NSNumber numberWithLongLong:(uint64_t)(a1 * 1000.0)];
  _DWORD v4[2] = v1;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
  SFDashboardLogJSON();
}

void sub_10004665C(uint64_t a1, uint64_t a2)
{
  v6[0] = @"_cat";
  v6[1] = @"_op";
  v7[0] = @"AD";
  v7[1] = @"TransferredCount";
  id v6[2] = @"sender";
  uint64_t v3 = +[NSNumber numberWithUnsignedChar:a1];
  v7[2] = v3;
  v6[3] = @"count";
  char v4 = +[NSNumber numberWithInt:a2];
  v7[3] = v4;
  unsigned int v5 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:4];
  SFDashboardLogJSON();
}

void sub_10004675C(__CFString *a1, __CFString *a2, __CFString *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  uint64_t v17 = (int)(a8 * 1000.0);
  uint64_t v18 = (int)(a9 * 1000.0);
  uint64_t v19 = (int)(a10 * 1000.0);
  uint64_t v20 = (int)(a11 * 1000.0);
  uint64_t v21 = (int)(a12 * 1000.0);
  uint64_t v22 = (int)(a13 * 1000.0);
  unsigned int v36 = (int)(a14 * 1000.0);
  unsigned int v37 = (int)(a15 * 1000.0);
  CFStringRef v23 = &stru_1008E7020;
  if (a1) {
    CFStringRef v24 = a1;
  }
  else {
    CFStringRef v24 = &stru_1008E7020;
  }
  v49[0] = @"sid";
  v49[1] = @"browserID";
  if (a2) {
    CFStringRef v25 = a2;
  }
  else {
    CFStringRef v25 = &stru_1008E7020;
  }
  v50[0] = v24;
  v50[1] = v25;
  if (a3) {
    CFStringRef v23 = a3;
  }
  v50[2] = v23;
  v49[2] = @"modelName";
  v49[3] = @"bonjourPTRDiscoveryMs";
  int v41 = a3;
  char v40 = a2;
  uint64_t v39 = a1;
  __int16 v48 = +[NSNumber numberWithInt:v17];
  v50[3] = v48;
  v49[4] = @"bonjourTXTDiscoveryMs";
  v45 = +[NSNumber numberWithInt:v18];
  v50[4] = v45;
  v49[5] = @"bonjourResolveMs";
  uint64_t v43 = +[NSNumber numberWithInt:v19];
  v50[5] = v43;
  v49[6] = @"tcpConnectionMs";
  BOOL v38 = +[NSNumber numberWithInt:v20];
  v50[6] = v38;
  v49[7] = @"tlsHandshakeMs";
  unint64_t v26 = +[NSNumber numberWithInt:v21];
  v50[7] = v26;
  v49[8] = @"idQueryMs";
  char v27 = +[NSNumber numberWithInt:v22];
  v50[8] = v27;
  v49[9] = @"totalDiscoveryWithoutBonjourPTRMs";
  uint64_t v28 = +[NSNumber numberWithInt:v36];
  v50[9] = v28;
  v49[10] = @"totalDiscoveryMs";
  unsigned int v29 = +[NSNumber numberWithInt:v37];
  v50[10] = v29;
  v49[11] = @"verifiableID";
  unint64_t v30 = +[NSNumber numberWithBool:a4];
  v50[11] = v30;
  v49[12] = @"awdlVersion";
  id v31 = +[NSNumber numberWithUnsignedInt:a5];
  v50[12] = v31;
  v49[13] = @"platform";
  char v32 = +[NSNumber numberWithUnsignedInt:a6];
  v50[13] = v32;
  v49[14] = @"rssi";
  uint64_t v33 = +[NSNumber numberWithInt:a7];
  v50[14] = v33;
  uint64_t v34 = +[NSDictionary dictionaryWithObjects:v50 forKeys:v49 count:15];

  unint64_t v35 = airdrop_log();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
    sub_100047888();
  }

  SFMetricsLog();
}

void sub_100046AFC(__CFString *a1, __CFString *a2, __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, unsigned int a11)
{
  CFStringRef v20 = &stru_1008E7020;
  if (a1) {
    CFStringRef v21 = a1;
  }
  else {
    CFStringRef v21 = &stru_1008E7020;
  }
  v38[0] = @"sid";
  v38[1] = @"browserID";
  if (a2) {
    CFStringRef v22 = a2;
  }
  else {
    CFStringRef v22 = &stru_1008E7020;
  }
  v39[0] = v21;
  v39[1] = v22;
  if (a3) {
    CFStringRef v20 = a3;
  }
  v39[2] = v20;
  v38[2] = @"bid";
  v38[3] = @"startTimestamp";
  unint64_t v35 = a3;
  uint64_t v34 = a2;
  CFStringRef v23 = a1;
  CFStringRef v24 = +[NSNumber numberWithUnsignedLongLong:a4];
  v39[3] = v24;
  v38[4] = @"durationMs";
  CFStringRef v25 = +[NSNumber numberWithDouble:a9];
  v39[4] = v25;
  v38[5] = @"firstDiscoveryMs";
  unint64_t v26 = +[NSNumber numberWithDouble:a10];
  v39[5] = v26;
  v38[6] = @"totalPeersDiscovered";
  char v27 = +[NSNumber numberWithInt:a6];
  v39[6] = v27;
  v38[7] = @"maxPeersDiscovered";
  uint64_t v28 = +[NSNumber numberWithInt:a5];
  v39[7] = v28;
  v38[8] = @"transfersInitiated";
  unsigned int v29 = +[NSNumber numberWithInt:a7];
  v39[8] = v29;
  v38[9] = @"transfersCompleted";
  unint64_t v30 = +[NSNumber numberWithInt:a8];
  v39[9] = v30;
  v39[10] = &__kCFBooleanFalse;
  v38[10] = @"legacy";
  v38[11] = @"discoveryLevel";
  id v31 = +[NSNumber numberWithInt:a11];
  v39[11] = v31;
  char v32 = +[NSDictionary dictionaryWithObjects:v39 forKeys:v38 count:12];

  uint64_t v33 = airdrop_log();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    unsigned int v37 = v32;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "AirDropSessionInfo: %{private}@", buf, 0xCu);
  }

  SFMetricsLog();
}

void sub_100046DEC(__CFString *a1, __CFString *a2)
{
  CFStringRef v3 = &stru_1008E7020;
  if (a1) {
    CFStringRef v3 = a1;
  }
  v9[0] = @"sid";
  v9[1] = @"activityType";
  CFStringRef v4 = @"No user action";
  if (a2) {
    CFStringRef v4 = a2;
  }
  v10[0] = v3;
  v10[1] = v4;
  unsigned int v5 = a2;
  unint64_t v6 = a1;
  unint64_t v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];

  char v8 = airdrop_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_1000478F0();
  }

  SFMetricsLog();
}

void sub_100046EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (id)objc_opt_new();
  if (a1) {
    [v9 setObject:a1 forKeyedSubscript:@"Subevent"];
  }
  if (a2) {
    [v9 setObject:a2 forKeyedSubscript:@"State"];
  }
  if ((int)a4 >= 1)
  {
    char v8 = +[NSNumber numberWithInt:a4];
    [v9 setObject:v8 forKeyedSubscript:@"pid"];
  }
  if (a3) {
    [v9 setObject:a3 forKeyedSubscript:@"id"];
  }
  PLLogTimeSensitiveRegisteredEvent();
}

void sub_100046FF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  id v14 = a3;
  id v9 = objc_opt_new();
  int v10 = v9;
  if (a1) {
    [v9 setObject:a1 forKeyedSubscript:@"Subevent"];
  }
  if (a2) {
    [v10 setObject:a2 forKeyedSubscript:@"State"];
  }
  CFStringRef v11 = [v14 UUIDString];

  if (v11)
  {
    char v12 = [v14 UUIDString];
    [v10 setObject:v12 forKeyedSubscript:@"TransferID"];
  }
  if (a5 > 0.0)
  {
    unsigned int v13 = +[NSNumber numberWithDouble:a5];
    [v10 setObject:v13 forKeyedSubscript:@"ContentSize"];
  }
  if (a4) {
    [v10 setObject:a4 forKeyedSubscript:@"Interface"];
  }
  PLLogTimeSensitiveRegisteredEvent();
}

void sub_100047144(void *a1, uint64_t a2)
{
  id v3 = a1;
  CFStringRef v4 = +[NSMutableArray arrayWithArray:a2];
  [v4 insertObject:@"\n" atIndex:0];
  unsigned int v5 = +[NSString stringWithFormat:@"### BEGIN: %@ #########################", v3];
  [v4 insertObject:v5 atIndex:1];

  unint64_t v6 = +[NSString stringWithFormat:@"##### END: %@ #########################", v3];

  [v4 addObject:v6];
  unint64_t v7 = daemon_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    char v8 = [v4 componentsJoinedByString:@"\n"];
    *(_DWORD *)buf = 138412290;
    int v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }
}

void sub_1000472A8(void *a1, void *a2, void *a3, uint64_t a4, double a5)
{
  double v8 = a5 * 1000.0;
  BOOL v9 = a5 < 0.0;
  double v10 = -1.0;
  if (!v9) {
    double v10 = v8;
  }
  uint64_t v11 = (uint64_t)v10;
  v23[0] = @"_cat";
  v23[1] = @"_op";
  v24[0] = @"HS";
  v24[1] = @"TetherSuccess";
  v23[2] = @"discovery";
  char v12 = a3;
  unsigned int v13 = a2;
  id v14 = a1;
  uint64_t v15 = +[NSNumber numberWithBool:a4];
  int v16 = (void *)v15;
  if (v14) {
    CFStringRef v17 = v14;
  }
  else {
    CFStringRef v17 = &stru_1008E7020;
  }
  v24[2] = v15;
  v24[3] = v17;
  v23[3] = @"targetModel";
  v23[4] = @"srcModel";
  if (v13) {
    CFStringRef v18 = v13;
  }
  else {
    CFStringRef v18 = &stru_1008E7020;
  }
  v24[4] = v18;
  v23[5] = @"duration";
  uint64_t v19 = +[NSNumber numberWithLongLong:v11];
  CFStringRef v20 = (void *)v19;
  v23[6] = @"successType";
  CFStringRef v21 = &off_100902670;
  if (v12) {
    CFStringRef v21 = v12;
  }
  v24[5] = v19;
  v24[6] = v21;
  CFStringRef v22 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:7];

  SFDashboardLogJSON();
}

void sub_100047454(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  double v10 = a1;
  uint64_t v11 = a2;
  id v12 = a3;
  v20[0] = @"_cat";
  v20[1] = @"_op";
  v23[0] = @"HS";
  v23[1] = @"TetherFailure";
  v20[2] = @"discovery";
  uint64_t v13 = +[NSNumber numberWithBool:a5];
  id v14 = (void *)v13;
  if (v10) {
    CFStringRef v15 = v10;
  }
  else {
    CFStringRef v15 = &stru_1008E7020;
  }
  v23[2] = v13;
  v23[3] = v15;
  v20[3] = @"targetModel";
  v20[4] = @"srcModel";
  if (v11) {
    CFStringRef v16 = v11;
  }
  else {
    CFStringRef v16 = &stru_1008E7020;
  }
  v23[4] = v16;
  v20[5] = @"errorCode";
  if (v12)
  {
    +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v12 code]);
    unsigned int v5 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
    CFStringRef v24 = v5;
    CFStringRef v21 = @"errorDomain";
    CFStringRef v17 = [v12 domain];
  }
  else
  {
    CFStringRef v24 = &off_100902670;
    CFStringRef v21 = @"errorDomain";
    CFStringRef v17 = &stru_1008E7020;
  }
  CFStringRef v25 = v17;
  CFStringRef v22 = @"errorType";
  CFStringRef v18 = +[NSNumber numberWithInteger:a4];
  unint64_t v26 = v18;
  uint64_t v19 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v20 count:8];
  SFDashboardLogJSON();

  if (v12)
  {
  }
}

void sub_100047648(__CFString *a1, uint64_t a2, double a3)
{
  uint64_t v4 = (uint64_t)(a3 * 1000.0);
  v10[0] = @"_cat";
  v10[1] = @"_op";
  v11[0] = @"HO";
  v11[1] = @"ConnectBack";
  CFStringRef v5 = &stru_1008E7020;
  if (a1) {
    CFStringRef v5 = a1;
  }
  v11[2] = v5;
  void v10[2] = @"bundleID";
  v10[3] = @"duration";
  unint64_t v6 = a1;
  unint64_t v7 = +[NSNumber numberWithLongLong:v4];
  v11[3] = v7;
  void v10[4] = @"bytesTransferred";
  double v8 = +[NSNumber numberWithInteger:a2];
  v11[4] = v8;
  BOOL v9 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:5];

  SFDashboardLogJSON();
}

void sub_100047790(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1000477AC()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "FileTransferSucceeded: %{private}@", v2, v3, v4, v5, v6);
}

void sub_100047814()
{
  sub_10002972C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "FileTransferFailed: %{private}@", v1, 0xCu);
}

void sub_100047888()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "AirDropPeerDiscoveredInfo: %{private}@", v2, v3, v4, v5, v6);
}

void sub_1000478F0()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "ShareSheetActivityType: %@", v2, v3, v4, v5, v6);
}

void sub_100048FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100048FE4(uint64_t a1)
{
  id WeakRetained = (_DWORD **)objc_loadWeakRetained((id *)(a1 + 32));
  int v1 = *WeakRetained[1];
  if (v1 <= 50 && (v1 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [WeakRetained _invalidate];
}

void sub_100049074(uint64_t a1)
{
  id WeakRetained = (_DWORD **)objc_loadWeakRetained((id *)(a1 + 32));
  int v1 = *WeakRetained[1];
  if (v1 <= 50 && (v1 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [WeakRetained _invalidate];
}

uint64_t SDUnlockStashTokenReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadData();
      uint64_t v19 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v18;
    }
    else
    {
      if (v12 == 2)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v15 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0) {
            goto LABEL_42;
          }
          v20 += 7;
          BOOL v9 = v21++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v25 = 8;
      }
      else
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v25 = 24;
      }
      *(_DWORD *)(a1 + v25) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL SDAutoUnlockDecryptionFailedReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
            goto LABEL_37;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
            goto LABEL_40;
          }
        }
        uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + *v18) = v14;
        goto LABEL_41;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0;
    *(unsigned char *)(a1 + 16) |= 1u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
        goto LABEL_38;
      }
      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
        goto LABEL_40;
      }
    }
    uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
LABEL_37:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockLongTermKeyRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadData();
      uint64_t v19 = 8;
    }
    else
    {
      if (v12 != 2)
      {
        if (v12 == 1)
        {
          char v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_33;
            }
            v13 += 7;
            BOOL v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_35;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v15) = 0;
          }
LABEL_35:
          *(_DWORD *)(a1 + 24) = v15;
        }
        else
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        continue;
      }
      uint64_t v18 = PBReaderReadString();
      uint64_t v19 = 16;
    }
    unsigned int v20 = *(void **)(a1 + v19);
    *(void *)(a1 + v19) = v18;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10004C1AC(id a1)
{
  int v1 = objc_alloc_init(SDDeviceAssetMonitor);
  uint64_t v2 = (void *)qword_10097FB78;
  qword_10097FB78 = (uint64_t)v1;
}

void sub_10004C4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10004C518(uint64_t a1)
{
  return _[*(id *)(a1 + 32) stateDump];
}

void sub_10004C520(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained activateIfReady];
}

void sub_10004C560(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained activateIfReady];
}

void sub_10004C6DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_10004C70C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained bluetoothDevicePaired:v3];
}

void sub_10004C768(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained bluetoothDeviceUnpaired:v3];
}

void sub_10004CE58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004CE6C(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  id v8 = a2;
  id v9 = a5;
  int v10 = asset_log();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a4) {
      CFStringRef v11 = @"Fallback ";
    }
    else {
      CFStringRef v11 = &stru_1008E7020;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    char v13 = [v8 bundlePath];
    int v15 = 138413058;
    CFStringRef v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v12;
    __int16 v19 = 2112;
    unsigned int v20 = v13;
    __int16 v21 = 2112;
    id v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@Asset matching query %@ now available at %@ (%@)", (uint8_t *)&v15, 0x2Au);
  }
  if (a4) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = 1;
  }
  [*(id *)(a1 + 40) setState:v14];
}

void sub_10004DC84(id a1)
{
  qword_10097FB88 = (uint64_t)dlopen((const char *)[@"/System/Library/PrivateFrameworks/URLFormatting.framework/URLFormatting" UTF8String], 2);
  if (!qword_10097FB88)
  {
    int v1 = airdrop_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_10004DCE8(v1);
    }
  }
}

void sub_10004DCE8(os_log_t log)
{
  int v1 = 138412290;
  CFStringRef v2 = @"/System/Library/PrivateFrameworks/URLFormatting.framework/URLFormatting";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to softlink: %@", (uint8_t *)&v1, 0xCu);
}

void sub_10004DDC0(id a1)
{
  int v1 = objc_alloc_init(SDAutoUnlockNotificationsManager);
  CFStringRef v2 = (void *)qword_10097FB98;
  qword_10097FB98 = (uint64_t)v1;
}

void sub_10004DF2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004DFAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004E118(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004E438(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    obj = auto_unlock_log();
    if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR)) {
      sub_10004F454((uint64_t)v6, obj, v7, v8, v9, v10, v11, v12);
    }
    goto LABEL_4;
  }
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  obj = v5;
  id v13 = [obj countByEnumeratingWithState:&v43 objects:v48 count:16];
  if (!v13)
  {
LABEL_4:

    goto LABEL_5;
  }
  id v14 = v13;
  id v38 = v5;
  uint64_t v40 = *(void *)v44;
LABEL_8:
  uint64_t v15 = 0;
  while (1)
  {
    if (*(void *)v44 != v40) {
      objc_enumerationMutation(obj);
    }
    CFStringRef v16 = *(void **)(*((void *)&v43 + 1) + 8 * v15);
    __int16 v17 = [v16 userInfo];
    uint64_t v18 = [v17 objectForKeyedSubscript:@"SDPhoneAutoUnlockNotificationUpsellKey"];
    if (v18) {
      break;
    }

LABEL_16:
    if (v14 == (id)++v15)
    {
      id v14 = [obj countByEnumeratingWithState:&v43 objects:v48 count:16];
      if (v14) {
        goto LABEL_8;
      }
      id v5 = v38;
      goto LABEL_4;
    }
  }
  __int16 v19 = (void *)v18;
  unsigned int v20 = [v16 userInfo];
  __int16 v21 = [v20 objectForKeyedSubscript:@"SDPhoneAutoUnlockNotificationUpsellKey"];
  unsigned int v22 = [v21 BOOLValue];
  uint64_t v23 = a1;
  int v24 = *(unsigned __int8 *)(a1 + 40);

  BOOL v25 = v24 == v22;
  a1 = v23;
  if (!v25) {
    goto LABEL_16;
  }

  unint64_t v26 = auto_unlock_log();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Found matching item to clear", buf, 2u);
  }

  uint64_t v28 = *(void **)(*(void *)(v23 + 32) + 8);
  CFStringRef v47 = @"com.apple.sharingd.phone-auto-unlock-upsell";
  unsigned int v29 = +[NSArray arrayWithObjects:&v47 count:1];
  uint64_t v41 = 0;
  [v28 clearPendingFollowUpItemsWithUniqueIdentifiers:v29 error:&v41];
  uint64_t v30 = v41;

  id v5 = v38;
  if (v30)
  {
    obj = auto_unlock_log();
    if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR)) {
      sub_10004F3E4(obj, v31, v32, v33, v34, v35, v36, v37);
    }
    goto LABEL_4;
  }
LABEL_5:
}

void sub_10004EAC0(uint64_t a1)
{
  CFStringRef v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to create Auto Relock Notification", buf, 2u);
  }

  SInt32 error = 0;
  id v3 = objc_opt_new();
  [v3 setObject:*(void *)(a1 + 32) forKeyedSubscript:kCFUserNotificationAlertHeaderKey];
  [v3 setObject:*(void *)(a1 + 40) forKeyedSubscript:kCFUserNotificationAlertMessageKey];
  [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:kCFUserNotificationAlertTopMostKey];
  [v3 setObject:&__kCFBooleanFalse forKeyedSubscript:SBUserNotificationDismissOnLock];
  [v3 setObject:&__kCFBooleanFalse forKeyedSubscript:SBUserNotificationDontDismissOnUnlock];
  qword_1009942A8 = (uint64_t)CFUserNotificationCreate(0, 0.0, 0x23uLL, &error, (CFDictionaryRef)v3);
  if (qword_1009942A8)
  {
    char v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Successfully created Auto Relock Notification", v8, 2u);
    }

    RunLoopSource = CFUserNotificationCreateRunLoopSource(0, (CFUserNotificationRef)qword_1009942A8, (CFUserNotificationCallBack)sub_10004ECAC, 0);
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
    CFRelease(RunLoopSource);
  }
  if (error)
  {
    uint64_t v7 = auto_unlock_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10004F52C(&error, v7);
    }
  }
}

void sub_10004ECAC()
{
  if (qword_1009942A8)
  {
    os_log_t v0 = auto_unlock_log();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Releasing Auto Relock Notification", v1, 2u);
    }

    CFRelease((CFTypeRef)qword_1009942A8);
    qword_1009942A8 = 0;
  }
}

void sub_10004EE0C(uint64_t a1)
{
  CFStringRef v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to create Unlock Request Notification", buf, 2u);
  }

  SInt32 error = 0;
  id v3 = objc_opt_new();
  [v3 setObject:*(void *)(a1 + 32) forKeyedSubscript:kCFUserNotificationAlertHeaderKey];
  [v3 setObject:*(void *)(a1 + 40) forKeyedSubscript:kCFUserNotificationAlertMessageKey];
  [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:kCFUserNotificationAlertTopMostKey];
  [v3 setObject:&__kCFBooleanFalse forKeyedSubscript:SBUserNotificationDismissOnLock];
  [v3 setObject:&__kCFBooleanFalse forKeyedSubscript:SBUserNotificationDontDismissOnUnlock];
  qword_1009942B0 = (uint64_t)CFUserNotificationCreate(0, 0.0, 0x23uLL, &error, (CFDictionaryRef)v3);
  if (qword_1009942B0)
  {
    char v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Successfully created Unlock Request Notification", v8, 2u);
    }

    RunLoopSource = CFUserNotificationCreateRunLoopSource(0, (CFUserNotificationRef)qword_1009942B0, (CFUserNotificationCallBack)sub_10004EFF8, 0);
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
    CFRelease(RunLoopSource);
  }
  if (error)
  {
    uint64_t v7 = auto_unlock_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10004F52C(&error, v7);
    }
  }
}

void sub_10004EFF8()
{
  if (qword_1009942B0)
  {
    os_log_t v0 = auto_unlock_log();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Releasing Auto Relock Notification", v1, 2u);
    }

    CFRelease((CFTypeRef)qword_1009942B0);
    qword_1009942B0 = 0;
  }
}

id sub_10004F1C8(uint64_t a1)
{
  CFStringRef v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notification timer fired", v4, 2u);
  }

  [*(id *)(a1 + 32) dismissNotification];
  return [*(id *)(a1 + 32) notifyObservers:"suggestionNotificationTimedOut"];
}

void sub_10004F3E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004F454(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004F4C0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004F52C(int *a1, NSObject *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to create Auto Relock notification (error: %d)", (uint8_t *)v3, 8u);
}

uint64_t SDAutoUnlockCleanUpAWDLReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10004FCC0()
{
  if (qword_10097FBB0 != -1) {
    dispatch_once(&qword_10097FBB0, &stru_1008CABF0);
  }
  os_log_t v0 = (void *)qword_10097FBB8;

  return v0;
}

void sub_10004FD14(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.airdrop.queue", 0);
  int v2 = (void *)qword_10097FBB8;
  qword_10097FBB8 = (uint64_t)v1;
}

CFStringRef sub_10004FD54(uint64_t a1, int a2)
{
  CFStringRef v3 = (const __CFString *)CFPreferencesCopyValue(@"AirDropID", kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  if (v3) {
    return v3;
  }
  char v4 = +[SDStatusMonitor sharedMonitor];
  unsigned int v5 = [v4 bluetoothAddress];

  if (![v5 length])
  {
    BOOL v9 = airdrop_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BT address not available, force random AirDrop ID", (uint8_t *)&v15, 2u);
    }

    goto LABEL_8;
  }
  if (a2)
  {
LABEL_8:
    int v10 = airdrop_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Random AirDrop ID requested", (uint8_t *)&v15, 2u);
    }

    unint64_t v7 = +[NSUUID UUID];
    char v8 = [v7 UUIDString];
    uint64_t v11 = [v8 substringWithRange:NSMakeRange(24, 12)];
    CFStringRef v3 = [v11 lowercaseString];

    goto LABEL_11;
  }
  unint64_t v6 = sub_1001B23AC(v5);
  unint64_t v7 = SFHexStringForDataEx();

  char v8 = [v7 substringToIndex:12];
  CFStringRef v3 = [v8 lowercaseString];
LABEL_11:

  CFPreferencesSetValue(@"AirDropID", v3, kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  CFPreferencesSynchronize(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  char v12 = airdrop_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    int v15 = 136315138;
    char v16 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Current AirDrop ID is %s", (uint8_t *)&v15, 0xCu);
  }

  return v3;
}

uint64_t sub_10004FFE4()
{
  CFPreferencesSetValue(@"AirDropID", 0, kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);

  return CFPreferencesSynchronize(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
}

void sub_100050064(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  pthread_mutex_lock(&stru_1009663A8);
  unsigned int v5 = (void *)qword_10097FBA8;
  if (!qword_10097FBA8)
  {
    uint64_t v6 = objc_opt_new();
    unint64_t v7 = (void *)qword_10097FBA8;
    qword_10097FBA8 = v6;

    unsigned int v5 = (void *)qword_10097FBA8;
  }
  char v8 = +[NSValue valueWithNonretainedObject:v3];
  [v5 setObject:v4 forKeyedSubscript:v8];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100050180;
  block[3] = &unk_1008CA4B8;
  id v11 = v3;
  id v9 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  pthread_mutex_unlock(&stru_1009663A8);
}

void sub_100050180(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"com.apple.sharingd.AirDropPeerChanged" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_1000501E4(void *a1)
{
  id v1 = a1;
  pthread_mutex_lock(&stru_1009663A8);
  id v2 = (void *)qword_10097FBA8;
  id v3 = +[NSValue valueWithNonretainedObject:v1];
  [v2 removeObjectForKey:v3];

  if ([(id)qword_10097FBA8 count])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000502D4;
    block[3] = &unk_1008CA4B8;
    id v5 = v1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  pthread_mutex_unlock(&stru_1009663A8);
}

void sub_1000502D4(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"com.apple.sharingd.AirDropPeerChanged" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_100050338(const void *a1, void *a2)
{
  id value = a2;
  pthread_mutex_lock(&stru_1009663E8);
  Mutable = (__CFDictionary *)qword_10097FBC0;
  if (!qword_10097FBC0)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, 0);
    qword_10097FBC0 = (uint64_t)Mutable;
  }
  CFDictionarySetValue(Mutable, a1, value);
  pthread_mutex_unlock(&stru_1009663E8);
}

id sub_1000503C4(const void *a1)
{
  pthread_mutex_lock(&stru_1009663E8);
  Value = (void *)qword_10097FBC0;
  if (qword_10097FBC0) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_10097FBC0, a1);
  }
  id v3 = Value;
  pthread_mutex_unlock(&stru_1009663E8);

  return v3;
}

uint64_t sub_10005042C(const void *a1)
{
  pthread_mutex_lock(&stru_1009663E8);
  if (qword_10097FBC0) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10097FBC0, a1);
  }

  return pthread_mutex_unlock(&stru_1009663E8);
}

BOOL sub_100050484(void *a1, void *a2, unsigned char *a3)
{
  id v5 = a1;
  id v6 = [v5 count];
  unint64_t v7 = (void *)SFNodeCopyModel();
  id v8 = [v7 length];
  id v9 = sub_1000505C0();
  if (!v6)
  {
    uint64_t v11 = 0;
LABEL_12:
    BOOL v15 = v11 != 0;
    goto LABEL_15;
  }
  __int16 v17 = a3;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  while (1)
  {
    char v12 = [v5 objectAtIndexedSubscript:v10];

    if (v12 != a2) {
      break;
    }
LABEL_9:
    if (v6 == (id)++v10) {
      goto LABEL_12;
    }
  }
  unsigned int v13 = sub_1000505C0();
  if (![v13 intersectsSet:v9])
  {
LABEL_8:

    goto LABEL_9;
  }
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v14 = (void *)SFNodeCopyModel();
  if (![v14 isEqual:v7])
  {
    ++v11;

    goto LABEL_8;
  }
  unsigned char *v17 = 1;

LABEL_14:
  BOOL v15 = 1;
LABEL_15:

  return v15;
}

id sub_1000505C0()
{
  os_log_t v0 = +[SDStatusMonitor sharedMonitor];
  id v1 = (void *)SFNodeCopyAppleID();
  if (v1
    && ([v0 verifiedIdentityForAppleID:v1],
        id v2 = objc_claimAutoreleasedReturnValue(),
        v2,
        v2))
  {
    id v3 = (void *)SFNodeCopyEmailHash();
    id v4 = (void *)SFNodeCopyPhoneHash();
    id v5 = [v0 contactsForEmailHash:v3 phoneHash:v4];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

uint64_t sub_10005068C()
{
  os_log_t v0 = +[SDStatusMonitor sharedMonitor];
  id v1 = [v0 myAppleIDCommonName];
  id v2 = (void *)SFNodeCopyAppleID();
  id v3 = [v0 verifiedIdentityForAppleID:v2];

  if (v3)
  {
    id v4 = [v3 accountIdentifier];
  }
  else
  {
    id v4 = 0;
  }
  if ([v1 length]
    && [v4 length]
    && ([v1 isEqualToString:v4] & 1) != 0)
  {
    uint64_t v5 = 1;
  }
  else
  {
    id v6 = (void *)SFNodeCopyKinds();
    if ([v6 containsObject:kSFNodeKindRapport]) {
      uint64_t v5 = (uint64_t)[v6 containsObject:kSFNodeKindMe];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  return v5;
}

id sub_1000507A4()
{
  os_log_t v0 = sub_1000505C0();
  id v1 = sub_1001AC630(v0);

  return v1;
}

id sub_1000507F0()
{
  os_log_t v0 = sub_1000505C0();
  id v1 = sub_100050854(v0);
  id v2 = [v1 identifier];

  return v2;
}

id sub_100050854(void *a1)
{
  id v1 = a1;
  id v2 = +[SDStatusMonitor sharedMonitor];
  id v3 = [v2 contactWithPreferredIdentifierForContacts:v1];

  return v3;
}

void sub_1000508C4(void *a1, void *a2)
{
  id v11 = a2;
  char v12 = 0;
  int v3 = sub_10005068C();
  id v4 = (void *)SFNodeCopyDisplayName();
  uint64_t v5 = (void *)SFNodeCopyComputerName();
  if (([v4 isEqualToString:v5] & 1) != 0
    || (sub_100050484(v11, a1, &v12) | v3) != 1
    || (+[SDStatusMonitor sharedMonitor],
        id v6 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v7 = [v6 coalesceMe],
        v6,
        (v7 & 1) != 0))
  {
    id v8 = 0;
LABEL_5:
    id v9 = v8;
    goto LABEL_6;
  }
  id v8 = v5;
  if (v12) {
    goto LABEL_5;
  }
  id v9 = (id)SFNodeCopyModel();
LABEL_6:
  uint64_t v10 = v9;
  SFNodeSetSecondaryName();
  if (v3) {
    SFNodeAddKind();
  }
  else {
    SFNodeRemoveKind();
  }
}

void *sub_1000509EC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a1;
  id v7 = a4;
  if (v7)
  {
    id v8 = v7;
    id v9 = 0;
  }
  else
  {
    id v8 = +[SDXPCHelperConnection makeActivatedConnection];
    id v9 = v8;
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  _DWORD v17[2] = sub_100050B70;
  v17[3] = &unk_1008CA4B8;
  id v10 = v9;
  id v18 = v10;
  id v11 = objc_retainBlock(v17);
  char v12 = [v8 monogramImageDataForContact:v6 style:2 diameter:1 monogramsAsFlatImages:a3 isContactImage:sub_100053170()];
  unsigned int v13 = v12;
  if (v12)
  {
    id v14 = v12;
  }
  else
  {
    BOOL v15 = airdrop_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1000533BC();
    }
  }
  ((void (*)(void *))v11[2])(v11);

  return v13;
}

void sub_100050B48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id sub_100050B70(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void *sub_100050B78(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    id v11 = 0;
  }
  else
  {
    id v10 = +[SDXPCHelperConnection makeActivatedConnection];
    id v11 = v10;
  }
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100050D58;
  v20[3] = &unk_1008CA4B8;
  id v12 = v11;
  id v21 = v12;
  unsigned int v13 = objc_retainBlock(v20);
  id v14 = [v10 copyConversationIdentityImageIconDataForImage:v7 forConversationIdentifier:v8 style:2 diameter:1 monogramsAsFlatImages:a3 isContactImage:sub_100053170()];
  BOOL v15 = v14;
  if (v14)
  {
    id v16 = v14;
  }
  else
  {
    __int16 v17 = airdrop_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = [v7 _uri];
      sub_100053424(v18, buf, v17);
    }
  }
  ((void (*)(void *))v13[2])(v13);

  return v15;
}

void sub_100050D20(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id sub_100050D58(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_100050D60(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = [v3 monogramImagesForMultipleContacts:v4 style:2 diameter:1 monogramsAsFlatImages:sub_100053170()];

  return v5;
}

id sub_100050DD4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v4)
  {
    id v5 = v4;
    id v6 = 0;
  }
  else
  {
    id v5 = +[SDXPCHelperConnection makeActivatedConnection];
    id v6 = v5;
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100050F54;
  v12[3] = &unk_1008CA4B8;
  id v7 = v6;
  id v13 = v7;
  id v8 = objc_retainBlock(v12);
  id v9 = [v5 groupMonogramImageDataForContacts:v3 style:2 diameter:1 monogramsAsFlatImages:1 processOppositeBackgroundStyle:sub_100053170()];
  if (!v9)
  {
    id v10 = airdrop_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10005347C();
    }
  }
  ((void (*)(void *))v8[2])(v8);

  return v9;
}

void sub_100050F30(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id sub_100050F54(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_100050F5C(void *a1, void *a2, void *a3, int a4)
{
  id v20 = a2;
  id v7 = a3;
  id v8 = (const void *)SFNodeCopyComputerName();
  id v9 = sub_1000505C0();
  id v10 = sub_100050854(v9);
  id v11 = v10;
  if (!v10) {
    goto LABEL_4;
  }
  id v12 = [v10 identifier];
  SFNodeSetContactIdentifier();

  sub_1001AC630(v9);
  SFNodeSetContactIdentifiers();
  id v13 = [v11 givenName];
  SFNodeSetFirstName();

  id v14 = [v11 familyName];
  SFNodeSetLastName();

  BOOL v15 = [v11 nickname];
  SFNodeSetNickName();

  id v16 = objc_alloc_init((Class)CNContactFormatter);
  id v17 = [v11 mutableCopy];
  [v17 setMiddleName:&stru_1008E7020];
  id v18 = [v16 stringFromContact:v17];

  if (v18)
  {
    SFNodeSetDisplayName();
    sub_1000508C4(a1, v20);
    SFNodeRemoveKind();
    CFRelease(v18);
  }
  else
  {
LABEL_4:
    SFNodeAddKind();
    SFNodeSetDisplayName();
    SFNodeSetSecondaryName();
  }
  sub_100051178((uint64_t)a1, v19, a4, 0);

  if (v8) {
    CFRelease(v8);
  }
}

void sub_100051178(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v6 = a4;
  SFNodeRemoveKind();
  id v7 = (void *)SFNodeCopyKinds();
  if ([v7 containsObject:kSFNodeKindMe])
  {
    id v8 = (void *)SFNodeCopyModel();
    if (([v8 hasPrefix:@"iPhone"] & 1) == 0
      && ([v8 hasPrefix:@"iPad"] & 1) == 0
      && ([v8 hasPrefix:@"iPad mini"] & 1) == 0
      && ([v8 hasPrefix:@"iPod"] & 1) == 0
      && ([v8 hasPrefix:@"MacBook Pro"] & 1) == 0
      && ([v8 hasPrefix:@"MacBook Air"] & 1) == 0
      && ([v8 hasPrefix:@"Mac Pro"] & 1) == 0
      && ([v8 hasPrefix:@"iMac Pro"] & 1) == 0
      && ([v8 hasPrefix:@"iMac"] & 1) == 0
      && ([v8 hasPrefix:@"Mac mini"] & 1) == 0
      && ([v8 hasPrefix:@"Mac Studio"] & 1) == 0)
    {
      unsigned int v29 = airdrop_log();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        sub_1000534E4((uint64_t)v8, a1, v29);
      }
    }
    SFDeviceImageFromImageName();
    id v30 = objc_claimAutoreleasedReturnValue();
    if ([v30 CGImage])
    {
      [v30 CGImage];
      uint64_t v31 = SFDataFromCGImage();
      if (v31)
      {
        uint64_t v32 = (const void *)v31;
        SFNodeSetIconData();
        CFRelease(v32);
      }
    }

    goto LABEL_53;
  }
  id v9 = +[SDStatusMonitor sharedMonitor];
  id v10 = (void *)SFNodeCopyEmailHash();
  uint64_t v11 = SFNodeCopyPhoneHash();
  id v38 = (void *)SFNodeCopyRealName();
  uint64_t v36 = (void *)v11;
  uint64_t v37 = [v9 contactsForEmailHash:v10 phoneHash:v11];
  id v12 = [v9 contactWithPreferredIdentifierForContacts:];
  id v13 = v12;
  if (v12)
  {
    uint64_t v35 = v10;
    unsigned __int8 v39 = 0;
    CFDataRef v14 = (const __CFData *)sub_1000509EC(v12, 0, (uint64_t)&v39, 0);
    BOOL v15 = airdrop_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      if (v14) {
        CFIndex Length = CFDataGetLength(v14);
      }
      else {
        CFIndex Length = -1;
      }
      *(_DWORD *)buf = 138413058;
      uint64_t v41 = v38;
      __int16 v42 = 2048;
      CFIndex v43 = Length;
      __int16 v44 = 1024;
      int v45 = a3;
      __int16 v46 = 1024;
      int v47 = v39;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Icon for node with id = %@: iconDataSize = %ld preferVibrant = %d isContactImage = %d", buf, 0x22u);
    }

    if (!v14 || v39)
    {
      if (!v14)
      {
LABEL_24:
        id v10 = v35;
        id v17 = v36;
        goto LABEL_25;
      }
    }
    else
    {
      SFNodeAddKind();
    }
    id v18 = sub_1000D8A7C(v14);
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v33 = v7;
      id v34 = v6;
      signed int Width = CGImageGetWidth(v18);
      signed int Height = CGImageGetHeight(v19);
      unsigned int v22 = +[SDStatusMonitor sharedMonitor];
      signed int v23 = [v22 minPersonImageSize];

      CFRelease(v19);
      if (v23 > Width || v23 > Height)
      {
        int v24 = airdrop_log();
        id v7 = v33;
        id v6 = v34;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v41 = v38;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Icon too small for node with id = %@", buf, 0xCu);
        }

        CFRelease(v14);
        CFDataRef v14 = 0;
      }
      else
      {
        id v7 = v33;
        id v6 = v34;
      }
    }
    goto LABEL_24;
  }
  id v16 = airdrop_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v41 = v38;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "No contact for node with id = %@", buf, 0xCu);
  }

  CFDataRef v14 = 0;
  id v17 = v36;
LABEL_25:

  if (v14)
  {
LABEL_28:
    SFNodeSetIconData();
    CFRelease(v14);
    goto LABEL_53;
  }
  CFDataRef v25 = (const __CFData *)sub_1000509EC(0, 0, 0, v6);
  if (v25)
  {
    CFDataRef v14 = v25;
    SFNodeAddKind();
    goto LABEL_28;
  }
  unint64_t v26 = airdrop_log();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    char v27 = (void *)SFNodeCopyRealName();
    *(_DWORD *)buf = 138412290;
    uint64_t v41 = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "No icon data for node with id = %@", buf, 0xCu);
  }
LABEL_53:
}

__CFArray *sub_100051754(__SecTrust *a1)
{
  if (a1)
  {
    CFErrorRef error = 0;
    if (SecTrustEvaluateWithError(a1, &error)
      || (SecTrustResultType result = kSecTrustResultInvalid,
          SecTrustGetTrustResult(a1, &result),
          result == kSecTrustResultRecoverableTrustFailure))
    {
      uint64_t CertificateCount = SecTrustGetCertificateCount(a1);
      if (CertificateCount >= 1)
      {
        Mutable = CFArrayCreateMutable(0, CertificateCount, &kCFTypeArrayCallBacks);
        for (CFIndex i = 0; i != CertificateCount; ++i)
        {
          SecCertificateRef CertificateAtIndex = SecTrustGetCertificateAtIndex(a1, i);
          CFArrayAppendValue(Mutable, CertificateAtIndex);
        }
LABEL_18:
        if (error) {
          CFRelease(error);
        }
        return Mutable;
      }
      CFDataRef v14 = airdrop_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_1000535CC(CertificateCount, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    else
    {
      id v21 = airdrop_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_1000536A8((uint64_t)&result, v21, v22, v23, v24, v25, v26, v27);
      }

      CFDataRef v14 = airdrop_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100053638((uint64_t)&error, v14, v28, v29, v30, v31, v32, v33);
      }
    }

    Mutable = 0;
    goto LABEL_18;
  }
  id v6 = airdrop_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_100053594(v6, v7, v8, v9, v10, v11, v12, v13);
  }

  return 0;
}

uint64_t sub_1000518D0(void *a1, __SecTrust *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  uint64_t v10 = a3;
  if (v9)
  {
    uint64_t v11 = +[SDStatusMonitor sharedMonitor];
    id v42 = 0;
    unsigned __int8 v12 = [v11 verifyAndParseValidationRecordData:v9 intoDictionary:&v42];
    uint64_t v13 = v42;
    CFDataRef v14 = v13;
    if (v12)
    {
      if (v13)
      {
        uint64_t v15 = [v13 objectForKeyedSubscript:@"altDsID"];
        uint64_t v16 = v15;
        if (v15)
        {
          uint64_t v17 = v15;
        }
        else
        {
          uint64_t v17 = [v14 objectForKeyedSubscript:@"encDsID"];
        }
        uint64_t v19 = v17;

        if ([v19 length])
        {
          uint64_t v20 = sub_100051754(a2);
          if ([v20 count])
          {
            if (!SFAppleIDVerifyCertificateChainSync())
            {
              uint64_t v23 = airdrop_log();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                sub_1000538BC();
              }
              uint64_t v18 = 0;
              goto LABEL_39;
            }
            [v20 objectAtIndexedSubscript:0];

            int v21 = SFAppleIDCommonNameForCertificate();
            uint64_t v22 = 0;
            uint64_t v23 = v22;
            if (v21)
            {
              uint64_t v24 = airdrop_log();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
                sub_100053850();
              }
            }
            else
            {
              if ([v22 hasSuffix:v19])
              {
                uint64_t v36 = v23;
                uint64_t v26 = [v14 objectForKeyedSubscript:@"ValidatedEmailHashes"];
                uint64_t v27 = [v14 objectForKeyedSubscript:@"ValidatedPhoneHashes"];
                sub_100051E60(v26);
                id v41 = (id)objc_claimAutoreleasedReturnValue();
                unsigned __int8 v39 = (void *)v27;
                uint64_t v28 = (void *)v27;
                uint64_t v24 = v26;
                sub_100051E60(v28);
                id v40 = (id)objc_claimAutoreleasedReturnValue();
                log = airdrop_log();
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                {
                  SFShortHashArrayDescription();
                  os_log_t v34 = (os_log_t)objc_claimAutoreleasedReturnValue();
                  uint64_t v29 = SFShortHashArrayDescription();
                  *(_DWORD *)buf = 138478083;
                  os_log_t v44 = v34;
                  __int16 v45 = 2113;
                  uint64_t v46 = v29;
                  uint64_t v30 = (void *)v29;
                  _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "Hashes in validation record: Email=[%{private}@], Phone=[%{private}@]", buf, 0x16u);
                }
                uint64_t v31 = [v11 emailOrPhoneForEmailHash:v41 phoneHash:v40];
                uint64_t v23 = v36;
                os_log_t loga = v31;
                if (v31)
                {
                  sub_100051FE4(v20, v10, v31);
                }
                else
                {
                  uint64_t v35 = airdrop_log();
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Hashes in validation record are not recognized.", buf, 2u);
                  }
                }
                if (a4) {
                  *a4 = v41;
                }
                if (a5) {
                  *a5 = v40;
                }
                uint64_t v33 = airdrop_log();
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  os_log_t v44 = v10;
                  _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Validation record data is accepted for %@", buf, 0xCu);
                }

                uint64_t v18 = 1;
                goto LABEL_38;
              }
              uint64_t v24 = airdrop_log();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412802;
                os_log_t v44 = v19;
                __int16 v45 = 2112;
                uint64_t v46 = (uint64_t)v23;
                __int16 v47 = 2112;
                __int16 v48 = v10;
                _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%@ doesn't match %@ for %@", buf, 0x20u);
              }
            }
            uint64_t v18 = 0;
LABEL_38:

LABEL_39:
            goto LABEL_40;
          }
          uint64_t v25 = airdrop_log();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_1000537E8();
          }
        }
        else
        {
          uint64_t v20 = airdrop_log();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            sub_100053780();
          }
        }
        uint64_t v18 = 0;
LABEL_40:

        goto LABEL_41;
      }
      uint64_t v19 = airdrop_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100053718();
      }
    }
    else
    {
      uint64_t v19 = airdrop_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100053928();
      }
    }
    uint64_t v18 = 0;
LABEL_41:

    goto LABEL_42;
  }
  CFDataRef v14 = airdrop_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    os_log_t v44 = v10;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Validation record data for %@ not available", buf, 0xCu);
  }
  uint64_t v18 = 0;
LABEL_42:

  return v18;
}

id sub_100051E60(void *a1)
{
  id v1 = a1;
  id v2 = (char *)[v1 count];
  if (v2)
  {
    id v3 = v2;
    id v4 = 0;
    id v5 = 0;
    id v6 = v2 - 1;
    do
    {
      if (!v5) {
        id v5 = objc_opt_new();
      }
      uint64_t v7 = [v1 objectAtIndexedSubscript:v4];
      unint64_t v17 = 0;
      char v16 = 0;
      id v8 = v7;
      id v9 = (char *)[v8 UTF8String];
      unint64_t v10 = (unint64_t)[v8 length];
      uint64_t v11 = +[NSMutableData dataWithCapacity:v10 >> 1];
      if (v10)
      {
        for (unint64_t i = 0; i < v10; i += 2)
        {
          *(_WORD *)__str = *(_WORD *)&v9[i];
          unint64_t v17 = strtoul(__str, 0, 16);
          [v11 appendBytes:&v17 length:1];
        }
      }
      if (v11)
      {
        uint64_t v13 = [v11 base64EncodedStringWithOptions:0];
      }
      else
      {
        uint64_t v13 = 0;
      }

      if (v13) {
        [v5 appendString:v13];
      }
      if (v4 != v6) {
        [v5 appendString:@","];
      }

      ++v4;
    }
    while (v4 != v3);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_100051FE4(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = +[SDStatusMonitor sharedMonitor];
  id v9 = +[SDAppleIDAgent sharedAgent];
  id v15 = 0;
  unint64_t v10 = [v9 verifiedIdentityForCertificateChain:v5 emailOrPhone:v7 error:&v15];
  id v11 = v15;

  if (v10)
  {
    unsigned __int8 v12 = airdrop_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412803;
      id v17 = v6;
      __int16 v18 = 2160;
      uint64_t v19 = 1752392040;
      __int16 v20 = 2113;
      id v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Got verified identity for %@ (%{private, mask.hash}@)", buf, 0x20u);
    }

    uint64_t v13 = [v5 objectAtIndexedSubscript:0];

    [v8 cacheIdentity:v10];
    [v8 cacheCertificate:v13 forRealName:v6];
  }
  else
  {
    [v11 code];
    SFMetricsLogUnexpectedEvent();
    CFDataRef v14 = airdrop_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138413059;
      id v17 = v6;
      __int16 v18 = 2160;
      uint64_t v19 = 1752392040;
      __int16 v20 = 2113;
      id v21 = v7;
      __int16 v22 = 2112;
      id v23 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "verifiedIdentityForCertificateChain failed for %@ (%{private, mask.hash}@) with error %@", buf, 0x2Au);
    }
  }
}

id sub_10005221C(void *a1, __SecTrust *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  id v9 = +[SDStatusMonitor sharedMonitor];
  if (a3) {
    id v10 = (id)SFNodeCopyRealName();
  }
  else {
    id v10 = v8;
  }
  id v11 = v10;
  id v22 = 0;
  id v23 = 0;
  sub_1000518D0(v7, a2, v10, &v23, &v22);
  id v12 = v23;
  id v13 = v22;
  CFDataRef v14 = [v9 emailOrPhoneForEmailHash:v12 phoneHash:v13];
  if (!v14)
  {
    char v16 = airdrop_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Contact information not available for %@", buf, 0xCu);
    }
    goto LABEL_18;
  }
  id v15 = [v9 verifiedIdentityForAppleID:v14];
  char v16 = v15;
  if (!v15)
  {
    uint64_t v19 = airdrop_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_100053990((uint64_t)v14, v19);
    }

LABEL_18:
    id v18 = 0;
    goto LABEL_19;
  }
  if (a3)
  {
    id v17 = [v15 emailOrPhone];
    if (!v17)
    {
      id v21 = airdrop_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100053A1C();
      }
    }
    SFNodeSetAppleID();
    SFNodeSetEmailHash();
    SFNodeSetPhoneHash();
  }
  id v18 = v14;
LABEL_19:

  return v18;
}

id sub_100052470(void *a1, __SecTrust *a2, void *a3)
{
  return sub_10005221C(a1, a2, 0, a3);
}

id sub_10005247C(void *a1, __SecTrust *a2, uint64_t a3)
{
  return sub_10005221C(a1, a2, a3, 0);
}

unint64_t sub_100052484()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = (unint64_t)[v0 longValue] & 1;

  return v1;
}

unint64_t sub_1000524B8()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = ((unint64_t)[v0 longValue] >> 1) & 1;

  return v1;
}

unint64_t sub_1000524EC()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = ((unint64_t)[v0 longValue] >> 3) & 1;

  return v1;
}

unint64_t sub_100052520()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = ((unint64_t)[v0 longValue] >> 2) & 1;

  return v1;
}

unint64_t sub_100052554()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = ((unint64_t)[v0 longValue] >> 6) & 1;

  return v1;
}

unint64_t sub_100052588()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  if (([v0 longValue] & 0x80) != 0) {
    unint64_t v1 = 1;
  }
  else {
    unint64_t v1 = sub_1000524EC();
  }

  return v1;
}

unint64_t sub_1000525D4()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = ((unint64_t)[v0 longValue] >> 9) & 1;

  return v1;
}

CFStringRef sub_100052608(const __CFString *result)
{
  if (result) {
    return (const __CFString *)(CFStringGetLength(result) == 12);
  }
  return result;
}

void sub_100052630(const __CFDictionary *a1, CFDictionaryRef theDict)
{
  id v3 = (const void *)kSFOperationFilesCopiedKey;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kSFOperationFilesCopiedKey);
  if (Value)
  {
    CFNumberRef v5 = Value;
    CFIndex valuePtr = 0;
    if (CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr))
    {
      CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(a1, kSFOperationFilesKey);
      if (v6)
      {
        CFIndex Count = CFArrayGetCount(v6);
        if (valuePtr >= Count)
        {
          CFIndex v25 = Count - 1;
          CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt64Type, &v25);
          if (v23)
          {
            CFNumberRef v24 = v23;
            CFDictionarySetValue(a1, v3, v23);
            CFRelease(v24);
          }
        }
        else
        {
          CFDictionarySetValue(a1, v3, v5);
        }
        return;
      }
      id v8 = airdrop_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100053ABC(v8, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else
    {
      id v8 = airdrop_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100053A84(v8, v9, v10, v11, v12, v13, v14, v15);
      }
    }

    return;
  }

  CFDictionaryRemoveValue(a1, v3);
}

uint64_t sub_100052784()
{
  IOPMAssertionID AssertionID = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"FrameworkBundleID", @"com.apple.Sharing");
  CFDictionarySetValue(Mutable, @"AssertType", @"PreventUserIdleSystemSleep");
  CFDictionarySetValue(Mutable, @"AssertName", @"AirDrop");
  uint64_t v1 = IOPMAssertionCreateWithProperties(Mutable, &AssertionID);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = airdrop_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100053AF4(v2, v3, v4, v5, v6, v7, v8, v9);
    }

    IOPMAssertionID AssertionID = 0;
  }
  CFRelease(Mutable);
  return AssertionID;
}

BOOL sub_10005286C()
{
  id v0 = objc_alloc_init((Class)ACAccountStore);
  uint64_t v1 = sub_1001B22F4(v0);
  if (!v1)
  {
    if (qword_1009942B8)
    {
      uint64_t v2 = airdrop_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Missing Apple ID already presented", buf, 2u);
      }
    }
    else
    {
      SInt32 error = 0;
      uint64_t v2 = objc_opt_new();
      [v2 setObject:&__kCFBooleanFalse forKeyedSubscript:SBUserNotificationDismissOnLock];
      [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:SBUserNotificationDontDismissOnUnlock];
      [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:kCFUserNotificationAlertTopMostKey];
      id v3 = SFLocalizedStringForKey();
      [v2 setObject:v3 forKeyedSubscript:kCFUserNotificationAlertHeaderKey];

      uint64_t v4 = SFLocalizedStringForKey();
      [v2 setObject:v4 forKeyedSubscript:kCFUserNotificationAlertMessageKey];

      uint64_t v5 = SFLocalizedStringForKey();
      [v2 setObject:v5 forKeyedSubscript:kCFUserNotificationDefaultButtonTitleKey];

      uint64_t v6 = SFLocalizedStringForKey();
      [v2 setObject:v6 forKeyedSubscript:kCFUserNotificationAlternateButtonTitleKey];

      uint64_t v7 = +[NSBundle bundleForClass:objc_opt_class()];
      uint64_t v8 = [v7 resourceURL];
      [v2 setObject:v8 forKeyedSubscript:kCFUserNotificationLocalizationURLKey];

      CFUserNotificationRef v9 = CFUserNotificationCreate(0, 0.0, 3uLL, &error, (CFDictionaryRef)v2);
      qword_1009942B8 = (uint64_t)v9;
      SInt32 v10 = error;
      uint64_t v11 = airdrop_log();
      uint64_t v12 = v11;
      if (v10 || !v9)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_100053B60((uint64_t)&error, v12, v15, v16, v17, v18, v19, v20);
        }

        if (qword_1009942B8)
        {
          CFRelease((CFTypeRef)qword_1009942B8);
          qword_1009942B8 = 0;
        }
      }
      else
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Present missing Apple ID alert", v22, 2u);
        }

        RunLoopSource = CFUserNotificationCreateRunLoopSource(0, (CFUserNotificationRef)qword_1009942B8, (CFUserNotificationCallBack)sub_1000531C8, 0);
        Main = CFRunLoopGetMain();
        CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
        CFRelease(RunLoopSource);
      }
    }
  }
  return v1 == 0;
}

id sub_100052B94()
{
  id v0 = +[SDStatusMonitor sharedMonitor];
  id v1 = [v0 wirelessCarPlay];

  if (v1 && !qword_1009942C0)
  {
    v18[0] = SBUserNotificationDismissOnLock;
    v18[1] = SBUserNotificationDontDismissOnUnlock;
    SInt32 error = 0;
    v19[0] = &__kCFBooleanFalse;
    v19[1] = &__kCFBooleanTrue;
    v19[2] = &__kCFBooleanTrue;
    v18[2] = kCFUserNotificationAlertTopMostKey;
    v18[3] = kCFUserNotificationAlertHeaderKey;
    uint64_t v2 = SFLocalizedStringForKey();
    v19[3] = v2;
    v18[4] = kCFUserNotificationAlertMessageKey;
    id v3 = SFLocalizedStringForKey();
    v19[4] = v3;
    v18[5] = kCFUserNotificationDefaultButtonTitleKey;
    uint64_t v4 = SFLocalizedStringForKey();
    void v19[5] = v4;
    CFDictionaryRef v5 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:6];

    uint64_t v6 = CFUserNotificationCreate(0, 0.0, 3uLL, &error, v5);
    qword_1009942C0 = (uint64_t)v6;
    if (error || !v6)
    {
      CFUserNotificationRef v9 = airdrop_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100053BD0((uint64_t)&error, v9, v10, v11, v12, v13, v14, v15);
      }

      if (qword_1009942C0)
      {
        CFRelease((CFTypeRef)qword_1009942C0);
        qword_1009942C0 = 0;
      }
    }
    else
    {
      RunLoopSource = CFUserNotificationCreateRunLoopSource(0, v6, (CFUserNotificationCallBack)sub_100053358, 0);
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
      CFRelease(RunLoopSource);
    }
  }
  return v1;
}

id sub_100052DC0(int a1, const void *a2)
{
  uint64_t v4 = objc_opt_new();
  switch(a1)
  {
    case -8:
      CFStringRef v5 = @"System Sleep";
      goto LABEL_13;
    case -7:
      if (SFIsGreenTeaDevice()) {
        CFStringRef v5 = @"WLAN Disabled";
      }
      else {
        CFStringRef v5 = @"WiFi Disabled";
      }
      goto LABEL_13;
    case -6:
      CFStringRef v5 = @"File Not Readable";
      goto LABEL_11;
    case -5:
      CFStringRef v5 = @"Invalid File";
      goto LABEL_13;
    case -4:
      CFStringRef v5 = @"No Files";
      goto LABEL_13;
    case -3:
      CFStringRef v5 = @"Authentication Failed";
LABEL_11:
      uint64_t v6 = (uint64_t)a2;
      goto LABEL_14;
    case -2:
      CFStringRef v5 = @"Not Enough Space";
      goto LABEL_13;
    default:
      CFStringRef v5 = @"Transfer Failed 1";
LABEL_13:
      uint64_t v6 = 0;
LABEL_14:
      uint64_t v7 = sub_100052F64(v5, v6);
      if (a2)
      {
        CFTypeID v8 = CFGetTypeID(a2);
        if (v8 == CFErrorGetTypeID()) {
          [v4 setObject:a2 forKeyedSubscript:NSUnderlyingErrorKey];
        }
      }
      if (v7) {
        [v4 setObject:v7 forKeyedSubscript:NSLocalizedDescriptionKey];
      }
      CFUserNotificationRef v9 = +[NSError errorWithDomain:kCFErrorDomainSFOperation code:a1 userInfo:v4];

      return v9;
  }
}

__CFString *sub_100052F64(const __CFString *a1, uint64_t a2)
{
  id v3 = (__CFString *)sub_1000D8224(a1);
  if (v3 && a2)
  {
    CFStringRef v4 = CFStringCreateWithFormat(0, 0, v3, a2);
    CFRelease(v3);
    id v3 = (__CFString *)v4;
  }

  return v3;
}

BOOL sub_100052FD4(void *a1)
{
  id v1 = a1;
  id v2 = [v1 fileSystemRepresentation];
  if (v2)
  {
    id v3 = +[NSString stringWithUTF8String:v2];
    if ([v3 length]
      && [v3 hasPrefix:@"./"]
      && ([v3 hasSuffix:@"/.."] & 1) == 0)
    {
      unsigned int v4 = [v3 containsString:@"../"];
    }
    else
    {
      unsigned int v4 = 1;
    }
  }
  else
  {
    unsigned int v4 = 1;
  }

  return v4 == 0;
}

BOOL sub_1000530AC(void *a1)
{
  id v1 = a1;
  id v2 = [v1 fileSystemRepresentation];
  if (v2)
  {
    id v3 = +[NSString stringWithUTF8String:v2];
    if ([v3 length] && (objc_msgSend(v3, "isEqualToString:", @".") & 1) == 0) {
      unsigned int v4 = [v3 containsString:@"/"];
    }
    else {
      unsigned int v4 = 1;
    }
  }
  else
  {
    unsigned int v4 = 1;
  }

  return v4 == 0;
}

double sub_100053170()
{
  id v0 = +[UIDevice currentDevice];
  unint64_t v1 = (unint64_t)[v0 userInterfaceIdiom];

  double result = 66.0;
  if ((v1 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
    return 62.0;
  }
  return result;
}

void sub_1000531C8(uint64_t a1, uint64_t a2)
{
  id v3 = airdrop_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Missing Apple ID notification response handler called -> responseFlags (%d)", (uint8_t *)v6, 8u);
  }

  if (!a2)
  {
    unsigned int v4 = airdrop_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Request to open iCloud settings", (uint8_t *)v6, 2u);
    }

    CFStringRef v5 = sub_1001B1BE4();
    dispatch_async(v5, &stru_1008CAC10);
  }
  CFRelease((CFTypeRef)qword_1009942B8);
  qword_1009942B8 = 0;
}

void sub_1000532E0(id a1)
{
  +[NSURL URLWithString:@"prefs:root=APPLE_ACCOUNT&path=ICLOUD_SERVICE"];
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v1 = +[LSApplicationWorkspace defaultWorkspace];
  [v1 openSensitiveURL:v2 withOptions:0];
}

void sub_100053358()
{
  qword_1009942C0 = 0;
}

void sub_10005339C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void sub_1000533BC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "CNMonogrammer monogramForContact:isContactImage: returned nil for %@", v2, v3, v4, v5, v6);
}

void sub_100053424(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "copyConversationIdentityImageIconDataForImage:forConversationIdentifier:style:diameter:monogramsAsFlatImages:isContactImage returned nil for %@", buf, 0xCu);
}

void sub_10005347C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "CNMonogrammer monogramForContacts: returned nil for %@", v2, v3, v4, v5, v6);
}

void sub_1000534E4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = (void *)SFNodeCopyRealName();
  int v6 = 138412546;
  uint64_t v7 = a1;
  __int16 v8 = 2112;
  CFUserNotificationRef v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "No icon data for node with model = %@, id = %@", (uint8_t *)&v6, 0x16u);
}

void sub_100053594(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000535CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "copyCertificateChainFromTrust: SecTrustGetCertificateCount returned %d", a5, a6, a7, a8, 0);
}

void sub_100053638(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000536A8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100053718()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Validation record for %@ is nil", v2, v3, v4, v5, v6);
}

void sub_100053780()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Validation record altDSID for %@ is zero length", v2, v3, v4, v5, v6);
}

void sub_1000537E8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Certificate chain for %@ is empty", v2, v3, v4, v5, v6);
}

void sub_100053850()
{
  sub_100053384();
  sub_10005339C((void *)&_mh_execute_header, v0, v1, "SFAppleIDCommonNameForCertificate for %@ failed with error %d");
}

void sub_1000538BC()
{
  sub_100053384();
  sub_10005339C((void *)&_mh_execute_header, v0, v1, "Certificate chain not trusted. SFAppleIDVerifyCertificateChainSync for %@ failed with error %d");
}

void sub_100053928()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Validation record data verification failed for %@", v2, v3, v4, v5, v6);
}

void sub_100053990(uint64_t a1, NSObject *a2)
{
  int v2 = 141558275;
  uint64_t v3 = 1752392040;
  __int16 v4 = 2113;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to verify identity for %{private, mask.hash}@", (uint8_t *)&v2, 0x16u);
}

void sub_100053A1C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Verified identity has a null email or phone (should never happen) %{private}@", v2, v3, v4, v5, v6);
}

void sub_100053A84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100053ABC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100053AF4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "IOPMAssertionCreateWithProperties returned %x", a5, a6, a7, a8, 0);
}

void sub_100053B60(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "Couldn't put up the missing Apple ID alert! (SInt32 error = %d)", a5, a6, a7, a8, 0);
}

void sub_100053BD0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "Couldn't put up the Wireless CarPlay alert! (SInt32 error = %d)", a5, a6, a7, a8, 0);
}

void sub_100053C94(id a1)
{
  uint64_t v1 = [[SDStreamManager alloc] initWithServiceType:@"_continuity._tcp."];
  uint64_t v2 = (void *)qword_10097FBC8;
  qword_10097FBC8 = (uint64_t)v1;
}

void sub_1000540C0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SDStreamActivityIdentifier"];
  uint64_t v3 = streams_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(*(void *)(a1 + 40) + 32) count];
    int v6 = 134218242;
    id v7 = v4;
    __int16 v8 = 2112;
    CFUserNotificationRef v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received continuation payload sent notification with %lu clients, activity ID = %@", (uint8_t *)&v6, 0x16u);
  }

  if ([*(id *)(a1 + 40) servicesContainIdentifier:v2])
  {
    [*(id *)(a1 + 40) publish];
  }
  else
  {
    uint64_t v5 = streams_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Activity not stream activity, not publishing", (uint8_t *)&v6, 2u);
    }
  }
}

uint64_t sub_100054938(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100055398(uint64_t a1)
{
  uint64_t v2 = streams_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Republishing service", v4, 2u);
  }

  return [*(id *)(a1 + 32) publish];
}

uint64_t sub_100055774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005593C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Service does not have a bonjour name", v2, v3, v4, v5, v6);
}

void sub_100055970()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create net service", v2, v3, v4, v5, v6);
}

void sub_1000559A4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create stream handler", v2, v3, v4, v5, v6);
}

void sub_1000559D8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Wi-Fi not enabled on local iOS device", v2, v3, v4, v5, v6);
}

void sub_100055A0C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No stream ID when trying to publish", v2, v3, v4, v5, v6);
}

void sub_100055A40()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create NSNetService", v2, v3, v4, v5, v6);
}

void sub_100055A74(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to published net service = %@, errorDict = %@", (uint8_t *)&v3, 0x16u);
}

void sub_100055AFC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create stream handler, other side should be timing out", v2, v3, v4, v5, v6);
}

void sub_100055B30(void *a1, uint64_t *a2, NSObject *a3)
{
  uint64_t v5 = [a1 managerID];
  uint64_t v6 = *a2;
  int v7 = 138412546;
  __int16 v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "No manager for received ID = %@, managers = %@", (uint8_t *)&v7, 0x16u);
}

void sub_100055C3C(id a1)
{
  uint64_t v1 = objc_alloc_init(SDSetupAgent);
  uint64_t v2 = (void *)gSDSetupAgent;
  gSDSetupAgent = v1;
}

id sub_100056924(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

void *sub_100056A20(void *result)
{
  if (*(_DWORD *)(result[4] + 72) != -1)
  {
    uint64_t v1 = result;
    if (dword_1009664E8 <= 40 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = (void *)v1[4];
    return [v2 prefsChanged];
  }
  return result;
}

id sub_100056B34(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_100056CD8(uint64_t a1)
{
  if (![*(id *)(a1 + 32) _uiShowing])
  {
    if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v5 = objc_alloc_init((Class)SFDevice);
    uint64_t v3 = +[NSUUID UUID];
    [v5 setIdentifier:v3];

    [*(id *)(a1 + 32) _uiStartWithDevice:v5 viewControllerName:@"NFCTagReaderMainController" xpcEndpoint:*(void *)(a1 + 40) label:@"NFCUI" unlessApps:0 extraInfo:*(void *)(a1 + 48)];
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0);
    }
    goto LABEL_15;
  }
  if (dword_1009664E8 <= 60 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    NSErrorWithOSStatusF();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v5);
LABEL_15:
  }
}

const char *sub_100057B78(int a1)
{
  if (a1 > 99)
  {
    switch(a1)
    {
      case 'd':
        return "B238SetupAfterWiFi";
      case 'e':
        return "B389SetupFromFindMy";
      case 'f':
        return "B389SetupDone";
      default:
        return "?";
    }
  }
  else
  {
    double result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        double result = "ATVSetup";
        break;
      case 4:
        double result = "MobileBackup";
        break;
      case 5:
        double result = "WatchSetup";
        break;
      case 6:
        double result = "ATVPair";
        break;
      case 7:
        double result = "InternetRelay";
        break;
      case 8:
        double result = "WiFiPassword";
        break;
      case 9:
        double result = "iOSSetup";
        break;
      case 10:
        double result = "Repair";
        break;
      case 11:
        double result = "LegacyHomePodSetup";
        break;
      case 12:
        double result = "ApplePay";
        break;
      case 13:
        double result = "WHASetup";
        break;
      case 14:
        double result = "DevToolsPair";
        break;
      case 17:
        double result = "DDPing";
        break;
      case 18:
        double result = "DDPong";
        break;
      case 19:
        double result = "RemoteAutoFill";
        break;
      case 20:
        double result = "CompanionLinkProx";
        break;
      case 21:
        double result = "RemoteManagement";
        break;
      case 22:
        double result = "RemoteAutoFillPong";
        break;
      case 24:
        double result = "AccessorySetup";
        break;
      case 25:
        double result = "TVLS";
        break;
      case 27:
        double result = "ShareAudio";
        break;
      case 28:
        double result = "AppSignIn";
        break;
      case 29:
        double result = "Fitness";
        break;
      case 30:
        double result = "TVCCS";
        break;
      case 31:
        double result = "TVSA";
        break;
      case 32:
        double result = "AuthenticateAccounts";
        break;
      case 33:
        double result = "HomePodSetup";
        break;
      case 34:
        double result = "CompanionAuthentication";
        break;
      case 36:
        double result = "dovePeace";
        break;
      case 43:
        double result = "AuthenticateAccountsV2";
        break;
      case 50:
        double result = "NeedsRDLink";
        break;
      case 51:
        double result = "NeedsCLink";
        break;
      case 52:
        double result = "Goodbye";
        break;
      case 53:
        double result = "PointToShare";
        break;
      case 55:
        double result = "AUAction";
        break;
      case 56:
        double result = "AcceptedInvitations";
        break;
      case 84:
        double result = "HasInvitations";
        break;
      default:
        return "?";
    }
  }
  return result;
}

uint64_t sub_100057FDC(uint64_t a1)
{
  [*(id *)(a1 + 32) _uiStartRepair:*(void *)(a1 + 40) flags:*(unsigned int *)(a1 + 56)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

void sub_1000580C4(uint64_t a1)
{
  memset(v12, 0, sizeof(v12));
  id v2 = *(id *)(*(void *)(a1 + 32) + 144);
  if ([v2 countByEnumeratingWithState:v12 objects:v15 count:16])
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 144) objectForKeyedSubscript:**((void **)&v12[0] + 1)];

    if (v3)
    {
      if ([v3 deviceActionType] == 36 && _os_feature_enabled_impl())
      {
        if ([*(id *)(a1 + 32) _deviceHandlesDovePeaceSetup])
        {
          if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
          {
            uint64_t v11 = v3;
            LogPrintF();
          }
          [*(id *)(a1 + 32) _uiStartSetupDovePeace:v3 autoStart:1 v11];
        }
        else if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
        [*(id *)(a1 + 32) _uiStartSetupiOS:v3 autoStart:1];
      }
      else
      {
        [*(id *)(a1 + 32) _uiStartSetupiOS:v3 autoStart:1 v11];
      }
      uint64_t v10 = *(void *)(a1 + 40);
      if (v10) {
        (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
      }
      goto LABEL_26;
    }
  }
  else
  {
  }
  if (dword_1009664E8 <= 90 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    uint64_t v5 = +[NSString stringWithUTF8String:DebugGetErrorString()];
    uint64_t v6 = (void *)v5;
    CFStringRef v7 = @"?";
    if (v5) {
      CFStringRef v7 = (const __CFString *)v5;
    }
    CFStringRef v14 = v7;
    __int16 v8 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    __int16 v9 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-6727 userInfo:v8];
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v9);
  }
  uint64_t v3 = 0;
LABEL_26:
}

uint64_t sub_1000584CC(uint64_t a1)
{
  [*(id *)(a1 + 32) _uiStartSetupB238:*(void *)(a1 + 40) extraInfo:0];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

void sub_1000585E4(uint64_t a1)
{
  if (![*(id *)(a1 + 32) _uiShowing])
  {
    if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v5 = objc_alloc_init((Class)SFDevice);
    uint64_t v3 = +[NSUUID UUID];
    [v5 setIdentifier:v3];

    [*(id *)(a1 + 32) _uiStartWithDevice:v5 viewControllerName:@"ProfileDevicePickerMainController" label:@"DevicePicker" unlessApps:0 extraInfo:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0);
    }
    goto LABEL_15;
  }
  if (dword_1009664E8 <= 60 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    NSErrorWithOSStatusF();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v5);
LABEL_15:
  }
}

void sub_10005883C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _uiShowing])
  {
    if (dword_1009664E8 <= 60 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
      uint64_t v3 = +[NSString stringWithUTF8String:DebugGetErrorString()];
      uint64_t v4 = (void *)v3;
      CFStringRef v5 = @"?";
      if (v3) {
        CFStringRef v5 = (const __CFString *)v3;
      }
      CFStringRef v12 = v5;
      uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
      CFStringRef v7 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-6721 userInfo:v6];
      (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v7);
    }
  }
  else
  {
    if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      LogPrintF();
    }
    [*(id *)(a1 + 32) _uiStartHomeKitDeviceDetectedWithURL:*(void *)(a1 + 40) v10];
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      __int16 v9 = *(void (**)(void))(v8 + 16);
      v9();
    }
  }
}

void *sub_10005945C(void *result)
{
  if (*(_DWORD *)(result[4] + 256) != -1)
  {
    uint64_t v1 = result;
    if (dword_1009664E8 <= 40 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = (void *)v1[4];
    return _[v2 _iTunesAccountsChanged];
  }
  return result;
}

id sub_1000594FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _primaryAccountChanged];
}

id sub_100059508(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _uiLockStatusChanged];
}

id sub_100059510(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _wifiStateChanged];
}

id sub_100059518(uint64_t a1)
{
  [*(id *)(a1 + 32) _primaryAccountChanged];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_100059554(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _scanTimerFired];
}

id sub_10005955C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceFound:a2];
}

id sub_100059568(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceLost:a2];
}

id sub_100059574(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceFound:a2];
}

void sub_100059580(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_1009664E8 <= 60)
    {
      uint64_t v6 = v2;
      if (dword_1009664E8 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        uint64_t v3 = v6;
      }
    }
  }
  else if (dword_1009664E8 <= 30)
  {
    uint64_t v6 = 0;
    if (dword_1009664E8 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    uint64_t v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

void sub_100059668(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100969798 <= 30)
  {
    if (dword_100969798 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
    {
      id v5 = v3;
      LogPrintF();
      id v3 = v6;
    }
  }
  [*(id *)(a1 + 32) _watchFound:v3, v5];
}

void sub_100059714(id a1, SFBLEDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_100969798 <= 30)
  {
    id v5 = v2;
    if (dword_100969798 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
    {
      LogPrintF();
      id v3 = v5;
    }
  }
}

void sub_1000597A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100969798 <= 30)
  {
    if (dword_100969798 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
    {
      id v5 = v3;
      LogPrintF();
      id v3 = v6;
    }
  }
  [*(id *)(a1 + 32) _watchFound:v3, v5];
}

void sub_100059854(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1009664E8 <= 60)
    {
      id v5 = v2;
      if (dword_1009664E8 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
      {
        LogPrintF();
        id v3 = v5;
      }
    }
  }
}

void sub_10005B470(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2 != (OS_xpc_object *)&_xpc_error_connection_invalid && dword_1009664E8 <= 30)
  {
    id v5 = v2;
    if (dword_1009664E8 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
    {
      LogPrintF();
      id v3 = v5;
    }
  }
}

void sub_10005B514(uint64_t a1)
{
  if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
}

uint64_t sub_10005B7B8(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 80))
  {
    if (dword_1009664E8 > 30) {
      return result;
    }
    if (dword_1009664E8 == -1)
    {
      double result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }
  else
  {
    if (dword_1009664E8 > 50) {
      return result;
    }
    if (dword_1009664E8 == -1)
    {
      double result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }

  return LogPrintF();
}

uint64_t sub_10005B91C(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 80))
  {
    if (dword_1009664E8 > 30) {
      return result;
    }
    if (dword_1009664E8 == -1)
    {
      double result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }
  else
  {
    if (dword_1009664E8 > 50) {
      return result;
    }
    if (dword_1009664E8 == -1)
    {
      double result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }

  return LogPrintF();
}

void sub_10005BAAC(uint64_t a1)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 80))
  {
    if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = *(void **)(v2 + 80);
    *(void *)(v2 + 80) = 0;

    int v4 = *(void **)(a1 + 40);
    if (v4[14])
    {
      [v4 _openSetupURL:];
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 112);
      *(void *)(v5 + 112) = 0;
    }
  }
  else if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void *sub_10005BC50(void *result)
{
  if (*(void *)(result[4] + 128))
  {
    uint64_t v1 = result;
    if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = (void *)v1[4];
    return [v2 _resetTriggers];
  }
  return result;
}

void *sub_10005C000(uint64_t a1)
{
  double result = *(void **)(a1 + 32);
  id v3 = (void *)result[16];
  if (!v3) {
    return result;
  }
  if (dword_1009664E8 <= 30)
  {
    if (dword_1009664E8 == -1)
    {
      int v4 = _LogCategory_Initialize();
      double result = *(void **)(a1 + 32);
      if (!v4) {
        goto LABEL_7;
      }
      id v3 = (void *)result[16];
    }
    [v3 screenOn];
    LogPrintF();
    double result = *(void **)(a1 + 32);
  }
LABEL_7:

  return [result _update];
}

void *sub_10005C638(uint64_t a1)
{
  double result = *(void **)(a1 + 32);
  id v3 = (void *)result[17];
  if (!v3) {
    return result;
  }
  if (dword_1009664E8 <= 30)
  {
    if (dword_1009664E8 == -1)
    {
      int v4 = _LogCategory_Initialize();
      double result = *(void **)(a1 + 32);
      if (!v4) {
        goto LABEL_7;
      }
      id v3 = (void *)result[17];
    }
    [v3 screenLocked];
    LogPrintF();
    double result = *(void **)(a1 + 32);
  }
LABEL_7:

  return [result _update];
}

void sub_10005D650(uint64_t a1, unsigned int a2, void *a3)
{
  id v10 = a3;
  if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
  {
    if (a2 > 5) {
      uint64_t v5 = "?";
    }
    else {
      uint64_t v5 = off_1008CB268[a2];
    }
    uint64_t v8 = v5;
    id v9 = v10;
    LogPrintF();
  }
  [*(id *)(*(void *)(a1 + 32) + 160) invalidate:v8 withCompletionHandler:v9];
  uint64_t v6 = *(void *)(a1 + 32);
  CFStringRef v7 = *(void **)(v6 + 160);
  *(void *)(v6 + 160) = 0;

  if (a2 == 1 && !v10) {
    [*(id *)(a1 + 32) _uiStartTVLatencySetup:*(void *)(a1 + 40) extraInfo:0 forActionType:*(unsigned __int8 *)(a1 + 48)];
  }
}

void sub_10005E0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_10005E0D4(uint64_t a1)
{
  uint64_t Int64 = CFDictionaryGetInt64();
  if (dword_1009664E8 <= 20 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (Int64) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  id v3 = *(NSObject **)(a1 + 48);

  dispatch_group_leave(v3);
}

id sub_10005E1B8(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
  {
    if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  else
  {
    [*(id *)(a1 + 32) _uiStartWithDevice:*(void *)(a1 + 40) viewControllerName:*(void *)(a1 + 48) xpcEndpoint:*(void *)(a1 + 56) label:*(void *)(a1 + 64) extraInfo:*(void *)(a1 + 72)];
  }
  uint64_t v2 = *(void **)(a1 + 80);

  return [v2 invalidate];
}

id sub_10005EBCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _watchFastScanStop];
}

BOOL sub_10005F384(id a1, NRDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = off_100966560();
  int v4 = [(NRDevice *)v2 valueForProperty:v3];

  if ([v4 BOOLValue])
  {
    uint64_t v5 = off_100966568();
    uint64_t v6 = [(NRDevice *)v2 valueForProperty:v5];

    unsigned __int8 v7 = [v6 BOOLValue];
    int v4 = v6;
  }
  else
  {
    unsigned __int8 v7 = 0;
  }

  return v7;
}

void sub_10005F4F0(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1009664E8 <= 60)
    {
      id v6 = v2;
      if (dword_1009664E8 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        id v3 = v6;
      }
    }
  }
  else if (dword_1009664E8 <= 50)
  {
    id v6 = 0;
    if (dword_1009664E8 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    id v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

void sub_10005F848(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 56))
  {
    id v7 = v3;
    if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
    {
      id v6 = v7;
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 32) + 56) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0;

    id v3 = v7;
  }
}

void sub_10005F90C(id a1)
{
  if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_10005F980(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_1009664E8 <= 20)
  {
    if (dword_1009664E8 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
    {
      id v5 = v3;
      LogPrintF();
      id v3 = v6;
    }
  }
  [*(id *)(a1 + 32) _pinPairHandleRequest:v3, v5];
}

void sub_10005FA2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    id v9 = v3;
    if (dword_1009664E8 <= 60 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
    {
      id v8 = v9;
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 32) + 48) invalidate:v8];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 48);
    *(void *)(v5 + 48) = 0;

    goto LABEL_10;
  }
  if (dword_1009664E8 <= 30)
  {
    id v9 = 0;
    if (dword_1009664E8 != -1 || (v7 = _LogCategory_Initialize(), int v4 = 0, v7))
    {
      LogPrintF();
LABEL_10:
      int v4 = v9;
    }
  }
}

void sub_10005FFCC(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 64);
    id v6 = v7;
    LogPrintF();
  }
  [*(id *)(*(void *)(a1 + 32) + 56) invalidate:v5 withCompletionHandler:v6];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = 0;
}

id sub_10006008C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pinPairHandleShowPIN:];
}

id sub_100060094(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _pinPairHandleHidePIN];
}

void *sub_100060980(void *result)
{
  if (*(_DWORD *)(result[4] + 252) != -1)
  {
    uint64_t v1 = result;
    if (dword_1009664E8 <= 40 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v2 = (void *)v1[4];
    return [v2 _repairHandleCFUItemsChanged];
  }
  return result;
}

id sub_100060A20(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairHandleManateeChanged];
}

id sub_100060A28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairHandleManateeChanged];
}

id sub_100060A30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairHandleManateeChanged];
}

void *sub_100060A38(void *result, uint64_t a2)
{
  if (*(void *)(result[4] + 328))
  {
    uint64_t v3 = result;
    if (dword_1009664E8 <= 30)
    {
      if (dword_1009664E8 != -1 || (double result = (void *)_LogCategory_Initialize(), result)) {
        double result = (void *)LogPrintF();
      }
    }
    uint64_t v4 = v3[4];
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2) {
      uint64_t v5 = *(void *)(v4 + 376) | 0x10;
    }
    else {
      uint64_t v5 = *(void *)(v4 + 376);
    }
    uint64_t v6 = *(void *)(v4 + 376) & 0xFFFFFFEFLL;
    if (a2 != 1) {
      uint64_t v6 = v5;
    }
    *(unsigned char *)(v4 + 336) = (v6 & 0x10) != 0;
    *(unsigned char *)(v3[4] + 337) = a2 == 3;
    uint64_t v7 = v3[4];
    uint64_t v8 = v6 | 0x10000;
    uint64_t v9 = v6 & 0xFFFEFFFF;
    if (*(unsigned char *)(v7 + 337)) {
      uint64_t v9 = v8;
    }
    if (v9 != *(void *)(v7 + 376))
    {
      *(void *)(v7 + 376) = v9;
      id v10 = (void *)v3[4];
      return [v10 _repairProblemFlagsChanged];
    }
  }
  return result;
}

void *sub_100060B74(void *result)
{
  if (*(_DWORD *)(result[4] + 340) != -1)
  {
    uint64_t v1 = result;
    if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v2 = (void *)v1[4];
    return [v2 _repairHandleCNSStateChanged];
  }
  return result;
}

void sub_100060C14(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
  {
    sub_100060CDC(a2);
    LogPrintF();
  }
  if (a2 == 96) {
    [*(id *)(a1 + 32) _repairHandleCompletion];
  }
}

const char *sub_100060CDC(int a1)
{
  if (a1 > 299)
  {
    if (a1 <= 799)
    {
      if (a1 <= 519)
      {
        if (a1 <= 410)
        {
          if (a1 <= 399)
          {
            if (a1 == 300) {
              return "BackupProgress";
            }
            if (a1 == 310) {
              return "SyncProgress";
            }
          }
          else
          {
            switch(a1)
            {
              case 400:
                return "StopSetup";
              case 401:
                return "PINPair";
              case 410:
                return "MigrateStart";
            }
          }
        }
        else if (a1 > 430)
        {
          switch(a1)
          {
            case 431:
              return "eSimExternal2FAStop";
            case 500:
              return "SiriWelcome";
            case 510:
              return "SiriDialogA";
          }
        }
        else
        {
          switch(a1)
          {
            case 411:
              return "MigrateStop";
            case 420:
              return "FileTransferReady";
            case 430:
              return "eSimExternal2FAStart";
          }
        }
      }
      else if (a1 > 559)
      {
        if (a1 > 599)
        {
          switch(a1)
          {
            case 600:
              return "SiriSkipDemo";
            case 700:
              return "StopSetupLEDs";
            case 710:
              return "AudioPasscodeEnded";
          }
        }
        else
        {
          switch(a1)
          {
            case 560:
              return "SiriDialogCMusic";
            case 570:
              return "SiriDialogCNews";
            case 580:
              return "SiriDialogCWeather";
          }
        }
      }
      else if (a1 > 549)
      {
        switch(a1)
        {
          case 550:
            return "SiriDialogBWeather";
          case 555:
            return "SiriDialogBClock";
          case 558:
            return "SiriDialogBMusic";
        }
      }
      else
      {
        switch(a1)
        {
          case 520:
            return "SiriDialogBStart";
          case 530:
            return "SiriDialogBHome";
          case 540:
            return "SiriDialogBNews";
        }
      }
      return "?";
    }
    if (a1 > 999)
    {
      if (a1 <= 1099)
      {
        if (a1 == 1000) {
          return "SecureIntentStart";
        }
        if (a1 == 1001) {
          return "SecureIntentFinish";
        }
      }
      else
      {
        switch(a1)
        {
          case 1100:
            return "OneTimeCodeDetected";
          case 2000:
            return "DependentStart";
          case 2001:
            return "DependentEnd";
        }
      }
      return "?";
    }
    switch(a1)
    {
      case 900:
        double result = "SU-No-SetupScanAttempt";
        break;
      case 901:
        double result = "SU-No-SetupStatusUpdate";
        break;
      case 902:
        double result = "SU-No-SetupWipeWifi";
        break;
      case 903:
        double result = "SU-No-SetupCancelled";
        break;
      case 904:
        double result = "SU-No-SetupObliterate";
        break;
      case 905:
        double result = "SU-No-SetupCannotCancel";
        break;
      case 906:
        double result = "SysDrop AirDrop Event";
        break;
      case 907:
        double result = "SysDrop Sysdiagnose Event";
        break;
      case 908:
        double result = "SysDrop Cancel Event";
        break;
      case 909:
        double result = "File Transfer Progress Event";
        break;
      case 910:
        double result = "File Transfer Completed Event";
        break;
      case 911:
        double result = "iOSWiFiSetup";
        break;
      case 912:
        double result = "HKPrimaryResidentSSIDFetchStart";
        break;
      case 913:
        double result = "LoggingProfileTransfer";
        break;
      default:
        switch(a1)
        {
          case 800:
            double result = "AuthAccountsStart";
            break;
          case 803:
            double result = "AuthAccountsiCloudProgress";
            break;
          case 804:
            double result = "AuthAccountsStoreProgress";
            break;
          case 805:
            double result = "AuthAccountsGameCenterProgress";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  else if (a1 > 129)
  {
    if (a1 > 249)
    {
      switch(a1)
      {
        case 260:
          double result = "TVLSStart";
          break;
        case 261:
        case 262:
        case 263:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 271:
        case 273:
        case 275:
          return "?";
        case 264:
          double result = "TVLSFinish";
          break;
        case 270:
          double result = "TVLSEstimateStart";
          break;
        case 272:
          double result = "TVLSEstimateFinal";
          break;
        case 274:
          double result = "TVLSEstimateFailed";
          break;
        case 276:
          double result = "TVLSTryAgain";
          break;
        case 277:
          double result = "TVLSToneBegan";
          break;
        case 278:
          double result = "TVLCalStart";
          break;
        case 279:
          double result = "TVLCalStep";
          break;
        case 280:
          double result = "TVLCalFailed";
          break;
        case 281:
          double result = "TVLCalTryAgain";
          break;
        case 282:
          double result = "TVLCalFinal";
          break;
        default:
          if (a1 != 250) {
            return "?";
          }
          double result = "ReportSuccess";
          break;
      }
    }
    else
    {
      if (a1 <= 219)
      {
        if (a1 <= 149)
        {
          if (a1 == 130) {
            return "WiFiPoweredOff";
          }
          if (a1 == 140) {
            return "RecognizeVoice";
          }
        }
        else
        {
          switch(a1)
          {
            case 150:
              return "SiriForEveryone";
            case 200:
              return "WiFiStart";
            case 210:
              return "ActivationStart";
          }
        }
        return "?";
      }
      switch(a1)
      {
        case 230:
          return "HomeKitStart";
        case 231:
        case 232:
        case 233:
        case 235:
        case 237:
        case 238:
        case 239:
          return "?";
        case 234:
          return "HomeKitSetupStart";
        case 236:
          return "CDPSetupStart";
        case 240:
          return "BuddyStarting";
        case 241:
          return "BuddyProgress";
        case 242:
          return "BuddyFinished";
        default:
          if (a1 == 220)
          {
            double result = "iCloudStart";
          }
          else
          {
            if (a1 != 224) {
              return "?";
            }
            double result = "AppleIDSetupStart";
          }
          break;
      }
    }
  }
  else
  {
    if (a1 <= 79)
    {
      if (a1 > 49)
      {
        if (a1 > 64)
        {
          if (a1 == 65) {
            return "SecurityAPCLoopStart";
          }
          if (a1 == 70) {
            return "SecurityFinish";
          }
        }
        else
        {
          if (a1 == 50) {
            return "PreAuthFinish";
          }
          if (a1 == 60) {
            return "SecurityStart";
          }
        }
      }
      else
      {
        if (a1 > 29)
        {
          switch(a1)
          {
            case 30:
              double result = "Error";
              break;
            case 31:
              double result = "SessionStarted";
              break;
            case 32:
              double result = "SessionEnded";
              break;
            case 33:
              double result = "SessionSecured";
              break;
            case 35:
              double result = "ConnectStart";
              break;
            case 40:
              double result = "PreAuthStart";
              break;
            default:
              return "?";
          }
          return result;
        }
        switch(a1)
        {
          case 0:
            return "Invalid";
          case 10:
            return "Start";
          case 20:
            return "Final";
        }
      }
      return "?";
    }
    if (a1 > 119)
    {
      switch(a1)
      {
        case 'x':
          return "CheckingiCloud";
        case 'z':
          return "CheckingAppleMusic";
        case '|':
          return "CheckingAccount";
      }
      return "?";
    }
    switch(a1)
    {
      case 'P':
        double result = "BasicConfigStart";
        break;
      case 'Z':
        double result = "BasicConfigFinish";
        break;
      case '\\':
        double result = "StepStart";
        break;
      case '^':
        double result = "StepFinish";
        break;
      case '_':
        double result = "PreFinish";
        break;
        double result = "SetupFinished";
        break;
      case 'a':
        double result = "SetupResumed";
        break;
      case 'b':
        double result = "SetupSuspend";
        break;
      case 'c':
        double result = "SetupPeerSWUpdate";
        break;
      case 'd':
        double result = "Finished";
        break;
      default:
        return "?";
    }
  }
  return result;
}

id sub_1000615F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairProblemCheck];
}

BOOL sub_100061B0C(id a1, FLFollowUpItem *a2, unint64_t a3, BOOL *a4)
{
  return sub_100061B14(a2);
}

uint64_t sub_100061B14(void *a1)
{
  id v1 = a1;
  id v2 = [v1 uniqueIdentifier];
  unsigned __int8 v3 = [v2 isEqual:@"com.apple.AAFollowUpIdentifier.RenewCredentials"];

  if (v3)
  {
    uint64_t v4 = 1;
  }
  else
  {
    id v5 = [v1 typeIdentifier];
    unsigned int v6 = [v5 isEqual:@"com.apple.AAFollowUpIdentifier.RenewCredentials"];

    if (v6)
    {
      uint64_t v7 = +[ACAccountStore defaultStore];
      uint64_t v8 = sub_1001B22F4(v7);
      if (v8
        && ([v1 accountIdentifier],
            uint64_t v9 = objc_claimAutoreleasedReturnValue(),
            [v8 identifier],
            id v10 = objc_claimAutoreleasedReturnValue(),
            unsigned __int8 v11 = [v9 isEqual:v10],
            v10,
            v9,
            (v11 & 1) != 0))
      {
        uint64_t v4 = 1;
      }
      else
      {
        CFStringRef v12 = [v1 accountIdentifier];
        NSErrorUserInfoKey v13 = [v7 accountWithIdentifier:v12];

        uint64_t v4 = 0;
        if (v8 && v13)
        {
          CFStringRef v14 = [v8 aa_altDSID];
          uint64_t v15 = [v13 aa_altDSID];
          uint64_t v4 = (uint64_t)[v14 isEqual:v15];
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
  }

  return v4;
}

void sub_100061C94(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  if (v9)
  {
    if (dword_1009664E8 <= 90 && (dword_1009664E8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
  }
  else
  {
    if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = a2;
      LogPrintF();
    }
    id v5 = [[*(id *)(a1 + 32) mutableCopy:v8];
    [v5 removeObjectsAtIndexes:*(void *)(a1 + 40)];
    uint64_t v6 = *(void *)(a1 + 48);
    id v7 = [v5 copy];
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
  }
}

void sub_100061E78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 368);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100061F44;
  block[3] = &unk_1008CAF18;
  void block[4] = v7;
  id v12 = v6;
  id v13 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void *sub_100061F44(void *result)
{
  if (*(_DWORD *)(result[4] + 252) != -1)
  {
    id v1 = result;
    if (result[5])
    {
      if (dword_1009664E8 <= 60)
      {
        if (dword_1009664E8 != -1) {
          return (void *)LogPrintF();
        }
        double result = (void *)_LogCategory_Initialize();
        if (result) {
          return (void *)LogPrintF();
        }
      }
    }
    else
    {
      if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
      {
        id v4 = [(id)v1[6] count];
        LogPrintF();
      }
      id v2 = (void *)v1[4];
      uint64_t v3 = v1[6];
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      _DWORD v5[2] = sub_10006208C;
      v5[3] = &unk_1008CA900;
      v5[4] = v2;
      return [v2 _renewAccountIfNecessaryForCFUItems:v3 completion:v5];
    }
  }
  return result;
}

id sub_10006208C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _repairHandleCFUItems:a2];
}

id sub_1000626A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairHandleManateeChanged];
}

void sub_1000628C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 368);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006298C;
  block[3] = &unk_1008CAF18;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t sub_10006298C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 32))
  {
    if (dword_1009664E8 <= 30)
    {
      if (dword_1009664E8 != -1) {
        return LogPrintF();
      }
      double result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  else
  {
    if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
    {
      id v5 = [*(id *)(v1 + 40) combinedProblemFlags];
      id v6 = &unk_10076DA88;
      LogPrintF();
    }
    uint64_t v2 = *(void *)(*(void *)(v1 + 48) + 376) & 0xFFFDFFF9;
    double result = (uint64_t)[*(id *)(v1 + 40) combinedProblemFlags:v5, v6];
    uint64_t v3 = *(void *)(v1 + 48);
    if ((result | v2) != *(void *)(v3 + 376))
    {
      *(void *)(v3 + 376) = result | v2;
      id v4 = *(void **)(v1 + 48);
      return (uint64_t)[v4 _repairProblemFlagsChanged];
    }
  }
  return result;
}

id sub_1000631E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _repairSilentProgress:a2 info:a3];
}

void sub_1000635FC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 176);
  if (v2)
  {
    uint64_t v3 = [v2 lastDisconnectError];
    id v6 = (id)v3;
    if (dword_1009664E8 <= 40)
    {
      if (dword_1009664E8 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = (uint64_t)v6, v4))
      {
        uint64_t v5 = v3;
        LogPrintF();
        uint64_t v3 = (uint64_t)v6;
      }
    }
    [*(id *)(a1 + 32) _repairVPNError:v3, v5];
  }
}

void sub_100063760(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v2)
  {
    if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
    {
      id v6 = [*(id *)(*(void *)(a1 + 32) + 32) description];
      LogPrintF();
    }
    if (_os_feature_enabled_impl())
    {
      uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];
      int v4 = [v3 bleDevice];
      [v4 setTriggered:1];
    }
    if (dword_1009664E8 <= 50 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
    {
      id v6 = *(void **)(a1 + 40);
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    if ([v8 deviceActionType] == 5)
    {
      uint64_t v5 = [v8 bleDevice];
      if (v5) {
        [*(id *)(a1 + 32) _watchFound:v5];
      }
    }
    else
    {
      [*(id *)(a1 + 32) _deviceFound:v8];
    }
  }
  else
  {
    if (dword_1009664E8 > 50 || dword_1009664E8 == -1 && !_LogCategory_Initialize()) {
      return;
    }
    id v8 = [*(id *)(a1 + 40) description];
    [v8 UTF8String];
    uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 32) description];
    LogPrintF();
  }
}

void sub_100063A88(uint64_t a1)
{
  uint64_t v2 = +[NSURL URLWithString:@"com.apple.Home://a/s?n=Test"];
  if (v2)
  {
    uint64_t v3 = v2;
    [*(id *)(a1 + 32) _uiStartHomeKitDeviceDetectedWithURL:v2];
    uint64_t v2 = v3;
  }
}

void sub_100063BD0(uint64_t a1)
{
  id v3 = objc_alloc_init((Class)SFDevice);
  uint64_t v2 = +[NSUUID UUID];
  [v3 setIdentifier:v2];

  [*(id *)(a1 + 32) _uiStartWithDevice:v3 viewControllerName:@"NFCTagReaderMainController" xpcEndpoint:0 label:@"NFCUI" unlessApps:0 extraInfo:0];
}

void sub_100063DDC(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  CFStringRef v3 = &stru_1008E7020;
  if (a1[6]) {
    CFStringRef v3 = (const __CFString *)a1[6];
  }
  CFStringRef v5 = @"testParams";
  CFStringRef v6 = v3;
  int v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v1 _uiStartPair:v2 extraInfo:v4];
}

id sub_10006406C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartRepair:*(void *)(a1 + 40) flags:0];
}

void sub_10006451C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  CFStringRef v3 = &stru_1008E7020;
  if (a1[6]) {
    CFStringRef v3 = (const __CFString *)a1[6];
  }
  CFStringRef v5 = @"testParams";
  CFStringRef v6 = v3;
  int v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v1 _uiStartSetupB238:v2 extraInfo:v4];
}

id sub_100064924(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartSetupiOS:*(void *)(a1 + 40) autoStart:0];
}

id sub_100064B50(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartWiFiPasswordSharing:*(void *)(a1 + 40)];
}

id sub_100064CA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartSetupWatch:*(void *)(a1 + 40)];
}

id sub_100064F58(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartSetupWHA:*(void *)(a1 + 40)];
}

void sub_1000650D8(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  CFStringRef v3 = &stru_1008E7020;
  if (a1[6]) {
    CFStringRef v3 = (const __CFString *)a1[6];
  }
  CFStringRef v5 = @"testParams";
  CFStringRef v6 = v3;
  int v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v1 _uiStartAppleTVSetup:v2 extraInfo:v4];
}

void sub_100065324(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_1009664E8 <= 90 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
  {
    id v3 = v4;
    LogPrintF();
  }
  [*(id *)(a1 + 32) invalidate:v3];
}

void sub_1000653C8(id a1)
{
  if (dword_1009664E8 <= 30 && (dword_1009664E8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_10006543C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_1009664E8 <= 30)
  {
    CFStringRef v5 = v2;
    if (dword_1009664E8 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
    {
      LogPrintF();
      id v3 = v5;
    }
  }
}

void sub_100065644(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  CFStringRef v3 = &stru_1008E7020;
  if (a1[6]) {
    CFStringRef v3 = (const __CFString *)a1[6];
  }
  CFStringRef v5 = @"testParams";
  CFStringRef v6 = v3;
  int v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v1 _uiStartTVLatencySetup:v2 extraInfo:v4 forActionType:25];
}

void sub_10006586C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  CFStringRef v3 = &stru_1008E7020;
  if (a1[6]) {
    CFStringRef v3 = (const __CFString *)a1[6];
  }
  CFStringRef v5 = @"testParams";
  CFStringRef v6 = v3;
  int v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  [v1 _uiStartTVLatencySetup:v2 extraInfo:v4 forActionType:30];
}

id sub_100065A18(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _uiStartProxCardKitTest:*(void *)(a1 + 40) extraInfo:0];
}

Class sub_100065BB8()
{
  if (qword_10097FC08 != -1) {
    dispatch_once(&qword_10097FC08, &stru_1008CB1A8);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_10097FC00 = (uint64_t)result;
  off_100966558 = (uint64_t (*)())sub_100065C1C;
  return result;
}

id sub_100065C1C()
{
  return (id)qword_10097FC00;
}

void sub_100065C28(id a1)
{
  qword_10097FC10 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

id sub_100065C54()
{
  if (qword_10097FC08 != -1) {
    dispatch_once(&qword_10097FC08, &stru_1008CB1A8);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_10097FC10, "NRDevicePropertyIsArchived");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FBF0, *v0);
  }
  off_100966560 = (uint64_t (*)())sub_100065CE4;
  uint64_t v1 = (void *)qword_10097FBF0;

  return v1;
}

id sub_100065CE4()
{
  return (id)qword_10097FBF0;
}

id sub_100065CF0()
{
  if (qword_10097FC08 != -1) {
    dispatch_once(&qword_10097FC08, &stru_1008CB1A8);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_10097FC10, "NRDevicePropertyMigrationConfirmed");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FBF8, *v0);
  }
  off_100966568 = (uint64_t (*)())sub_100065D80;
  uint64_t v1 = (void *)qword_10097FBF8;

  return v1;
}

id sub_100065D80()
{
  return (id)qword_10097FBF8;
}

id sub_100065D8C()
{
  if (qword_10097FC08 != -1) {
    dispatch_once(&qword_10097FC08, &stru_1008CB1A8);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_10097FC10, "_NRDevicePropertyBluetoothIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FBE8, *v0);
  }
  off_100966570 = (uint64_t (*)())sub_100065E1C;
  uint64_t v1 = (void *)qword_10097FBE8;

  return v1;
}

id sub_100065E1C()
{
  return (id)qword_10097FBE8;
}

Class sub_100065E28()
{
  if (qword_10097FC08 != -1) {
    dispatch_once(&qword_10097FC08, &stru_1008CB1A8);
  }
  Class result = objc_getClass("NRMigrator");
  qword_10097FC18 = (uint64_t)result;
  off_100966578 = (uint64_t (*)())sub_100065E8C;
  return result;
}

id sub_100065E8C()
{
  return (id)qword_10097FC18;
}

Class sub_100065E98()
{
  if (qword_10097FC28 != -1) {
    dispatch_once(&qword_10097FC28, &stru_1008CB1C8);
  }
  Class result = objc_getClass("NEVPNConnection");
  qword_10097FC20 = (uint64_t)result;
  off_100966580 = (uint64_t (*)())sub_100065EFC;
  return result;
}

id sub_100065EFC()
{
  return (id)qword_10097FC20;
}

void sub_100065F08(id a1)
{
  qword_10097FC30 = (uint64_t)dlopen("/System/Library/Frameworks/NetworkExtension.framework/NetworkExtension", 2);
}

Class sub_100065F34()
{
  if (qword_10097FC40 != -1) {
    dispatch_once(&qword_10097FC40, &stru_1008CB1E8);
  }
  Class result = objc_getClass("FLFollowUpController");
  qword_10097FC38 = (uint64_t)result;
  off_100966588 = (uint64_t (*)())sub_100065F98;
  return result;
}

id sub_100065F98()
{
  return (id)qword_10097FC38;
}

void sub_100065FA4(id a1)
{
  qword_10097FC48 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreFollowUp.framework/CoreFollowUp", 2);
}

id sub_100065FD0()
{
  if (qword_10097FC50 != -1) {
    dispatch_once(&qword_10097FC50, &stru_1008CB208);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_10097FC58, "HMDeviceSetupFollowupIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FBE0, *v0);
  }
  off_100966590 = (uint64_t (*)())sub_100066060;
  uint64_t v1 = (void *)qword_10097FBE0;

  return v1;
}

id sub_100066060()
{
  return (id)qword_10097FBE0;
}

void sub_10006606C(id a1)
{
  qword_10097FC58 = (uint64_t)dlopen("/System/Library/Frameworks/HomeKit.framework/HomeKit", 2);
}

Class sub_100066098()
{
  if (qword_10097FC68 != -1) {
    dispatch_once(&qword_10097FC68, &stru_1008CB228);
  }
  Class result = objc_getClass("SSAccountStore");
  qword_10097FC60 = (uint64_t)result;
  off_100966598 = (uint64_t (*)())sub_1000660FC;
  return result;
}

id sub_1000660FC()
{
  return (id)qword_10097FC60;
}

void sub_100066108(id a1)
{
  qword_10097FC70 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/StoreServices.framework/StoreServices", 2);
}

Class sub_100066134()
{
  if (qword_10097FC80 != -1) {
    dispatch_once(&qword_10097FC80, &stru_1008CB248);
  }
  Class result = objc_getClass("AISRepairController");
  qword_10097FC78 = (uint64_t)result;
  off_1009665A0 = (uint64_t (*)())sub_100066198;
  return result;
}

id sub_100066198()
{
  return (id)qword_10097FC78;
}

void sub_1000661A4(id a1)
{
  qword_10097FC88 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppleIDSetup.framework/AppleIDSetup", 2);
}

Class sub_1000661D0()
{
  if (qword_10097FC80 != -1) {
    dispatch_once(&qword_10097FC80, &stru_1008CB248);
  }
  Class result = objc_getClass("AISRepairContext");
  qword_10097FC90 = (uint64_t)result;
  off_1009665A8 = (uint64_t (*)())sub_100066234;
  return result;
}

id sub_100066234()
{
  return (id)qword_10097FC90;
}

void sub_1000664E8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_100066520(uint64_t a1)
{
  if ([*(id *)(a1 + 32) baseAccelerationSet])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained handleNewAccelerometerData];
  }
  else
  {
    [*(id *)(a1 + 32) setBaseAccelerationSet:1];
    id WeakRetained = [*(id *)(a1 + 32) motionManager];
    uint64_t v2 = [WeakRetained accelerometerData];
    [v2 acceleration];
    [*(id *)(a1 + 32) setBaseAcceleration:];
  }
}

void sub_1000665B4(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleActivityDetected:v3];
}

void sub_1000669E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) logType];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138477827;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Motion activity activities: %{private}@", (uint8_t *)&v9, 0xCu);
  }

  if (v6)
  {
    id v8 = [*(id *)(a1 + 32) logType];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000684B0((uint64_t)v6, v8);
    }
  }
  [*(id *)(a1 + 32) handlePastActivities:v5 withStartDate:*(void *)(a1 + 40)];
}

void sub_100066DBC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  if (a2)
  {
    [v6 handlePastPedometerData:a2];
  }
  else
  {
    uint64_t v7 = [v6 logType];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100068528((uint64_t)v5, v7);
    }
  }
}

void sub_100067F20(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) motionDetectedHandler];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) motionDetectedHandler];
    v3[2]();

    int v4 = *(void **)(a1 + 32);
    _[v4 setMotionDetectedHandler:0];
  }
}

void sub_100068118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100068140(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) logType];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Motion timer fired", v6, 2u);
  }

  id v3 = [*(id *)(a1 + 32) type];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3) {
    uint64_t v5 = (uint64_t)[*(id *)(a1 + 32) motionDetected];
  }
  else {
    uint64_t v5 = 1;
  }
  [WeakRetained handleMotionDetected:v5];
}

void sub_1000684B0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "activity error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100068528(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "no step data, error %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000689E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_100068A24(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_100068A34(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_100068A44(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_10006948C(a1, v2);
  }
}

int64_t sub_10006903C(id a1, SFAirDropNode *a2, SFAirDropNode *a3)
{
  int v4 = a2;
  uint64_t v5 = a3;
  id v6 = v4;
  uint64_t v7 = v5;
  id v8 = v7;
  if (v6) {
    int64_t v9 = -1;
  }
  else {
    int64_t v9 = v7 != 0;
  }
  if (v6 && v7)
  {
    id v10 = [(SFAirDropNode *)v6 rangingMeasurement];
    unsigned __int8 v11 = [v10 flags];

    id v12 = [(SFAirDropNode *)v8 rangingMeasurement];
    unsigned __int8 v13 = [v12 flags];

    if ((v11 & 8) != 0 && (v13 & 8) == 0) {
      goto LABEL_8;
    }
    if ((v11 & 8) == 0 && (v13 & 8) != 0)
    {
LABEL_11:
      int64_t v9 = 1;
      goto LABEL_28;
    }
    if ((v11 & 8) != 0 && (v13 & 8) != 0)
    {
      uint64_t v14 = [(SFAirDropNode *)v6 rangingMeasurement];
      [v14 ptsScore];
      double v16 = v15;
      uint64_t v17 = [(SFAirDropNode *)v8 rangingMeasurement];
      [v17 ptsScore];
      double v19 = v18;

      if (v16 <= v19) {
        int64_t v9 = 1;
      }
      else {
        int64_t v9 = -1;
      }
    }
    else
    {
      if ([(SFAirDropNode *)v6 isKnown]
        && ![(SFAirDropNode *)v8 isKnown])
      {
        goto LABEL_11;
      }
      if (([(SFAirDropNode *)v6 isKnown] & 1) == 0
        && ([(SFAirDropNode *)v8 isKnown] & 1) != 0)
      {
        goto LABEL_8;
      }
      if ([(SFAirDropNode *)v6 isMe] && ![(SFAirDropNode *)v8 isMe]) {
        goto LABEL_11;
      }
      if (([(SFAirDropNode *)v6 isMe] & 1) == 0
        && ([(SFAirDropNode *)v8 isMe] & 1) != 0)
      {
LABEL_8:
        int64_t v9 = -1;
        goto LABEL_28;
      }
      uint64_t v20 = magic_head_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = [(SFAirDropNode *)v6 discoveryDate];
        uint64_t v22 = [(SFAirDropNode *)v8 discoveryDate];
        int v26 = 138412546;
        uint64_t v27 = v21;
        __int16 v28 = 2112;
        uint64_t v29 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Sorting 1st slot based upon discoveryDate. A: %@, B: %@", (uint8_t *)&v26, 0x16u);
      }
      CFNumberRef v23 = [(SFAirDropNode *)v8 discoveryDate];
      CFNumberRef v24 = [(SFAirDropNode *)v6 discoveryDate];
      int64_t v9 = (int64_t)[v23 compare:v24];
    }
  }
LABEL_28:

  return v9;
}

BOOL sub_1000692C0(id a1, SFAirDropNode *a2, NSDictionary *a3)
{
  return [(SFAirDropNode *)a2 isUnknown] ^ 1;
}

void sub_100069404(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "helperConnection already exists in -[SDPeopleBrowser start]", v1, 2u);
}

void sub_100069448(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "-[SDPeopleBrowser start] called twice", v1, 2u);
}

void sub_10006948C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDXPCHelperConnection invalidated for %@", (uint8_t *)&v3, 0xCu);
}

void sub_100069508(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "People browser received callback from network browser", v1, 2u);
}

void sub_1000698A0()
{
  uint64_t v0 = daemon_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    sub_1000715A0();
  }
}

uint64_t sub_10006A000(uint64_t a1)
{
  return IOPMAssertionRelease(*(_DWORD *)(a1 + 32));
}

void sub_10006B3C8(uint64_t a1)
{
  id v2 = (id)objc_opt_new();
  [v2 setObject:*(void *)(a1 + 32) forKeyedSubscript:kSFOperationBytesCopiedKey];
  [v2 setObject:*(void *)(a1 + 40) forKeyedSubscript:kSFOperationTimeRemainingKey];
  [*(id *)(a1 + 48) notifyClientForEvent:7 withProperty:v2];
}

void sub_10006B4D8(uint64_t a1)
{
  uint64_t v2 = kSFOperationTotalBytesKey;
  int v3 = [*(id *)(*(void *)(a1 + 32) + 224) objectForKeyedSubscript:kSFOperationTotalBytesKey];
  uint64_t v4 = (uint64_t)[v3 longLongValue];

  if (!v4)
  {
    uint64_t v4 = 128;
    uint64_t v5 = +[NSNumber numberWithLongLong:128];
    [*(id *)(*(void *)(a1 + 32) + 224) setObject:v5 forKeyedSubscript:v2];
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006B754;
  block[3] = &unk_1008CA4B8;
  void block[4] = v6;
  dispatch_async(v7, block);
  id v8 = *(void **)(a1 + 32);
  int64_t v9 = +[NSNumber numberWithLongLong:v4 / 5];
  [v8 notifyClientOfBytesCopied:v9 timeRemaining:&off_1009026B8];

  id v10 = *(void **)(a1 + 32);
  unsigned __int8 v11 = +[NSNumber numberWithLongLong:2 * v4 / 5];
  [v10 notifyClientOfBytesCopied:v11 timeRemaining:&off_1009026B8];

  id v12 = *(void **)(a1 + 32);
  unsigned __int8 v13 = +[NSNumber numberWithLongLong:3 * v4 / 5];
  [v12 notifyClientOfBytesCopied:v13 timeRemaining:&off_1009026B8];

  uint64_t v14 = *(void **)(a1 + 32);
  double v15 = +[NSNumber numberWithLongLong:4 * v4 / 5];
  [v14 notifyClientOfBytesCopied:v15 timeRemaining:&off_1009026D0];

  double v16 = *(void **)(a1 + 32);
  uint64_t v17 = +[NSNumber numberWithLongLong:v4];
  [v16 notifyClientOfBytesCopied:v17 timeRemaining:&off_1009026D0];

  usleep(0x7A120u);
  uint64_t v18 = *(void *)(a1 + 32);
  double v19 = *(NSObject **)(v18 + 240);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10006B764;
  v20[3] = &unk_1008CA4B8;
  void v20[4] = v18;
  dispatch_async(v19, v20);
}

id sub_10006B754(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:5 withProperty:0];
}

id sub_10006B764(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:9 withProperty:0];
}

id sub_10006B854(uint64_t a1)
{
  uint64_t v2 = airdrop_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned char **)(a1 + 32);
    if (v3[72]) {
      uint64_t v4 = "discovery";
    }
    else {
      uint64_t v4 = "ask";
    }
    uint64_t v5 = [v3 personID];
    int v7 = 136315394;
    id v8 = v4;
    __int16 v9 = 2112;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retry %s request for %@", (uint8_t *)&v7, 0x16u);
  }
  return [*(id *)(a1 + 32) resolve];
}

uint64_t sub_10006C0C8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    int v3 = airdrop_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100071A58();
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10006CA5C(void *a1, char a2)
{
  uint64_t v4 = airdrop_log();
  uint64_t v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_100071BF0((uint64_t)a1, v5);
    }

    if (a1[6])
    {
      uint64_t v6 = +[NSURLCredential credentialForTrust:](NSURLCredential, "credentialForTrust:");
    }
    else
    {
      uint64_t v6 = 0;
    }
    (*(void (**)(void))(a1[5] + 16))();
    int v7 = (void *)a1[4];
    if (v7[2]) {
      [v7 notifyClientForEvent:3 withProperty:0];
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100071C88((uint64_t)a1);
    }

    (*(void (**)(void))(a1[5] + 16))();
  }
}

void sub_10006DE80(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1001B1E48(*(const __CFArray **)(*(void *)(a1 + 32) + 112));
  int v3 = objc_opt_new();
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 112);
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v19;
    while (2)
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v4);
        }
        CFURLRef v8 = *(const __CFURL **)(*((void *)&v18 + 1) + 8 * i);
        if ((objc_msgSend(*(id *)(*(void *)(a1 + 32) + 128), "containsObject:", v8, (void)v18) & 1) == 0)
        {
          long long v9 = *(_OWORD *)(*(void *)(a1 + 32) + 456);
          *(_OWORD *)buf = *(_OWORD *)(*(void *)(a1 + 32) + 440);
          *(_OWORD *)&uint8_t buf[16] = v9;
          if (!sub_1001B2618(v8))
          {
            id v10 = (const void *)sub_1001B2718(v8);
            if (v10)
            {
              unsigned __int8 v11 = v10;
              sub_100052DC0(-6, v10);
              id v5 = (id)objc_claimAutoreleasedReturnValue();
              CFRelease(v11);
            }
            else
            {
              sub_100052DC0(-5, 0);
              id v5 = (id)objc_claimAutoreleasedReturnValue();
            }
            id v12 = airdrop_log();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
              sub_100071E68();
            }

            goto LABEL_19;
          }
        }
        if ([*(id *)(*(void *)(a1 + 32) + 112) count] == (id)1) {
          [*(id *)(a1 + 32) generatePreviewForFileURL:v8];
        }
        [*(id *)(a1 + 32) appendFileURL:v8 withBase:v2 toItems:v3];
      }
      id v5 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_19:

  id v13 = [v3 count];
  uint64_t v14 = airdrop_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    id v15 = [*(id *)(*(void *)(a1 + 32) + 112) count];
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "validateAirDropItems validated %lu/%lu items for transfer", buf, 0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 224) setObject:v3 forKeyedSubscript:kSFOperationFilesKey];
  double v16 = [*(id *)(*(void *)(a1 + 32) + 120) allValues];
  uint64_t v17 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v16 containsObject:&__kCFBooleanTrue]);
  [*(id *)(*(void *)(a1 + 32) + 224) setObject:v17 forKeyedSubscript:kSFOperationConvertMediaFormatsKey];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006E8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006E8F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained invalidate];
}

void sub_10006EC38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = airdrop_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10007207C();
    }

    [*(id *)(a1 + 32) notifyClientForEvent:10 withProperty:v3];
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!*(unsigned char *)(v5 + 208) && *(unsigned char *)(v5 + 312))
    {
      uint64_t v6 = +[SDConnectedBrowser sharedBrowser];
      [v6 addAirDropPerson:*(void *)(*(void *)(a1 + 32) + 200)];

      *(unsigned char *)(*(void *)(a1 + 32) + 208) = 1;
    }
    int v7 = (void *)SFNodeCopyAppleID();
    CFURLRef v8 = (void *)SFNodeCopyServiceName();
    long long v9 = (void *)SFNodeCopyComputerName();
    if (v8) {
      [*(id *)(*(void *)(a1 + 32) + 224) setObject:v8 forKeyedSubscript:kSFOperationReceiverIDKey];
    }
    if (v9) {
      [*(id *)(*(void *)(a1 + 32) + 224) setObject:v9 forKeyedSubscript:kSFOperationReceiverComputerNameKey];
    }
    if (v7
      && ([*(id *)(*(void *)(a1 + 32) + 176) verifiedIdentityForAppleID:v7],
          id v10 = objc_claimAutoreleasedReturnValue(),
          v10,
          v10))
    {
      Name = (void *)SFNodeCopyLastName();
      id v12 = (void *)SFNodeCopyFirstName();
      id v13 = (void *)SFNodeCopyDisplayName();
      if (Name) {
        [*(id *)(*(void *)(a1 + 32) + 224) setObject:Name forKeyedSubscript:kSFOperationReceiverLastNameKey];
      }
      if (v12) {
        [*(id *)(*(void *)(a1 + 32) + 224) setObject:v12 forKeyedSubscript:kSFOperationReceiverFirstNameKey];
      }
      if (v13) {
        [*(id *)(*(void *)(a1 + 32) + 224) setObject:v13 forKeyedSubscript:kSFOperationReceiverCompositeNameKey];
      }
      [*(id *)(*(void *)(a1 + 32) + 224) setObject:&__kCFBooleanTrue forKeyedSubscript:kSFOperationVerifiableIdentityKey];
    }
    else
    {
      [*(id *)(*(void *)(a1 + 32) + 224) setObject:&__kCFBooleanFalse forKeyedSubscript:kSFOperationVerifiableIdentityKey];
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 264) = sub_1000524B8();
    if (*(unsigned char *)(a1 + 40)) {
      [*(id *)(a1 + 32) startSendingClassroom];
    }
    [*(id *)(a1 + 32) removeFileIconsFromProperties];
    uint64_t v14 = [*(id *)(*(void *)(a1 + 32) + 224) objectForKeyedSubscript:kSFOperationFilesKey];
    id v15 = [*(id *)(*(void *)(a1 + 32) + 224) objectForKeyedSubscript:kSFOperationItemsKey];
    id v16 = [v14 count];
    if (!v16) {
      id v16 = [v15 count];
    }
    uint64_t v17 = airdrop_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 224);
      int v19 = 138412802;
      long long v20 = v9;
      __int16 v21 = 2048;
      id v22 = v16;
      __int16 v23 = 2112;
      uint64_t v24 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "startSending to: \"%@\", validated %lu airdrop items. properties: %@", (uint8_t *)&v19, 0x20u);
    }

    if (!*(unsigned char *)(a1 + 40)) {
      [*(id *)(a1 + 32) send];
    }
  }
}

void sub_10006F31C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = airdrop_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10007212C(a1, (uint64_t)v3, v4);
    }

    [*(id *)(a1 + 40) notifyClientForEvent:10 withProperty:v3];
  }
  else
  {
    uint64_t v5 = (void *)SFNodeCopyComputerName();
    uint64_t v6 = airdrop_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [*(id *)(*(void *)(a1 + 40) + 112) count];
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 112);
      int v9 = 134218498;
      id v10 = v7;
      __int16 v11 = 2112;
      id v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Starting to send %lu files to \"%@\", fileURLs: %@", (uint8_t *)&v9, 0x20u);
    }

    [*(id *)(a1 + 40) startSending];
  }
}

void sub_10006FAD8(uint64_t a1)
{
  sub_1001B1BF0();
  sub_1000501E4(*(void **)(a1 + 32));
  uint64_t v2 = sub_10004FCC0();
  dispatch_resume(v2);
}

id sub_10006FB30(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 176) airDropTransactionEnd:1];
}

void sub_1000703B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_100070490(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1000704A0(uint64_t a1)
{
}

void sub_1000704A8(uint64_t a1)
{
}

void sub_100070618(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 312))
  {
    uint64_t v5 = airdrop_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "_shouldPublishProgress, adding total unit count of 100", v7, 2u);
    }

    [*(id *)(*(void *)(a1 + 32) + 64) setTotalUnitCount:((char *)[*(id *)(*(void *)(a1 + 32) + 64) totalUnitCount] + 100)];
    [*(id *)(*(void *)(a1 + 32) + 64) addChild:v3 withPendingUnitCount:100];
    uint64_t v4 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v4 + 57))
  {
    if (!*(unsigned char *)(v4 + 312)) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!*(unsigned char *)(v4 + 312))
    {
LABEL_10:
      id WeakRetained = objc_loadWeakRetained((id *)(v4 + 432));
      [WeakRetained handleConversionProgress:v3];

      goto LABEL_11;
    }
    *(unsigned char *)(v4 + 57) = 1;
    [*(id *)(*(void *)(a1 + 32) + 64) addObserver:*(void *)(a1 + 32) forKeyPath:@"fractionCompleted" options:0 context:0];
  }
LABEL_11:
}

void sub_100070730(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v24 = *(NSObject **)(v23 + 240);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1000708D8;
  v32[3] = &unk_1008CB500;
  uint64_t v42 = a6;
  id v33 = v16;
  uint64_t v34 = v23;
  id v35 = v17;
  id v36 = v18;
  id v37 = v19;
  id v38 = v21;
  id v39 = v22;
  id v40 = v20;
  id v41 = *(id *)(a1 + 40);
  id v25 = v20;
  id v26 = v22;
  id v27 = v21;
  id v28 = v19;
  id v29 = v18;
  id v30 = v17;
  id v31 = v16;
  dispatch_async(v24, v32);
}

uint64_t sub_1000708D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2 == 10)
  {
    [*(id *)(a1 + 40) notifyClientForEvent:10 withProperty:*(void *)(a1 + 88)];
  }
  else if (v2 == 9)
  {
    id v3 = +[NSMutableArray array];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v4 = *(id *)(a1 + 32);
    id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v19;
      do
      {
        for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v4);
          }
          int v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          id v10 = [v9 url:v18];
          [v3 addObject:v10];

          __int16 v11 = [v9 conversionNeeded];
          id v12 = *(void **)(*(void *)(a1 + 40) + 120);
          __int16 v13 = [v9 url];
          [v12 setObject:v11 forKeyedSubscript:v13];
        }
        id v6 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v6);
    }

    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = *(void **)(v14 + 112);
    *(void *)(v14 + 112) = v3;
    id v16 = v3;

    [*(id *)(*(void *)(a1 + 40) + 128) addObjectsFromArray:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 40) + 160) addObjectsFromArray:*(void *)(a1 + 56)];
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 280), *(id *)(a1 + 64));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 48), *(id *)(a1 + 72));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 336), *(id *)(a1 + 80));
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 96) + 16))();
}

id sub_100070DE4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) observeValueForKeyPath:*(void *)(a1 + 40) ofObject:*(void *)(a1 + 48) change:*(void *)(a1 + 56) context:*(void *)(a1 + 64)];
}

void sub_10007121C(id a1, BOOL a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    id v4 = airdrop_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      id v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "recordInteraction failed with error %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10007153C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100071574(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000715A0()
{
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection invalidated in %@", v2, v3, v4, v5, v6);
}

void sub_10007160C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient %@", v2, v3, v4, v5, v6);
}

void sub_100071674()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: didReceiveResponse unknown status code %ld", v2, v3, v4, v5, v6);
}

void sub_1000716DC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: didReceiveResponse operation is NULL", v2, v3, v4, v5, v6);
}

void sub_100071710()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: didReceiveResponse unknown operation", v2, v3, v4, v5, v6);
}

void sub_100071744()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: Ask response has no content", v2, v3, v4, v5, v6);
}

void sub_100071778()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: Discover response has no content", v2, v3, v4, v5, v6);
}

void sub_1000717AC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: storePropertyValue value for key %@ is invalid", v2, v3, v4, v5, v6);
}

void sub_100071814()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: storeDataValue value for key %@ is invalid", v2, v3, v4, v5, v6);
}

void sub_10007187C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: storeStringValue value for key %@ is invalid", v2, v3, v4, v5, v6);
}

void sub_1000718E4()
{
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "parseAskResponse: CFPropertyListCreateWithData %@", v2, v3, v4, v5, v6);
}

void sub_100071950()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFPropertyListCreateWithData returned invalid dictionary", v2, v3, v4, v5, v6);
}

void sub_100071984()
{
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "parseDiscoverResponse: CFPropertyListCreateWithData %@", v2, v3, v4, v5, v6);
}

void sub_1000719F0()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Connection to %@ failed (%@)");
}

void sub_100071A58()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: receiver is not trusted", v2, v3, v4, v5, v6);
}

void sub_100071A8C(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropClient: if_indextoname(%d) failed", (uint8_t *)v2, 8u);
}

void sub_100071B04(void *a1)
{
  uint64_t v1 = [a1 personID];
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v2, v3, "SDAirDropClient: intermediate certificate not available. Sending to %@ with no Apple ID certificate", v4, v5, v6, v7, v8);
}

void sub_100071B88()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: authenticationMethod returned %@", v2, v3, v4, v5, v6);
}

void sub_100071BF0(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) personID];
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Validated Apple ID certificate of receiver %@", v4, 0xCu);
}

void sub_100071C88(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) personID];
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v2, v3, "Failed to validate Apple ID certificate of receiver %@", v4, v5, v6, v7, v8);
}

void sub_100071D10(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [a1 name];
  int v6 = 138412546;
  uint64_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Bonjour resolve %@ failed (%@)", (uint8_t *)&v6, 0x16u);
}

void sub_100071DC0()
{
  sub_10002972C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "SDAirDropClient: Unhandled compression type [%@], assuming GZip", v1, 0xCu);
}

void sub_100071E34()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: validateAirDropItems _items is empty or NULL", v2, v3, v4, v5, v6);
}

void sub_100071E68()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "validateAirDropItems couldn't validate fileURL: %@ with error: %@");
}

void sub_100071ED0()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: Subtype for asset bundle couldn't be determined for URL: %@. Error: %@");
}

void sub_100071F38()
{
  sub_10001587C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unexpectedly going through SDAirDropClient to AirDrop on Dawn device", v1, 2u);
}

void sub_100071F78()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: kCFURLTypeIdentifierKey %@", v2, v3, v4, v5, v6);
}

void sub_100071FE0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: kCFURLNameKey %@", v2, v3, v4, v5, v6);
}

void sub_100072048()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: startPublishingProgress sessionID is NULL", v2, v3, v4, v5, v6);
}

void sub_10007207C()
{
  sub_10002972C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "startSending, did NOT validate airdrop items. Error: %@. properties: %@");
}

void sub_1000720F8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: splitOutFileURLs failed", v2, v3, v4, v5, v6);
}

void sub_10007212C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [*(id *)(*(void *)(a1 + 40) + 112) count];
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 112);
  int v9 = 138413058;
  uint64_t v10 = v6;
  __int16 v11 = 2048;
  id v12 = v7;
  __int16 v13 = 2112;
  uint64_t v14 = v8;
  __int16 v15 = 2112;
  uint64_t v16 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDAirDropClient: coordinateAccessWithIntents(%@) for %lu files %@ failed %@", (uint8_t *)&v9, 0x2Au);
}

void sub_1000721F8()
{
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: generatePreviewForFileURL copy property %@", v2, v3, v4, v5, v6);
}

void sub_100072264()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: generatePreviewForFileURL load data %@", v2, v3, v4, v5, v6);
}

void sub_1000722CC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: createImageDataWithSize returned NULL", v2, v3, v4, v5, v6);
}

void sub_100072300()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: createCGImageWithData returned NULL", v2, v3, v4, v5, v6);
}

void sub_100072334(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropClient: generatePreviewForFileURL failed to extract information from vcard \"%@\"", buf, 0xCu);
}

void sub_10007238C(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropClient: generatePreviewForFileURL monogramImageDataForContact return nil", buf, 2u);
}

void sub_1000723CC(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropClient: generatePreviewForFileURL failed to decode.", buf, 2u);
}

void sub_10007262C(id a1)
{
  uint64_t v1 = objc_alloc_init(SDHotspotAgent);
  uint64_t v2 = (void *)qword_10097FCA0;
  qword_10097FCA0 = (uint64_t)v1;
}

id sub_100072B08(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_100072D44(uint64_t a1)
{
  uint64_t v2 = [[SDHotspotManager alloc] initWithDelegate:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 224);
  *(void *)(v3 + 224) = v2;

  if (SFDeviceIsRealityDevice() && _os_feature_enabled_impl())
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_100072E1C;
    v6[3] = &unk_1008CB590;
    uint64_t v7 = *(void *)(a1 + 32);
    [*(id *)(v7 + 64) setStatusUpdated:v6];
    [*(id *)(*(void *)(a1 + 32) + 64) subscribeForCellularSlicingAvailability];
  }
  return [*(id *)(a1 + 32) update];
}

id sub_100072E1C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _discoveryCellularSlicingStateUpdateFor:a2];
}

id sub_100072E9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_10007308C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _prefsChanged:0];
}

id sub_100073750(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100073D94(uint64_t a1)
{
  if (dword_1009667F0 <= 50 && (dword_1009667F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 _update];
}

id sub_100073E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _companionLinkHandleRequest:a2 options:a3 responseHandler:a4];
}

void sub_100073E3C(id a1)
{
  if (dword_1009667F0 <= 90 && (dword_1009667F0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_100073EB0(id a1)
{
  if (dword_1009667F0 <= 90 && (dword_1009667F0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_100073F24(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_1009667F0 <= 90)
    {
      uint8_t v6 = v2;
      if (dword_1009667F0 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        uint64_t v3 = v6;
      }
    }
  }
  else if (dword_1009667F0 <= 50)
  {
    uint8_t v6 = 0;
    if (dword_1009667F0 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    uint64_t v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

id sub_1000743E0(uint64_t a1)
{
  if (dword_1009667F0 <= 50 && (dword_1009667F0 != -1 || _LogCategory_Initialize()))
  {
    unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 224) isTetheringSupported];
    uint64_t v3 = "no";
    if (v2) {
      uint64_t v3 = "yes";
    }
    uint8_t v6 = v3;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _update:v6];
  int v4 = *(void **)(*(void *)(a1 + 32) + 208);

  return [v4 tetheringSupportChanged];
}

void sub_1000744F4(id a1)
{
  uint64_t v1 = (void *)qword_10097FCA8;
  qword_10097FCA8 = (uint64_t)&off_100906DA0;
}

void sub_10007460C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = *(NSObject **)(v1 + 128);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100074680;
  block[3] = &unk_1008CA4B8;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_100074680(uint64_t a1)
{
  [*(id *)(a1 + 32) _appMonitorUpdate];
  unsigned int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_100074B38(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addClientID:*(void *)(a1 + 40) bundleID:*(void *)(a1 + 48) proxy:*(void *)(a1 + 56)];
}

id sub_100074D10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeClientID:*(void *)(a1 + 40)];
}

id sub_100074F50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startBrowsingForClientID:*(void *)(a1 + 40)];
}

id sub_10007530C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopBrowsingForClientID:*(void *)(a1 + 40)];
}

id sub_1000756A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _enableHotspotForDevice:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 48)];
}

void sub_1000759EC(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 216))
  {
    uint64_t v2 = arc4random();
    uint64_t v3 = (int *)[*(id *)(a1 + 32) _logCategoryCreateWithLabel:@"TetheringAgent" sessionID:v2];
    id v4 = objc_alloc_init((Class)SFRemoteHotspotDevice);
    [v4 setDeviceIdentifier:*(void *)(*(void *)(a1 + 32) + 216)];
    int v5 = objc_opt_new();
    uint8_t v6 = v5;
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = 3;
    }
    [v5 setRequestType:v7];
    [v6 setHotspotDevice:v4];
    [v6 setLogCategory:v3];
    [v6 setSessionID:v2];
    [v6 setTrafficFilterParams:*(void *)(a1 + 40)];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100075C50;
    v13[3] = &unk_1008CB688;
    id v14 = *(id *)(a1 + 48);
    [v6 setHotspotInfoHandler:v13];
    if (*v3 <= 40 && (*v3 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = "Adding";
      if (!*(unsigned char *)(a1 + 56)) {
        uint64_t v8 = "Removing";
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 216);
      uint64_t v11 = *(void *)(a1 + 40);
      int v9 = v8;
      LogPrintF();
    }
    [*(id *)(a1 + 32) _companionLinkActivateWithRequest:v6, v9, v10, v11];
  }
  else
  {
    if (dword_1009667F0 <= 90 && (dword_1009667F0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    NSErrorWithOSStatusF();
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100075C50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100076108(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_1009667F0 <= 50)
  {
    if (dword_1009667F0 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
    {
      id v5 = v3;
      LogPrintF();
      id v3 = v6;
    }
  }
  [*(id *)(a1 + 32) _discoveryDeviceFound:v3, v5];
}

void sub_1000761B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_1009667F0 <= 50)
  {
    if (dword_1009667F0 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
    {
      id v5 = v3;
      LogPrintF();
      id v3 = v6;
    }
  }
  [*(id *)(a1 + 32) _discoveryDeviceChanged:v3, v5];
}

void sub_100076260(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_1009667F0 <= 50)
  {
    if (dword_1009667F0 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
    {
      id v5 = v3;
      LogPrintF();
      id v3 = v6;
    }
  }
  [*(id *)(a1 + 32) _discoveryDeviceLost:v3, v5];
}

void sub_10007630C(id a1)
{
  if (dword_1009667F0 <= 90 && (dword_1009667F0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_100076380(id a1)
{
  if (dword_1009667F0 <= 90 && (dword_1009667F0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_1000763F4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1009667F0 <= 90)
    {
      id v6 = v2;
      if (dword_1009667F0 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        id v3 = v6;
      }
    }
  }
  else if (dword_1009667F0 <= 50)
  {
    id v6 = 0;
    if (dword_1009667F0 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    id v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_100076BB4()
{
  if (dword_1009667F0 <= 90)
  {
    if (dword_1009667F0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_100076C34()
{
  if (dword_1009667F0 <= 90)
  {
    if (dword_1009667F0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

void sub_100076CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = **(_DWORD **)(a1 + 64);
  id v9 = v3;
  if (!v3)
  {
    if (v4 <= 50 && (v4 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      LogPrintF();
      [*(id *)(a1 + 56) _companionLinkActivatedRequest:*(void *)(a1 + 40) v7];
    }
    else
    {
      [*(id *)(a1 + 56) _companionLinkActivatedRequest:*(void *)(a1 + 40) v6];
    }
    goto LABEL_12;
  }
  if (v4 <= 90)
  {
    if (v4 == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_9;
      }
      id v3 = v9;
    }
    uint64_t v6 = *(void *)(a1 + 32);
    id v8 = v3;
    LogPrintF();
  }
LABEL_9:
  [*(id *)(a1 + 40) hotspotInfoHandler:v6, v8];
  int v5 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
  ((void (**)(void, void, id))v5)[2](v5, 0, v9);

LABEL_12:
}

id sub_100077104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _companionLinkHandleResponse:a2 request:*(void *)(a1 + 40) error:a4];
}

void sub_100077A04(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  LogCategory_Remove();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100077AA0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else {
    return [*(id *)(a1 + 32) _companionLinkStartTetheringWithResponse:*(void *)(a1 + 56) logCategory:*(void *)(a1 + 64) modelID:*(void *)(a1 + 40) productVersion:*(void *)(a1 + 48) canConnectOn5GHz:*(unsigned __int8 *)(a1 + 72)];
  }
}

void sub_10007836C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007838C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, *(void *)(a1 + 32));
}

void sub_1000784DC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  __int16 v13 = *(NSObject **)(*(void *)(a1 + 32) + 128);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100078610;
  block[3] = &unk_1008CB800;
  id v21 = v9;
  id v22 = v11;
  id v23 = v10;
  id v24 = v12;
  long long v19 = *(_OWORD *)(a1 + 40);
  id v14 = (id)v19;
  long long v25 = v19;
  id v15 = v12;
  id v16 = v10;
  id v17 = v11;
  id v18 = v9;
  dispatch_async(v13, block);
}

void sub_100078610(uint64_t a1)
{
  int v2 = **(_DWORD **)(a1 + 72);
  if (v2 <= 50 && (v2 != -1 || _LogCategory_Initialize()))
  {
    id v9 = objc_retainBlock(*(id *)(a1 + 64));
    LogPrintF();
  }
  id v3 = objc_opt_new();
  int v5 = v3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v3;
  if (v6)
  {
    [v3 setObject:v6 forKeyedSubscript:@"name"];
    int v5 = v10;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    [v5 setObject:v7 forKeyedSubscript:@"pass"];
    int v5 = v10;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    [v5 setObject:v8 forKeyedSubscript:@"chan"];
    int v5 = v10;
  }
  (*(void (**)(void, void *, void, void, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v5, 0, *(void *)(a1 + 56), v4);
}

void sub_100079058(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v5 browsing])
  {
    uint64_t v6 = [v5 clientProxy];
    if (v6)
    {
      uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 112) allValues];
      [v6 updatedFoundDeviceList:v7];
    }
    else if (dword_1009667F0 <= 90 && (dword_1009667F0 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

void sub_10007957C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (([*(id *)(a1 + 32) _sysMonitorD2DEncryptionIsAvailable] & 1) != 0
    || [v5 group] != (id)1)
  {
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v6];
  }
}

id sub_100079744(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _discoveryUpdateLegacyDeviceList:*(void *)(a1 + 40)];
}

void sub_1000797E8(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 80);
  if (v2)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = [v2 activeDevices];
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      while (2)
      {
        for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          id v9 = *(void **)(a1 + 40);
          id v10 = [v8 identifier];
          LODWORD(v9) = [v9 isEqual:v10];

          if (v9)
          {
            [*(id *)(a1 + 32) _discoveryDeviceChanged:v8];
            goto LABEL_12;
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
}

id sub_10007AE2C(uint64_t a1)
{
  if (dword_1009667F0 <= 50 && (dword_1009667F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(void *)(*(void *)(a1 + 32) + 136) = -1;
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_10007AEBC(uint64_t a1)
{
  if (dword_1009667F0 <= 50 && (dword_1009667F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _legacyBrowswerUpdateD2DState];
  [*(id *)(a1 + 32) _update];
  int v2 = *(void **)(a1 + 32);

  return [v2 _discoveryUpdateCombined:0];
}

id sub_10007AF54(uint64_t a1)
{
  if (dword_1009667F0 <= 50 && (dword_1009667F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_10007AFD8(uint64_t a1)
{
  if (dword_1009667F0 <= 50 && (dword_1009667F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 289) = 1;
  [*(id *)(a1 + 32) _legacyBrowswerUpdateD2DState];
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_10007BB64(uint64_t a1, int a2)
{
  int v3 = **(_DWORD **)(a1 + 64);
  if (a2 == 1)
  {
    if (v3 <= 50 && (v3 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56));
  }
  else
  {
    if (v3 <= 90 && (v3 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v4 = NSErrorWithOSStatusF();
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56));
  }
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void **)(*(void *)(a1 + 40) + 304);

  return [v6 removeObjectForKey:v5];
}

void sub_10007BD04(uint64_t a1)
{
  int v2 = +[NSUUID UUID];
  id v3 = [v2 UUIDString];

  [*(id *)(a1 + 32) _postUserAlertForName:@"John Appleseed" altDSID:v3 logCategory:[*(id *)(a1 + 32) _logCategoryCreateWithLabel:@"TetheringAgent" sessionID:0] completion:&stru_1008CB8C0];
}

id sub_10007C014(uint64_t a1)
{
  id result = (id)*(unsigned int *)(*(void *)(a1 + 32) + 312);
  if (result != -1)
  {
    uint64_t state64 = 0;
    id result = (id)notify_get_state((int)result, &state64);
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(_DWORD *)(v3 + 316) != state64)
    {
      *(_DWORD *)(v3 + 316) = state64;
      if (dword_1009667F0 <= 30 && (dword_1009667F0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v4 = *(int *)(*(void *)(a1 + 32) + 316);
        if (v4 > 5) {
          uint64_t v5 = "?";
        }
        else {
          uint64_t v5 = off_1008CB960[v4];
        }
        uint64_t v6 = v5;
        uint64_t v7 = *(int *)(*(void *)(a1 + 32) + 316);
        LogPrintF();
      }
      return [*(id *)(a1 + 32) _updateAdvertisementSuppression:*(_DWORD *)(*(void *)(a1 + 32) + 316) == 1, v6, v7];
    }
  }
  return result;
}

void sub_10007C2BC(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 52);
  if (v2 != -1)
  {
    uint64_t state64 = 0;
    notify_get_state(v2, &state64);
    uint64_t v3 = state64;
    if (dword_1009667F0 <= 30 && (dword_1009667F0 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v6 = [*(id *)(a1 + 32) _slicingLLPHSStateNotificationValueToString:v3];
      LogPrintF();
    }
    int v4 = v3 == 2;
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (*(unsigned __int8 *)(v5 + 56) != v4)
      {
        *(unsigned char *)(v5 + 56) = v4;
        [*(id *)(*(void *)(a1 + 32) + 64) publishCellularSlicingEnabledAs:*(unsigned __int8 *)(*(void *)(a1 + 32) + 56)];
      }
    }
  }
}

id sub_10007C56C()
{
  if (qword_10097FCC0 != -1) {
    dispatch_once(&qword_10097FCC0, &stru_1008CB8E0);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_10097FCC8, "RPOptionSenderModelID");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FCB8, *v0);
  }
  off_100966860 = (uint64_t (*)())sub_10007C5FC;
  uint64_t v1 = (void *)qword_10097FCB8;

  return v1;
}

id sub_10007C5FC()
{
  return (id)qword_10097FCB8;
}

void sub_10007C608(id a1)
{
  qword_10097FCC8 = (uint64_t)dlopen("/System/Library/Frameworks/Rapport.framework/Rapport", 2);
}

void sub_10007C688(id a1)
{
  if ((SFIsDeviceAudioAccessory() & 1) == 0)
  {
    uint64_t v1 = objc_alloc_init(SDHotspotBrowser);
    int v2 = (void *)qword_10097FCD0;
    qword_10097FCD0 = (uint64_t)v1;
  }
}

id sub_10007C8A8(uint64_t a1)
{
  int v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Activating legacy browser", v7, 2u);
  }

  id v3 = [objc_alloc((Class)IDSContinuity) initWithDelegate:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 56)];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 72);
  *(void *)(v4 + 72) = v3;

  [*(id *)(a1 + 32) addObservers];
  [*(id *)(a1 + 32) stopAdvertisingResponse];
  [*(id *)(a1 + 32) stopAdvertisingTetheringRequest];
  [*(id *)(a1 + 32) updateHasAppleID];
  [*(id *)(a1 + 32) updateIDHash];
  return [*(id *)(a1 + 32) tetheringSupportChanged];
}

void sub_10007C9E0(uint64_t a1)
{
  int v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Invalidating legacy browser", v7, 2u);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 11) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 12) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 14) = 0;
  [*(id *)(a1 + 32) removeObservers];
  [*(id *)(a1 + 32) stopAdvertisingResponse];
  [*(id *)(a1 + 32) stopAdvertisingTetheringRequest];
  [*(id *)(a1 + 32) stopConsumerScanning];
  [*(id *)(a1 + 32) stopProducerScanning];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = 0;

  [*(id *)(*(void *)(a1 + 32) + 40) removeDelegate:];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0;
}

void sub_10007CB58(uint64_t a1)
{
}

void sub_10007CBFC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(v3 + 80);
  uint64_t v4 = (id *)(v3 + 80);
  uint64_t v5 = v6;
  if (v2)
  {
    if (!v5)
    {
      objc_storeStrong(v4, v2);
      uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 80);
      [v7 addDelegate:v7 queue:v7];
    }
  }
  else if (v5)
  {
    [v5 removeDelegate:];
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = *(void **)(v8 + 80);
    *(void *)(v8 + 80) = 0;
  }
}

void *sub_10007CD08(void *result)
{
  uint64_t v1 = result[4];
  int v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 8) != v2)
  {
    uint64_t v3 = result;
    *(unsigned char *)(v1 + 8) = v2;
    uint64_t v4 = tethering_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v3[4] + 8)) {
        CFStringRef v5 = @"YES";
      }
      else {
        CFStringRef v5 = @"NO";
      }
      int v7 = 138412290;
      CFStringRef v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Legacy scan state changed: %@", (uint8_t *)&v7, 0xCu);
    }

    uint64_t v6 = (unsigned char *)v3[4];
    if (v6[8]) {
      return [v6 restartProducerScanning];
    }
    else {
      return [v6 stopProducerScanning];
    }
  }
  return result;
}

void *sub_10007CE74(void *result)
{
  if (*(unsigned __int8 *)(result[4] + 9) != *((unsigned __int8 *)result + 40))
  {
    uint64_t v1 = result;
    int v2 = tethering_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *((unsigned __int8 *)v1 + 40);
      v4[0] = 67109120;
      v4[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Legacy D2D encryption state changed: %{BOOL}d", (uint8_t *)v4, 8u);
    }

    *(unsigned char *)(v1[4] + 9) = *((unsigned char *)v1 + 40);
    return [(id)v1[4] restartProducerScanning];
  }
  return result;
}

void sub_10007E360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007E378(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v9 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v6 = [v9 remoteHotspotDevice];
    int v7 = [v6 deviceIdentifier];
    unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

    if (v8)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
    }
  }
}

id sub_10007E9C8(uint64_t a1)
{
  int v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "altDSIDUpdated", v4, 2u);
  }

  return [*(id *)(a1 + 32) updateAccountState];
}

id sub_10007EE70(uint64_t a1)
{
  int v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Apple ID changed", v4, 2u);
  }

  return [*(id *)(a1 + 32) updateAccountState];
}

id sub_10007EF58(uint64_t a1)
{
  int v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Apple Account signed in", v4, 2u);
  }

  return [*(id *)(a1 + 32) updateAccountState];
}

id sub_10007F040(uint64_t a1)
{
  int v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Apple Account signed out", v4, 2u);
  }

  return [*(id *)(a1 + 32) updateAccountState];
}

id sub_10007F168(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 64) screenOn]) {
    [*(id *)(a1 + 32) updateIDHashAndRestart];
  }
  unsigned int v2 = [*(id *)(a1 + 32) bluetoothAllowedForScreenState];
  int v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 restartAdvertisingTetheringRequest];
    uint64_t v4 = *(void **)(a1 + 32);
    return [v4 restartConsumerScanning];
  }
  else
  {
    [v3 stopAdvertisingTetheringRequest];
    uint64_t v6 = *(void **)(a1 + 32);
    return [v6 stopConsumerScanning];
  }
}

id sub_10007F264(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 48) maxConnectionsReached];
  if (result)
  {
    int v3 = tethering_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Max connections reached, stopping response", v4, 2u);
    }

    return [*(id *)(a1 + 32) stopAdvertisingResponse];
  }
  return result;
}

void sub_10007F380(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) name];
  unsigned int v3 = [v2 isEqualToString:SFWiFiPasswordSharingAdvertisingBegan];

  if (v3)
  {
    uint64_t v4 = tethering_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WiFi password sharing began", buf, 2u);
    }

    uint64_t v5 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v5 + 12))
    {
      if (!*(unsigned char *)(v5 + 13))
      {
        *(unsigned char *)(v5 + 13) = 1;
        [*(id *)(a1 + 40) stopAdvertisingTetheringRequest];
      }
    }
  }
  else
  {
    uint64_t v6 = [*(id *)(a1 + 32) name];
    unsigned int v7 = [v6 isEqualToString:SFWiFiPasswordSharingAdvertisingEnded];

    if (v7)
    {
      unsigned int v8 = tethering_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WiFi password sharing ended", v10, 2u);
      }

      uint64_t v9 = *(void *)(a1 + 40);
      if (*(unsigned char *)(v9 + 13))
      {
        *(unsigned char *)(v9 + 13) = 0;
        [*(id *)(a1 + 40) restartAdvertisingTetheringRequest];
      }
    }
  }
}

id sub_10007FE08(uint64_t a1)
{
  unsigned int v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(*(void *)(a1 + 32) + 48) isTetheringSupported];
    CFStringRef v4 = @"NO";
    if (v3) {
      CFStringRef v4 = @"YES";
    }
    int v8 = 138412290;
    CFStringRef v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tethering support changed = %@", (uint8_t *)&v8, 0xCu);
  }

  unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 48) isTetheringSupported];
  uint64_t v6 = *(void **)(a1 + 32);
  if (v5) {
    return [v6 restartProducerScanning];
  }
  [v6 stopProducerScanning];
  return [*(id *)(a1 + 32) stopAdvertisingResponse];
}

void *sub_100080594(void *result)
{
  if (!*(unsigned char *)(result[4] + 12))
  {
    uint64_t v1 = result;
    unsigned int v2 = tethering_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting Browsing", v3, 2u);
    }

    *(unsigned char *)(v1[4] + 12) = 1;
    [(id)v1[4] restartAdvertisingTetheringRequest];
    *(unsigned char *)(v1[4] + 11) = 1;
    return [(id)v1[4] restartConsumerScanning];
  }
  return result;
}

void *sub_1000806B8(void *result)
{
  if (*(unsigned char *)(result[4] + 12))
  {
    uint64_t v1 = result;
    unsigned int v2 = tethering_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping Browsing", v3, 2u);
    }

    *(unsigned char *)(v1[4] + 12) = 0;
    [(id)v1[4] stopAdvertisingTetheringRequest];
    *(unsigned char *)(v1[4] + 11) = 0;
    [(id)v1[4] stopConsumerScanning];
    return [*(id *)(v1[4] + 152) removeAllObjects];
  }
  return result;
}

void sub_100080820(uint64_t a1)
{
  unsigned int v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) deviceName];
    CFStringRef v4 = [*(id *)(a1 + 32) deviceIdentifier];
    unsigned int v5 = [*(id *)(a1 + 32) batteryLife];
    *(_DWORD *)buf = 138412802;
    id v46 = v3;
    __int16 v47 = 2112;
    __int16 v48 = v4;
    __int16 v49 = 2112;
    uint64_t v50 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling hotspot for device (name = %@, identifier = %@, batteryLife = %@)", buf, 0x20u);
  }
  if ([*(id *)(*(void *)(a1 + 40) + 72) state] != (id)3)
  {
    id v27 = tethering_log();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_100085460();
    }

    NSErrorUserInfoKey v39 = NSLocalizedDescriptionKey;
    CFStringRef v40 = @"Tethering communication state is not on";
    id v28 = +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
    NSErrorDomain v29 = NSPOSIXErrorDomain;
    uint64_t v30 = 104;
    goto LABEL_17;
  }
  uint64_t v6 = [*(id *)(a1 + 32) deviceIdentifier];

  if (!v6)
  {
    id v31 = tethering_log();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      sub_1000853C4();
    }

    NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
    CFStringRef v42 = @"No peer for device requested";
    id v28 = +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
    NSErrorDomain v29 = NSPOSIXErrorDomain;
    uint64_t v30 = 94;
LABEL_17:
    id v9 = +[NSError errorWithDomain:v29 code:v30 userInfo:v28];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_22;
  }
  id v7 = objc_alloc((Class)NSUUID);
  int v8 = [*(id *)(a1 + 32) deviceIdentifier];
  id v9 = [v7 initWithUUIDString:v8];

  v43[0] = @"HotspotMessageVersion";
  v43[1] = @"HotspotBrowserMessageType";
  v44[0] = &off_100902748;
  v44[1] = &off_100902760;
  id v10 = +[NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:2];
  long long v11 = tethering_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v46 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Requesting credentials from bluetooth peer = %@", buf, 0xCu);
  }

  long long v12 = *(void **)(a1 + 40);
  id v37 = 0;
  id v38 = 0;
  unsigned int v13 = [v12 sendMessage:v10 toPeer:v9 isRequest:1 messageID:0 error:&v38 identifier:&v37];
  id v14 = v38;
  id v15 = v37;
  if (v13)
  {
    id v16 = [*(id *)(a1 + 48) copy];
    id v17 = *(void **)(*(void *)(a1 + 40) + 120);
    id v18 = [*(id *)(a1 + 32) deviceIdentifier];
    [v17 setObject:v16 forKeyedSubscript:v18];

    long long v19 = *(void **)(a1 + 40);
    long long v20 = [*(id *)(a1 + 32) deviceIdentifier];
    [v19 invalidateTimerWithIdentifier:v20];

    id v21 = *(void **)(a1 + 40);
    id v22 = [*(id *)(a1 + 32) deviceIdentifier];
    [v21 addRetrieveTimer:v22];

    id v23 = [SDHotspotRequestRecord alloc];
    uint64_t v24 = *(void *)(a1 + 32);
    long long v25 = +[NSDate date];
    id v26 = [(SDHotspotRequestRecord *)v23 initWithHotspotDevice:v24 startTime:v25 requestID:v15];

    if (v15) {
      [*(id *)(*(void *)(a1 + 40) + 200) setObject:v26 forKeyedSubscript:v15];
    }
  }
  else
  {
    uint64_t v32 = tethering_log();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      sub_1000853F8();
    }

    id v33 = *(void **)(a1 + 40);
    uint64_t v34 = (void *)v33[23];
    id v35 = [*(id *)(a1 + 32) deviceIdentifier];
    id v36 = [v33 modelCodeForIdentifier:v35];
    sub_100047454(v34, v36, v14, 3, 0);

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }

LABEL_22:
}

void sub_100080DAC(uint64_t a1)
{
  id v2 = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"retrieveTimerFired:" selector:*(void *)(a1 + 40) userInfo:0 repeats:30.0];
  [*(id *)(*(void *)(a1 + 32) + 128) setObject:v2 forKeyedSubscript:*(void *)(a1 + 40)];
}

id sub_100080EE8(uint64_t a1)
{
  id v2 = (uint64_t *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    unsigned int v3 = (id *)(a1 + 40);
    uint64_t v4 = [[*(id *)(*(void *)(a1 + 40) + 120) objectForKeyedSubscript:];
    if (v4)
    {
      NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
      CFStringRef v19 = @"Retrieving credentials timed out";
      unsigned int v5 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
      uint64_t v6 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:60 userInfo:v5];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v6);

      [*((id *)*v3 + 15) removeObjectForKey:*v2];
      id v7 = tethering_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10008555C((uint64_t)v2, v7, v8, v9, v10, v11, v12, v13);
      }

      if (![*v3 outstandingRequestsHasHotspotDeviceForID:*v2]) {
        goto LABEL_12;
      }
      id v14 = (void *)*((void *)*v3 + 23);
      id v15 = [*v3 modelCodeForIdentifier:*v2];
      id v16 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:60 userInfo:0];
      sub_100047454(v14, v15, v16, 5, 0);
    }
    else
    {
      id v15 = tethering_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_1000854C8(v2, a1 + 40, v15);
      }
    }

LABEL_12:
    [*((id *)*v3 + 16) removeObjectForKey:*v2];
    goto LABEL_13;
  }
  uint64_t v4 = tethering_log();
  if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR)) {
    sub_100085494();
  }
LABEL_13:

  return [*(id *)(a1 + 48) invalidate];
}

void sub_1000826F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSMutableDictionary dictionary];
  [v4 setObject:&off_100902748 forKeyedSubscript:@"HotspotMessageVersion"];
  [v4 setObject:&off_100902748 forKeyedSubscript:@"HotspotBrowserMessageType"];
  [v4 setObject:v3 forKeyedSubscript:@"HotspotBroswerCredentialData"];

  unsigned int v5 = tethering_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending credentials to peer = %@", buf, 0xCu);
  }

  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = [*(id *)(a1 + 56) outgoingResponseIdentifier];
  id v12 = 0;
  LOBYTE(v7) = [v7 sendMessage:v4 toDeviceWithID:v8 isRequest:0 messageID:v9 error:&v12 identifier:0];
  id v10 = v12;

  if ((v7 & 1) == 0)
  {
    uint64_t v11 = tethering_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1000857D4();
    }
  }
}

void sub_100082CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100082D18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleScanResetTimerFired];
}

void sub_100082FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100083018(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleScanAssertionTimerFired];
}

void sub_100083554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_10008367C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(NSObject **)(v13 + 56);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000837A8;
  v19[3] = &unk_1008CBA50;
  id v20 = v9;
  id v21 = v10;
  id v22 = v11;
  uint64_t v23 = v13;
  id v24 = v12;
  id v25 = *(id *)(a1 + 40);
  id v15 = v12;
  id v16 = v11;
  id v17 = v10;
  id v18 = v9;
  dispatch_async(v14, v19);
}

void sub_1000837A8(uint64_t a1)
{
  if (*(void *)(a1 + 32) && *(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    [*(id *)(a1 + 56) credentialLog:];
    long long v25 = *(_OWORD *)(a1 + 32);
    v24[0] = @"HotspotCredentialName";
    v24[1] = @"HotspotCredentialPassword";
    v24[2] = @"HotspotCredentialChannel";
    uint64_t v26 = *(void *)(a1 + 48);
    id v2 = (uint64_t *)&v25;
    id v3 = (const __CFString **)v24;
    uint64_t v4 = 3;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 64);
    CFStringRef v22 = @"HotspotCredentialError";
    uint64_t v23 = v5;
    id v2 = &v23;
    id v3 = &v22;
    uint64_t v4 = 1;
  }
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:v2 forKeys:v3 count:v4];
  id v7 = +[NSKeyedArchiver archivedDataWithRootObject:v6 requiringSecureCoding:1 error:0];
  uint64_t v8 = tethering_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(void *)(a1 + 40)) {
      CFStringRef v11 = @"YES";
    }
    else {
      CFStringRef v11 = @"NO";
    }
    uint64_t v12 = *(void *)(a1 + 64);
    int v14 = 138413058;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    uint64_t v17 = v9;
    __int16 v18 = 2112;
    CFStringRef v19 = v11;
    __int16 v20 = 2112;
    uint64_t v21 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Credentials (name = %@, channel = %@, password = %@, SInt32 error = %@)", (uint8_t *)&v14, 0x2Au);
  }

  uint64_t v13 = tethering_log();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
    sub_1000858B4((uint64_t)v6, v7, v13);
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_1000842D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1000844E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1000847FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_100084964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_100084B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_100084C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_100084DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_10008516C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No apple ID hash", v2, v3, v4, v5, v6);
}

void sub_1000851A0(char a1, char a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1 & 1;
  __int16 v4 = 1024;
  int v5 = a2 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "realityDevice: %{BOOL}d, manateeUnavailable: %{BOOL}d", (uint8_t *)v3, 0xEu);
}

void sub_100085230(void *a1)
{
  uint64_t v2 = +[NSDate date];
  [a1 timeIntervalSinceDate:v2];
  sub_100071574((void *)&_mh_execute_header, v3, v4, "timeUntilTomorrow returned a negative number = %f", v5, v6, v7, v8, 0);
}

void sub_1000852D8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No peer to send to", v2, v3, v4, v5, v6);
}

void sub_10008530C(void *a1)
{
  uint64_t v1 = [a1 UUIDString];
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v2, v3, "No device found for identifier %@", v4, v5, v6, v7, v8);
}

void sub_100085390()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No deviceID to send to", v2, v3, v4, v5, v6);
}

void sub_1000853C4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No peer to enable", v2, v3, v4, v5, v6);
}

void sub_1000853F8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Message failed to send with immediate SInt32 error = %@", v2, v3, v4, v5, v6);
}

void sub_100085460()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Bluetooth not powered on, cannot send request", v2, v3, v4, v5, v6);
}

void sub_100085494()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Timer does not have user info", v2, v3, v4, v5, v6);
}

void sub_1000854C8(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*(void *)a2 + 120);
  int v5 = 138412546;
  uint64_t v6 = v3;
  __int16 v7 = 2112;
  uint64_t v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No handler for retrieve timeout (identifier = %@, handlers = %@)", (uint8_t *)&v5, 0x16u);
}

void sub_10008555C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018D34((void *)&_mh_execute_header, a2, a3, "Called handler with timeout error (identifier = %@)", a5, a6, a7, a8, 2u);
}

void sub_1000855CC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Did not start advertising request", v2, v3, v4, v5, v6);
}

void sub_100085600()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create advertisement packet, did not start advertising response", v2, v3, v4, v5, v6);
}

void sub_100085634()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create scan filter data, not scanning", v2, v3, v4, v5, v6);
}

void sub_100085668()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not find iCloud Paired Device for incoming advertising", v2, v3, v4, v5, v6);
}

void sub_10008569C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Discovered device without a client proxy", v2, v3, v4, v5, v6);
}

void sub_1000856D0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Message did not contain type", v2, v3, v4, v5, v6);
}

void sub_100085704()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No fromID or peerID for request", v2, v3, v4, v5, v6);
}

void sub_100085738()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No peer ID in credentials response", v2, v3, v4, v5, v6);
}

void sub_10008576C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create peer UUID", v2, v3, v4, v5, v6);
}

void sub_1000857A0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No credentials in response", v2, v3, v4, v5, v6);
}

void sub_1000857D4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Could not send credentials response = %@", v2, v3, v4, v5, v6);
}

void sub_10008583C(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IOPMAssertionCreateWithProperties returned %x", (uint8_t *)v2, 8u);
}

void sub_1000858B4(uint64_t a1, void *a2, NSObject *a3)
{
  if (a1) {
    CFStringRef v4 = @"YES";
  }
  else {
    CFStringRef v4 = @"NO";
  }
  int v5 = 138412802;
  CFStringRef v6 = v4;
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  __int16 v9 = 2048;
  id v10 = [a2 length];
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Returning credentials = %@, with data = %@, length = %ld", (uint8_t *)&v5, 0x20u);
}

void sub_100085980(void *a1, uint64_t a2, NSObject *a3)
{
  CFStringRef v4 = [a1 UUIDString];
  sub_10002972C();
  __int16 v7 = 2112;
  uint64_t v8 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "No handler for identifier = %@, handlers = %@", v6, 0x16u);
}

void sub_100085A30()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Unarchiver failed when unarchiving credentials dictionary: %@", v2, v3, v4, v5, v6);
}

void sub_100085A98()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error in credentials response = %@", v2, v3, v4, v5, v6);
}

void sub_100085B00()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Retrieving credentials returned SInt32 error = %@", v2, v3, v4, v5, v6);
}

void sub_100085B68()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Source failed to start advertising IDSContinuityTypeTetheringSourcePresence (%@)", v2, v3, v4, v5, v6);
}

void sub_100085BD0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Target failed to start advertising IDSContinuityTypeTetheringTargetPresence (%@)", v2, v3, v4, v5, v6);
}

void sub_100085C38()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Target failed to start scanning for IDSContinuityTypeTetheringSourcePresence (%@)", v2, v3, v4, v5, v6);
}

void sub_100085CA0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Source failed to start scanning for IDSContinuityTypeTetheringTargetPresence (%@)", v2, v3, v4, v5, v6);
}

void sub_1000860D4(id a1)
{
  uint64_t v1 = objc_alloc_init(SDProximityController);
  uint64_t v2 = (void *)qword_10097FCE8;
  qword_10097FCE8 = (uint64_t)v1;
}

id sub_100086400()
{
  if (qword_10097FCF8 != -1) {
    dispatch_once(&qword_10097FCF8, &stru_1008CBAB8);
  }
  uint64_t v0 = (void *)qword_10097FCF0;

  return v0;
}

id sub_100087A50(uint64_t a1)
{
  return [*(id *)(a1 + 32) _runSession];
}

void sub_100087F44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.sharing", "ProximityController");
  uint64_t v2 = (void *)qword_10097FCF0;
  qword_10097FCF0 = (uint64_t)v1;
}

uint64_t SDUnlockResetReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 28) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v28 = 24;
        goto LABEL_54;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v28 = 20;
        goto LABEL_54;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        break;
      case 4u:
        uint64_t v26 = PBReaderReadString();
        id v27 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v26;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v14 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_51;
      }
      v22 += 7;
      BOOL v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v28 = 16;
LABEL_54:
    *(_DWORD *)(a1 + v28) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100089174(uint64_t a1, void *a2)
{
  return [a2 updatedTransfer:*(void *)(a1 + 32)];
}

id sub_100089218(uint64_t a1, void *a2)
{
  return _[a2 removedTransfer:*(void *)(a1 + 32)];
}

void sub_10008A268(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  char v4 = [*(id *)(a1 + 32) transferIdentifierToTransfer:0];
  unsigned int v5 = [v4 allValues];

  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      BOOL v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        [v3 updatedTransfer:*(void *)(*((void *)&v10 + 1) + 8 * (void)v9)];
        BOOL v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

void sub_10008A65C(uint64_t a1, uint64_t a2)
{
  char v4 = [*(id *)(a1 + 32) dispatchQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008A710;
  block[3] = &unk_1008CBB30;
  unsigned int v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  uint64_t v8 = a2;
  id v7 = v5;
  dispatch_async(v4, block);
}

id sub_10008A710(uint64_t a1)
{
  return [*(id *)(a1 + 32) setTransferState:*(void *)(a1 + 48) forTransfer:*(void *)(a1 + 40) shouldNotify:1];
}

void sub_10008A724(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v8 = [*(id *)(a1 + 32) dispatchQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008A7F0;
  block[3] = &unk_1008CBBA8;
  char v12 = a2;
  BOOL v9 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v11 = v9;
  char v13 = a3;
  char v14 = a4;
  dispatch_async(v8, block);
}

void sub_10008A7F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 49))
    {
      [v2 setTransferState:7 forTransfer:v3 shouldNotify:1];
      dispatch_time_t v4 = dispatch_time(0, 5000000000);
      unsigned int v5 = [*(id *)(a1 + 32) dispatchQueue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10008A938;
      block[3] = &unk_1008CBB80;
      id v6 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v11 = v6;
      char v12 = *(unsigned char *)(a1 + 50);
      dispatch_after(v4, v5, block);
    }
    else
    {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 50);
      [v2 setTransferState:8 forTransfer:v3 shouldNotify:1 shouldCleanup:v9];
    }
  }
  else
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    _[v7 handlerFailedForTransfer:v8];
  }
}

id sub_10008A938(uint64_t a1)
{
  return [*(id *)(a1 + 32) setTransferState:8 forTransfer:*(void *)(a1 + 40) shouldNotify:1 shouldCleanup:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10008B4A8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v11 = a2;
  id v7 = a3;
  uint64_t v8 = +[NSString stringWithFormat:@"%@/%@", v11, v7];
  uint64_t v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];

  if (v9)
  {
    id v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:v8];
    [v10 incrementCount];
  }
  else
  {
    id v10 = [objc_alloc((Class)SFAirDropTransferItem) initWithType:v11 subtype:v7 isFile:a4];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v8];
  }
}

void sub_10008B734()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Progress event for recordID %@: transfer not found, ignoring.", v2, v3, v4, v5, v6);
}

void sub_10008B79C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Cancel event for recordID %@: transfer not found, ignoring.", v2, v3, v4, v5, v6);
}

void sub_10008B804()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error event for recordID %@: transfer not found, ignoring", v2, v3, v4, v5, v6);
}

void sub_10008B86C()
{
  sub_10008B728();
  uint64_t v1 = [v0 objectForKeyedSubscript:kSFOperationErrorKey];
  uint64_t v2 = [v1 localizedDescription];
  sub_10008B710();
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Error event %@ for recordID %@", v5, v6, v7, v8, v9);
}

void sub_10008B914()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Finished event for recordID %@: transfer not found, ignoring.", v2, v3, v4, v5, v6);
}

void sub_10008B97C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unhandled user response", v1, 2u);
}

void sub_10008B9C0()
{
  sub_10008B728();
  uint64_t v1 = [v0 identifier];
  sub_10008B710();
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "No handler for transfer with id %@, ignore action triggered event for action %@", v4, v5, v6, v7, v8);
}

void sub_10008BA4C(uint64_t a1, void *a2)
{
  uint8_t v8 = [a2 identifier];
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "Handler %@ failed for transfer with id %@", v4, v5, v6, v7, 2u);
}

void sub_10008BAF0()
{
  sub_10008B728();
  uint64_t v1 = [v0 identifier];
  uint8_t v8 = SFAirDropTransferFailureReasonToString();
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "Transfer with id %@ failed with reason %@", v4, v5, v6, v7, 2u);
}

void sub_10008BBA0()
{
  sub_10008B728();
  uint64_t v2 = v1;
  [v1 transferState];
  uint64_t v3 = SFAirDropTransferStateToString();
  uint64_t v4 = SFAirDropTransferStateToString();
  uint64_t v5 = [v2 identifier];
  int v6 = 138412802;
  uint64_t v7 = v3;
  __int16 v8 = 2112;
  uint8_t v9 = v4;
  __int16 v10 = 2112;
  id v11 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Set transfer state %@ -> %@ for transfer with id %@", (uint8_t *)&v6, 0x20u);
}

void sub_10008BC84()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Remove URL failed with error %@", v2, v3, v4, v5, v6);
}

void sub_10008BD40(id a1)
{
  uint64_t v1 = +[SDStatusMonitor sharedMonitor];
  unsigned int v2 = [v1 enableContinuity];

  if (v2)
  {
    uint64_t v3 = objc_alloc_init(SDActivityAdvertiser);
    uint64_t v4 = (void *)qword_10097FD00;
    qword_10097FD00 = (uint64_t)v3;
  }
}

void sub_10008C820(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_10008C8A8;
  v2[3] = &unk_1008CBCA0;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _enumerateRemoteObjectProxiesUsingBlock:v2];
}

id sub_10008C8A8(uint64_t a1, void *a2)
{
  return _[a2 pairedDevicesChanged:*(void *)(a1 + 32)];
}

id sub_10008CD4C(void *a1, void *a2)
{
  return [a2 didSendPayloadForActivityIdentifier:a1[4] toDevice:a1[5] error:a1[6]];
}

id sub_10008CE64(void *a1, void *a2)
{
  return [a2 activityPayloadForAdvertisementPayload:a1[4] command:a1[5] requestedByDevice:a1[6] withCompletionHandler:a1[7]];
}

void sub_10008D7E4(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  [*(id *)(a1 + 32) invalidateGoodbyeTimer];
  unsigned int v2 = handoff_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10008F1E8(v1, v2);
  }

  uint64_t v3 = +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(double *)(*(void *)v1 + 96));
  uint64_t v4 = *(void **)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 104) = v3;
}

void sub_10008DC3C(uint64_t a1, char a2, unsigned char *a3, int a4)
{
  uint8_t v6 = *(unsigned char **)(a1 + 40);
  v6[3] = a2;
  v6[1] = *a3;
  _DWORD v6[2] = a3[1];
  uint64_t v7 = handoff_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    __int16 v8 = SFHexStringForData();
    uint8_t v9 = +[NSData dataWithBytes:*(void *)(a1 + 40) + 4 length:10];
    __int16 v10 = SFHexStringForData();
    int v11 = 138412802;
    char v12 = v8;
    __int16 v13 = 2112;
    char v14 = v10;
    __int16 v15 = 1024;
    int v16 = a4;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Encrypted (sharing flags + advertisementPayload): %@ => %@, counter %u", (uint8_t *)&v11, 0x1Cu);
  }
}

void sub_10008DF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_10008E078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_10008E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_10008E384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_10008E4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_10008E5F4(uint64_t a1)
{
  unsigned int v2 = handoff_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = SFAdvertisementDescriptionFromPayloadData();
    uint64_t v4 = SFCompactStringFromCollection();
    *(_DWORD *)buf = 138412546;
    id v36 = v3;
    __int16 v37 = 2112;
    id v38 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Request to advertise %@ with options %@", buf, 0x16u);
  }
  uint64_t v5 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"name"];

  if (v5)
  {
    uint8_t v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"name"];
    uint64_t v7 = [v6 componentsSeparatedByString:@"-"];

    if ((unint64_t)[v7 count] >= 5)
    {
      __int16 v8 = [v7 objectAtIndexedSubscript:5];
      *(_DWORD *)(*(void *)(a1 + 48) + 156) = [v8 intValue];
    }
  }
  unint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = v9 | *(void *)(*(void *)(a1 + 48) + 160);
  unsigned int v11 = [v9 isEqual:];
  unint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 168);
  unsigned int v14 = [(id)v12 isEqual:v13];
  if (v10) {
    int v15 = v11;
  }
  else {
    int v15 = 1;
  }
  int v16 = v14 ^ 1;
  if (!(v12 | v13)) {
    int v16 = 0;
  }
  if (v15 == 1 && v16 == 0)
  {
    uint64_t v26 = handoff_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Advertisement contents does not differ from current, continuing previous advertising", buf, 2u);
    }
    goto LABEL_22;
  }
  [*(id *)(a1 + 48) invalidateGoodbyeTimer];
  *(unsigned char *)(*(void *)(a1 + 48) + 120) = 1;
  id v18 = [*(id *)(a1 + 32) copy];
  uint64_t v19 = *(void *)(a1 + 48);
  unint64_t v20 = *(void **)(v19 + 160);
  *(void *)(v19 + 160) = v18;

  id v21 = [*(id *)(a1 + 40) copy];
  uint64_t v22 = *(void *)(a1 + 48);
  unsigned int v23 = *(void **)(v22 + 168);
  *(void *)(v22 + 168) = v21;

  if (([*(id *)(a1 + 48) updateAdvertiser] & 1) == 0)
  {
    uint64_t v26 = +[SDStatusMonitor sharedMonitor];
    if (![v26 alwaysSendPayload])
    {
LABEL_22:

      return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), 0, v24, v25);
    }
    uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 160);

    if (v27)
    {
      id v28 = [*(id *)(*(void *)(a1 + 48) + 144) copy];
      NSErrorDomain v29 = *(void **)(a1 + 48);
      uint64_t v30 = v29[20];
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_10008E958;
      v32[3] = &unk_1008CBD60;
      id v33 = v28;
      id v34 = *(id *)(a1 + 32);
      uint64_t v26 = v28;
      [v29 activityPayloadForAdvertisementPayload:v30 command:0 requestedByDevice:0 withCompletionHandler:v32];

      goto LABEL_22;
    }
  }
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), 0, v24, v25);
}

void sub_10008E958(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = +[SDActivityPayloadManager sharedPayloadManager];
  [v7 sendActivityPayloadWithAdvertisementData:*(void *)(a1 + 32) forAdvertisementPayload:*(void *)(a1 + 40) activityIdentifier:v6 activityPayload:v5];
}

void sub_10008EA78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) appleID];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_10008EB9C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) idsDeviceFromBTIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = sub_1000C9CC4(v2);
    if (v4)
    {
      id v8 = (id)v4;
      id v5 = +[SDActivityEncryptionManager sharedEncryptionManager];
      id v6 = [v8 uniqueID];
      id v7 = [v5 cachedDecryptionKeyForDeviceIdentifier:v6];

      if (v7)
      {
        [v8 setValidKey:[v7 isValidKey]];
        [v8 setKeyCounter:[v7 lastUsedCounter]];
      }

      uint64_t v4 = (uint64_t)v8;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  id v9 = (id)v4;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10008ED48(uint64_t a1)
{
  unsigned int v14 = +[NSMutableSet set];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = [*(id *)(a1 + 32) allPeerBTIdentifiers];
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(a1 + 32);
        id v8 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)v6) UUIDString];
        id v9 = [v7 idsDeviceFromBTIdentifier:v8];

        if (v9)
        {
          unint64_t v10 = sub_1000C9CC4(v9);
          if (v10)
          {
            unsigned int v11 = +[SDActivityEncryptionManager sharedEncryptionManager];
            unint64_t v12 = [v10 uniqueID];
            uint64_t v13 = [v11 cachedDecryptionKeyForDeviceIdentifier:v12];

            if (v13)
            {
              [v10 setValidKey:[v13 isValidKey]];
              [v10 setKeyCounter:[v13 lastUsedCounter]];
            }
            [v14 addObject:v10];
          }
        }

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10008F044()
{
  if (qword_10097FD18 != -1) {
    dispatch_once(&qword_10097FD18, &stru_1008CBDA8);
  }
  id v0 = (id *)dlsym((void *)qword_10097FD20, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FD10, *v0);
  }
  off_100966CF0 = (uint64_t (*)())sub_10008F0D4;
  uint64_t v1 = (void *)qword_10097FD10;

  return v1;
}

id sub_10008F0D4()
{
  return (id)qword_10097FD10;
}

void sub_10008F0E0(id a1)
{
  qword_10097FD20 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

void sub_10008F10C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_10008F128(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_10008F140()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Advertising client arrived", v2, v3, v4, v5, v6);
}

void sub_10008F174()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Advertising client went away", v2, v3, v4, v5, v6);
}

void sub_10008F1A8()
{
  sub_10001587C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Trying to grab power assertion while we already have one", v1, 2u);
}

void sub_10008F1E8(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  float v6 = *(double *)(*(void *)a1 + 96);
  int v7 = 138412546;
  id v8 = v5;
  __int16 v9 = 2048;
  double v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@ startGoodbyeTimer with time interval %.2f", (uint8_t *)&v7, 0x16u);
}

void sub_10008F2B8(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  int v6 = 138412290;
  int v7 = v4;
  sub_10008F128((void *)&_mh_execute_header, a2, v5, "%@ invalidateGoodbyeTimer", (uint8_t *)&v6);
}

void sub_10008F34C(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  int v6 = 138412290;
  int v7 = v4;
  sub_10008F128((void *)&_mh_execute_header, a2, v5, "%@ goodbyeTimeoutFired", (uint8_t *)&v6);
}

void sub_10008F3E0(id *a1, NSObject *a2)
{
  unsigned int v3 = [*a1 length];
  v4[0] = 67109376;
  v4[1] = v3;
  __int16 v5 = 1024;
  int v6 = 9;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Ignoring currentAdvertisementPayload because it is of incorrect size %d, should be %d", (uint8_t *)v4, 0xEu);
}

void sub_10008F480()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "continuityDidUpdateState: Powered on", v2, v3, v4, v5, v6);
}

void sub_10008F4B4()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "continuityDidUpdateState: Powered off", v2, v3, v4, v5, v6);
}

void sub_10008F4E8()
{
  sub_10001587C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "continuityDidUpdateState: Unknown", v1, 2u);
}

void sub_10008F528()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "continuityDidUpdateState: Resetting", v2, v3, v4, v5, v6);
}

void sub_10008F55C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  sub_10008F128((void *)&_mh_execute_header, a3, (uint64_t)a3, "Did update state to %s", (uint8_t *)a2);
}

void sub_10008F59C(unint64_t a1, NSObject *a2, uint64_t a3)
{
  if (a1 > 3) {
    uint64_t v3 = "UnexpectedType";
  }
  else {
    uint64_t v3 = off_1008CBD38[a1];
  }
  int v4 = 136315138;
  uint64_t v5 = v3;
  sub_10008F128((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStartAdvertisingOfType: %s", (uint8_t *)&v4);
}

void sub_10008F62C(unint64_t a1, NSObject *a2, uint64_t a3)
{
  if (a1 > 3) {
    uint64_t v3 = "UnexpectedType";
  }
  else {
    uint64_t v3 = off_1008CBD38[a1];
  }
  int v4 = 136315138;
  uint64_t v5 = v3;
  sub_10008F128((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStopAdvertisingOfType: %s", (uint8_t *)&v4);
}

void sub_10008F6BC(unint64_t a1, uint64_t a2, os_log_t log)
{
  if (a1 > 3) {
    uint64_t v3 = "UnexpectedType";
  }
  else {
    uint64_t v3 = off_1008CBD38[a1];
  }
  int v4 = 136315394;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "IDSContinuity didStopAdvertisingOfType: %s withError: %@", (uint8_t *)&v4, 0x16u);
}

void sub_10008F764(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136315394;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Did fail to start advertising for %s (%@)", buf, 0x16u);
}

void sub_10008FCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008FCC8(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (v1) {
    [WeakRetained openCompletedItemsWithFilesApp];
  }
  else {
    [WeakRetained saveCompletedItemsToiCloudDrive];
  }
}

void sub_1000900AC(uint64_t a1)
{
  uint64_t v2 = airdrop_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finished opening %@", (uint8_t *)&v5, 0xCu);
  }

  if (*(unsigned char *)(a1 + 48))
  {
    int v4 = [*(id *)(a1 + 40) completionHandler];
    v4[2](v4, *(unsigned __int8 *)(a1 + 49), 0, 1);
  }
}

id sub_1000903F4()
{
  if (qword_10097FD30 != -1) {
    dispatch_once(&qword_10097FD30, &stru_1008CBE18);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_10097FD38, "BRUbiquitousDefaultContainerID");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FD28, *v0);
  }
  off_100966CF8 = (uint64_t (*)())sub_100090484;
  int v1 = (void *)qword_10097FD28;

  return v1;
}

id sub_100090484()
{
  return (id)qword_10097FD28;
}

void sub_100090490(id a1)
{
  qword_10097FD38 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs", 2);
}

void sub_1000904BC(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No items to open with Files App", v1, 2u);
}

void sub_100090500(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to process items to iCloud drive as it does not seem to be enabled", v1, 2u);
}

void sub_100090544(void *a1, uint64_t a2, NSObject *a3)
{
  int v5 = [a1 transfer];
  int v6 = 138412546;
  uint64_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to save files to iCloud Drive for transfer %@ with error: %@", (uint8_t *)&v6, 0x16u);
}

uint64_t SDAutoUnlockProxyTriggerReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100091950(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 valueForKeyPath:@"@unionOfObjects.uniqueIDOverride"];
  char v4 = SFCompactStringFromCollection();
  int v5 = 138412290;
  unint64_t v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "nearbyDevicesChanged %@", (uint8_t *)&v5, 0xCu);
}

void sub_100091B54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained airDropStatus:*(void *)(a1 + 32) didChange:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_100091CA4(id a1)
{
  int v1 = objc_alloc_init(SDAutoUnlockSessionManager);
  uint64_t v2 = (void *)qword_10097FD40;
  qword_10097FD40 = (uint64_t)v1;
}

void sub_1000920EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_100092114(id a1)
{
  int v1 = +[SDStatusMonitor sharedMonitor];
  unsigned __int8 v2 = [v1 signedIntoPrimaryiCloudAccount];

  return v2;
}

id sub_100092154(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v2 = [WeakRetained localDeviceController];
  id v3 = [v2 faceIDEnabled];

  return v3;
}

id sub_1000921A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained cachedDeviceWiFiState];

  return v2;
}

BOOL sub_1000921DC(id a1)
{
  int v1 = +[SDStatusMonitor sharedMonitor];
  unsigned __int8 v2 = [v1 bluetoothEnabled];

  return v2;
}

BOOL sub_10009221C(id a1)
{
  int v1 = +[SDAutoUnlockTransport sharedTransport];
  unsigned __int8 v2 = [v1 activeDevice];
  unsigned __int8 v3 = [v2 isNearby];

  return v3;
}

id sub_1000922FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_start];
}

void sub_10009268C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000926B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleBioLockout];
}

void sub_1000928F0(uint64_t a1)
{
  unsigned __int8 v2 = +[SDStatusMonitor sharedMonitor];
  unsigned int v3 = [v2 deviceKeyBagUnlocked];

  char v4 = auto_unlock_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device unlocked on start up after retry", (uint8_t *)&v8, 2u);
    }

    unint64_t v6 = +[NSDate date];
    [*(id *)(a1 + 32) setLastUnlockDate:v6];

    char v4 = +[NSDate date];
    [*(id *)(a1 + 32) setLockStateChangedDate:v4];
  }
  else if (v5)
  {
    unint64_t v7 = +[SDStatusMonitor sharedMonitor];
    int v8 = 134217984;
    id v9 = [v7 deviceKeyBagState];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "### Device not unlocked on start up after retry (state: %ld)", (uint8_t *)&v8, 0xCu);
  }
}

void sub_100092CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100092D10()
{
  os_log_t v0 = auto_unlock_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Buddy setup completed. Checking whether behavior upsell is needed", buf, 2u);
  }

  int v1 = +[SDAutoUnlockSessionManager sharedManager];
  unsigned __int8 v2 = [v1 sessionManagerQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A41F0;
  block[3] = &unk_1008CA4B8;
  id v5 = v1;
  id v3 = v1;
  dispatch_async(v2, block);
}

void sub_100092E04(uint64_t a1, int token)
{
  uint64_t state64 = 0;
  if (!notify_get_state(token, &state64))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained handleDisplayStateChanged:state64];
  }
}

void sub_100092F10(uint64_t a1)
{
  unsigned __int8 v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Added SessionManager observer %@", (uint8_t *)&v5, 0xCu);
  }

  char v4 = [*(id *)(a1 + 40) observerTable];
  [v4 addObject:*(void *)(a1 + 32)];
}

void sub_100093088(uint64_t a1)
{
  unsigned __int8 v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Removed SessionManager observer %@", (uint8_t *)&v5, 0xCu);
  }

  char v4 = [*(id *)(a1 + 40) observerTable];
  [v4 removeObject:*(void *)(a1 + 32)];
}

void sub_100093200(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unsigned __int8 v2 = [*(id *)(a1 + 32) observerTable];
  uint64_t v3 = [v2 allObjects];

  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          id v9 = auto_unlock_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v15 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Calling key device locked %@", buf, 0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didReceiveKeyDeviceLocked:*(void *)(a1 + 40)];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v5);
  }
}

void sub_10009344C(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unsigned __int8 v2 = [*(id *)(a1 + 32) observerTable];
  uint64_t v3 = [v2 allObjects];

  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          id v9 = auto_unlock_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v15 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Calling enabled device %@", buf, 0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didEnableWithDevice:*(void *)(a1 + 40)];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v5);
  }
}

void sub_1000936BC(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unsigned __int8 v2 = [*(id *)(a1 + 32) observerTable];
  uint64_t v3 = [v2 allObjects];

  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          id v9 = auto_unlock_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v15 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "### Calling failed to enable %@", buf, 0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didFailToEnableDevice:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v5);
  }
}

void sub_10009390C(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unsigned __int8 v2 = [*(id *)(a1 + 32) observerTable];
  uint64_t v3 = [v2 allObjects];

  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          id v9 = auto_unlock_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v15 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Calling began %@", buf, 0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didBeginAttemptWithDevice:*(void *)(a1 + 40)];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v5);
  }
}

void sub_100093B6C(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unsigned __int8 v2 = [*(id *)(a1 + 32) observerTable];
  uint64_t v3 = [v2 allObjects];

  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          id v9 = auto_unlock_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v15 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Calling completed %@", buf, 0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didCompleteUnlockWithDevice:*(void *)(a1 + 40)];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v5);
  }
}

void sub_100093DDC(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  unsigned __int8 v2 = [*(id *)(a1 + 32) observerTable];
  uint64_t v3 = [v2 allObjects];

  id obj = v3;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(obj);
        }
        int v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if (objc_opt_respondsToSelector())
        {
          id v9 = auto_unlock_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v20 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "### Calling failed %@", buf, 0xCu);
          }

          long long v10 = *(void **)(a1 + 32);
          uint64_t v11 = *(void *)(a1 + 40);
          uint64_t v12 = *(void *)(a1 + 48);
          long long v13 = [v10 incrementedCountID];
          [v8 session:v10 didFailUnlockWithResults:v11 error:v12 incrementedAttempt:v13 != 0];
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
    }
    while (v5);
  }
}

void sub_100093FE8(id a1)
{
  int v1 = auto_unlock_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Repair cloud pairing if necessary", v3, 2u);
  }

  unsigned __int8 v2 = +[SDAutoUnlockTransport sharedTransport];
  [v2 triggerCloudPairRetryWithShortRetryDeviceIDs:0];
}

void sub_10009437C(uint64_t a1)
{
  if (sub_1000D3140())
  {
    unsigned __int8 v2 = auto_unlock_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "### No eligible devices: Auto Unlock disabled due to profile", (uint8_t *)&v19, 2u);
    }

    uint64_t v3 = *(void *)(a1 + 48);
    id v4 = objc_opt_new();
    (*(void (**)(uint64_t, void *, void))(v3 + 16))(v3, v4, 0);
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) autoUnlockTransport];
    id v5 = [v4 autoUnlockEligibleWatchesWithCloudPairing:0];
    id v6 = [v5 mutableCopy];

    unint64_t v7 = auto_unlock_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = [v6 allObjects];
      int v19 = 138412290;
      CFStringRef v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Devices %@", (uint8_t *)&v19, 0xCu);
    }
    [*(id *)(a1 + 32) eligibleDevicesFilterCompatibleDevices:v6];
    [*(id *)(a1 + 32) setEligibleDevices:v6];
    id v9 = (__CFString *)v6;
    if (([*(id *)(a1 + 40) isEqualToString:@"com.apple.preference.security.remoteservice"] & 1) != 0|| (objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", @"com.apple.Touch-ID-Settings.extension") & 1) != 0|| (objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", @"autool") & 1) != 0|| (long long v10 = v9, objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", @"com.apple.Preferences")))
    {
      uint64_t v11 = [(__CFString *)v9 allObjects];
      uint64_t v12 = sub_1000D37E4(v11);
      long long v10 = +[NSSet setWithArray:v12];

      long long v13 = auto_unlock_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 138412290;
        CFStringRef v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Devices with description %@", (uint8_t *)&v19, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    uint64_t v14 = auto_unlock_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      long long v15 = +[SDStatusMonitor sharedMonitor];
      if ([v15 deviceSupportsRanging]) {
        CFStringRef v16 = @"YES";
      }
      else {
        CFStringRef v16 = @"NO";
      }
      long long v17 = +[SDStatusMonitor sharedMonitor];
      long long v18 = [v17 modelCode];
      int v19 = 138412546;
      CFStringRef v20 = v16;
      __int16 v21 = 2112;
      uint64_t v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Ranging supported: %@ for model: %@", (uint8_t *)&v19, 0x16u);
    }
  }
}

id sub_10009498C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) createPairingLockSessionWithDevice:*(void *)(a1 + 40) passcode:*(void *)(a1 + 48)];
}

void sub_100094A24(uint64_t a1)
{
  unsigned __int8 v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cancel enabling all devices", buf, 2u);
  }

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v3 = [*(id *)(a1 + 32) lockPairingSessions];
  id v4 = [v3 allKeys];

  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      int v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(a1 + 32) cancelEnablingAutoUnlockForDeviceID:*(void *)(*((void *)&v9 + 1) + 8 * (void)v8)];
        int v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_100094C28(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) uniqueID];
  [v1 cancelEnablingAutoUnlockForDeviceID:v2];
}

void sub_1000950AC(uint64_t a1)
{
  id v2 = +[SDAutoUnlockAKSManager sharedManager];
  uint64_t v3 = [*(id *)(a1 + 32) uniqueID];
  id v9 = [v2 pairingIDForWatchID:v3];

  id v4 = *(void **)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) uniqueID];
  id v6 = [v4 disablePairingForDeviceID:v5 pairingID:v9];

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, id, void))(v7 + 16))(v7, v6, 0);
  }
  int v8 = +[SDAutoUnlockTransport sharedTransport];
  [v8 updateApproveBluetoothIDs];
}

id sub_100095428(uint64_t a1)
{
  int v2 = sub_1000D2434();
  BOOL v3 = sub_1000D259C();
  if (v2 && *(void *)(a1 + 40) == 1)
  {
    id v4 = *(void **)(a1 + 32);
LABEL_7:
    return [v4 generateAttemptForType:];
  }
  if (v3 && *(void *)(a1 + 40) == 2)
  {
    id v4 = *(void **)(a1 + 32);
    goto LABEL_7;
  }
  id v5 = *(void **)(a1 + 32);

  return _[v5 attemptAutoUnlock];
}

void sub_1000956BC(uint64_t a1)
{
  int v2 = sub_1000D2670();
  uint64_t v3 = sub_1000D2720();
  id v4 = (void *)v3;
  id v5 = @"Test Mode";
  if (v3) {
    id v5 = (__CFString *)v3;
  }
  id v6 = v5;

  uint64_t v7 = objc_opt_new();
  uint64_t v8 = v2 ^ 1u;
  id v9 = +[NSNumber numberWithInt:v8];
  [v7 setObject:v9 forKeyedSubscript:SDAutoUnlockManagerMetricSuccessKey];

  long long v10 = [*(id *)(a1 + 32) uniqueID];
  [v7 setObject:v10 forKeyedSubscript:SDAutoUnlockManagerMetricDeviceIDKey];

  [v7 setObject:*(void *)(a1 + 40) forKeyedSubscript:SDAutoUnlockManagerMetricTimeKey];
  long long v11 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
  [v7 setObject:v11 forKeyedSubscript:SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey];

  long long v12 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
  [v7 setObject:v12 forKeyedSubscript:SDAutoUnlockManagerMetricTimeSinceLastWakeKey];

  long long v13 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
  [v7 setObject:v13 forKeyedSubscript:SDAutoUnlockManagerMetricLastSleepTypeKey];

  if ((v8 & 1) == 0)
  {
    uint64_t v14 = SFAutoUnlockErrorDomain;
    [v7 setObject:SFAutoUnlockErrorDomain forKeyedSubscript:SDAutoUnlockManagerMetricErrorDomainKey];
    [v7 setObject:&off_100902850 forKeyedSubscript:SDAutoUnlockManagerMetricErrorCodeKey];
    [v7 setObject:v6 forKeyedSubscript:SDAutoUnlockManagerMetricErrorStringKey];
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    CFStringRef v32 = @"Test mode failure";
    long long v15 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    CFStringRef v16 = +[NSError errorWithDomain:v14 code:103 userInfo:v15];

    [*(id *)(a1 + 48) setCachedMetrics:v7];
    [*(id *)(a1 + 48) notifyObserversOfUnlockFailureWithResults:v7 error:v16];
    goto LABEL_22;
  }
  long long v17 = sub_1000D27C4();
  CFStringRef v16 = v17;
  if (v17)
  {
    if (*(unsigned char *)(a1 + 80))
    {
      long long v18 = [*(id *)(a1 + 48) attemptExternalACMContext];
      int v19 = sub_10001F5F8(v16, v18);

      CFStringRef v20 = auto_unlock_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v30 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Test Mode: Token: %@", buf, 0xCu);
      }

      if (v19)
      {
        [*(id *)(a1 + 32) setHintToken:v19];
LABEL_21:

        [*(id *)(a1 + 32) setResults:v7];
        [*(id *)(a1 + 48) notifyObserversOfUnlockCompletionWithDevice:*(void *)(a1 + 32)];
        goto LABEL_22;
      }
      uint64_t v25 = auto_unlock_log();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v26 = "Test Mode: Unable to create hint token";
        goto LABEL_19;
      }
    }
    else
    {
      int v19 = [v17 dataUsingEncoding:4];
      if (MKBUnlockDevice()) {
        goto LABEL_21;
      }
      uint64_t v25 = auto_unlock_log();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v26 = "Test Mode: Unlocked keybag";
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, buf, 2u);
      }
    }

    goto LABEL_21;
  }
  __int16 v21 = auto_unlock_log();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    sub_1000A4354();
  }

  uint64_t v22 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
  CFStringRef v28 = @"Missing passcode";
  unsigned int v23 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v24 = +[NSError errorWithDomain:v22 code:182 userInfo:v23];

  [*(id *)(a1 + 48) notifyObserversOfUnlockFailureWithResults:v7 error:v24];
LABEL_22:
}

void sub_100096E14(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) attemptActivatedHandler];

  if (v4)
  {
    id v5 = auto_unlock_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v6 = @"NO";
      uint64_t v7 = *(void *)(a1 + 40);
      if (a2) {
        CFStringRef v6 = @"YES";
      }
      int v9 = 138412546;
      CFStringRef v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Attempt started %@, error %@", (uint8_t *)&v9, 0x16u);
    }

    uint64_t v8 = [*(id *)(a1 + 32) attemptActivatedHandler];
    v8[2](v8, a2, *(void *)(a1 + 40));
  }
}

void sub_100097258(uint64_t a1)
{
  if ([*(id *)(a1 + 32) doNotPostUnlockConfirmation])
  {
    [*(id *)(a1 + 32) setSuppressAlert:*(unsigned char *)(a1 + 40) == 0];
    unsigned int v2 = [*(id *)(a1 + 32) suppressAlert];
    uint64_t v3 = *(void **)(a1 + 32);
    if (v2)
    {
      [v3 setPeriocularStatus:2];
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id v4 = [*(id *)(a1 + 32) lockAuthSessions];
      id v5 = [v4 allValues];

      id v6 = [v5 countByEnumeratingWithState:&v33 objects:v40 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v34;
LABEL_5:
        uint64_t v9 = 0;
        while (1)
        {
          if (*(void *)v34 != v8) {
            objc_enumerationMutation(v5);
          }
          CFStringRef v10 = *(void **)(*((void *)&v33 + 1) + 8 * v9);
          if ([v10 doNotPostUnlockConfirmation]
            && [v10 aksSuccess])
          {
            uint64_t v26 = auto_unlock_log();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Sending Unlock Confirmation, Suppress Notification", buf, 2u);
            }

            [v10 completeAttemptPostNotification:0];
            goto LABEL_31;
          }
          if ([v10 doNotPostUnlockConfirmation]) {
            break;
          }
          if (v7 == (id)++v9)
          {
            id v7 = [v5 countByEnumeratingWithState:&v33 objects:v40 count:16];
            if (v7) {
              goto LABEL_5;
            }
            goto LABEL_31;
          }
        }
        id v12 = v10;

        if (!v12) {
          goto LABEL_33;
        }
        id v5 = [v12 attemptResults];
        id v18 = [v5 mutableCopy];
        [*(id *)(a1 + 32) setCachedMetrics:v18];

        uint64_t v19 = SFUnlockErrorDomian;
        NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
        CFStringRef v39 = @"Attempt Cancelled due to Periocular Success";
        CFStringRef v20 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
        __int16 v21 = +[NSError errorWithDomain:v19 code:118 userInfo:v20];

        uint64_t v22 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v21 code]);
        unsigned int v23 = [*(id *)(a1 + 32) cachedMetrics];
        [v23 setObject:v22 forKeyedSubscript:SDAutoUnlockManagerMetricErrorCodeKey];

        uint64_t v24 = *(void **)(a1 + 32);
        uint64_t v25 = [v24 cachedMetrics];
        [v24 notifyObserversOfUnlockFailureWithResults:v25 error:v21];
      }
      else
      {
LABEL_31:
        id v12 = 0;
      }

LABEL_33:
      [*(id *)(a1 + 32) cancelAttemptsForDeviceUnlocked];
    }
    else
    {
      [v3 setDoNotPostUnlockConfirmation:0];
      [*(id *)(a1 + 32) setPeriocularStatus:1];
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      __int16 v11 = [*(id *)(a1 + 32) lockAuthSessions];
      id v12 = [v11 allValues];

      id v13 = [v12 countByEnumeratingWithState:&v28 objects:v37 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v29;
        while (2)
        {
          for (unint64_t i = 0; i != v14; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v29 != v15) {
              objc_enumerationMutation(v12);
            }
            long long v17 = *(void **)(*((void *)&v28 + 1) + 8 * i);
            if ([v17 doNotPostUnlockConfirmation]
              && [v17 aksSuccess])
            {
              NSErrorUserInfoKey v27 = auto_unlock_log();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Sending Unlock Confirmation, Show Notification", buf, 2u);
              }

              [v17 completeAttemptPostNotification:1];
              goto LABEL_34;
            }
            if ([v17 doNotPostUnlockConfirmation])
            {
              [v17 setDoNotPostUnlockConfirmation:[*(id *)(a1 + 32) doNotPostUnlockConfirmation]];
              goto LABEL_34;
            }
          }
          id v14 = [v12 countByEnumeratingWithState:&v28 objects:v37 count:16];
          if (v14) {
            continue;
          }
          break;
        }
      }
    }
LABEL_34:
  }
}

id sub_100097A84(uint64_t a1)
{
  unsigned int v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1000A4388();
  }

  uint64_t v3 = [*(id *)(a1 + 32) lockAuthSessions];
  id v4 = [v3 count];

  if (v4)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id v5 = [*(id *)(a1 + 32) lockAuthSessions];
    id v6 = [v5 allValues];

    id obj = v6;
    id v7 = [v6 countByEnumeratingWithState:&v52 objects:v56 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v53;
      uint64_t v50 = SDAutoUnlockManagerMetricSuccessKey;
      uint64_t v49 = SDAutoUnlockManagerMetricAttemptTypeKey;
      uint64_t v48 = SFAutoUnlockErrorDomain;
      uint64_t v47 = SDAutoUnlockManagerMetricErrorDomainKey;
      uint64_t v46 = SDAutoUnlockManagerMetricErrorCodeKey;
      uint64_t v45 = SDAutoUnlockManagerMetricErrorStringKey;
      uint64_t v44 = SDAutoUnlockManagerMetricUsingToolKey;
      uint64_t v43 = SDAutoUnlockManagerMetricCancelTimeKey;
      uint64_t v42 = SDAutoUnlockManagerMetricCancelReasonKey;
      uint64_t v41 = SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey;
      uint64_t v40 = SDAutoUnlockManagerMetricTimeSinceLastWakeKey;
      uint64_t v39 = SDAutoUnlockManagerMetricLastSleepTypeKey;
      uint64_t v37 = SDAutoUnlockManagerMetricPeriocularStatus;
      uint64_t v38 = SDAutoUnlockManagerMetricPrewarmKey;
      do
      {
        for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v53 != v9) {
            objc_enumerationMutation(obj);
          }
          __int16 v11 = *(void **)(*((void *)&v52 + 1) + 8 * i);
          [v11 cancel];
          id v12 = [*(id *)(a1 + 32) canceledAuthLockSessions];
          id v13 = [v11 sessionID];
          unsigned __int8 v14 = [v12 containsObject:v13];

          if ((v14 & 1) == 0)
          {
            uint64_t v15 = [*(id *)(a1 + 32) canceledAuthLockSessions];
            CFStringRef v16 = [v11 sessionID];
            [v15 addObject:v16];

            long long v17 = [*(id *)(a1 + 32) attemptDevice];
            id v18 = [v17 uniqueID];
            uint64_t v19 = [v11 deviceID];
            unsigned int v20 = [v18 isEqualToString:v19];

            if (v20)
            {
              __int16 v21 = +[NSDate date];
              uint64_t v22 = [*(id *)(a1 + 32) attemptStart];
              [v21 timeIntervalSinceDate:v22];
              double v24 = v23;

              uint64_t v25 = [v11 attemptResults];
              id v26 = [v25 mutableCopy];

              [v26 setObject:&off_100902868 forKeyedSubscript:v50];
              NSErrorUserInfoKey v27 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) attemptType]);
              [v26 setObject:v27 forKeyedSubscript:v49];

              [v26 setObject:v48 forKeyedSubscript:v47];
              [v26 setObject:&off_100902880 forKeyedSubscript:v46];
              [v26 setObject:@"Attempt Cancelled -- After finding Watch" forKeyedSubscript:v45];
              long long v28 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
              [v26 setObject:v28 forKeyedSubscript:v44];

              long long v29 = +[NSNumber numberWithDouble:v24];
              [v26 setObject:v29 forKeyedSubscript:v43];

              long long v30 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
              [v26 setObject:v30 forKeyedSubscript:v42];

              long long v31 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) connectedBluetoothDevices]);
              [v26 setObject:v31 forKeyedSubscript:v41];

              CFStringRef v32 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) timeSinceLastMachineWake]);
              [v26 setObject:v32 forKeyedSubscript:v40];

              long long v33 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) lastSleepType]);
              [v26 setObject:v33 forKeyedSubscript:v39];

              long long v34 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v11 attemptPrewarmed]);
              [v26 setObject:v34 forKeyedSubscript:v38];

              if ([*(id *)(a1 + 32) periocularStatus])
              {
                long long v35 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) periocularStatus]);
                [v26 setObject:v35 forKeyedSubscript:v37];
              }
              [*(id *)(a1 + 32) setCachedMetrics:v26];
              if (([*(id *)(a1 + 32) isBeingUsedForSiri] & 1) == 0) {
                sub_1000D0424(v26);
              }
              [*(id *)(a1 + 32) setCachedMetrics:0];
            }
          }
        }
        id v8 = [obj countByEnumeratingWithState:&v52 objects:v56 count:16];
      }
      while (v8);
    }
  }
  [*(id *)(a1 + 32) invalidateAttempt];
  return [*(id *)(a1 + 32) setScanErrorString:0];
}

void sub_10009823C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if ((unint64_t)(v1 - 1) >= 2)
  {
    if (v1) {
      return;
    }
    uint64_t v9 = auto_unlock_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1000A43C8();
    }

    id v6 = +[NSUserDefaults standardUserDefaults];
    [v6 setBool:1 forKey:@"AutoUnlockDoNotCollectTriggerMetrics"];
  }
  else
  {
    if (v1 == 2) {
      uint64_t v3 = &off_100902898;
    }
    else {
      uint64_t v3 = &off_100902868;
    }
    id v4 = [*(id *)(a1 + 32) cachedMetrics];
    uint64_t v5 = SDAutoUnlockManagerMetricUnintentionalAttemptKey;
    [v4 setObject:v3 forKeyedSubscript:SDAutoUnlockManagerMetricUnintentionalAttemptKey];

    id v6 = auto_unlock_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 32) cachedMetrics];
      id v8 = [v7 objectForKeyedSubscript:v5];
      int v10 = 138412290;
      __int16 v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Log Unintentional AutoUnlock Attempt: %@", (uint8_t *)&v10, 0xCu);
    }
  }
}

void sub_100098664(id a1, NSError *a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = auto_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1000A43FC();
  }
}

void sub_100098C18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = auto_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1000A4464(a1, (uint64_t)v3, v4);
  }
}

void sub_100098D54(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unsigned int v2 = [[SDUnlockDisable alloc] initWithData:*(void *)(a1 + 40)];
    id v3 = auto_unlock_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = [(SDUnlockDisable *)v2 pairingID];
      int v8 = 138412546;
      uint64_t v9 = v4;
      __int16 v10 = 2112;
      __int16 v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received SDUnlockDisable (device ID: %@, pairingID: %@)", (uint8_t *)&v8, 0x16u);
    }
    id v6 = +[SDAutoUnlockAKSManager sharedManager];
    [v6 disablePairingWithKeyDevice:*(void *)(a1 + 32)];

    [*(id *)(a1 + 48) initializeRemotePeer];
    id v7 = +[SDAutoUnlockAKSManager sharedManager];
    [v7 updateDynamicStoreEnabled];
  }
  else
  {
    auto_unlock_log();
    unsigned int v2 = (SDUnlockDisable *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, OS_LOG_TYPE_DEFAULT, "Received SDUnlockDisable but device ID is NULL", (uint8_t *)&v8, 2u);
    }
  }
}

void sub_10009B538(id *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = a1[4];
    if ([v2 canceled])
    {
      uint64_t v3 = SFAutoUnlockErrorDomain;
      NSErrorUserInfoKey v78 = NSLocalizedDescriptionKey;
      CFStringRef v79 = @"Pairing canceled";
      uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v79 forKeys:&v78 count:1];
      uint64_t v5 = +[NSError errorWithDomain:v3 code:118 userInfo:v4];
    }
    else
    {
      uint64_t v5 = a1[5];
    }
    if (v5)
    {
      unsigned int v16 = [v2 placeholder];
      long long v17 = +[SDAutoUnlockTransport sharedTransport];
      id v18 = v17;
      if (v16)
      {
        uint64_t v19 = [v17 placeholderDevice];
      }
      else
      {
        long long v34 = [a1[4] deviceID];
        uint64_t v35 = [v18 idsDeviceForUniqueID:v34];

        long long v36 = +[SDAutoUnlockTransport sharedTransport];
        uint64_t v19 = [v36 autoUnlockDeviceForIDSDevice:v35 cloudPaired:0 cached:0];

        id v18 = (void *)v35;
      }

      id v37 = a1[6];
      uint64_t v38 = [v2 deviceID];
      uint64_t v39 = [v2 sessionID];
      uint64_t v40 = [v39 UUIDString];
      [v37 disablePairingForDeviceID:v38 pairingID:v40];

      [a1[6] notifyObserverOfFailedToEnableDevice:v19 error:v5];
    }
    else
    {
      [a1[6] initializeRemotePeer];
      double v23 = [a1[6] remotePeer];
      [v23 handlePairedSuccessfully];

      double v24 = +[SDAutoUnlockTransport sharedTransport];
      uint64_t v25 = [a1[4] deviceID];
      uint64_t v19 = [v24 autoUnlockDeviceForDeviceID:v25];

      [a1[6] notifyObserverOfEnabledDevice:v19];
      id v26 = [a1[6] suggestionManager];
      NSErrorUserInfoKey v27 = [v19 uniqueID];
      [v26 setFeatureSuggestedForDeviceID:v27];

      long long v28 = [a1[6] suggestionManager];
      [v28 setRetriedSetup];

      long long v29 = +[SDAutoUnlockAKSManager sharedManager];
      [v29 updateDynamicStoreEnabled];

      sub_1000D459C(@"com.apple.watch.auto-unlock.enabled");
      long long v30 = +[NSUserDefaults standardUserDefaults];
      [v30 setBool:1 forKey:@"AutoUnlockAlreadyEnabledBefore"];

      long long v31 = +[NSUserDefaults standardUserDefaults];
      CFStringRef v32 = SFDeviceProductVersion();
      [v32 floatValue];
      [v31 setFloat:@"AutoUnlockLastSeenVersion" forKey:];

      long long v33 = +[SDAutoUnlockNotificationsManager sharedManager];
      [v33 clearPhoneAutoUnlockUpsellNotification:1];
    }
    [a1[4] invalidate];
    uint64_t v41 = [a1[6] lockPairingSessions];
    uint64_t v42 = [a1[4] deviceID];
    [v41 removeObjectForKey:v42];

    uint64_t v43 = +[SDAutoUnlockTransport sharedTransport];
    [v43 updateApproveBluetoothIDs];

LABEL_22:
LABEL_34:

    return;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (!a1[5])
    {
      id v6 = [a1[6] canceledPairingKeySessions];
      id v7 = [a1[4] sessionID];
      int v8 = [v7 UUIDString];
      unsigned int v9 = [v6 containsObject:v8];

      if (v9)
      {
        __int16 v10 = auto_unlock_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v11 = [a1[4] deviceID];
          id v12 = [a1[4] sessionID];
          id v13 = [v12 UUIDString];
          int v74 = 138412546;
          unint64_t v75 = v11;
          __int16 v76 = 2112;
          uint64_t v77 = v13;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Pairing session canceled (device ID: %@, session ID: %@)", (uint8_t *)&v74, 0x16u);
        }
        id v14 = a1[6];
        uint64_t v15 = [a1[4] deviceID];
        [v14 disableKeyPairingForDeviceID:v15];
      }
      else
      {
        [a1[6] updateAdvertising];
      }
    }
    [a1[4] invalidate];
    uint64_t v49 = [a1[6] canceledPairingKeySessions];
    uint64_t v50 = [a1[4] sessionID];
    [v49 removeObject:v50];

    id v2 = [a1[6] keyPairingSessions];
    uint64_t v51 = [a1[4] deviceID];
    [v2 removeObjectForKey:v51];

    goto LABEL_34;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v21 = a1[5];
    id v20 = a1[6];
    id v22 = a1[4];
    _[v20 handleLockSessionCompleted:v22 error:v21];
    return;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = a1[4];
    id v44 = a1[5];
    if (v44)
    {
      if ([v44 code] == (id)213) {
        [a1[6] beginKeyRegistrationIfNecessary];
      }
      uint64_t v45 = +[SDAutoUnlockNotificationsManager sharedManager];
      [v45 removeAutoUnlockNotification];
    }
    else
    {
      uint64_t v45 = [a1[6] keysWithAKSTokens];
      uint64_t v57 = [v2 bleDevice];
      v58 = [v57 identifier];
      [v45 addObject:v58];
    }
    [a1[6] setNeedsStrictMotionCheck:[v2 needsStrictMotionCheck]];
    os_log_type_t v59 = auto_unlock_log();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v60 = [a1[4] sessionID];
      int v74 = 138412290;
      unint64_t v75 = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Removing key session %@", (uint8_t *)&v74, 0xCu);
    }
    [a1[4] invalidate];
    v61 = [a1[6] keyAuthSessions];
    NSData v62 = [a1[4] sessionID];
    v63 = [v62 UUIDString];
    [v61 removeObjectForKey:v63];

    uint64_t v5 = auto_unlock_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v64 = [a1[6] keyAuthSessions];
      int v74 = 138412290;
      unint64_t v75 = v64;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Removed key session %@", (uint8_t *)&v74, 0xCu);
    }
    goto LABEL_22;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (a1[5])
      {
        long long v52 = auto_unlock_log();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          long long v53 = [a1[4] deviceID];
          int v74 = 138412290;
          unint64_t v75 = v53;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Received error while registering key (%@), removing from list of registered devices.", (uint8_t *)&v74, 0xCu);
        }
        id v54 = [a1[5] code];
        long long v55 = [a1[6] remotePeer];
        uint64_t v56 = v55;
        if (v54 == (id)102)
        {
          [v55 handleRegistrationFailedKeyLocked];
LABEL_56:

          v70 = [a1[6] lockRegistrationSessionsByDeviceID];
          uint64_t v71 = [a1[4] deviceID];
          [v70 setObject:0 forKeyedSubscript:v71];

          [a1[4] invalidate];
          return;
        }
        uint64_t v69 = 0;
      }
      else
      {
        long long v55 = [a1[6] remotePeer];
        uint64_t v56 = v55;
        uint64_t v69 = 1;
      }
      [v55 handleRegistrationCompletedSuccessfully:v69];
      goto LABEL_56;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return;
    }
    id v65 = a1[4];
    id v2 = v65;
    if (a1[5])
    {
      if ([v65 isLocallyGenerated])
      {
        uint64_t v66 = auto_unlock_log();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
          sub_1000A4644();
        }

        id v67 = a1[6];
        uint64_t v68 = 1;
        goto LABEL_59;
      }
      if (a1[5])
      {
LABEL_60:
        uint64_t v72 = [a1[6] keyRegistrationSessionsByDeviceID];
        uint64_t v73 = [a1[4] deviceID];
        [v72 setObject:0 forKeyedSubscript:v73];

        [a1[4] invalidate];
        goto LABEL_34;
      }
    }
    id v67 = a1[6];
    uint64_t v68 = 0;
LABEL_59:
    [v67 setNeedsArming:v68];
    goto LABEL_60;
  }
  id v47 = a1[5];
  id v46 = a1[6];
  id v48 = a1[4];

  _[v46 handleProxySessionCompleted:v48 error:v47];
}

void sub_10009D480(uint64_t a1)
{
  id v2 = +[SDAutoUnlockAKSManager sharedManager];
  [v2 updateLocalLTK];

  [*(id *)(a1 + 32) setIdsMacCountCache:-1];
  id v3 = +[SDAutoUnlockAKSManager sharedManager];
  [v3 updateDynamicStoreEnabled];
}

void sub_10009D5B4(uint64_t a1)
{
  id v2 = objc_opt_new();
  [*(id *)(a1 + 32) setNearbyDeviceChangedDate:v2];

  id v3 = [*(id *)(a1 + 40) activeDevice];
  unsigned int v4 = [v3 isConnected];

  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    [v5 registerRemotePeerIfNecessary];
  }
}

id sub_10009D740(uint64_t a1)
{
  return [*(id *)(a1 + 32) createPairingKeySessionWithIdentifier:*(void *)(a1 + 40) deviceID:*(void *)(a1 + 48) requestData:*(void *)(a1 + 56)];
}

id sub_10009D850(uint64_t a1)
{
  [*(id *)(a1 + 32) cancelParallelRegistrationSessionsForDeviceID:*(void *)(a1 + 40) newSessionID:*(void *)(a1 + 48)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);

  return [v2 createRegistrationKeySessionWithIdentifier:v4 deviceID:v3 requestData:v5 locallyGenerated:0];
}

id sub_10009D998(uint64_t a1)
{
  [*(id *)(a1 + 32) cancelParallelRegistrationSessionsForDeviceID:*(void *)(a1 + 40) newSessionID:*(void *)(a1 + 48)];
  id v2 = [*(id *)(a1 + 32) remotePeer];
  [v2 handleRemoteRegistrationRequested];

  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);

  return [v3 createRegistrationLockSessionWithDeviceID:v4 sessionID:v5 requestData:v6];
}

void sub_10009DC90(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 32) remotePeer];
  uint64_t v4 = [v3 deviceID];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = a1 + 40;
  unsigned int v7 = [v4 isEqualToString:v6];

  if (v7)
  {
    id v8 = *v2;
    _[v8 handleRelockMessage];
  }
  else
  {
    unsigned int v9 = auto_unlock_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1000A4828(v5, v2);
    }
  }
}

void sub_10009DD50(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = [*(id *)(a1 + 56) payload];
  [v1 createPairingKeySessionWithIdentifier:v2 deviceID:v3 requestData:v4];
}

void sub_10009E258(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 152));
  _Unwind_Resume(a1);
}

void sub_10009E2E8(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v4 = [v3 bleDevice];

  id v5 = [v4 copy];
  [WeakRetained handleFoundPeer:v5];
}

void sub_10009E36C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v4 = [v3 bleDevice];

  id v5 = [v4 copy];
  [WeakRetained handleFoundPeer:v5];
}

void sub_10009E3F0(id a1)
{
  uint64_t v1 = auto_unlock_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Scanner invalidated", v2, 2u);
  }
}

void sub_10009E458(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v5 = 138412290;
    id v6 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SFBLEScanner timer fired %@", (uint8_t *)&v5, 0xCu);
  }
  id v4 = objc_loadWeakRetained((id *)(a1 + 32));
  [v4 handleBLEScanTimerFired];
}

void sub_10009E528(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    unsigned int v7 = sub_1000D91F0(@"AUScanTimeout");
    id v6 = v7;
    if (v7) {
      double v8 = (double)(uint64_t)[v7 integerValue];
    }
    else {
      double v8 = 5.0;
    }
    unsigned int v9 = auto_unlock_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 134217984;
      double v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Scanner started with timeout %.2f seconds", (uint8_t *)&v10, 0xCu);
    }

    [*(id *)(a1 + 32) restartScanTimer:sub_1001B1AF8(v8)];
    goto LABEL_14;
  }
  id v4 = [*(id *)(a1 + 32) scanner];

  int v5 = auto_unlock_log();
  id v6 = v5;
  if (!v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scanner invalidated before activate", (uint8_t *)&v10, 2u);
    }
LABEL_14:

    goto LABEL_15;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1000A48DC();
  }

  [*(id *)(a1 + 32) invalidateAttempt];
  [*(id *)(a1 + 32) setScanErrorString:0];
LABEL_15:
}

id sub_10009EC04(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scan timer fired", v4, 2u);
  }

  [*(id *)(a1 + 32) updateStringForProxySession];
  [*(id *)(a1 + 32) cancelAllLockSessionsForScanTimeout];
  [*(id *)(a1 + 32) handleScanTimerFired];
  [*(id *)(a1 + 32) invalidateAttempt];
  return [*(id *)(a1 + 32) setScanErrorString:0];
}

void sub_10009F890(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1[4] lockAuthSessions];
  int v5 = [a1[5] identifier];
  id v6 = [v4 objectForKeyedSubscript:v5];

  if ([a1[6] messageType] == 309)
  {
    unsigned int v7 = [SDAutoUnlockDecryptionFailed alloc];
    double v8 = [a1[6] payload];
    unsigned int v9 = [(SDAutoUnlockDecryptionFailed *)v7 initWithData:v8];

    unsigned int v10 = [v9 errorCode];
    if (v6)
    {
      unsigned int v11 = v10;
      [v6 handleDecryptionFailure:v10];
      if (v11 == 191)
      {
        id v12 = auto_unlock_log();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          sub_1000A49B4();
        }

        id v13 = +[SDAutoUnlockAKSManager sharedManager];
        id v14 = [v6 deviceID];
        [v13 addDeviceIDMissingSessionKey:v14];
LABEL_7:

LABEL_22:
      }
    }
  }
  else
  {
    if ([v3 hasSessionID])
    {
      uint64_t v15 = [v3 sessionID];
      id v16 = [v15 length];

      if (v16 == (id)16)
      {
        id v17 = objc_alloc((Class)NSUUID);
        id v18 = [v3 sessionID];
        unsigned int v9 = [v17 initWithUUIDBytes:[v18 bytes]];

        uint64_t v19 = auto_unlock_log();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          id v20 = [v9 UUIDString];
          int v24 = 138412546;
          id v25 = v3;
          __int16 v26 = 2112;
          NSErrorUserInfoKey v27 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Received wrapper %@, session ID %@", (uint8_t *)&v24, 0x16u);
        }
        if (!v9)
        {
          id v13 = auto_unlock_log();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
            sub_1000A49E8();
          }
          goto LABEL_22;
        }
        id v21 = [a1[4] keyAuthSessions];
        id v22 = [v9 UUIDString];
        id v13 = [v21 objectForKeyedSubscript:v22];

        if (v13)
        {
          double v23 = v13;
        }
        else
        {
          if (!v6)
          {
            id v14 = auto_unlock_log();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              sub_1000A4A1C();
            }
            goto LABEL_7;
          }
          double v23 = v6;
        }
        [v23 handleMessageWithWrapper:v3];
        goto LABEL_22;
      }
    }
    unsigned int v9 = auto_unlock_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1000A4A84(v3);
    }
  }
}

void sub_10009FBC8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = auto_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1000A4B48();
  }
}

id sub_10009FD74(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_keyBagLockStateChange:*(void *)(a1 + 40)];
}

void sub_1000A02CC()
{
  os_log_t v0 = SFLocalizedStringForKey();
  uint64_t v1 = auto_unlock_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Posting notification with text %@", (uint8_t *)&v3, 0xCu);
  }

  uint64_t v2 = +[SDAutoUnlockNotificationsManager sharedManager];
  [v2 showPhoneAutoUnlockNotificationWithBodyText:v0 isUpsell:0];
}

void sub_1000A0C68(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) getUpsellNotificationBodyTextForEvent:*(void *)(a1 + 40)];
  uint64_t v1 = +[SDAutoUnlockNotificationsManager sharedManager];
  [v1 showPhoneAutoUnlockNotificationWithBodyText:v2 isUpsell:1];
}

id sub_1000A1338(uint64_t a1)
{
  id v2 = objc_opt_new();
  [*(id *)(a1 + 32) setPipeConnectionChangedDate:v2];

  int v3 = *(void **)(a1 + 32);

  return [v3 updateAdvertising];
}

void sub_1000A18B0(uint64_t a1)
{
  id v2 = +[SDStatusMonitor sharedMonitor];
  unsigned int v3 = [v2 pairedWatchLockState];

  id v4 = [*(id *)(a1 + 32) remotePeer];
  unsigned int v5 = [v4 isKeyBagLocked];

  if (v5) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    unsigned int v7 = *(void **)(a1 + 32);
    [v7 registerRemotePeerIfNecessary];
  }
}

void sub_1000A19CC(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v1 = [*(id *)(a1 + 32) lockAuthSessions];
  id v2 = [v1 allValues];

  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      BOOL v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) tearDownAWDLIfNecessary];
        BOOL v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1000A1E60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) magnetLinkTimer];
  intptr_t v3 = dispatch_source_testcancel(v2);

  if (!v3)
  {
    id v4 = [*(id *)(a1 + 32) magnetLinkTimer];
    dispatch_source_cancel(v4);
  }
  [*(id *)(a1 + 32) setMagnetLinkTimer:0];
  unsigned int v5 = [*(id *)(a1 + 32) deviceCurrentlyUnlockedByWatch];
  BOOL v6 = auto_unlock_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "### Requesting Relock Due To Magnet Link Disconnect", (uint8_t *)&v12, 2u);
    }

    long long v8 = [*(id *)(a1 + 32) localDeviceController];
    [v8 lockDevice];

    [*(id *)(a1 + 32) setLastLockedByRelock:1];
    [*(id *)(a1 + 32) cancelAutoUnlock];
    long long v9 = +[SDAutoUnlockNotificationsManager sharedManager];
    [v9 showPhoneAutoRelockNotification];

    BOOL v6 = [*(id *)(a1 + 32) cachedMetrics];
    [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:SDAutoUnlockManagerMetricAutoRelockKey];
  }
  else if (v7)
  {
    unsigned int v10 = [*(id *)(a1 + 32) deviceCurrentlyUnlockedByWatch];
    CFStringRef v11 = @"NO";
    if (v10) {
      CFStringRef v11 = @"YES";
    }
    int v12 = 138412290;
    CFStringRef v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Not Requesting Relock, deviceCurrentlyUnlockedByWatch: %@", (uint8_t *)&v12, 0xCu);
  }
}

id sub_1000A2E84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) dumpState];
}

id sub_1000A41F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) upsellBehaviorChangedAfterUpgradeIfNecessary];
}

void sub_1000A41F8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1000A4218(uint8_t *a1, void *a2, void *a3, NSObject *a4)
{
  BOOL v7 = [a2 modelIdentifier];
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Unsupported hardware model identifier:%@", a1, 0xCu);
}

void sub_1000A4290(void *a1, NSObject *a2)
{
  id v4 = [a1 modelIdentifier];
  unsigned int v5 = [a1 productVersion];
  int v6 = 138412546;
  BOOL v7 = v4;
  __int16 v8 = 2112;
  long long v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Unsupported hardware/software model identifier:%@, version:%@", (uint8_t *)&v6, 0x16u);
}

void sub_1000A4354()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Test Mode: Passcode missing for test mode", v2, v3, v4, v5, v6);
}

void sub_1000A4388()
{
  sub_10001587C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Cancelling", v1, 2u);
}

void sub_1000A43C8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Do Not Post Alert Again", v2, v3, v4, v5, v6);
}

void sub_1000A43FC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "### Unable to send relock request: %@", v2, v3, v4, v5, v6);
}

void sub_1000A4464(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "### Error sending disable message (device id: %@, error: %@)", (uint8_t *)&v4, 0x16u);
}

void sub_1000A44F0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Missing IDS device ID for Mac requesting pairing", v2, v3, v4, v5, v6);
}

void sub_1000A4524(int a1, void *a2, NSObject *a3)
{
  int v4 = a1 / 60;
  uint64_t v5 = [a2 lockStateChangedDate];
  v6[0] = 67109378;
  v6[1] = v4;
  __int16 v7 = 2112;
  __int16 v8 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Phone unused within the last %d min. Last lock/unlock date: %@. Telling Watch to perform motion check", (uint8_t *)v6, 0x12u);
}

void sub_1000A45DC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Missing IDS device ID for key registration", v2, v3, v4, v5, v6);
}

void sub_1000A4610()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Missing IDS device ID for lock registration", v2, v3, v4, v5, v6);
}

void sub_1000A4644()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Local key registration session failed, setting needsArming = YES", v2, v3, v4, v5, v6);
}

void sub_1000A4678(void *a1)
{
  [a1 attemptType];
  sub_1000A41F8((void *)&_mh_execute_header, v1, v2, "### Missing authorization token: %d", v3, v4, v5, v6, 0);
}

void sub_1000A46F4(void *a1)
{
  [a1 attemptType];
  sub_1000A41F8((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0);
}

void sub_1000A4770(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6 = [a1 sessionID];
  sub_10002972C();
  __int16 v8 = 2112;
  long long v9 = a1;
  __int16 v10 = 2112;
  uint64_t v11 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Incoming message missing info (session = %@, wrapper = %@, data = %@)", v7, 0x20u);
}

void sub_1000A4828(uint64_t a1, id *a2)
{
  uint64_t v2 = [*a2 remotePeer];
  long long v9 = [v2 deviceID];
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Relock message if from %@ but current remote peer is %@", v5, v6, v7, v8, 2u);
}

void sub_1000A48DC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Scanner error: %@", v2, v3, v4, v5, v6);
}

void sub_1000A4944(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000A49B4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Watch is missing session ID", v2, v3, v4, v5, v6);
}

void sub_1000A49E8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create session ID", v2, v3, v4, v5, v6);
}

void sub_1000A4A1C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "No session for session ID: %@", v2, v3, v4, v5, v6);
}

void sub_1000A4A84(void *a1)
{
  [a1 hasSessionID];
  uint64_t v2 = [a1 sessionID];
  [v2 length];
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Missing session ID (has session ID %@, length %ld)", v5, v6, v7, v8, 2u);
}

void sub_1000A4B48()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Completed sending decryption failed message (error: %@)", v2, v3, v4, v5, v6);
}

void sub_1000A4BB0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Generating state dump", v2, v3, v4, v5, v6);
}

id sub_1000A50E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_1000A51FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

uint64_t sub_1000A5898(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100966D60 <= 40)
  {
    if (dword_100966D60 != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  *(unsigned char *)(*(void *)(v1 + 32) + 264) = *(unsigned char *)(v1 + 40);
  return result;
}

void *sub_1000A693C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  uint64_t v3 = (void *)result[26];
  if (!v3) {
    return result;
  }
  if (dword_100966D60 <= 40)
  {
    if (dword_100966D60 != -1)
    {
LABEL_4:
      unsigned int v4 = [v3 screenOn];
      uint64_t v5 = "off";
      if (v4) {
        uint64_t v5 = "on";
      }
      uint64_t v8 = v5;
      LogPrintF();
      uint64_t result = *(void **)(a1 + 32);
      goto LABEL_8;
    }
    int v6 = _LogCategory_Initialize();
    uint64_t result = *(void **)(a1 + 32);
    if (v6)
    {
      uint64_t v3 = (void *)result[26];
      goto LABEL_4;
    }
  }
LABEL_8:
  [result _update:v8];
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 208) screenOn];
  if ((result & 1) == 0)
  {
    uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 104);
    return _[v7 tvAutoFillRemoveAll];
  }
  return result;
}

id sub_1000A6AA8(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 208);
  if (result)
  {
    unsigned int v3 = [result deviceUIUnlocked];
    if (dword_100966D60 <= 40 && (dword_100966D60 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    unsigned int v4 = *(void **)(a1 + 32);
    if (v3) {
      [v4 _activateUIDelayTimer];
    }
    else {
      [v4 _deactivateUIDelayTimer];
    }
    uint64_t v5 = *(void **)(a1 + 32);
    return [v5 _update];
  }
  return result;
}

id sub_1000A7078(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceFound:a2];
}

id sub_1000A7084(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceLost:a2];
}

id sub_1000A7090(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceChanged:a2];
}

void sub_1000A709C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    if (dword_100966D60 <= 60 && (dword_100966D60 != -1 || _LogCategory_Initialize()))
    {
      id v3 = v4;
LABEL_7:
      LogPrintF();
    }
  }
  else if (dword_100966D60 <= 30 && (dword_100966D60 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
  [*(id *)(a1 + 32) _update:v3];
}

void sub_1000A718C(id a1)
{
  if (dword_100966D60 <= 90 && (dword_100966D60 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_1000A7200(id a1)
{
  if (dword_100966D60 <= 30 && (dword_100966D60 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

id sub_1000A7274(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceFound:a2];
}

id sub_1000A7280(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceLost:a2];
}

id sub_1000A728C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceChanged:a2];
}

void sub_1000A7298(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100966D60 <= 90)
    {
      int v6 = v2;
      if (dword_100966D60 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        id v3 = v6;
      }
    }
  }
  else if (dword_100966D60 <= 30)
  {
    int v6 = 0;
    if (dword_100966D60 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    id v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

id sub_1000A8B54(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _proximityFound:a2];
}

id sub_1000A8B60(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _proximityLost:a2];
}

id sub_1000A8B6C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _proximityChanged:a2];
}

void sub_1000A8B78(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100966D60 <= 60)
    {
      int v6 = v2;
      if (dword_100966D60 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        id v3 = v6;
      }
    }
  }
  else if (dword_100966D60 <= 30)
  {
    int v6 = 0;
    if (dword_100966D60 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    id v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

id sub_1000A9CC0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 184);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 184);
    *(void *)(v4 + 184) = 0;
  }
  if (dword_100966D60 <= 30 && (dword_100966D60 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 176) = 1;
  int v6 = *(void **)(a1 + 32);

  return [v6 _update];
}

id sub_1000AA1A0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _sessionStop:a2];
}

void sub_1000AA1AC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_1000AA240;
  v2[3] = &unk_1008CB4B0;
  void v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 _helpersClientPairingSucceeded:1 completion:v2];
}

void sub_1000AA240(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v6 = 0;
    [*(id *)(a1 + 32) _sessionHandlePairingSucceededResponse:*(void *)(a1 + 40)];
    goto LABEL_6;
  }
  if (dword_100966D60 <= 60)
  {
    id v6 = v3;
    if (dword_100966D60 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v4 = v6, v5))
    {
      LogPrintF();
LABEL_6:
      uint64_t v4 = v6;
    }
  }
}

void sub_1000AA2F4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v23 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  if (dword_100966D60 <= 30 && (dword_100966D60 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) passwordPickerStart:v23 bundleID:v16 localizedAppName:v17 unlocalizedAppName:v18 associatedDomains:v19 appIconData:v20 deviceName:v21 completion:v22];
}

id sub_1000AA434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _helpersClientPromptForPIN:a2 throttleSeconds:a3];
}

void sub_1000AA7FC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 112) objectForKeyedSubscript:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _proximityChanged:v2];
}

id sub_1000AABEC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isEqual:@"-pw"];
  id v3 = *(void **)(a1 + 40);
  if (v2) {
    return [v3 passwordPickerStart:0 bundleID:0 localizedAppName:0 unlocalizedAppName:0 associatedDomains:0 appIconData:0 deviceName:0 completion:&stru_1008CC1F0];
  }
  uint64_t v5 = *(void *)(a1 + 48);

  return [v3 _uiStart:v5 extraInfo:0];
}

void sub_1000AAC80(id a1, NSString *a2, NSString *a3, NSError *a4)
{
  uint64_t v8 = a2;
  id v6 = a3;
  uint64_t v7 = a4;
  if (dword_100966D60 <= 30 && (dword_100966D60 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
}

id sub_1000AAE68(uint64_t a1)
{
  if (dword_100966D60 <= 30 && (dword_100966D60 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  unsigned int v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[29];
  if (v3)
  {
    [v2 _uiStart:v3 extraInfo:0];
    unsigned int v2 = *(void **)(a1 + 32);
  }

  return [v2 _deactivateUIDelayTimer];
}

void sub_1000AB1A8(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  id v6 = self;
  char isKindOfClass = objc_opt_isKindOfClass();

  uint64_t v8 = *(void *)(a1 + 32);
  if (isKindOfClass)
  {
    long long v9 = [v11 user];
    __int16 v10 = [v11 password];
    (*(void (**)(uint64_t, void *, void *, id))(v8 + 16))(v8, v9, v10, v5);
  }
  else
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, void, id))(v8 + 16))(v8, 0, 0, v5);
      goto LABEL_7;
    }
    long long v9 = NSErrorWithOSStatusF();
    (*(void (**)(uint64_t, void, void, void *))(v8 + 16))(v8, 0, 0, v9);
  }

LABEL_7:
}

void sub_1000AB410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB428(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000AB438(uint64_t a1)
{
}

void sub_1000AB440(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    if (dword_100966D60 <= 90 && (dword_100966D60 != -1 || _LogCategory_Initialize()))
    {
      id v8 = v5;
LABEL_9:
      LogPrintF();
    }
  }
  else if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(NSObject **)(v6 + 272);
    block = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    id v11 = sub_1000AB5C4;
    int v12 = &unk_1008CAF18;
    uint64_t v13 = v6;
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    dispatch_async(v7, &block);
  }
  else if (dword_100966D60 <= 60 && (dword_100966D60 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_9;
  }
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) invalidate:v8 block:block, v10, v11, v12, v13];
}

id sub_1000AB5C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _uiStartIfNeeded:*(void *)(a1 + 40) extraInfo:*(void *)(a1 + 48)];
}

Class sub_1000ABCB4()
{
  if (qword_10097FD58 != -1) {
    dispatch_once(&qword_10097FD58, &stru_1008CC260);
  }
  Class result = objc_getClass("SFAutoFillHelperProxy");
  qword_10097FD50 = (uint64_t)result;
  off_100966DD0 = (uint64_t (*)())sub_1000ABD18;
  return result;
}

id sub_1000ABD18()
{
  return (id)qword_10097FD50;
}

void sub_1000ABD24(id a1)
{
  qword_10097FD60 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation", 2);
}

Class sub_1000ABD50()
{
  if (qword_10097FD70 != -1) {
    dispatch_once(&qword_10097FD70, &stru_1008CC280);
  }
  Class result = objc_getClass("ACAccountStore");
  qword_10097FD68 = (uint64_t)result;
  off_100966DD8 = (uint64_t (*)())sub_1000ABDB4;
  return result;
}

id sub_1000ABDB4()
{
  return (id)qword_10097FD68;
}

void sub_1000ABDC0(id a1)
{
  qword_10097FD78 = (uint64_t)dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
}

id sub_1000AC00C(int a1)
{
  if ((a1 - 10) >= 0xB)
  {
    if (a1 >= 8)
    {
      if (a1 <= 9) {
        unsigned int v2 = "?";
      }
      else {
        unsigned int v2 = "User";
      }
    }
    else
    {
      unsigned int v2 = off_1008CC4A0[a1];
    }
    uint64_t v1 = +[NSString stringWithUTF8String:v2];
  }
  else
  {
    uint64_t v1 = (void *)*((void *)&off_1008CC448 + a1 - 10);
  }

  return v1;
}

uint64_t sub_1000AC3E4(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = [v6 uniqueIdentifier];
  id v9 = v7;
  uint64_t v10 = v9;
  if (v7)
  {
    id v11 = [v9 effectiveIdentifier];
    if ([v11 isEqual:v8])
    {

LABEL_5:
      id v15 = [v5 idsIdentifier];

      if (v15)
      {
        id v16 = v10;
LABEL_14:

        goto LABEL_15;
      }
      id v19 = [v10 idsDeviceIdentifier];
      [v5 setIdsIdentifier:v19];
      id v16 = v10;
LABEL_13:

      goto LABEL_14;
    }
    int v12 = [v10 mediaSystemIdentifier];
    uint64_t v13 = [v12 UUIDString];
    unsigned int v14 = [v13 isEqual:v8];

    if (v14) {
      goto LABEL_5;
    }
  }

  if (NSStringLooksLikeBTAddress())
  {
    id v16 = SFDataFromHexString();
    if (v16)
    {
      id v17 = [v5 bleDevice];
      id v18 = [v17 advertisementFields];
      id v19 = [v18 objectForKeyedSubscript:@"bdAddr"];

      if (v19 && ([v19 isEqualToData:v16] & 1) != 0) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v22 = [v5 name];
  if (!v22)
  {
LABEL_25:
    uint64_t v21 = 0;
    goto LABEL_28;
  }
  id v20 = (void *)v22;
  uint64_t v21 = [v6 name];
  if (v21)
  {
    id v23 = [v5 name];
    int v24 = [v6 name];
    unsigned __int8 v25 = [v23 isEqual:v24];

    if (v25)
    {
LABEL_15:
      if (dword_100966E40 > 10 || dword_100966E40 == -1 && !_LogCategory_Initialize())
      {
        uint64_t v21 = 1;
        goto LABEL_28;
      }
      id v20 = [v5 identifier];
      LogPrintF();
      uint64_t v21 = 1;
      goto LABEL_24;
    }
    goto LABEL_25;
  }
LABEL_24:

LABEL_28:
  return v21;
}

void sub_1000AD9D8(id a1)
{
  uint64_t v1 = objc_alloc_init(SDProxHandoffAgent);
  unsigned int v2 = (void *)qword_10097FD88;
  qword_10097FD88 = (uint64_t)v1;
}

id sub_1000ADF5C(uint64_t a1)
{
  if (dword_100966E40 <= 30 && (dword_100966E40 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  unsigned int v2 = *(void **)(a1 + 32);

  return [v2 prefsChanged];
}

id sub_1000AE054(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

uint64_t sub_1000AEA08(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100966E40 <= 40)
  {
    if (dword_100966E40 != -1 || (Class result = _LogCategory_Initialize(), result)) {
      Class result = LogPrintF();
    }
  }
  *(unsigned char *)(*(void *)(v1 + 32) + 280) = *(unsigned char *)(v1 + 40);
  return result;
}

id sub_1000AEB80(uint64_t a1)
{
  return [*(id *)(a1 + 32) _commonCallCountChanged];
}

id sub_1000AEB88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _commonScreenStateChanged];
}

id sub_1000AEB90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _commonScreenStateChanged];
}

id sub_1000AEB98(uint64_t a1)
{
  if (dword_100966E40 <= 30 && (dword_100966E40 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _commonCallCountChanged];
  unsigned int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_1000AEC24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _bleUpdateMappingAndNearbyCoalesced];
}

id sub_1000AEC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _proxiedNotificationDidDismiss:a2 reason:a3];
}

id sub_1000AEC3C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _proxiedNotificationWasTapped:a2];
}

id sub_1000AF374(uint64_t a1)
{
  return [*(id *)(a1 + 32) _run];
}

id sub_1000B0DA0(uint64_t a1, uint64_t a2)
{
  return [_objc_msgSend(*(id *)(a1 + 32), "_runCallHandoffHandleResponse:error:", a2);
}

id sub_1000B0F8C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _runCallHandoffHandleDelayTimerFired];
}

id sub_1000B11D4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleActionDeviceFound:a2];
}

id sub_1000B11E0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleActionDeviceLost:a2];
}

id sub_1000B11EC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _bleActionDeviceChanged:a2];
}

void sub_1000B11F8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    if (dword_100966E40 <= 60 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
    {
      id v3 = v4;
LABEL_7:
      LogPrintF();
    }
  }
  else if (dword_100966E40 <= 30 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
  [*(id *)(a1 + 32) _update:v3];
}

id sub_1000B1F00(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _bleActionScanTimerFired];
}

id sub_1000B22A4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleInfoDeviceFound:a2];
}

id sub_1000B22B0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleInfoDeviceLost:a2];
}

id sub_1000B22BC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleInfoDeviceChanged:a2];
}

void sub_1000B22C8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    if (dword_100966E40 <= 60 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
    {
      id v3 = v4;
LABEL_7:
      LogPrintF();
    }
  }
  else if (dword_100966E40 <= 30 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
  [*(id *)(a1 + 32) _update:v3];
}

id sub_1000B33F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clinkEnsureStopped];
}

void sub_1000B33FC(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  if (dword_100966E40 <= 10 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
  {
    id v6 = &unk_10076DF87;
    id v7 = v8;
    uint64_t v5 = a3;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _bleUpdateMappingAndNearby:v5, v6, v7];
}

void sub_1000B34B0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100966E40 <= 10 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
  {
    id v3 = v4;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _bleUpdateMappingAndNearby:v3];
}

void sub_1000B3554(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100966E40 <= 10 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
  {
    id v3 = v4;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _bleUpdateMappingAndNearby:v3];
}

void sub_1000B35F8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    if (dword_100966E40 <= 60 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
    {
      id v3 = v4;
LABEL_7:
      LogPrintF();
    }
  }
  else if (dword_100966E40 <= 30 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
  [*(id *)(a1 + 32) _update:v3];
}

id sub_1000B36E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _clinkHandleRequest:a2 options:a3 responseHandler:a4];
}

void sub_1000B3A5C(uint64_t a1, void *a2)
{
  if (a2)
  {
    unsigned int v2 = *(NSObject **)(*(void *)(a1 + 32) + 288);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1000B3B14;
    v5[3] = &unk_1008CA248;
    id v3 = (id *)(a1 + 40);
    id v4 = a2;
    objc_copyWeak(&v6, v3);
    v5[4] = v4;
    dispatch_async(v2, v5);

    objc_destroyWeak(&v6);
  }
}

void sub_1000B3B14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _motionUpdate:*(void *)(a1 + 32)];
}

uint64_t sub_1000B3F68(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 152) containsObject:*(void *)(a1 + 40)];
  if (result)
  {
    if (dword_100966E40 <= 30 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
    {
      [*(id *)(a1 + 40) shouldAdvertise];
      LogPrintF();
    }
    id v3 = *(void **)(a1 + 32);
    return (uint64_t)[v3 _commonShouldAdvertiseChanged];
  }
  else if (dword_100966E40 <= 90)
  {
    if (dword_100966E40 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

id sub_1000B45CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _run];
}

uint64_t sub_1000B60A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B60B8(uint64_t a1)
{
}

void sub_1000B60C0(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = [*(id *)(*((void *)&v12 + 1) + 8 * i) clinkDevice];
        id v8 = [v7 mediaRouteIdentifier];

        if (v8)
        {
          if (dword_100966E40 <= 30 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
          {
            id v11 = v8;
            LogPrintF();
          }
          id v9 = [*(id *)(a1 + 32) deviceEnteredNearbyHandler:v11];

          if (v9)
          {
            uint64_t v10 = [*(id *)(a1 + 32) deviceEnteredNearbyHandler];
            ((void (**)(void, void *))v10)[2](v10, v8);
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
}

void sub_1000B6314(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) deviceWillTriggerHandler];
  if (v2)
  {
    id v3 = *(void **)(*(void *)(a1 + 40) + 120);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    _DWORD v4[2] = sub_1000B63AC;
    void v4[3] = &unk_1008CC390;
    v4[4] = v2;
    [v3 enumerateKeysAndObjectsUsingBlock:v4];
  }
}

void sub_1000B63AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  BOOL v4 = [v8 state] == 12;
  uint64_t v5 = v8;
  if (v4)
  {
    id v6 = [v8 clinkDevice];
    id v7 = [v6 mediaRouteIdentifier];

    if (v7)
    {
      if (dword_100966E40 < 31 && (dword_100966E40 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
    }

    uint64_t v5 = v8;
  }
}

void sub_1000B6594(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    if (dword_100966E40 <= 60 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
    {
      id v3 = v4;
LABEL_7:
      LogPrintF();
    }
  }
  else if (dword_100966E40 <= 30 && (dword_100966E40 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
  [*(id *)(a1 + 32) _update:v3];
}

id sub_1000B67A8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _serviceTimeoutFired];
}

id sub_1000B7518(void *a1)
{
  id result = [*(id *)(a1[4] + 144) handleNotificationWasDismissed:a1[5] reason:a1[6]];
  if ((a1[6] & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    id v3 = (void *)a1[4];
    return [v3 _throttleEventDidOccur];
  }
  return result;
}

id sub_1000B7610(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 144) handleNotificationWasTapped:*(void *)(a1 + 40)];
}

void sub_1000B7CCC(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  unsigned __int8 v5 = [*(id *)(a1 + 32) _combinedDeviceIsSuppressed:v9];
  id v6 = v9;
  if ((v5 & 1) == 0)
  {
    unsigned int v7 = [v9 state];
    id v6 = v9;
    switch(v7)
    {
      case 0xBu:
        uint64_t v8 = *(void *)(a1 + 40);
        goto LABEL_12;
      case 0xCu:
        uint64_t v8 = *(void *)(a1 + 48);
        goto LABEL_12;
      case 0xDu:
        uint64_t v8 = *(void *)(a1 + 56);
        goto LABEL_12;
      case 0xEu:
      case 0xFu:
        uint64_t v8 = *(void *)(a1 + 104);
        goto LABEL_12;
      case 0x10u:
        uint64_t v8 = *(void *)(a1 + 72);
        goto LABEL_12;
      case 0x11u:
        uint64_t v8 = *(void *)(a1 + 88);
        goto LABEL_12;
      case 0x12u:
        uint64_t v8 = *(void *)(a1 + 64);
        goto LABEL_12;
      case 0x13u:
        uint64_t v8 = *(void *)(a1 + 80);
        goto LABEL_12;
      case 0x14u:
        uint64_t v8 = *(void *)(a1 + 96);
LABEL_12:
        objc_storeStrong((id *)(*(void *)(v8 + 8) + 40), a3);
        id v6 = v9;
        break;
      default:
        break;
    }
  }
}

void sub_1000B7EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B7F08(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v14 = a3;
  unsigned int v7 = [v14 effectiveID];
  uint64_t v8 = v7;
  if (!v7) {
    goto LABEL_9;
  }
  id v9 = *(void **)(a1 + 32);
  id v10 = v7;
  id v11 = v9;
  if (v10 == v11)
  {

    goto LABEL_7;
  }
  long long v12 = v11;
  if (!v11)
  {

    goto LABEL_9;
  }
  unsigned int v13 = [v10 isEqual:v11];

  if (v13)
  {
LABEL_7:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
LABEL_9:
}

void sub_1000B81B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [v4 setAttachmentURL:0];
  [v4 setState:10];
  [v4 setNextState:0];
  [v4 setNotificationInfo:0];
  [*(id *)(a1 + 32) _uiStopIfNeeded:v4 reason:0];
}

void sub_1000B92E0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id sub_1000B9304(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_1000B9420(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _bleActionDeviceChanged:v2];
}

Class sub_1000B99D8()
{
  if (qword_10097FD98 != -1) {
    dispatch_once(&qword_10097FD98, &stru_1008CC428);
  }
  Class result = objc_getClass("TUCallCenter");
  qword_10097FD90 = (uint64_t)result;
  off_100966EB0 = (uint64_t (*)())sub_1000B9A3C;
  return result;
}

id sub_1000B9A3C()
{
  return (id)qword_10097FD90;
}

void sub_1000B9A48(id a1)
{
  qword_10097FDA0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities", 2);
}

Class sub_1000B9A74()
{
  if (qword_10097FD98 != -1) {
    dispatch_once(&qword_10097FD98, &stru_1008CC428);
  }
  Class result = objc_getClass("TUMutableRoute");
  qword_10097FDA8 = (uint64_t)result;
  off_100966EB8 = (uint64_t (*)())sub_1000B9AD8;
  return result;
}

id sub_1000B9AD8()
{
  return (id)qword_10097FDA8;
}

void sub_1000B9B38(id a1)
{
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)qword_10097FDB8;
  qword_10097FDB8 = v1;
}

void sub_1000BA110(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 80));
  _Unwind_Resume(a1);
}

void sub_1000BA160(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v5 = airdrop_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Rapport found person %@", (uint8_t *)&v7, 0xCu);
    }

    [WeakRetained addOrUpdateNodesForPerson:v3 withChanges:0];
    id v6 = +[NSNotificationCenter defaultCenter];
    [v6 postNotificationName:@"com.apple.sharingd.RapportChanged" object:0 userInfo:0];
  }
}

void sub_1000BA268(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v7 = airdrop_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_1000BC1E8((uint64_t)v5, a3, v7);
    }

    [WeakRetained addOrUpdateNodesForPerson:v5 withChanges:a3];
    id v8 = +[NSNotificationCenter defaultCenter];
    [v8 postNotificationName:@"com.apple.sharingd.RapportChanged" object:0 userInfo:0];
  }
}

void sub_1000BA320(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = airdrop_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Rapport lost person %@", (uint8_t *)&v7, 0xCu);
    }

    [WeakRetained removeNodesForPerson:v3];
    id v6 = +[NSNotificationCenter defaultCenter];
    [v6 postNotificationName:@"com.apple.sharingd.RapportChanged" object:0 userInfo:0];
  }
}

void sub_1000BA424(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    if ([WeakRetained[3] statusFlags]) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = 2;
    }
    [v3 updateUltraWideBandStateTo:v2];
    id WeakRetained = v3;
  }
}

void sub_1000BA480(id a1)
{
  uint64_t v1 = airdrop_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Rapport people discovery interrupted", v2, 2u);
  }
}

void sub_1000BA4E8(id a1)
{
  uint64_t v1 = airdrop_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Rapport people discovery invalidated", v2, 2u);
  }
}

void sub_1000BA550(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = airdrop_log();
  uint64_t v5 = (uint64_t)v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000BC2AC();
    }
    goto LABEL_8;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(*(void *)(a1 + 32) + 24) discoveredPeople];
    v8[0] = 67109120;
    v8[1] = [v6 count];
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v5, OS_LOG_TYPE_DEFAULT, "Rapport people discovery activated. Already discovered people %d", (uint8_t *)v8, 8u);
  }
  int v7 = [*(id *)(*(void *)(a1 + 32) + 24) statusChangedHandler];

  if (v7)
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 24) statusChangedHandler];
    (*(void (**)(void))(v5 + 16))();
LABEL_8:
  }
}

void sub_1000BACC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 identifier];
  uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:v4];

  if ([(id)objc_opt_class() deviceIsEligibleForAirDrop:v3])
  {
    if (v5)
    {
      if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
        [(id)objc_opt_class() updateRangingMeasurementForDevice:v3 inNode:v5];
      }
    }
    else
    {
      id v7 = [*(id *)(a1 + 32) createSFNodeFromMyRPDevice:v3];
      id v8 = airdrop_log();
      id v9 = v8;
      if (v7)
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 138412546;
          id v11 = v7;
          __int16 v12 = 2112;
          id v13 = v3;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SDRapportBrowser: Adding SFNode %@ for %@", (uint8_t *)&v10, 0x16u);
        }

        [*(id *)(*(void *)(a1 + 32) + 16) setObject:v7 forKeyedSubscript:v4];
      }
      else
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          sub_1000BC3F0();
        }
      }
    }
  }
  else if (v5)
  {
    id v6 = airdrop_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412546;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SDRapportBrowser: Removing SFNode %@ for %@", (uint8_t *)&v10, 0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) setObject:0 forKeyedSubscript:v4];
  }
}

void sub_1000BC1E8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = NSPrintF();
  *(_DWORD *)buf = 138412546;
  uint64_t v7 = a1;
  __int16 v8 = 2112;
  id v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Rapport person %@ changed %@", buf, 0x16u);
}

void sub_1000BC2AC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Rapport people discovery failed to activate with error %@", v2, v3, v4, v5, v6);
}

void sub_1000BC314()
{
  sub_10002972C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "SDRapportBrowser: Failed to add SFNode because accountID is nil for %@", v1, 0xCu);
}

void sub_1000BC388()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDRapportBrowser: createSFNodeFromRPPerson failed for %@", v2, v3, v4, v5, v6);
}

void sub_1000BC3F0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDRapportBrowser: createSFNodeFromMyRPDevice failed for %@", v2, v3, v4, v5, v6);
}

void sub_1000BC458()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDRapportBrowser: couldn't find contact with accountID for %@", v2, v3, v4, v5, v6);
}

void sub_1000BC4C0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDRapportBrowser: meCard is nil", v1, 2u);
}

uint64_t SDAutoUnlockAuthPromptImageDataReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 24) |= 2u;
      while (1)
      {
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0) {
          goto LABEL_42;
        }
        v18 += 7;
        BOOL v9 = v19++ >= 9;
        if (v9)
        {
          uint64_t v20 = 0;
          goto LABEL_44;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v20 = 0;
      }
LABEL_44:
      *(unsigned char *)(a1 + 20) = v20 != 0;
    }
    else if (v12 == 2)
    {
      uint64_t v23 = PBReaderReadData();
      int v24 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v23;
    }
    else if (v12 == 1)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      *(unsigned char *)(a1 + 24) |= 1u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_38;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_40;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_40:
      *(_DWORD *)(a1 + 16) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000BD22C(uint64_t a1)
{
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"com.apple.sharingd.AirDropUnpublished" object:*(void *)(a1 + 32) userInfo:0];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 updateServerState];
}

id sub_1000BEA80(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

id sub_1000BF1FC(void *a1, uint64_t a2)
{
  return _[a1 didReceiveError:a2];
}

id sub_1000BF204(void *a1, uint64_t a2)
{
  return _[a1 didOpenConnection:a2];
}

id sub_1000BF20C(void *a1, uint64_t a2)
{
  return _[a1 didCloseConnection:a2];
}

id *sub_1000BF448(id *result, uint64_t a2, int a3)
{
  if (a3) {
    return (id *)_[result[4] foundDevice:a2];
  }
  return result;
}

id sub_1000BF760(uint64_t a1)
{
  return [*(id *)(a1 + 32) startHTTPServer:8770];
}

id sub_1000BF918(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateServerState];
}

id sub_1000BF920(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateServerState];
}

id sub_1000BFB08(uint64_t a1)
{
  [*(id *)(a1 + 32) stop];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 updateServerState];
}

void sub_1000C00F0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "AirDrop server didReceiveError %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C0168(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "BTLE discovered duplicate hashes %@ rssi %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000C01F0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropServer: failedToStartScanningWithError %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000C0268()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "AirDrop updateServerState with nil delegate", v2, v3, v4, v5, v6);
}

void sub_1000C029C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropServer: intermediate certificate not available", v2, v3, v4, v5, v6);
}

void sub_1000C02D0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropServer: _CFHTTPServerCreateService returned NULL", v2, v3, v4, v5, v6);
}

void sub_1000C0304()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropServer: _kCFHTTPServerServicePort is NULL", v2, v3, v4, v5, v6);
}

uint64_t SDAutoUnlockSessionConfirmationACKReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0;
      *(unsigned char *)(a1 + 16) |= 2u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          uint64_t v19 = 0;
          goto LABEL_42;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v19 = 0;
      }
LABEL_42:
      *(unsigned char *)(a1 + 12) = v19 != 0;
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 16) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C138C(uint64_t a1, uint64_t a2, os_log_t log)
{
  if ((unint64_t)(a1 - 1) > 0xE) {
    CFStringRef v3 = @"?";
  }
  else {
    CFStringRef v3 = off_1008CC730[a1 - 1];
  }
  int v4 = 138412802;
  CFStringRef v5 = v3;
  __int16 v6 = 1024;
  int v7 = a1;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropListener UNHANDLED EVENT %@ [%d] %@", (uint8_t *)&v4, 0x1Cu);
}

void sub_1000C155C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412546;
  uint64_t v3 = a1;
  __int16 v4 = 2112;
  CFStringRef v5 = @"en0";
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "IP Address = %@, Interface = %@", (uint8_t *)&v2, 0x16u);
}

id sub_1000C1DBC(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 168))
  {
    uint64_t v2 = +[SDProximityController sharedController];
    uint64_t v3 = *(void *)(a1 + 32);
    __int16 v4 = *(void **)(v3 + 168);
    *(void *)(v3 + 168) = v2;
  }
  if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _reportProgress:10];
  CFStringRef v5 = *(void **)(a1 + 32);

  return [v5 _run];
}

void *sub_1000C1EEC(void *result)
{
  if (!*(unsigned char *)(result[4] + 129))
  {
    uint64_t v1 = result;
    if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *(unsigned char *)(v1[4] + 129) = 1;
    uint64_t v2 = (void *)v1[4];
    return [v2 _invalidate];
  }
  return result;
}

void *sub_1000C2610(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _bleScannerProxPairingDeviceFound:a2];
  }
  return result;
}

void *sub_1000C262C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _bleScannerProxPairingDeviceFound:a2];
  }
  return result;
}

void sub_1000C2648(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_100967040 <= 90 && (dword_100967040 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 24) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      __int16 v6 = *(void **)(v5 + 24);
      *(void *)(v5 + 24) = 0;

      goto LABEL_11;
    }
    if (dword_100967040 <= 30)
    {
      id v9 = 0;
      if (dword_100967040 != -1 || (v7 = _LogCategory_Initialize(), __int16 v4 = 0, v7))
      {
        LogPrintF();
LABEL_11:
        __int16 v4 = v9;
      }
    }
  }
}

void *sub_1000C29D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[2]) {
    return _[result _bleScannerNearbyInfoDeviceFound:a2];
  }
  return result;
}

void *sub_1000C29EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[2]) {
    return _[result _bleScannerNearbyInfoDeviceFound:a2];
  }
  return result;
}

void sub_1000C2A08(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 16))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_100967040 <= 90 && (dword_100967040 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 16) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      __int16 v6 = *(void **)(v5 + 16);
      *(void *)(v5 + 16) = 0;

      goto LABEL_11;
    }
    if (dword_100967040 <= 30)
    {
      id v9 = 0;
      if (dword_100967040 != -1 || (v7 = _LogCategory_Initialize(), __int16 v4 = 0, v7))
      {
        LogPrintF();
LABEL_11:
        __int16 v4 = v9;
      }
    }
  }
}

void sub_1000C2D04(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_100967040 <= 90 && (dword_100967040 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 8) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      __int16 v6 = *(void **)(v5 + 8);
      *(void *)(v5 + 8) = 0;

      goto LABEL_11;
    }
    if (dword_100967040 <= 30)
    {
      id v9 = 0;
      if (dword_100967040 != -1 || (v7 = _LogCategory_Initialize(), __int16 v4 = 0, v7))
      {
        LogPrintF();
LABEL_11:
        __int16 v4 = v9;
      }
    }
  }
}

void sub_1000C3240(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 112))
  {
    id v9 = v3;
    if (dword_100967040 <= 90 && (dword_100967040 != -1 || _LogCategory_Initialize()))
    {
      id v8 = v9;
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 40) + 112) invalidate:v8];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 112);
    *(void *)(v4 + 112) = 0;

    *(_DWORD *)(*(void *)(a1 + 40) + 84) = 3;
    __int16 v6 = *(void **)(a1 + 40);
    if (v9)
    {
      [v6 _reportError:v9];
    }
    else
    {
      int v7 = NSErrorF();
      [v6 _reportError:v7];
    }
    id v3 = v9;
  }
}

uint64_t sub_1000C3364(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 112) && dword_100967040 <= 90)
  {
    if (dword_100967040 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_1000C33E8(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 112) && dword_100967040 <= 90)
  {
    if (dword_100967040 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      return LogPrintF();
    }
  }
  return result;
}

void *sub_1000C346C(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 112) && *(_DWORD *)(v1 + 84) == 1)
  {
    uint64_t v2 = result;
    *(_DWORD *)(v1 + 84) = 4;
    if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v3 = (void *)v2[5];
    return [v3 _run];
  }
  return result;
}

void sub_1000C3520(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 112))
  {
    id v8 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_100967040 <= 90 && (dword_100967040 != -1 || _LogCategory_Initialize()))
      {
        id v7 = v4;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 112) invalidate:v7];
      uint64_t v5 = *(void *)(a1 + 40);
      __int16 v6 = *(void **)(v5 + 112);
      *(void *)(v5 + 112) = 0;

      *(_DWORD *)(*(void *)(a1 + 40) + 84) = 3;
      [*(id *)(a1 + 40) _reportError:v4];
    }
    else if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }

    id v3 = v8;
  }
}

void sub_1000C37C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 112))
  {
    id v6 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_100967040 <= 90 && (dword_100967040 != -1 || _LogCategory_Initialize()))
      {
        id v5 = v4;
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 104) = 3;
      [*(id *)(a1 + 40) _reportError:v4, v5];
    }
    else
    {
      if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      [*(id *)(a1 + 40) _reportProgressTriggeredDevice:210];
      *(_DWORD *)(*(void *)(a1 + 40) + 104) = 4;
      [*(id *)(a1 + 40) _run];
    }

    id v3 = v6;
  }
}

void sub_1000C3BA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 112))
  {
    if (v3)
    {
      if (dword_100967040 > 90)
      {
LABEL_11:
        [*(id *)(a1 + 40) _reportProgressTriggeredDevice:220 v6];
        uint64_t v5 = *(void *)(a1 + 48);
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 3221225472;
        v7[2] = sub_1000C3D10;
        v7[3] = &unk_1008CC810;
        long long v8 = *(_OWORD *)(a1 + 32);
        [(id)v8 sendRequestID:@"_shAu" options:0 request:v5 responseHandler:v7];
        goto LABEL_12;
      }
      if (dword_100967040 != -1 || _LogCategory_Initialize())
      {
        id v6 = v4;
        LogPrintF();
      }
    }
    if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize()))
    {
      id v6 = *(void **)(a1 + 48);
      LogPrintF();
    }
    goto LABEL_11;
  }
LABEL_12:
}

void *sub_1000C3D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v5 == result[14]) {
    return _[result _runGuestiOSShareAudioProcessResponse:a4 error:a2];
  }
  return result;
}

void sub_1000C3ED8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 112))
  {
    if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v14 = [v6 identifier];
      id v15 = v7;
      LogPrintF();
    }
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 88), a2);
    CFStringGetTypeID();
    uint64_t v8 = CFDictionaryGetTypedValue();
    uint64_t v9 = *(void *)(a1 + 40);
    int v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    if (*(void *)(*(void *)(a1 + 40) + 40))
    {
      *(_DWORD *)(*(void *)(a1 + 40) + 48) = CFDictionaryGetInt64Ranged();
      *(_DWORD *)(*(void *)(a1 + 40) + 64) = CFDictionaryGetInt64Ranged();
      if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        id v15 = (id)*(unsigned int *)(v11 + 64);
        id v16 = v15;
        uint64_t v14 = *(void **)(v11 + 40);
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 120) = 4;
      [*(id *)(a1 + 40) _run:v14, v15, v16];
    }
    else
    {
      if (dword_100967040 <= 90 && (dword_100967040 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 120) = 3;
      char v12 = *(void **)(a1 + 40);
      unsigned int v13 = NSErrorF();
      [v12 _reportError:v13];
    }
  }
}

void sub_1000C43CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 56))
  {
    id v6 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_100967040 <= 90 && (dword_100967040 != -1 || _LogCategory_Initialize()))
      {
        id v5 = v4;
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 52) = 3;
      [*(id *)(a1 + 40) _reportError:v4, v5];
    }
    else
    {
      if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 52) = 4;
      [*(id *)(a1 + 40) _reportProgressTriggeredDevice:310];
      [*(id *)(a1 + 40) _run];
    }

    id v3 = v6;
  }
}

id sub_1000C55F0(uint64_t a1)
{
  if (dword_100967040 <= 30 && (dword_100967040 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _pickableRoutesChanged];
}

void *sub_1000C6058(void *result)
{
  uint64_t v1 = result;
  if (dword_100967040 <= 30)
  {
    if (dword_100967040 != -1 || (uint64_t result = (void *)_LogCategory_Initialize(), result)) {
      uint64_t result = (void *)LogPrintF();
    }
  }
  uint64_t v2 = v1[4];
  if (*(_DWORD *)(v2 + 32) == 1)
  {
    *(_DWORD *)(v2 + 32) = 4;
    id v3 = (void *)v1[4];
    return [v3 _run];
  }
  return result;
}

Class sub_1000C6224()
{
  if (qword_10097FDF0 != -1) {
    dispatch_once(&qword_10097FDF0, &stru_1008CC858);
  }
  Class result = objc_getClass("AVSystemController");
  qword_10097FDE8 = (uint64_t)result;
  off_1009670B0[0] = (uint64_t (*)())sub_1000C6288;
  return result;
}

id sub_1000C6288()
{
  return (id)qword_10097FDE8;
}

void sub_1000C6294(id a1)
{
  qword_10097FDF8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MediaExperience.framework/MediaExperience", 2);
}

id sub_1000C62C0()
{
  if (qword_10097FDF0 != -1) {
    dispatch_once(&qword_10097FDF0, &stru_1008CC858);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_10097FDF8, "AVSystemController_PickableRoutesDidChangeNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FDC8, *v0);
  }
  off_1009670B8[0] = (uint64_t (*)())sub_1000C6350;
  uint64_t v1 = (void *)qword_10097FDC8;

  return v1;
}

id sub_1000C6350()
{
  return (id)qword_10097FDC8;
}

id sub_1000C635C()
{
  if (qword_10097FDF0 != -1) {
    dispatch_once(&qword_10097FDF0, &stru_1008CC858);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_10097FDF8, "AVSystemController_SubscribeToNotificationsAttribute");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FDE0, *v0);
  }
  off_1009670C0[0] = (uint64_t (*)())sub_1000C63EC;
  uint64_t v1 = (void *)qword_10097FDE0;

  return v1;
}

id sub_1000C63EC()
{
  return (id)qword_10097FDE0;
}

id sub_1000C63F8()
{
  if (qword_10097FDF0 != -1) {
    dispatch_once(&qword_10097FDF0, &stru_1008CC858);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_10097FDF8, "AVSystemController_PickableRoutesAttribute");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FDC0, *v0);
  }
  off_1009670C8[0] = (uint64_t (*)())sub_1000C6488;
  uint64_t v1 = (void *)qword_10097FDC0;

  return v1;
}

id sub_1000C6488()
{
  return (id)qword_10097FDC0;
}

id sub_1000C6494()
{
  if (qword_10097FDF0 != -1) {
    dispatch_once(&qword_10097FDF0, &stru_1008CC858);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_10097FDF8, "AVSystemController_RouteDescriptionKey_RouteCurrentlyPicked");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FDD0, *v0);
  }
  off_1009670D0[0] = (uint64_t (*)())sub_1000C6524;
  uint64_t v1 = (void *)qword_10097FDD0;

  return v1;
}

id sub_1000C6524()
{
  return (id)qword_10097FDD0;
}

id sub_1000C6530()
{
  if (qword_10097FDF0 != -1) {
    dispatch_once(&qword_10097FDF0, &stru_1008CC858);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_10097FDF8, "AVSystemController_RouteDescriptionKey_RouteUID");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FDD8, *v0);
  }
  off_1009670D8 = (uint64_t (*)())sub_1000C65C0;
  uint64_t v1 = (void *)qword_10097FDD8;

  return v1;
}

id sub_1000C65C0()
{
  return (id)qword_10097FDD8;
}

void sub_1000C6D64(void *a1, uint64_t a2, NSObject *a3)
{
  id v5 = [a1 transfer];
  int v6 = 138412546;
  id v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Create destination for %@ failed %@", (uint8_t *)&v6, 0x16u);
}

uint64_t SDUnlockStashKeyExchangeRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadData();
      uint64_t v19 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v18;
    }
    else
    {
      if (v12 == 2)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v15 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0) {
            goto LABEL_42;
          }
          v20 += 7;
          BOOL v9 = v21++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v25 = 16;
      }
      else
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v25 = 20;
      }
      *(_DWORD *)(a1 + v25) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000C7A44(NSObject *a1, int a2, uint64_t a3, void *a4)
{
  char v8 = a4;
  dispatch_assert_queue_V2(v8[5]);
  switch(a2)
  {
    case 0:
      if (dword_1009670E0 <= 30 && (dword_1009670E0 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      v8[4] = a1;
      *((unsigned char *)v8 + 8) = 0;
      goto LABEL_25;
    case 1:
      if (dword_1009670E0 > 30 || dword_1009670E0 == -1 && !_LogCategory_Initialize()) {
        goto LABEL_24;
      }
      goto LABEL_13;
    case 2:
      if (dword_1009670E0 <= 60 && (dword_1009670E0 != -1 || _LogCategory_Initialize())) {
LABEL_13:
      }
        LogPrintF();
LABEL_24:
      v8[4] = 0;
      *((unsigned char *)v8 + 8) = 0;
      BTSessionDetachWithQueue();
      CFRelease(v8);
      goto LABEL_25;
    case 3:
      if (dword_1009670E0 <= 60 && (dword_1009670E0 != -1 || _LogCategory_Initialize())) {
        goto LABEL_16;
      }
      goto LABEL_25;
    default:
      if (dword_1009670E0 <= 40 && (dword_1009670E0 != -1 || _LogCategory_Initialize())) {
LABEL_16:
      }
        LogPrintF();
LABEL_25:

      return;
  }
}

void sub_1000C7CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  int v10 = a6;
  dispatch_assert_queue_V2(v10[5]);
  char v8 = +[NSData dataWithBytes:a4 length:a5];
  if (dword_1009670E0 <= 30 && (dword_1009670E0 != -1 || _LogCategory_Initialize()))
  {
    BOOL v9 = v8;
    LogPrintF();
  }
  -[dispatch_queue_t handleEngravingData:](v10, "handleEngravingData:", v8, v9);
}

void sub_1000C81D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = v6;
  if (v6)
  {
    if ([v6 code] != (id)-10814)
    {
      char v8 = airdrop_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000C8724(a1, (uint64_t)v7, v8);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 32) setAppLink:v5];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000C8614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C863C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained transfer];
  uint64_t v2 = [v1 completedURLs];
  id v3 = [WeakRetained openURLs:v2];

  char v4 = [WeakRetained completionHandler];
  ((void (**)(void, id, void, uint64_t))v4)[2](v4, v3, 0, 1);
}

void sub_1000C8724(uint64_t a1, uint64_t a2, NSObject *a3)
{
  id v6 = NSStringFromSelector(*(SEL *)(a1 + 56));
  uint64_t v7 = *(void *)(a1 + 40);
  int v8 = 138412802;
  BOOL v9 = v6;
  __int16 v10 = 2112;
  uint64_t v11 = v7;
  __int16 v12 = 2112;
  uint64_t v13 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%@ Failed to generate app link for %@ (%@)", (uint8_t *)&v8, 0x20u);
}

uint64_t SDAuthenticationPairingResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 52) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_53;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_55:
        uint64_t v34 = 44;
        goto LABEL_64;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 52) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_59:
        uint64_t v34 = 40;
        goto LABEL_64;
      case 3u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 24;
        goto LABEL_37;
      case 4u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 16;
        goto LABEL_37;
      case 5u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 32;
LABEL_37:
        int v24 = *(void **)(a1 + v23);
        *(void *)(a1 + v23) = v22;

        continue;
      case 6u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 52) |= 1u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v14 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              BOOL v9 = v26++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_63:
        uint64_t v34 = 8;
LABEL_64:
        *(_DWORD *)(a1 + v34) = v14;
        continue;
      case 7u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        *(unsigned char *)(a1 + 52) |= 8u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v32 == -1 || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
      v31 |= (unint64_t)(v33 & 0x7F) << v29;
      if ((v33 & 0x80) == 0) {
        goto LABEL_66;
      }
      v29 += 7;
      BOOL v9 = v30++ >= 9;
      if (v9)
      {
        uint64_t v31 = 0;
        goto LABEL_68;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v31 = 0;
    }
LABEL_68:
    *(unsigned char *)(a1 + 48) = v31 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000C9A58(void *a1)
{
  id v1 = a1;
  memset(v6, 0, 14);
  if ([v1 length])
  {
    id v2 = [v1 length];
    if ((unint64_t)v2 >= 0xE) {
      uint64_t v3 = 14;
    }
    else {
      uint64_t v3 = (uint64_t)v2;
    }
    [v1 getBytes:v6 length:v3];
  }
  else
  {
    char v4 = handoff_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000CA230(v1, v4);
    }
  }
  return v6[0];
}

uint64_t sub_1000C9AF8(unsigned int a1)
{
  return (unsigned __int16)(a1 >> 8);
}

id sub_1000C9B00(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  LODWORD(v6) = a2;
  WORD2(v6) = WORD2(a2);
  uint64_t v2 = 5;
  while (!*((unsigned char *)&v5 + v2))
  {
    if (++v2 == 14)
    {
      uint64_t v3 = 0;
      goto LABEL_6;
    }
  }
  uint64_t v3 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", (char *)&v5 + 5, 9, v5, v6);
LABEL_6:

  return v3;
}

id sub_1000C9B78(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = objc_opt_new();
  uint64_t v6 = +[NSNumber numberWithInteger:a1 & 1];
  [v5 setObject:v6 forKeyedSubscript:SFActivityAdvertiserOptionVersionKey];

  unint64_t v7 = +[NSNumber numberWithInteger:(a1 >> 1) & 3];
  [v5 setObject:v7 forKeyedSubscript:SFActivityAdvertiserOptionMinorVersionKey];

  char v8 = +[NSNumber numberWithBool:(a1 >> 3) & 1];
  [v5 setObject:v8 forKeyedSubscript:SFActivityAdvertiserOptionFlagCopyPasteKey];

  if ((a1 & 0x100000000) != 0)
  {
    BOOL v9 = off_100967150();
    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:v9];
  }
  if (a3)
  {
    int v10 = off_100967158();
    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:v10];
  }

  return v5;
}

id sub_1000C9CC4(void *a1)
{
  id v1 = a1;
  if (v1) {
    uint64_t v2 = objc_opt_new();
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = [v1 uniqueIDOverride];
  [v2 setUniqueID:v3];

  char v4 = [v1 modelIdentifier];
  [v2 setModelIdentifier:v4];

  uint64_t v5 = [v1 productName];
  [v2 setProductName:v5];

  uint64_t v6 = [v1 productVersion];
  [v2 setProductVersion:v6];

  unint64_t v7 = [v1 productBuildVersion];
  [v2 setProductBuildVersion:v7];

  char v8 = [v1 name];
  [v2 setName:v8];

  BOOL v9 = [v1 enclosureColor];
  [v2 setEnclosureColor:v9];

  [v2 setDefaultPairedDevice:[v1 isDefaultPairedDevice]];

  return v2;
}

void sub_1000C9E18(int a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1)
  {
    v14[0] = @"type";
    uint64_t v6 = a3;
    unint64_t v7 = +[NSNumber numberWithInt:0];
    v15[0] = v7;
    v14[1] = @"success";
    char v8 = +[NSNumber numberWithBool:a2];
    v15[1] = v8;
    v14[2] = @"timeSinceLastRequest";
    BOOL v9 = +[NSNumber numberWithLong:0];
    v15[2] = v9;
    v14[3] = @"errorCode";
    uint64_t v10 = +[NSNumber numberWithLong:a4];
    uint64_t v11 = (void *)v10;
    v14[4] = @"errorDomain";
    CFStringRef v12 = &stru_1008E7020;
    if (v6) {
      CFStringRef v12 = v6;
    }
    v15[3] = v10;
    v15[4] = v12;
    unsigned int v13 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:5];

    SFMetricsLog();
  }
}

void sub_1000C9F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[0] = @"oldKeyPresent";
  unint64_t v7 = +[NSNumber numberWithBool:a1];
  v13[0] = v7;
  v12[1] = @"oldKeyCounter";
  char v8 = +[NSNumber numberWithLong:a2];
  v13[1] = v8;
  v12[2] = @"newKeyCounter";
  BOOL v9 = +[NSNumber numberWithLong:a3];
  v13[2] = v9;
  v12[3] = @"timeBetweenKeyCreations";
  uint64_t v10 = +[NSNumber numberWithLong:a4];
  v13[3] = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:4];

  SFMetricsLog();
}

id sub_1000CA0CC()
{
  if (qword_10097FE10 != -1) {
    dispatch_once(&qword_10097FE10, &stru_1008CC8A0);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_10097FE18, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FE00, *v0);
  }
  off_100967150 = (uint64_t (*)())sub_1000CA15C;
  id v1 = (void *)qword_10097FE00;

  return v1;
}

id sub_1000CA15C()
{
  return (id)qword_10097FE00;
}

void sub_1000CA168(id a1)
{
  qword_10097FE18 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

id sub_1000CA194()
{
  if (qword_10097FE10 != -1) {
    dispatch_once(&qword_10097FE10, &stru_1008CC8A0);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_10097FE18, "UAUserActivityIsHighPriorityOptionKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10097FE08, *v0);
  }
  off_100967158 = (uint64_t (*)())sub_1000CA224;
  id v1 = (void *)qword_10097FE08;

  return v1;
}

id sub_1000CA224()
{
  return (id)qword_10097FE08;
}

void sub_1000CA230(void *a1, NSObject *a2)
{
  int v3 = 134218240;
  id v4 = [a1 length];
  __int16 v5 = 2048;
  uint64_t v6 = 14;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Ignoring advertisment data as it is of incorrect size %lu, expected %zu", (uint8_t *)&v3, 0x16u);
}

void sub_1000CA348(id a1)
{
  id v1 = (void *)qword_10097FE20;
  qword_10097FE20 = (uint64_t)&off_100906E18;
}

void sub_1000CAF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CAF80(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained notifyDelegate];
}

void sub_1000CB334(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000CB358(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained notifyDelegate];
}

id sub_1000CC568(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 notifyDelegate];
}

id sub_1000CC684(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 notifyDelegate];
}

id sub_1000CC81C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 notifyDelegate];
}

id sub_1000CC938(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 notifyDelegate];
}

id sub_1000CCB1C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 notifyDelegate];
}

void sub_1000CCC70(uint64_t a1)
{
  uint64_t v2 = +[SDAuthenticationManager shared];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1000CCD20;
  void v4[3] = &unk_1008CC988;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  [v2 listEligibleDevicesFor:v3 completionHandler:v4];
}

uint64_t sub_1000CCD20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000CCF48(void *a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 enableFor:a1[7] deviceID:a1[4] passcode:a1[5] sessionID:a1[6]];
}

void sub_1000CD11C(void *a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 requestEnablementFor:a1[6] deviceID:a1[4] sessionID:a1[5]];
}

void sub_1000CD2F0(void *a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 disableFor:a1[6] idsDeviceID:a1[4] sessionID:a1[5]];
}

void sub_1000CD4C4(void *a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 canAuthenticateFor:a1[6] deviceID:a1[4] sessionID:a1[5]];
}

void sub_1000CD698(void *a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 authenticateFor:a1[6] sessionID:a1[4] options:a1[5]];
}

void sub_1000CD7FC(uint64_t a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 cancel:*(void *)(a1 + 32)];
}

void sub_1000CD980(uint64_t a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 registerForApprovalRequestsFor:*(void *)(a1 + 32)];
}

void sub_1000CDABC(uint64_t a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 addAuthenticationStateChangesObserver:*(void *)(a1 + 32) identifier:*(void *)(a1 + 40)];
}

void sub_1000CDBD8(uint64_t a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 removeAuthenticationStateChangesObserverFor:*(void *)(a1 + 32)];
}

void sub_1000CDD80(void *a1)
{
  id v2 = +[SDAuthenticationManager shared];
  [v2 reportApprovalResultWithAcmToken:a1[4] error:a1[5] sessionID:a1[6]];
}

void sub_1000CE524()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Client does not have proper entitlement to perform authentication", v2, v3, v4, v5, v6);
}

void sub_1000CE558(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 bundleID];
  uint64_t v4 = +[NSXPCConnection currentConnection];
  int v5 = 138412802;
  uint8_t v6 = v3;
  __int16 v7 = 1024;
  unsigned int v8 = [v4 processIdentifier];
  __int16 v9 = 2112;
  CFStringRef v10 = @"com.apple.private.sharing.unlock-manager";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Client (%@-%d) does not have unlock manager entitlement = %@", (uint8_t *)&v5, 0x1Cu);
}

CFStringRef sub_1000CEC68(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE) {
    return @"?";
  }
  else {
    return *(&off_1008CCA70 + a1 - 1);
  }
}

void sub_1000CEF50()
{
  v1[0] = 136315394;
  sub_1000CEF3C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s transferIdentifier: %@", (uint8_t *)v1, 0x16u);
}

void sub_1000CEFD0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropListener didReceiveError %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000CF048(uint64_t a1, void *a2, NSObject *a3)
{
  uint8_t v6 = [a2 objectForKeyedSubscript:kSFOperationBytesCopiedKey];
  [v6 doubleValue];
  double v8 = v7;
  __int16 v9 = [a2 objectForKeyedSubscript:kSFOperationTotalBytesKey];
  [v9 doubleValue];
  int v11 = 138412802;
  CFStringRef v12 = @"Progress";
  __int16 v13 = 2112;
  uint64_t v14 = a1;
  __int16 v15 = 2048;
  double v16 = v8 / v10;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "SDNetworkOperationCallBack (event = %@, recordID = %@, progress = %f)", (uint8_t *)&v11, 0x20u);
}

void sub_1000CF158(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v5 = a1;
  int v6 = 138412802;
  CFStringRef v7 = sub_1000CEC68(a1);
  __int16 v8 = 1024;
  int v9 = v5;
  __int16 v10 = 2112;
  uint64_t v11 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDNetworkOperationDelegate UNHANDLED EVENT %@ [%d] %@", (uint8_t *)&v6, 0x1Cu);
}

void sub_1000CF20C()
{
  v3[0] = 138412802;
  sub_1000CEF3C();
  __int16 v4 = v0;
  uint64_t v5 = v1;
  _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "SDNetworkOperationCallBack (event = %@, recordID = %@ , SInt32 error = %@)", (uint8_t *)v3, 0x20u);
}

uint64_t SDAutoUnlockDeviceRegistrationStepReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        BOOL v9 = v5++ >= 9;
        if (v9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((v6 >> 3) == 3) {
        break;
      }
      if (v12 != 2)
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_46;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v25 = 24;
        goto LABEL_45;
      }
      uint64_t v22 = PBReaderReadData();
      uint64_t v23 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v22;

LABEL_46:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    char v18 = 0;
    unsigned int v19 = 0;
    uint64_t v15 = 0;
    *(unsigned char *)(a1 + 28) |= 1u;
    while (1)
    {
      unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_42;
      }
      v18 += 7;
      BOOL v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v15) = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_44:
    uint64_t v25 = 8;
LABEL_45:
    *(_DWORD *)(a1 + v25) = v15;
    goto LABEL_46;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockDisableReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      uint64_t v17 = PBReaderReadString();
      char v18 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v17;
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_30;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000D0418()
{
  return SFLocalizedStringForKey();
}

void sub_1000D0424(void *a1)
{
  id v1 = a1;
  uint64_t v189 = 0;
  v190 = &v189;
  uint64_t v191 = 0x2020000000;
  char v192 = 0;
  uint64_t v2 = SDAutoUnlockManagerMetricSuccessKey;
  uint64_t v3 = [v1 objectForKeyedSubscript:SDAutoUnlockManagerMetricSuccessKey];
  [v3 BOOLValue];

  uint64_t v4 = SDAutoUnlockManagerMetricErrorCodeKey;
  unsigned int v5 = [v1 objectForKeyedSubscript:SDAutoUnlockManagerMetricErrorCodeKey];
  [v5 integerValue];

  int v185 = *((unsigned __int8 *)v190 + 24);
  id v6 = v1;
  unint64_t v7 = [v6 objectForKeyedSubscript:@"SDAutoUnlockBypassMetricLog"];
  unsigned __int8 v8 = [v7 BOOLValue];

  if (v8)
  {
    BOOL v9 = auto_unlock_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Logging AutoUnlock attempt results bypassed.", buf, 2u);
    }
    goto LABEL_126;
  }
  int v10 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricBluetoothKeyDeviceDiscoveryKey];
  [v10 doubleValue];
  double v183 = v11;

  char v12 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricBluetoothProxyDeviceDiscoveryKey];
  [v12 doubleValue];
  double v181 = v13;

  uint64_t v14 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricBluetoothProxyConnectionKey];
  [v14 doubleValue];
  double v179 = v15;

  char v16 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricBluetoothKeyConnectionKey];
  [v16 doubleValue];
  double v177 = v17;

  char v18 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricPrewarmTimeKey];
  [v18 doubleValue];
  double v170 = v19;

  unint64_t v20 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricBluetoothAWDLExchangeKey];
  [v20 doubleValue];
  double v174 = v21;

  uint64_t v22 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricBluetoothKeyRequestExchangeKey];
  [v22 doubleValue];
  double v172 = v23;

  int v24 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricBluetoothTokenExchangeKey];
  [v24 doubleValue];
  double v168 = v25;

  unsigned int v26 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricAWDLBringUpKey];
  [v26 doubleValue];
  double v166 = v27;

  char v28 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricAWDLPeerFoundKey];
  [v28 doubleValue];
  double v30 = v29;

  uint64_t v31 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricAWDLRangingKey];
  [v31 doubleValue];
  double v33 = v32;

  uint64_t v34 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricDisplayWaitKey];
  [v34 doubleValue];
  double v36 = v35;

  id v37 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricClamshellWaitKey];
  [v37 doubleValue];
  double v39 = v38;

  uint64_t v40 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricBluetoothConfirmationKey];
  [v40 doubleValue];
  double v42 = v41;

  uint64_t v43 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricAttemptTimeKey];
  [v43 doubleValue];
  double v45 = v44;

  id v46 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricTimeKey];
  [v46 doubleValue];
  double v48 = v47;

  uint64_t v49 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricCancelTimeKey];
  [v49 doubleValue];
  double v162 = v50;

  uint64_t v51 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricDistanceKey];
  [v51 doubleValue];
  double v164 = v52;

  long long v53 = +[SDStatusMonitor sharedMonitor];
  uint64_t v188 = [v53 lastDarkWakeDate];

  if (v188)
  {
    id v54 = +[NSDate date];
    [v54 timeIntervalSinceDate:v188];
    double v56 = v55;

    uint64_t v57 = (uint64_t)v56;
    if ((uint64_t)v56 != -1 && v57 >= 100)
    {
      sub_1000D1E8C((double)v57);
      uint64_t v57 = (uint64_t)v58;
    }
  }
  else
  {
    uint64_t v57 = -1;
  }
  os_log_type_t v59 = auto_unlock_log();
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v188;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v57;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Last dark wake (date: %@, rounded seconds: %lld)", buf, 0x16u);
  }

  uint64_t v60 = SDAutoUnlockManagerMetricTimeSinceLastWakeKey;
  v61 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricTimeSinceLastWakeKey];
  if ([v61 integerValue])
  {
    NSData v62 = [v6 objectForKeyedSubscript:v60];
    uint64_t v63 = (uint64_t)[v62 integerValue];

    if (v63 != -1)
    {
      if ((int)v63 >= 100)
      {
        sub_1000D1E8C((double)(int)v63);
        uint64_t v63 = (int)v64;
      }
      goto LABEL_17;
    }
  }
  else
  {
  }
  uint64_t v63 = 0xFFFFFFFFLL;
LABEL_17:
  id v65 = auto_unlock_log();
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v63;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Rounded time since last wake %d", buf, 8u);
  }

  v193[0] = @"deviceModel";
  uint64_t v66 = SDAutoUnlockManagerMetricKeyDeviceModelKey;
  v176 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricKeyDeviceModelKey];
  if (v176)
  {
    CFStringRef v67 = [v6 objectForKeyedSubscript:v66];
  }
  else
  {
    CFStringRef v67 = &stru_1008E7020;
  }
  v135 = (__CFString *)v67;
  *(void *)buf = v67;
  v193[1] = @"proxyModel";
  uint64_t v68 = SDAutoUnlockManagerMetricProxyDeviceModelKey;
  v161 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricProxyDeviceModelKey];
  if (v161)
  {
    CFStringRef v69 = [v6 objectForKeyedSubscript:v68];
  }
  else
  {
    CFStringRef v69 = &stru_1008E7020;
  }
  v134 = (__CFString *)v69;
  *(void *)&uint8_t buf[8] = v69;
  v193[2] = @"usingProxy";
  uint64_t v70 = SDAutoUnlockManagerMetricUsingProxyDeviceKey;
  v187 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricUsingProxyDeviceKey];
  if (v187)
  {
    uint64_t v71 = [v6 objectForKeyedSubscript:v70];
  }
  else
  {
    uint64_t v71 = &off_1009029A0;
  }
  v133 = v71;
  *(void *)&uint8_t buf[16] = v71;
  v193[3] = @"bleKeyDiscoveryTime";
  v159 = +[NSNumber numberWithUnsignedInt:(v183 * 1000.0)];
  v195 = v159;
  v193[4] = @"bleProxyDiscoveryTime";
  v158 = +[NSNumber numberWithUnsignedInt:(v181 * 1000.0)];
  v196 = v158;
  v193[5] = @"bleProxyConnectionTime";
  v157 = +[NSNumber numberWithUnsignedInt:(v179 * 1000.0)];
  v197 = v157;
  v193[6] = @"bleKeyConnectionTime";
  v156 = +[NSNumber numberWithUnsignedInt:(v177 * 1000.0)];
  v198 = v156;
  v193[7] = @"bleAWDLInfoXTime";
  v155 = +[NSNumber numberWithUnsignedInt:(v174 * 1000.0)];
  v199 = v155;
  v193[8] = @"bleKeyReqXTime";
  v154 = +[NSNumber numberWithUnsignedInt:(v172 * 1000.0)];
  v200 = v154;
  v193[9] = @"bleAuthTokXTime";
  v153 = +[NSNumber numberWithUnsignedInt:(v168 * 1000.0)];
  v201 = v153;
  v193[10] = @"awdlBringUpTime";
  v152 = +[NSNumber numberWithUnsignedInt:(v166 * 1000.0)];
  v202 = v152;
  v193[11] = @"awdlPeerDiscoveryTime";
  v151 = +[NSNumber numberWithUnsignedInt:(v30 * 1000.0)];
  v203 = v151;
  v193[12] = @"awdlRangingTime";
  v150 = +[NSNumber numberWithUnsignedInt:(v33 * 1000.0)];
  v204 = v150;
  v193[13] = @"displayWaitTime";
  v149 = +[NSNumber numberWithUnsignedInt:(v36 * 1000.0)];
  v205 = v149;
  v193[14] = @"clamshellWaitTime";
  v148 = +[NSNumber numberWithUnsignedInt:(v39 * 1000.0)];
  v206 = v148;
  v193[15] = @"bleConfTime";
  v147 = +[NSNumber numberWithUnsignedInt:(v42 * 1000.0)];
  v207 = v147;
  v193[16] = @"totalUnlockTime";
  v146 = +[NSNumber numberWithUnsignedInt:(v48 * 1000.0)];
  v208 = v146;
  v193[17] = @"prewarmTime";
  v145 = +[NSNumber numberWithUnsignedInt:(v170 * 1000.0)];
  v209 = v145;
  v193[18] = @"attemptTime";
  v144 = +[NSNumber numberWithUnsignedInt:(v45 * 1000.0)];
  v210 = v144;
  v193[19] = @"success";
  v175 = [v6 objectForKeyedSubscript:v2];
  if (v175)
  {
    uint64_t v72 = [v6 objectForKeyedSubscript:v2];
  }
  else
  {
    uint64_t v72 = &off_1009029A0;
  }
  v132 = v72;
  v211 = v72;
  v193[20] = @"errorType";
  uint64_t v73 = SDAutoUnlockManagerMetricErrorTypeKey;
  v173 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricErrorTypeKey];
  if (v173)
  {
    int v74 = [v6 objectForKeyedSubscript:v73];
  }
  else
  {
    int v74 = &off_1009029B8;
  }
  v131 = v74;
  v212 = v74;
  v193[21] = @"errorDomain";
  uint64_t v75 = SDAutoUnlockManagerMetricErrorDomainKey;
  v160 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricErrorDomainKey];
  if (v160)
  {
    CFStringRef v76 = [v6 objectForKeyedSubscript:v75];
  }
  else
  {
    CFStringRef v76 = &stru_1008E7020;
  }
  v130 = (__CFString *)v76;
  CFStringRef v213 = v76;
  v193[22] = @"errorCode";
  v178 = [v6 objectForKeyedSubscript:v4];
  if (v178)
  {
    uint64_t v77 = [v6 objectForKeyedSubscript:v4];
  }
  else
  {
    uint64_t v77 = &off_1009029B8;
  }
  v129 = v77;
  v214 = v77;
  v193[23] = @"distance";
  v143 = +[NSNumber numberWithUnsignedInt:(v164 * 100.0)];
  v215 = v143;
  v193[24] = @"keyRSSI";
  uint64_t v78 = SDAutoUnlockManagerMetricKeyDeviceRSSIKey;
  v171 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricKeyDeviceRSSIKey];
  if (v171)
  {
    CFStringRef v79 = [v6 objectForKeyedSubscript:v78];
  }
  else
  {
    CFStringRef v79 = &off_1009029B8;
  }
  v128 = v79;
  v216 = v79;
  v193[25] = @"proxyRSSI";
  uint64_t v80 = SDAutoUnlockManagerMetricProxyDeviceRSSIKey;
  v169 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricProxyDeviceRSSIKey];
  v81 = &off_1009029B8;
  if (v169)
  {
    v81 = [v6 objectForKeyedSubscript:v80];
  }
  v127 = v81;
  v217 = v81;
  v193[26] = @"withinRange";
  uint64_t v82 = SDAutoUnlockManagerMetricWithinRangeKey;
  v182 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricWithinRangeKey];
  if (v182)
  {
    uint64_t v83 = [v6 objectForKeyedSubscript:v82];
  }
  else
  {
    uint64_t v83 = &off_1009029A0;
  }
  v126 = v83;
  v218 = v83;
  v193[27] = @"attemptPrewarmed";
  v142 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricPrewarmKey];
  v84 = v142;
  if (!v142) {
    v84 = &off_1009029B8;
  }
  v219 = v84;
  v193[28] = @"detectedMask";
  v141 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricMaskKey];
  uint64_t v85 = v141;
  if (!v141) {
    uint64_t v85 = &off_1009029B8;
  }
  v220 = v85;
  v193[29] = @"usingTool";
  uint64_t v86 = SDAutoUnlockManagerMetricUsingToolKey;
  v184 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricUsingToolKey];
  if (v184)
  {
    uint64_t v87 = [v6 objectForKeyedSubscript:v86];
  }
  else
  {
    uint64_t v87 = &off_1009029A0;
  }
  v125 = v87;
  v221 = v87;
  v193[30] = @"cancelTime";
  v140 = +[NSNumber numberWithUnsignedInt:(v162 * 1000.0)];
  v222 = v140;
  v193[31] = @"clamshellClosed";
  v139 = +[NSNumber numberWithBool:0];
  v223 = v139;
  v193[32] = @"btConnectedDevices";
  uint64_t v88 = SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey;
  v167 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey];
  if (v167)
  {
    uint64_t v89 = [v6 objectForKeyedSubscript:v88];
  }
  else
  {
    uint64_t v89 = &off_1009029A0;
  }
  v124 = v89;
  v224 = v89;
  v193[33] = @"lastWake";
  v165 = [v6 objectForKeyedSubscript:v60];
  if (v165)
  {
    v90 = +[NSNumber numberWithInt:v63];
  }
  else
  {
    v90 = &off_1009029A0;
  }
  v123 = v90;
  v225 = v90;
  v193[34] = @"lastSleepType";
  uint64_t v91 = SDAutoUnlockManagerMetricLastSleepTypeKey;
  v180 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricLastSleepTypeKey];
  if (v180)
  {
    v92 = [v6 objectForKeyedSubscript:v91];
  }
  else
  {
    v92 = &off_1009029A0;
  }
  v122 = v92;
  v226 = v92;
  v193[35] = @"externalDisplay";
  v138 = +[NSNumber numberWithBool:v185 != 0];
  v227 = v138;
  v193[36] = @"lastDarkWake";
  v137 = +[NSNumber numberWithLongLong:v57];
  v228 = v137;
  v193[37] = @"cancelReason";
  uint64_t v93 = SDAutoUnlockManagerMetricCancelReasonKey;
  v163 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricCancelReasonKey];
  if (v163)
  {
    uint64_t v94 = [v6 objectForKeyedSubscript:v93];
  }
  else
  {
    uint64_t v94 = &off_1009029A0;
  }
  v121 = v94;
  v229 = v94;
  v193[38] = @"attemptType";
  uint64_t v95 = SDAutoUnlockManagerMetricAttemptTypeKey;
  v186 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricAttemptTypeKey];
  if (v186)
  {
    uint64_t v96 = [v6 objectForKeyedSubscript:v95];
  }
  else
  {
    uint64_t v96 = &off_1009029A0;
  }
  v230 = v96;
  v193[39] = @"watchBuildVersion";
  [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricWatchBuildVersionKey];
  v136 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFStringRef v97 = v136;
  if (!v136) {
    CFStringRef v97 = &stru_1008E7020;
  }
  CFStringRef v231 = v97;
  v193[40] = @"watchOSVersion";
  uint64_t v98 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricWatchOSVersionKey];
  uint64_t v99 = (void *)v98;
  if (v98) {
    CFStringRef v100 = (const __CFString *)v98;
  }
  else {
    CFStringRef v100 = &stru_1008E7020;
  }
  CFStringRef v232 = v100;
  v193[41] = @"autoRelock";
  uint64_t v101 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricAutoRelockKey];
  uint64_t v102 = (void *)v101;
  if (v101) {
    v103 = (void *)v101;
  }
  else {
    v103 = &__kCFBooleanFalse;
  }
  v233 = v103;
  v193[42] = @"manualRelock";
  uint64_t v104 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricManualRelockKey];
  v105 = (void *)v104;
  if (v104) {
    v106 = (void *)v104;
  }
  else {
    v106 = &__kCFBooleanFalse;
  }
  v234 = v106;
  v193[43] = @"autoRelockWindowExpired";
  uint64_t v107 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricAutoRelockWindowExpiredKey];
  v108 = (void *)v107;
  if (v107) {
    v109 = (void *)v107;
  }
  else {
    v109 = &__kCFBooleanFalse;
  }
  v235 = v109;
  v193[44] = @"autoRelockTimerCanceled";
  uint64_t v110 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricAutoRelockTimerCanceledKey];
  v111 = (void *)v110;
  if (v110) {
    v112 = (_UNKNOWN **)v110;
  }
  else {
    v112 = &off_1009029B8;
  }
  v236 = v112;
  v193[45] = @"unintentionalAttempt";
  uint64_t v113 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricUnintentionalAttemptKey];
  v114 = (void *)v113;
  if (v113) {
    v115 = (_UNKNOWN **)v113;
  }
  else {
    v115 = &off_1009029A0;
  }
  v237 = v115;
  v193[46] = @"periocularStatus";
  uint64_t v116 = [v6 objectForKeyedSubscript:SDAutoUnlockManagerMetricPeriocularStatus];
  v117 = (void *)v116;
  if (v116) {
    v118 = (_UNKNOWN **)v116;
  }
  else {
    v118 = &off_1009029B8;
  }
  v238 = v118;
  v119 = +[NSDictionary dictionaryWithObjects:buf forKeys:v193 count:47];
  SFMetricsLog();

  if (v186) {
  if (v163)
  }

  if (v180) {
  if (v165)
  }

  if (v167) {
  if (v184)
  }

  if (v182) {
  if (v169)
  }

  if (v171) {
  if (v178)
  }

  if (v160) {
  if (v173)
  }

  if (v175) {
  if (v187)
  }

  if (v161) {
  if (v176)
  }

  BOOL v9 = v188;
LABEL_126:

  _Block_object_dispose(&v189, 8);
}

void sub_1000D189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a66, 8);
  _Unwind_Resume(a1);
}

uint64_t variable initialization expression of SDAirDropHashStoreCDB.destroyed()
{
  return 0;
}

void sub_1000D18C8(void *a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, void *a6, unsigned int a7, unsigned int a8, double a9, double a10, void *a11, unsigned __int8 a12, unsigned int a13, unsigned __int8 a14, unsigned int a15, unsigned __int8 a16, unsigned __int8 a17, unsigned int a18, unsigned int a19, unsigned int a20,unsigned int a21,void *a22,void *a23,unsigned __int8 a24,unsigned __int8 a25)
{
  CFStringRef v31 = a1;
  CFStringRef v32 = a2;
  CFStringRef v33 = a6;
  uint64_t v75 = a22;
  int v74 = a23;
  if (a11)
  {
    id v34 = a11;
    double v35 = +[NSDate date];
    [v35 timeIntervalSinceDate:v34];
    double v37 = v36;

    sub_1000D1E8C((double)(unint64_t)v37);
    unint64_t v39 = (unint64_t)v38;
  }
  else
  {
    unint64_t v39 = 0;
  }
  uint64_t v73 = (__CFString *)v31;
  if (v31) {
    CFStringRef v40 = v31;
  }
  else {
    CFStringRef v40 = &stru_1008E7020;
  }
  v76[0] = @"deviceModel";
  v76[1] = @"companionModel";
  uint64_t v72 = (__CFString *)v32;
  if (v32) {
    CFStringRef v41 = v32;
  }
  else {
    CFStringRef v41 = &stru_1008E7020;
  }
  v77[0] = v40;
  v77[1] = v41;
  v76[2] = @"deviceLocked";
  uint64_t v71 = +[NSNumber numberWithBool:a3];
  v77[2] = v71;
  v76[3] = @"keyRequestXTime";
  uint64_t v70 = +[NSNumber numberWithUnsignedInt:(a9 * 1000.0)];
  v77[3] = v70;
  v76[4] = @"tokenXTime";
  CFStringRef v69 = +[NSNumber numberWithUnsignedInt:(a10 * 1000.0)];
  v77[4] = v69;
  v76[5] = @"success";
  CFStringRef v67 = +[NSNumber numberWithBool:a4];
  v77[5] = v67;
  v76[6] = @"errorType";
  uint64_t v42 = +[NSNumber numberWithUnsignedInt:a5];
  uint64_t v66 = (void *)v42;
  uint64_t v68 = (__CFString *)v33;
  if (v33) {
    CFStringRef v43 = v33;
  }
  else {
    CFStringRef v43 = &stru_1008E7020;
  }
  v77[6] = v42;
  v77[7] = v43;
  v76[7] = @"errorDomain";
  v76[8] = @"errorCode";
  uint64_t v63 = +[NSNumber numberWithUnsignedInt:a7];
  v77[8] = v63;
  v76[9] = @"watchExistedInUnlockList";
  uint64_t v60 = +[NSNumber numberWithBool:a8];
  v77[9] = v60;
  v76[10] = @"timeIntervalSinceLastWatch";
  double v56 = +[NSNumber numberWithUnsignedLongLong:v39];
  v77[10] = v56;
  v76[11] = @"upsell";
  double v55 = +[NSNumber numberWithBool:a12];
  v77[11] = v55;
  v76[12] = @"responseTimeout";
  uint64_t v57 = +[NSNumber numberWithUnsignedInt:a13];
  v77[12] = v57;
  v76[13] = @"responseServer";
  double v58 = +[NSNumber numberWithBool:a14];
  v77[13] = v58;
  v76[14] = @"messageTimeout";
  v61 = +[NSNumber numberWithUnsignedInt:a15];
  v77[14] = v61;
  v76[15] = @"messageServer";
  double v64 = +[NSNumber numberWithBool:a16];
  v77[15] = v64;
  v76[16] = @"setupRetry";
  double v44 = +[NSNumber numberWithBool:a17];
  v77[16] = v44;
  v76[17] = @"macOldLTKSyncStatus";
  double v45 = +[NSNumber numberWithInt:a18];
  v77[17] = v45;
  v76[18] = @"macNewLTKSyncStatus";
  id v46 = +[NSNumber numberWithInt:a19];
  v77[18] = v46;
  v76[19] = @"watchOldLTKSyncStatus";
  double v47 = +[NSNumber numberWithInt:a20];
  v77[19] = v47;
  v76[20] = @"watchNewLTKSyncStatus";
  uint64_t v48 = +[NSNumber numberWithInt:a21];
  uint64_t v49 = (void *)v48;
  if (v75) {
    CFStringRef v50 = v75;
  }
  else {
    CFStringRef v50 = &stru_1008E7020;
  }
  v77[20] = v48;
  v77[21] = v50;
  v76[21] = @"watchBuildVersion";
  v76[22] = @"watchOSVersion";
  if (v74) {
    CFStringRef v51 = v74;
  }
  else {
    CFStringRef v51 = &stru_1008E7020;
  }
  v77[22] = v51;
  v76[23] = @"receivedSetupACK";
  double v52 = +[NSNumber numberWithBool:a24];
  v77[23] = v52;
  v76[24] = @"receivedTokenACK";
  long long v53 = +[NSNumber numberWithBool:a25];
  v77[24] = v53;
  id v54 = +[NSDictionary dictionaryWithObjects:v77 forKeys:v76 count:25];
  SFMetricsLog();
}

void sub_1000D1E8C(double a1)
{
  if (a1 != 0.0)
  {
    double v2 = -a1;
    if (a1 >= 0.0) {
      double v2 = a1;
    }
    double v3 = log10(v2);
    __exp10((double)(int)(2 - vcvtpd_s64_f64(v3)));
  }
}

id sub_1000D1EEC(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    double v2 = objc_opt_new();
    double v3 = [v1 objectForKeyedSubscript:@"AWDL_INFO_SUPPORTED_CHANNEL_FLAGS"];
    [v2 setChannelFlags:[v3 integerValue]];

    uint64_t v4 = [v1 objectForKeyedSubscript:@"AWDL_INFO_ASSISTED_DISCOVERY_METRIC"];
    [v2 setDiscoveryMetric:[v4 integerValue]];

    unsigned int v5 = [v1 objectForKeyedSubscript:@"AWDL_IF_MAC_ADDRESS"];
    [v2 setMacAddress:v5];

    id v6 = [v1 objectForKeyedSubscript:@"AWDL_INFO_PEER_MASTER_CHANNEL"];
    [v2 setMasterChannel:[v6 integerValue]];

    unint64_t v7 = [v1 objectForKeyedSubscript:@"AWDL_INFO_PREFERRED_CHANNEL"];
    [v2 setPreferredChannel:[v7 integerValue]];

    unsigned __int8 v8 = [v1 objectForKeyedSubscript:@"AWDL_INFO_EXT"];

    [v2 setExtraInfoData:v8];
    BOOL v9 = [v2 data];
  }
  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

id sub_1000D2064(void *a1)
{
  id v1 = a1;
  double v2 = objc_opt_new();
  double v3 = [[SDAutoUnlockWiFiAWDLInfo alloc] initWithData:v1];

  uint64_t v4 = +[NSNumber numberWithUnsignedInt:[(SDAutoUnlockWiFiAWDLInfo *)v3 channelFlags]];
  [v2 setObject:v4 forKeyedSubscript:@"AWDL_INFO_SUPPORTED_CHANNEL_FLAGS"];

  unsigned int v5 = +[NSNumber numberWithUnsignedInt:[(SDAutoUnlockWiFiAWDLInfo *)v3 discoveryMetric]];
  [v2 setObject:v5 forKeyedSubscript:@"AWDL_INFO_ASSISTED_DISCOVERY_METRIC"];

  id v6 = [(SDAutoUnlockWiFiAWDLInfo *)v3 macAddress];
  [v2 setObject:v6 forKeyedSubscript:@"AWDL_IF_MAC_ADDRESS"];

  unint64_t v7 = +[NSNumber numberWithUnsignedInt:[(SDAutoUnlockWiFiAWDLInfo *)v3 masterChannel]];
  [v2 setObject:v7 forKeyedSubscript:@"AWDL_INFO_PEER_MASTER_CHANNEL"];

  unsigned __int8 v8 = +[NSNumber numberWithUnsignedInt:[(SDAutoUnlockWiFiAWDLInfo *)v3 preferredChannel]];
  [v2 setObject:v8 forKeyedSubscript:@"AWDL_INFO_PREFERRED_CHANNEL"];

  BOOL v9 = [(SDAutoUnlockWiFiAWDLInfo *)v3 extraInfoData];
  [v2 setObject:v9 forKeyedSubscript:@"AWDL_INFO_EXT"];

  id v10 = [v2 copy];

  return v10;
}

uint64_t variable initialization expression of HeadphoneProxFeatureClient.delegate()
{
  return 0;
}

BOOL sub_1000D2224(void *a1)
{
  return CFDictionaryGetInt64() != 0;
}

BOOL sub_1000D2254(void *a1)
{
  return CFDictionaryGetInt64() != 0;
}

BOOL sub_1000D2284(void *a1)
{
  return CFDictionaryGetInt64() != 0;
}

id sub_1000D22B4(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    double v2 = +[NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
    double v3 = +[NSLocale autoupdatingCurrentLocale];
    [v2 setLocale:v3];

    uint64_t v4 = [v2 components:2097404 fromDate:v1];

    id v5 = [v4 year];
    id v6 = [v4 month];
    id v7 = [v4 day];
    id v8 = [v4 hour];
    id v9 = [v4 minute];
    id v10 = [v4 second];
    double v11 = [v4 timeZone];
    char v12 = [v11 abbreviation];
    double v13 = +[NSString stringWithFormat:@"%02ld-%02ld-%02ld %02ld:%02ld:%02ld %@", v5, v6, v7, v8, v9, v10, v12];
  }
  else
  {
    double v13 = 0;
  }

  return v13;
}

uint64_t sub_1000D2434()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModeDefault;
  if (sub_1000D9060(SFAutoUnlockManagerAutoUnlockTestModeDefault, 0)) {
    return 1;
  }
  uint64_t v2 = getuid();
  double v3 = sub_1000D24E4(v2);
  uint64_t v4 = [v3 objectForKeyedSubscript:v0];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = [v4 BOOLValue];
  }
  else {
    id v5 = [v4 isEqual:@"1"];
  }
  id v1 = v5;

  return (uint64_t)v1;
}

id sub_1000D24E4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1000D91F0(SFAutoUnlockManagerAutoUnlockTestModeDictionary);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v3 = +[NSString stringWithFormat:@"%u", a1];
    uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

BOOL sub_1000D259C()
{
  return sub_1000D9060(SFAutoUnlockManagerAutoUnlockAuthorizationTestModeDefault, 0) != 0;
}

id sub_1000D25CC()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModeDuration;
  id v1 = (id)sub_1000D91F0(SFAutoUnlockManagerAutoUnlockTestModeDuration);
  if (!v1)
  {
    uint64_t v2 = getuid();
    double v3 = sub_1000D24E4(v2);
    uint64_t v4 = [v3 objectForKeyedSubscript:v0];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v5 = v4;
    }
    else {
      id v5 = 0;
    }
    id v1 = v5;
  }

  return v1;
}

uint64_t sub_1000D2670()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModeShouldFail;
  if (sub_1000D9060(SFAutoUnlockManagerAutoUnlockTestModeShouldFail, 0)) {
    return 1;
  }
  uint64_t v2 = getuid();
  double v3 = sub_1000D24E4(v2);
  uint64_t v4 = [v3 objectForKeyedSubscript:v0];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = [v4 BOOLValue];
  }
  else {
    id v5 = [v4 isEqual:@"1"];
  }
  id v1 = v5;

  return (uint64_t)v1;
}

id sub_1000D2720()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModeFailureString;
  id v1 = (id)sub_1000D91F0(SFAutoUnlockManagerAutoUnlockTestModeFailureString);
  if (!v1)
  {
    uint64_t v2 = getuid();
    double v3 = sub_1000D24E4(v2);
    uint64_t v4 = [v3 objectForKeyedSubscript:v0];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v5 = v4;
    }
    else {
      id v5 = 0;
    }
    id v1 = v5;
  }

  return v1;
}

id sub_1000D27C4()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModePassword;
  id v1 = (id)sub_1000D91F0(SFAutoUnlockManagerAutoUnlockTestModePassword);
  if (!v1)
  {
    uint64_t v2 = getuid();
    double v3 = sub_1000D24E4(v2);
    uint64_t v4 = [v3 objectForKeyedSubscript:v0];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v5 = v4;
    }
    else {
      id v5 = 0;
    }
    id v1 = v5;
  }

  return v1;
}

uint64_t sub_1000D2868()
{
  uint64_t result = IsAppleInternalBuild();
  if (result) {
    return sub_1000D9060(@"AUConnectionCacheEnabled", 0) != 0;
  }
  return result;
}

void sub_1000D289C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = auto_unlock_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v8 = @"NO";
    if (a1) {
      CFStringRef v8 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating enable state in dynamic store: %@", buf, 0xCu);
  }

  id v9 = sub_1000D2C34(0);
  id v10 = (__CFString *)[v9 mutableCopy];

  double v11 = [(__CFString *)v10 objectForKeyedSubscript:v5];
  char v12 = v11;
  if (!v11 || [v11 BOOLValue] != a1)
  {
    double v13 = +[NSNumber numberWithBool:a1];
    [(__CFString *)v10 setObject:v13 forKeyedSubscript:v5];

    uint64_t v14 = auto_unlock_log();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    CFStringRef v16 = (const __CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
    if (v15)
    {
      *(_DWORD *)buf = 138412546;
      CFStringRef v26 = (const __CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
      __int16 v27 = 2112;
      char v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Updating global dynamic store (key: %@, value: %@)", buf, 0x16u);
    }

    if (!SCDynamicStoreSetValue(0, v16, v10))
    {
      double v17 = auto_unlock_log();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_1000D485C();
      }
    }
  }
  char v18 = sub_1000D2C34(v6);
  double v19 = (__CFString *)[v18 mutableCopy];

  unint64_t v20 = +[NSString stringWithFormat:@"%d", getuid()];
  double v21 = [(__CFString *)v19 objectForKeyedSubscript:v20];

  if (v21 && [v21 BOOLValue] == a1)
  {
    int v24 = auto_unlock_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v26 = v19;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Enabled dictionary exists %@", buf, 0xCu);
    }
    goto LABEL_22;
  }
  uint64_t v22 = +[NSNumber numberWithBool:a1];
  [(__CFString *)v19 setObject:v22 forKeyedSubscript:v20];

  double v23 = auto_unlock_log();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    CFStringRef v26 = v6;
    __int16 v27 = 2112;
    char v28 = v19;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Updating enabled dynamic store (key: %@, value: %@)", buf, 0x16u);
  }

  if (!SCDynamicStoreSetValue(0, v6, v19))
  {
    int v24 = auto_unlock_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      sub_1000D485C();
    }
LABEL_22:
  }
}

id sub_1000D2C34(void *a1)
{
  id v1 = a1;
  if (!v1) {
    id v1 = (__CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
  }
  CFPropertyListRef v2 = SCDynamicStoreCopyValue(0, v1);
  double v3 = (void *)v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFDictionaryGetTypeID())
    {
      CFRelease(v3);
      double v3 = 0;
    }
  }
  if (v3) {
    id v5 = v3;
  }
  else {
    id v5 = &__NSDictionary0__struct;
  }
  id v6 = v5;

  return v6;
}

void sub_1000D2CD4(uint64_t a1)
{
}

void sub_1000D2CF0(uint64_t a1)
{
  CFPropertyListRef v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v3 = @"NO";
    if (a1) {
      CFStringRef v3 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating in progress state in dynamic store: %@", buf, 0xCu);
  }

  CFTypeID v4 = sub_1000D2C34(0);
  id v5 = [v4 mutableCopy];

  uint64_t v6 = SFAutoUnlockDynamicStoreInProgressKey;
  id v7 = [v5 objectForKeyedSubscript:SFAutoUnlockDynamicStoreInProgressKey];
  CFStringRef v8 = v7;
  if (!v7 || [v7 BOOLValue] != a1)
  {
    id v9 = +[NSNumber numberWithBool:a1];
    [v5 setObject:v9 forKeyedSubscript:v6];

    if (!SCDynamicStoreSetValue(0, SFAutoUnlockDynamicStoreSharingDomainKey, v5))
    {
      id v10 = auto_unlock_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000D48D4();
      }
    }
  }
  CFStringRef v11 = (const __CFString *)SFAutoUnlockDynamicStoreInProgressPath;
  char v12 = sub_1000D2C34(SFAutoUnlockDynamicStoreInProgressPath);
  id v13 = [v12 mutableCopy];

  uint64_t v14 = +[NSString stringWithFormat:@"%d", getuid()];
  BOOL v15 = [v13 objectForKeyedSubscript:v14];

  if (!v15 || [v15 BOOLValue] != a1)
  {
    CFStringRef v16 = +[NSNumber numberWithBool:a1];
    [v13 setObject:v16 forKeyedSubscript:v14];

    if (!SCDynamicStoreSetValue(0, v11, v13))
    {
      double v17 = auto_unlock_log();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_1000D48D4();
      }
    }
  }
}

id sub_1000D2F74(void *a1)
{
  CFPropertyListRef v2 = +[NSNumber numberWithInteger:*a1];
  CFStringRef v3 = [v2 stringValue];

  CFTypeID v4 = +[NSNumber numberWithInteger:a1[1]];
  id v5 = [v4 stringValue];

  uint64_t v6 = +[NSString stringWithFormat:@".%@", v5];
  id v7 = [v3 stringByAppendingString:v6];

  if ((uint64_t)a1[2] >= 1)
  {
    CFStringRef v8 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:");
    id v9 = [v8 stringValue];

    id v10 = +[NSString stringWithFormat:@".%@", v9];
    uint64_t v11 = [v7 stringByAppendingString:v10];

    id v7 = (void *)v11;
  }

  return v7;
}

uint64_t sub_1000D30C0(char a1)
{
  if ((a1 - 1) > 7u) {
    return 0;
  }
  else {
    return qword_10076E030[(char)(a1 - 1)];
  }
}

NSString *sub_1000D30EC(uint64_t a1)
{
  CFStringRef v1 = @"Trigger";
  if (a1 != 2) {
    CFStringRef v1 = 0;
  }
  if (a1 == 1) {
    CFStringRef v1 = @"Attempt";
  }
  return +[NSString stringWithFormat:@"AutoUnlock-%@", v1];
}

uint64_t sub_1000D3140()
{
  CFBooleanRef v0 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"allowAutoUnlock", @"com.apple.applicationaccess");
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID()) {
      CFBooleanGetValue(v1);
    }
    CFRelease(v1);
  }
  CFStringRef v3 = +[MCProfileConnection sharedConnection];
  uint64_t v4 = [v3 isAutoUnlockAllowed] ^ 1;

  return v4;
}

id sub_1000D31C0(char *a1)
{
  return sub_1000D31D8(a1, @"au-setup-response-timeout", @"au-setup-response-timeout-percentage", (id)0x3C);
}

id sub_1000D31D8(char *a1, void *a2, void *a3, id a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = +[IDSServerBag sharedInstance];
  id v10 = [v9 objectForKey:v7];

  uint64_t v11 = +[IDSServerBag sharedInstance];
  char v12 = [v11 objectForKey:v8];

  if (!v10
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || !v12
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    double v17 = auto_unlock_log();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
LABEL_15:
      char v18 = 0;
      goto LABEL_16;
    }
    int v23 = 134218754;
    unint64_t v24 = (unint64_t)a4;
    __int16 v25 = 2112;
    id v26 = v7;
    __int16 v27 = 2112;
    char v28 = v10;
    __int16 v29 = 2112;
    double v30 = v12;
    CFStringRef v19 = "Using default value for timeout (default value: %ld, timeout key: %@, server timeout: %@, timeout percentage %@)";
    unint64_t v20 = v17;
    uint32_t v21 = 42;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v23, v21);
    goto LABEL_15;
  }
  id v13 = auto_unlock_log();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 138412802;
    unint64_t v24 = (unint64_t)v7;
    __int16 v25 = 2112;
    id v26 = v10;
    __int16 v27 = 2112;
    char v28 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "IDS server bag contains keys (timeout key: %@, server timeout: %@, timeout percentage %@)", (uint8_t *)&v23, 0x20u);
  }

  id v14 = [v12 integerValue];
  uint32_t v15 = arc4random_uniform(0x64u);
  uint32_t v16 = v15;
  if ((unint64_t)v14 > 0x64 || (unint64_t)v14 <= v15)
  {
    double v17 = auto_unlock_log();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    int v23 = 134217984;
    unint64_t v24 = v16;
    CFStringRef v19 = "Using default timeout (random number: %ld)";
    unint64_t v20 = v17;
    uint32_t v21 = 12;
    goto LABEL_14;
  }
  a4 = [v10 integerValue];
  double v17 = auto_unlock_log();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 134217984;
    unint64_t v24 = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Using server timeout (random number: %ld)", (uint8_t *)&v23, 0xCu);
  }
  char v18 = 1;
LABEL_16:

  if (a1) {
    *a1 = v18;
  }

  return a4;
}

id sub_1000D34B4(char *a1)
{
  return sub_1000D31D8(a1, @"au-setup-message-timeout", @"au-setup-message-timeout-percentage", (id)0x2D);
}

double sub_1000D34D4()
{
  double v0 = 0.0;
  if (!IOPMGetLastWakeTime())
  {
    double Current = CFAbsoluteTimeGetCurrent();
    CFTypeID v2 = auto_unlock_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v3 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", 0.0, 0);
      *(_DWORD *)buf = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Last machine wake date %@", buf, 0xCu);
    }
    double v0 = Current - 0.0;
  }
  return v0;
}

CFStringRef sub_1000D35C4()
{
  return @"UnknownSleepType";
}

BOOL sub_1000D35D0(void *a1)
{
  CFBooleanRef v1 = sub_1000D361C(a1);
  CFTypeID v2 = v1;
  if (v1) {
    BOOL v3 = (int)[v1 intValue] > 2;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

id sub_1000D361C(void *a1)
{
  CFBooleanRef v1 = [a1 componentsSeparatedByString:@","];
  if ((unint64_t)[v1 count] < 2)
  {
    id v5 = 0;
  }
  else
  {
    CFTypeID v2 = [v1 objectAtIndexedSubscript:0];
    BOOL v3 = (char *)[v2 rangeOfString:@"Watch"];
    if (v4)
    {
      id v5 = [v2 substringFromIndex:&v3[v4]];
    }
    else
    {
      id v5 = 0;
    }
  }

  return v5;
}

BOOL sub_1000D36C4(void *a1)
{
  [a1 doubleValue];
  return v1 >= 7.4;
}

id sub_1000D36EC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1000D361C(a1);
  [v4 isEqualToString:@"1"];

  id v5 = +[NSCharacterSet characterSetWithCharactersInString:@"#"];
  uint64_t v6 = [v3 stringByRemovingCharactersFromSet:v5];

  [v6 integerValue];
  id v7 = SFLocalizedStringForKey();

  return v7;
}

id sub_1000D37E4(void *a1)
{
  id v1 = a1;
  int v2 = sub_1000D9060(@"AUAlwaysShowModelDescription", 0);
  id v3 = objc_opt_new();
  if ([v1 count])
  {
    unint64_t v4 = 0;
    id v5 = &NSCalendarIdentifierGregorian_ptr;
    id v53 = v1;
    int v50 = v2;
    uint64_t v49 = v3;
    do
    {
      uint64_t v6 = [v1 objectAtIndexedSubscript:v4];
      id v7 = v6;
      if (v2)
      {
        id v8 = [v6 modelIdentifier];
        id v9 = [v7 enclosureColor];
        id v10 = sub_1000D36EC(v8, v9);

        uint64_t v11 = [v7 modelIdentifier];
        id v63 = 0;
        v64[0] = 0;
        sub_1000D3DE4(v11, v64, &v63);
        id v12 = v64[0];
        id v13 = v63;

        if ([v13 length])
        {
          id v14 = [(NSCalendarIdentifier *)(id)v5[225] stringWithFormat:@", %@", v13];
        }
        else
        {
          id v14 = &stru_1008E7020;
        }

        if ([v12 length])
        {
          id v46 = [(NSCalendarIdentifier *)(id)v5[225] stringWithFormat:@", %@", v12];
        }
        else
        {
          id v46 = &stru_1008E7020;
        }

        double v47 = [(NSCalendarIdentifier *)(id)v5[225] stringWithFormat:@"(%@%@%@)", v10, v14, v46];
        [v7 setModelDescription:v47];

        [v3 addObject:v7];
        id v1 = v53;
      }
      else
      {
        unint64_t v51 = v4;
        while ((unint64_t)[v1 count] > ++v4)
        {
          uint32_t v15 = [v1 objectAtIndexedSubscript:v4];
          uint32_t v16 = [v7 name];
          double v17 = [v15 name];
          unsigned int v18 = [v16 isEqualToString:v17];

          if (v18)
          {
            CFStringRef v19 = [v7 modelIdentifier];
            unint64_t v20 = [v7 enclosureColor];
            uint32_t v21 = sub_1000D36EC(v19, v20);

            id v22 = v21;
            int v23 = [v15 modelIdentifier];
            unint64_t v24 = [v15 enclosureColor];
            __int16 v25 = sub_1000D36EC(v23, v24);

            id v26 = v25;
            double v58 = v22;
            if ([v22 isEqualToString:v26])
            {
              __int16 v27 = [v7 modelIdentifier];
              id v62 = 0;
              id v61 = 0;
              sub_1000D3DE4(v27, &v62, &v61);
              double v55 = (__CFString *)v62;
              id v28 = v61;

              __int16 v29 = [v15 modelIdentifier];
              id v59 = 0;
              id v60 = 0;
              sub_1000D3DE4(v29, &v60, &v59);
              double v56 = (__CFString *)v60;
              id v30 = v59;

              if ([v28 length])
              {
                CFStringRef v31 = +[NSString stringWithFormat:@", %@", v28];
              }
              else
              {
                CFStringRef v31 = &stru_1008E7020;
              }

              if ([v30 length])
              {
                CFStringRef v34 = +[NSString stringWithFormat:@", %@", v30];
              }
              else
              {
                CFStringRef v34 = &stru_1008E7020;
              }

              CFStringRef v32 = [v22 stringByAppendingString:v31];

              CFStringRef v33 = [v26 stringByAppendingString:v34];

              id v54 = (__CFString *)v34;
              unsigned int v57 = [(__CFString *)v31 isEqualToString:v34];
              if (v57)
              {
                if ([(__CFString *)v55 length])
                {
                  double v35 = +[NSString stringWithFormat:@", %@", v55];
                }
                else
                {
                  double v35 = &stru_1008E7020;
                }

                double v52 = v31;
                if ([(__CFString *)v56 length])
                {
                  CFStringRef v37 = +[NSString stringWithFormat:@", %@", v56];
                }
                else
                {
                  CFStringRef v37 = &stru_1008E7020;
                }

                uint64_t v38 = [v32 stringByAppendingString:v35];

                uint64_t v39 = [v33 stringByAppendingString:v37];

                CFStringRef v32 = (void *)v38;
                CFStringRef v33 = (void *)v39;
                double v36 = (__CFString *)v37;
                CFStringRef v31 = v52;
                id v1 = v53;
              }
              else
              {
                double v35 = v55;
                double v36 = v56;
              }
            }
            else
            {
              unsigned int v57 = 0;
              CFStringRef v32 = v22;
              CFStringRef v33 = v26;
            }
            CFStringRef v40 = [v7 modelDescription];
            id v41 = [v40 length];
            id v42 = [v32 length];

            if (v41 < v42) {
              [v7 setModelDescription:v32];
            }
            CFStringRef v43 = [v15 modelDescription];
            id v44 = [v43 length];
            id v45 = [v33 length];

            if (v44 < v45) {
              [v15 setModelDescription:v33];
            }

            if (v57)
            {

              break;
            }
          }
        }
        id v3 = v49;
        [v49 addObject:v7];
        int v2 = v50;
        unint64_t v4 = v51;
        id v5 = &NSCalendarIdentifierGregorian_ptr;
      }

      ++v4;
    }
    while ((unint64_t)[v1 count] > v4);
  }

  return v3;
}

void sub_1000D3DE4(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  if (qword_10097FE38 != -1) {
    dispatch_once(&qword_10097FE38, &stru_1008CCB30);
  }
  uint64_t v6 = [(id)qword_10097FE30 objectForKeyedSubscript:v5];
  id v7 = (char *)[v6 integerValue];

  if ((unint64_t)(v7 - 1) > 7)
  {
    id v8 = &stru_1008E7020;
  }
  else
  {
    SFLocalizedStringForKey();
    id v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  if (![v5 hasPrefix:@"Watch5,"])
  {
    if ([v5 hasPrefix:@"Watch6,"])
    {
      int v10 = SFMinorWatchHardwareVersion();
      if ((v10 - 1) >= 4
        && (v10 - 6) >= 4
        && (v10 - 10) >= 4
        && (v10 - 14) >= 4
        && v10 != 18)
      {
        goto LABEL_27;
      }
    }
    else
    {
      if (![v5 hasPrefix:@"Watch7,"]) {
        goto LABEL_27;
      }
      int v11 = SFMinorWatchHardwareVersion();
      if ((v11 - 1) >= 4 && v11 != 5 && (v11 & 0xFFFFFFFC) != 8) {
        goto LABEL_27;
      }
    }
LABEL_22:
    SFLocalizedStringForKey();
    id v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_28;
  }
  int v9 = SFMinorWatchHardwareVersion();
  if ((v9 - 1) < 4 || (v9 - 9) < 4) {
    goto LABEL_22;
  }
LABEL_27:
  id v12 = &stru_1008E7020;
LABEL_28:
  id v13 = (__CFString *)_LSCreateDeviceTypeIdentifierWithModelCode();
  id v14 = auto_unlock_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    double v56 = v13;
    __int16 v57 = 2112;
    id v58 = v5;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "UTI %@ for modelIdentifier %@", buf, 0x16u);
  }

  if (v13)
  {
    uint32_t v15 = [(__CFString *)v13 componentsSeparatedByString:@"-"];
    if ([(__CFString *)v8 length])
    {
      CFStringRef v43 = v8;
    }
    else
    {
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      id v16 = v15;
      id v17 = [v16 countByEnumeratingWithState:&v49 objects:v54 count:16];
      if (!v17) {
        goto LABEL_48;
      }
      id v18 = v17;
      id v41 = v12;
      id v44 = v8;
      uint64_t v39 = a2;
      uint64_t v19 = *(void *)v50;
      while (2)
      {
        for (unint64_t i = 0; i != v18; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v50 != v19) {
            objc_enumerationMutation(v16);
          }
          uint32_t v21 = *(void **)(*((void *)&v49 + 1) + 8 * i);
          if ([v21 containsString:@"mm"])
          {
            if ([v21 containsString:@"38"])
            {
              a2 = v39;
              id v12 = v41;
              id v8 = v44;
            }
            else
            {
              id v12 = v41;
              id v8 = v44;
              if (([v21 containsString:@"42"] & 1) == 0)
              {
                a2 = v39;
                goto LABEL_48;
              }
              a2 = v39;
            }
            uint64_t v22 = SFLocalizedStringForKey();

            id v8 = (__CFString *)v22;
            goto LABEL_48;
          }
        }
        id v18 = [v16 countByEnumeratingWithState:&v49 objects:v54 count:16];
        if (v18) {
          continue;
        }
        break;
      }
      a2 = v39;
      id v12 = v41;
      id v8 = v44;
LABEL_48:
      CFStringRef v43 = v8;
    }
    int v23 = a3;
    unint64_t v24 = (__CFString *)UTTypeCopyDescription(v13);
    __int16 v25 = auto_unlock_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      double v56 = v24;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Description %@", buf, 0xCu);
    }

    id v26 = +[NSCharacterSet whitespaceCharacterSet];
    __int16 v27 = [(__CFString *)v24 componentsSeparatedByCharactersInSet:v26];

    if (![(__CFString *)v12 length])
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      id v28 = v27;
      id v29 = [v28 countByEnumeratingWithState:&v45 objects:v53 count:16];
      if (!v29) {
        goto LABEL_70;
      }
      id v30 = v29;
      CFStringRef v40 = a2;
      id v42 = v12;
      uint64_t v38 = v23;
      unsigned __int8 v31 = 0;
      uint64_t v32 = *(void *)v46;
      while (2)
      {
        for (j = 0; j != v30; j = (char *)j + 1)
        {
          if (*(void *)v46 != v32) {
            objc_enumerationMutation(v28);
          }
          CFStringRef v34 = *(void **)(*((void *)&v45 + 1) + 8 * (void)j);
          if (v31)
          {
            if ([*(id *)(*((void *)&v45 + 1) + 8 * (void)j) containsString:@"1"])
            {
              int v23 = v38;
              a2 = v40;
              id v12 = v42;
            }
            else
            {
              int v23 = v38;
              id v12 = v42;
              if (([v34 containsString:@"2"] & 1) == 0
                && ([v34 containsString:@"3"] & 1) == 0
                && ([v34 containsString:@"4"] & 1) == 0
                && ([v34 containsString:@"5"] & 1) == 0
                && ([v34 containsString:@"6"] & 1) == 0)
              {
                a2 = v40;
                goto LABEL_70;
              }
              a2 = v40;
            }
            uint64_t v35 = SFLocalizedStringForKey();

            id v12 = (__CFString *)v35;
            goto LABEL_70;
          }
          unsigned __int8 v31 = [*(id *)(*((void *)&v45 + 1) + 8 * (void)j) containsString:@"Series"];
        }
        id v30 = [v28 countByEnumeratingWithState:&v45 objects:v53 count:16];
        if (v30) {
          continue;
        }
        break;
      }
      int v23 = v38;
      a2 = v40;
      id v12 = v42;
LABEL_70:
    }
    a3 = v23;
    id v8 = v43;
  }
  double v36 = auto_unlock_log();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    double v56 = v8;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Watch Size %@", buf, 0xCu);
  }

  CFStringRef v37 = auto_unlock_log();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    double v56 = v12;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Series %@", buf, 0xCu);
  }

  if (a2) {
    *a2 = v8;
  }
  if (a3) {
    *a3 = v12;
  }
}

id sub_1000D4520(void *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  [a1 getUUIDBytes:v3];
  id v1 = +[NSData dataWithBytes:v3 length:16];

  return v1;
}

void sub_1000D459C(void *a1)
{
  id v1 = a1;
  id v4 = +[BMStreams discoverabilitySignal];
  int v2 = [v4 source];
  id v3 = [objc_alloc((Class)BMDiscoverabilitySignalEvent) initWithIdentifier:v1 bundleID:@"com.apple.sharingd" context:0];

  [v2 sendEvent:v3];
}

id sub_1000D4644(uint64_t a1)
{
  v17[0] = @"com.apple.faceid.face-covering.detected";
  v17[1] = @"com.apple.faceid.any-face-covering.detected";
  int v2 = +[NSArray arrayWithObjects:v17 count:2];
  id v3 = +[_DKQuery predicateForEventsWithStringValueInValues:v2];

  id v4 = +[_DKKnowledgeStore knowledgeStore];
  id v5 = +[_DKSystemEventStreams discoverabilitySignalsStream];
  id v16 = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:&v16 count:1];
  id v7 = +[NSSortDescriptor sortDescriptorWithKey:@"startDate" ascending:0];
  uint32_t v15 = v7;
  id v8 = +[NSArray arrayWithObjects:&v15 count:1];
  int v9 = +[_DKEventQuery eventQueryWithPredicate:v3 eventStreams:v6 offset:0 limit:a1 sortDescriptors:v8];

  if (v9)
  {
    id v14 = 0;
    int v10 = [v4 executeQuery:v9 error:&v14];
    id v11 = v14;
    if (v11)
    {
      id v12 = auto_unlock_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1000D494C((uint64_t)v11, v12);
      }
    }
  }
  else
  {
    int v10 = 0;
  }

  return v10;
}

void sub_1000D4844(id a1)
{
  id v1 = (void *)qword_10097FE30;
  qword_10097FE30 = (uint64_t)&off_100905730;
}

void sub_1000D485C()
{
  SCError();
  sub_10002008C();
  sub_1000A41F8((void *)&_mh_execute_header, v0, v1, "Failed to set global enabled state %d", v2, v3, v4, v5, v6);
}

void sub_1000D48D4()
{
  SCError();
  sub_10002008C();
  sub_1000A41F8((void *)&_mh_execute_header, v0, v1, "Failed to set in progress state %d", v2, v3, v4, v5, v6);
}

void sub_1000D494C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error fetching mask detected events: %@", (uint8_t *)&v2, 0xCu);
}

uint64_t SDUnlockLockStateUpdatedReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0;
      *(unsigned char *)(a1 + 16) |= 2u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          uint64_t v19 = 0;
          goto LABEL_42;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v19 = 0;
      }
LABEL_42:
      *(unsigned char *)(a1 + 12) = v19 != 0;
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 16) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D5C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D5C38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerImport];
}

Class sub_1000D61D8()
{
  if (qword_10097FE48 != -1) {
    dispatch_once(&qword_10097FE48, &stru_1008CCC38);
  }
  Class result = objc_getClass("EKEventStore");
  qword_10097FE40 = (uint64_t)result;
  off_100967340[0] = (uint64_t (*)())sub_1000D623C;
  return result;
}

id sub_1000D623C()
{
  return (id)qword_10097FE40;
}

void sub_1000D6248(id a1)
{
  qword_10097FE50 = (uint64_t)dlopen("/System/Library/Frameworks/EventKit.framework/EventKit", 2);
}

void sub_1000D6314(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  int v2 = (void *)qword_10097FE58;
  qword_10097FE58 = (uint64_t)v1;
}

void sub_1000D6618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_time_t v5 = sub_1001B1AF8(5.0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000D7F84;
  v6[3] = &unk_1008CCCF8;
  void v6[4] = a2;
  v6[5] = a3;
  dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, v6);
}

id sub_1000D74DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) cancelAllOperations];
}

void sub_1000D74E4(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 32)];
  if (*(void *)(a1 + 40)) {
    [*(id *)(a1 + 48) addIconPropertiesWithImage:SFScaleAndRotateImage() toFakeTransferData:v2];
  }
  [*(id *)(*(void *)(a1 + 48) + 24) askEventForRecordID:*(void *)(a1 + 56) withResults:v2];
}

id sub_1000D7570(uint64_t a1)
{
  [*(id *)(a1 + 32) _publish];
  [*(id *)(a1 + 32) setSf_transferState:3];
  [*(id *)(a1 + 32) setTotalUnitCount:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);

  return [v2 setCompletedUnitCount:0];
}

void sub_1000D75C4(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 64) * v2;
  unint64_t v4 = vcvtps_s32_f32(*(float *)(a1 + 84) - (float)(*(float *)(a1 + 88) * (float)(int)v2));
  [*(id *)(a1 + 32) setCompletedUnitCount:v3];
  dispatch_time_t v5 = *(void **)(a1 + 32);
  unint64_t v6 = +[NSNumber numberWithInteger:v4];
  [v5 setUserInfoObject:v6 forKey:NSProgressEstimatedTimeRemainingKey];

  id v7 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) addProgressPropertiesWithBytesCopied:v3 totalBytes:*(void *)(a1 + 72) timeRemaining:v4 filesCopied:0 toFakeTransferData:v7];
  [*(id *)(*(void *)(a1 + 48) + 24) progressEventForRecordID:*(void *)(a1 + 56) withResults:v7];
}

void sub_1000D76B4(uint64_t a1)
{
  [*(id *)(a1 + 32) setCompletedUnitCount:*(void *)(a1 + 72)];
  [*(id *)(a1 + 32) setSf_transferState:6];
  id v2 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) addProgressPropertiesWithBytesCopied:*(void *)(a1 + 72) totalBytes:*(void *)(a1 + 72) timeRemaining:0 filesCopied:0 toFakeTransferData:0];
  if (*(unsigned char *)(a1 + 80)) {
    [*(id *)(a1 + 48) replaceItemsWithItems:*(void *)(a1 + 56) inFakeTransferData:v2];
  }
  [*(id *)(*(void *)(a1 + 48) + 24) finishedEventForRecordID:*(void *)(a1 + 64) withResults:v2];
}

id sub_1000D7764(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unpublish];
}

void sub_1000D7964(uint64_t a1)
{
  usleep((float)((float)(*(float *)(a1 + 40) * 1000.0) * 1000.0));
  uint64_t v5 = 0;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000;
  char v8 = sub_1000D7A7C;
  BOOL v9 = sub_1000D7A8C;
  dispatch_semaphore_t v10 = 0;
  dispatch_semaphore_t v10 = dispatch_semaphore_create(1);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_1000D7A94;
  v2[3] = &unk_1008CCCB0;
  id v3 = *(id *)(a1 + 32);
  unint64_t v4 = &v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
  dispatch_semaphore_wait((dispatch_semaphore_t)v6[5], 0xFFFFFFFFFFFFFFFFLL);

  _Block_object_dispose(&v5, 8);
}

uint64_t sub_1000D7A7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D7A8C(uint64_t a1)
{
}

intptr_t sub_1000D7A94(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  return dispatch_semaphore_signal(v2);
}

void sub_1000D7F84(uint64_t a1)
{
  id v1 = *(void **)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  id v8 = [v1 stringByReplacingOccurrencesOfString:@"com.apple.sharingd.fake.transfer." withString:&stru_1008E7020];
  id v3 = [v8 componentsSeparatedByString:@"."];
  unint64_t v4 = [v3 objectAtIndexedSubscript:0];
  id v5 = [v4 integerValue];

  unint64_t v6 = [v3 objectAtIndexedSubscript:1];
  id v7 = [v6 integerValue];

  [v2 startFakeTransferInCategory:v5 ofType:v7];
}

void sub_1000D8060(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "startFakeTransferInCategory fakeTransfer %ld.%ld itemSources is nil", (uint8_t *)&v3, 0x16u);
}

void sub_1000D80E8(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "startFakeTransferWithItems: failed to get Downloads folder", v1, 2u);
}

void sub_1000D812C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "startFakeTransferWithItems createDirectoryAtURL failed %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000D81A4(id a1)
{
  qword_10097FE70 = (uint64_t)CFBundleGetBundleWithIdentifier(@"com.apple.Sharing");
  if (!qword_10097FE70)
  {
    CFURLRef v1 = CFURLCreateWithFileSystemPath(0, @"/System/Library/PrivateFrameworks/Sharing.framework", kCFURLPOSIXPathStyle, 1u);
    if (v1)
    {
      CFURLRef v2 = v1;
      qword_10097FE70 = (uint64_t)CFBundleCreate(0, v1);
      CFRelease(v2);
    }
  }
}

CFStringRef sub_1000D8224(const __CFString *a1)
{
  return sub_1000D8230(a1, @"Localizable");
}

CFStringRef sub_1000D8230(const __CFString *cf, CFStringRef tableName)
{
  if (qword_10097FE68 != -1) {
    dispatch_once(&qword_10097FE68, &stru_1008CCDD8);
  }
  uint64_t v4 = (__CFBundle *)qword_10097FE70;
  if (qword_10097FE70)
  {
    return CFBundleCopyLocalizedString(v4, cf, cf, tableName);
  }
  else
  {
    CFAllocatorRef v6 = CFGetAllocator(cf);
    return CFStringCreateCopy(v6, cf);
  }
}

__CFSet *sub_1000D82CC(const __CFAllocator *a1, CFIndex a2, CFBagRef theBag)
{
  if (!theBag) {
    return 0;
  }
  CFIndex Count = CFBagGetCount(theBag);
  if (!Count) {
    return 0;
  }
  uint64_t v7 = Count;
  __chkstk_darwin(Count);
  BOOL v9 = (const void **)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v9, v8);
  CFBagGetValues(theBag, v9);
  Mutable = CFSetCreateMutable(a1, a2, &kCFTypeSetCallBacks);
  if (v7 >= 1)
  {
    do
    {
      id v11 = *v9++;
      CFSetSetValue(Mutable, v11);
      --v7;
    }
    while (v7);
  }
  return Mutable;
}

void sub_1000D83D4(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (value) {
    CFDictionarySetValue(theDict, key, value);
  }
  else {
    CFDictionaryRemoveValue(theDict, key);
  }
}

uint64_t sub_1000D83E0(const void *a1)
{
  if (CFEqual(a1, kSFNodeProtocolAFP)) {
    return 548;
  }
  if (CFEqual(a1, kSFNodeProtocolSMB)) {
    return 445;
  }
  if (CFEqual(a1, kSFNodeProtocolVNC)) {
    return 5900;
  }
  if (CFEqual(a1, kSFNodeProtocolODisk) || CFEqual(a1, kSFNodeProtocolWebDAV)) {
    return 80;
  }
  if (CFEqual(a1, kSFNodeProtocolWebDAVS)) {
    return 443;
  }
  if (CFEqual(a1, kSFNodeProtocolNFS)) {
    return 2049;
  }
  if (CFEqual(a1, kSFNodeProtocolFTP)) {
    return 21;
  }
  if (CFEqual(a1, kSFNodeProtocolFTPS)) {
    return 990;
  }
  if (CFEqual(a1, kSFNodeProtocolHTTP)) {
    return 80;
  }
  if (CFEqual(a1, kSFNodeProtocolHTTPS)) {
    return 443;
  }
  if (CFEqual(a1, kSFNodeProtocolADisk)) {
    return 548;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

CFURLRef sub_1000D8564(const void *a1, const __CFString *a2, const __CFString *a3, __CFString *MutableCopy, int a5, const __CFString *a6, const __CFDictionary *a7, int a8)
{
  if (CFEqual(a1, kSFNodeProtocolWebDAV) || CFEqual(a1, kSFNodeProtocolODisk))
  {
    char v16 = (const void **)&kSFNodeProtocolHTTP;
LABEL_4:
    char v17 = *v16;
    goto LABEL_5;
  }
  uint64_t v38 = (const void *)kSFNodeProtocolAirDrop;
  CFEqual(a1, kSFNodeProtocolAirDrop);
  if (CFEqual(a1, kSFNodeProtocolWebDAVS) || (char v17 = a1, CFEqual(a1, v38)))
  {
    char v16 = (const void **)&kSFNodeProtocolHTTPS;
    goto LABEL_4;
  }
LABEL_5:
  int v18 = sub_1000D83E0(a1);
  if (a2) {
    a2 = CFURLCreateStringByAddingPercentEscapes(0, a2, 0, @";:@?/", 0x8000100u);
  }
  if (a3) {
    a3 = CFURLCreateStringByAddingPercentEscapes(0, a3, 0, @";:@?/", 0x8000100u);
  }
  if (CFStringHasPrefix(MutableCopy, @"[") && CFStringHasSuffix(MutableCopy, @"]"))
  {
    CFIndex Length = CFStringGetLength(MutableCopy);
    MutableCopy = CFStringCreateMutableCopy(0, Length, MutableCopy);
    v45.length = CFStringGetLength(MutableCopy);
    v45.location = 0;
    CFStringFindAndReplace(MutableCopy, @"%", @"%25", v45, 0);
  }
  else if (MutableCopy)
  {
    MutableCopy = (__CFString *)CFURLCreateStringByAddingPercentEscapes(0, MutableCopy, 0, @";:@?/",
                                  0x8000100u);
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%@://", v17);
  if (!a2)
  {
    if (!a3)
    {
      int v21 = 1;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  CFStringAppend(Mutable, a2);
  if (a3)
  {
LABEL_18:
    CFStringAppendFormat(Mutable, 0, @":%@", a3);
    int v21 = 0;
    goto LABEL_19;
  }
  int v21 = 1;
LABEL_19:
  CFStringAppend(Mutable, @"@");
LABEL_20:
  CFStringAppend(Mutable, MutableCopy);
  if (a5 >= 1 && v18 != a5) {
    CFStringAppendFormat(Mutable, 0, @":%ld", a5);
  }
  if (a6)
  {
    if (CFStringHasPrefix(a6, @"/"))
    {
      v44.length = CFStringGetLength(a6) - 1;
      v44.location = 1;
      CFStringRef v22 = CFStringCreateWithSubstring(0, a6, v44);
    }
    else
    {
      CFStringRef v22 = (const __CFString *)CFRetain(a6);
    }
    CFStringRef v23 = v22;
    if (v22) {
      CFStringRef v24 = CFURLCreateStringByAddingPercentEscapes(0, v22, 0, 0, 0x8000100u);
    }
    else {
      CFStringRef v24 = 0;
    }
    CFStringAppendFormat(Mutable, 0, @"/%@", v24);
    CFRelease(v23);
    CFRelease(v24);
  }
  if (a7)
  {
    CFIndex Count = CFDictionaryGetCount(a7);
    if (Count)
    {
      uint64_t v26 = Count;
      int v40 = v21;
      CFStringRef v41 = a3;
      int v42 = a8;
      uint64_t v39 = (uint64_t)&v39;
      __chkstk_darwin(Count);
      id v28 = (const void **)((char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v28, v27);
      id v29 = CFStringCreateMutable(0, 0);
      CFDictionaryGetKeysAndValues(a7, v28, 0);
      uint64_t v30 = v26 - 1;
      if (v26 >= 1)
      {
        while (1)
        {
          unsigned __int8 v31 = *v28;
          CFNumberRef Value = CFDictionaryGetValue(a7, *v28);
          CFStringAppendFormat(v29, 0, @"%@=%@", v31, Value);
          if (!v30) {
            break;
          }
          CFStringAppend(v29, @"&");
          --v30;
          ++v28;
        }
      }
      CFStringAppendFormat(Mutable, 0, @"?%@", v29);
      CFRelease(v29);
      a8 = v42;
      a3 = v41;
      LOBYTE(v21) = v40;
    }
  }
  CFURLRef v33 = CFURLCreateWithString(0, Mutable, 0);
  CFURLRef v34 = v33;
  if (a8)
  {
    CFErrorRef error = 0;
    if (!CFURLSetResourcePropertyForKey(v33, kCFURLIsDirectoryKey, kCFBooleanTrue, &error))
    {
      char v35 = v21;
      double v36 = utilities_log();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        sub_1000D9A78((uint64_t *)&error, v36);
      }
      CFRelease(error);
      LOBYTE(v21) = v35;
    }
  }
  CFRelease(Mutable);
  CFRelease(MutableCopy);
  if (a2) {
    CFRelease(a2);
  }
  if ((v21 & 1) == 0) {
    CFRelease(a3);
  }
  return v34;
}

CGImageRef sub_1000D8A7C(const __CFData *a1)
{
  return sub_1000D8A84(a1, 0);
}

CGImageRef sub_1000D8A84(const __CFData *a1, int a2)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int16 v5 = Mutable;
  if (a2)
  {
    CFDictionarySetValue(Mutable, kCGImageSourceTypeIdentifierHint, kUTTypeJPEG2000);
    CFDictionarySetValue(v5, kCGImageSourceFailForDataNotMatchingHint, kCFBooleanTrue);
  }
  CFAllocatorRef v6 = CGImageSourceCreateWithData(a1, v5);
  if (v6)
  {
    uint64_t v7 = v6;
    if (!CGImageSourceGetCount(v6))
    {
      char v12 = utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1000D9B28();
      }
      goto LABEL_20;
    }
    if (a2)
    {
      CFStringRef Type = CGImageSourceGetType(v7);
      if (!CFEqual(Type, kUTTypeJPEG2000))
      {
        uint64_t v14 = utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_1000D9B5C();
        }
        goto LABEL_20;
      }
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        dispatch_semaphore_t v10 = utilities_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_1000D9B90();
        }
LABEL_20:
        CGImageRef ImageAtIndex = 0;
      }
    }
    else
    {
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
      if (!ImageAtIndex)
      {
        uint64_t v13 = utilities_log();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_1000D9BC4();
        }
        goto LABEL_20;
      }
    }
    CFRelease(v7);
    goto LABEL_22;
  }
  id v11 = utilities_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_1000D9AF4();
  }
  CGImageRef ImageAtIndex = 0;
LABEL_22:
  CFRelease(v5);
  return ImageAtIndex;
}

CGImageRef sub_1000D8C3C(const __CFData *a1)
{
  return sub_1000D8A84(a1, 1);
}

CGImageRef sub_1000D8C44(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
  {
    uint64_t v3 = CGImageSourceCreateWithURL((CFURLRef)a1, 0);
  }
  else
  {
    if (v2 != CFDataGetTypeID()) {
      goto LABEL_8;
    }
    uint64_t v3 = CGImageSourceCreateWithData((CFDataRef)a1, 0);
  }
  uint64_t v4 = v3;
  if (v3)
  {
    if (CGImageSourceGetCount(v3))
    {
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    }
    else
    {
      uint64_t v7 = utilities_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000D9C2C();
      }
      CGImageRef ImageAtIndex = 0;
    }
    CFRelease(v4);
    return ImageAtIndex;
  }
LABEL_8:
  CFAllocatorRef v6 = utilities_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1000D9BF8();
  }
  return 0;
}

__CFData *sub_1000D8D24(void *a1, uint64_t a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFDataCreateMutable(v4, 0);
  uint64_t valuePtr = a2;
  CFAllocatorRef v6 = CFDictionaryCreateMutable(v4, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    CFNumberRef v7 = CFNumberCreate(v4, kCFNumberLongType, &valuePtr);
    size_t v8 = (const void **)&kCGImageDestinationRequestedFileSize;
  }
  else
  {
    int v14 = 1065353216;
    CFNumberRef v7 = CFNumberCreate(v4, kCFNumberFloatType, &v14);
    size_t v8 = (const void **)&kCGImageDestinationLossyCompressionQuality;
  }
  CFDictionarySetValue(v6, *v8, v7);
  CFRelease(v7);
  BOOL v9 = CGImageDestinationCreateWithData(Mutable, kUTTypeJPEG2000, 1uLL, 0);
  if (v9)
  {
    dispatch_semaphore_t v10 = v9;
    CGImageDestinationAddImage(v9, (CGImageRef)a1, v6);
    if (!CGImageDestinationFinalize(v10))
    {
      id v11 = utilities_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1000D9C94();
      }
      CFRelease(Mutable);
      CFMutableStringRef Mutable = 0;
    }
    CFRelease(v10);
  }
  else
  {
    char v12 = utilities_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1000D9C60();
    }
  }
  CFRelease(v6);
  return Mutable;
}

__CFData *sub_1000D8E98(uint64_t a1, uint64_t a2)
{
  CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (DeviceRGB)
  {
    CGColorSpaceRef v4 = DeviceRGB;
    __int16 v5 = (CGImage *)CGImageCreateByMatchingToColorSpace();
    if (v5)
    {
      CFAllocatorRef v6 = v5;
      size_t Width = CGImageGetWidth(v5);
      size_t Height = CGImageGetHeight(v6);
      if (Width > 0x21C || Height >= 0x21D) {
        Thumb = (void *)CGImageCreateThumb();
      }
      else {
        Thumb = (void *)CFRetain(v6);
      }
      uint64_t v13 = Thumb;
      if (Thumb)
      {
        id v11 = sub_1000D8D24(Thumb, a2);
        CFRelease(v13);
      }
      else
      {
        int v14 = utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_1000D9D30();
        }
        id v11 = 0;
      }
      CFRelease(v6);
    }
    else
    {
      char v12 = utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1000D9CFC();
      }
      id v11 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    dispatch_semaphore_t v10 = utilities_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1000D9CC8();
    }
    return 0;
  }
  return v11;
}

uint64_t sub_1000D8FC8()
{
  CFBooleanRef v0 = (const __CFBoolean *)qword_10097FE78;
  if (!qword_10097FE78)
  {
    if (SFDeviceIsVirtualMachine()) {
      uint64_t v1 = 1;
    }
    else {
      uint64_t v1 = sub_1000D9060(@"EnableDemoMode", 0);
    }
    int v2 = sub_1000D9060(@"BrowseAllInterfaces", v1);
    uint64_t v3 = &kCFBooleanTrue;
    if (!v2) {
      uint64_t v3 = &kCFBooleanFalse;
    }
    CFBooleanRef v0 = *v3;
    qword_10097FE78 = (uint64_t)*v3;
  }

  return CFBooleanGetValue(v0);
}

uint64_t sub_1000D9050()
{
  return sub_1000D9060(@"EnableDemoMode", 0);
}

uint64_t sub_1000D9060(const __CFString *a1, uint64_t a2)
{
  CFBooleanRef v3 = (const __CFBoolean *)sub_1000D91F0(a1);
  if (v3)
  {
    CFBooleanRef v4 = v3;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 0x40000000;
    BOOL v9 = sub_1000D9404;
    dispatch_semaphore_t v10 = &unk_1008CCE18;
    CFBooleanRef v11 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFBooleanGetTypeID())
    {
      uint64_t Value = CFBooleanGetValue(v4);
    }
    else
    {
      if (v5 != CFStringGetTypeID())
      {
LABEL_7:
        v9((uint64_t)v8);
        return a2;
      }
      uint64_t Value = sub_1000D92E0((const __CFString *)v4);
    }
    a2 = Value;
    goto LABEL_7;
  }
  return a2;
}

uint64_t sub_1000D912C()
{
  CFBooleanRef v0 = (const __CFBoolean *)qword_10097FE80;
  if (!qword_10097FE80)
  {
    int v1 = sub_1000D9060(@"EnableDirectIP", 0);
    int v2 = &kCFBooleanTrue;
    if (!v1) {
      int v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v0 = *v2;
    qword_10097FE80 = (uint64_t)*v2;
  }

  return CFBooleanGetValue(v0);
}

BOOL sub_1000D9194(CFTypeRef cf1, CFTypeRef cf2)
{
  if (cf1 && cf2)
  {
    if (!CFEqual(cf1, cf2)) {
      return 1;
    }
  }
  else if (cf1 && !cf2)
  {
    return 1;
  }
  return cf2 && cf1 == 0;
}

CFPropertyListRef sub_1000D91F0(const __CFString *a1)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(a1, @"/private/var/Managed Preferences/mobile/com.apple.Sharing");
  if (!result)
  {
    return CFPreferencesCopyAppValue(a1, @"com.apple.Sharing");
  }
  return result;
}

uint64_t sub_1000D9248(const __CFString *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t valuePtr = a2;
  CFNumberRef v3 = (const __CFNumber *)sub_1000D91F0(a1);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberLongType, &valuePtr);
    }
    else
    {
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID()) {
        uint64_t valuePtr = CFStringGetIntValue((CFStringRef)v4);
      }
    }
    CFRelease(v4);
    return valuePtr;
  }
  return v2;
}

BOOL sub_1000D92E0(const __CFString *a1)
{
  CFRetain(a1);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  CFTypeID v5 = sub_1000D93FC;
  CFTypeID v6 = &unk_1008CCDF8;
  CFStringRef v7 = a1;
  if (CFEqual(a1, @"1"))
  {
    BOOL v2 = 1;
  }
  else
  {
    BOOL v2 = 1;
    if (CFStringCompare(a1, @"true", 1uLL))
    {
      BOOL v2 = 1;
      if (CFStringCompare(a1, @"yes", 1uLL))
      {
        BOOL v2 = 1;
        if (CFStringCompare(a1, @"y", 1uLL)) {
          BOOL v2 = CFStringCompare(a1, @"on", 1uLL) == kCFCompareEqualTo;
        }
      }
    }
  }
  v5((uint64_t)v4);
  return v2;
}

void sub_1000D93FC(uint64_t a1)
{
}

void sub_1000D9404(uint64_t a1)
{
}

CFStringRef sub_1000D940C(const __CFAllocator *a1)
{
  memset(&v4, 0, sizeof(v4));
  v3.tv_sec = 0;
  *(void *)&v3.tv_usec = 0;
  gettimeofday(&v3, 0);
  localtime_r(&v3.tv_sec, &v4);
  return CFStringCreateWithFormat(a1, 0, @"%02d:%02d:%02d.%03d", v4.tm_hour, v4.tm_min, v4.tm_sec, (v3.tv_usec / 1000));
}

CFStringRef sub_1000D94A0()
{
  CFBooleanRef v0 = (const __CFBoolean *)sub_1000D91F0(@"AlternateService");
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v1)) {
        CFStringRef v3 = @"_airdrop-alt._tcp.";
      }
      else {
        CFStringRef v3 = @"_airdrop._tcp.";
      }
      goto LABEL_16;
    }
    CFTypeID v6 = CFGetTypeID(v1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFEqual(v1, @"1"))
      {
        CFStringRef v3 = @"_airdrop-alt._tcp.";
LABEL_16:
        CFRelease(v1);
        return v3;
      }
      if (!CFEqual(v1, @"0"))
      {
        if (CFStringGetLength((CFStringRef)v1) < 8)
        {
          CFStringRef v7 = (void *)CFRetain(v1);
        }
        else
        {
          v11.location = 0;
          v11.length = 7;
          CFStringRef v7 = (void *)CFStringCreateWithSubstring(0, (CFStringRef)v1, v11);
        }
        size_t v8 = v7;
        CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"_airdrop-%@._tcp.", v7);
        CFStringRef v3 = (const __CFString *)CFAutorelease(v9);
        CFRelease(v8);
        goto LABEL_16;
      }
    }
    CFStringRef v3 = @"_airdrop._tcp.";
    goto LABEL_16;
  }
  if (!sub_1000D9060(@"EnableDemoMode", 0)) {
    return @"_airdrop._tcp.";
  }
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"_airdrop-%@._tcp.", @"demo");

  return (const __CFString *)CFAutorelease(v4);
}

CFArrayRef sub_1000D9640()
{
  int v14 = @"_adisk._tcp.";
  CFStringRef v15 = @"_afpovertcp._tcp.";
  CFStringRef v16 = @"_smb._tcp.";
  CFStringRef v17 = @"_rfb._tcp.";
  CFStringRef v18 = @"_odisk._tcp.";
  CFStringRef v19 = @"_http._tcp.";
  CFStringRef v20 = sub_1000D94A0();
  CFStringRef v21 = @"_file._tcp.";
  CFStringRef v22 = @"_netbios._udp.";
  CFStringRef v23 = @"_workgroups._udp.";
  CFStringRef v24 = @"_nwnode._tcp.";
  uint64_t v0 = kSFNodeProtocolAFP;
  values = (void *)kSFNodeProtocolADisk;
  uint64_t v4 = kSFNodeProtocolAFP;
  uint64_t v1 = kSFNodeProtocolSMB;
  uint64_t v5 = kSFNodeProtocolSMB;
  uint64_t v6 = kSFNodeProtocolVNC;
  uint64_t v7 = kSFNodeProtocolODisk;
  uint64_t v8 = kSFNodeProtocolHTTP;
  uint64_t v9 = kSFNodeProtocolAirDrop;
  uint64_t v10 = kSFNodeProtocolFile;
  uint64_t v11 = kSFNodeProtocolNetBIOS;
  uint64_t v12 = kSFNodeProtocolWorkgroups;
  uint64_t v13 = kSFNodeProtocolNWNode;
  if (sub_1000D9060(@"PreferSMBFileSharing", 0))
  {
    CFStringRef v15 = @"_smb._tcp.";
    CFStringRef v16 = @"_afpovertcp._tcp.";
    uint64_t v4 = v1;
    uint64_t v5 = v0;
  }
  qword_10097FE98 = (uint64_t)CFArrayCreate(0, (const void **)&values, 11, &kCFTypeArrayCallBacks);
  CFArrayRef result = CFArrayCreate(0, (const void **)&v14, 11, &kCFTypeArrayCallBacks);
  qword_10097FE90 = (uint64_t)result;
  return result;
}

const void *sub_1000D97FC(void *key)
{
  if (qword_10097FEA0 != -1) {
    dispatch_once(&qword_10097FEA0, &stru_1008CCE98);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)qword_10097FEA8;

  return CFDictionaryGetValue(v2, key);
}

CFDictionaryRef sub_1000D9864()
{
  if (qword_10097FE88 != -1) {
    dispatch_once(&qword_10097FE88, &stru_1008CCE58);
  }
  CFArrayRef v0 = (const __CFArray *)qword_10097FE90;
  CFArrayRef v1 = (const __CFArray *)qword_10097FE98;
  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10097FE90);
  CFIndex v3 = CFArrayGetCount(v1);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v5, v4);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, v7);
  v11.location = 0;
  v11.length = Count;
  CFArrayGetValues(v0, v11, (const void **)v5);
  v12.location = 0;
  v12.length = v3;
  CFArrayGetValues(v1, v12, (const void **)v8);
  qword_10097FEA8 = (uint64_t)CFDictionaryCreate(kCFAllocatorDefault, (const void **)v8, (const void **)v5, Count, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef result = CFDictionaryCreate(kCFAllocatorDefault, (const void **)v5, (const void **)v8, v3, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10097FEB0 = (uint64_t)result;
  return result;
}

const void *sub_1000D9A10(void *key)
{
  if (qword_10097FEA0 != -1) {
    dispatch_once(&qword_10097FEA0, &stru_1008CCED8);
  }
  CFDictionaryRef v2 = (const __CFDictionary *)qword_10097FEB0;

  return CFDictionaryGetValue(v2, key);
}

void sub_1000D9A78(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "createURL: CFURLSetResourcePropertyForKey %@", (uint8_t *)&v3, 0xCu);
}

void sub_1000D9AF4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateWithData returned NULL", v2, v3, v4, v5, v6);
}

void sub_1000D9B28()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
}

void sub_1000D9B5C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceGetType image format invalid", v2, v3, v4, v5, v6);
}

void sub_1000D9B90()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex (requireJPEG2000) returned NULL", v2, v3, v4, v5, v6);
}

void sub_1000D9BC4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex returned NULL", v2, v3, v4, v5, v6);
}

void sub_1000D9BF8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataOrURL: CGImageSourceCreate returned NULL", v2, v3, v4, v5, v6);
}

void sub_1000D9C2C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createCGImageWithDataOrURL: CGImageSourceGetCount returned zero", v2, v3, v4, v5, v6);
}

void sub_1000D9C60()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "copyImageData: CGImageDestinationCreateWithData returned NULL", v2, v3, v4, v5, v6);
}

void sub_1000D9C94()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "copyImageData: CGImageDestinationFinalize failed", v2, v3, v4, v5, v6);
}

void sub_1000D9CC8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGColorSpaceCreateDeviceRGB returned NULL", v2, v3, v4, v5, v6);
}

void sub_1000D9CFC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGImageCreateCopyWithColorSpace returned NULL", v2, v3, v4, v5, v6);
}

void sub_1000D9D30()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "createImageDataWithSize: CGImageCreateThumb returned NULL", v2, v3, v4, v5, v6);
}

uint64_t SDAuthenticationPrePairingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadString();
      CFStringRef v19 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v18;
    }
    else
    {
      if (v12 == 2)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v15 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0) {
            goto LABEL_42;
          }
          v20 += 7;
          BOOL v9 = v21++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v25 = 16;
      }
      else
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v25 = 20;
      }
      *(_DWORD *)(a1 + v25) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000DA850(uint64_t a1)
{
  return [*(id *)(a1 + 32) _start];
}

void sub_1000DB080(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) invalidateResponseTimer];
  char v4 = +[SDNearbyAgent sharedNearbyAgent];
  unsigned int v5 = [*(id *)(a1 + 32) bleDevice];
  [v4 stopUnlockBLEConnectionWithDevice:v5];

  [*(id *)(a1 + 32) setActiveConnection:0];
  unint64_t v6 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v7 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
    CFStringRef v12 = @"Proxy trigger failed";
    char v8 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    BOOL v9 = +[NSError errorWithDomain:v7 code:141 userInfo:v8];
    [v6 notifyDelegateWithError:v9];
  }
  else
  {
    [*(id *)(a1 + 32) setState:3];
    int v10 = *(void **)(a1 + 32);
    [v10 notifyDelegateWithError:0];
  }
}

uint64_t SDAutoUnlockAWDLInfoReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 60) |= 4u;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_77;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_79;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_77:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_79:
        uint64_t v60 = 48;
        goto LABEL_88;
      case 2u:
        uint64_t v20 = PBReaderReadData();
        uint64_t v21 = 24;
        goto LABEL_58;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 60) |= 0x80u;
        while (2)
        {
          uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v10 = v23++ >= 9;
              if (v10)
              {
                uint64_t v24 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0;
        }
LABEL_83:
        BOOL v61 = v24 != 0;
        uint64_t v62 = 56;
        goto LABEL_105;
      case 4u:
        uint64_t v20 = PBReaderReadData();
        uint64_t v21 = 40;
        goto LABEL_58;
      case 5u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
            v15 |= (unint64_t)(v32 & 0x7F) << v28;
            if (v32 < 0)
            {
              v28 += 7;
              BOOL v10 = v29++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_87:
        uint64_t v60 = 32;
LABEL_88:
        *(_DWORD *)(a1 + v60) = v15;
        continue;
      case 6u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        *(unsigned char *)(a1 + 60) |= 8u;
        while (2)
        {
          uint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v10 = v34++ >= 9;
              if (v10)
              {
                uint64_t v35 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v35 = 0;
        }
LABEL_92:
        BOOL v61 = v35 != 0;
        uint64_t v62 = 52;
        goto LABEL_105;
      case 7u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 60) |= 0x40u;
        while (2)
        {
          uint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v43 = v42 + 1;
          if (v42 == -1 || v43 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              BOOL v10 = v40++ >= 9;
              if (v10)
              {
                uint64_t v41 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v41 = 0;
        }
LABEL_96:
        BOOL v61 = v41 != 0;
        uint64_t v62 = 55;
        goto LABEL_105;
      case 8u:
        uint64_t v20 = PBReaderReadString();
        uint64_t v21 = 16;
LABEL_58:
        CFRange v45 = *(void **)(a1 + v21);
        *(void *)(a1 + v21) = v20;

        continue;
      case 9u:
        *(unsigned char *)(a1 + 60) |= 1u;
        unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v47 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v47 = 0;
        }
        *(void *)(a1 + 8) = v47;
        continue;
      case 0xAu:
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        *(unsigned char *)(a1 + 60) |= 0x20u;
        while (2)
        {
          uint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v52 = v51 + 1;
          if (v51 == -1 || v52 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52;
            v50 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              BOOL v10 = v49++ >= 9;
              if (v10)
              {
                uint64_t v50 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v50 = 0;
        }
LABEL_100:
        BOOL v61 = v50 != 0;
        uint64_t v62 = 54;
        goto LABEL_105;
      case 0xBu:
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        *(unsigned char *)(a1 + 60) |= 0x10u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v57 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v58 = v57 + 1;
      if (v57 == -1 || v58 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v59 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58;
      v56 |= (unint64_t)(v59 & 0x7F) << v54;
      if ((v59 & 0x80) == 0) {
        goto LABEL_102;
      }
      v54 += 7;
      BOOL v10 = v55++ >= 9;
      if (v10)
      {
        uint64_t v56 = 0;
        goto LABEL_104;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_102:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v56 = 0;
    }
LABEL_104:
    BOOL v61 = v56 != 0;
    uint64_t v62 = 53;
LABEL_105:
    *(unsigned char *)(a1 + v62) = v61;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000DCFF0()
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  CFArrayRef v0 = (void *)qword_10097FEB8;
  uint64_t v7 = qword_10097FEB8;
  if (!qword_10097FEB8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1000E05E4;
    void v3[3] = &unk_1008CA038;
    v3[4] = &v4;
    sub_1000E05E4((uint64_t)v3);
    CFArrayRef v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000DD0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DD564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DD850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1000DDF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_1000DE71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
}

void sub_1000DE758(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained _loadIconForSuggestionNode:v7 outIcon:a3 outIconData:a4];
}

void sub_1000DEA74(os_signpost_id_t a1, int a2, int a3, int a4)
{
  unint64_t v8 = share_sheet_log();
  char v9 = v8;
  if (!a2)
  {
    if (a4)
    {
      if (a1 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v8)) {
        goto LABEL_27;
      }
      __int16 v16 = 0;
      BOOL v10 = "AsyncPeopleSuggestions";
      int v11 = (uint8_t *)&v16;
    }
    else if (a3)
    {
      if (a1 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v8)) {
        goto LABEL_27;
      }
      __int16 v15 = 0;
      BOOL v10 = "PreheatPeopleSuggestions";
      int v11 = (uint8_t *)&v15;
    }
    else
    {
      if (a1 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v8)) {
        goto LABEL_27;
      }
      __int16 v14 = 0;
      BOOL v10 = "GetPeopleSuggestions";
      int v11 = (uint8_t *)&v14;
    }
    CFStringRef v12 = v9;
    os_signpost_type_t v13 = OS_SIGNPOST_INTERVAL_END;
    goto LABEL_26;
  }
  if (a4)
  {
    if (a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      __int16 v19 = 0;
      BOOL v10 = "AsyncPeopleSuggestions";
      int v11 = (uint8_t *)&v19;
LABEL_21:
      CFStringRef v12 = v9;
      os_signpost_type_t v13 = OS_SIGNPOST_INTERVAL_BEGIN;
LABEL_26:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, v13, a1, v10, " enableTelemetry=YES ", v11, 2u);
    }
  }
  else if (a3)
  {
    if (a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      __int16 v18 = 0;
      BOOL v10 = "PreheatPeopleSuggestions";
      int v11 = (uint8_t *)&v18;
      goto LABEL_21;
    }
  }
  else if (a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    __int16 v17 = 0;
    BOOL v10 = "GetPeopleSuggestions";
    int v11 = (uint8_t *)&v17;
    goto LABEL_21;
  }
LABEL_27:
}

void sub_1000DF00C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  sub_1000DEA74(*(void *)(a1 + 40), 0, *(unsigned __int8 *)(a1 + 48), (int)[*(id *)(a1 + 32) isAsynchronous]);
  id v7 = share_sheet_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = [*(id *)(a1 + 32) sessionID];
    int v16 = 138412546;
    __int16 v17 = v8;
    __int16 v18 = 2048;
    id v19 = [v5 count];
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received response from PeopleSuggester for session ID %@ with %lu suggestions", (uint8_t *)&v16, 0x16u);
  }
  if (v6)
  {
    char v9 = share_sheet_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1000E0A70((uint64_t)v6, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  [*(id *)(a1 + 32) _didFetchDuetSuggestions:v5];
}

void sub_1000DF160(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a3)
  {
    char v9 = share_sheet_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1000E0ADC(v9);
    }

    uint64_t v10 = share_sheet_log();
    uint64_t v11 = share_sheet_log();
    os_signpost_id_t v12 = os_signpost_id_make_with_pointer(v11, *(const void **)(a1 + 32));

    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, v12, "ShareSheetAsyncPeopleSuggestionsDidTimeout", "", buf, 2u);
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000DF2E4;
  block[3] = &unk_1008CCF78;
  uint64_t v13 = *(NSObject **)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  id v19 = v8;
  id v20 = v14;
  id v18 = v7;
  id v15 = v8;
  id v16 = v7;
  dispatch_async(v13, block);
}

uint64_t sub_1000DF2E4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000DF2FC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 80) suggestInteractionsFromContext:*(void *)(*(void *)(a1 + 32) + 88)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_1000DFA28()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  CFArrayRef v0 = (void *)qword_10097FEE0;
  uint64_t v7 = qword_10097FEE0;
  if (!qword_10097FEE0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1000E08AC;
    void v3[3] = &unk_1008CA038;
    v3[4] = &v4;
    sub_1000E08AC((uint64_t)v3);
    CFArrayRef v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000DFAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DFB0C(uint64_t a1)
{
  uint64_t v17 = 0;
  id v18 = &v17;
  uint64_t v19 = 0x2050000000;
  id v2 = (void *)qword_10097FEE8;
  uint64_t v20 = qword_10097FEE8;
  if (!qword_10097FEE8)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1000E0904;
    v16[3] = &unk_1008CA038;
    v16[4] = &v17;
    sub_1000E0904((uint64_t)v16);
    id v2 = (void *)v18[3];
  }
  id v3 = v2;
  _Block_object_dispose(&v17, 8);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = +[NSDate date];
  uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 88) suggestionDate];
  [v5 timeIntervalSinceDate:v6];
  double v8 = v7;
  char v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = v9[11];
  float v12 = *(double *)(a1 + 56) / *(double *)(a1 + 64);
  uint64_t v13 = [v9 sessionID];
  *(float *)&double v14 = v12;
  id v15 = [v3 feedbackForAction:v4 delay:v11 context:v10 suggestions:v13 numberOfVisibleSuggestions:v8 sessionIdentifier:v14];

  [*(id *)(*(void *)(a1 + 40) + 80) provideFeedbackForSuggestions:v15];
}

void sub_1000DFC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DFCA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000E0188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E01A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E01B0(uint64_t a1)
{
}

void sub_1000E01B8(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v12 = a2;
  double v8 = [v12 identifier];
  unsigned int v9 = [v8 isEqualToString:a1[4]];

  uint64_t v10 = v12;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    uint64_t v11 = (void *)a1[6];
    if (v11) {
      void *v11 = a3;
    }
    *a4 = 1;
    uint64_t v10 = v12;
  }
}

void sub_1000E0394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E03AC(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v12 = a2;
  double v8 = [v12 identifier];
  unsigned int v9 = [v8 isEqualToString:a1[4]];

  uint64_t v10 = v12;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    uint64_t v11 = (void *)a1[6];
    if (v11) {
      void *v11 = a3;
    }
    *a4 = 1;
    uint64_t v10 = v12;
  }
}

Class sub_1000E05E4(uint64_t a1)
{
  sub_1000E063C();
  Class result = objc_getClass("_PSSuggester");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000E0D00();
  }
  qword_10097FEB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000E063C()
{
  v0[0] = 0;
  if (!qword_10097FEC0)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_1000E0730;
    v0[4] = &unk_1008CB370;
    v0[5] = v0;
    long long v1 = off_1008CD060;
    uint64_t v2 = 0;
    qword_10097FEC0 = _sl_dlopen();
  }
  if (!qword_10097FEC0) {
    sub_1000E0D7C(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_1000E0730()
{
  uint64_t result = _sl_dlopen();
  qword_10097FEC0 = result;
  return result;
}

Class sub_1000E07A4(uint64_t a1)
{
  sub_1000E063C();
  Class result = objc_getClass("_PSSuggesterConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000E0DFC();
  }
  qword_10097FEC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000E07FC(uint64_t a1)
{
  sub_1000E063C();
  Class result = objc_getClass("_PSPredictionContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000E0E78();
  }
  qword_10097FED0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000E0854(uint64_t a1)
{
  sub_1000E063C();
  Class result = objc_getClass("_PSAttachment");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000E0EF4();
  }
  qword_10097FED8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000E08AC(uint64_t a1)
{
  sub_1000E063C();
  Class result = objc_getClass("_PSFeedbackAction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000E0F70();
  }
  qword_10097FEE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000E0904(uint64_t a1)
{
  sub_1000E063C();
  Class result = objc_getClass("_PSFeedback");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000E0FEC();
  }
  qword_10097FEE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000E095C(os_log_t log)
{
  *(_WORD *)long long v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error: Encountered nil, while linking to PSAttachmentClass", v1, 2u);
}

void sub_1000E09A0()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Cannot open file %@, CFErrorRef error = %@");
}

void sub_1000E0A08()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Cannot read from file %@, CFErrorRef error = %@");
}

void sub_1000E0A70(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E0ADC(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "People suggestions fetch did timeout", v1, 2u);
}

void sub_1000E0B20(uint64_t a1, void *a2, NSObject *a3)
{
  id v5 = [a2 image];
  uint64_t v6 = [v5 _identifier];
  int v7 = 138412546;
  uint64_t v8 = a1;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to fetch icon data from suggestion with conversationIdentifier {%@} and image {%@}", (uint8_t *)&v7, 0x16u);
}

void sub_1000E0BE4(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Got invalid Share Sheet feedback type", v1, 2u);
}

void sub_1000E0C28(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E0C94(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E0D00()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"Class get_PSSuggesterClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDSuggestionBrowser.m" lineNumber:31 description:@"Unable to find class %s", "_PSSuggester"];

  __break(1u);
}

void sub_1000E0D7C(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  id v3 = +[NSString stringWithUTF8String:"void *PeopleSuggesterLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SDSuggestionBrowser.m" lineNumber:29 description:@"%s" *a1];

  __break(1u);
}

void sub_1000E0DFC()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"Class get_PSSuggesterConfigurationClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDSuggestionBrowser.m" lineNumber:33 description:@"Unable to find class %s", "_PSSuggesterConfiguration"];

  __break(1u);
}

void sub_1000E0E78()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"Class get_PSPredictionContextClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDSuggestionBrowser.m" lineNumber:32 description:@"Unable to find class %s", "_PSPredictionContext"];

  __break(1u);
}

void sub_1000E0EF4()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"Class get_PSAttachmentClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDSuggestionBrowser.m" lineNumber:30 description:@"Unable to find class %s", "_PSAttachment"];

  __break(1u);
}

void sub_1000E0F70()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"Class get_PSFeedbackActionClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDSuggestionBrowser.m" lineNumber:35 description:@"Unable to find class %s", "_PSFeedbackAction"];

  __break(1u);
}

void sub_1000E0FEC()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"Class get_PSFeedbackClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDSuggestionBrowser.m" lineNumber:34 description:@"Unable to find class %s" argument:v1];

  __break(1u);
}

uint64_t SDUnlockStateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockKeyDeviceLockedReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000E2CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E2D1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerImport];
}

void sub_1000E2E04(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000E2E20(uint64_t a1, void *a2, uint64_t a3)
{
  char v4 = (id *)(a1 + 32);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  unint64_t v6 = [WeakRetained bundleProxy];
  unint64_t v7 = [v6 bundleIdentifier];
  [WeakRetained openURLs:v5 bundleIdentifier:v7];

  char v8 = [WeakRetained completionHandler];
  v8[2](v8, a3, 0, 1);
}

void sub_1000E2FB4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setOpenAppURLs:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000E3374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_1000E33A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E33B8(uint64_t a1)
{
}

void sub_1000E33C0(uint64_t a1)
{
  Class v2 = off_100967348();
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1000E34A0;
  v8[3] = &unk_1008CD0D0;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 56);
  id v6 = (id)v7;
  long long v10 = v7;
  [(objc_class *)v2 importRecordingWithSourceAudioURL:v9 name:v4 date:v5 completionHandler:v8];
}

void sub_1000E34A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = airdrop_log();
  char v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000E3AB8(a1, (uint64_t)v6, v8);
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Finished importing voice memo data from %@", buf, 0xCu);
    }

    long long v10 = +[NSString stringWithFormat:@"voicememos://%@", v5];
    char v8 = +[NSURL URLWithString:v10];

    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v8];
  }

  uint64_t v11 = +[NSFileManager defaultManager];
  uint64_t v12 = *(void *)(a1 + 32);
  id v16 = 0;
  unsigned __int8 v13 = [v11 removeItemAtURL:v12 error:&v16];
  id v14 = v16;

  if ((v13 & 1) == 0)
  {
    unint64_t v15 = airdrop_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1000E3A04((id *)(a1 + 32), (uint64_t)v14, v15);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000E3674(uint64_t a1)
{
  Class v2 = *(NSObject **)(a1 + 32);
  dispatch_time_t v3 = dispatch_time(0, 900000000000);
  if (dispatch_group_wait(v2, v3))
  {
    uint64_t v4 = airdrop_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000E3C00(v4);
    }
LABEL_7:

    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  id v5 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) count];
  if (v5 != [*(id *)(a1 + 40) count])
  {
    uint64_t v4 = airdrop_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000E3B44(a1 + 56, (id *)(a1 + 40), v4);
    }
    goto LABEL_7;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000E37FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(SDAirDropHandlerImportResult);
  [(SDAirDropHandlerImportResult *)v4 setImportedFiles:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class sub_1000E3968()
{
  if (qword_10097FEF8 != -1) {
    dispatch_once(&qword_10097FEF8, &stru_1008CD168);
  }
  Class result = objc_getClass("RCSavedRecordingsModel");
  qword_10097FEF0 = (uint64_t)result;
  off_100967348 = (uint64_t (*)())sub_1000E39CC;
  return result;
}

id sub_1000E39CC()
{
  return (id)qword_10097FEF0;
}

void sub_1000E39D8(id a1)
{
  qword_10097FF00 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos", 2);
}

void sub_1000E3A04(id *a1, uint64_t a2, NSObject *a3)
{
  id v5 = [*a1 path];
  int v6 = 138412546;
  long long v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to remove item at %@: %@", (uint8_t *)&v6, 0x16u);
}

void sub_1000E3AB8(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to import voice memo data from %@ with error %@", (uint8_t *)&v4, 0x16u);
}

void sub_1000E3B44(uint64_t a1, id *a2, NSObject *a3)
{
  unsigned int v5 = [*(id *)(*(void *)(*(void *)a1 + 8) + 40) count];
  unsigned int v6 = [*a2 count];
  v7[0] = 67109376;
  v7[1] = v5;
  __int16 v8 = 1024;
  unsigned int v9 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Only %d/%d voice memos were imported successfully", (uint8_t *)v7, 0xEu);
}

void sub_1000E3C00(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Timed out waiting for all import operations to finish", v1, 2u);
}

void sub_1000E41A8(id a1)
{
  os_log_t v1 = objc_alloc_init(SDProximityPairingAgent);
  Class v2 = (void *)qword_10097FF10;
  qword_10097FF10 = (uint64_t)v1;
}

id sub_1000E49D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

void sub_1000E4B1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000E4B3C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _bufferedBleDeviceFound:v3];
}

id sub_1000E4C0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1000E4E04(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  }
  id result = [v2 addObject:*(void *)(a1 + 40)];
  if (dword_1009673C0 <= 30)
  {
    if (dword_1009673C0 != -1 || (id result = (id)_LogCategory_Initialize(), result))
    {
      [*(id *)(*(void *)(a1 + 32) + 24) count];
      return (id)LogPrintF();
    }
  }
  return result;
}

id sub_1000E4F5C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
  if (dword_1009673C0 <= 30)
  {
    if (dword_1009673C0 != -1 || (id result = (id)_LogCategory_Initialize(), result))
    {
      [*(id *)(*(void *)(a1 + 32) + 24) count];
      return (id)LogPrintF();
    }
  }
  return result;
}

id sub_1000E5EC4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _accountSettingsChanged];
}

id sub_1000E5ECC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _accountSettingsChanged];
}

id sub_1000E5ED4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _uiLockStatusChanged];
}

id sub_1000E5EDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_1000E5EE4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceFound:a2];
}

id sub_1000E5EF0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceLost:a2];
}

void sub_1000E5EFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v10 = v5;
  if (dword_1009673C0 <= 9)
  {
    if (dword_1009673C0 != -1 || (int v6 = _LogCategory_Initialize(), v5 = v10, v6))
    {
      uint64_t v8 = a3;
      unsigned int v9 = &unk_10076E0E8;
      id v7 = v5;
      LogPrintF();
      id v5 = v10;
    }
  }
  [*(id *)(a1 + 32) _deviceChanged:v5, v7, v8, v9];
  [*(id *)(a1 + 32) _powerSourcesUpdateForDevice:v10 changes:a3];
}

void sub_1000E5FC8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1009673C0 <= 60)
    {
      int v6 = v2;
      if (dword_1009673C0 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        id v3 = v6;
      }
    }
  }
  else if (dword_1009673C0 <= 30)
  {
    int v6 = 0;
    if (dword_1009673C0 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    id v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_1000E755C(void *a1)
{
  id v1 = a1;
  if (([v1 isEqual:@"AirPods1,1"] & 1) != 0
    || ([v1 isEqual:@"AirPods1,3"] & 1) != 0
    || ([v1 isEqual:@"AirPodsPro1,1"] & 1) != 0
    || ([v1 isEqual:@"PowerbeatsPro1,1"] & 1) != 0
    || ([v1 isEqual:@"Device1,8202"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    id v4 = [objc_alloc((Class)SFHeadphoneProduct) initWithBluetoothModel:v1];
    uint64_t v2 = (uint64_t)[v4 showsStatus];
  }
  return v2;
}

uint64_t sub_1000E761C(void *a1)
{
  id v1 = a1;
  if ([v1 isEqual:@"Powerbeats4,1"]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = (uint64_t)[v1 isEqual:@"BeatsSoloPro1,1"];
  }

  return v2;
}

id sub_1000E7DC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fastScanStop:"timer" reset:0];
}

id sub_1000E82E0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 120) removeObject:*(void *)(a1 + 40)];
}

id sub_1000E98D4()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_10097FF18;
  uint64_t v7 = qword_10097FF18;
  if (!qword_10097FF18)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1000F0578;
    void v3[3] = &unk_1008CA038;
    v3[4] = &v4;
    sub_1000F0578((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000E99A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000EB968(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v1 = *(void *)(result + 40);
  if (v2 == *(void *)(v1 + 104))
  {
    if (dword_1009673C0 > 30) {
      return result;
    }
    if (dword_1009673C0 == -1)
    {
      id result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }
  else if (v2 == *(void *)(v1 + 136))
  {
    if (dword_1009673C0 > 30) {
      return result;
    }
    if (dword_1009673C0 == -1)
    {
      id result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }
  else
  {
    if (dword_1009673C0 > 50) {
      return result;
    }
    if (dword_1009673C0 == -1)
    {
      id result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }

  return LogPrintF();
}

uint64_t sub_1000EBB24(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v1 = *(void *)(result + 40);
  if (v2 == *(void *)(v1 + 104))
  {
    if (dword_1009673C0 > 30) {
      return result;
    }
    if (dword_1009673C0 == -1)
    {
      id result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }
  else if (v2 == *(void *)(v1 + 136))
  {
    if (dword_1009673C0 > 30) {
      return result;
    }
    if (dword_1009673C0 == -1)
    {
      id result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }
  else
  {
    if (dword_1009673C0 > 50) {
      return result;
    }
    if (dword_1009673C0 == -1)
    {
      id result = _LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
  }

  return LogPrintF();
}

void sub_1000EBD0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v3 == *(void *)(v2 + 104))
  {
    if (dword_1009673C0 <= 30 && (dword_1009673C0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = *(void **)(v4 + 104);
    *(void *)(v4 + 104) = 0;
  }
  else
  {
    if (v3 != *(void *)(v2 + 136))
    {
      if (dword_1009673C0 <= 30 && (dword_1009673C0 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      return;
    }
    if (dword_1009673C0 <= 30 && (dword_1009673C0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v6 = *(void *)(a1 + 40);
    int v5 = *(void **)(v6 + 136);
    *(void *)(v6 + 136) = 0;
  }
}

void sub_1000EBF5C(uint64_t a1)
{
  memset(v12, 0, sizeof(v12));
  id v2 = *(id *)(*(void *)(a1 + 32) + 176);
  if ([v2 countByEnumeratingWithState:v12 objects:v15 count:16])
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 176) objectForKeyedSubscript:**((void **)&v12[0] + 1)];

    if (v3)
    {
      if (dword_1009673C0 <= 50 && (dword_1009673C0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v11 = v3;
        LogPrintF();
      }
      [*(id *)(a1 + 32) _startPairingUI:v3 autoStart:1 repair:0 v11];
      uint64_t v10 = *(void *)(a1 + 40);
      if (v10) {
        (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
      }
      goto LABEL_19;
    }
  }
  else
  {
  }
  if (dword_1009673C0 <= 90 && (dword_1009673C0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    uint64_t v5 = +[NSString stringWithUTF8String:DebugGetErrorString()];
    uint64_t v6 = (void *)v5;
    CFStringRef v7 = @"?";
    if (v5) {
      CFStringRef v7 = (const __CFString *)v5;
    }
    CFStringRef v14 = v7;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    unsigned int v9 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:-6727 userInfo:v8];
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v9);
  }
  uint64_t v3 = 0;
LABEL_19:
}

void sub_1000EC230(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)v2[19];
  if (!v3) {
    return;
  }
  if (dword_1009673C0 <= 40)
  {
    if (dword_1009673C0 == -1)
    {
      int v6 = _LogCategory_Initialize();
      id v2 = *(void **)(a1 + 32);
      if (!v6) {
        goto LABEL_8;
      }
      uint64_t v3 = (void *)v2[19];
    }
    unsigned int v4 = [v3 screenOn];
    uint64_t v5 = "off";
    if (v4) {
      uint64_t v5 = "on";
    }
    id v16 = v5;
    LogPrintF();
    id v2 = *(void **)(a1 + 32);
  }
LABEL_8:
  [v2 _update:v16];
  uint64_t v7 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v7 + 56)) {
    return;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  if (!v8) {
    return;
  }
  if (dword_1009673C0 > 30) {
    goto LABEL_14;
  }
  if (dword_1009673C0 == -1)
  {
    int v9 = _LogCategory_Initialize();
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v9) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)(v7 + 48);
  }
  uint64_t v17 = v8;
  LogPrintF();
  uint64_t v7 = *(void *)(a1 + 32);
LABEL_14:
  uint64_t v10 = [*(id *)(v7 + 48) allValues:v17];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        unint64_t v15 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (dword_1009673C0 <= 10 && (dword_1009673C0 != -1 || _LogCategory_Initialize()))
        {
          uint64_t v18 = [v15 bleDevice];
          LogPrintF();
        }
        [*(id *)(a1 + 32) _deviceFound:v15 andIsABufferedDevice:1, v18];
      }
      id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }
  [*(id *)(a1 + 32) ensureTimerStartedForBufferedDevicesPurge];
}

void *sub_1000EDFF8(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  uint64_t v3 = (void *)result[20];
  if (!v3) {
    return result;
  }
  if (dword_1009673C0 <= 40)
  {
    if (dword_1009673C0 == -1)
    {
      int v4 = _LogCategory_Initialize();
      id result = *(void **)(a1 + 32);
      if (!v4) {
        goto LABEL_7;
      }
      uint64_t v3 = (void *)result[20];
    }
    [v3 screenLocked];
    LogPrintF();
    id result = *(void **)(a1 + 32);
  }
LABEL_7:

  return [result _update];
}

id sub_1000EE2E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startPairingUI:*(void *)(a1 + 40) autoStart:0 repair:*(unsigned __int8 *)(a1 + 48)];
}

id sub_1000EE4A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startStatusUI:*(void *)(a1 + 40)];
}

uint64_t sub_1000EF964(uint64_t a1)
{
  BOOL v1 = (a1 - 8194) > 0xD || ((1 << (a1 - 2)) & 0x3001) == 0;
  if (!v1 || a1 == 0x10000) {
    return 1;
  }
  id v3 = [objc_alloc((Class)SFHeadphoneProduct) initWithProductID:a1];
  id v4 = [v3 isAirPods];

  return (uint64_t)v4;
}

void sub_1000EFD64(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v10 = (id)v2;
  if (v2)
  {
    if ([*(id *)(a1 + 32) shouldNotTriggerBecauseDeviceInformationIsTooOld:v2])
    {
      if (dword_1009673C0 <= 50 && (dword_1009673C0 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
    else
    {
      if (!_os_feature_enabled_impl()) {
        goto LABEL_23;
      }
      id v4 = [v10 model];
      if (([v4 isEqual:@"AirPods1,1"] & 1) != 0
        || ([v4 isEqual:@"AirPods1,3"] & 1) != 0
        || [v4 isEqual:@"AirPodsPro1,1"])
      {
      }
      else
      {
        id v6 = [objc_alloc((Class)SFHeadphoneProduct) initWithBluetoothModel:v4];
        unsigned int v7 = [v6 isAirPods];

        if (!v7) {
          goto LABEL_23;
        }
      }
      if (dword_1009673C0 <= 50 && (dword_1009673C0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        LogPrintF();
      }
      uint64_t v5 = [v10 bleDevice:v8];
      [v5 setTriggered:1];

      [*(id *)(a1 + 32) _deviceChanged:v10];
    }
  }
  else if (dword_1009673C0 <= 50 && (dword_1009673C0 != -1 || _LogCategory_Initialize()))
  {
    id v3 = [*(id *)(a1 + 40) description];
    [v3 UTF8String];
    int v9 = [*(id *)(*(void *)(a1 + 32) + 40) description];
    LogPrintF();
  }
LABEL_23:
}

void sub_1000F00F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F0114(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained removeOldBufferedSamplesFromCache];
  [WeakRetained setBufferedDevicesPurgeBlock:0];
}

Class sub_1000F0578(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10097FF20)
  {
    v3[1] = _NSConcreteStackBlock;
    void v3[2] = (void *)3221225472;
    void v3[3] = sub_1000F06A4;
    v3[4] = &unk_1008CB370;
    void v3[5] = v3;
    long long v4 = off_1008CD1F0;
    uint64_t v5 = 0;
    qword_10097FF20 = _sl_dlopen();
  }
  if (!qword_10097FF20) {
    sub_1000F0718(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("HPSSpatialProfileManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000F0798();
  }
  qword_10097FF18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000F06A4()
{
  uint64_t result = _sl_dlopen();
  qword_10097FF20 = result;
  return result;
}

void sub_1000F0718(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  id v3 = +[NSString stringWithUTF8String:"void *HeadphoneConfigsLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SDProximityPairingAgent.m" lineNumber:62 description:@"%s", *a1];

  __break(1u);
}

void sub_1000F0798()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  BOOL v1 = +[NSString stringWithUTF8String:"Class getHPSSpatialProfileManagerClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDProximityPairingAgent.m" lineNumber:63 description:@"Unable to find class %s" arguments:@"HPSSpatialProfileManager"];

  __break(1u);
}

void sub_1000F0E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F0E54(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  if (([v9 isActive] & 1) == 0)
  {
    uint64_t v8 = +[NSAssertionHandler currentHandler];
    [v8 handleFailureInMethod:a1[7], a1[4], @"UISDActivityItemData.m", 124, @"Security context is not active: %@", v9 object file lineNumber description];
  }
  id v6 = [v9 accessibleURLs];
  unsigned int v7 = [v6 containsObject:a1[5]];

  if (v7)
  {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    *a4 = 1;
  }
}

id sub_1000F1484()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_10097FF28;
  uint64_t v7 = qword_10097FF28;
  if (!qword_10097FF28)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1000F16F8;
    void v3[3] = &unk_1008CA038;
    v3[4] = &v4;
    sub_1000F16F8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000F1550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000F16F8(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_10097FF30)
  {
    v3[1] = _NSConcreteStackBlock;
    void v3[2] = (void *)3221225472;
    void v3[3] = sub_1000F1824;
    v3[4] = &unk_1008CB370;
    void v3[5] = v3;
    long long v4 = off_1008CD278;
    uint64_t v5 = 0;
    qword_10097FF30 = _sl_dlopen();
  }
  if (!qword_10097FF30) {
    sub_1000F1898(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("PKNearbyPeerPaymentReceiverCoordinator");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000F1918();
  }
  qword_10097FF28 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000F1824()
{
  uint64_t result = _sl_dlopen();
  qword_10097FF30 = result;
  return result;
}

void sub_1000F1898(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  id v3 = +[NSString stringWithUTF8String:"void *PassKitCoreLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SDNearbyPeerPaymentReceiverCoordinator.m" lineNumber:14 description:@"%s", *a1];

  __break(1u);
}

void sub_1000F1918()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  id v1 = +[NSString stringWithUTF8String:"Class getPKNearbyPeerPaymentReceiverCoordinatorClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDNearbyPeerPaymentReceiverCoordinator.m" lineNumber:15 description:@"Unable to find class %s", "PKNearbyPeerPaymentReceiverCoordinator"];

  __break(1u);
}

void sub_1000F2B9C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "UIAirDropNode:%@ is restricted.", (uint8_t *)&v2, 0xCu);
}

void sub_1000F2C14(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 suggestionNode];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to load icon for suggestionNode:%@", (uint8_t *)&v4, 0xCu);
}

id sub_1000F3334(uint64_t a1)
{
  return [*(id *)(a1 + 32) mount];
}

void sub_1000F3450(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDNetworkResolver: bonjourCallBack returned %d", (uint8_t *)v2, 8u);
}

void sub_1000F34C8(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Attempted to resolve a server with unknown protocol", v1, 2u);
}

void sub_1000F350C(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Attempted to resolve a server with no URL", v1, 2u);
}

void sub_1000F4088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F40B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerImport];
}

void sub_1000F4198(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000F41B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v3)
  {
    id v8 = v3;
    uint64_t v5 = +[NSArray arrayWithObjects:&v8 count:1];
    id v6 = [WeakRetained openURLs:v5];
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = [WeakRetained completionHandler];
  ((void (**)(void, id, void, uint64_t))v7)[2](v7, v6, 0, 1);
}

void sub_1000F4654(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = a2;
    int v4 = airdrop_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F4A0C(v3, v4);
    }

    uint64_t v5 = 0;
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) lastObject];
    uint64_t v5 = [v6 passURL];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000F4784(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = objc_alloc_init(SDAirDropHandlerImportResult);
  [(SDAirDropHandlerImportResult *)v4 setImportedFiles:&__NSArray0__struct];
  [(SDAirDropHandlerImportResult *)v4 setOpenAppURL:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class sub_1000F4820()
{
  if (qword_10097FF40 != -1) {
    dispatch_once(&qword_10097FF40, &stru_1008CD308);
  }
  Class result = objc_getClass("PKPassLibrary");
  qword_10097FF38 = (uint64_t)result;
  off_100967550 = (uint64_t (*)())sub_1000F4884;
  return result;
}

id sub_1000F4884()
{
  return (id)qword_10097FF38;
}

void sub_1000F4890(id a1)
{
  qword_10097FF48 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore", 2);
}

Class sub_1000F48BC()
{
  if (qword_10097FF58 != -1) {
    dispatch_once(&qword_10097FF58, &stru_1008CD328);
  }
  Class result = objc_getClass("PKAddPassesViewController");
  qword_10097FF50 = (uint64_t)result;
  off_100967558 = (uint64_t (*)())sub_1000F4920;
  return result;
}

id sub_1000F4920()
{
  return (id)qword_10097FF50;
}

void sub_1000F492C(id a1)
{
  qword_10097FF60 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI", 2);
}

Class sub_1000F4958()
{
  if (qword_10097FF40 != -1) {
    dispatch_once(&qword_10097FF40, &stru_1008CD308);
  }
  Class result = objc_getClass("PKPass");
  qword_10097FF68 = (uint64_t)result;
  off_100967560 = (uint64_t (*)())sub_1000F49BC;
  return result;
}

id sub_1000F49BC()
{
  return (id)qword_10097FF68;
}

void sub_1000F49C8(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Wallet not available. Abort", v1, 2u);
}

void sub_1000F4A0C(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Wallet pass add failed with status: %d", (uint8_t *)v2, 8u);
}

uint64_t SDUnlockSetupCreateRecordReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v29 = 40;
        goto LABEL_56;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v29 = 24;
        goto LABEL_56;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        break;
      case 4u:
        uint64_t v26 = PBReaderReadData();
        uint64_t v27 = 32;
        goto LABEL_43;
      case 5u:
        uint64_t v26 = PBReaderReadString();
        uint64_t v27 = 16;
LABEL_43:
        char v28 = *(void **)(a1 + v27);
        *(void *)(a1 + v27) = v26;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v14 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_53;
      }
      v22 += 7;
      BOOL v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_55;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_55:
    uint64_t v29 = 8;
LABEL_56:
    *(_DWORD *)(a1 + v29) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000F6304(uint64_t a1)
{
  uint64_t v2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:*(void *)(a1 + 40) userInfo:0];
  uint64_t v5 = kSFOperationErrorKey;
  unint64_t v6 = v2;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
  [WeakRetained networkOperation:*(void *)(a1 + 32) event:10 withResults:v3];
}

void sub_1000F6F44(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDNetworkOperation: resume HTTPServerConnection is NULL", v1, 2u);
}

void sub_1000F6F88(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDNetworkOperation: resume HTTPServerConnection is invalid", v1, 2u);
}

void sub_1000F7298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F72B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000F72C4(uint64_t a1)
{
}

void sub_1000F72CC(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if ([*(id *)(a1 + 32) isEqualToString:a3]) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
}

void sub_1000F7630(id a1)
{
  id v1 = objc_alloc_init(SDWorkgroupBrowser);
  uint64_t v2 = (void *)qword_10097FF78;
  qword_10097FF78 = (uint64_t)v1;
}

void sub_1000F7ABC(id a1)
{
  id v1 = objc_alloc_init(SDAppleIDDatabaseManager);
  uint64_t v2 = (void *)qword_10097FF88;
  qword_10097FF88 = (uint64_t)v1;
}

void sub_1000F85BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F8650(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F87C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F8EE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9048(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F91D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9370(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000F9508(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9590(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F98EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9AD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9EA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA1F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA2EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA3F8(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, *(CFNotificationName *)(a1 + 32), 0, 0, 1u);
  id v3 = +[NSNotificationCenter defaultCenter];
  [v3 postNotificationName:*(void *)(a1 + 32) object:0];
}

void sub_1000FA56C(id a1)
{
  id v1 = objc_alloc_init(SDXPCSession);
  uint64_t v2 = (void *)qword_10097FF90;
  qword_10097FF90 = (uint64_t)v1;
}

void sub_1000FA7F8(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "SDXPCSession:  Starting xpc session....", v1, 2u);
}

void sub_1000FA890(id a1)
{
  id v1 = objc_alloc_init(SDRemoteInteractionAgent);
  uint64_t v2 = (void *)qword_10097FFA8;
  qword_10097FFA8 = (uint64_t)v1;
}

id sub_1000FABD4(uint64_t a1)
{
  if (dword_100967A08 <= 30 && (dword_100967A08 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2[21])
  {
    uint64_t v3 = objc_opt_new();
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 168);
    *(void *)(v4 + 16_Block_object_dispose(&a9, 8) = v3;

    [*(id *)(*(void *)(a1 + 32) + 168) setDispatchQueue:*(void *)(*(void *)(a1 + 32) + 184)];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000FAD34;
    v10[3] = &unk_1008CA4B8;
    uint64_t v11 = *(void *)(a1 + 32);
    [*(id *)(v11 + 168) setScreenLockedChangedHandler:v10];
    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = *(void **)(v6 + 168);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1000FAD3C;
    v9[3] = &unk_1008CA4B8;
    v9[4] = v6;
    [v7 activateWithCompletion:v9];
    uint64_t v2 = *(void **)(a1 + 32);
  }
  return [v2 prefsChanged];
}

id sub_1000FAD34(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clientDeviceLockStatusChanged];
}

id sub_1000FAD3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clientDeviceLockStatusChanged];
}

id sub_1000FADB8(uint64_t a1)
{
  if (dword_100967A08 <= 30 && (dword_100967A08 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(*(void *)(a1 + 32) + 168) invalidate];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 168);
  *(void *)(v2 + 16_Block_object_dispose(&a9, 8) = 0;

  [*(id *)(a1 + 32) _commonEnsureStopped];
  [*(id *)(a1 + 32) _clientEnsureStopped];
  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 _serverEnsureStopped];
}

uint64_t sub_1000FB1D0(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100967A08 <= 40)
  {
    if (dword_100967A08 != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  *(unsigned char *)(*(void *)(v1 + 32) + 176) = *(unsigned char *)(v1 + 40);
  return result;
}

id sub_1000FB644(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_1000FB724(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_1000FB928(id a1, SFSession *a2, unsigned int a3, NSDictionary *a4)
{
  uint64_t v4 = a4;
  CFDictionaryGetTypeID();
  CFDictionaryGetTypedValue();
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    uint64_t v5 = +[SDSharedRemoteTextInputClient sharedClient];
    [v5 handleTextInputData:v6];
  }
}

void sub_1000FB9B8(id a1, SFSession *a2, unsigned int a3, NSDictionary *a4, id a5)
{
  if (a5) {
    (*((void (**)(id, void, void, void))a5 + 2))(a5, 0, 0, 0);
  }
}

id sub_1000FB9DC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _legacy_serverHandleEvent:a2];
}

id sub_1000FB9E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _legacy_serverHandleRequest:a2];
}

void sub_1000FB9F4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_100967A08 <= 30)
    {
      id v6 = v2;
      if (dword_100967A08 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        uint64_t v3 = v6;
      }
    }
  }
  else if (dword_100967A08 <= 30)
  {
    id v6 = 0;
    if (dword_100967A08 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    uint64_t v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

id sub_1000FC8C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) advertisingTimerFired];
}

void sub_1000FCACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000FCAE4(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1000FCB10(uint64_t a1)
{
}

void sub_1000FCB18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v6 = v3;
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  int v5 = [*(id *)(a1 + 32) peerDevice];
  if (v5)
  {
    [*(id *)(a1 + 40) clientNotificationUpdateForDevice:v5 rtiData:v6];
  }
  else if (dword_100967A08 <= 60 && (dword_100967A08 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_1000FD1AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100967A08 <= 10)
  {
    if (dword_100967A08 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
    {
      int v5 = [v3 bleDevice];
      LogPrintF();

      id v3 = v6;
    }
  }
  [*(id *)(a1 + 32) _clientDeviceFound:v3, v5];
}

void sub_1000FD26C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100967A08 <= 10)
  {
    if (dword_100967A08 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
    {
      int v5 = [v3 bleDevice];
      LogPrintF();

      id v3 = v6;
    }
  }
  [*(id *)(a1 + 32) _clientDeviceLost:v3, v5];
}

void sub_1000FD32C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v10 = v5;
  if (dword_100967A08 <= 10)
  {
    if (dword_100967A08 != -1 || (int v6 = _LogCategory_Initialize(), v5 = v10, v6))
    {
      [v5 bleDevice];
      uint64_t v8 = a3;
      v7 = BOOL v9 = &unk_10076E203;
      LogPrintF();

      id v5 = v10;
    }
  }
  [*(id *)(a1 + 32) _clientDeviceFound:v5, v7, v8, v9];
}

void sub_1000FD404(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100967A08 <= 30)
    {
      int v6 = v2;
      if (dword_100967A08 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        id v3 = v6;
      }
    }
  }
  else if (dword_100967A08 <= 30)
  {
    int v6 = 0;
    if (dword_100967A08 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    id v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

void sub_1000FD4E4(id a1)
{
  if (dword_100967A08 <= 90 && (dword_100967A08 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_1000FD558(id a1)
{
  if (dword_100967A08 <= 30 && (dword_100967A08 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

id sub_1000FD5CC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceFound:a2];
}

id sub_1000FD5D8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceLost:a2];
}

id sub_1000FD5E4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceChanged:a2];
}

void sub_1000FD5F0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100967A08 <= 90)
    {
      int v6 = v2;
      if (dword_100967A08 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v6, v4))
      {
LABEL_7:
        LogPrintF();
        id v3 = v6;
      }
    }
  }
  else if (dword_100967A08 <= 30)
  {
    int v6 = 0;
    if (dword_100967A08 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    id v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
}

void *sub_1000FDEC0(uint64_t a1)
{
  id result = *(void **)(*(void *)(a1 + 32) + 168);
  if (result && dword_100967A08 <= 50)
  {
    if (dword_100967A08 != -1)
    {
LABEL_4:
      [result screenLocked];
      return (void *)LogPrintF();
    }
    id result = (void *)_LogCategory_Initialize();
    if (result)
    {
      id result = *(void **)(*(void *)(a1 + 32) + 168);
      goto LABEL_4;
    }
  }
  return result;
}

id sub_1000FEDCC(uint64_t a1)
{
  if (dword_100967A08 <= 50 && (dword_100967A08 != -1 || _LogCategory_Initialize()))
  {
    int v5 = [*(id *)(a1 + 32) bleDevice];
    LogPrintF();
  }
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  [*(id *)(*(void *)(a1 + 48) + 112) removeObjectForKey:*(void *)(a1 + 56)];
  [*(id *)(*(void *)(a1 + 48) + 80) removeObjectForKey:*(void *)(a1 + 56)];
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);

  return [v2 clientNotificationRemoveForDevice:v3];
}

Class sub_1000FF678()
{
  if (qword_10097FFB8 != -1) {
    dispatch_once(&qword_10097FFB8, &stru_1008CD568);
  }
  Class result = objc_getClass("ACAccountStore");
  qword_10097FFB0 = (uint64_t)result;
  off_100967A78[0] = (uint64_t (*)())sub_1000FF6DC;
  return result;
}

id sub_1000FF6DC()
{
  return (id)qword_10097FFB0;
}

void sub_1000FF6E8(id a1)
{
  qword_10097FFC0 = (uint64_t)dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
}

Class sub_1000FF714()
{
  if (qword_10097FFD0 != -1) {
    dispatch_once(&qword_10097FFD0, &stru_1008CD588);
  }
  Class result = objc_getClass("TVRViewServiceConfigContext");
  qword_10097FFC8 = (uint64_t)result;
  off_100967A80[0] = (uint64_t (*)())sub_1000FF778;
  return result;
}

id sub_1000FF778()
{
  return (id)qword_10097FFC8;
}

void sub_1000FF784(id a1)
{
  qword_10097FFD8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI", 2);
}

uint64_t sub_1000FF7B0()
{
  if (qword_10097FFD0 != -1) {
    dispatch_once(&qword_10097FFD0, &stru_1008CD588);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_10097FFD8, "TVRViewServiceDeviceIdentifierTypeRapport");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10097FFE0 = result;
  }
  else
  {
    uint64_t result = qword_10097FFE0;
  }
  off_100967A88[0] = sub_1000FF830;
  return result;
}

uint64_t sub_1000FF830()
{
  return qword_10097FFE0;
}

Class sub_1000FF83C()
{
  if (qword_10097FFD0 != -1) {
    dispatch_once(&qword_10097FFD0, &stru_1008CD588);
  }
  Class result = objc_getClass("TVRViewServiceManager");
  qword_10097FFE8 = (uint64_t)result;
  off_100967A90 = (uint64_t (*)())sub_1000FF8A0;
  return result;
}

id sub_1000FF8A0()
{
  return (id)qword_10097FFE8;
}

void sub_1000FF900(id a1)
{
  uint64_t v1 = objc_alloc_init(SDSharedRemoteTextInputClient);
  uint64_t v2 = (void *)qword_10097FFF8;
  qword_10097FFF8 = (uint64_t)v1;
}

id sub_1000FFB34(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _rtiHandleEventWithData:a2];
}

void sub_1000FFB40(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _updatedSessionInfoWithAppIcon:];
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) _rtiHandleInputDidBeginWithFlags:a2 sessionInfo:v4];
}

id sub_1000FFBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _rtiHandleInputDidEndWithFlags:a2 sessionInfo:a3];
}

id sub_1000FFC24(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + _Block_object_dispose(&a9, 8) = 1;
  return _[*(id *)(a1 + 32) _ensureStarted];
}

void sub_100100018(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 handleEventWithData:*(void *)(a1 + 32)];
  }
}

void sub_10010017C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 handleInputDidBeginWithFlags:*(void *)(a1 + 40) sessionInfo:*(void *)(a1 + 32)];
  }
}

void sub_1001002E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 handleInputDidEndWithFlags:*(void *)(a1 + 40) sessionInfo:*(void *)(a1 + 32)];
  }
}

id sub_100100604(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0;
  }
  if (dword_100967A98 <= 30 && (dword_100967A98 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v6 = *(void **)(a1 + 32);

  return _[v6 _logEvent:5 stopClock:1];
}

void sub_100100CA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
  [WeakRetained airDropInformation:*(void *)(a1 + 32) didChange:*(void *)(*(void *)(a1 + 32) + 24)];
}

void sub_100101130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100101158(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handlePolicyChange];
}

void sub_10010120C(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v2 = [v1[4] allValues];
  [v1 _retrievePoliciesForBundleIdentifiers:v2];
}

void sub_1001012D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 8);
  *(void *)(v2 + _Block_object_dispose(&a9, 8) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0;
}

void sub_100101428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100101440(void *a1)
{
  id v2 = [*(id *)(a1[4] + 40) objectForKey:a1[5]];
  *(void *)(*(void *)(a1[6] + 8) + 24) = [v2 integerValue];
}

void sub_100101538(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v6 = *(id *)(*(void *)(a1 + 32) + 24);
  id v3 = v2;
  if (v6 == v3)
  {
  }
  else
  {
    if ((v6 == 0) != (v3 != 0))
    {
      unsigned __int8 v4 = [v6 isEqual:v3];

      if (v4) {
        return;
      }
    }
    else
    {
    }
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 40));
    [*(id *)(a1 + 32) _updateBundleIdentifierMappings];
    int v5 = *(void **)(a1 + 32);
    _[v5 _retrieveMissingPolicies];
  }
}

void sub_1001016D0(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        BOOL v9 = *(void **)(*(void *)(a1 + 40) + 32);
        id v10 = [v8 activityType];
        uint64_t v11 = [v9 objectForKeyedSubscript:v10];

        if (!v11)
        {
          uint64_t v11 = [*(id *)(a1 + 40) _bundleIDForActivity:v8];
          if (!v11) {
            continue;
          }
        }
        [v2 addObject:v11];
        char v12 = *(void **)(*(void *)(a1 + 40) + 32);
        unsigned int v13 = [v8 activityType];
        [v12 setObject:v11 forKeyedSubscript:v13];
      }
      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v5);
  }

  uint64_t v14 = *(void **)(*(void *)(a1 + 40) + 8);
  id v18 = 0;
  unint64_t v15 = [v14 requestPoliciesForBundleIdentifiers:v2 withError:&v18];
  id v16 = v18;
  if (v16)
  {
    uint64_t v17 = share_sheet_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1001024AC((uint64_t)v2);
    }
  }
  else
  {
    [*(id *)(a1 + 40) _handleUpdateForPoliciesByBundleIdentifier:v15];
  }
}

void sub_1001019C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001019E0(void *a1)
{
  id v2 = [*(id *)(a1[4] + 32) objectForKeyedSubscript:a1[5]];
  if (v2)
  {
    id v4 = v2;
    id v3 = [*(id *)(a1[4] + 40) objectForKey:v2];
    *(void *)(*(void *)(a1[6] + 8) + 24) = [v3 integerValue];

    id v2 = v4;
  }
}

void sub_100101F7C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKeyedSubscript:];
  if (!v4) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

void sub_10010211C(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v5 = [*(id *)(*(void *)(a1 + 32) + 32) allKeysForObject:a2];
  uint64_t v6 = [v5 firstObject];

  if (v6 && [v7 BOOLValue]) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_10010228C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1001022A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = share_sheet_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10010259C(a1);
    }
  }
  else
  {
    uint64_t v8 = *(NSObject **)(*(void *)(a1 + 40) + 16);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1001023B4;
    v9[3] = &unk_1008CA248;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    id v10 = v5;
    dispatch_sync(v8, v9);

    objc_destroyWeak(&v11);
  }
}

void sub_1001023B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleUpdateForPoliciesByBundleIdentifier:*(void *)(a1 + 32)];
}

void sub_1001024AC(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10010249C();
  sub_10007153C((void *)&_mh_execute_header, v1, v2, "Failed requesting policies for bundleIDs:%@ with error:%@", (void)v3, DWORD2(v3));
}

void sub_10010251C(uint64_t a1)
{
  int v2 = 138412546;
  uint64_t v3 = a1;
  sub_10010249C();
  _os_log_fault_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "unexpected slow path to retrieve extension bundle identifier for activity:%@ extension:%@", (uint8_t *)&v2, 0x16u);
}

void sub_10010259C(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 32);
  sub_10010249C();
  sub_10007153C((void *)&_mh_execute_header, v1, v2, "Failed requesting policies for bundleIDS:%@ with error:%@", (void)v3, DWORD2(v3));
}

void sub_100102664(id a1)
{
  uint64_t v1 = objc_alloc_init(SDServerBrowser);
  os_log_t v2 = (void *)qword_100980008;
  qword_100980008 = (uint64_t)v1;
}

id sub_100102968(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

id sub_100103464(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

id sub_100103714(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

id sub_100103728(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

id sub_100103B40(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

void sub_100104614(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "incrementTransfersInitiated: No AirDrop browsers are running", v1, 2u);
}

uint64_t sub_100104A98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100104AAC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) openURLs:a2];
}

uint64_t sub_100104AB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100105520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100105548(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained acceptActionTriggered];
}

void sub_1001056C8(uint64_t a1)
{
  [*(id *)(a1 + 32) setSelectedApplication:*(void *)(a1 + 40)];
  os_log_t v2 = *(void **)(a1 + 32);
  long long v3 = [v2 selectedApplication];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100105774;
  void v4[3] = &unk_1008CA0C0;
  void v4[4] = *(void *)(a1 + 32);
  [v2 performActionWithBundleProxy:v3 completionHandler:v4];
}

void sub_100105774(uint64_t a1, uint64_t a2)
{
  long long v3 = [*(id *)(a1 + 32) completionHandler];
  v3[2](v3, a2, 0, 1);
}

uint64_t sub_100105F88(uint64_t a1)
{
  os_log_t v2 = airdrop_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resource open operation completed for %@", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100106778(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) openURLs:a2];
}

void sub_100106784(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) completionHandler];
  v3[2](v3, a2, 0, 1);
}

void sub_100106E90(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_100106EE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained launchFilesToDefaultFolder];
}

void sub_100106F28(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained transfer];
  uint64_t v2 = [v1 completedURLs];

  [WeakRetained launchMoveToAppShareSheetForFiles:v2];
}

void sub_100106F98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained transfer];
  uint64_t v2 = [v1 completedURLs];

  [WeakRetained launchMoveToAppShareSheetForFiles:v2];
}

void sub_100107314(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = SFCompactStringFromCollection();
  int v4 = 138412290;
  int v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Generic handler found available applications %@", (uint8_t *)&v4, 0xCu);
}

void sub_1001073B0(void *a1)
{
  uint64_t v6 = [a1 transfer];
  sub_100107304();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0xCu);
}

void sub_100107440(uint64_t a1, void *a2)
{
  id v7 = [a2 transfer];
  sub_100107304();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x16u);
}

void sub_1001074EC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create Files launch URL", v2, v3, v4, v5, v6);
}

void sub_100107520()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No items to open with Files App", v2, v3, v4, v5, v6);
}

void sub_100107554()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not get Downloads folder", v2, v3, v4, v5, v6);
}

void sub_100107588(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot generate ready-for-open actions for bundle ID %@. Error when fetching bundle record: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100107610(void *a1)
{
  uint64_t v6 = [a1 selectedApplication];
  sub_100107304();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x20u);
}

uint64_t SDAuthenticationApprovePromptReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_46;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_48;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_48:
        uint64_t v30 = 36;
        goto LABEL_53;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_52:
        uint64_t v30 = 32;
LABEL_53:
        *(_DWORD *)(a1 + v30) = v14;
        continue;
      case 3u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 24;
        goto LABEL_37;
      case 4u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 8;
        goto LABEL_37;
      case 5u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 16;
LABEL_37:
        unint64_t v24 = *(void **)(a1 + v23);
        *(void *)(a1 + v23) = v22;

        continue;
      case 6u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v27 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0) {
        goto LABEL_55;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        uint64_t v27 = 0;
        goto LABEL_57;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_55:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v27 = 0;
    }
LABEL_57:
    *(unsigned char *)(a1 + 40) = v27 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAuthenticationPairingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        uint64_t v25 = 28;
        goto LABEL_45;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        break;
      case 3u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 16;
        goto LABEL_36;
      case 4u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 8;
LABEL_36:
        unint64_t v24 = *(void **)(a1 + v23);
        *(void *)(a1 + v23) = v22;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_42;
      }
      v18 += 7;
      BOOL v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_44:
    uint64_t v25 = 24;
LABEL_45:
    *(_DWORD *)(a1 + v25) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100109308(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

void sub_100109980(uint64_t a1)
{
  os_log_t v2 = +[AKURLBag sharedBag];
  os_log_type_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 48);
  switch(v4)
  {
    case 0:
      CFStringRef v5 = @"createCertificate";
      goto LABEL_9;
    case 1:
      CFStringRef v5 = @"fetchCertificate";
      goto LABEL_9;
    case 2:
      CFStringRef v5 = @"getMyInfo";
      goto LABEL_9;
    case 3:
      CFStringRef v5 = @"findPerson";
LABEL_9:
      unint64_t v6 = [v2 urlAtKey:v5];
      int v7 = 0;
      int v8 = 0;
      goto LABEL_12;
    default:
      if (dword_100967BC8 > 60) {
        goto LABEL_11;
      }
      if (dword_100967BC8 != -1) {
        goto LABEL_5;
      }
      if (_LogCategory_Initialize())
      {
        uint64_t v4 = *(void *)(a1 + 48);
LABEL_5:
        uint64_t v14 = v4;
        LogPrintF();
      }
LABEL_11:
      unint64_t v6 = 0;
      int v7 = 1;
      int v8 = 201239;
LABEL_12:
      if (dword_100967BC8 <= 30 && (dword_100967BC8 != -1 || _LogCategory_Initialize()))
      {
        unint64_t v15 = [v6 absoluteString];
        LogPrintF();
      }
      if (v6) {
        int v9 = 1;
      }
      else {
        int v9 = v7;
      }
      if (v9) {
        int v10 = v8;
      }
      else {
        int v10 = 201200;
      }
      id v11 = *(NSObject **)(*(void *)(a1 + 32) + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100109BF0;
      block[3] = &unk_1008CD7D0;
      id v12 = *(id *)(a1 + 40);
      id v17 = v6;
      id v18 = v12;
      int v19 = v10;
      id v13 = v6;
      dispatch_async(v11, block);

      return;
  }
}

uint64_t sub_100109BF0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), *(unsigned int *)(a1 + 48));
}

id sub_100109F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleURLIsAvailable:a2 error:a3 completion:*(void *)(a1 + 40)];
}

id sub_10010A18C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_10010A380(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(NSObject **)(v10 + 16);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10010A46C;
  v15[3] = &unk_1008CA770;
  v15[4] = v10;
  id v16 = v8;
  id v17 = v7;
  id v18 = v9;
  id v12 = v7;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, v15);
}

id sub_10010A46C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = NSErrorToOSStatus();

  return _[v1 _handleTaskResponse:v2 withData:v3 error:v4];
}

void sub_10010A584(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 16));
  if (a3) {
    goto LABEL_2;
  }
  if (!v5)
  {
    a3 = 4294960587;
LABEL_2:
    [*(id *)(a1 + 32) _callResponseHandlerWithInfo:0 error:a3];
    goto LABEL_5;
  }
  [*(id *)(a1 + 32) setUrlRequest:v5];
  [*(id *)(a1 + 32) _handleURLRequestIsAvailable];
LABEL_5:
}

void sub_10010CBE8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 16));
  if (*(unsigned char *)(*(void *)(a1 + 32) + 9))
  {
    uint64_t v11 = 4294960573;
LABEL_11:
    [*(id *)(a1 + 32) _callResponseHandlerWithInfo:0 error:v11, v12];
    goto LABEL_5;
  }
  if (a4)
  {
    uint64_t v11 = 201220;
    if (dword_100967BC8 <= 60 && (dword_100967BC8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v12 = a4;
      LogPrintF();
    }
    goto LABEL_11;
  }
  id v13 = 0;
  sub_1002302D4(v7, v8, &v13);
  id v9 = v13;
  if (v9)
  {
    uint64_t v10 = v9;
    [*(id *)(a1 + 32) setGsToken:v9];
    [*(id *)(a1 + 32) _handleGSTokenIsAvailable];
  }
LABEL_5:
}

void sub_10010CE7C(id a1)
{
  uint64_t v1 = objc_alloc_init(SDConnectionManager);
  uint64_t v2 = (void *)qword_100980010;
  qword_100980010 = (uint64_t)v1;
}

void sub_10010D19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010D1D4(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_10010E314();
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = [WeakRetained xpcConnection];
  [v4 invalidate];
}

void sub_10010D240(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_10010E348();
  }

  uint64_t v3 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained cleanUpConnections];

  id v5 = objc_loadWeakRetained(v3);
  [v5 setXpcConnection:0];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010D32C;
  block[3] = &unk_1008CA3B0;
  objc_copyWeak(&v7, v3);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v7);
}

void sub_10010D32C(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained delegate];
  id v3 = objc_loadWeakRetained(v1);
  [v2 connectionManagerDidInvalidate:v3];
}

void sub_10010D4DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 48);
  if (v3)
  {
    [v3 stop];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(&a9, 8) = 0;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v6 = *(id *)(v2 + 72);
  id v7 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v25;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v24 + 1) + 8 * (void)v10);
        uint64_t v12 = +[SDStreamManager sharedManager];
        [v12 closeStreamsForIdentifier:v11];

        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v8);
  }

  [*(id *)(*(void *)(a1 + 32) + 72) removeAllObjects];
  id v13 = [*(id *)(a1 + 32) unlockSessions];
  id v14 = [v13 copy];

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v15 = v14;
  id v16 = [v15 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v21;
    do
    {
      int v19 = 0;
      do
      {
        if (*(void *)v21 != v18) {
          objc_enumerationMutation(v15);
        }
        [*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) invalidate:v20];
        int v19 = (char *)v19 + 1;
      }
      while (v17 != v19);
      id v17 = [v15 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v17);
  }
}

void sub_10010DAC4(uint64_t a1)
{
  uint64_t v2 = +[NSUUID UUID];
  id v3 = [v2 UUIDString];

  uint64_t v4 = +[SDStreamManager sharedManager];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10010DBC4;
  v7[3] = &unk_1008CAC60;
  id v8 = *(id *)(a1 + 48);
  [v4 getContinuationStreamsForMessage:v5 bundleID:v6 usingID:v3 completionHandler:v7];

  [*(id *)(*(void *)(a1 + 40) + 72) addObject:v3];
}

void sub_10010DBC4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void (**)(uint64_t, id, uint64_t))(v4 + 16);
  id v6 = a2;
  v5(v4, v6, a3);
  [v6 closeFile];
}

id sub_10010DD08(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) addObject:*(void *)(a1 + 40)];
}

void sub_10010E00C(id a1)
{
  id v1 = +[SDStatusMonitor sharedMonitor];
  [v1 handleAppleAccountSignIn];
}

void sub_10010E09C(id a1)
{
  id v1 = +[SDStatusMonitor sharedMonitor];
  [v1 handleAppleAccountSignOut];
}

id sub_10010E17C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) removeObject:*(void *)(a1 + 40)];
}

void sub_10010E314()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDConnectionManager:  XPC connection interrupted", v2, v3, v4, v5, v6);
}

void sub_10010E348()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDConnectionManager:  XPC connection invalidated", v2, v3, v4, v5, v6);
}

void sub_10010E37C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create commpanion service, nil reply", v2, v3, v4, v5, v6);
}

void sub_10010E3B0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create commpanion service, nil client proxy", v2, v3, v4, v5, v6);
}

void sub_10010E3E4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create commpanion service, nil identifier", v2, v3, v4, v5, v6);
}

uint64_t SDUnlockSetupRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v30 = 28;
        goto LABEL_52;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v30 = 24;
LABEL_52:
        *(_DWORD *)(a1 + v30) = v14;
        continue;
      case 3u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 8;
        goto LABEL_36;
      case 4u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 16;
LABEL_36:
        long long v24 = *(void **)(a1 + v23);
        *(void *)(a1 + v23) = v22;

        continue;
      case 5u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v27 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0) {
        goto LABEL_54;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        uint64_t v27 = 0;
        goto LABEL_56;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v27 = 0;
    }
LABEL_56:
    *(unsigned char *)(a1 + 32) = v27 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10010F978(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(unsigned char *)(v1 + 8))
  {
    *(unsigned char *)(v1 + _Block_object_dispose(&a9, 8) = 1;
    *(_DWORD *)(*(void *)(result + 32) + 72) = 0;
    *(_DWORD *)(*(void *)(result + 32) + 40) = 0;
    *(void *)(*(void *)(result + 32) + 4_Block_object_dispose(&a9, 8) = 0;
    *(void *)(*(void *)(result + 32) + 32) = 0;
  }
  return result;
}

intptr_t sub_10010FCE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 24) && *(unsigned char *)(v2 + 8))
  {
    uLongf destLen = compressBound(*(void *)(a1 + 64));
    uint64_t v3 = (Bytef *)malloc_type_malloc(destLen, 0xAFE3A0A3uLL);
    double Current = CFAbsoluteTimeGetCurrent();
    compress(v3, &destLen, *(const Bytef **)(a1 + 72), *(void *)(a1 + 64));
    double v5 = CFAbsoluteTimeGetCurrent() - Current;
    uLongf v6 = destLen;
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    uLongf v6 = *(void *)(a1 + 64);
    uint64_t v3 = *(Bytef **)(a1 + 72);
    double v5 = 0.0;
  }
  char v8 = *(NSObject **)(a1 + 40);
  if (v8) {
    dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  }
  double v9 = CFAbsoluteTimeGetCurrent();
  [*(id *)(a1 + 32) sendOutgoingChunk:v3 length:v6 compressed:v7];
  CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = *(NSObject **)(v11 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010FE50;
  block[3] = &unk_1008CD948;
  void block[4] = v11;
  *(double *)&void block[5] = v10 - v9;
  char v17 = v7;
  uint64_t v13 = *(void *)(a1 + 64);
  block[6] = v6;
  block[7] = v13;
  *(double *)&block[8] = v5;
  dispatch_sync(v12, block);
  uint64_t v14 = *(Bytef **)(a1 + 72);
  if (v3 != v14) {
    free(v14);
  }
  free(v3);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

unsigned char *sub_10010FE50(uint64_t a1)
{
  *(double *)(*(void *)(a1 + 32) + 16) = *(double *)(a1 + 40) + *(double *)(*(void *)(a1 + 32) + 16);
  *(_DWORD *)(*(void *)(a1 + 32) + 12) += *(_DWORD *)(a1 + 48);
  ++*(void *)(*(void *)(a1 + 32) + 32);
  if (*(unsigned char *)(a1 + 72))
  {
    *(_DWORD *)(*(void *)(a1 + 32) + 40) += *(_DWORD *)(a1 + 56);
    *(_DWORD *)(*(void *)(a1 + 32) + 72) += *(_DWORD *)(a1 + 48);
    *(double *)(*(void *)(a1 + 32) + 64) = *(double *)(a1 + 64) + *(double *)(*(void *)(a1 + 32) + 64);
    ++*(void *)(*(void *)(a1 + 32) + 48);
  }
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[8])
  {
    [result processNetworkStatistics:*(double *)(a1 + 40)];
    uint64_t v3 = *(void **)(a1 + 32);
    return _[v3 processCompressibilityStatistics];
  }
  return result;
}

void sub_10010FF54()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: CFWriteStreamWrite returned %ld", v2, v3, v4, v5, v6);
}

void sub_10010FFBC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: CFReadStreamRead returned %ld", v2, v3, v4, v5, v6);
}

void sub_100110024()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: CFReadStreamOpen CFErrorRef error = %@", v2, v3, v4, v5, v6);
}

void sub_10011008C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: CFWriteStreamOpen CFErrorRef error = %@", v2, v3, v4, v5, v6);
}

void sub_1001100F4(os_log_t log, double a2)
{
  int v2 = 134217984;
  double v3 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Turning compression back on since it took %f seconds to send a block", (uint8_t *)&v2, 0xCu);
}

void sub_100110170()
{
  sub_10010FF3C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Not keeping up with network so turning compression off. Compressed send time: %f, uncompressed send time: %f", v1, 0x16u);
}

void sub_1001101E8()
{
  sub_10010FF3C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Turning compression back on. Compressed send time: %f, uncompressed send time: %f", v1, 0x16u);
}

void sub_100110260(os_log_t log, double a2)
{
  int v2 = 134217984;
  double v3 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Compression ratio is %f, so turning compression off, at least until the next file", (uint8_t *)&v2, 0xCu);
}

void sub_1001102DC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: executeReadWithAdaptiveCompression CFErrorRef error = %@", v2, v3, v4, v5, v6);
}

void sub_100110344()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropCompressor: executeWriteWithAdaptiveCompression CFErrorRef error = %@", v2, v3, v4, v5, v6);
}

uint64_t SDAutoUnlockSessionWrapperReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 88) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_63;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_65;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_63:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_65:
        uint64_t v38 = 80;
        goto LABEL_82;
      case 2u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 72;
        goto LABEL_61;
      case 3u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 56;
        goto LABEL_61;
      case 4u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 88) |= 4u;
        while (2)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v14 |= (unint64_t)(v23 & 0x7F) << v20;
            if (v23 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_69:
        uint64_t v38 = 40;
        goto LABEL_82;
      case 5u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 64;
        goto LABEL_61;
      case 6u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 88) |= 0x10u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v9 = v25++ >= 9;
              if (v9)
              {
                uint64_t v26 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v26 = 0;
        }
LABEL_73:
        *(unsigned char *)(a1 + 84) = v26 != 0;
        continue;
      case 7u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 88) |= 2u;
        while (2)
        {
          unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 == -1 || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
            v14 |= (unint64_t)(v32 & 0x7F) << v29;
            if (v32 < 0)
            {
              v29 += 7;
              BOOL v9 = v30++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_77:
        uint64_t v38 = 24;
        goto LABEL_82;
      case 8u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 88) |= 1u;
        break;
      case 9u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 32;
        goto LABEL_61;
      case 0xAu:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
        goto LABEL_61;
      case 0xBu:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 48;
LABEL_61:
        unint64_t v37 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v35 == -1 || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v36 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
      v14 |= (unint64_t)(v36 & 0x7F) << v33;
      if ((v36 & 0x80) == 0) {
        goto LABEL_79;
      }
      v33 += 7;
      BOOL v9 = v34++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_81;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_79:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_81:
    uint64_t v38 = 8;
LABEL_82:
    *(_DWORD *)(a1 + v3_Block_object_dispose(&a9, 8) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockStartLTKTransferReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL SDAutoUnlockEscrowSecretInfoReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 16;
LABEL_21:
        uint64_t v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadString();
    uint64_t v13 = 8;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100112EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100112F24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleAction];
}

Class sub_100113174()
{
  if (qword_100980028 != -1) {
    dispatch_once(&qword_100980028, &stru_1008CD990);
  }
  Class result = objc_getClass("_SFSharablePasswordReceiver");
  qword_100980020 = (uint64_t)result;
  off_100967D58 = (uint64_t (*)())sub_1001131D8;
  return result;
}

id sub_1001131D8()
{
  return (id)qword_100980020;
}

void sub_1001131E4(id a1)
{
  qword_100980030 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SafariServices.framework/SafariServices", 2);
}

void sub_100113210()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### No credential?", v2, v3, v4, v5, v6);
}

void sub_100113244()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### No URL for opening received credential?", v2, v3, v4, v5, v6);
}

void sub_100113278()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Failed to grab myPrivateKey?", v2, v3, v4, v5, v6);
}

void sub_1001132AC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Failed to grab myIdentity?", v2, v3, v4, v5, v6);
}

void sub_1001132E0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Failed to grab myAccount?", v2, v3, v4, v5, v6);
}

id sub_100113440(uint64_t a1)
{
  return [*(id *)(a1 + 32) setEscrowSecret:0];
}

void sub_10011362C(id a1)
{
  uint64_t v1 = objc_alloc_init(SDAutoUnlockAKSManager);
  uint64_t v2 = (void *)qword_100980038;
  qword_100980038 = (uint64_t)v1;
}

void sub_1001144B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1001144DC(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DCRT OOB performed", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateLocalLTK];
}

id sub_1001145E4(uint64_t a1)
{
  id result = (id)sub_1000D3140();
  if (result)
  {
    uint64_t v3 = auto_unlock_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Profile installed disabling Auto Unlock", v4, 2u);
    }

    [*(id *)(a1 + 32) setAutoUnlockDisabledDueToManagement:1];
    return [*(id *)(a1 + 32) handleRequiredStateDisabled];
  }
  return result;
}

void sub_10011475C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = auto_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001216B4();
  }
}

uint64_t sub_100116168(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  char v8 = [v5 cachedSessionKeys];
  BOOL v9 = [v8 objectForKeyedSubscript:v7];

  int v10 = [*(id *)(a1 + 32) cachedSessionKeys];
  uint64_t v11 = [v10 objectForKeyedSubscript:v6];

  uint64_t v12 = -1;
  if (!v9) {
    uint64_t v12 = 1;
  }
  if ((v9 != 0) != (v11 == 0)) {
    return 0;
  }
  else {
    return v12;
  }
}

void sub_100116E6C(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v8 = 0;
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = a2;
    id v6 = [v3 remoteLTKForDeviceID:v4];
    sub_10001E908(v5, v6, 1, &v8);

    id v7 = auto_unlock_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Experimental attempt to register for MacUnlockPhone got error: %d", buf, 8u);
    }

    if (v8 == -536363002) {
      [*(id *)(a1 + 32) disablePairingForAllLockPhones];
    }
  }
}

void sub_1001172F0(uint64_t a1)
{
  uint64_t v2 = sub_10001DBC0((uint64_t)[*(id *)(a1 + 32) ltkKeyClassWithAttestation:*(unsigned __int8 *)(a1 + 56)], *(unsigned __int8 *)(a1 + 56));
  if (!v2) {
    goto LABEL_25;
  }
  uint64_t v3 = sub_10001D144();
  uint64_t v4 = objc_opt_new();
  [v4 setVersion:2];
  [v4 setLtk:v2];
  if (v3)
  {
    id v5 = sub_1000D4520(v3);
    [v4 setLtkID:v5];
  }
  int v6 = *(unsigned __int8 *)(a1 + 56);
  id v7 = *(void **)(a1 + 32);
  int v8 = [v7 localDeviceID];
  BOOL v9 = [*(id *)(a1 + 40) computerName];
  if (v6)
  {
    unsigned __int8 v10 = [v7 storeAttestedLongTermKey:v4 forDeviceID:v8 name:v9];

    if ((v10 & 1) == 0) {
      goto LABEL_16;
    }
LABEL_8:
    uint64_t v12 = auto_unlock_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [*(id *)(a1 + 32) localDeviceID];
      int v14 = *(unsigned __int8 *)(a1 + 56);
      int v21 = 138412802;
      unint64_t v22 = v13;
      if (v14) {
        CFStringRef v15 = @"YES";
      }
      else {
        CFStringRef v15 = @"NO";
      }
      __int16 v23 = 2112;
      CFStringRef v24 = @"YES";
      __int16 v25 = 2112;
      CFStringRef v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Saved Local LTK (device ID: %@, saved: %@ attested: %@)", (uint8_t *)&v21, 0x20u);
    }
    char v16 = *(void **)(a1 + 32);
    if (*(unsigned char *)(a1 + 56)) {
      [v16 setLocalAttestedLTK:v2];
    }
    else {
      [v16 setLocalLTK:v2];
    }
    goto LABEL_16;
  }
  unsigned int v11 = [v7 storeLongTermKey:v4 forDeviceID:v8 name:v9];

  if (v11) {
    goto LABEL_8;
  }
LABEL_16:
  int v17 = SFDeviceClassCodeGet();
  if (v17 == 7)
  {
    uint64_t v19 = auto_unlock_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "New local LTK, clearing escrow secrets", (uint8_t *)&v21, 2u);
    }

    [*(id *)(a1 + 32) handleRequiredStateDisabled];
  }
  else if (v17 == 1)
  {
    uint64_t v18 = auto_unlock_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "New local LTK, clearing remote LTKs and disabling Auto Unlock for all keys", (uint8_t *)&v21, 2u);
    }

    [*(id *)(a1 + 32) disablePairingForAllKeyDevices];
    [*(id *)(a1 + 32) clearRemoteLTKs];
  }

LABEL_25:
  uint64_t v20 = *(void *)(a1 + 48);
  if (v20) {
    (*(void (**)(uint64_t, void *, void))(v20 + 16))(v20, v2, 0);
  }
}

void sub_1001175C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unsigned int v4 = [*(id *)(a1 + 32) isMobileActivationErrorNetworkError:v3];
    id v5 = auto_unlock_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        int v8 = 138412290;
        id v9 = v3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Got Mobile Activation network error %@", (uint8_t *)&v8, 0xCu);
      }

      id v7 = +[NSError errorWithDomain:SFKAuthenticationErrorDomain code:39 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      if (v6)
      {
        int v8 = 138412290;
        id v9 = v3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Got Mobile Activation error %@", (uint8_t *)&v8, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100119258(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 objectForKeyedSubscript:@"Modern LTK Data"];

  if (v5) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_1001193B4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 objectForKeyedSubscript:@"LTK Data"];

  if (v5) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_100119894(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a3 objectForKeyedSubscript:@"LTK Data"];
  [v3 addObject:v4];
}

void sub_10011A26C(id a1, NSError *a2)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_100121DB4();
  }
}

void sub_10011A8E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v12 = 0;
  unsigned int v11 = +[NSPropertyListSerialization dataWithPropertyList:v10 format:200 options:0 error:&v12];
  if (v11) {
    [*(id *)(a1 + 40) sendLTKResponseWithPayload:v11 viewState:v7 needsUnlock:v8 currentlySyncing:v9];
  }
}

void sub_10011ABE8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1[4] ltkInfoForDeviceID:v3 modern:0];
  uint64_t v5 = [v4 ltk];
  if ([v4 hasLtkID])
  {
    id v6 = objc_alloc((Class)NSUUID);
    id v7 = [v4 ltkID];
    id v8 = [v6 initWithUUIDBytes:[v7 bytes]];
  }
  else
  {
    id v8 = 0;
  }
  id v9 = [a1[4] modificationDataForDeviceID:v3 modern:0];
  uint64_t v10 = [a1[4] longTermKeyForDevice:v3 modern:1];
  unsigned int v11 = [a1[4] modificationDataForDeviceID:v3 modern:1];
  if (v5 | v10)
  {
    if (v5 && [a1[5] version] == 1)
    {
      [a1[6] setObject:v5 forKeyedSubscript:v3];
    }
    else
    {
      uint64_t v13 = objc_opt_new();
      [v13 setObject:v5 forKeyedSubscript:@"LTK Data"];
      [v13 setObject:v9 forKeyedSubscript:@"LTK Mod Date"];
      [v13 setObject:v10 forKeyedSubscript:@"Modern LTK Data"];
      [v13 setObject:v11 forKeyedSubscript:@"Modern LTK Mod Date"];
      if (v8)
      {
        int v14 = [v8 UUIDString];
        [v13 setObject:v14 forKeyedSubscript:@"LTK ID"];
      }
      [a1[6] setObject:v13 forKeyedSubscript:v3];
    }
  }
  else
  {
    uint64_t v12 = auto_unlock_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100121F48();
    }
  }
}

id sub_10011B0CC(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Keybag assertion fired", v4, 2u);
  }

  return [*(id *)(a1 + 32) releaseKeybagAssertion];
}

void sub_10011E0F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v8 = (id)objc_opt_new();
  [v8 setObject:v5 forKeyedSubscript:@"Companion ID"];

  id v7 = [*(id *)(a1 + 32) watchIDsToPairingRecords];
  [v7 setObject:v8 forKeyedSubscript:v6];
}

id sub_10011E5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:a3];
}

Class sub_10012154C()
{
  if (qword_100980050 != -1) {
    dispatch_once(&qword_100980050, &stru_1008CDB58);
  }
  Class result = objc_getClass("CDPStateController");
  qword_100980048 = (uint64_t)result;
  off_100967D60 = (uint64_t (*)())sub_1001215B0;
  return result;
}

id sub_1001215B0()
{
  return (id)qword_100980048;
}

void sub_1001215BC(id a1)
{
  qword_100980058 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreCDP.framework/CoreCDP", 2);
}

void sub_1001215E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100121618()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to fetch manatee availability (error: %@)", v2, v3, v4, v5, v6);
}

void sub_100121680()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "AKS manager adding observers", v2, v3, v4, v5, v6);
}

void sub_1001216B4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to send first unlocked message (error: %@)", v2, v3, v4, v5, v6);
}

void sub_10012171C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Missing escrow", v2, v3, v4, v5, v6);
}

void sub_100121750()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Escrow secret %{private}@", v2, v3, v4, v5, v6);
}

void sub_1001217B8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Missing escrow for authorization", v2, v3, v4, v5, v6);
}

void sub_1001217EC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Session key is missing (device ID: %@", v2, v3, v4, v5, v6);
}

void sub_100121854(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001218C4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100121934()
{
  sub_10002972C();
  WORD2(v3) = 2048;
  HIWORD(v3) = v0;
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Missing out variables (message: %p, authTag: %p)", v2, v3);
}

void sub_1001219A8(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 UUIDString];
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, a2, v4, "No IDS devices for bluetooth ID: %@", v5);
}

void sub_100121A34(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localDeviceID];
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, a2, v4, "Unable to load LTK (local device ID: %@)", v5);
}

void sub_100121AC0(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localDeviceID];
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, a2, v4, "Unable to load attested LTK (local device ID: %@)", v5);
}

void sub_100121B4C(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localDeviceID];
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, a2, v4, "Could not get ltkInfoForDeviceID localAttestedLTK (local device ID: %@)", v5);
}

void sub_100121BD8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Missing local device ID to check local LTK", v2, v3, v4, v5, v6);
}

void sub_100121C0C()
{
  sub_10001587C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Hash exists but key missing", v1, 2u);
}

void sub_100121C4C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Unknown remote key class for device ID: %@", v2, v3, v4, v5, v6);
}

void sub_100121CB4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Didn't receive signed LTK. Couldn't store.", v2, v3, v4, v5, v6);
}

void sub_100121CE8(void *a1)
{
  uint64_t v2 = [a1 remoteLTKs];
  uint64_t v3 = [a1 remoteLTKs];
  uint64_t v10 = [v3 objectForKeyedSubscript:@"Remote LTKs"];
  sub_100031E50((void *)&_mh_execute_header, v4, v5, "Remote LTK list is empty (remote ltks %@, list %@)", v6, v7, v8, v9, 2u);
}

void sub_100121DB4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to send LTK response", v2, v3, v4, v5, v6);
}

void sub_100121DE8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to store Watch LTK", v2, v3, v4, v5, v6);
}

void sub_100121E1C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error posting follow up %@", v2, v3, v4, v5, v6);
}

void sub_100121E84(void *a1)
{
  [a1 hasLocalID];
  [a1 hasLtk];
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "LTK request missing info (local ID %@, ltk %@)", v4, v5, v6, v7, 2u);
}

void sub_100121F48()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Missing ltk for deviceID: %@", v2, v3, v4, v5, v6);
}

void sub_100121FB0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "AKS Manager received unknown type", v2, v3, v4, v5, v6);
}

void sub_100121FE4()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Escrow secret exists %@", v2, v3, v4, v5, v6);
}

void sub_10012204C()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Remote device is iPhone", v2, v3, v4, v5, v6);
}

void sub_100122080()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "RemoteLTK exists for deviceID: %@, but pairing does not seem to be valid for AKS", v2, v3, v4, v5, v6);
}

void sub_1001220E8()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Remote LTK missing for deviceID: %@", v2, v3, v4, v5, v6);
}

void sub_100122150(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001221C8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error serializing remote LTKs: %@", v2, v3, v4, v5, v6);
}

void sub_100122230(void *a1)
{
  uint64_t v1 = [a1 remoteLTKs];
  sub_10002972C();
  sub_100034058((void *)&_mh_execute_header, v2, v3, "Saved remote LTKs: %@", v4, v5, v6, v7, v8);
}

void sub_1001222B4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error persisting remote LTKs: %@", v2, v3, v4, v5, v6);
}

void sub_10012231C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error loading LTK file: %@", v2, v3, v4, v5, v6);
}

void sub_100122384()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error deserializing LTKs: %@", v2, v3, v4, v5, v6);
}

void sub_1001223EC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error serializing watch ID to pairing record: %@", v2, v3, v4, v5, v6);
}

void sub_100122454(void *a1)
{
  uint64_t v1 = [a1 watchIDsToPairingRecords];
  sub_10002972C();
  sub_100034058((void *)&_mh_execute_header, v2, v3, "Saved watch ID to pairing record: %@", v4, v5, v6, v7, v8);
}

void sub_1001224D8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error persisting watch ID to pairing record: %@", v2, v3, v4, v5, v6);
}

void sub_100122540()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error loading watch IDs to pairing records file: %@", v2, v3, v4, v5, v6);
}

void sub_1001225A8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Falling back to new dictionary", v2, v3, v4, v5, v6);
}

void sub_1001225DC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Setting pairing records load error default", v2, v3, v4, v5, v6);
}

void sub_100122610()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error deserializing pairing records dictionary: %@", v2, v3, v4, v5, v6);
}

void sub_100122678(void *a1)
{
  uint64_t v1 = [a1 watchIDsToPairingRecords];
  sub_10002972C();
  sub_100034058((void *)&_mh_execute_header, v2, v3, "Loaded pairing records dictionary: %@", v4, v5, v6, v7, v8);
}

void sub_1001226FC(uint64_t a1, NSObject *a2)
{
  objc_opt_class();
  sub_10002972C();
  id v4 = v3;
  sub_1001215E8((void *)&_mh_execute_header, a2, v5, "Watch IDs to paired records incorrect class (%@)", v6);
}

void sub_100122788()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Creating pairing records file", v2, v3, v4, v5, v6);
}

void sub_1001227BC()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Loading pairing records %@", v2, v3, v4, v5, v6);
}

void sub_100122824()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Failed to delete legacy watch to companion id file (path: %@, error: %@)");
}

void sub_10012288C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error loading watch ID to companion ID file: %@", v2, v3, v4, v5, v6);
}

void sub_1001228F4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error deserializing watch ID to companion ID mapping: %@", v2, v3, v4, v5, v6);
}

void sub_10012295C()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Loaded watch ID to companion ID mapping: %@", v2, v3, v4, v5, v6);
}

void sub_1001229C4()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Failed to delete legacy companion id file (path: %@, error: %@)");
}

void sub_100122A2C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error loading companion IDs file: %@", v2, v3, v4, v5, v6);
}

void sub_100122A94()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error deserializing companion IDs: %@", v2, v3, v4, v5, v6);
}

void sub_100122AFC()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Error creating Sharing folder for compainon IDs: (path %@, error %@)");
}

void sub_100122B64()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Error creating Auto Unlock folder: (path %@, error %@)");
}

void sub_100122BCC()
{
  sub_100121600();
  sub_1000200B0((void *)&_mh_execute_header, v0, v1, "Failed to store keychain item (add status:%d, delete status:%d)", v2, v3);
}

void sub_100122C34(void *a1)
{
  [a1 hasSecret];
  sub_100031E50((void *)&_mh_execute_header, v1, v2, "Unable to get secret from info (has secret %@, escrow info %{private}@)", v3, v4, v5, v6, 3u);
}

void sub_100122CD8()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Received unexpected SecItem CFErrorRef error = %d", v2, v3, v4, v5, v6);
}

void sub_100122D40()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Failed to delete escrow secret: %d", v2, v3, v4, v5, v6);
}

void sub_100122DA8()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Failed to delete all escrow secrets: %d", v2, v3, v4, v5, v6);
}

void sub_100122E10(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a2;
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to delete remote LTK (status: %d, query: %@)", (uint8_t *)v3, 0x12u);
}

void sub_100122E98()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Failed to delete local attested LTK: %d", v2, v3, v4, v5, v6);
}

void sub_100122F00()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Device ID missing for session key", v2, v3, v4, v5, v6);
}

void sub_100122F34()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Failed to delete ranging key: %d", v2, v3, v4, v5, v6);
}

void sub_100122F9C()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "Failed to delete all ranging keys: %d", v2, v3, v4, v5, v6);
}

uint64_t SDAutoUnlockLTKRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 48) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_54;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_56;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_56:
        *(_DWORD *)(a1 + 40) = v14;
        continue;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_38;
      case 3u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
        goto LABEL_38;
      case 4u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 24;
        goto LABEL_38;
      case 5u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 48) |= 2u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_60:
        BOOL v36 = v22 != 0;
        uint64_t v37 = 44;
        goto LABEL_69;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 32;
LABEL_38:
        __int16 v25 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      case 7u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 48) |= 4u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                uint64_t v28 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v28 = 0;
        }
LABEL_64:
        BOOL v36 = v28 != 0;
        uint64_t v37 = 45;
        goto LABEL_69;
      case 8u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + 48) |= 8u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
      v33 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        goto LABEL_66;
      }
      v31 += 7;
      BOOL v9 = v32++ >= 9;
      if (v9)
      {
        uint64_t v33 = 0;
        goto LABEL_68;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v33 = 0;
    }
LABEL_68:
    BOOL v36 = v33 != 0;
    uint64_t v37 = 46;
LABEL_69:
    *(unsigned char *)(a1 + v37) = v36;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockLTKResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_50;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_52;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_52:
        *(_DWORD *)(a1 + 16) = v14;
        continue;
      case 2u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v18;

        continue;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 24) |= 8u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_56:
        BOOL v35 = v22 != 0;
        uint64_t v36 = 22;
        goto LABEL_65;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v9 = v26++ >= 9;
              if (v9)
              {
                uint64_t v27 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v27 = 0;
        }
LABEL_60:
        BOOL v35 = v27 != 0;
        uint64_t v36 = 21;
        goto LABEL_65;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
      v32 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0) {
        goto LABEL_62;
      }
      v30 += 7;
      BOOL v9 = v31++ >= 9;
      if (v9)
      {
        uint64_t v32 = 0;
        goto LABEL_64;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_62:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v32 = 0;
    }
LABEL_64:
    BOOL v35 = v32 != 0;
    uint64_t v36 = 20;
LABEL_65:
    *(unsigned char *)(a1 + v36) = v35;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100125DB8(id a1)
{
  uint64_t v1 = objc_alloc_init(SDBroadwayAgent);
  uint64_t v2 = (void *)qword_100980068;
  qword_100980068 = (uint64_t)v1;
}

void sub_100125F54(uint64_t a1)
{
  if (dword_100967DC8 <= 30 && (dword_100967DC8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  id v2 = +[NSDistributedNotificationCenter defaultCenter];
  [v2 addObserver:*(void *)(a1 + 32) selector:"_applePayCardDectected:" name:@"com.apple.stockholm.wallet.tag" object:0 suspensionBehavior:4];
}

id sub_100126088(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_100126294(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _preparePresentationWithBroadwayActivationCode:*(void *)(a1 + 40) testInfo:*(void *)(a1 + 48)];
}

void sub_100126560(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10012657C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v8 state] == (id)1 || *(unsigned char *)(a1 + 56))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained lookupPhysicalCardWithBroadwayActivationCode:*(void *)(a1 + 32) testInfo:*(void *)(a1 + 40)];
LABEL_4:

    goto LABEL_5;
  }
  if (dword_100967DC8 <= 30 && (dword_100967DC8 != -1 || _LogCategory_Initialize()))
  {
    id v7 = [v8 state];
    id WeakRetained = ((void (*)(uint64_t))off_100967E48[0])((uint64_t)v7);
    LogPrintF();
    goto LABEL_4;
  }
LABEL_5:
}

void sub_100126928(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100126950(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100126A48;
  block[3] = &unk_1008CDBC8;
  id v7 = v3;
  __int16 v11 = *(_WORD *)(a1 + 64);
  id v5 = v3;
  objc_copyWeak(&v10, (id *)(a1 + 56));
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
}

void sub_100126A48(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  if (v2) {
    goto LABEL_2;
  }
  if (!*(unsigned char *)(a1 + 64) || *(unsigned char *)(a1 + 65)) {
    goto LABEL_22;
  }
  if (dword_100967DC8 <= 30 && (dword_100967DC8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  off_100967E40[0]();
  id v2 = (id)objc_opt_new();
  if (v2)
  {
LABEL_2:
    id v4 = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    [WeakRetained _startUIWithPhysicalCard:v4 activationCode:*(void *)(a1 + 40) testInfo:*(void *)(a1 + 48)];
  }
  else
  {
LABEL_22:
    if (dword_100967DC8 <= 30 && (dword_100967DC8 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

void sub_100126B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100126C94;
  block[3] = &unk_1008CDBC8;
  id v7 = v3;
  __int16 v11 = *(_WORD *)(a1 + 64);
  id v5 = v3;
  objc_copyWeak(&v10, (id *)(a1 + 56));
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
}

void sub_100126C94(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  if (!v2)
  {
    if (*(unsigned char *)(a1 + 64) && !*(unsigned char *)(a1 + 65))
    {
      if (dword_100967DC8 <= 30 && (dword_100967DC8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      off_100967E40[0]();
      id v2 = (id)objc_opt_new();
    }
    else
    {
      id v2 = 0;
    }
  }
  id v4 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _startUIWithPhysicalCard:v4 activationCode:*(void *)(a1 + 40) testInfo:*(void *)(a1 + 48)];
}

uint64_t sub_1001271C4(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 8))
  {
    if (dword_100967DC8 <= 30)
    {
      if (dword_100967DC8 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        return LogPrintF();
      }
    }
  }
  else if (dword_100967DC8 <= 60)
  {
    if (dword_100967DC8 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_100127350(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 8))
  {
    if (dword_100967DC8 <= 30)
    {
      if (dword_100967DC8 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        return LogPrintF();
      }
    }
  }
  else if (dword_100967DC8 <= 60)
  {
    if (dword_100967DC8 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

void sub_100127508(uint64_t a1)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8))
  {
    if (dword_100967DC8 <= 30 && (dword_100967DC8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = *(void **)(v2 + 8);
    *(void *)(v2 + _Block_object_dispose(&a9, 8) = 0;
  }
  else if (dword_100967DC8 <= 30 && (dword_100967DC8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

Class sub_10012766C()
{
  if (qword_100980078 != -1) {
    dispatch_once(&qword_100980078, &stru_1008CDC10);
  }
  Class result = objc_getClass("PKAccountService");
  qword_100980070 = (uint64_t)result;
  off_100967E38[0] = (uint64_t (*)())sub_1001276D0;
  return result;
}

id sub_1001276D0()
{
  return (id)qword_100980070;
}

void sub_1001276DC(id a1)
{
  qword_100980080 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore", 2);
}

uint64_t sub_100127708(uint64_t a1)
{
  if (qword_100980078 != -1) {
    dispatch_once(&qword_100980078, &stru_1008CDC10);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)qword_100980080, "PKAccountStateToString");
  off_100967E48[0] = v2;

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

Class sub_100127784()
{
  if (qword_100980078 != -1) {
    dispatch_once(&qword_100980078, &stru_1008CDC10);
  }
  Class result = objc_getClass("PKPhysicalCard");
  qword_100980088 = (uint64_t)result;
  off_100967E40[0] = (uint64_t (*)())sub_1001277E8;
  return result;
}

id sub_1001277E8()
{
  return (id)qword_100980088;
}

uint64_t sub_1001277F4(uint64_t a1)
{
  if (qword_100980078 != -1) {
    dispatch_once(&qword_100980078, &stru_1008CDC10);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)qword_100980080, "PKStringFromPhysicalCardState");
  off_100967E50 = v2;

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t SDAutoUnlockDeviceFirstUnlockedReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10012861C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100128644(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerImport];
}

uint64_t SDUnlockStateResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a1 + 16) |= 2u;
      while (1)
      {
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0) {
          goto LABEL_48;
        }
        v18 += 7;
        BOOL v9 = v19++ >= 9;
        if (v9)
        {
          uint64_t v20 = 0;
          goto LABEL_50;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_48:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v20 = 0;
      }
LABEL_50:
      BOOL v29 = v20 != 0;
      uint64_t v30 = 12;
    }
    else
    {
      if (v12 != 2)
      {
        if (v12 == 1)
        {
          char v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 0;
          *(unsigned char *)(a1 + 16) |= 1u;
          while (1)
          {
            unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_44;
            }
            v13 += 7;
            BOOL v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_46;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_44:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v15) = 0;
          }
LABEL_46:
          *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v15;
        }
        else
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        continue;
      }
      char v23 = 0;
      unsigned int v24 = 0;
      uint64_t v25 = 0;
      *(unsigned char *)(a1 + 16) |= 4u;
      while (1)
      {
        unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
        v25 |= (unint64_t)(v27 & 0x7F) << v23;
        if ((v27 & 0x80) == 0) {
          goto LABEL_52;
        }
        v23 += 7;
        BOOL v9 = v24++ >= 9;
        if (v9)
        {
          uint64_t v25 = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v25 = 0;
      }
LABEL_54:
      BOOL v29 = v25 != 0;
      uint64_t v30 = 13;
    }
    *(unsigned char *)(a1 + v30) = v29;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10012A7D8(id a1)
{
  uint64_t v1 = +[SDStatusMonitor sharedMonitor];
  unsigned int v2 = [v1 enableContinuity];

  if (v2)
  {
    id v3 = objc_alloc_init(SDActivityPayloadManager);
    char v4 = (void *)qword_100980090;
    qword_100980090 = (uint64_t)v3;
  }
}

void sub_10012AA78(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10012AA94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(unsigned char *)(*(void *)(a1 + 32) + 64) = [WeakRetained manateeAvailable];
}

id sub_10012AC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) handleEncryptionKeyRequestRapport:a2 options:a3 responseHandler:a4];
}

id sub_10012AC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) handlePayloadRequestRapport:a2 options:a3 responseHandler:a4];
}

void sub_10012AC30(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = handoff_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100132B64();
    }
  }
}

void sub_10012B194(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = [v3 completionHandler];

  uint64_t v5 = handoff_log();
  BOOL v6 = os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (v6) {
      sub_100132C5C();
    }

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    char v8 = @"EncryptionKey";
    if (isKindOfClass) {
      char v8 = @"Request";
    }
    BOOL v9 = *(void **)(a1 + 32);
    int v10 = v8;
    __int16 v11 = [v3 requestCreatedDate];
    [v11 timeIntervalSinceNow];
    [v9 logDashboardHandoffRequestViaTransportLinkType:0xFFFFFFFFLL type:v10 success:0 rtt:0];

    uint64_t v5 = [v3 completionHandler];
    unint64_t v12 = [v3 error];
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v12);
  }
  else if (v6)
  {
    sub_100132BCC(a1);
  }
}

void sub_10012BA28(uint64_t a1)
{
  id v3 = +[NSRunLoop mainRunLoop];
  uint64_t v2 = [*(id *)(a1 + 32) timeoutTimer];
  [v3 addTimer:v2 forMode:NSDefaultRunLoopMode];
}

id *sub_10012BAA4(id *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = result;
    char v4 = [result[4] requestCreatedDate];
    [v4 timeIntervalSinceNow];
    double v6 = v5;
    unint64_t v7 = [v3[4] requestCreatedDate];
    [v7 timeIntervalSinceNow];
    if (v6 < 0.0) {
      double v9 = -v8;
    }
    else {
      double v9 = v8;
    }

    double v10 = (double)(uint64_t)[v3[4] timeoutTimeInterval] - v9;
    __int16 v11 = objc_opt_new();
    [v3[4] setRequestCreatedDate:v11];

    [v3[4] setTimeoutTimeInterval:(uint64_t)v10];
    id v12 = v3[5];
    id v13 = v3[6];
    id v14 = v3[4];
    return (id *)_[v12 sendIDSEncryptionKeyRequest:v13 withRequestRecord:v14 desiredTimeout:v10];
  }
  return result;
}

void sub_10012BF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012BF6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id to = 0;
  objc_copyWeak(&to, (id *)(a1 + 64));
  if (v3)
  {
    char v4 = handoff_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100132DC4();
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v23 = RPOptionTimeoutSeconds;
    double v5 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
    unsigned int v24 = v5;
    double v6 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];

    id v7 = objc_loadWeakRetained(&to);
    double v8 = [v7 linkClient];
    id v14 = _NSConcreteStackBlock;
    uint64_t v15 = 3221225472;
    unint64_t v16 = sub_10012C1EC;
    char v17 = &unk_1008CDCE0;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    objc_copyWeak(&v21, &to);
    uint64_t v10 = RPDestinationIdentifierDirectPeer;
    id v19 = *(id *)(a1 + 48);
    id v20 = *(id *)(a1 + 56);
    [v8 sendRequestID:@"com.apple.handoff.encryption-key-request" request:v9 destinationID:v10 options:v6 responseHandler:&v14];

    __int16 v11 = *(void **)(a1 + 40);
    id v12 = objc_loadWeakRetained(&to);
    id v13 = [v12 requestIdentifier:v14 v15 v16 v17 v18];
    [v11 messageWithIdentifier:v13 didSendWithSuccess:1 error:0];

    objc_destroyWeak(&v21);
  }
  objc_destroyWeak(&to);
}

void sub_10012C1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012C1EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged();
    __int16 v11 = handoff_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      uint64_t v21 = [v8 objectForKeyedSubscript:RPOptionXID];
      char v22 = (void *)v21;
      if (Int64Ranged > 0xB) {
        uint64_t v23 = "?";
      }
      else {
        uint64_t v23 = off_1008CDEB8[(int)Int64Ranged];
      }
      int v24 = 138413058;
      id v25 = WeakRetained;
      __int16 v26 = 2112;
      uint64_t v27 = v21;
      __int16 v28 = 2080;
      BOOL v29 = v23;
      __int16 v30 = 2112;
      id v31 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Encryption key request %@ with xid %@ via Rapport (%s) failed with error %@", (uint8_t *)&v24, 0x2Au);
    }
    if ([v9 code] != (id)-6714)
    {
      id v12 = *(void **)(a1 + 32);
      id v13 = objc_loadWeakRetained((id *)(a1 + 56));
      id v14 = [v13 requestCreatedDate];
      [v14 timeIntervalSinceNow];
      [v12 logDashboardHandoffRequestViaTransportLinkType:Int64Ranged type:@"EncryptionKey" success:0];
    }
    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    unint64_t v16 = *(void **)(a1 + 32);
    id v17 = objc_loadWeakRetained((id *)(a1 + 56));
    [v16 handleEncryptionKeyReplyRapport:v7 options:v8 forRequestRecord:v17 fromDevice:*(void *)(a1 + 40)];

    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v15();
  id v18 = objc_loadWeakRetained((id *)(a1 + 56));
  id v19 = [v18 linkClient];
  [v19 invalidate];
}

void sub_10012D35C(uint64_t a1)
{
  id v3 = +[NSRunLoop mainRunLoop];
  uint64_t v2 = [*(id *)(a1 + 32) timeoutTimer];
  [v3 addTimer:v2 forMode:NSDefaultRunLoopMode];
}

id *sub_10012D3D8(id *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = result;
    char v4 = [result[4] requestCreatedDate];
    [v4 timeIntervalSinceNow];
    double v6 = v5;
    id v7 = [v3[4] requestCreatedDate];
    [v7 timeIntervalSinceNow];
    if (v6 < 0.0) {
      double v9 = -v8;
    }
    else {
      double v9 = v8;
    }

    double v10 = (double)(uint64_t)[v3[4] timeoutTimeInterval] - v9;
    __int16 v11 = objc_opt_new();
    [v3[4] setRequestCreatedDate:v11];

    [v3[4] setTimeoutTimeInterval:(uint64_t)v10];
    id v12 = v3[5];
    id v13 = v3[6];
    id v14 = v3[4];
    return (id *)_[v12 sendIDSActivityPayloadRequest:v13 withRequestRecord:v14 desiredTimeout:v10];
  }
  return result;
}

void sub_10012DA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012DAC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10012DAD0(uint64_t a1)
{
}

void sub_10012DAD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = handoff_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100132FA8();
  }

  double v5 = [v3 identifier];
  double v6 = [*(id *)(a1 + 32) deviceIdentifier];
  unsigned int v7 = [v5 isEqualToString:v6];

  if (v7)
  {
    double v8 = handoff_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found device we were looking for, attempting to send message", buf, 2u);
    }

    double v10 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10012DC48;
    v12[3] = &unk_1008CDD30;
    id v13 = *(id *)(a1 + 56);
    long long v14 = *(_OWORD *)(a1 + 64);
    [v10 sendActivityPayloadRequestMessageToDevice:v9 withRequestRecord:v11 withDestinationDevice:v3 completionHandler:v12];
  }
}

void sub_10012DC48(void *a1)
{
  (*(void (**)(void))(a1[4] + 16))();
  [*(id *)(*(void *)(a1[5] + 8) + 40) invalidate];
  uint64_t v2 = *(void *)(a1[5] + 8);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
}

void sub_10012DCAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    char v4 = handoff_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100133010();
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  double v5 = *(void **)(*(void *)(a1 + 32) + 112);
  if (v5)
  {
    double v6 = v5;
    dispatch_source_cancel(v6);
    uint64_t v7 = *(void *)(a1 + 32);
    double v8 = *(void **)(v7 + 112);
    *(void *)(v7 + 112) = 0;
  }
  dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 112);
  *(void *)(v10 + 112) = v9;

  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = *(NSObject **)(v12 + 112);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10012DE3C;
  handler[3] = &unk_1008CDD80;
  uint64_t v14 = *(void *)(a1 + 56);
  handler[4] = v12;
  uint64_t v20 = v14;
  id v15 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 64);
  id v18 = v15;
  uint64_t v21 = v16;
  id v19 = *(id *)(a1 + 48);
  dispatch_source_set_event_handler(v13, handler);
  SFDispatchTimerSet();
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 112));
}

void sub_10012DE3C(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 112);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = a1[4];
    double v5 = *(void **)(v4 + 112);
    *(void *)(v4 + 112) = 0;
  }
  if (!*(unsigned char *)(*(void *)(a1[7] + 8) + 24))
  {
    double v6 = handoff_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[5];
      int v10 = 138412290;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cannot send Handoff payload request %@ via Rapport as we did not find the target device. Did not send message.", (uint8_t *)&v10, 0xCu);
    }

    [*(id *)(*(void *)(a1[8] + 8) + 40) invalidate];
    uint64_t v8 = *(void *)(a1[8] + 8);
    dispatch_source_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;

    (*(void (**)(void))(a1[6] + 16))();
  }
}

void sub_10012E22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012E258(uint64_t a1, void *a2)
{
  id v3 = a2;
  id to = 0;
  objc_copyWeak(&to, (id *)(a1 + 64));
  if (v3)
  {
    uint64_t v4 = handoff_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100132DC4();
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v23 = RPOptionTimeoutSeconds;
    double v5 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
    int v24 = v5;
    double v6 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];

    id v7 = objc_loadWeakRetained(&to);
    uint64_t v8 = [v7 linkClient];
    uint64_t v14 = _NSConcreteStackBlock;
    uint64_t v15 = 3221225472;
    uint64_t v16 = sub_10012E4D8;
    id v17 = &unk_1008CDCE0;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    objc_copyWeak(&v21, &to);
    uint64_t v10 = RPDestinationIdentifierDirectPeer;
    id v19 = *(id *)(a1 + 48);
    id v20 = *(id *)(a1 + 56);
    [v8 sendRequestID:@"com.apple.handoff.payload-request" request:v9 destinationID:v10 options:v6 responseHandler:&v14];

    uint64_t v11 = *(void **)(a1 + 40);
    id v12 = objc_loadWeakRetained(&to);
    id v13 = [v12 requestIdentifier:v14 v15 v16 v17 v18];
    [v11 messageWithIdentifier:v13 didSendWithSuccess:1 error:0];

    objc_destroyWeak(&v21);
  }
  objc_destroyWeak(&to);
}

void sub_10012E494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012E4D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged();
    uint64_t v11 = handoff_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      uint64_t v21 = [v8 objectForKeyedSubscript:RPOptionXID];
      char v22 = (void *)v21;
      if (Int64Ranged > 0xB) {
        uint64_t v23 = "?";
      }
      else {
        uint64_t v23 = off_1008CDEB8[(int)Int64Ranged];
      }
      int v24 = 138413058;
      id v25 = WeakRetained;
      __int16 v26 = 2112;
      uint64_t v27 = v21;
      __int16 v28 = 2080;
      BOOL v29 = v23;
      __int16 v30 = 2112;
      id v31 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Handoff payload request %@ with xid %@ via Rapport (%s) failed with error %@", (uint8_t *)&v24, 0x2Au);
    }
    if ([v9 code] != (id)-6714)
    {
      id v12 = *(void **)(a1 + 32);
      id v13 = objc_loadWeakRetained((id *)(a1 + 56));
      uint64_t v14 = [v13 requestCreatedDate];
      [v14 timeIntervalSinceNow];
      [v12 logDashboardHandoffRequestViaTransportLinkType:Int64Ranged type:@"Request" success:0];
    }
    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    uint64_t v16 = *(void **)(a1 + 32);
    id v17 = objc_loadWeakRetained((id *)(a1 + 56));
    [v16 handlePayloadReplyRapport:v7 options:v8 forRequestRecord:v17 fromDevice:*(void *)(a1 + 40)];

    uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v15();
  id v18 = objc_loadWeakRetained((id *)(a1 + 56));
  id v19 = [v18 linkClient];
  [v19 invalidate];
}

void sub_10012F288(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = handoff_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = [*(id *)(a1 + 32) name];
    int v6 = 138412290;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Responding to Handoff encryption key request from \"%@\" via Rapport", (uint8_t *)&v6, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10012F59C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) sendEncryptionKeyReplyRequestToDevice:*(void *)(a1 + 40) reply:a2 requestIdentifier:*(void *)(a1 + 48)];
}

void sub_10012FE80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = handoff_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) name];
    int v13 = 138412290;
    uint64_t v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Responding to Handoff payload request from \"%@\" via Rapport", (uint8_t *)&v13, 0xCu);
  }
  id v9 = handoff_log();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_10013345C();
  }

  uint64_t v10 = handoff_log();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_1001333F4();
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  [*(id *)(a1 + 40) activityPayloadReplySuccess:v6];
  uint64_t v11 = *(void **)(a1 + 40);
  id v12 = [v6 messageIdentifier];
  [v11 messageWithIdentifier:v12 didSendWithSuccess:1 error:0];
}

id sub_10013017C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) sendIDSActivityPayloadReply:a2 withReplyRecord:a3];
}

void sub_10013048C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = *(void **)(a1 + 32);
  id v10 = a2;
  [v9 timeIntervalSinceNow];
  uint64_t v11 = SFStringFromTimeInterval();
  id v12 = handoff_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = *(void *)(a1 + 40);
    int v13 = [*(id *)(a1 + 48) name];
    id v14 = v7;
    id v15 = v8;
    id v16 = v10;
    id v17 = v11;
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    id v20 = SFHexStringForData();
    uint64_t v21 = *(void *)(a1 + 80);
    *(_DWORD *)buf = 138413826;
    uint64_t v32 = v30;
    __int16 v33 = 2112;
    char v34 = v13;
    __int16 v35 = 2112;
    uint64_t v36 = v19;
    uint64_t v11 = v17;
    id v10 = v16;
    id v8 = v15;
    id v7 = v14;
    __int16 v37 = 2112;
    uint64_t v38 = v18;
    __int16 v39 = 2112;
    unsigned int v40 = v20;
    __int16 v41 = 2112;
    uint64_t v42 = v21;
    __int16 v43 = 2112;
    char v44 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Ready to respond to handoff request via %@ from \"%@\" (%@) with requestIdentifier %@ for advertisementPayload %@, command: %@. RTT:%@", buf, 0x48u);
  }
  char v22 = handoff_log();
  uint64_t v23 = v22;
  if (v7)
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      sub_100133624();
    }
  }
  else
  {
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_10013355C();
    }

    id v7 = +[NSData data];
  }
  int v24 = objc_opt_new();
  [v24 setObject:*(void *)(a1 + 72) forKeyedSubscript:@"rAdvPayload"];
  [v24 setObject:v7 forKeyedSubscript:@"rActPayload"];
  if (v8)
  {
    id v25 = [v8 domain];
    [v24 setObject:v25 forKeyedSubscript:@"rActPayloadErrorDomain"];

    __int16 v26 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v8 code]);
    [v24 setObject:v26 forKeyedSubscript:@"rActPayloadErrorCode"];
  }
  uint64_t v27 = objc_opt_new();
  __int16 v28 = objc_opt_new();
  [v28 setMessageIdentifier:v27];
  id v29 = [objc_alloc((Class)NSUUID) initWithUUIDString:*(void *)(a1 + 64)];
  [v28 setRequestIdentifier:v29];

  [v28 setActivityIdentifier:v10];
  [v28 setDeviceIdentifier:*(void *)(a1 + 56)];
  [*(id *)(*(void *)(a1 + 88) + 88) setObject:v28 forKeyedSubscript:v27];
  (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
}

void sub_10013283C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"rActPayload"];
  id v5 = [v3 advertisementPayload];

  if (v5 && v4)
  {
    if ([*(id *)(*(void *)(a1 + 40) + 120) count] == (id)3) {
      [*(id *)(*(void *)(a1 + 40) + 120) removeLastObject];
    }
    id v6 = *(void **)(*(void *)(a1 + 40) + 120);
    v20[0] = *(void *)(a1 + 48);
    v19[0] = @"deviceIdentifier";
    v19[1] = @"advertisementPayload";
    id v7 = [v3 advertisementPayload];
    v19[2] = @"activityPayload";
    v20[1] = v7;
    v20[2] = v4;
    id v8 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:3];
    [v6 insertObject:v8 atIndex:0];
  }
  id v9 = handoff_log();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v10 = [*(id *)(a1 + 56) name];
    if (v4) {
      CFStringRef v11 = @"YES";
    }
    else {
      CFStringRef v11 = @"NO";
    }
    id v12 = [v3 description];
    int v13 = 138412802;
    id v14 = v10;
    __int16 v15 = 2112;
    CFStringRef v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "from %@, is final:%@, %@", (uint8_t *)&v13, 0x20u);
  }
}

void sub_100132AF0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_100132B44(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_100132B64()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Rapport activation failed %@", v2, v3, v4, v5, v6);
}

void sub_100132BCC(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 40) UUIDString];
  sub_10002972C();
  sub_100107304();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0xCu);
}

void sub_100132C5C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Request failed %@", v2, v3, v4, v5, v6);
}

void sub_100132CC4()
{
  sub_10008B728();
  uint64_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_100132B10();
  sub_100132AF0((void *)&_mh_execute_header, v2, v3, "%@: Encryption key request - Already have request for key %@. Replacing completion block", v4, v5, v6, v7, 2u);
}

void sub_100132D5C()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Sending encryption key request via Rapport %@", v2, v3, v4, v5, v6);
}

void sub_100132DC4()
{
  sub_100132B20();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "failed to activate link client for destination device: %@ (%@)");
}

void sub_100132E30()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Sending encryption key request via IDS %@", v2, v3, v4, v5, v6);
}

void sub_100132E98()
{
  sub_10008B728();
  uint64_t v2 = [v1 deviceIdentifier];
  uint64_t v3 = [*v0 devices];
  sub_100132AE0();
  sub_100031E50((void *)&_mh_execute_header, v4, v5, "Encryption key: No device found for identifier %@ (Devices: %@)", v6, v7, v8, v9, 2u);
}

void sub_100132F40()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Sending payload request via Rapport %@", v2, v3, v4, v5, v6);
}

void sub_100132FA8()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Found Device: %@", v2, v3, v4, v5, v6);
}

void sub_100133010()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to activate link client for rapport type 16 scanning, error: %@", v2, v3, v4, v5, v6);
}

void sub_100133078()
{
  sub_10007155C();
  sub_100132B44((void *)&_mh_execute_header, v0, v1, "Sending payload request via IDS %@ to %@");
}

void sub_1001330E0()
{
  sub_10008B728();
  uint64_t v2 = [v1 deviceIdentifier];
  uint64_t v3 = [*(id *)(v0 + 16) devices];
  sub_100132AE0();
  sub_100031E50((void *)&_mh_execute_header, v4, v5, "No device found for identifier %@ (Devices: %@)", v6, v7, v8, v9, 2u);
}

void sub_100133188()
{
  sub_100132B38();
  id v1 = [*v0 devices];
  sub_100132AE0();
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "No device found for identifier %@ (Devices: %@)", v4, v5, v6, v7, 2u);
}

void sub_100133220()
{
  sub_100132B38();
  id v1 = [v0 deviceIdentifier];
  sub_100132AE0();
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "deviceIdentifier %@ does not match %@", v4, v5, v6, v7, 2u);
}

void sub_1001332B8()
{
  sub_10008B728();
  uint64_t v2 = [v1 UUIDString];
  uint64_t v3 = [v0 uniqueIDOverride];
  sub_100132AE0();
  sub_100132AF0((void *)&_mh_execute_header, v4, v5, "Attempting to use unrequested encryption key with requestIdentifier %@ from %@", v6, v7, v8, v9, 2u);
}

void sub_100133360()
{
  sub_10008B728();
  id v1 = [v0 UUIDString];
  sub_100132B10();
  sub_100132AF0((void *)&_mh_execute_header, v2, v3, "Discarding unrequested encryption key as it is missing the requestIdentifier %@ or device %@", v4, v5, v6, v7, 2u);
}

void sub_1001333F4()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Payload reply record %@", v2, v3, v4, v5, v6);
}

void sub_10013345C()
{
  sub_10002972C();
  sub_100047790((void *)&_mh_execute_header, v0, v1, "Sending payload reply %@", v2, v3, v4, v5, v6);
}

void sub_1001334C4()
{
  sub_100132B38();
  uint64_t v1 = [*v0 devices];
  sub_100132AE0();
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "No IDS device found for identifier %@ (Devices: %@)", v4, v5, v6, v7, 2u);
}

void sub_10013355C()
{
  uint64_t v5 = SFHexStringForData();
  sub_100107304();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x2Au);
}

void sub_100133624()
{
  sub_10008B728();
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[7];
  uint64_t v5 = v2[8];
  uint64_t v6 = SFHexStringForData();
  int v7 = 138413314;
  uint64_t v8 = v3;
  __int16 v9 = 2112;
  uint64_t v10 = v4;
  __int16 v11 = 2112;
  uint64_t v12 = v5;
  __int16 v13 = 2112;
  id v14 = v6;
  __int16 v15 = 1024;
  unsigned int v16 = [v1 length];
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Responding to request via %@ from %@ with requestIdentifier %@ for advertisementPayload %@ with payload of size %d", (uint8_t *)&v7, 0x30u);
}

void sub_100133708()
{
  sub_10008B728();
  os_log_type_t v2 = v1;
  uint64_t v3 = [v1 deviceIdentifier];
  uint64_t v4 = [*v0 devices];
  uint64_t v5 = [v2 requestIdentifier];
  sub_100132B10();
  sub_100107304();
  _os_log_error_impl(v6, v7, v8, v9, v10, 0x20u);
}

void sub_1001337D8()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Incoming unhandled protobuf, should never have been called!! protobuf:%@ context:%@");
}

void sub_100133840()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Incoming unhandled data, should never have been called!! context:%@", v2, v3, v4, v5, v6);
}

void sub_1001338A8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Incoming unhandled message, should never have been called!! message:%@", v2, v3, v4, v5, v6);
}

void sub_100133910()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Could not decode protobuf data (%@)", v2, v3, v4, v5, v6);
}

void sub_100133978()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Could not encode protobuf data from %@ (%@)");
}

void sub_1001339E0()
{
  sub_10007155C();
  sub_100132B44((void *)&_mh_execute_header, v0, v1, "Not replacing current key %@ with received key %@");
}

void sub_100133A48()
{
  sub_100132B38();
  [v0 length];
  sub_100132AF0((void *)&_mh_execute_header, v1, v2, "to %@, with payload of size %ld", v3, v4, v5, v6, 2u);
}

void sub_100135EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 32) _handleCertificate:*(void *)(a1 + 40) intermediateCertificate:*(void *)(a1 + 48) withTrustResult:a3 error:a4];
  uint64_t v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
  }
}

id sub_10013612C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleCertificateCreateResponseWithInfo:a2 error:a3];
}

id sub_100136374(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleCreateTimerFired];
}

id sub_100136504(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleFetchTimerFired];
}

void sub_100136800(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v9[0] = 0;
  v9[1] = v9;
  void v9[2] = 0x2020000000;
  v9[3] = a2;
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x2020000000;
  v8[3] = a3;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 168);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001368BC;
  v6[3] = &unk_1008CDF70;
  int v7 = a4;
  void v6[4] = v4;
  v6[5] = v9;
  void v6[6] = v8;
  dispatch_async(v5, v6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
}

void sub_1001368BC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = 0;
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 128))
  {
    uint64_t v3 = 0;
    int v2 = -6723;
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (v5 && *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      *(void *)(v4 + 136) = v5;
      *(void *)(*(void *)(a1 + 32) + 152) = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
      int v2 = SFAppleIDCopyKeychainReferenceForKey();
      id v6 = 0;
      uint64_t v3 = v6;
      if (v2) {
        goto LABEL_9;
      }
      if ([v6 length])
      {
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 144), 0);
        [*(id *)(a1 + 32) _handleKeyPairAvailable];
        int v2 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    int v2 = -6762;
  }
LABEL_9:
  int v7 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v7) {
    CFRelease(v7);
  }
  os_log_type_t v8 = *(const void **)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v8) {
    CFRelease(v8);
  }
  if (v2)
  {
    __int16 v9 = *(void **)(a1 + 32);
    uint64_t v10 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v2 userInfo:0];
    [v9 _responseHandlerWithIdentity:0 error:v10];
  }
}

id sub_100136BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleCertificateFetchResponseWithInfo:a2 error:a3];
}

id sub_100136C44(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_100136E18(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_100137A60(uint64_t a1)
{
  return _[*(id *)(a1 + 32) eject];
}

void sub_100137B58(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "SDNetworkEjecter: stop", v1, 2u);
}

void sub_100137BF0(id a1)
{
  uint64_t v1 = objc_alloc_init(SharingDaemon);
  int v2 = (void *)qword_1009800A8;
  qword_1009800A8 = (uint64_t)v1;
}

void sub_100139444(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    id v6 = xpc_connection_get_context(*(xpc_connection_t *)(a1 + 32));
    if (v3 == &_xpc_error_connection_invalid)
    {
      int v7 = daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v12 = 134217984;
        __int16 v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "XPC_ERROR_CONNECTION_INVALID <%p>", (uint8_t *)&v12, 0xCu);
      }
    }
    else if (v3 == &_xpc_error_connection_interrupted)
    {
      int v7 = daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10013AD48();
      }
    }
    else
    {
      int v7 = daemon_log();
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if (v3 == &_xpc_error_termination_imminent)
      {
        if (v8) {
          sub_10013ADB4();
        }
      }
      else if (v8)
      {
        sub_10013AE20();
      }
    }

    if (v6)
    {
      [v6 invalidate];
      __int16 v11 = [v6 objectKey];
      if (v11) {
        [*(id *)(*(void *)(a1 + 40) + 112) removeObjectForKey:v11];
      }
      [*(id *)(*(void *)(a1 + 40) + 8) removeObject:v6];
      xpc_connection_set_context(*(xpc_connection_t *)(a1 + 32), 0);
    }
  }
  else
  {
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      string = xpc_dictionary_get_string(v3, "Object");
      if (!string) {
        goto LABEL_27;
      }
      uint64_t v10 = string;
      if (!strcmp(string, "Browser"))
      {
        [*(id *)(a1 + 40) handleBrowserMessage:v3 forConnection:*(void *)(a1 + 32)];
        goto LABEL_27;
      }
      if (!strcmp(v10, "Operation"))
      {
        [*(id *)(a1 + 40) handleOperationMessage:v3 forConnection:*(void *)(a1 + 32)];
        goto LABEL_27;
      }
      uint64_t v5 = daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10013AE8C();
      }
    }
    else
    {
      uint64_t v5 = daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_10013AEC0();
      }
    }
  }
LABEL_27:
}

void sub_10013A100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10013A120(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    uint64_t v5 = daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (v3 == &_xpc_error_termination_imminent)
    {
      if (v6) {
        sub_10013AF6C();
      }
    }
    else if (v6)
    {
      sub_10013AFA0();
    }
    goto LABEL_11;
  }
  if (type != (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v5 = daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10013AFD4();
    }
LABEL_11:

    goto LABEL_12;
  }
  [*(id *)(a1 + 32) handleNewConnection:v3];
LABEL_12:
}

id sub_10013A1F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) stateCapture];
}

void sub_10013A1FC(id a1)
{
  id v1 = (id)GestaltCopyAnswer();
  byte_100967F98 = [v1 isEqual:@"AppleTV5,3"] ^ 1;
}

Class sub_10013A558(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1009800C0)
  {
    v3[1] = _NSConcreteStackBlock;
    _DWORD v3[2] = (void *)3221225472;
    void v3[3] = sub_10013A684;
    v3[4] = &unk_1008CB370;
    void v3[5] = v3;
    long long v4 = off_1008CE078;
    uint64_t v5 = 0;
    qword_1009800C0 = _sl_dlopen();
  }
  if (!qword_1009800C0) {
    sub_10013B008(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("DDUICoreAgent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10013B088();
  }
  qword_1009800B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10013A684()
{
  uint64_t result = _sl_dlopen();
  qword_1009800C0 = result;
  return result;
}

void sub_10013A6F8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "stringFromXPCObject result is not a string", v2, v3, v4, v5, v6);
}

void sub_10013A72C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "arrayFromXPCObject result is not an array", v2, v3, v4, v5, v6);
}

void sub_10013A760()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "numberFromXPCObject result is not a number or BOOLean", v2, v3, v4, v5, v6);
}

void sub_10013A794(void *a1, NSObject *a2)
{
  uint64_t v5 = [a1 connection];
  int v7 = sub_1001B3F50(v5);
  BOOL v8 = v7;
  if (!v7)
  {
    uint64_t v2 = [a1 connection];
    xpc_connection_get_pid(v2);
    BOOL v8 = NSPrintF();
  }
  int v9 = 138412290;
  uint64_t v10 = v8;
  sub_1001215E8((void *)&_mh_execute_header, a2, v6, "%@ is not entitled to do AirDrop discovery", (uint8_t *)&v9);
  if (!v7)
  {
  }
}

void sub_10013A888(void *a1, NSObject *a2)
{
  uint64_t v3 = sub_1001B3F50(a1);
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, a2, v4, "%@ is not entitled to get the AirDrop discoverable mode", v5);
}

void sub_10013A914()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "handleBrowserMessage functionName is NULL", v2, v3, v4, v5, v6);
}

void sub_10013A948()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "kSharingBrowserCreate kind is NULL", v2, v3, v4, v5, v6);
}

void sub_10013A97C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "kSharingBrowserCreate node is NULL", v2, v3, v4, v5, v6);
}

void sub_10013A9B0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "handleBrowserMessage browser is NULL", v2, v3, v4, v5, v6);
}

void sub_10013A9E4()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "openNode returned %d", v2, v3, v4, v5, v6);
}

void sub_10013AA4C()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "closeNode returned %d", v2, v3, v4, v5, v6);
}

void sub_10013AAB4()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "addNode returned %d", v2, v3, v4, v5, v6);
}

void sub_10013AB1C()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "removeNode returned %d", v2, v3, v4, v5, v6);
}

void sub_10013AB84()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "handleOperationMessage functionName is NULL", v2, v3, v4, v5, v6);
}

void sub_10013ABB8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "kSharingOperationCreate kind is NULL", v2, v3, v4, v5, v6);
}

void sub_10013ABEC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "kSharingOperationCreate operation is NULL", v2, v3, v4, v5, v6);
}

void sub_10013AC20()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "handleOperationMessage operation is NULL", v2, v3, v4, v5, v6);
}

void sub_10013AC54()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "kSharingOperationSetProperty name is NULL", v2, v3, v4, v5, v6);
}

void sub_10013AC88(void *a1, NSObject *a2)
{
  uint64_t v3 = sub_1001B3F50(a1);
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, a2, v4, "%@ is not entitled to set the AirDrop discoverable mode", v5);
}

void sub_10013AD14()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "kSharingOperationResume imageData is invalid", v2, v3, v4, v5, v6);
}

void sub_10013AD48()
{
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, v0, v1, "Lost connection to client <%p>", v2);
}

void sub_10013ADB4()
{
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, v0, v1, "XPC_ERROR_TERMINATION_IMMINENT <%p>", v2);
}

void sub_10013AE20()
{
  sub_10002972C();
  sub_1001215E8((void *)&_mh_execute_header, v0, v1, "handleNewConnection unknown XPC error <%p>", v2);
}

void sub_10013AE8C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "handleNewConnection unknown object", v2, v3, v4, v5, v6);
}

void sub_10013AEC0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "handleNewConnection unknown XPC type", v2, v3, v4, v5, v6);
}

void sub_10013AEF4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
    a5,
    a6,
    a7,
    a8,
    0);
}

void sub_10013AF6C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "XPC_ERROR_TERMINATION_IMMINENT", v2, v3, v4, v5, v6);
}

void sub_10013AFA0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Unknown XPC error", v2, v3, v4, v5, v6);
}

void sub_10013AFD4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Unknown XPC type", v2, v3, v4, v5, v6);
}

void sub_10013B008(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *DeviceDiscoveryUICoreLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SharingDaemon.m" lineNumber:82 description:@"%s", *a1];

  __break(1u);
}

void sub_10013B088()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getDDUICoreAgentClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SharingDaemon.m" lineNumber:83 description:@"Unable to find class %s", "DDUICoreAgent"];

  __break(1u);
}

id sub_10013C1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  return _[a8 handleBrowseCallBack:a2 interface:a3 error:a4 name:a5 type:a6 domain:a7];
}

id sub_10013C304(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateBrowserState];
}

id sub_10013C30C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateBrowserState];
}

id sub_10013D410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  return _[a11 handleQueryCallBack:a2 error:a4 fullname:a5 rrtype:a6 rdlen:a8 rdata:a9];
}

id sub_10013DF24(uint64_t a1)
{
  [*(id *)(a1 + 32) clearCache];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 notifyClient];
}

void sub_10013E954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10013E980(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = airdrop_log();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100140ABC(a1, (uint64_t)v3, v5);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated RPIdentity for %@", (uint8_t *)&v8, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained invalidate];
}

CFStringRef sub_10013EE98(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE) {
    return @"?";
  }
  else {
    return (const __CFString *)*((void *)&off_1008CE178 + a1 - 1);
  }
}

id sub_10013F638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) handleIdentity:a2 withQueryID:*(void *)(a1 + 40) emailOrPhone:*(void *)(a1 + 48) error:a3];
}

void sub_1001406E4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Bonjour browser failed to find awdl0 interface", v2, v3, v4, v5, v6);
}

void sub_100140718(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_10007153C((void *)&_mh_execute_header, a2, a3, "WirelessProximity foundDevice %@ rssi %@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_100140790(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDBonjourBrowser: failedToStartAdvertisingWithError %@", (uint8_t *)&v2, 0xCu);
}

void sub_100140808()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: DNSServiceSetDispatchQueue returned %d", v2, v3, v4, v5, v6);
}

void sub_100140870()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: DNSServiceBrowse returned %d", v2, v3, v4, v5, v6);
}

void sub_1001408D8()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: DNSServiceCreateConnection returned %d", v2, v3, v4, v5, v6);
}

void sub_100140940()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: _SDServiceInstanceName returned nil", v2, v3, v4, v5, v6);
}

void sub_100140974()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: CFStringGetCString failed to get fullName", v2, v3, v4, v5, v6);
}

void sub_1001409A8()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: DNSServiceQueryRecord returned %d", v2, v3, v4, v5, v6);
}

void sub_100140A10()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to update RPIdentity because emailOrPhone is empty", v2, v3, v4, v5, v6);
}

void sub_100140A44(uint64_t a1, NSObject *a2)
{
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to update RPIdentity because contactID is nil for %{private}@", (uint8_t *)&v2, 0xCu);
}

void sub_100140ABC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&v3[4] = *(void *)(a1 + 32);
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_10007153C((void *)&_mh_execute_header, a2, a3, "Failed to update RPIdentity for %@ with error %@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_100140B38()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Discovery validation failed because SecTrustRef is NULL", v2, v3, v4, v5, v6);
}

void sub_100140B6C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 141558531;
  uint64_t v4 = 1752392040;
  __int16 v5 = 2113;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDBonjourBrowse:  failed to copy identity for %{private, mask.hash}@ with error %@", (uint8_t *)&v3, 0x20u);
}

void sub_100140C08()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: handleBrowseCallBack returned %d", v2, v3, v4, v5, v6);
}

void sub_100140C70()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: handleQueryCallBack called with unexpected type %d", v2, v3, v4, v5, v6);
}

void sub_100140CD8()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDBonjourBrowser: handleQueryCallBack returned %d", v2, v3, v4, v5, v6);
}

uint64_t SDAuthenticationPairingCreateRecordReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v30 = 32;
        goto LABEL_52;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_36;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v14 |= (unint64_t)(v23 & 0x7F) << v20;
            if (v23 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v30 = 8;
LABEL_52:
        *(_DWORD *)(a1 + v30) = v14;
        continue;
      case 4u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 24;
LABEL_36:
        int v24 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      case 5u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v27 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0) {
        goto LABEL_54;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        uint64_t v27 = 0;
        goto LABEL_56;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v27 = 0;
    }
LABEL_56:
    *(unsigned char *)(a1 + 36) = v27 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100141B80(uint64_t a1)
{
  return [*(id *)(a1 + 32) onQueue_start];
}

void sub_100141FBC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    CFStringRef v8 = @"Failed to send step data";
    unsigned int v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    unint64_t v6 = +[NSError errorWithDomain:v4 code:103 userInfo:v5];
    [v3 notifyDelegateWithError:v6];
  }
}

id *sub_100142414(id *result)
{
  if (*((_WORD *)result + 24) == 503)
  {
    uint64_t v1 = result;
    uint64_t v2 = auto_unlock_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received SDAutoUnlockMessageTypeRegistrationStep", (uint8_t *)v3, 2u);
    }

    [v1[4] invalidateResponseTimer];
    return (id *)[v1[4] handleStepData:v1[5]];
  }
  return result;
}

void sub_1001424F8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create step data", v2, v3, v4, v5, v6);
}

void sub_10014252C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create AKS session", v2, v3, v4, v5, v6);
}

void sub_100142560()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Device is locked", v2, v3, v4, v5, v6);
}

void sub_100142594()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not parse registration request", v2, v3, v4, v5, v6);
}

void sub_1001425C8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Registration step missing step data", v2, v3, v4, v5, v6);
}

void sub_1001425FC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not confirm session", v2, v3, v4, v5, v6);
}

uint64_t SDAuthenticationPairingDisableReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        uint64_t v25 = 28;
        goto LABEL_45;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_36;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        break;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
LABEL_36:
        int v24 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
      v14 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_42;
      }
      v20 += 7;
      BOOL v9 = v21++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_44:
    uint64_t v25 = 24;
LABEL_45:
    *(_DWORD *)(a1 + v25) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100143488(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 264));
  [WeakRetained fileZipper:a1[4] event:a1[5] withProperty:a1[6]];

  uint64_t v3 = (const void *)a1[6];

  CFRelease(v3);
}

uint64_t sub_1001455F4(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5 = airdrop_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100147208(a2, a3, v5);
  }

  return 2;
}

void sub_100145654(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = airdrop_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001472C0();
  }

  char v4 = BOMCopierUserData();
  [v4 bomCopierFatalError:a2];
}

void sub_1001456C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOMCopierUserData();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v4 notifyProgress:a3 force:0];
}

void sub_10014571C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = airdrop_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100147328();
  }

  unsigned int v5 = BOMCopierUserData();
  [v5 bomCopierFatalFileError:a3];
}

void sub_100145798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOMCopierUserData();
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  [v9 bomCopierCopyFileFinished:a2 type:a3 size:a4 operation:a5];
}

uint64_t sub_100145808()
{
  id v0 = airdrop_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    sub_1001473AC();
  }

  return 2;
}

void sub_100145858(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void **)(a1[5] + 176);
  if (v2) {
    [v3 executeReadWithAdaptiveCompression];
  }
  else {
    [v3 executeWriteWithAdaptiveCompression];
  }
  id v4 = a1[6];

  dispatch_group_leave(v4);
}

id sub_100145D68(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyProgress:0 force:1];
}

uint64_t sub_100145D78(uint64_t a1)
{
  uint64_t result = BOMCopierFree();
  *(void *)(*(void *)(a1 + 32) + 64) = 0;
  return result;
}

void sub_10014634C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) initBomWithFiles])
  {
    CFWriteStreamRef stream = 0;
    uint64_t v2 = objc_opt_new();
    [v2 setObject:*(void *)(*(void *)(a1 + 32) + 48) forKeyedSubscript:@"indexbom"];
    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"copyResources"];
    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"sourceIsAppSandboxed"];
    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"copyExtendedAttributes"];
    unsigned int v3 = [*(id *)(*(void *)(a1 + 32) + 88) disableCompression];
    uint64_t v4 = *(void *)(a1 + 32);
    if (v3)
    {
      if (!*(unsigned char *)(v4 + 8))
      {
        unsigned int v5 = airdrop_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using CPIO archiving", buf, 2u);
        }

        CFStringRef v6 = (const __CFString *)&__kCFBooleanTrue;
        CFStringRef v7 = @"createCPIO";
LABEL_24:
        [v2 setObject:v6 forKeyedSubscript:v7];
        CFWriteStreamRef stream = (CFWriteStreamRef)CFRetain(*(CFTypeRef *)(*(void *)(a1 + 32) + 104));
        unsigned int v13 = off_1008CF9E0;
LABEL_25:
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 248), *v13);
        unint64_t v15 = (void *)sub_1001B1E48(*(const __CFArray **)(*(void *)(a1 + 32) + 224));
        if (stream)
        {
          if (CFWriteStreamOpen(stream))
          {
            [v2 setObject:stream forKeyedSubscript:@"outputStream"];
          }
          else
          {
            char v16 = airdrop_log();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
              sub_10014778C();
            }
          }
          CFRelease(stream);
        }
        [*(id *)(a1 + 32) startBomCopy:v15 destination:*(void *)(*(void *)(a1 + 32) + 56) options:v2];

        goto LABEL_33;
      }
    }
    else if (!*(unsigned char *)(v4 + 8))
    {
      unsigned int v9 = [*(id *)(v4 + 88) enablePKZip];
      uint64_t v4 = *(void *)(a1 + 32);
      if (!v9)
      {
        if ([*(id *)(v4 + 88) enableDVZip] && !*(unsigned char *)(*(void *)(a1 + 32) + 216))
        {
          *(void *)buf = 0;
          __int16 v17 = airdrop_log();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)unint64_t v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using CPIO archiving with adaptive compression", v22, 2u);
          }

          [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"createCPIO"];
          CFStreamCreateBoundPair(0, (CFReadStreamRef *)buf, &stream, *(void *)(*(void *)(a1 + 32) + 208));
          uint64_t v18 = [SDAirDropCompressor alloc];
          uint64_t v19 = [(SDAirDropCompressor *)v18 initWithReadStream:*(void *)buf writeStream:*(void *)(*(void *)(a1 + 32) + 104)];
          uint64_t v20 = *(void *)(a1 + 32);
          unsigned int v21 = *(void **)(v20 + 176);
          *(void *)(v20 + 176) = v19;

          CFRelease(*(CFTypeRef *)buf);
          unsigned int v13 = off_1008CF9F0;
          goto LABEL_25;
        }
        uint64_t v14 = airdrop_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using CPIO archiving with gzip compression", buf, 2u);
        }

        [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"createCPIO"];
        CFStringRef v6 = @"gzip";
        CFStringRef v7 = @"compressCPIO";
        goto LABEL_24;
      }
    }
    unsigned int v10 = [*(id *)(v4 + 88) enablePKZipCompression];
    __int16 v11 = airdrop_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      char v12 = "archiving";
      if (v10) {
        char v12 = "compression";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using PKZip %s", buf, 0xCu);
    }

    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"createPKZip"];
    if ((v10 & 1) == 0) {
      [v2 setObject:&off_100902CB8 forKeyedSubscript:@"zlibCompressionLevel"];
    }
    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"sequesterResources"];
    CFWriteStreamRef stream = (CFWriteStreamRef)CFRetain(*(CFTypeRef *)(*(void *)(a1 + 32) + 104));
    unsigned int v13 = off_1008CF9E8;
    goto LABEL_25;
  }
  char v8 = airdrop_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_1001477C0();
  }

  uint64_t v2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
  [*(id *)(a1 + 32) notifyClientForEvent:10 withProperty:v2];
LABEL_33:
}

void sub_1001468D8(uint64_t a1)
{
  CFReadStreamRef readStream = 0;
  uint64_t v2 = objc_opt_new();
  [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"copyResources"];
  [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"copyExtendedAttributes"];
  if ([*(id *)(*(void *)(a1 + 32) + 240) isEqual:@"pkzip"])
  {
    unsigned int v3 = airdrop_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unzip: AirDrop is using PKZip compression", buf, 2u);
    }

    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"extractPKZip"];
    CFStringRef v4 = @"sequesterResources";
    unsigned int v5 = v2;
    CFStringRef v6 = (const __CFString *)&__kCFBooleanTrue;
    goto LABEL_13;
  }
  if (![*(id *)(*(void *)(a1 + 32) + 240) isEqual:@"dvzip"])
  {
    unsigned int v13 = airdrop_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Unzip: AirDrop is using CPIO archiving with auto compression detection", buf, 2u);
    }

    [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"extractCPIO"];
    CFStringRef v6 = @"auto";
    CFStringRef v4 = @"compressCPIO";
    unsigned int v5 = v2;
LABEL_13:
    [v5 setObject:v6 forKeyedSubscript:v4];
    char v12 = (__CFReadStream *)CFRetain(*(CFTypeRef *)(*(void *)(a1 + 32) + 96));
    CFReadStreamRef readStream = v12;
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  *(void *)buf = 0;
  CFStringRef v7 = airdrop_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unzip: AirDrop is using CPIO archiving with adaptive compression", v15, 2u);
  }

  [v2 setObject:&__kCFBooleanTrue forKeyedSubscript:@"extractCPIO"];
  CFStreamCreateBoundPair(0, &readStream, (CFWriteStreamRef *)buf, *(void *)(*(void *)(a1 + 32) + 208));
  char v8 = [SDAirDropCompressor alloc];
  unsigned int v9 = [(SDAirDropCompressor *)v8 initWithReadStream:*(void *)(*(void *)(a1 + 32) + 96) writeStream:*(void *)buf];
  uint64_t v10 = *(void *)(a1 + 32);
  __int16 v11 = *(void **)(v10 + 176);
  *(void *)(v10 + 176) = v9;

  CFRelease(*(CFTypeRef *)buf);
  char v12 = readStream;
  if (readStream)
  {
LABEL_14:
    if (CFReadStreamOpen(v12))
    {
      [v2 setObject:readStream forKeyedSubscript:@"inputStream"];
    }
    else
    {
      uint64_t v14 = airdrop_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10014785C();
      }
    }
    CFRelease(readStream);
  }
LABEL_20:
  [*(id *)(a1 + 32) startBomCopy:0 destination:*(void *)(*(void *)(a1 + 32) + 40) options:v2];
}

uint64_t sub_100146C10(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 64);
  if (result) {
    return _BOMCopierCancelCopy();
  }
  return result;
}

void sub_100146E38()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMFSObjectNewFromPath(\"%s\") failed", v2, v3, v4, v5, v6);
}

void sub_100146EA0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMBomInsertFSObject(\"%s\") failed", v2, v3, v4, v5, v6);
}

void sub_100146F08()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: createPlaceholderFiles placeholderFiles is NULL", v2, v3, v4, v5, v6);
}

void sub_100146F3C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: createPlaceholderFiles file count is zero", v2, v3, v4, v5, v6);
}

void sub_100146F70(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropFileZipper: createPlaceholderFiles originalName[%d] is nil", (uint8_t *)v2, 8u);
}

void sub_100146FE8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: createPlaceholderFiles originalName \"%s\" contains illegal characters", v2, v3, v4, v5, v6);
}

void sub_100147050(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropFileZipper: CFURLCopyLastPathComponent returned NULL", buf, 2u);
}

void sub_100147090(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropFileZipper: createPlaceholderFiles conflict not handled", buf, 2u);
}

void sub_1001470D0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: moveObjectAtURL2 %@", v2, v3, v4, v5, v6);
}

void sub_100147138()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: removeObjectAtURL %@", v2, v3, v4, v5, v6);
}

void sub_1001471A0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: moveObjectAtURL %@", v2, v3, v4, v5, v6);
}

void sub_100147208(uint64_t a1, int __errnum, NSObject *a3)
{
  int v4 = 136315650;
  uint64_t v5 = a1;
  __int16 v6 = 1024;
  int v7 = __errnum;
  __int16 v8 = 2080;
  unsigned int v9 = strerror(__errnum);
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDAirDropFileZipper: bomCopierFileErrorPtr - %s, errno = %d (%s)", (uint8_t *)&v4, 0x1Cu);
}

void sub_1001472C0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: bomCopierFatalErrorPtr - %s", v2, v3, v4, v5, v6);
}

void sub_100147328()
{
  sub_10002972C();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "SDAirDropFileZipper: bomCopierFatalFileErrorPtr - %s (%d)", v2, 0x12u);
}

void sub_1001473AC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: bomCopierFileConflictErrorPtr - %s", v2, v3, v4, v5, v6);
}

void sub_100147414()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: No files were found", v2, v3, v4, v5, v6);
}

void sub_100147448(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropFileZipper: BOMCopierCopyWithOptions returned %d", (uint8_t *)v2, 8u);
}

void sub_1001474C0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: createPlaceholderFiles failed", v2, v3, v4, v5, v6);
}

void sub_1001474F4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10014757C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: _bomPath is nil", v2, v3, v4, v5, v6);
}

void sub_1001475B0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMBomNew returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001475E4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMFSObjectNewFromPath failed", v2, v3, v4, v5, v6);
}

void sub_100147618(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018D34((void *)&_mh_execute_header, a2, a3, "SDAirDropFileZipper: copyCommonParent(%@) returned NULL", a5, a6, a7, a8, 2u);
}

void sub_100147688()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropZipper: delegate is nil, initBomWithFiles failed", v2, v3, v4, v5, v6);
}

void sub_1001476BC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMBomInsertFSObject failed", v2, v3, v4, v5, v6);
}

void sub_1001476F0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: copyUserFolder returned NULL", v2, v3, v4, v5, v6);
}

void sub_100147724()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: CFURLCreateWithFileSystemPathRelativeToBase returned NULL", v2, v3, v4, v5, v6);
}

void sub_100147758()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: CFURLCopyAbsoluteURL returned NULL", v2, v3, v4, v5, v6);
}

void sub_10014778C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: CFWriteStreamOpen failed", v2, v3, v4, v5, v6);
}

void sub_1001477C0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: initBomWithFiles failed", v2, v3, v4, v5, v6);
}

void sub_1001477F4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: _SDUniqueTemporaryFolder failed %@", v2, v3, v4, v5, v6);
}

void sub_10014785C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: CFReadStreamOpen failed", v2, v3, v4, v5, v6);
}

id sub_10014796C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

void sub_100147E74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id sub_100147E8C(uint64_t a1)
{
  if (dword_100967FA0 <= 50 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(*(void *)(a1 + 32) + 8) prefsChanged];
  [*(id *)(*(void *)(a1 + 32) + 24) prefsChanged];
  [*(id *)(*(void *)(a1 + 32) + 56) prefsChanged];
  [*(id *)(*(void *)(a1 + 32) + 64) prefsChanged];
  [*(id *)(*(void *)(a1 + 32) + 80) prefsChanged];
  [*(id *)(*(void *)(a1 + 32) + 88) prefsChanged];
  [*(id *)(*(void *)(a1 + 32) + 96) prefsChanged];
  [*(id *)(*(void *)(a1 + 32) + 112) prefsChanged];
  [*(id *)(*(void *)(a1 + 32) + 16) prefsChanged];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 104);

  return [v2 prefsChanged];
}

id sub_100147F80(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stateDump];
}

id sub_100147FFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_100148644(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _connectionInvalidated:*(void *)(a1 + 40)];
}

void sub_1001497AC(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 112) + 48));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v2 autoFillDismissUserNotification];
}

void sub_100149810(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v6 = a3;
  dispatch_assert_queue_V2(v5);
  id v7 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v7 autoFillPairingSucceeded:a2 completion:v6];
}

void sub_100149898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 112) + 48));
  id v6 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v6 autoFillPromptForPIN:a2 throttleSeconds:a3];
}

void sub_10014A7DC()
{
  int v0 = daemon_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    sub_100157494(v0);
  }
}

void sub_10014B914(uint64_t a1)
{
  id v2 = +[SDStatusMonitor sharedMonitor];
  v80[0] = CNContactEmailAddressesKey;
  v80[1] = CNContactPhoneNumbersKey;
  uint64_t v3 = +[NSArray arrayWithObjects:v80 count:2];
  uint64_t v4 = [*(id *)(a1 + 32) contactIdentifier];
  if (v4)
  {
    uint64_t v5 = [v2 contactWithContactIdentifier:v4];
    if (v5)
    {
      id v6 = (id)v5;
      if (*(unsigned char *)(a1 + 48)
        && (+[SDStatusMonitor sharedMonitor],
            id v7 = objc_claimAutoreleasedReturnValue(),
            unsigned int v8 = [v7 contactIsBlocked:v6],
            v7,
            v8))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = NSErrorWithOSStatusF();
        (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
      }
      else
      {
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      }
LABEL_22:

LABEL_23:
      goto LABEL_24;
    }
  }

  uint64_t v4 = [*(id *)(a1 + 32) emailAddress];
  if (v4)
  {
    unint64_t v58 = v3;
    [v2 contactsWithPhoneNumberOrEmail:v4 keys:v3];
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v11 = [v6 countByEnumeratingWithState:&v72 objects:v79 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v73;
      while (2)
      {
        for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v73 != v13) {
            objc_enumerationMutation(v6);
          }
          if (*(unsigned char *)(a1 + 48))
          {
            uint64_t v15 = *(void *)(*((void *)&v72 + 1) + 8 * i);
            char v16 = +[SDStatusMonitor sharedMonitor];
            LOBYTE(v15) = [v16 contactIsBlocked:v15];

            if (v15)
            {
              uint64_t v19 = *(void *)(a1 + 40);
              uint64_t v20 = NSErrorWithOSStatusF();
              (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v20);

              __int16 v17 = v6;
              goto LABEL_20;
            }
          }
        }
        id v12 = [v6 countByEnumeratingWithState:&v72 objects:v79 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    if ([v6 count])
    {
      __int16 v17 = [v2 contactWithPreferredIdentifierForContacts:v6];
      uint64_t v18 = [v17 identifier];
      [*(id *)(a1 + 32) setContactIdentifier:v18];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_20:
      uint64_t v3 = v58;
LABEL_21:

      goto LABEL_22;
    }
    uint64_t v57 = v2;
    CFStringRef v21 = @"@icloud.com";
    if ([v4 rangeOfString:@"@icloud.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      CFStringRef v21 = @"@mac.com";
      uint64_t v3 = v58;
      if ([v4 rangeOfString:@"@mac.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        CFStringRef v21 = @"@me.com";
        if ([v4 rangeOfString:@"@me.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          CFStringRef v21 = @"@gmail.com";
          if ([v4 rangeOfString:@"@gmail.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
          {
            CFStringRef v21 = @"@googlemail.com";
            if ([v4 rangeOfString:@"@googlemail.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
            {
              CFStringRef v21 = 0;
              unint64_t v22 = 0;
            }
            else
            {
              unint64_t v22 = &off_100907088;
            }
          }
          else
          {
            unint64_t v22 = &off_100907070;
          }
        }
        else
        {
          unint64_t v22 = &off_100907058;
        }
      }
      else
      {
        unint64_t v22 = &off_100907040;
      }
    }
    else
    {
      unint64_t v22 = &off_100907028;
      uint64_t v3 = v58;
    }
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    id v23 = [v22 countByEnumeratingWithState:&v68 objects:v78 count:16];
    if (v23)
    {
      uint64_t v24 = *(void *)v69;
      unint64_t v52 = v22;
      CFStringRef v53 = v21;
      uint64_t v51 = *(void *)v69;
      while (2)
      {
        uint64_t v25 = 0;
        id v54 = v23;
        do
        {
          if (*(void *)v69 != v24) {
            objc_enumerationMutation(v22);
          }
          uint64_t v55 = v25;
          __int16 v17 = [v4 stringByReplacingOccurrencesOfString:v21 withString:*(void *)(*((void *)&v68 + 1) + 8 * v25)];
          unsigned int v26 = [v2 contactsWithPhoneNumberOrEmail:v17 keys:v3];

          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          id v6 = v26;
          id v27 = [v6 countByEnumeratingWithState:&v64 objects:v77 count:16];
          if (v27)
          {
            id v28 = v27;
            uint64_t v29 = *(void *)v65;
            while (2)
            {
              for (j = 0; j != v28; j = (char *)j + 1)
              {
                if (*(void *)v65 != v29) {
                  objc_enumerationMutation(v6);
                }
                uint64_t v31 = *(void *)(*((void *)&v64 + 1) + 8 * (void)j);
                uint64_t v32 = +[SDStatusMonitor sharedMonitor];
                LODWORD(v31) = [v32 contactIsBlocked:v31];

                if (v31)
                {
                  uint64_t v47 = *(void *)(a1 + 40);
                  char v48 = NSErrorWithOSStatusF();
                  (*(void (**)(uint64_t, void, void *))(v47 + 16))(v47, 0, v48);

                  unsigned int v49 = v6;
                  id v2 = v57;
                  goto LABEL_72;
                }
              }
              id v28 = [v6 countByEnumeratingWithState:&v64 objects:v77 count:16];
              if (v28) {
                continue;
              }
              break;
            }
          }

          if ([v6 count])
          {
            id v2 = v57;
            unsigned int v49 = [v57 contactWithPreferredIdentifierForContacts:v6];
            uint64_t v50 = [v49 identifier];
            [*(id *)(a1 + 32) setContactIdentifier:v50];

            [*(id *)(a1 + 32) setEmailAddress:v17];
            (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_72:
            uint64_t v3 = v58;

            goto LABEL_21;
          }

          uint64_t v25 = v55 + 1;
          id v2 = v57;
          uint64_t v3 = v58;
          unint64_t v22 = v52;
          CFStringRef v21 = v53;
          uint64_t v24 = v51;
        }
        while ((id)(v55 + 1) != v54);
        id v23 = [v52 countByEnumeratingWithState:&v68 objects:v78 count:16];
        if (v23) {
          continue;
        }
        break;
      }
    }
  }
  __int16 v33 = [*(id *)(a1 + 32) phoneNumber];
  BOOL v34 = v33 != 0;
  if (v33)
  {
    __int16 v35 = [v2 contactsWithPhoneNumberOrEmail:v33 keys:v3];
    if ([v35 count])
    {
      char v59 = v3;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      uint64_t v56 = v35;
      id v36 = v35;
      id v37 = [v36 countByEnumeratingWithState:&v60 objects:v76 count:16];
      if (v37)
      {
        id v38 = v37;
        uint64_t v39 = *(void *)v61;
        while (2)
        {
          for (k = 0; k != v38; k = (char *)k + 1)
          {
            if (*(void *)v61 != v39) {
              objc_enumerationMutation(v36);
            }
            if (*(unsigned char *)(a1 + 48))
            {
              uint64_t v41 = *(void *)(*((void *)&v60 + 1) + 8 * (void)k);
              uint64_t v42 = +[SDStatusMonitor sharedMonitor];
              LOBYTE(v41) = [v42 contactIsBlocked:v41];

              if (v41)
              {
                uint64_t v44 = *(void *)(a1 + 40);
                CFRange v45 = NSErrorWithOSStatusF();
                (*(void (**)(uint64_t, void, void *))(v44 + 16))(v44, 0, v45);

                goto LABEL_67;
              }
            }
          }
          id v38 = [v36 countByEnumeratingWithState:&v60 objects:v76 count:16];
          if (v38) {
            continue;
          }
          break;
        }
      }

      id v36 = [v2 contactWithPreferredIdentifierForContacts:v36];
      __int16 v43 = [v36 identifier];
      [*(id *)(a1 + 32) setContactIdentifier:v43];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_67:

      uint64_t v3 = v59;
      BOOL v34 = v33 != 0;
      __int16 v35 = v56;
    }
    else
    {
      BOOL v34 = 0;
    }
  }
  if (!v34)
  {
    uint64_t v46 = *(void *)(a1 + 40);
    uint64_t v4 = NSErrorWithOSStatusF();
    (*(void (**)(uint64_t, void, void *))(v46 + 16))(v46, 0, v4);
    goto LABEL_23;
  }
LABEL_24:
}

void sub_10014C418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  (*(void (**)(uint64_t))(v17 + 16))(v17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10014C464(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10014C474(uint64_t a1)
{
}

uint64_t sub_10014C47C(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100967FA0 <= 90 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_10014C554(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = a5;
  id v7 = [a2 bundlePath];
  if (v7)
  {
    if (dword_100967FA0 <= 30 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v9 = objc_alloc_init((Class)SFClientGetDeviceAssetsResults);
    [v9 setAssetBundlePath:v7];
    (*(void (**)(void, id, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v9, 0);
  }
  else
  {
    if (v10)
    {
      id v8 = v10;
    }
    else
    {
      NSErrorF();
      id v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v9 = v8;
    if (dword_100967FA0 <= 90 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    (*(void (**)(void, void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, v9);
  }
}

id sub_10014C8DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getPeopleInfo:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_10014C8EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getPeopleSuggestions:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10014D310(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5)
  {
    if (dword_100967FA0 <= 90 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  else if (dword_100967FA0 <= 30 && (dword_100967FA0 != -1 || _LogCategory_Initialize()))
  {
    [v6 count];
    LogPrintF();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_10014DE04(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (dword_100967FA0 <= 90)
  {
    id v5 = v2;
    if (dword_100967FA0 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v5, v4))
    {
      LogPrintF();
      uint64_t v3 = v5;
    }
  }
}

void sub_100150474(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 deviceDiscoveryFoundDevice:v4];
}

void sub_1001504F4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 deviceDiscoveryLostDevice:v4];
}

void sub_100150574(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v6 = a2;
  dispatch_assert_queue_V2(v5);
  id v7 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v7 deviceDiscoveryDeviceChanged:v6 changes:a3];
}

void sub_1001505FC(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 112) + 48));
  id v4 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v4 deviceDiscoveryScanStateChanged:a2];
}

void sub_10015344C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 proximityClientDeviceEnteredImmediate:v4];
}

void sub_1001534CC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 proximityClientDeviceExitedImmediate:v4];
}

void sub_10015354C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 proximityClientDeviceEnteredNearby:v4];
}

void sub_1001535CC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 proximityClientDeviceExitedNearby:v4];
}

void sub_10015364C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 proximityClientDeviceWasDismissedHandler:v4 reason:0];
}

void sub_1001536D0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v6 = a2;
  dispatch_assert_queue_V2(v5);
  id v7 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v7 proximityClientDeviceWasDismissedHandler:v6 reason:a3];
}

void sub_100153758(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 proximityClientDeviceWasSelectedHandler:v4];
}

void sub_1001537D8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 proximityClientDeviceWillTriggerHandler:v4];
}

void sub_100153858(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 proximityClientDeviceDidUntriggerHandler:v4];
}

void sub_1001538D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v8 = a2;
  dispatch_assert_queue_V2(v7);
  id v9 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v9 proximityClientDeviceUpdated:v8 rssi:a3 state:a4];
}

void sub_1001548F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 remoteInteractionSessionRemoteTextEvent:v4];
}

void sub_100154978(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 remoteInteractionSessionTextSessionDidBegin:v4];
}

void sub_1001549F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 remoteInteractionSessionTextSessionDidEnd:v4];
}

void sub_100154A78(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 remoteInteractionSessionTextSessionDidChange:v4];
}

void sub_10015519C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 serviceError:v4];
}

void sub_10015521C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100967FA0 <= 10 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 112) + 48));
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v3 serviceReceivedEvent:v4];
}

void sub_1001552E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v6 = a3;
  id v7 = a2;
  dispatch_assert_queue_V2(v5);
  [*(id *)(a1 + 32) servicePeerDisconnected:v7 error:v6];
  id v8 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v8 servicePeerDisconnected:v7 error:v6];
}

void sub_10015538C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v8 = a4;
  id v9 = a3;
  dispatch_assert_queue_V2(v7);
  id v10 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v10 serviceReceivedFrameType:a2 data:v9 peer:v8];
}

void sub_100155430(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100967FA0 <= 10 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 112) + 48));
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v3 serviceReceivedRequest:v4];
}

void sub_1001554FC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100967FA0 <= 10 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 112) + 48));
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v3 serviceReceivedResponse:v4];
}

id sub_1001555C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) serviceSendFrameType:a2 data:a3 peer:a4];
}

void sub_1001561E0(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 112) + 48));
  id v4 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v4 sessionBluetoothStateChanged:a2];
}

void sub_10015624C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 sessionError:v4];
}

void sub_1001562CC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 sessionReceivedEvent:v4];
}

void sub_10015634C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v6 = a3;
  dispatch_assert_queue_V2(v5);
  id v7 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v7 sessionReceivedFrameType:a2 data:v6];
}

void sub_1001563D4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 sessionReceivedRequest:v4];
}

void sub_100156454(uint64_t a1, void *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 112) + 48);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 136) remoteObjectProxy];
  [v5 sessionReceivedResponse:v4];
}

id sub_1001564D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) sessionSendFrameType:a2 data:a3];
}

void sub_100156D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100156D50(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100967FA0 <= 90 && (dword_100967FA0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_100156E2C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v3 + 120))
  {
    id v5 = *(void **)(v3 + 136);
    id v6 = a3;
    id v7 = [v5 remoteObjectProxy];
    [v7 shareAudioProgressEvent:a2 info:v6];
  }
}

void sub_1001570BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  (*(void (**)(uint64_t))(v7 + 16))(v7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001570F8(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_100967FA0 <= 90)
    {
      if (dword_100967FA0 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

Class sub_1001572F4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1009800D0)
  {
    v3[1] = _NSConcreteStackBlock;
    _DWORD v3[2] = (void *)3221225472;
    void v3[3] = sub_100157420;
    v3[4] = &unk_1008CB370;
    void v3[5] = v3;
    long long v4 = off_1008CE480;
    uint64_t v5 = 0;
    qword_1009800D0 = _sl_dlopen();
  }
  if (!qword_1009800D0) {
    sub_1001574D8(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("UNUserNotificationCenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100157558();
  }
  qword_1009800C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100157420()
{
  uint64_t result = _sl_dlopen();
  qword_1009800D0 = result;
  return result;
}

void sub_100157494(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Caller not properly entitled to receive AppleID info from sharingd: com.apple.sharing.appleidauthentication required", v1, 2u);
}

void sub_1001574D8(void *a1)
{
  id v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *UserNotificationsLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SDXPCServer.m" lineNumber:70 description:@"%s", *a1];

  __break(1u);
}

void sub_100157558()
{
  int v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getUNUserNotificationCenterClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDXPCServer.m" lineNumber:71 description:@"Unable to find class %s", "UNUserNotificationCenter"];

  __break(1u);
}

void sub_100157B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_100157BA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = [*(id *)(a1 + 32) _queue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100157C78;
  v8[3] = &unk_1008CA640;
  id v9 = WeakRetained;
  id v10 = v3;
  id v6 = v3;
  id v7 = WeakRetained;
  dispatch_async(v5, v8);
}

void sub_100157C78(uint64_t a1)
{
  id obj = +[SDShareSheetSlotManager sharedManager];
  objc_sync_enter(obj);
  if (([*(id *)(a1 + 32) invalidateCalled] & 1) == 0)
  {
    [*(id *)(a1 + 32) updateRestrictedActivityTypes:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) nodesPotentiallyUpdated];
  }
  objc_sync_exit(obj);
}

void sub_100157CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100157E44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100157E58(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)UINotificationFeedbackGenerator);
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *(void **)(v3 + 136);
  *(void *)(v3 + 136) = v2;

  [*(id *)(*(void *)(a1 + 32) + 136) prepare];
  id v5 = [objc_alloc((Class)UIImpactFeedbackGenerator) initWithStyle:1];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 152);
  *(void *)(v6 + 152) = v5;

  [*(id *)(*(void *)(a1 + 32) + 152) prepare];
  id v8 = objc_alloc_init((Class)UISelectionFeedbackGenerator);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(v9 + 144);
  *(void *)(v9 + 144) = v8;

  [*(id *)(*(void *)(a1 + 32) + 144) prepare];
  if ((+[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled] & 1) == 0)
  {
    id v11 = [*(id *)(a1 + 32) peopleBrowser];
    [v11 start];
  }
}

void sub_1001580D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001580E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) stop];
}

void sub_1001582B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100158578(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158618(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158934(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158AD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158BF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158D14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158E3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158F58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100159000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100159528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_1001596B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001596C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [v3 transportBundleID];
  id v5 = [*(id *)(a1 + 32) screenTimeMonitor];
  id v6 = [v5 cachedPolicyForBundleID:v4];

  id v7 = v4;
  BOOL v34 = v7;
  id v36 = v6;
  if (v7 == @"com.apple.MobileSMS") {
    goto LABEL_4;
  }
  id v8 = v7;
  if (v7)
  {
    unsigned int v9 = [@"com.apple.MobileSMS" isEqual:v7];

    if (v9)
    {
LABEL_4:
      id v10 = +[SDStatusMonitor sharedMonitor];
      id v11 = [v10 effectiveBlockedAppBundleIDs];
      id v12 = v11;
      CFStringRef v13 = @"com.apple.MobileSMS";
LABEL_5:
      unsigned int v35 = [v11 containsObject:v13];

      goto LABEL_10;
    }
    uint64_t v14 = v8;
    if (v14 == @"com.apple.mobilemail"
      || (uint64_t v15 = v14,
          unsigned int v16 = [@"com.apple.mobilemail" isEqual:v14],
          v15,
          v16))
    {
      id v10 = +[SDStatusMonitor sharedMonitor];
      id v11 = [v10 effectiveBlockedAppBundleIDs];
      id v12 = v11;
      CFStringRef v13 = @"com.apple.mobilemail";
      goto LABEL_5;
    }
  }
  unsigned int v35 = 0;
LABEL_10:
  uint64_t v17 = [*(id *)(a1 + 32) realNameToNodeID];
  uint64_t v18 = [v3 realName];
  uint64_t v19 = [v17 objectForKeyedSubscript:v18];

  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v20 = [*(id *)(a1 + 32) peopleNodes];
  id v21 = [v20 countByEnumeratingWithState:&v37 objects:v49 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v38;
    while (2)
    {
      for (unint64_t i = 0; i != v22; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v38 != v23) {
          objc_enumerationMutation(v20);
        }
        uint64_t v25 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        unsigned int v26 = [v25 identifier];
        id v27 = v19;
        id v28 = v26;
        if (v27 == v28)
        {

LABEL_24:
          [v25 setIsDisabled:v36 != 0];
          [v25 setIsRestricted:v35];
          goto LABEL_25;
        }
        uint64_t v29 = v28;
        if ((v19 == 0) != (v28 != 0))
        {
          unsigned int v30 = [v27 isEqual:v28];

          if (v30) {
            goto LABEL_24;
          }
        }
        else
        {
        }
      }
      id v22 = [v20 countByEnumeratingWithState:&v37 objects:v49 count:16];
      if (v22) {
        continue;
      }
      break;
    }
  }
LABEL_25:

  [v3 setDisabled:v36 != 0];
  uint64_t v31 = share_sheet_log();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = "no";
    __int16 v43 = 2112;
    *(_DWORD *)buf = 138413058;
    if (v36) {
      __int16 v33 = "yes";
    }
    else {
      __int16 v33 = "no";
    }
    id v42 = v3;
    uint64_t v44 = v19;
    if (v35) {
      uint64_t v32 = "yes";
    }
    __int16 v45 = 2080;
    uint64_t v46 = v33;
    __int16 v47 = 2080;
    char v48 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Updating policy for %@/%@, isDisabled:%s, isRestricted:%s", buf, 0x2Au);
  }
}

void sub_100159A70(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v6 = a2;
  id v3 = [v2 screenTimeMonitor];
  long long v4 = [v6 transportBundleIdentifier];
  BOOL v5 = [v3 cachedPolicyForBundleID:v4] != 0;

  [v6 setIsRestricted:v5];
}

void sub_100159E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10015A1A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015A24C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015A260(id a1, _UIActivityMatchingContext *a2)
{
  id v2 = a2;
  [(_UIActivityMatchingContext *)v2 setShouldMatchOnlyUserElectedExtensions:0];
  [(_UIActivityMatchingContext *)v2 setAllowMatchingExtensionActivities:1];
}

void sub_10015A2F4(id a1, _UIActivityMatchingContext *a2)
{
}

void sub_10015AD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10015AF84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015BA10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015BA38(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isFileURL])
  {
    id v2 = [*(id *)(a1 + 32) path];
    id v3 = v2;
    if (v2)
    {
      long long v4 = [v2 pathExtension];
      CFStringRef PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v4, 0);
      if (PreferredIdentifierForTag)
      {
        CFStringRef v6 = PreferredIdentifierForTag;
        if (UTTypeConformsTo(PreferredIdentifierForTag, kUTTypeImage))
        {
          id v7 = +[UIImage imageWithContentsOfFile:v3];
        }
        else
        {
          id v7 = 0;
        }
        CFRelease(v6);
      }
      else
      {
        id v8 = airdrop_log();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          sub_100173E2C();
        }

        id v7 = 0;
      }
    }
    else
    {
      id v7 = 0;
    }
  }
  else
  {
    id v7 = 0;
  }
  id v9 = +[SFAirDropPayload newPayloadWithURL:*(void *)(a1 + 32) description:*(void *)(a1 + 40) previewImage:v7 identifier:*(void *)(*(void *)(a1 + 48) + 72)];
  id v10 = *(void **)(*(void *)(a1 + 48) + 112);
  id v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  [v10 setObject:v9 forKeyedSubscript:v11];
}

void sub_10015BB9C(uint64_t a1)
{
  id v4 = +[SFAirDropPayload newPayloadWithURL:*(void *)(a1 + 32) description:*(void *)(a1 + 40) previewImage:*(void *)(a1 + 48) identifier:*(void *)(*(void *)(a1 + 56) + 72)];
  id v2 = *(void **)(*(void *)(a1 + 56) + 112);
  id v3 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  [v2 setObject:v4 forKeyedSubscript:v3];
}

void sub_10015BEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10015BF24(uint64_t a1)
{
  UIImageJPEGRepresentation(*(UIImage **)(a1 + 32), 1.0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [v6 writeToFile:*(void *)(a1 + 40) atomically:1];
  id v2 = +[NSURL fileURLWithPath:*(void *)(a1 + 40)];
  id v3 = +[SFAirDropPayload newPayloadWithURL:v2 description:*(void *)(a1 + 48) previewImage:*(void *)(a1 + 56) identifier:*(void *)(*(void *)(a1 + 64) + 72)];

  id v4 = *(void **)(*(void *)(a1 + 64) + 112);
  BOOL v5 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  [v4 setObject:v3 forKeyedSubscript:v5];
}

void sub_10015C21C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015C5AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015C5DC(uint64_t a1)
{
  [*(id *)(a1 + 32) writeToFile:*(void *)(a1 + 40) atomically:1];
  id v2 = +[NSURL fileURLWithPath:*(void *)(a1 + 40)];
  id v6 = +[SFAirDropPayload newPayloadWithURL:v2 description:*(void *)(a1 + 48) previewImage:*(void *)(a1 + 56) identifier:*(void *)(*(void *)(a1 + 64) + 72)];

  id v3 = *(void **)(*(void *)(a1 + 64) + 112);
  id v4 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  [v3 setObject:v6 forKeyedSubscript:v4];

  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }
}

void sub_10015C8C0(id a1, SFAirDropPayload *a2)
{
}

void sub_10015CE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10015D654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10015D8B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015DA78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015E604(id a1)
{
  uint64_t v1 = objc_alloc_init(SDShareSheetSlotManager);
  id v2 = (void *)qword_1009800D8;
  qword_1009800D8 = (uint64_t)v1;
}

void sub_10015E900(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015EA24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015EAA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015F6C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10015F758(uint64_t a1)
{
  return _[*(id *)(a1 + 32) impactOccurred];
}

id sub_10015F760(uint64_t a1)
{
  return _[*(id *)(a1 + 32) notificationOccurred:0];
}

id sub_10015F76C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) notificationOccurred:1];
}

id sub_10015F778(uint64_t a1)
{
  return _[*(id *)(a1 + 32) notificationOccurred:2];
}

void sub_10015F8F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015FA40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015FB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10015FB58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = daemon_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001741F4(a1);
  }
}

void sub_10015FFE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001604D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100160868(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100160958(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100160A68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100160B30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100160DE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100160DF8(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = share_sheet_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100174364();
    }
  }
  else
  {
    [a1[4] prepareWithActivityItemData:v8];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100160F3C;
    block[3] = &unk_1008CE8E8;
    id v12 = a1[5];
    id v13 = v7;
    id v14 = v8;
    id v15 = a1[6];
    id v16 = a1[7];
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    id v10 = v12;
  }
}

id sub_100160F3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendItems:*(void *)(a1 + 40) itemData:*(void *)(a1 + 48) toEndpointUUID:*(void *)(a1 + 56) withNode:*(void *)(a1 + 64)];
}

void sub_1001616BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100161748(uint64_t a1)
{
  id v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_1001743CC(a1, v2, v3, v4, v5, v6, v7, v8);
  }
}

id sub_100161794(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = share_sheet_log();
  uint64_t v8 = share_sheet_log();
  os_signpost_id_t v9 = os_signpost_id_make_with_pointer(v8, *(const void **)(a1 + 32));

  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, v9, "LoadShortcutsActivities", " enableTelemetry=YES ", buf, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v11 = [*(id *)(a1 + 40) urlsBeingShared];
  id v12 = objc_loadWeakRetained((id *)(a1 + 56));
  id v13 = [v12 hostConfiguration];
  id v14 = [WeakRetained _shortcutActivitiesForMatchingDictionaries:v6 resolvedActivityItems:v11 hostBundleID:v5 configuration:v13];

  id v15 = share_sheet_log();
  id v16 = share_sheet_log();
  os_signpost_id_t v17 = os_signpost_id_make_with_pointer(v16, *(const void **)(a1 + 32));

  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)uint64_t v19 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_END, v17, "LoadShortcutsActivities", " enableTelemetry=YES ", v19, 2u);
  }

  return v14;
}

void sub_100161958(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleAirDropTransferUpdated:v3];
}

void sub_1001619B4(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained handleAirDropNodesChanged:v4 sessionID:*(void *)(a1 + 32)];
}

void sub_100161AF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001620CC(uint64_t a1, void *a2, uint64_t a3)
{
  id v13 = a2;
  if ([v13 iconImage])
  {
    id v5 = [v13 iconImage];
    [v13 iconScale];
    id v6 = +[UIImage imageWithCGImage:scale:orientation:](UIImage, "imageWithCGImage:scale:orientation:", v5, 0);
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_alloc((Class)UIShortcutActivity);
  uint64_t v8 = *(void *)(a1 + 32);
  os_signpost_id_t v9 = [v13 name];
  id v10 = [v13 identifier];
  id v11 = +[NSNumber numberWithUnsignedInteger:a3];
  id v12 = [v7 initWithApplicationExtension:v8 partialShortcutWithName:v9 identifier:v10 image:v6 sortValue:v11];

  [*(id *)(a1 + 40) addObject:v12];
}

void sub_1001627FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

id sub_10016285C(void *a1, uint64_t a2)
{
  id v3 = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100173B70;
  v7[3] = &unk_1008CEDD0;
  void v7[4] = a2;
  id v4 = [v3 indexesOfObjectsPassingTest:v7];
  if ([v4 count])
  {
    id v5 = [v3 objectsAtIndexes:v4];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

uint64_t sub_10016292C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) shareUserDefaults];
  unsigned int v5 = [v4 activityIsHidden:v3];

  id v6 = share_sheet_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = "no";
    if (v5) {
      id v7 = "yes";
    }
    int v9 = 138412546;
    id v10 = v3;
    __int16 v11 = 2080;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "<%@, isHidden:%s>", (uint8_t *)&v9, 0x16u);
  }

  return v5 ^ 1;
}

void sub_100162A2C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 dataSourceDidUpdateForSession:WeakRetained animated:0];
}

void sub_100162E40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100163244(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100163280(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) actionUserDefaults];
  unsigned int v5 = [v4 activityIsHidden:v3];

  id v6 = share_sheet_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = "no";
    if (v5) {
      id v7 = "yes";
    }
    int v11 = 138412546;
    id v12 = v3;
    __int16 v13 = 2080;
    id v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "<%@, isHidden:%s>", (uint8_t *)&v11, 0x16u);
  }

  if (v5)
  {
    uint64_t v8 = 0;
  }
  else if ([*(id *)(a1 + 40) sharingExpanded])
  {
    int v9 = [v3 activityType];
    uint64_t v8 = [v9 isEqualToString:UIActivityTypeShare] ^ 1;
  }
  else
  {
    uint64_t v8 = 1;
  }

  return v8;
}

void sub_1001634A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001640E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_10016418C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _configureSharingSectionsForSession:*(void *)(a1 + 32)];
}

void sub_1001642A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];
  if (v4)
  {

LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_6;
  }
  unsigned int v5 = [*(id *)(a1 + 32) activityType];
  unsigned int v6 = [v5 isEqual:UIActivityTypeMail];

  if (!v6) {
    goto LABEL_5;
  }
  id v7 = [objc_alloc((Class)SFCollaborationCloudSharingMailRequest) initWithCloudSharingRequest:*(void *)(a1 + 32) result:v3];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1001643D4;
  v8[3] = &unk_1008CEA00;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  +[SFCollaborationUtilities createMailContentForRequest:v7 completionHandler:v8];

LABEL_6:
}

uint64_t sub_1001643D4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setMailResult:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_100165378(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001653A4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) xpcHelperCnx];
  id v3 = [v2 perspectiveDataForNearbyBadgeWithCount:*(void *)(a1 + 40)];

  return v3;
}

CGImageRef sub_1001653FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) xpcHelperCnx];
  CGImageRef v3 = CGImageRetain((CGImageRef)[v2 CGImgForNearbyBadgeWithCount:*(void *)(a1 + 40)]);

  return v3;
}

void sub_100165B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id obj)
{
}

void sub_100165C08(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 _defaultSortGroup] == (id)4)
  {
    CGImageRef v3 = [v4 activityUUID];
    [*(id *)(a1 + 32) setActivityIdentifierShare:v3];
  }
  else
  {
    if ([v4 _defaultSortGroup] != (id)5) {
      goto LABEL_9;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      CGImageRef v3 = [v4 activityUUID];
      [*(id *)(a1 + 32) setActivityIdentifierOpen:v3];
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_9;
      }
      CGImageRef v3 = [v4 activityUUID];
      [*(id *)(a1 + 32) setActivityIdentifierCopy:v3];
    }
  }

LABEL_9:
}

id sub_100165D00(uint64_t a1, void *a2)
{
  CGImageRef v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained _loadSharingProxy:v4 configuration:*(void *)(a1 + 32)];

  return v6;
}

void sub_100166300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id *location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
}

id sub_10016636C(uint64_t a1, void *a2)
{
  CGImageRef v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained _loadActionProxy:v4 configuration:*(void *)(a1 + 32)];

  return v6;
}

id sub_10016750C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _createActivityTitlePerspectiveDataForActivity:*(void *)(a1 + 40) foregroundColor:*(void *)(a1 + 48) sessionConnection:*(void *)(a1 + 56)];
}

id sub_10016751C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _createActivityTitleImageForActivity:*(void *)(a1 + 40) foregroundColor:*(void *)(a1 + 48) sessionConnection:*(void *)(a1 + 56)];
}

id sub_100167C30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) perspectiveDataForActionPlatterWithTitle:*(void *)(a1 + 40) tintColor:*(void *)(a1 + 48)];
}

CGImageRef sub_100167C40(uint64_t a1)
{
  uint64_t v1 = (CGImage *)[*(id *)(a1 + 32) CGImgForActionPlatterWithTitle:*(void *)(a1 + 40) tintColor:*(void *)(a1 + 48)];

  return CGImageRetain(v1);
}

void sub_10016812C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_10016817C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = share_sheet_log();
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Created suggestion %@", (uint8_t *)&v12, 0xCu);
    }

    id v9 = [a1[4] suggestionBrowser];
    [v9 provideFeedbackForPeopleSuggestion:v5];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001749CC((uint64_t)a1, (uint64_t)v6, v8);
    }

    id v9 = [a1[4] suggestionBrowser];
    id v10 = [a1[5] activityType];
    [v9 provideFeedbackForNodeAtIndex:0 bundleID:v10 selectedActionBundleID:0 abandoned:0];
  }
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  [WeakRetained _performSelectedActivity:a1[5] inSession:a1[4]];
}

void sub_100168464(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016885C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100168888(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    id v7 = share_sheet_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_100174B08(a1);
    }
  }
  id v8 = *(id *)(a1 + 40);
  objc_sync_enter(v8);
  [*(id *)(a1 + 40) _instructHostToPerformShortcutActivity:*(void *)(a1 + 32) singleUseToken:v5 session:*(void *)(a1 + 48)];
  objc_sync_exit(v8);
}

void sub_10016892C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100168E08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001691B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001692C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001693F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100169F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id obj)
{
}

id sub_100169FDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) selectionChanged];
}

void sub_10016A418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10016A754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10016A9A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016A9C0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t, id, id))(v8 + 16))(v8, a2, v9, v7);
  }
  [*(id *)(a1 + 32) didPerformInServiceActivityWithIdentifier:*(void *)(a1 + 40) completed:a2 items:v9 error:v7];
}

void sub_10016AA54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  if (v6)
  {
    id v7 = share_sheet_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100174DA8(a1);
    }
  }
  else
  {
    [*(id *)(a1 + 32) prepareWithActivityItemData:a3];
    [*(id *)(a1 + 32) performActivity];
  }
}

void sub_10016AD00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016AED4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016B1E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016B56C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016B970(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016B994(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    id v7 = share_sheet_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_100174FDC(a1);
    }
  }
  id v8 = *(id *)(a1 + 40);
  objc_sync_enter(v8);
  [*(id *)(a1 + 40) _instructHostToPerformShortcutActivity:*(void *)(a1 + 32) singleUseToken:v5 session:*(void *)(a1 + 48)];
  objc_sync_exit(v8);
}

void sub_10016BA38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016BC30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016BDE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016BE00(uint64_t a1)
{
  unsigned int v2 = +[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled];
  CGImageRef v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v5 = [v3 airDropController];
    id v4 = [*(id *)(a1 + 32) hostAppBundleID];
    [v5 activateWithBundleID:v4];
  }
  else
  {
    id v5 = [v3 peopleBrowser];
    [v5 start];
  }
}

void sub_10016C018(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016C038(uint64_t a1)
{
  unsigned int v2 = +[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled];
  CGImageRef v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [v3 airDropController];
    [v4 invalidate];
  }
  else
  {
    id v4 = [v3 peopleBrowser];
    [v4 stop];
  }
}

void sub_10016C250(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016C270(uint64_t a1)
{
  unsigned int v2 = +[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled];
  CGImageRef v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [v3 airDropController];
    [v4 invalidate];
  }
  else
  {
    id v4 = [v3 peopleBrowser];
    [v4 stop];
  }
}

void sub_10016C46C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016C48C(uint64_t a1)
{
  unsigned int v2 = +[SFAirDropUserDefaults_objc privateContactDiscoveryEnabled];
  CGImageRef v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v5 = [v3 airDropController];
    id v4 = [*(id *)(a1 + 32) hostAppBundleID];
    [v5 activateWithBundleID:v4];
  }
  else
  {
    id v5 = [v3 peopleBrowser];
    [v5 start];
  }
}

void sub_10016C5C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016CAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

uint64_t sub_10016CB10(uint64_t a1, void *a2)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 shareUserDefaults];
  unsigned int v5 = [v4 activityIsHidden:v3];

  return v5 ^ 1;
}

void sub_10016CF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

uint64_t sub_10016CFA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) actionUserDefaults];
  if ([v4 activityIsHidden:v3])
  {
    uint64_t v5 = 0;
  }
  else if ([*(id *)(a1 + 40) sharingExpanded])
  {
    id v6 = [v3 activityType];
    uint64_t v5 = [v6 isEqualToString:UIActivityTypeShare] ^ 1;
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

uint64_t sub_10016D104(uint64_t a1)
{
  uint64_t v1 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = SFCreateCGImageFromData();

  return v2;
}

void sub_10016DE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id obj)
{
}

id sub_10016DEB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) perspectiveDataForActivityMoreListEntryForActivityTitle:*(void *)(a1 + 40) labelColor:*(void *)(a1 + 48) activityCategory:*(void *)(a1 + 56)];
}

id sub_10016DEC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) CGImgDataForActivityMoreListEntryForActivityTitle:*(void *)(a1 + 40) labelColor:*(void *)(a1 + 48) processOppositeColor:1 activityCategory:*(void *)(a1 + 56)];
}

void sub_10016DFE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016E0A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016E228(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016E70C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016E8CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016ED90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016F064(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016FEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id obj)
{
}

id sub_10016FF98(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 48);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [WeakRetained _loadAirDropProxy:v4 forAirDropNode:*(void *)(a1 + 32) configuration:*(void *)(a1 + 40)];

  return v6;
}

void sub_1001707EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100170D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100171350(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001718A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) perspectiveDataForNameLabelWithString:*(void *)(a1 + 40) textColor:*(void *)(a1 + 48) maxNumberOfLines:*(void *)(a1 + 56) isAirDrop:*(unsigned __int8 *)(a1 + 64) ignoreNameWrapping:*(unsigned __int8 *)(a1 + 65)];
}

CGImageRef sub_1001718B8(uint64_t a1)
{
  uint64_t v1 = (CGImage *)[*(id *)(a1 + 32) CGImgForNameLabelWithString:*(void *)(a1 + 40) textColor:*(void *)(a1 + 48) maxNumberOfLines:*(void *)(a1 + 56) isAirDrop:*(unsigned __int8 *)(a1 + 64) ignoreNameWrapping:*(unsigned __int8 *)(a1 + 65) processOppositeColor:1];

  return CGImageRetain(v1);
}

void sub_100171B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_100171BB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id to = 0;
  objc_copyWeak(&to, (id *)(a1 + 40));
  id v3 = objc_loadWeakRetained(&to);
  objc_sync_enter(v3);
  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained(&to);
    [v4 connectionInvalidated:WeakRetained];
  }
  objc_sync_exit(v3);

  objc_destroyWeak(&to);
}

void sub_100171C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_sync_exit(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100172C88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100172CD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * (void)v7);
        id v9 = share_sheet_log();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v19 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Deleting slots for activity proxy %@", buf, 0xCu);
        }

        id v10 = [v8 iconImageSlotID];
        id v11 = [v8 labelSlotID];
        if (v10) {
          [*(id *)(a1 + 32) deleteSlot:v10];
        }
        if (v11)
        {
          [*(id *)(a1 + 32) deleteSlot:v11];
          int v12 = *(void **)(a1 + 40);
          id v13 = +[NSNumber numberWithUnsignedInt:v11];
          [v12 addObject:v13];
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
    }
    while (v5);
  }
}

void sub_100172E98(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v20 objects:v26 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v21;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v7);
        id v9 = share_sheet_log();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v25 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Deleting slots for people proxy %@", buf, 0xCu);
        }

        id v10 = [v8 avatarImageSlotID];
        id v11 = [v8 mainLabelSlotID];
        id v12 = [v8 transportImageSlotID];
        id v13 = [v8 bottomLabelSlotID];
        if (v10) {
          [*(id *)(a1 + 32) deleteSlot:v10];
        }
        if (v11)
        {
          [*(id *)(a1 + 32) deleteSlot:v11];
          long long v14 = *(void **)(a1 + 40);
          long long v15 = +[NSNumber numberWithUnsignedInt:v11];
          [v14 addObject:v15];
        }
        if (v12)
        {
          [*(id *)(a1 + 32) deleteSlot:v12];
          long long v16 = *(void **)(a1 + 40);
          long long v17 = +[NSNumber numberWithUnsignedInt:v12];
          [v16 addObject:v17];
        }
        if (v13)
        {
          [*(id *)(a1 + 32) deleteSlot:v13];
          uint64_t v18 = *(void **)(a1 + 40);
          uint64_t v19 = +[NSNumber numberWithUnsignedInt:v13];
          [v18 addObject:v19];
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v20 objects:v26 count:16];
    }
    while (v5);
  }
}

void sub_100173564(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1001735AC(id a1, INPersonHandle *a2)
{
  uint64_t v2 = a2;
  if ((id)[(INPersonHandle *)v2 type] == (id)1)
  {
    id v3 = [(INPersonHandle *)v2 value];
    BOOL v4 = v3 != 0;
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_100173874(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100173890(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)SFShareSheetRecipient) initWithRealName:0 displayName:0 formattedHandles:v3 contactIdentifier:0];

  if (IsAppleInternalBuild())
  {
    id v5 = share_sheet_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412546;
      id v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Returning Messages recipient %@ for session ID %@", (uint8_t *)&v7, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

BOOL sub_100173B70(uint64_t a1)
{
  return [(id)objc_opt_class() activityCategory] == *(id *)(a1 + 32);
}

Class sub_100173BA8()
{
  if (qword_1009800F0 != -1) {
    dispatch_once(&qword_1009800F0, &stru_1008CEDF0);
  }
  Class result = objc_getClass("_PSPredictionContext");
  qword_1009800E8 = (uint64_t)result;
  off_1009686D0 = (uint64_t (*)())sub_100173C0C;
  return result;
}

id sub_100173C0C()
{
  return (id)qword_1009800E8;
}

void sub_100173C18(id a1)
{
  qword_1009800F8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PeopleSuggester.framework/PeopleSuggester", 2);
}

Class sub_100173C44()
{
  if (qword_1009800F0 != -1) {
    dispatch_once(&qword_1009800F0, &stru_1008CEDF0);
  }
  Class result = objc_getClass("_PSAttachment");
  qword_100980100 = (uint64_t)result;
  off_1009686D8 = (uint64_t (*)())sub_100173CA8;
  return result;
}

id sub_100173CA8()
{
  return (id)qword_100980100;
}

id sub_100173CB4(uint64_t a1, void *a2)
{
  id v3 = [a2 ss_activityTypeToReportToHost];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100173CF8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_100173D14(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_100173D48(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void sub_100173D7C(uint8_t *buf, int a2, os_log_t log)
{
  *(_DWORD *)buf = 67109120;
  *((_DWORD *)buf + 1) = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "process %d tried to enable instant share sheet but it was not entitled!", buf, 8u);
}

void sub_100173DC4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Invalid URL (no scheme) %@", v2, v3, v4, v5, v6);
}

void sub_100173E2C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "UTTypeCreatePreferredIdentifierForTag(%@) returned NULL", v2, v3, v4, v5, v6);
}

void sub_100173E94()
{
  sub_100173D68();
  uint64_t v3 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to convert NSAttributedString [%@] to HTML due to: %@", v2, 0x16u);
}

void sub_100173F10()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "created share sheet context is invalid.", v2, v3, v4, v5, v6);
}

void sub_100173F44()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "transferUpdated: No userInfo for notification %@", v2, v3, v4, v5, v6);
}

void sub_100173FAC()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "transferUpdated: No sessionID for userInfo %@", v2, v3, v4, v5, v6);
}

void sub_100174014()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "transferUpdated: No real name for userInfo %@", v2, v3, v4, v5, v6);
}

void sub_10017407C()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "transferUpdated: No session for ID %@", v1, 0xCu);
}

void sub_1001740F0()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "transferUpdated: No xpcHelperCnx for session %@", v2, v3, v4, v5, v6);
}

void sub_100174158()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "transferUpdated: No transferNode for realName %@", v2, v3, v4, v5, v6);
}

void sub_1001741C0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Activate already called", v2, v3, v4, v5, v6);
}

void sub_1001741F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained sd_description];
  sub_10008B710();
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Failed to get remote object proxy for %@ (%@)", v5, v6, v7, v8, v9);
}

void sub_100174294()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "failed to update remote share sheet: no proxy object.", v2, v3, v4, v5, v6);
}

void sub_1001742C8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "failed to update host share sheet: no proxy object.", v2, v3, v4, v5, v6);
}

void sub_1001742FC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Unable to retrieve selected person activity type:%@", v2, v3, v4, v5, v6);
}

void sub_100174364()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "can't perform airdrop for error:%@", v2, v3, v4, v5, v6);
}

void sub_1001743CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017443C()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "connectUIServiceToDaemonWithSessionID: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_1001744A4()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "SDShareSheetSlotManager failed to fetch shortcuts: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10017450C()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "no configuration to configure sharing section", v2, v3, v4, v5, v6);
}

void sub_100174540()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "no configuration to configure people suggestions section", v2, v3, v4, v5, v6);
}

void sub_100174574()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "no configuration to configure actions section", v2, v3, v4, v5, v6);
}

void sub_1001745A8()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "requestConfigurationWithSessionID: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100174610()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "sendConfiguration: No sessionID for configuration %@", v2, v3, v4, v5, v6);
}

void sub_100174678()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "sendConfiguration: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_1001746E0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "current connection is nil.", v2, v3, v4, v5, v6);
}

void sub_100174714()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "_activityTitleImageForActivity: sessionConnection is nil.", v2, v3, v4, v5, v6);
}

void sub_100174748()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Couldn't retrieve an activity title for %@", v2, v3, v4, v5, v6);
}

void sub_1001747B0()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "_activityTitleImagesMapForActivities: No xpcHelperCnx for session %@", v2, v3, v4, v5, v6);
}

void sub_100174818()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "Loading people proxy: required xpcHelper connection is nil.", v2, v3, v4, v5, v6);
}

void sub_10017484C()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "Loading sharing proxy: required xpcHelper connection is nil.", v2, v3, v4, v5, v6);
}

void sub_100174880(void *a1, uint64_t a2, NSObject *a3)
{
  uint8_t v6 = [a1 activityTitle];
  sub_100173D68();
  uint8_t v9 = a1;
  __int16 v10 = v7;
  uint64_t v11 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "returned nil: CGImgDataForUIActivityTitle:'%@', in: %@, textColor:%@", v8, 0x20u);
}

void sub_100174930()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "Loading action proxy: required xpcHelper connection is nil.", v2, v3, v4, v5, v6);
}

void sub_100174964()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "selectedActivityAtIndex: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_1001749CC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint8_t v6 = [*(id *)(a1 + 32) recipients];
  __int16 v7 = [*(id *)(a1 + 40) activityType];
  int v8 = 138412802;
  uint8_t v9 = v6;
  __int16 v10 = 2112;
  uint64_t v11 = v7;
  __int16 v12 = 2112;
  uint64_t v13 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to create suggestion from provided recipients %@ and activity %@ with error: %@", (uint8_t *)&v8, 0x20u);
}

void sub_100174AA0()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "selectedActionAtIndex: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100174B08(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) identifier];
  sub_100173D30();
  sub_100173D48((void *)&_mh_execute_header, v2, v3, "Failed to generate single use token for shortcut %{public}@: %{public}@", v4, v5, v6, v7, v8);
}

void sub_100174BA0()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "performActivityWithType: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100174C08()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Not performing activity which is not supported in this Share Sheet session", v2, v3, v4, v5, v6);
}

void sub_100174C3C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Missing entitlement to perform activity without showing Share Sheet", v2, v3, v4, v5, v6);
}

void sub_100174C70()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "findSupportedActivities: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100174CD8()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "No session for ID %@, ignoring.", v2, v3, v4, v5, v6);
}

void sub_100174D40()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "No node for identifier %@", v2, v3, v4, v5, v6);
}

void sub_100174DA8(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) activityType];
  sub_10008B710();
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "can't perform activity:%@ error:%@", v4, v5, v6, v7, v8);
}

void sub_100174E3C()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "toggledActivityWithIdentifier: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100174EA4()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "favoritedActivity: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100174F0C()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "movedActivityAtIndex: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100174F74()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "selectedDefaultActivityAtIndex: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100174FDC(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) identifier];
  sub_100173D30();
  sub_100173D48((void *)&_mh_execute_header, v2, v3, "Failed to generate single use token for shortcut %{public}@: %{public}@", v4, v5, v6, v7, v8);
}

void sub_100175074()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "performedActivityWithSuccess: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_1001750DC()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "activityViewControllerDidAppear: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100175144()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "activityViewControllerDidDisappear: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_1001751AC()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "didEnterBackground: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100175214()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "willEnterForeground: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_10017527C()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "performEditActions: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_1001752E4(NSObject *a1)
{
  uint64_t v2 = (objc_class *)objc_opt_class();
  uint64_t v3 = NSStringFromClass(v2);
  sub_10002972C();
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "Could not get %@: from vector block", v4, 0xCu);
}

void sub_100175384()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "_instructHostToPerformUserDefaultsActivityForCategory: No xpcHelperCnx for session %@", v2, v3, v4, v5, v6);
}

void sub_1001753EC(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "suggestionBrowserDidUpdateSuggestions: No session for ID %@", buf, 0xCu);
}

void sub_100175444()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "activitiesForActivityType: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_1001754AC()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "predictionContextForSessionID: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_100175514()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "share sheet context is invalid.", v2, v3, v4, v5, v6);
}

void sub_100175548()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "didUpdatePeople: No session for ID %@", v2, v3, v4, v5, v6);
}

void sub_1001755B0(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "didUpdatePeople: No session for ID %@", buf, 0xCu);
}

void sub_100175608()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "_createNameLabelSlotWithString: sessionConnection is nil.", v2, v3, v4, v5, v6);
}

void sub_100175F0C(id a1)
{
  uint64_t v1 = +[SDStatusMonitor sharedMonitor];
  unsigned int v2 = [v1 enableContinuity];

  if (v2)
  {
    uint64_t v3 = objc_opt_new();
    uint64_t v4 = (void *)qword_100980108;
    qword_100980108 = v3;
  }
}

void sub_1001780E8(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 length];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to initialize key from data. Incorrect size %d", (uint8_t *)v3, 8u);
}

void sub_100178174(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Generated new advertising encryption key %@, and saved to keychain", (uint8_t *)&v3, 0xCu);
}

void sub_1001781F0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to deserialize encryption key from keychain (%@)", (uint8_t *)&v2, 0xCu);
}

void sub_100178268(void *a1, NSObject *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [a1 encryptionKey];
  sub_100031E38();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@: Persisted last used counter and key to keychain %@", v7, 0x16u);
}

void sub_100178320(void *a1, NSObject *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = [a1 encryptionKey];
  sub_100031E38();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@: Encryption key invalid %@", v7, 0x16u);
}

void sub_1001783D8()
{
  sub_10007155C();
  sub_100132B44((void *)&_mh_execute_header, v0, v1, "Saved decryption key %@ for %@ to keychain");
}

void sub_100178440()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Failed to save decryption key %@ for %@ to keychain");
}

void sub_1001784A8()
{
  sub_10007155C();
  sub_100132B44((void *)&_mh_execute_header, v0, v1, "Loaded decryption key %@ for %@ from keychain");
}

void sub_100178510()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Failed to serialize encryption key from %@ (%@)");
}

void sub_100178578(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to deserialize key (%@)", (uint8_t *)&v2, 0xCu);
}

void sub_1001785F0(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to unwrap key cause key data is missing", v1, 2u);
}

void sub_100178634(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Could not unwrap key cause wrapping key is not available", v1, 2u);
}

void sub_100178678(char a1, uint64_t a2, NSObject *a3)
{
  CFStringRef v3 = @"NO";
  if (a1) {
    CFStringRef v4 = @"YES";
  }
  else {
    CFStringRef v4 = @"NO";
  }
  if (a2) {
    CFStringRef v3 = @"YES";
  }
  *(_DWORD *)uint64_t v5 = 138412546;
  *(void *)&v5[4] = v4;
  *(_WORD *)&v5[12] = 2112;
  *(void *)&v5[14] = v3;
  sub_100132B44((void *)&_mh_execute_header, a2, a3, "Successfully deleted encryption key:%@, decryption keys:%@", *(void *)v5, *(void *)&v5[8], *(void *)&v5[16]);
}

void sub_100178710(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017877C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001787E8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100178854()
{
  sub_1001780D0();
  sub_10005339C((void *)&_mh_execute_header, v0, v1, "Failed to add keychain item with error %d for attributes %@");
}

void sub_1001788BC()
{
  sub_1001780D0();
  sub_10005339C((void *)&_mh_execute_header, v0, v1, "Failed to delete keychain item with error %d for query %@");
}

void sub_100179124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10017B690()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not get identity to encrypt streams (identity not available)", v2, v3, v4, v5, v6);
}

void sub_10017B6C4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not get cert chain to encrypt streams (intermediate cert not available)", v2, v3, v4, v5, v6);
}

void sub_10017B6F8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not get trust from open stream", v2, v3, v4, v5, v6);
}

void sub_10017B72C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Cert chain from remote trust does is empty", v2, v3, v4, v5, v6);
}

void sub_10017B760()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Accounts do not match, my account identifier (common name) is not available", v2, v3, v4, v5, v6);
}

void sub_10017B794()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Accounts do not match", v2, v3, v4, v5, v6);
}

void sub_10017B7C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10017B838(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "Client cert chain not trusted. SFAppleIDVerifyCertificateChainSync failed with err=%d", a5, a6, a7, a8, 0);
}

void sub_10017B8A8(void *a1)
{
  uint64_t v1 = [a1 streamError];
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v2, v3, "Network stream received CFErrorRef error = %@", v4, v5, v6, v7, v8);
}

void sub_10017B92C()
{
  uint64_t v0 = __error();
  strerror(*v0);
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v1, v2, "setsockopt failed: %s", v3, v4, v5, v6, v7);
}

void sub_10017B9AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "Stream returned invalid socket %d", a5, a6, a7, a8, 0);
}

void sub_10017BA1C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to evaluate certificate", v2, v3, v4, v5, v6);
}

void sub_10017BA50()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create stream data from read buffer", v2, v3, v4, v5, v6);
}

void sub_10017BA84()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Delegate does not respond to streamHandler:didReceiveStreamData:", v2, v3, v4, v5, v6);
}

void sub_10017BAB8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Read zero bytes from the network stream", v2, v3, v4, v5, v6);
}

void sub_10017BAEC()
{
  sub_10002972C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error writing to network output stream, writeCFIndex Length = %ld", v1, 0xCu);
}

void sub_10017BB60()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Method not supported", v2, v3, v4, v5, v6);
}

void sub_10017BB94()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create message payload", v2, v3, v4, v5, v6);
}

void sub_10017BBC8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Unexpected stream handler input state", v2, v3, v4, v5, v6);
}

void sub_10017BBFC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Read more bytes than the incoming message header declared", v2, v3, v4, v5, v6);
}

void sub_10017BC30()
{
  os_log_t v0 = __error();
  strerror(*v0);
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v1, v2, "Read CFErrorRef error = %s", v3, v4, v5, v6, v7);
}

void sub_10017BCB0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Zero bytes read from input stream", v2, v3, v4, v5, v6);
}

void sub_10017BCE4(uint64_t *a1, id *a2, NSObject *a3)
{
  uint64_t v4 = *a1;
  unsigned int v5 = [*a2 length];
  v6[0] = 67109376;
  v6[1] = v4;
  __int16 v7 = 1024;
  unsigned int v8 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Wrote too many bytes (byteIndex = %d, message length = %d)", (uint8_t *)v6, 0xEu);
}

void sub_10017BD84()
{
  os_log_t v0 = __error();
  strerror(*v0);
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v1, v2, "Failed to write message = %s", v3, v4, v5, v6, v7);
}

void sub_10017BE04()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Zero bytes written for message", v2, v3, v4, v5, v6);
}

void sub_10017BE38()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No handler for message write", v2, v3, v4, v5, v6);
}

void sub_10017BE6C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Incorrect version number in header", v2, v3, v4, v5, v6);
}

uint64_t SDAutoUnlockLTKInfoReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 24) = v14;
        continue;
      case 2u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
        goto LABEL_29;
      case 3u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
LABEL_29:
        long long v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v23 |= (unint64_t)(v25 & 0x7F) << v21;
      if ((v25 & 0x80) == 0) {
        goto LABEL_42;
      }
      v21 += 7;
      BOOL v9 = v22++ >= 9;
      if (v9)
      {
        uint64_t v23 = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v23 = 0;
    }
LABEL_44:
    *(unsigned char *)(a1 + 2_Block_object_dispose(&a9, 8) = v23 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10017CB5C(id a1)
{
  id v3 = +[AKDevice currentDevice];
  uint64_t v1 = [v3 serverFriendlyDescription];
  uint64_t v2 = (void *)qword_100980118;
  qword_100980118 = v1;
}

void sub_10017CBB8(id a1)
{
  uint64_t v1 = MGCopyAnswer();
  uint64_t v2 = (void *)qword_100980128;
  qword_100980128 = v1;

  if (!qword_100980128 && dword_100968A40 <= 90 && (dword_100968A40 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
}

CFStringRef SFHotspotNetworkTypeString(unsigned int a1)
{
  if (a1 < 9 && ((0x1DFu >> a1) & 1) != 0) {
    return *(&off_1008CEE98 + (char)a1);
  }
  if (SFRemoteHotspotNetworkTypeHSDPA == a1) {
    return @"HSDPA";
  }
  return @"Unknown";
}

uint64_t SFHotspotTypeStringToType(void *a1, unsigned char *a2)
{
  id v3 = [a1 lowercaseString];
  char v4 = v3;
  if (a2) {
    *a2 = 1;
  }
  if ([v3 isEqualToString:@"none"])
  {
    unsigned __int8 v5 = 0;
  }
  else if ([v4 isEqualToString:@"1x"])
  {
    unsigned __int8 v5 = 1;
  }
  else if ([v4 isEqualToString:@"gprs"])
  {
    unsigned __int8 v5 = 2;
  }
  else if ([v4 isEqualToString:@"edge"])
  {
    unsigned __int8 v5 = 3;
  }
  else if ([v4 isEqualToString:@"3g"])
  {
    unsigned __int8 v5 = 4;
  }
  else if ([v4 isEqualToString:@"4g"])
  {
    unsigned __int8 v5 = 6;
  }
  else if ([v4 isEqualToString:@"lte"])
  {
    unsigned __int8 v5 = 7;
  }
  else
  {
    unsigned int v6 = [v4 isEqualToString:@"5g"];
    if (v6) {
      unsigned __int8 v5 = 8;
    }
    else {
      unsigned __int8 v5 = -1;
    }
    if (a2 && (v6 & 1) == 0)
    {
      *a2 = 0;
      unsigned __int8 v5 = -1;
    }
  }

  return v5;
}

id SFHotspotResponseAdvertisementString(uint64_t a1)
{
  uint64_t v1 = BYTE3(a1);
  uint64_t v2 = BYTE1(a1);
  uint64_t v3 = a1;
  uint64_t v4 = BYTE2(a1);
  uint64_t v5 = BYTE5(a1);
  unsigned int v6 = SFHotspotNetworkTypeString(BYTE4(a1));
  unint64_t v7 = +[NSString stringWithFormat:@"<version: %d, flags: %d battery life: %d, signal strength: %d, network type: %@, additional flags: %d>", v3, v2, v4, v5, v6, v1];

  return v7;
}

uint64_t SDUnlockClassALongTermKeyResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v28 = 28;
        goto LABEL_54;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v28 = 24;
        goto LABEL_54;
      case 3u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v22;

        continue;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
      v14 |= (unint64_t)(v27 & 0x7F) << v24;
      if ((v27 & 0x80) == 0) {
        goto LABEL_51;
      }
      v24 += 7;
      BOOL v9 = v25++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v28 = 8;
LABEL_54:
    *(_DWORD *)(a1 + v2_Block_object_dispose(&a9, 8) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10017E46C()
{
  if (dword_100968AB0 <= 50 && (dword_100968AB0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  pthread_mutex_lock(&stru_100968B20);
  [(id)qword_100980138 removeAllObjects];

  return pthread_mutex_unlock(&stru_100968B20);
}

void sub_10017E508()
{
  pthread_mutex_lock(&stru_100968B20);
  os_log_t v0 = (void *)qword_100980138;
  if (!qword_100980138)
  {
    id v1 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v2 = (void *)qword_100980138;
    qword_100980138 = (uint64_t)v1;

    os_log_t v0 = (void *)qword_100980138;
  }
  uint64_t v3 = [v0 objectForKeyedSubscript:@"counter"];
  uint64_t v4 = (uint64_t)[v3 integerValue];

  uint64_t v5 = 2 * v4;
  if (2 * v4 >= 86400) {
    uint64_t v5 = 86400;
  }
  if (v4 <= 0) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v5;
  }
  unint64_t v7 = +[NSNumber numberWithInteger:v6];
  [(id)qword_100980138 setObject:v7 forKeyedSubscript:@"counter"];

  id v9 = +[NSDate date];
  char v8 = [v9 dateByAddingTimeInterval:(double)v6];
  [(id)qword_100980138 setObject:v8 forKeyedSubscript:@"startDate"];
  if (dword_100968AB0 <= 50 && (dword_100968AB0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  pthread_mutex_unlock(&stru_100968B20);
}

id sub_10017E690()
{
  pthread_mutex_lock(&stru_100968B20);
  id v0 = [(id)qword_100980138 objectForKeyedSubscript:@"startDate"];
  pthread_mutex_unlock(&stru_100968B20);
  id v1 = +[NSDate date];
  uint64_t v2 = v1;
  if (!v0) {
    id v0 = v1;
  }
  if (dword_100968AB0 <= 30 && (dword_100968AB0 != -1 || _LogCategory_Initialize()))
  {
    [v0 timeIntervalSinceDate:v2];
    LogPrintF();
  }

  return v0;
}

void sub_10017E784()
{
  pthread_mutex_lock(&stru_100968B20);
  if (!qword_100980138)
  {
    id v0 = objc_alloc_init((Class)NSMutableDictionary);
    id v1 = (void *)qword_100980138;
    qword_100980138 = (uint64_t)v0;
  }
  uint64_t v2 = +[NSNumber numberWithInteger:86400];
  [(id)qword_100980138 setObject:v2 forKeyedSubscript:@"counter"];

  uint64_t v3 = +[NSDate date];
  id v4 = [v3 dateByAddingTimeInterval:86400.0];
  [qword_100980138 setObject:forKeyedSubscript:];
  if (dword_100968AB0 <= 50 && (dword_100968AB0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  pthread_mutex_unlock(&stru_100968B20);
}

id sub_10017E8D0()
{
  pthread_mutex_lock(&stru_100968B20);
  id v0 = (id)qword_100980140;
  pthread_mutex_unlock(&stru_100968B20);

  return v0;
}

uint64_t sub_10017E928()
{
  pthread_mutex_lock(&stru_100968B20);
  uint64_t v0 = +[NSDate date];
  id v1 = (void *)qword_100980140;
  qword_100980140 = v0;

  return pthread_mutex_unlock(&stru_100968B20);
}

__SecKey *sub_10017E988(void *a1, uint64_t a2)
{
  v14[0] = kSecAttrKeyType;
  v14[1] = kSecAttrKeySizeInBits;
  v15[0] = a1;
  id v3 = a1;
  id v4 = +[NSNumber numberWithUnsignedInteger:a2];
  v15[1] = v4;
  CFDictionaryRef v5 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];

  RandomKey = SecKeyCreateRandomKey(v5, 0);
  SecKeyRef v7 = SecKeyCopyPublicKey(RandomKey);
  SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
  if (v7) {
    CFRelease(v7);
  }
  if (SelfSignedCertificate)
  {
    id v9 = (__SecIdentity *)SecIdentityCreate();
    CFRelease(SelfSignedCertificate);
    if (RandomKey) {
      CFRelease(RandomKey);
    }
    if (v9)
    {
      RandomKey = (__SecKey *)sec_identity_create(v9);
      CFRelease(v9);
      if (!RandomKey)
      {
        int v10 = airdrop_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_10017ECFC();
        }
      }
      goto LABEL_19;
    }
    char v12 = airdrop_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10017ECC8();
    }

LABEL_18:
    RandomKey = 0;
    goto LABEL_19;
  }
  uint64_t v11 = airdrop_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_10017EC94();
  }

  if (RandomKey)
  {
    CFRelease(RandomKey);
    goto LABEL_18;
  }
LABEL_19:

  return RandomKey;
}

id sub_10017EB90(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1) {
    goto LABEL_16;
  }
  id v3 = sec_identity_copy_ref(v1);
  id v4 = v3;
  if (!v3) {
    goto LABEL_17;
  }
  SecKeyRef privateKeyRef = 0;
  OSStatus v5 = SecIdentityCopyPrivateKey(v3, &privateKeyRef);
  CFRelease(v4);
  if (v5)
  {
    if (privateKeyRef)
    {
      CFRelease(privateKeyRef);
      SecKeyRef privateKeyRef = 0;
    }
    uint64_t v6 = airdrop_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10017ED30();
    }
  }
  if (!privateKeyRef) {
    goto LABEL_16;
  }
  SecKeyRef v7 = SecKeyCopyPublicKey(privateKeyRef);
  if (privateKeyRef)
  {
    CFRelease(privateKeyRef);
    SecKeyRef privateKeyRef = 0;
  }
  if (v7)
  {
    id v4 = (void *)SecKeyCopySubjectPublicKeyInfo();
    CFRelease(v7);
    if (v4) {
      id v8 = v4;
    }
  }
  else
  {
LABEL_16:
    id v4 = 0;
  }
LABEL_17:

  return v4;
}

void sub_10017EC94()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SecGenerateSelfSignedCertificate failed", v2, v3, v4, v5, v6);
}

void sub_10017ECC8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SecIdentityCreate failed", v2, v3, v4, v5, v6);
}

void sub_10017ECFC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "sec_identity_create failed", v2, v3, v4, v5, v6);
}

void sub_10017ED30()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SecIdentityCopyPrivateKey failed", v2, v3, v4, v5, v6);
}

void sub_10017ED64(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10017EE18;
    v5[3] = &unk_1008CA428;
    id v6 = v4;
    [v3 regenerateTemporarySelfIdentityWithCompletion:v5];
  }
}

uint64_t sub_10017EE18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10017EE2C(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSData);
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [v1 pkData];

    id v2 = (id)v3;
  }

  return v2;
}

id sub_10017EEAC(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    id v2 = [v1 deviceName];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10017EF10(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    id v2 = [v1 deviceModel];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10017EF74(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    id v2 = [v1 accountID];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10017EFD8(void *a1)
{
  id v1 = a1;
  id v2 = +[NSUUID UUID];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = [v1 bonjourListenerUUID];

    id v2 = (void *)v3;
  }

  return v2;
}

uint64_t sub_10017F05C()
{
  return nw_array_append();
}

uint64_t sub_10017F06C()
{
  return objc_opt_respondsToSelector() & 1;
}

id sub_10017F090(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    id v2 = [v1 isKnownIdentity];
  }
  else {
    id v2 = 0;
  }

  return v2;
}

uint64_t sub_10017F0E0()
{
  return objc_opt_respondsToSelector() & 1;
}

id sub_10017F104(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    id v2 = [v1 isUnsupportedApplicationLabel];
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id sub_10017F870(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v1 = *(void **)(a1 + 32);
  if (*(uint64_t *)(v2 + 8) < 1) {
    return _[v1 loadRemainingProxies];
  }
  else {
    return [v1 loadBatchWithSize:];
  }
}

void sub_10017FC70(id *a1)
{
  uint64_t v2 = share_sheet_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = a1[4];
    id v4 = a1[5];
    *(_DWORD *)buf = 138412546;
    id v15 = v3;
    __int16 v16 = 2112;
    id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "did load proxies from loader:%@ with result:%@", buf, 0x16u);
  }

  id v5 = [a1[5] state];
  if (v5 != (id)1)
  {
    id v6 = objc_alloc_init(SDShareSheetProxyLoaderChangeDetails);
    id v7 = a1[5];
    id v8 = [a1[4] proxySection];
    [(SDShareSheetProxyLoaderChangeDetails *)v6 addResult:v7 forProxySection:v8];

    id v9 = [a1[6] delegate];
    [v9 proxyLoaderManager:a1[6] didLoadProxiesWithChangeDetails:v6];
  }
  id v10 = [a1[4] remainingProxiesCount];
  id v11 = a1[6];
  if (v5 == (id)1 || !v10)
  {
    [a1[6] _didFinishLoadingLoader:a1[4] cancelled:v5 == (id)1];
  }
  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10017FE38;
    v12[3] = &unk_1008CA4B8;
    id v13 = a1[4];
    [v11 _scheduleLoadingBlock:v12 synchronously:0];
  }
}

id sub_10017FE38(uint64_t a1)
{
  return _[*(id *)(a1 + 32) loadRemainingProxies];
}

void sub_10017FF20(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "loader was already removed:%@", (uint8_t *)&v2, 0xCu);
}

void sub_10017FFEC(id a1)
{
  id v1 = objc_alloc_init(SDNotificationManager);
  int v2 = (void *)qword_100980150;
  qword_100980150 = (uint64_t)v1;
}

id sub_100180518(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_10018063C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_1001808D8(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 authorizationStatus] > 1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      id v6 = *(void (**)(void))(v5 + 16);
      v6();
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 112);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1001809B4;
    v7[3] = &unk_1008CAD20;
    void v7[4] = v3;
    id v8 = *(id *)(a1 + 40);
    dispatch_async(v4, v7);
  }
}

void sub_1001809B4(uint64_t a1)
{
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 72);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100180AA0;
  void v4[3] = &unk_1008CEF08;
  void v4[4] = v2;
  id v5 = *(id *)(a1 + 40);
  [v3 requestAuthorizationWithOptions:70 completionHandler:v4];
}

void sub_100180AA0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (dword_100968BC0 <= 30)
  {
    if (dword_100968BC0 != -1 || (int v6 = _LogCategory_Initialize(), v5 = v8, v6))
    {
      LogPrintF();
      id v5 = v8;
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = a2;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v5);
    id v5 = v8;
  }
}

void sub_100180D24(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 authorizationStatus] > 1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      int v6 = *(void (**)(void))(v5 + 16);
      v6();
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 112);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100180E00;
    v7[3] = &unk_1008CAD20;
    void v7[4] = v3;
    id v8 = *(id *)(a1 + 40);
    dispatch_async(v4, v7);
  }
}

void sub_100180E00(uint64_t a1)
{
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 96);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100180EEC;
  void v4[3] = &unk_1008CEF08;
  void v4[4] = v2;
  id v5 = *(id *)(a1 + 40);
  [v3 requestAuthorizationWithOptions:6 completionHandler:v4];
}

void sub_100180EEC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (dword_100968BC0 <= 30)
  {
    if (dword_100968BC0 != -1 || (int v6 = _LogCategory_Initialize(), v5 = v8, v6))
    {
      LogPrintF();
      id v5 = v8;
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 104) = a2;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v5);
    id v5 = v8;
  }
}

void sub_1001812F0(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 authorizationStatus] > 1)
  {
    id v5 = *(NSObject **)(a1 + 40);
    dispatch_group_leave(v5);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 112);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_1001813BC;
    v6[3] = &unk_1008CA640;
    void v6[4] = v3;
    id v7 = *(id *)(a1 + 40);
    dispatch_async(v4, v6);
  }
}

void sub_1001813BC(uint64_t a1)
{
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1001814A8;
  void v4[3] = &unk_1008CEF58;
  void v4[4] = v2;
  id v5 = *(id *)(a1 + 40);
  [v3 requestAuthorizationWithOptions:6 completionHandler:v4];
}

void sub_1001814A8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 40) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100181580(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 authorizationStatus] > 1)
  {
    id v5 = *(NSObject **)(a1 + 40);
    dispatch_group_leave(v5);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 112);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_10018164C;
    v6[3] = &unk_1008CA640;
    void v6[4] = v3;
    id v7 = *(id *)(a1 + 40);
    dispatch_async(v4, v6);
  }
}

void sub_10018164C(uint64_t a1)
{
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100181738;
  void v4[3] = &unk_1008CEF58;
  void v4[4] = v2;
  id v5 = *(id *)(a1 + 40);
  [v3 requestAuthorizationWithOptions:6 completionHandler:v4];
}

void sub_100181738(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 40) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_100181810(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100181D48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100968BC0 <= 60 && (dword_100968BC0 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      id v16 = v3;
      LogPrintF();
    }
    id v4 = [v3 domain:v15, v16];
    id v5 = off_100968C40();
    id v6 = v4;
    id v7 = v5;
    id v8 = v7;
    if (v6 == v7)
    {
    }
    else
    {
      if ((v6 == 0) == (v7 != 0))
      {

LABEL_17:
        goto LABEL_18;
      }
      unsigned int v9 = [v6 isEqual:v7];

      if (!v9) {
        goto LABEL_17;
      }
    }
    id v10 = [v3 code];

    if (v10 == (id)100)
    {
      id v11 = [*(id *)(a1 + 40) mutableCopy];
      [v11 setAttachments:&__NSArray0__struct];
      uint64_t v12 = *(void *)(a1 + 48);
      id v13 = *(NSObject **)(v12 + 112);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100181F94;
      block[3] = &unk_1008CEFA8;
      void block[4] = v12;
      id v18 = *(id *)(a1 + 56);
      id v19 = v11;
      int v20 = *(_DWORD *)(a1 + 64);
      char v21 = *(unsigned char *)(a1 + 68);
      id v14 = v11;
      dispatch_sync(v13, block);
    }
  }
  else if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_18:
}

id sub_100181F94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addRequestWithID:*(void *)(a1 + 40) content:*(void *)(a1 + 48) type:*(unsigned int *)(a1 + 56) isHomePodMini:*(unsigned __int8 *)(a1 + 60)];
}

void sub_10018268C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001826C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001829D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerPostIfNeeded:*(void *)(a1 + 40) backgroundAction:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100182ADC(void *a1)
{
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = a1[6];

  return [v2 _addRequestWithID:v3 content:v4 type:5];
}

id sub_100182C2C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerRemove:*(void *)(a1 + 40)];
}

id sub_100182DF4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerRemoveAll];
}

id sub_100182F54(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerUpdate:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

void sub_100183214(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_100968BC0 <= 60)
    {
      id v7 = v2;
      if (dword_100968BC0 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v7, v4))
      {
        id v6 = [v3 localizedDescription];
        LogPrintF();

LABEL_8:
        uint64_t v3 = v7;
      }
    }
  }
  else if (dword_100968BC0 <= 30)
  {
    id v7 = 0;
    if (dword_100968BC0 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v3 = 0, v5))
    {
      LogPrintF();
      goto LABEL_8;
    }
  }
}

id sub_1001833F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerUpdate:*(void *)(a1 + 40) rtiData:*(void *)(a1 + 48)];
}

void sub_100183860(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_100968BC0 <= 60)
    {
      id v7 = v2;
      if (dword_100968BC0 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v7, v4))
      {
        id v6 = [v3 localizedDescription];
        LogPrintF();

LABEL_8:
        uint64_t v3 = v7;
      }
    }
  }
  else if (dword_100968BC0 <= 30)
  {
    id v7 = 0;
    if (dword_100968BC0 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v3 = 0, v5))
    {
      LogPrintF();
      goto LABEL_8;
    }
  }
}

id sub_100183A7C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _tvAutoFillPostIfNeeded:*(void *)(a1 + 40)];
}

void sub_100183B44(uint64_t a1)
{
  id v2 = +[NSUUID UUID];
  uint64_t v3 = [v2 UUIDString];

  id v4 = objc_alloc_init(off_100968C70());
  int v5 = SFLocalizedStringForKey();
  [v4 setBody:v5];

  [v4 setCategoryIdentifier:@"continuityRemoteCategory"];
  [v4 setShouldHideTime:1];
  [v4 setShouldHideDate:1];
  [v4 setShouldSuppressDefaultAction:1];
  [v4 setShouldIgnoreDoNotDisturb:1];
  id v6 = [(objc_class *)off_100968C78() soundWithAlertType:23];
  [v4 setSound:v6];

  id v7 = SFLocalizedStringForKey();
  [v4 setSubtitle:v7];

  v11[0] = @"af";
  v11[1] = @"deviceIdentifier";
  uint64_t v8 = *(void *)(a1 + 32);
  v12[0] = &__kCFBooleanTrue;
  v12[1] = v8;
  v11[2] = @"sessionID";
  v12[2] = v3;
  unsigned int v9 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:3];
  [v4 setUserInfo:v9];

  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    LogPrintF();
  }
  [*(id *)(a1 + 40) _addRequestWithID:*(void *)(a1 + 32) type:4 content:v10];
}

id sub_100183DF8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _tvAutoFillRemove:*(void *)(a1 + 40)];
}

id sub_100183FC0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _tvAutoFillRemoveAll];
}

id sub_10018437C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _watchKeyboardPostIfNeeded:*(void *)(a1 + 40)];
}

id sub_10018446C(void *a1)
{
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v3 = a1[4];
  id v2 = (void *)a1[5];
  uint64_t v4 = a1[6];

  return [v2 _addRequestWithID:v3 content:v4 type:6];
}

id sub_1001845A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _watchKeyboardRemove:*(void *)(a1 + 40)];
}

id sub_100184768(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _watchKeyboardRemoveAll];
}

id sub_1001848C8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerUpdate:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

void sub_100184B88(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_100968BC0 <= 60)
    {
      id v7 = v2;
      if (dword_100968BC0 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v7, v4))
      {
        id v6 = [v3 localizedDescription];
        LogPrintF();

LABEL_8:
        uint64_t v3 = v7;
      }
    }
  }
  else if (dword_100968BC0 <= 30)
  {
    id v7 = 0;
    if (dword_100968BC0 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v3 = 0, v5))
    {
      LogPrintF();
      goto LABEL_8;
    }
  }
}

id sub_100184D64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _watchKeyboardUpdate:*(void *)(a1 + 40) rtiData:*(void *)(a1 + 48)];
}

void sub_1001851D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_100968BC0 <= 60)
    {
      id v7 = v2;
      if (dword_100968BC0 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v7, v4))
      {
        id v6 = [v3 localizedDescription];
        LogPrintF();

LABEL_8:
        uint64_t v3 = v7;
      }
    }
  }
  else if (dword_100968BC0 <= 30)
  {
    id v7 = 0;
    if (dword_100968BC0 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v3 = 0, v5))
    {
      LogPrintF();
      goto LABEL_8;
    }
  }
}

id sub_100185890(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _homePodHandoffPostIfNeeded:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

id sub_100185990(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) homePodType];
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    LogPrintF();
  }
  uint64_t v3 = *(void **)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) notificationType:v8];

  return _[v3 _addRequestWithID:v5 content:v4 type:v6 isHomePodMini:v2 == (id)2];
}

id sub_100185B0C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _homePodHandoffRemove:*(void *)(a1 + 40) reason:*(void *)(a1 + 48)];
}

id sub_100185D94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _homePodHandoffRemoveAll];
}

id sub_100185F10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _homePodHandoffUpdateIfNeeded:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

void sub_100186170(uint64_t a1, void *a2)
{
  id v13 = a2;
  if (v13)
  {
    if (dword_100968BC0 <= 60 && (dword_100968BC0 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      [v13 localizedDescription];
      uint64_t v12 = v11 = v3;
      LogPrintF();
    }
    uint64_t v4 = [v13 domain:v11, v12];
    uint64_t v5 = off_100968C40();
    id v6 = v4;
    id v7 = v5;
    uint64_t v8 = v7;
    if (v6 == v7)
    {
    }
    else
    {
      if ((v6 == 0) == (v7 != 0))
      {

LABEL_17:
LABEL_18:

        goto LABEL_19;
      }
      unsigned int v9 = [v6 isEqual:v7];

      if (!v9) {
        goto LABEL_17;
      }
    }
    id v10 = [v13 code];

    if (v10 != (id)100) {
      goto LABEL_19;
    }
    id v6 = [*(id *)(a1 + 40) copy];
    [v6 setAttachmentURL:0];
    [*(id *)(a1 + 48) homePodHandoffUpdateIfNeeded:*(void *)(a1 + 32) info:v6];
    goto LABEL_18;
  }
  if (dword_100968BC0 <= 30 && (dword_100968BC0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
LABEL_19:
}

void sub_100186780(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001867B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100186C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state)
{
}

Class sub_10018781C()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  Class result = objc_getClass("UNUserNotificationCenter");
  qword_100980188 = (uint64_t)result;
  off_100968C30 = (uint64_t (*)())sub_100187880;
  return result;
}

id sub_100187880()
{
  return (id)qword_100980188;
}

void sub_10018788C(id a1)
{
  qword_100980198 = (uint64_t)dlopen("/System/Library/Frameworks/UserNotifications.framework/UserNotifications", 2);
}

Class sub_1001878B8()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  Class result = objc_getClass("UNNotificationRequest");
  qword_1009801A0 = (uint64_t)result;
  off_100968C38 = (uint64_t (*)())sub_10018791C;
  return result;
}

id sub_10018791C()
{
  return (id)qword_1009801A0;
}

id sub_100187928()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980198, "UNErrorDomain");
  if (v0) {
    objc_storeStrong((id *)&qword_100980158, *v0);
  }
  off_100968C40 = (uint64_t (*)())sub_1001879B8;
  uint64_t v1 = (void *)qword_100980158;

  return v1;
}

id sub_1001879B8()
{
  return (id)qword_100980158;
}

id sub_1001879C4()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980198, "UNNotificationAttachmentOptionsTypeHintKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100980168, *v0);
  }
  off_100968C48 = (uint64_t (*)())sub_100187A54;
  uint64_t v1 = (void *)qword_100980168;

  return v1;
}

id sub_100187A54()
{
  return (id)qword_100980168;
}

id sub_100187A60()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980198, "UNNotificationAttachmentOptionsHiddenFromDefaultExpandedViewKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100980160, *v0);
  }
  off_100968C50 = (uint64_t (*)())sub_100187AF0;
  uint64_t v1 = (void *)qword_100980160;

  return v1;
}

id sub_100187AF0()
{
  return (id)qword_100980160;
}

Class sub_100187AFC()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  Class result = objc_getClass("UNNotificationAttachment");
  qword_1009801A8 = (uint64_t)result;
  off_100968C58 = (uint64_t (*)())sub_100187B60;
  return result;
}

id sub_100187B60()
{
  return (id)qword_1009801A8;
}

id sub_100187B6C()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980198, "UNNotificationDefaultActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_100980170, *v0);
  }
  off_100968C60 = (uint64_t (*)())sub_100187BFC;
  uint64_t v1 = (void *)qword_100980170;

  return v1;
}

id sub_100187BFC()
{
  return (id)qword_100980170;
}

id sub_100187C08()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980198, "UNNotificationDismissActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_100980178, *v0);
  }
  off_100968C68 = (uint64_t (*)())sub_100187C98;
  uint64_t v1 = (void *)qword_100980178;

  return v1;
}

id sub_100187C98()
{
  return (id)qword_100980178;
}

Class sub_100187CA4()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  Class result = objc_getClass("UNMutableNotificationContent");
  qword_1009801B0 = (uint64_t)result;
  off_100968C70 = (uint64_t (*)())sub_100187D08;
  return result;
}

id sub_100187D08()
{
  return (id)qword_1009801B0;
}

Class sub_100187D14()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  Class result = objc_getClass("UNNotificationSound");
  qword_1009801B8 = (uint64_t)result;
  off_100968C78 = (uint64_t (*)())sub_100187D78;
  return result;
}

id sub_100187D78()
{
  return (id)qword_1009801B8;
}

Class sub_100187D84()
{
  if (qword_1009801C8 != -1) {
    dispatch_once(&qword_1009801C8, &stru_1008CF038);
  }
  Class result = objc_getClass("RTIInputSystemDataPayload");
  qword_1009801C0 = (uint64_t)result;
  off_100968C80 = (uint64_t (*)())sub_100187DE8;
  return result;
}

id sub_100187DE8()
{
  return (id)qword_1009801C0;
}

void sub_100187DF4(id a1)
{
  qword_1009801D0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/RemoteTextInput.framework/RemoteTextInput", 2);
}

id sub_100187E20()
{
  if (qword_100980190 != -1) {
    dispatch_once(&qword_100980190, &stru_1008CF018);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980198, "UNNotificationSilenceActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_100980180, *v0);
  }
  off_100968C88 = (uint64_t (*)())sub_100187EB0;
  uint64_t v1 = (void *)qword_100980180;

  return v1;
}

id sub_100187EB0()
{
  return (id)qword_100980180;
}

id sub_1001882F4(uint64_t a1)
{
  [*(id *)(a1 + 32) onqueue_updateTetheringSupported];
  id v2 = *(void **)(a1 + 32);

  return [v2 onqueue_updateHostAPNetwork];
}

id sub_1001887E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_updateTetheringSupported];
}

id sub_10018885C(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_updateTetheringSupported];
}

id sub_1001888D8(uint64_t a1)
{
  id v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Personal hotspot settings changed", v4, 2u);
  }

  return [*(id *)(a1 + 32) onqueue_updateTetheringSupported];
}

id sub_1001894A0(uint64_t a1)
{
  id v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting tethering", v4, 2u);
  }

  return [*(id *)(a1 + 32) onqueue_startTetheringWithCompletionHandler:*(void *)(a1 + 56) modelID:*(void *)(a1 + 40) productVersion:*(void *)(a1 + 48) canConnectOn5GHz:*(unsigned __int8 *)(a1 + 64)];
}

void sub_100189C6C(id a1)
{
  uint64_t v1 = +[SDStatusMonitor sharedMonitor];
  id v2 = [v1 wifiManager];

  if (v2)
  {
    uint64_t v3 = tethering_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Beginning shut down of wifi discovery", buf, 2u);
    }

    *(_OWORD *)buf = *(_OWORD *)&off_1008CF108;
    v7[0] = kCFBooleanFalse;
    v7[1] = kCFBooleanFalse;
    CFDictionaryRef v4 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)buf, v7, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v4)
    {
      CFDictionaryRef v5 = v4;
      WiFiManagerClientSetMISDiscoveryStateExt();
      CFRelease(v5);
    }
    else
    {
      id v6 = tethering_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10018B488();
      }
    }
  }
}

void sub_10018A134(uint64_t a1)
{
  id v2 = tethering_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Restarting network timer", v8, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  CFDictionaryRef v4 = *(void **)(v3 + 56);
  if (v4)
  {
    [v4 invalidate];
    uint64_t v3 = *(void *)(a1 + 32);
  }
  uint64_t v5 = +[NSTimer scheduledTimerWithTimeInterval:v3 target:"networkTimerFired:" selector:0 userInfo:0 repeats:8.0];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 56);
  *(void *)(v6 + 56) = v5;
}

id sub_10018A28C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0;

  [*(id *)(a1 + 32) onqueue_cleanUpFailedNetworkBringUp];
  CFDictionaryRef v4 = *(void **)(a1 + 32);

  return [v4 onqueue_captureTailspin];
}

void sub_10018A630(uint64_t a1, int a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 19) = 0;
  [*(id *)(a1 + 40) closeFile];
  uint64_t v3 = tethering_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (a2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished capturing tailspin (success: %@)", (uint8_t *)&v5, 0xCu);
  }
}

id sub_10018AE58(uint64_t a1)
{
  [*(id *)(a1 + 32) onqueue_updateTetheringSupported];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 onqueue_handleSwitchCondtionsChanged];
}

id sub_10018AF88(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_handleHostAPChanged:*(void *)(a1 + 40)];
}

void sub_10018B1DC(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"com.apple.sharingd.HotspotMISStateChanged" object:0 userInfo:0];
}

void sub_10018B3A8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No wifi device to copy host networks from", v2, v3, v4, v5, v6);
}

void sub_10018B3DC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error copying wifi networks = %d", (uint8_t *)v2, 8u);
}

void sub_10018B454()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to set MIS Discovery state, could not create a CFDictionaryRef!", v2, v3, v4, v5, v6);
}

void sub_10018B488()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create a CFDictionaryRef!", v2, v3, v4, v5, v6);
}

void sub_10018B4BC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Network never came up", v2, v3, v4, v5, v6);
}

void sub_10018B4F0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to generate default personal hotspot password! (%@)", (uint8_t *)&v2, 0xCu);
}

void sub_10018B868(id a1)
{
  uint64_t v1 = objc_alloc_init(SDPowerChargingStatusNotifier);
  int v2 = (void *)qword_1009801D8;
  qword_1009801D8 = (uint64_t)v1;
}

void sub_10018B8B4(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kSFPowerSourceStatusNotificationFromWatch, 0, 0, 0);
  int v2 = charging_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "notifying battery status change.", v3, 2u);
  }
}

void sub_10018BF54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018C064(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018C0EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018C164(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10018E958()
{
  sub_100020098();
  sub_1000200B0((void *)&_mh_execute_header, v0, v1, "Could not generate local key = %d, (output length = %d)", v2, v3);
}

void sub_10018E9C4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No local key to sign remote key", v2, v3, v4, v5, v6);
}

void sub_10018E9F8()
{
  sub_100020098();
  sub_1000200B0((void *)&_mh_execute_header, v0, v1, "Failed to signed remote key = %d, output length = %d", v2, v3);
}

void sub_10018EA64()
{
  sub_10001587C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "KeybagUUIDs have changed", v1, 2u);
}

void sub_10018EAA4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error serializing LTKs: %@", v2, v3, v4, v5, v6);
}

void sub_10018EB0C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Set backup key", v2, v3, v4, v5, v6);
}

void sub_10018EB40()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error setting backup exclusion key: %@", v2, v3, v4, v5, v6);
}

void sub_10018EBA8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error persisting LTKs: %@", v2, v3, v4, v5, v6);
}

void sub_10018EC10()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error loading LTK file: %@", v2, v3, v4, v5, v6);
}

void sub_10018EC78()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error deserializing LTKs: %@", v2, v3, v4, v5, v6);
}

void sub_10018ECE0(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 longTermKeyStorageFilePath];
  sub_10002972C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Couldn't delete LTKs, no storage path: %@", v4, 0xCu);
}

void sub_10018ED74()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to delete LTKs %@", v2, v3, v4, v5, v6);
}

void sub_10018EDDC(void *a1)
{
  uint64_t v1 = [a1 pairingStorePath];
  sub_10002972C();
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "Error creating unlock storage folder: (pairing path %@, error %@)", v4, v5, v6, v7, v8);
}

void sub_10018EE78()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Unable to find LTK file (error: %@)", v2, v3, v4, v5, v6);
}

void sub_10018EEE0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create escrow for stash", v2, v3, v4, v5, v6);
}

void sub_10018EF14(void *a1)
{
  uint64_t v2 = [a1 localLongTermKey];
  unsigned int v9 = [a1 remoteLongTermKey];
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "No long term keys to create session (local key = %@, remote key = %@)", v5, v6, v7, v8, 2u);
}

void sub_10018EFC8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Not privileged to use AKS SPI", v2, v3, v4, v5, v6);
}

void sub_10018EFFC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Remote peer setup, could not validate escrow", v2, v3, v4, v5, v6);
}

void sub_10018F030()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No auth session for step", v2, v3, v4, v5, v6);
}

void sub_10018F064(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LOWORD(v3) = 1024;
  HIWORD(v3) = a2;
  sub_1000200B0((void *)&_mh_execute_header, a2, a3, "Step failed with output length = %d, CFErrorRef error = %x", 67109376, v3);
}

void sub_10018F0E0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "Failed to create escrow secret ouput length = %d", a5, a6, a7, a8, 0);
}

void sub_10018F150(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a1, a3, "Failed to reset session = %d", a5, a6, a7, a8, 0);
}

void sub_10018F1C8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No long term keys to find escrow record", v2, v3, v4, v5, v6);
}

void sub_10018F1FC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to reset escrow record", v2, v3, v4, v5, v6);
}

void sub_10018F230(uint64_t a1, uint64_t a2, NSObject *a3)
{
  LOWORD(v3) = 1024;
  HIWORD(v3) = a2;
  sub_1000200B0((void *)&_mh_execute_header, a2, a3, "Failed to store escrow data (add status:%d, delete status:%d)", 67109376, v3);
}

void sub_10018F2A8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10018F314()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Migrating escrow data in new format failed", v2, v3, v4, v5, v6);
}

void sub_10018F348(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "Failed to delete escrow record = %d", a5, a6, a7, a8, 0);
}

void sub_10018F408(id a1)
{
  uint64_t v1 = objc_alloc_init(SDAutoUnlockTransport);
  uint64_t v2 = (void *)qword_1009801E8;
  qword_1009801E8 = (uint64_t)v1;
}

void sub_10018F704(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientMap];
  [v2 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_10018F80C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) clientMap];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];

  uint64_t v3 = objc_opt_new();
  uint64_t v4 = [*(id *)(a1 + 32) sendIdentifierToSessionID];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10018F9D4;
  v17[3] = &unk_1008CD6C8;
  id v18 = *(id *)(a1 + 40);
  id v5 = v3;
  id v19 = v5;
  [v4 enumerateKeysAndObjectsUsingBlock:v17];

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v13 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8 * (void)v10);
        uint64_t v12 = [*(id *)(a1 + 32) sendIdentifierToSessionID:v13];
        [v12 removeObjectForKey:v11];

        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v13 objects:v20 count:16];
    }
    while (v8);
  }
}

void sub_10018F9D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 isEqualToString:*(void *)(a1 + 32)]) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

void sub_10018FCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10018FD08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10018FD18(uint64_t a1)
{
}

void sub_10018FD20(uint64_t a1)
{
  uint64_t v2 = [[*(id *)(a1 + 32) onqueue_bluetoothIDForIDSID:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10018FFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100190010(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) onqueue_bluetoothDeviceIdentifiers];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100190B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100190B68(uint64_t a1)
{
  uint64_t v2 = [[*(id *)(a1 + 32) onqueue_devicesWithLTKs];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100190E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100190EA4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) onqueue_autoUnlockEligibleDevices:*(unsigned __int8 *)(a1 + 56) deviceType:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100191600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100191618(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) onqueue_enabledAutoUnlockDevicesUsingCache:*(unsigned __int8 *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001919C4(uint64_t a1)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) idsService];
  uint64_t v3 = [v2 devices];

  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v7);
        uint64_t v9 = +[SDAutoUnlockAKSManager sharedManager];
        id v10 = [v8 uniqueIDOverride];
        unsigned int v11 = [v9 deviceEnabledAsKeyForIDSDeviceID:v10];

        if (v11)
        {
          uint64_t v12 = [*(id *)(a1 + 32) autoUnlockDeviceForIDSDevice:v8 cloudPaired:1 cached:0];
          if (v12) {
            [*(id *)(a1 + 40) addObject:v12];
          }
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
}

void sub_100192260(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10019249C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100194074(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if ((a2 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
    }
  }
  return result;
}

void sub_1001942E4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) primaryClient];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) primaryClient];
    [v4 transportDidChangeDevices:*(void *)(a1 + 32)];
  }
}

void sub_100194498(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) primaryClient];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) primaryClient];
    [v4 transportDidChangeNearbyState:*(void *)(a1 + 32)];
  }
}

void sub_100194630(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) idsService];
  char v3 = [v2 deviceForFromID:*(void *)(a1 + 40)];
  id v4 = [v3 uniqueIDOverride];

  id v5 = auto_unlock_log();
  uint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = [*(id *)(a1 + 48) type];
      id v8 = [*(id *)(a1 + 48) data];
      unsigned int v9 = [v8 length];
      id v10 = [*(id *)(a1 + 56) outgoingResponseIdentifier];
      int v42 = 67109634;
      *(_DWORD *)__int16 v43 = v7;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = v9;
      *(_WORD *)uint64_t v44 = 2112;
      *(void *)&void v44[2] = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received protobuf (xpc_type_t type = %d, size = %u, identifier = %@)", (uint8_t *)&v42, 0x18u);
    }
    unsigned int v11 = [SDAutoUnlockSessionWrapper alloc];
    uint64_t v12 = [*(id *)(a1 + 48) data];
    uint64_t v6 = [(SDAutoUnlockSessionWrapper *)v11 initWithData:v12];

    if (![v6 hasSessionID]
      || ([v6 sessionID],
          long long v13 = objc_claimAutoreleasedReturnValue(),
          id v14 = [v13 length],
          v13,
          v14 != (id)16))
    {
      id v18 = auto_unlock_log();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100196290(v6, (id *)(a1 + 48), v18);
      }
      goto LABEL_37;
    }
    id v15 = [*(id *)(a1 + 48) type];
    id v16 = objc_alloc((Class)NSUUID);
    id v17 = [v6 sessionID];
    id v18 = [v16 initWithUUIDBytes:[v17 bytes]];

    if ((int)v15 > 500)
    {
      if (v15 == 501)
      {
        long long v37 = auto_unlock_log();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          long long v38 = [*(id *)(a1 + 56) serverReceivedTime];
          unsigned int v39 = [*(id *)(a1 + 56) fromServerStorage];
          CFStringRef v40 = @"NO";
          if (v39) {
            CFStringRef v40 = @"YES";
          }
          int v42 = 138412546;
          *(void *)__int16 v43 = v38;
          *(_WORD *)&v43[8] = 2112;
          *(void *)uint64_t v44 = v40;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Received registration request (date: %@, from storage: %@)", (uint8_t *)&v42, 0x16u);
        }
        uint64_t v23 = [*(id *)(a1 + 32) primaryClient];
        uint64_t v41 = *(void *)(a1 + 32);
        unsigned int v25 = [v6 payload];
        [v23 transport:v41 didReceiveRegistrationRequestWithSessionID:v18 deviceID:v4 requestData:v25];
        goto LABEL_36;
      }
      if (v15 == 505)
      {
        unint64_t v26 = auto_unlock_log();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          char v27 = [*(id *)(a1 + 56) serverReceivedTime];
          unsigned int v28 = [*(id *)(a1 + 56) fromServerStorage];
          CFStringRef v29 = @"NO";
          if (v28) {
            CFStringRef v29 = @"YES";
          }
          int v42 = 138412546;
          *(void *)__int16 v43 = v27;
          *(_WORD *)&v43[8] = 2112;
          *(void *)uint64_t v44 = v29;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Received key originating registration request (date: %@, from storage: %@)", (uint8_t *)&v42, 0x16u);
        }
        uint64_t v23 = [*(id *)(a1 + 32) primaryClient];
        uint64_t v30 = *(void *)(a1 + 32);
        unsigned int v25 = [v6 payload];
        [v23 transport:v30 didReceiveKeyOriginatingRegistrationRequestWithSessionID:v18 deviceID:v4 requestData:v25];
        goto LABEL_36;
      }
    }
    else
    {
      if (v15 == 2)
      {
        uint64_t v23 = [*(id *)(a1 + 32) primaryClient];
        uint64_t v36 = *(void *)(a1 + 32);
        unsigned int v25 = [v6 payload];
        [v23 transport:v36 didReceiveDisableMessage:v25 fromDeviceID:v4];
        goto LABEL_36;
      }
      if (v15 == 101)
      {
        id v19 = auto_unlock_log();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = [*(id *)(a1 + 56) serverReceivedTime];
          unsigned int v21 = [*(id *)(a1 + 56) fromServerStorage];
          CFStringRef v22 = @"NO";
          if (v21) {
            CFStringRef v22 = @"YES";
          }
          int v42 = 138412546;
          *(void *)__int16 v43 = v20;
          *(_WORD *)&v43[8] = 2112;
          *(void *)uint64_t v44 = v22;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Received pairing request (date: %@, from storage: %@)", (uint8_t *)&v42, 0x16u);
        }
        if (![*(id *)(a1 + 32) pairingRequestIsValidForDeviceID:v4 messageContext:*(void *)(a1 + 56)])goto LABEL_37; {
        uint64_t v23 = [*(id *)(a1 + 32) primaryClient];
        }
        uint64_t v24 = *(void *)(a1 + 32);
        unsigned int v25 = [v6 payload];
        [v23 transport:v24 didReceivePairingRequestWithSessionID:v18 deviceID:v4 requestData:v25];
LABEL_36:

LABEL_37:
        goto LABEL_38;
      }
    }
    uint64_t v31 = [*(id *)(a1 + 32) clientMap];
    uint64_t v32 = [v18 UUIDString];
    uint64_t v23 = [v31 objectForKey:v32];

    if (objc_opt_respondsToSelector())
    {
      uint64_t v33 = *(void *)(a1 + 32);
      BOOL v34 = [v6 payload];
      [v23 transport:v33 didReceivePayload:v34 type:v15 deviceID:v4];
    }
    unsigned int v25 = auto_unlock_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v35 = [*(id *)(a1 + 32) clientMap];
      int v42 = 138412802;
      *(void *)__int16 v43 = v23;
      *(_WORD *)&v43[8] = 2112;
      *(void *)uint64_t v44 = v18;
      *(_WORD *)&v44[8] = 2112;
      __int16 v45 = v35;
      _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "client:%@, sessionID:%@, clients:%@", (uint8_t *)&v42, 0x20u);
    }
    goto LABEL_36;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_10001CB00(v6);
  }
LABEL_38:
}

void sub_100194DBC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) sendIdentifierToSessionID];
  char v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) clientMap];
    id v5 = [v4 objectForKey:v3];

    uint64_t v6 = auto_unlock_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v9 = 138412802;
      id v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v3;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Calling client for ACK (client: %@, session ID: %@, identifier: %@)", (uint8_t *)&v9, 0x20u);
    }

    if (objc_opt_respondsToSelector()) {
      [v5 transport:*(void *)(a1 + 32) didReceiveMessageACKForIdentifier:*(void *)(a1 + 40)];
    }
    id v8 = [*(id *)(a1 + 32) sendIdentifierToSessionID];
    [v8 removeObjectForKey:*(void *)(a1 + 40)];
  }
}

void sub_100195F5C(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Watch OS too old. Skipping", buf, 2u);
}

void sub_100195F9C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Skipping device without uniqueID", v1, 2u);
}

void sub_100195FE0()
{
  sub_10002972C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "IDS device not cloud paired %@", v1, 0xCu);
}

void sub_100196054()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Skipping Unsupported hardware: %@", v1, 0xCu);
}

void sub_1001960C8()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Skipping unpaired device: %@", v1, 0xCu);
}

void sub_10019613C()
{
  sub_10002972C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "IDSDevice not found for deviceID: %@", v1, 0xCu);
}

void sub_1001961B0(uint64_t a1, int a2, os_log_t log)
{
  int v3 = 136315650;
  id v4 = "-[SDAutoUnlockTransport macVersionEligibleForDeviceID:]";
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "%s: called with deviceID:%@ whose deviceClass is %d", (uint8_t *)&v3, 0x1Cu);
}

void sub_10019624C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Proxy device not cloud paired", v1, 2u);
}

void sub_100196290(void *a1, id *a2, NSObject *a3)
{
  uint64_t v6 = [a1 sessionID];
  __int16 v7 = [*a2 data];
  int v8 = 138412802;
  int v9 = v6;
  __int16 v10 = 2112;
  __int16 v11 = a1;
  __int16 v12 = 2112;
  __int16 v13 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Incoming message missing info (session = %@, wrapper = %@, data = %@)", (uint8_t *)&v8, 0x20u);
}

void sub_1001964D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001964F8(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleEndpointsChanged:v3];
}

void sub_100196C58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = airdrop_nw_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AirDrop browse start handler called", (uint8_t *)&v16, 2u);
  }

  int v8 = (void *)nw_agent_client_copy_browse_descriptor();
  if (v8)
  {
    if (nw_browse_descriptor_get_type() == 2)
    {
      int v9 = [[_TtC16DaemoniOSLibrary20SDAirDropAgentClient alloc] initWithClient:v5 browseDescriptor:v8 browseResponse:v6];
      __int16 v10 = [*(id *)(a1 + 32) endpointService];
      __int16 v11 = [v10 addClient:v9];

      __int16 v12 = airdrop_nw_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v13 = [v11 agentClient];
        uint64_t v14 = [v13 id];
        int v16 = 138412290;
        id v17 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Created AirDrop agent client %@", (uint8_t *)&v16, 0xCu);
      }
      id v15 = [*(id *)(a1 + 32) clientTokens];
      [v15 addObject:v11];
    }
    else
    {
      airdrop_nw_log();
      int v9 = (_TtC16DaemoniOSLibrary20SDAirDropAgentClient *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(&v9->super, OS_LOG_TYPE_ERROR)) {
        sub_1001976E4(&v9->super);
      }
    }
  }
  else
  {
    airdrop_nw_log();
    int v9 = (_TtC16DaemoniOSLibrary20SDAirDropAgentClient *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v9->super, OS_LOG_TYPE_ERROR)) {
      sub_10019766C((uint64_t)v5, &v9->super);
    }
  }
}

void sub_100196E7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = airdrop_nw_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AirDrop browse stop handler called", (uint8_t *)&v11, 2u);
  }

  id v5 = [*(id *)(a1 + 32) _agentClientTokenForClient:v3];

  if (v5)
  {
    id v6 = airdrop_nw_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v7 = [v5 agentClient];
      int v8 = [v7 id];
      int v11 = 138412290;
      __int16 v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing AirDrop agent client %@", (uint8_t *)&v11, 0xCu);
    }
    int v9 = [*(id *)(a1 + 32) endpointService];
    [v9 removeClientWithToken:v5];

    __int16 v10 = [*(id *)(a1 + 32) clientTokens];
    [v10 removeObject:v5];
  }
}

void sub_10019720C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copy];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = [*(id *)(a1 + 40) clientTokens];
  id v3 = [obj countByEnumeratingWithState:&v29 objects:v42 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v24 = *(void *)v30;
    *(void *)&long long v4 = 138412546;
    long long v22 = v4;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v24) {
          objc_enumerationMutation(obj);
        }
        __int16 v7 = [*(id *)(*((void *)&v29 + 1) + 8 * i) agentClient:v22];
        int v8 = airdrop_nw_log();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = [v7 id];
          __int16 v10 = [v7 bundleID];
          unsigned int v11 = [v7 pid];
          __int16 v12 = [v7 startTime];
          *(_DWORD *)buf = 138413058;
          unsigned int v35 = v9;
          __int16 v36 = 2112;
          id v37 = v10;
          __int16 v38 = 1024;
          unsigned int v39 = v11;
          __int16 v40 = 2112;
          uint64_t v41 = v12;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Updating browse results for client %@ - bundleID %@ - pid %d - startTime %@", buf, 0x26u);
        }
        __int16 v13 = (void *)nw_array_create();
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        id v14 = v2;
        id v15 = (char *)[v14 countByEnumeratingWithState:&v25 objects:v33 count:16];
        if (v15)
        {
          int v16 = v15;
          uint64_t v17 = *(void *)v26;
          do
          {
            for (j = 0; j != v16; ++j)
            {
              if (*(void *)v26 != v17) {
                objc_enumerationMutation(v14);
              }
              nw_array_append();
            }
            int v16 = (char *)[v14 countByEnumeratingWithState:&v25 objects:v33 count:16];
          }
          while (v16);
        }

        id v19 = [v7 browseResponse];
        ((void (**)(void, void *))v19)[2](v19, v13);

        int v20 = airdrop_nw_log();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v21 = [v7 id];
          *(_DWORD *)buf = v22;
          unsigned int v35 = v21;
          __int16 v36 = 2112;
          id v37 = v2;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Updated browse client %@ - endpoints %@ ", buf, 0x16u);
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v29 objects:v42 count:16];
    }
    while (v5);
  }
}

void sub_100197628(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to create browse agent", v1, 2u);
}

void sub_10019766C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "No browse descriptor for client:%@", (uint8_t *)&v2, 0xCu);
}

void sub_1001976E4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Not an application service browse request", v1, 2u);
}

void sub_10019A594(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = (void *)SFNodeCopyKinds();
  if (([v7 containsObject:kSFNodeKindUnknown] & 1) == 0)
  {
    int v8 = sub_1001AC8B8();
    if (!v8)
    {
      int v8 = [*(id *)(*(void *)(a1 + 32) + 248) objectForKeyedSubscript:v5];
      if (!v8)
      {
        double v9 = (double)(arc4random() % 0x64 + 1) / 100.0;
        double v10 = (double)(arc4random() % 0x12D) / 100.0;
        int v8 = objc_opt_new();
        [v8 setPtsScore:v9];
        [v8 setFlags:[v8 flags] | 8];
        [v8 setDistanceMeters:v10];
        [v8 setFlags:[v8 flags] | 1];
        if (![*(id *)(*(void *)(a1 + 32) + 248) count])
        {
          [v8 setHorizontalAngle:0.0];
          [v8 setFlags:[v8 flags] | 2];
        }
        [*(id *)(*(void *)(a1 + 32) + 248) setObject:v8 forKeyedSubscript:v5];
        +[NSKeyedArchiver archivedDataWithRootObject:v8 requiringSecureCoding:1 error:0];
        SFNodeSetRangingData();
        unsigned int v11 = magic_head_log();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v12 = (void *)SFNodeCopyDisplayName();
          int v13 = 138412546;
          id v14 = v8;
          __int16 v15 = 2112;
          int v16 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Added fake ranging measurement %@ to %@", (uint8_t *)&v13, 0x16u);
        }
      }
    }
  }
}

int64_t sub_10019AD90(id a1, id a2, id a3)
{
  id v3 = a3;
  DisplayName = (void *)SFNodeGetDisplayName();
  uint64_t v5 = SFNodeGetDisplayName();

  return (int64_t)_[DisplayName localizedCaseInsensitiveCompare:v5];
}

int64_t sub_10019ADF4(id a1, id a2, id a3)
{
  id v3 = a3;
  DisplayName = (void *)SFNodeGetDisplayName();
  uint64_t v5 = SFNodeGetDisplayName();

  return (int64_t)_[DisplayName localizedCaseInsensitiveCompare:v5];
}

void sub_10019BBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019BC18(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    id v2 = objc_loadWeakRetained(WeakRetained + 34);
    [v2 nodeBrowser:v3 nodesChangedForParent:v3[2] protocol:v3[4] error:*((unsigned int *)v3 + 12)];

    id WeakRetained = v3;
  }
}

void sub_10019C4E4(id a1)
{
  id v2 = [(objc_class *)off_100968E80() sharedManager];
  if ([v2 isMultiUser])
  {
    uint64_t v1 = [v2 currentUser];
    byte_100980200 = [v1 userType] == (id)1;
  }
  else
  {
    byte_100980200 = 0;
  }
}

uint64_t sub_10019E1B4(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 48));
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_10019E228(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, *(unsigned int *)(a1 + 40));
}

void sub_10019E320(uint64_t a1)
{
  if (dword_100968E10 <= 50 && (dword_100968E10 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (SFAppleIDRemoveAllCertificatesFromKeychain())
  {
    if (dword_100968E10 > 60 || dword_100968E10 == -1 && !_LogCategory_Initialize()) {
      return;
    }
LABEL_15:
    LogPrintF();
    return;
  }
  if (SFAppleIDRemoveAllKeysFromKeychain())
  {
    if (dword_100968E10 > 60 || dword_100968E10 == -1 && !_LogCategory_Initialize()) {
      return;
    }
    goto LABEL_15;
  }
  id obj = *(id *)(a1 + 40);
  objc_sync_enter(obj);
  [*(id *)(a1 + 40) _setMetaInfoValue:&off_100902D30 forKey:@"KeychainCleanupTag"];
  objc_sync_exit(obj);
}

void sub_10019E4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10019E714(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  [*(id *)(a1 + 32) _handlePeriodicVerifyTimerFired];
  objc_sync_exit(obj);
}

void sub_10019E770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10019EAD0(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  [*(id *)(a1 + 32) _handleThrottledRetryTimerFired];
  objc_sync_exit(obj);
}

void sub_10019EB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10019FDB8(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  id v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  if (a3)
  {
    if (dword_100968E10 <= 60 && (dword_100968E10 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v19 = a3;
      LogPrintF();
    }
    uint64_t v14 = *(void *)(a1 + 64);
    if (v14) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }
  if (([*(id *)(a1 + 40) isEqualToString:*(void *)(*(void *)(a1 + 32) + 24)] & 1) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 64);
    if (v14)
    {
      LODWORD(a3) = -6709;
LABEL_25:
      NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
      uint64_t v17 = +[NSString stringWithUTF8String:DebugGetErrorString()];
      int v13 = (void *)v17;
      CFStringRef v18 = @"?";
      if (v17) {
        CFStringRef v18 = (const __CFString *)v17;
      }
      CFStringRef v21 = v18;
      id v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1, v19);
      __int16 v15 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:(int)a3 userInfo:v3];
      char v16 = 0;
      unsigned int v11 = 0;
      goto LABEL_15;
    }
LABEL_28:
    unsigned int v11 = 0;
    goto LABEL_17;
  }
  int v8 = [v6 objectForKeyedSubscript:@"altDsID"];
  [*(id *)(a1 + 48) setAltDSID:v8];

  [*(id *)(a1 + 48) setSuggestedValidDuration:CFDictionaryGetInt64()];
  double v9 = [v6 objectForKeyedSubscript:@"ValidatedEmailHashes"];
  if ([v9 count]) {
    double v10 = v9;
  }
  else {
    double v10 = 0;
  }
  [*(id *)(a1 + 48) setValidatedEmailHashes:v10];
  unsigned int v11 = [v6 objectForKeyedSubscript:@"ValidatedPhoneHashes"];

  if ([v11 count]) {
    __int16 v12 = v11;
  }
  else {
    __int16 v12 = 0;
  }
  [*(id *)(a1 + 48) setValidatedPhoneHashes:v12];
  int v13 = [v6 objectForKeyedSubscript:@"ValidAsOf"];
  [*(id *)(a1 + 48) setValidStartDate:v13];

  if (dword_100968E10 <= 30 && (dword_100968E10 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    LogPrintF();
  }
  [*(id *)(a1 + 32) _setCurrentAppleIDContactInfo:validationRecord:*(void *)(a1 + 56) *(void *)(a1 + 48) v19];
  uint64_t v14 = *(void *)(a1 + 64);
  if (v14)
  {
    __int16 v15 = 0;
    char v16 = 1;
LABEL_15:
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);
    if ((v16 & 1) == 0)
    {
    }
  }
LABEL_17:

  objc_sync_exit(v7);
}

void sub_1001A00EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A1840(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 48));
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    id v7 = [v8 description];
    (*(void (**)(uint64_t, void *, id))(v6 + 16))(v6, v7, v5);
  }
}

uint64_t sub_1001A18DC(uint64_t a1)
{
  [*(id *)(a1 + 32) connection:0 didReceiveIncomingMessage:0];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_1001A1944(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001A1960(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001A197C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001A1998(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(a1 + 40);
  if (v2)
  {
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    uint64_t v3 = +[NSString stringWithUTF8String:DebugGetErrorString()];
    long long v4 = (void *)v3;
    CFStringRef v5 = @"?";
    if (v3) {
      CFStringRef v5 = (const __CFString *)v3;
    }
    CFStringRef v11 = v5;
    uint64_t v6 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1, v1 + 16);
    id v7 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v2 userInfo:v6];
    (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v7);
  }
  else
  {
    id v8 = *(void (**)(uint64_t, void, void))(v1 + 16);
    uint64_t v9 = *(void *)(a1 + 32);
    v8(v9, 0, 0);
  }
}

void sub_1001A2430(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1001A2468(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a3;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001A2494(void *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1[4] + 48));
  id v6 = v5;
  if (v6)
  {
    id v7 = 0;
  }
  else
  {
    id v7 = +[NSString stringWithFormat:@"Server Task Type: %d\nResponse Info: %@", a1[6], v9];
  }
  uint64_t v8 = a1[5];
  if (v8) {
    (*(void (**)(uint64_t, void *, id))(v8 + 16))(v8, v7, v6);
  }
}

void sub_1001A255C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    uint64_t v3 = +[NSString stringWithUTF8String:DebugGetErrorString()];
    long long v4 = (void *)v3;
    CFStringRef v5 = @"?";
    if (v3) {
      CFStringRef v5 = (const __CFString *)v3;
    }
    CFStringRef v11 = v5;
    id v6 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1, v1 + 16);
    id v7 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v2 userInfo:v6];
    (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v7);
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, void, void))(v1 + 16);
    uint64_t v9 = *(void *)(a1 + 32);
    v8(v9, 0, 0);
  }
}

uint64_t sub_1001A2B04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1001A2B1C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) _handleFindPersonResponse:v7 forRequest:*(void *)(a1 + 40) emailOrPhone:*(void *)(a1 + 48) withError:v5 queue:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  objc_sync_exit(v6);
}

void sub_1001A2BAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A2BC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(a1 + 40);
  if (v2)
  {
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    uint64_t v3 = +[NSString stringWithUTF8String:DebugGetErrorString()];
    long long v4 = (void *)v3;
    CFStringRef v5 = @"?";
    if (v3) {
      CFStringRef v5 = (const __CFString *)v3;
    }
    CFStringRef v11 = v5;
    id v6 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1, v1 + 16);
    id v7 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v2 userInfo:v6];
    (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v7);
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, void, void))(v1 + 16);
    uint64_t v9 = *(void *)(a1 + 32);
    v8(v9, 0, 0);
  }
}

void sub_1001A3508(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) _handleInfoResponse:v7 forAppleID:*(void *)(a1 + 40) infoRequest:*(void *)(a1 + 48) certificateSerialNumber:*(void *)(a1 + 56) withError:v5 completion:*(void *)(a1 + 64)];
  objc_sync_exit(v6);
}

void sub_1001A3598(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A35AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001A3A48(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) _handleReceivedCertificateToken:v7 privateKeyPersistentReference:v5 forAppleID:*(void *)(a1 + 40)];
  objc_sync_exit(v6);
}

void sub_1001A3AD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A3AE4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) _handleReceivedIdentity:v7 forAppleID:*(void *)(a1 + 40) identityRequest:*(void *)(a1 + 48) withError:v5 completion:*(void *)(a1 + 56)];
  objc_sync_exit(v6);
}

void sub_1001A3B70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A3B84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001A4740(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_1001A47AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A47C0(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_1001A482C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A4840(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_1001A48AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A48C0(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_1001A492C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A4940(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  if (a3)
  {
    if (dword_100968E10 <= 60 && (dword_100968E10 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v14 = a3;
      LogPrintF();
    }
    __int16 v12 = *(void **)(a1 + 32);
    uint64_t v13 = v12[3];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1001A4B78;
    v17[3] = &unk_1008CA5A8;
    void v17[4] = v12;
    [v12 _requestInfoForAppleID:v13 completion:v17];
  }
  else
  {
    if (dword_100968E10 <= 30 && (dword_100968E10 != -1 || _LogCategory_Initialize()))
    {
      id v7 = [*(id *)(a1 + 40) identity];
      uint64_t v14 = [v7 appleID];
      LogPrintF();
    }
    uint64_t v8 = [*(id *)(a1 + 40) identity:v14];

    if (v8)
    {
      uint64_t v9 = *(void **)(a1 + 32);
      NSErrorUserInfoKey v10 = [*(id *)(a1 + 40) identity];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_1001A4BF8;
      v15[3] = &unk_1008CF4A0;
      CFStringRef v11 = *(void **)(a1 + 40);
      v15[4] = *(void *)(a1 + 32);
      id v16 = v11;
      [v9 _checkIfAppleIDCertificateChainIsValidForIdentity:v10 completion:v15];
    }
  }
  objc_sync_exit(v6);
}

void sub_1001A4B60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A4B78(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_1001A4BE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A4BF8(uint64_t a1, char a2, uint64_t a3)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  if (a2)
  {
    if (dword_100968E10 <= 30)
    {
      if (dword_100968E10 != -1 || _LogCategory_Initialize())
      {
        id v6 = [*(id *)(a1 + 40) identity];
        CFStringRef v11 = [v6 appleID];
        LogPrintF();
      }
      if (dword_100968E10 <= 30 && (dword_100968E10 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
    NSErrorUserInfoKey v10 = *(void **)(a1 + 32);
    uint64_t v9 = +[NSDate date];
    [v10 _setMetaInfoValue:v9 forKey:@"LastAllGoodDate"];
  }
  else
  {
    if (dword_100968E10 <= 60 && (dword_100968E10 != -1 || _LogCategory_Initialize()))
    {
      id v7 = [*(id *)(a1 + 40) identity];
      CFStringRef v11 = [v7 appleID];
      uint64_t v12 = a3;
      LogPrintF();
    }
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = [*(id *)(a1 + 40) identity:v11, v12];
    [v8 _handleUntrustedAppleIDCertificateChainForIdentity:v9];
  }

  objc_sync_exit(obj);
}

void sub_1001A4DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_1001A4E90(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  [*(id *)(a1 + 32) _verifyState];
  objc_sync_exit(obj);
}

void sub_1001A4EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A5038(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A5138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A5248(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (dword_100968E10 <= 30 && (dword_100968E10 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  SFMetricsLogUnexpectedEvent();
  (*(void (**)(void, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v6);
}

void sub_1001A54F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A550C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001A551C(uint64_t a1)
{
}

void sub_1001A5524(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v9 = a3;
  if (v9 && dword_100968E10 <= 60 && (dword_100968E10 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001A5B20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A5C30(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5)
  {
    if (dword_100968E10 <= 90 && (dword_100968E10 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v6 = 0;
    id v8 = 0;
    goto LABEL_25;
  }
  if (v9)
  {
    uint64_t v6 = [v9 accountIdentifier];
    if (v6)
    {
      id v7 = [[SDAppleIDVerifiedIdentity alloc] initWithAccountIdentifier:v6 emailOrPhone:*(void *)(a1 + 32)];
      id v8 = 0;
      goto LABEL_5;
    }
    id v8 = +[NSError errorWithDomain:SFAppleIDErrorDomain code:201237 userInfo:0];
    if (dword_100968E10 <= 90)
    {
      if (dword_100968E10 == -1 && !_LogCategory_Initialize()) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
LABEL_18:
    id v7 = 0;
    goto LABEL_5;
  }
  id v8 = +[NSError errorWithDomain:SFAppleIDErrorDomain code:201236 userInfo:0];
  if (dword_100968E10 > 90)
  {
    uint64_t v6 = 0;
    goto LABEL_18;
  }
  if (dword_100968E10 == -1 && !_LogCategory_Initialize()) {
    goto LABEL_24;
  }
LABEL_16:
  LogPrintF();
LABEL_24:
  uint64_t v6 = 0;
LABEL_25:
  id v7 = 0;
LABEL_5:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
}

void sub_1001A5EBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A5F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A5FA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A6060(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A60C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A61DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A6248(id a1)
{
  uint64_t v1 = objc_alloc_init(SDAppleIDAgent);
  uint64_t v2 = (void *)gSDAppleIDAgent;
  gSDAppleIDAgent = v1;

  id v3 = dispatch_get_global_queue(2, 0);
  dispatch_async(v3, &stru_1008CF580);
}

void sub_1001A62B8(id a1)
{
}

void sub_1001A6320(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A6408(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001A6470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A64D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A6540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A65A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A6610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001A6728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_1001A6814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1001A6948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  objc_sync_exit(v11);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

Class sub_1001A6A40()
{
  if (qword_100980230 != -1) {
    dispatch_once(&qword_100980230, &stru_1008CF5A0);
  }
  Class result = objc_getClass("UMUserManager");
  qword_100980228 = (uint64_t)result;
  off_100968E80 = (uint64_t (*)())sub_1001A6AA4;
  return result;
}

id sub_1001A6AA4()
{
  return (id)qword_100980228;
}

void sub_1001A6AB0(id a1)
{
  qword_100980238 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
}

id sub_1001A6ADC()
{
  if (qword_100980240 != -1) {
    dispatch_once(&qword_100980240, &stru_1008CF5C0);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_100980248, "APSEnvironmentProduction");
  if (v0) {
    objc_storeStrong((id *)&qword_100980220, *v0);
  }
  off_100968E88 = (uint64_t (*)())sub_1001A6B6C;
  uint64_t v1 = (void *)qword_100980220;

  return v1;
}

id sub_1001A6B6C()
{
  return (id)qword_100980220;
}

void sub_1001A6B78(id a1)
{
  qword_100980248 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService", 2);
}

id sub_1001A6BA4()
{
  if (qword_100980240 != -1) {
    dispatch_once(&qword_100980240, &stru_1008CF5C0);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_100980248, "APSEnvironmentDevelopment");
  if (v0) {
    objc_storeStrong((id *)&qword_100980218, *v0);
  }
  off_100968E90 = (uint64_t (*)())sub_1001A6C34;
  uint64_t v1 = (void *)qword_100980218;

  return v1;
}

id sub_1001A6C34()
{
  return (id)qword_100980218;
}

Class sub_1001A6C40()
{
  if (qword_100980240 != -1) {
    dispatch_once(&qword_100980240, &stru_1008CF5C0);
  }
  Class result = objc_getClass("APSConnection");
  qword_100980250 = (uint64_t)result;
  off_100968E98 = (uint64_t (*)())sub_1001A6CA4;
  return result;
}

id sub_1001A6CA4()
{
  return (id)qword_100980250;
}

void sub_1001A7298(id a1)
{
  uint64_t v1 = objc_alloc_init(SDAutoUnlockWiFiManager);
  uint64_t v2 = (void *)qword_100980258;
  qword_100980258 = (uint64_t)v1;
}

id sub_1001A73E4(uint64_t a1)
{
  [*(id *)(a1 + 32) _addObservers];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _createWiFiObserver];
}

void sub_1001A74A8(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Creating ranging manager", (uint8_t *)&v9, 2u);
  }

  id v3 = objc_alloc_init((Class)NISession);
  [*(id *)(a1 + 32) setNiSession:v3];

  id v4 = *(void **)(a1 + 32);
  id v5 = [v4 niSession];
  [v5 setDelegate:v4];

  uint64_t v6 = auto_unlock_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [*(id *)(a1 + 32) niSession];
    CFStringRef v8 = @"YES";
    if (!v7) {
      CFStringRef v8 = @"NO";
    }
    int v9 = 138412290;
    CFStringRef v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Created ranging manager %@", (uint8_t *)&v9, 0xCu);
  }
}

id sub_1001A7C90(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) awdlInfo];
  id v3 = *(void **)(a1 + 32);
  if (!v2)
  {
    if ([v3 invalidated]) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v4 = [v3 queueAvailableHandler];
  if (v4)
  {
    id v5 = (void *)v4;
LABEL_8:

    goto LABEL_9;
  }
  unsigned __int8 v6 = [*(id *)(a1 + 32) invalidated];

  if ((v6 & 1) == 0)
  {
LABEL_7:
    uint64_t v2 = +[NSAssertionHandler currentHandler];
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    id v5 = [*(id *)(a1 + 32) awdlInfo];
    int v9 = [*(id *)(a1 + 32) queueAvailableHandler];
    id v10 = objc_retainBlock(v9);
    [v2 handleFailureInMethod:v7, v8, @"SDAutoUnlockWiFiManager.m", 289, @"Invalid request params awdlInfo: %@ queueAvailableHandler: %@ invalidated: %d", v5, v10, [*(id *)(a1 + 32) invalidated];

    goto LABEL_8;
  }
LABEL_9:
  id result = [*(id *)(a1 + 32) activateCalled];
  if ((result & 1) == 0)
  {
    id result = [*(id *)(a1 + 32) invalidated];
    if ((result & 1) == 0)
    {
      [*(id *)(a1 + 32) setActivateCalled:1];
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v12 = *(void **)(a1 + 40);
      return _[v12 _addWiFiRequest:v13];
    }
  }
  return result;
}

id sub_1001A7EB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelWiFiRequest:*(void *)(a1 + 40)];
}

id sub_1001A7F90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setRangingPeer:*(void *)(a1 + 40)];
}

void sub_1001A829C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A82C8(id *a1, char a2)
{
  uint64_t v4 = [a1[4] queue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1001A8394;
  v7[3] = &unk_1008CF6D0;
  id v5 = a1[5];
  char v11 = a2;
  id v6 = a1[4];
  id v8 = v5;
  id v9 = v6;
  objc_copyWeak(&v10, a1 + 6);
  dispatch_async(v4, v7);

  objc_destroyWeak(&v10);
}

void sub_1001A8394(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 && ![v2 invalidated])
  {
    uint64_t v4 = *(void **)(a1 + 40);
    if (*(unsigned char *)(a1 + 56))
    {
      [v4 setAwdlStarting:1];
      id v5 = (id *)(a1 + 48);
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      [WeakRetained _startAWDLWithInfo:*(void *)(a1 + 32)];

      uint64_t v7 = +[SDStatusMonitor sharedMonitor];
      id v12 = [v7 awdlState];

      id v8 = [*(id *)(a1 + 40) currentRequest];
      LODWORD(v7) = [v8 isRangingInitiator];

      if (v7)
      {
        id v9 = [v12 objectForKeyedSubscript:@"LINK_CHANGED_IS_LINKDOWN"];
        unsigned __int8 v10 = [v9 BOOLValue];

        if ((v10 & 1) == 0)
        {
          id v11 = objc_loadWeakRetained(v5);
          [v11 _startRangingIfPeerFoundInStateInfo:v12 awdlUpSameTime:0];
        }
      }
    }
    else
    {
      [v4 _invalidateCurrentRequest];
    }
  }
  else
  {
    id v3 = auto_unlock_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001AB56C();
    }
  }
}

void sub_1001A9130(uint64_t a1)
{
  uint64_t v2 = [_NIRangingPeerDistance alloc];
  id v3 = [*(id *)(a1 + 32) currentRequest];
  uint64_t v4 = [v3 rangingPeer];
  id v5 = [v4 niRangingPeer];
  id v6 = [(_NIRangingPeerDistance *)v2 initWithPeer:v5 distanceMeters:&off_100902D60 initiator:1 shouldUnlock:*(unsigned __int8 *)(a1 + 40)];
  id v12 = v6;
  uint64_t v7 = +[NSArray arrayWithObjects:&v12 count:1];

  id v8 = [*(id *)(a1 + 32) currentRequest];
  id v9 = [v8 rangingCompletedHandler];

  if (v9)
  {
    unsigned __int8 v10 = [*(id *)(a1 + 32) currentRequest];
    id v11 = [v10 rangingCompletedHandler];
    ((void (**)(void, void *, void))v11)[2](v11, v7, 0);
  }
}

void sub_1001A9334(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) currentRequest];
  id v3 = [v2 rangingCompletedHandler];

  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) currentRequest];
    uint64_t v4 = [v5 rangingCompletedHandler];
    v4[2](v4, 0, *(void *)(a1 + 40));
  }
}

void sub_1001A9544(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) currentRequest];
  id v3 = [v2 rangingCompletedHandler];

  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) currentRequest];
    uint64_t v4 = [v5 rangingCompletedHandler];
    v4[2](v4, 0, *(void *)(a1 + 40));
  }
}

void sub_1001A986C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = [a5 wiFiManager];
  id v9 = [a5 request];
  unsigned __int8 v10 = auto_unlock_log();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [v9 identifier];
    id v12 = [v8 currentRequest];
    int v13 = 136316418;
    uint64_t v14 = "awdlNetworkStartCallback";
    __int16 v15 = 2112;
    uint64_t v16 = a3;
    __int16 v17 = 2112;
    CFStringRef v18 = v9;
    __int16 v19 = 2112;
    NSErrorUserInfoKey v20 = v11;
    __int16 v21 = 2112;
    long long v22 = v12;
    __int16 v23 = 1024;
    int v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s AWDL network started network: %@ request: %@ identifier: %@ currentRequest: %@ error: %d", (uint8_t *)&v13, 0x3Au);
  }
  [v8 handleNetworkStarted:a3 request:v9 error:a2];
}

void sub_1001A9BA4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6 = [a4 wiFiManager];
  uint64_t v7 = [a4 request];
  id v8 = auto_unlock_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = [v7 identifier];
    int v10 = 136315906;
    id v11 = "awdlStopNetworkCallback";
    __int16 v12 = 2112;
    int v13 = v7;
    __int16 v14 = 2112;
    __int16 v15 = v9;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s AWDL Stop network request: %@ identifier: %@ error: %d", (uint8_t *)&v10, 0x26u);
  }
  [v6 handleNetworkStoppedWithError:v7 error:a2];
}

void sub_1001AA000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001AA03C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleAWDLTimerFired];
}

id sub_1001AA880(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleVirtualInterfacesChanged:*(void *)(a1 + 40)];
}

void sub_1001AACD0(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 136315394;
    id v11 = "-[SDAutoUnlockWiFiManager rangingReportEventForWiFiInterfaceWithName:data:error:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Wi-Fi Ranging results %@", (uint8_t *)&v10, 0x16u);
  }

  uint64_t v4 = auto_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(const char **)(a1 + 40);
    int v10 = 138412290;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Wi-Fi Ranging error %@", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = [*(id *)(a1 + 48) currentRequest];
  [v7 setWifiRangingError:v6];

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = [*(id *)(a1 + 48) currentRequest];
  [v9 setWifiRangingResults:v8];
}

id sub_1001AAF08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleNetworkStarted:*(void *)(a1 + 40) request:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
}

id sub_1001AB230(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleNetworkStoppedWithError:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
}

void sub_1001AB56C()
{
  sub_10001587C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Cannot process invalidated request", v1, 2u);
}

void sub_1001AB5AC()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "Attempting to start ranging without peer", v2, v3, v4, v5, v6);
}

void sub_1001AB5E0()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "Attempting to start ranging without NI peer", v2, v3, v4, v5, v6);
}

void sub_1001AB614()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "Received ranging auth recommendation with peer is empty", v2, v3, v4, v5, v6);
}

void sub_1001AB648(void *a1)
{
  uint8_t v6 = [a1 identifier];
  sub_100107304();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x20u);
}

void sub_1001AB700(void *a1)
{
  uint8_t v6 = [a1 identifier];
  sub_100107304();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x26u);
}

void sub_1001AB7C8(void *a1)
{
  uint8_t v6 = [a1 currentRequest];
  sub_100107304();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x16u);
}

void sub_1001AB86C()
{
  sub_10001587C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Not ranging initiator, ignoring interfaces changed", v1, 2u);
}

void sub_1001AB8AC(uint64_t a1, NSObject *a2)
{
  int v2 = 136315394;
  os_log_type_t v3 = "-[SDAutoUnlockWiFiManager _handleNetworkStarted:request:error:]";
  __int16 v4 = 2048;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s AWDL bring up failed (error: %ld)", (uint8_t *)&v2, 0x16u);
}

uint64_t SDUnlockClassALongTermKeyRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadData();
      __int16 v19 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v18;
    }
    else
    {
      if (v12 == 2)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v15 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0) {
            goto LABEL_42;
          }
          v20 += 7;
          BOOL v9 = v21++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v25 = 16;
      }
      else
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v25 = 20;
      }
      *(_DWORD *)(a1 + v25) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1001AC300(unint64_t a1)
{
  if (a1 >= 8)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"Unknown (%ld)", a1];
  }
  else
  {
    uint64_t v1 = *(&off_1008CF7B8 + a1);
  }

  return v1;
}

void sub_1001AC364()
{
  id v0 = +[NSDictionary dictionaryWithObject:kCFBooleanTrue forKey:@"LockDeviceNow"];
  MKBLockDevice();
}

SDContactFetchResult *sub_1001AC42C(uint64_t a1, void *a2, void *a3)
{
  id v20 = 0;
  char v4 = [a2 enumeratorForChangeHistoryFetchRequest:a1 error:&v20];
  id v5 = v20;
  if (v5)
  {
    unint64_t v6 = airdrop_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to get change history with error %@", buf, 0xCu);
    }

    unint64_t v7 = 0;
    if (a3) {
      *a3 = v5;
    }
  }
  else
  {
    char v8 = objc_opt_new();
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    BOOL v9 = [v4 value];
    id v10 = [v9 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v17;
      do
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v12) {
            objc_enumerationMutation(v9);
          }
          [v8 addObject:*(void *)(*((void *)&v16 + 1) + 8 * i)];
        }
        id v11 = [v9 countByEnumeratingWithState:&v16 objects:v21 count:16];
      }
      while (v11);
    }

    unint64_t v7 = objc_alloc_init(SDContactFetchResult);
    [(SDContactFetchResult *)v7 setEvents:v8];
    unsigned int v14 = [v4 currentHistoryToken];
    [(SDContactFetchResult *)v7 setCurrentHistoryToken:v14];
  }

  return v7;
}

id sub_1001AC630(void *a1)
{
  id v1 = a1;
  int v2 = objc_opt_new();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = [*(id *)(*((void *)&v10 + 1) + 8 * i) identifier:v10];
        [v2 addObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id sub_1001AC768(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3 || (uint64_t v6 = v3, v4))
  {
    if (v3 || (uint64_t v6 = v4) == 0)
    {
      [v3 horizontalAngle];
      double v8 = v7;
      [v3 horizontalAngle];
      if (v8 >= 0.0) {
        double v10 = v9;
      }
      else {
        double v10 = -v9;
      }
      [v5 horizontalAngle];
      double v12 = v11;
      [v5 horizontalAngle];
      if (v12 < 0.0) {
        double v13 = -v13;
      }
      uint64_t v6 = v3;
      if (v10 >= v13)
      {
        [v3 horizontalAngle];
        double v15 = v14;
        [v3 horizontalAngle];
        if (v15 >= 0.0) {
          double v17 = v16;
        }
        else {
          double v17 = -v16;
        }
        [v5 horizontalAngle];
        double v19 = v18;
        [v5 horizontalAngle];
        if (v19 < 0.0) {
          double v20 = -v20;
        }
        uint64_t v6 = v5;
        if (v17 <= v20)
        {
          [v3 ptsScore];
          double v22 = v21;
          [v5 ptsScore];
          uint64_t v6 = v3;
          if (v22 <= v23)
          {
            [v3 ptsScore];
            double v25 = v24;
            [v5 ptsScore];
            if (v25 >= v26) {
              uint64_t v6 = v3;
            }
            else {
              uint64_t v6 = v5;
            }
          }
        }
      }
    }
  }
  id v27 = v6;

  return v27;
}

id sub_1001AC8B8()
{
  id v0 = (void *)SFNodeCopyRangingData();
  if ([v0 length])
  {
    id v1 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v0 error:0];
  }
  else
  {
    id v1 = 0;
  }

  return v1;
}

id sub_1001AC934(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 mutableCopy];
  [v4 addEntriesFromDictionary:v3];

  id v5 = +[NSDictionary dictionaryWithDictionary:v4];

  return v5;
}

id sub_1001AC9A4(void *a1, void *a2)
{
  id v8 = 0;
  id v7 = 0;
  [a1 getResourceValue:&v8 forKey:NSURLVolumeAvailableCapacityKey error:&v7];
  id v3 = v8;
  id v4 = v7;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v3;
    goto LABEL_8;
  }
  if (v4)
  {
    if (a2)
    {
LABEL_5:
      id v4 = v4;
      id v5 = 0;
      *a2 = v4;
      goto LABEL_8;
    }
  }
  else
  {
    id v4 = +[NSError errorWithDomain:@"SFErrorDomain" code:-1007 userInfo:0];
    if (a2) {
      goto LABEL_5;
    }
  }
  id v5 = 0;
LABEL_8:

  return v5;
}

void sub_1001ACA9C(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  dispatch_queue_t queue = a2;
  id v28 = a3;
  uint64_t v6 = dispatch_group_create();
  id v7 = +[NSMutableSet set];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v39 objects:v48 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v40;
    long long v29 = v44;
    long long v30 = v36;
    do
    {
      for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(v8);
        }
        double v13 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        double v14 = [v13 personHandle:v28, v29, v30];
        double v15 = [v14 value];

        if (v15)
        {
          double v16 = [v13 aliases];
          id v17 = [v16 count];

          if (v17)
          {
            dispatch_group_enter(v6);
            v35[0] = _NSConcreteStackBlock;
            v35[1] = 3221225472;
            v36[0] = sub_1001ACE14;
            v36[1] = &unk_1008CF720;
            id v37 = v7;
            __int16 v38 = v6;
            id v18 = v13;
            double v19 = queue;
            double v20 = v35;
            double v21 = [v18 personHandle];
            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472;
            v44[0] = sub_1001AD0F4;
            v44[1] = &unk_1008CF770;
            uint64_t v46 = v19;
            id v47 = v20;
            id v45 = v18;
            id v22 = v18;
            double v23 = v19;
            sub_1001ACEE8(v21, v23, v43);

            double v24 = v37;
          }
          else
          {
            double v24 = [v13 personHandle];
            double v25 = [v24 value];
            [v7 addObject:v25];
          }
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v39 objects:v48 count:16];
    }
    while (v10);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001ACE58;
  block[3] = &unk_1008CB7D8;
  id v33 = v7;
  id v34 = v28;
  id v26 = v7;
  id v27 = v28;
  dispatch_group_notify(v6, queue, block);
}

void sub_1001ACE14(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addObject:a2];
  }
  id v3 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v3);
}

void sub_1001ACE58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

NSString *sub_1001ACEB0(uint64_t a1)
{
  return +[NSString stringWithFormat:@"photos://asset?albumname=recently-saved&identifier=%@", a1];
}

void sub_1001ACEE8(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = [v5 value];
  if (!v8) {
    goto LABEL_11;
  }
  id v9 = (void *)v8;
  id v10 = [v5 type];

  if (!v10) {
    goto LABEL_11;
  }
  id v11 = [v5 type];
  if (v11 == (id)1)
  {
    double v12 = [v5 value];
    uint64_t v13 = _IDSCopyIDForEmailAddress();
  }
  else
  {
    if (v11 != (id)2)
    {
LABEL_11:
      v7[2](v7, 0);
      goto LABEL_12;
    }
    double v12 = [v5 value];
    uint64_t v13 = _IDSCopyIDForPhoneNumberWithOptions();
  }
  double v14 = (void *)v13;

  if (!v14) {
    goto LABEL_11;
  }
  double v15 = share_sheet_log();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    double v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Querying IDS for destination %@", buf, 0xCu);
  }

  double v16 = +[IDSIDQueryController sharedInstance];
  uint64_t v17 = IDSServiceNameiMessage;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001AD4B8;
  v18[3] = &unk_1008CF798;
  double v19 = v7;
  [v16 refreshIDStatusForDestination:v14 service:v17 listenerID:v17 queue:v6 completionBlock:v18];

LABEL_12:
}

void sub_1001AD0F4(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    id v15 = [*(id *)(a1 + 32) personHandle];
    id v4 = [v15 value];
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
  else
  {
    id v5 = dispatch_group_create();
    v26[0] = 0;
    v26[1] = v26;
    v26[2] = 0x3032000000;
    v26[3] = sub_1001AD418;
    v26[4] = sub_1001AD428;
    id v27 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v6 = [*(id *)(a1 + 32) aliases];
    id v7 = [v6 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v23;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v23 != v8) {
            objc_enumerationMutation(v6);
          }
          id v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          id v11 = [v10 value];
          BOOL v12 = v11 == 0;

          if (!v12)
          {
            dispatch_group_enter(v5);
            uint64_t v13 = *(void **)(a1 + 40);
            v19[0] = _NSConcreteStackBlock;
            v19[1] = 3221225472;
            v19[2] = sub_1001AD430;
            void v19[3] = &unk_1008CF748;
            double v21 = v26;
            void v19[4] = v10;
            double v20 = v5;
            sub_1001ACEE8(v10, v13, v19);
          }
        }
        id v7 = [v6 countByEnumeratingWithState:&v22 objects:v28 count:16];
      }
      while (v7);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001AD49C;
    block[3] = &unk_1008CCCB0;
    double v14 = *(NSObject **)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    id v18 = v26;
    dispatch_group_notify(v5, v14, block);

    _Block_object_dispose(v26, 8);
  }
}

void sub_1001AD3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t sub_1001AD418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001AD428(uint64_t a1)
{
}

void sub_1001AD430(uint64_t a1, int a2)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = a2 == 0;
  }
  if (!v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) value];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  id v7 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v7);
}

uint64_t sub_1001AD49C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

uint64_t sub_1001AD4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = share_sheet_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    uint64_t v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Async query returned status %ld", (uint8_t *)&v6, 0xCu);
  }

  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2 == 1);
}

uint64_t sub_1001AD98C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001AE6A0(_Unwind_Exception *a1)
{
}

uint64_t sub_1001AE744(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001AE754(uint64_t a1)
{
}

void sub_1001AE75C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v44 = 0;
  id v43 = 0;
  [v7 getResourceValue:&v44 forKey:NSURLIsAliasFileKey error:&v43];
  id v10 = v44;
  id v11 = v43;
  if (v11)
  {
    BOOL v12 = airdrop_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1001B13E4();
    }
LABEL_4:

    goto LABEL_5;
  }
  if ([v10 BOOLValue])
  {
    BOOL v12 = airdrop_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Attempting to send alias file, keeping original URL", buf, 2u);
    }
    goto LABEL_4;
  }
LABEL_5:
  if ([v10 BOOLValue])
  {
    id v13 = v7;
  }
  else
  {
    id v13 = +[SDAirDropLegacyHelper realPathURL:v7];
  }
  double v14 = v13;
  if (v13)
  {
    id v36 = v10;
    id v15 = objc_alloc_init(SDAirDropConvertMediaItemsResult);
    [(SDAirDropConvertMediaItemsResult *)v15 setUrl:v14];
    [(SDAirDropConvertMediaItemsResult *)v15 setConversionNeeded:v9];
    [(SDAirDropConvertMediaItemsResult *)v15 setConversionDestination:v8];
    pthread_mutex_lock(&stru_100968F00);
    [*(id *)(a1 + 32) addObject:v15];
    [*(id *)(a1 + 40) addObject:v14];
    if (v8) {
      [*(id *)(a1 + 48) addObject:v8];
    }
    pthread_mutex_unlock(&stru_100968F00);
    id v41 = 0;
    [v14 getResourceValue:&v41 forKey:NSURLIsDirectoryKey error:0];
    id v16 = v41;
    if ([v16 BOOLValue])
    {
      id v32 = v11;
      id v33 = v9;
      id v34 = v8;
      id v35 = v7;
      id v17 = +[NSFileManager defaultManager];
      v46[0] = NSURLIsDirectoryKey;
      v46[1] = NSURLIsReadableKey;
      id v18 = +[NSArray arrayWithObjects:v46 count:2];
      double v19 = [v17 enumeratorAtURL:v14 includingPropertiesForKeys:v18 options:7 errorHandler:0];

      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v20 = v19;
      id v21 = [v20 countByEnumeratingWithState:&v37 objects:v45 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v38;
        do
        {
          for (unint64_t i = 0; i != v22; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v38 != v23) {
              objc_enumerationMutation(v20);
            }
            uint64_t v25 = *(void *)(*((void *)&v37 + 1) + 8 * i);
            pthread_mutex_lock(&stru_100968F00);
            if (([*(id *)(a1 + 40) containsObject:v25] & 1) == 0) {
              [*(id *)(a1 + 40) addObject:v25];
            }
            pthread_mutex_unlock(&stru_100968F00);
          }
          id v22 = [v20 countByEnumeratingWithState:&v37 objects:v45 count:16];
        }
        while (v22);
      }

      id v8 = v34;
      id v7 = v35;
      id v11 = v32;
      id v9 = v33;
    }

    id v10 = v36;
  }
  else
  {
    id v26 = v11;
    id v27 = (const void *)sub_1001B2718((const __CFURL *)v7);
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = sub_100052DC0(-6, v27);
      CFRelease(v28);
    }
    else
    {
      uint64_t v29 = sub_100052DC0(-5, 0);
    }
    id v11 = v26;
    long long v30 = airdrop_log();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      sub_1001B1360();
    }

    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 10;
    uint64_t v31 = *(void *)(*(void *)(a1 + 72) + 8);
    id v15 = *(SDAirDropConvertMediaItemsResult **)(v31 + 40);
    *(void *)(v31 + 40) = v29;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1001AEB88(void *a1, void *a2)
{
  BOOL v3 = a1[4];
  id v4 = a2;
  dispatch_group_enter(v3);
  +[SDAirDropLegacyHelper convertMediaItemFromURL:v4 forMediaCapabilities:a1[5] conversionManager:a1[6] progressHandler:a1[7] completionHandler:a1[8]];
}

void sub_1001AEBF0(uint64_t a1, void *a2, id obj, void *a4, void *a5)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v10 = obj;
  id v11 = a5;
  id v12 = a4;
  id v13 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001AECB0(uint64_t a1)
{
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) == 10)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72));
  }
  else if (*(unsigned char *)(a1 + 104))
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72));
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 48);
    id v8 = 0;
    BOOL v3 = +[SDAirDropLegacyHelper convertWideGamutToClampedPhotoForURLs:v2 outTmpDirectory:&v8];
    id v4 = v8;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1001AEE54;
    v5[3] = &unk_1008CF8E0;
    id v6 = *(id *)(a1 + 48);
    id v7 = *(id *)(a1 + 56);
    [v3 enumerateKeysAndObjectsUsingBlock:v5];
    (*(void (**)(void, void, void, void, void))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), *(void *)(a1 + 56), *(void *)(a1 + 48), *(void *)(a1 + 64), *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40));
  }
}

void sub_1001AEE54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) addObject:v6];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v7 = *(id *)(a1 + 40);
  id v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v16;
    while (2)
    {
      for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v13 = [v12 url:v15];
        unsigned int v14 = [v13 isEqual:v5];

        if (v14)
        {
          [v12 setUrl:v6];
          goto LABEL_11;
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1001AF09C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1001AF19C;
  v15[3] = &unk_1008CACD0;
  id v16 = v7;
  uint64_t v10 = *(NSObject **)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  id v18 = v9;
  id v19 = v11;
  id v17 = v8;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v10, v15);
}

void sub_1001AF19C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    id v3 = [objc_alloc((Class)PFVideoComplement) initWithBundleAtURL:*v2];
    id v4 = v3;
    if (v3)
    {
      id v5 = [v3 imagePath];
      id v6 = +[NSURL fileURLWithPath:v5];
      id v15 = 0;
      [v6 getResourceValue:&v15 forKey:NSURLTypeIdentifierKey error:0];
      id v7 = v15;

      id v8 = +[NSNumber numberWithBool:[v7 isEqual:kUTTypeJPEG]];
    }
    else
    {
      id v7 = airdrop_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1001B144C((uint64_t)v2, v7, v9, v10, v11, v12, v13, v14);
      }
      id v8 = 0;
    }
  }
  else
  {
    id v8 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1001AF780(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    id v4 = airdrop_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001B14BC(v2, v4);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    id v5 = [*v2 backwardsCompatibilityStatus];
    id v6 = airdrop_log();
    id v7 = v6;
    if (v5 == (id)2)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        uint64_t v29 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Conversion required for %@", buf, 0xCu);
      }

      uint64_t v9 = *(void *)(a1 + 80);
      uint64_t v10 = [*(id *)(a1 + 32) progress];
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

      uint64_t v11 = *(void **)(a1 + 56);
      uint64_t v12 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1001AFAD0;
      v22[3] = &unk_1008CF958;
      id v23 = v12;
      id v24 = *(id *)(a1 + 48);
      id v27 = *(id *)(a1 + 72);
      id v25 = *(id *)(a1 + 64);
      id v26 = *(id *)(a1 + 40);
      [v11 enqueueConversionRequest:v23 completionHandler:v22];
    }
    else
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        uint64_t v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "No conversion needed for %@", buf, 0xCu);
      }

      uint64_t v14 = [*(id *)(a1 + 64) fileURL];
      id v15 = v14;
      if (!v14) {
        id v15 = *(void **)(a1 + 40);
      }
      id v16 = v15;

      if (*(unsigned char *)(a1 + 88))
      {
        id v17 = [*v2 livePhotoConversionRequest];
        id v18 = [v17 imageConversionRequest];
        id v19 = [v18 source];
        id v20 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v19 containsHEIFImage]);
      }
      else
      {
        if ([*(id *)(a1 + 64) containsVideoWithFormatEligibleForTranscoding]) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = (uint64_t)[*(id *)(a1 + 64) containsHEIFImage];
        }
        id v20 = +[NSNumber numberWithInt:v21];
      }
      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    }
  }
}

void sub_1001AFAD0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) status] == (id)4)
  {
    uint64_t v2 = airdrop_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      id v4 = [*(id *)(a1 + 32) destination];
      id v5 = [v4 fileURL];
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v3;
      __int16 v21 = 2112;
      id v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Converted %@ to %@", buf, 0x16u);
    }
    uint64_t v6 = *(void *)(a1 + 64);
    id v7 = [*(id *)(a1 + 32) destination];
    uint64_t v8 = [v7 fileURL];
    uint64_t v9 = [*(id *)(a1 + 32) destination];
    (*(void (**)(uint64_t, void *, void *, void))(v6 + 16))(v6, v8, v9, 0);

    return;
  }
  uint64_t v10 = [*(id *)(a1 + 32) error];
  uint64_t v11 = [v10 domain];
  if ([v11 isEqual:PHMediaFormatConversionErrorDomain])
  {
    uint64_t v12 = [*(id *)(a1 + 32) error];
    id v13 = [v12 code];

    if (v13 == (id)2)
    {
      uint64_t v14 = *(void *)(a1 + 64);
      id v18 = [*(id *)(a1 + 48) fileURL];
      (*(void (**)(uint64_t))(v14 + 16))(v14);

      return;
    }
  }
  else
  {
  }
  id v15 = airdrop_log();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    id v17 = [*(id *)(a1 + 32) error];
    *(_DWORD *)buf = 138412546;
    uint64_t v20 = v16;
    __int16 v21 = 2112;
    id v22 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "failed to convert %@ with error %@", buf, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

id sub_1001B1084()
{
  if (qword_100980270 != -1) {
    dispatch_once(&qword_100980270, &stru_1008CF9A0);
  }
  id v0 = (id *)dlsym((void *)qword_100980278, "SFSharablePasswordURLSchemeForAirDrop");
  if (v0) {
    objc_storeStrong((id *)&qword_100980268, *v0);
  }
  off_100968F40 = (uint64_t (*)())sub_1001B1114;
  uint64_t v1 = (void *)qword_100980268;

  return v1;
}

id sub_1001B1114()
{
  return (id)qword_100980268;
}

void sub_1001B1120(id a1)
{
  qword_100980278 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation", 2);
}

void sub_1001B114C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B11BC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFURLGetFileSystemRepresentation(%@) failed", v2, v3, v4, v5, v6);
}

void sub_1001B1224(uint64_t a1, NSObject *a2)
{
  int v4 = *__error();
  int v5 = 136315394;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDAirDropClient: realpath(%s) failed with error %d", (uint8_t *)&v5, 0x12u);
}

void sub_1001B12C4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFURLCreateFromFileSystemRepresentation(%s) returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001B132C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to fetch photos temp URL", v2, v3, v4, v5, v6);
}

void sub_1001B1360()
{
  sub_10002972C();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "realPathURL returned NULL for file URL %@. Failing transfer with error %@", v2, 0x16u);
}

void sub_1001B13E4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Could not determine if URL is alias: %@", v2, v3, v4, v5, v6);
}

void sub_1001B144C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B14BC(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 error];
  sub_10002972C();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Conversion preflight failed with error %@", v4, 0xCu);
}

void sub_1001B1554()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "failed to create temporary directory %@", v2, v3, v4, v5, v6);
}

void sub_1001B15BC(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropClient: internetLocationFile returned nil", buf, 2u);
}

void sub_1001B15FC(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Sending credentials to non-contacts is not permitted", buf, 2u);
}

void sub_1001B163C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: copyUserFolder returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001B1670()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFURLCopyHostName returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001B16A4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFURLCreateWithFileSystemPathRelativeToBase returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001B16D8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFWriteStreamCreateWithFile returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001B170C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropClient: CFWriteStreamOpen failed", v2, v3, v4, v5, v6);
}

void sub_1001B1740(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001B17B0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Cannot get receiver's public key, no AppleID", v2, v3, v4, v5, v6);
}

void sub_1001B17E4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Cannot get receiver's public key, no cached cert", v2, v3, v4, v5, v6);
}

void sub_1001B1818()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Cannot get receiver's public key from cached cert", v2, v3, v4, v5, v6);
}

void sub_1001B184C(const void *a1)
{
  CFErrorRef error = 0;
  if (sub_1001B1A10((const __CFURL *)a1))
  {
    CFAllocatorRef v2 = CFGetAllocator(a1);
    CFDateRef v3 = CFDateCreate(v2, -534528000.0);
    if (!CFURLSetResourcePropertyForKey((CFURLRef)a1, kCFURLCreationDateKey, v3, &error))
    {
      uint64_t v4 = airdrop_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_1001B4B34();
      }

      CFRelease(error);
    }
    CFErrorRef v5 = v3;
LABEL_17:
    CFRelease(v5);
    return;
  }
  CFDataRef theData = 0;
  CFStringRef v6 = (const __CFString *)_kCFURLFinderInfoKey;
  if (!CFURLCopyResourcePropertyForKey((CFURLRef)a1, _kCFURLFinderInfoKey, &theData, &error))
  {
    uint64_t v10 = airdrop_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001B4B9C();
    }

    CFErrorRef v5 = error;
    goto LABEL_17;
  }
  if (theData)
  {
    CFAllocatorRef v7 = CFGetAllocator(a1);
    MutableCopy = CFDataCreateMutableCopy(v7, 0, theData);
    *(void *)CFDataGetMutableBytePtr(MutableCopy) = 0x4D41435362726F6BLL;
    if (!CFURLSetResourcePropertyForKey((CFURLRef)a1, v6, MutableCopy, &error))
    {
      uint64_t v9 = airdrop_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1001B4C38();
      }

      CFRelease(error);
    }
    CFRelease(MutableCopy);
    CFErrorRef v5 = theData;
    goto LABEL_17;
  }
  uint64_t v11 = airdrop_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_1001B4C04();
  }
}

BOOL sub_1001B1A10(const __CFURL *a1)
{
  CFBooleanRef propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsDirectoryKey, &propertyValueTypeRefPtr, 0)) {
    BOOL v1 = propertyValueTypeRefPtr == 0;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1 && CFBooleanGetValue(propertyValueTypeRefPtr) != 0;
}

id sub_1001B1A70(signed int a1)
{
  if (a1 < 1)
  {
    BOOL v1 = 0;
  }
  else
  {
    *(void *)CFDateRef v3 = 0;
    uint64_t v4 = 0;
    if_indextoname(a1, v3);
    BOOL v1 = +[NSString stringWithUTF8String:v3];
  }

  return v1;
}

dispatch_time_t sub_1001B1AF8(double a1)
{
  return dispatch_time(0, (uint64_t)(a1 * 1000000000.0));
}

NSObject *sub_1001B1B10(int a1, NSObject *a2, void *a3)
{
  id v5 = a3;
  CFStringRef v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
  if (a1) {
    int64_t v7 = 0;
  }
  else {
    int64_t v7 = 2147483647000000000;
  }
  dispatch_time_t v8 = dispatch_time(0, v7);
  dispatch_source_set_timer(v6, v8, 0x1DCD64FFC4653600uLL, 0);
  dispatch_source_set_event_handler(v6, v5);

  return v6;
}

void sub_1001B1BC4(NSObject *a1, dispatch_time_t a2)
{
  if (a1) {
    dispatch_source_set_timer(a1, a2, 0x1DCD64FFC4653600uLL, 0);
  }
}

dispatch_queue_global_t sub_1001B1BE4()
{
  return dispatch_get_global_queue(0, 0);
}

uint64_t sub_1001B1BF0()
{
  pthread_mutex_lock(&stru_100968F48);
  --dword_1009942D0;

  return pthread_mutex_unlock(&stru_100968F48);
}

void sub_1001B1C40(__CFDictionary *a1, const void *a2, const void *a3)
{
  sub_1000D83D4(a1, a2, a3);
  if (a3)
  {
    CFRelease(a3);
  }
}

CFNumberRef sub_1001B1C88(const __CFAllocator *a1, CFStringRef theString)
{
  if (!theString) {
    return 0;
  }
  *(_OWORD *)buffer = 0u;
  long long v6 = 0u;
  if (!CFStringGetCString(theString, buffer, 32, 0x8000100u)) {
    return 0;
  }
  uint64_t valuePtr = strtoll(buffer, 0, 0);
  return CFNumberCreate(a1, kCFNumberSInt64Type, &valuePtr);
}

__CFArray *sub_1001B1D34(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFArrayCreateMutable(v2, 0, &kCFTypeArrayCallBacks);
  for (CFURLRef i = CFURLCopyAbsoluteURL((CFURLRef)a1); ; CFURLRef i = CFURLCreateCopyDeletingLastPathComponent(v2, i))
  {
    CFArrayAppendValue(Mutable, i);
    CFRelease(i);
    CFStringRef v5 = CFURLCopyFileSystemPath(i, kCFURLPOSIXPathStyle);
    if (v5)
    {
      CFStringRef v6 = v5;
      int v7 = CFEqual(v5, @"/");
      CFRelease(v6);
      if (v7) {
        break;
      }
    }
  }
  uint64_t Count = CFArrayGetCount(Mutable);
  uint64_t v9 = CFArrayCreateMutable(v2, Count, &kCFTypeArrayCallBacks);
  if (Count >= 1)
  {
    unint64_t v10 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v10 - 2);
      CFArrayAppendValue(v9, ValueAtIndex);
      --v10;
    }
    while (v10 > 1);
  }
  CFRelease(Mutable);
  return v9;
}

CFTypeRef sub_1001B1E48(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v3 = Count;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, 0);
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(v4, ValueAtIndex);
  CFTypeRef v7 = PathComponent;
  if (v3 != 1 && PathComponent)
  {
    for (CFIndex i = 1; i != v3; ++i)
    {
      uint64_t v9 = sub_1001B1D34(v7);
      unint64_t v10 = CFArrayGetValueAtIndex(a1, i);
      uint64_t v11 = sub_1001B1D34(v10);
      CFIndex v12 = CFArrayGetCount(v9);
      CFIndex v13 = CFArrayGetCount(v11);
      if (v12 >= v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = v12;
      }
      if (v14 >= 1)
      {
        CFIndex v15 = 0;
        while (1)
        {
          uint64_t v16 = CFArrayGetValueAtIndex(v9, v15);
          id v17 = CFArrayGetValueAtIndex(v11, v15);
          if (!CFEqual(v16, v17)) {
            break;
          }
          if (v14 == ++v15)
          {
            CFIndex v15 = v14;
            break;
          }
        }
        if (v15)
        {
          CFRelease(v7);
          id v18 = CFArrayGetValueAtIndex(v11, v15 - 1);
          CFTypeRef v7 = CFRetain(v18);
        }
      }
      CFRelease(v9);
      CFRelease(v11);
    }
  }
  return v7;
}

void *sub_1001B1F9C(const void *a1, const __CFURL *a2)
{
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v4, 0);
  CFStringRef v6 = CFArrayCreateMutable(v4, 0, &kCFTypeArrayCallBacks);
  CFStringRef v7 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
  CFStringRef v8 = CFURLCopyFileSystemPath((CFURLRef)a1, kCFURLPOSIXPathStyle);
  CFStringRef v9 = v8;
  if (v7 && v8)
  {
    CFStringRef v10 = (const __CFString *)CFRetain(v8);
    if (CFEqual(v10, v7))
    {
      CFStringRef v11 = v10;
LABEL_5:
      CFStringRef v12 = v11;
      goto LABEL_9;
    }
    while (1)
    {
      CFURLRef v22 = sub_1001B219C(v10);
      if (v22)
      {
        CFURLRef v23 = v22;
        CFArrayAppendValue(v6, v22);
        CFRelease(v23);
      }
      CFStringRef v24 = sub_1001B21EC(v10);
      if (!v24) {
        break;
      }
      CFStringRef v11 = v24;
      if (CFEqual(v24, @"/"))
      {
        CFRelease(v11);
        break;
      }
      CFRelease(v10);
      CFStringRef v10 = v11;
      if (CFEqual(v11, v7)) {
        goto LABEL_5;
      }
    }
LABEL_8:
    CFStringRef v12 = v10;
LABEL_9:
    CFRelease(v12);
    goto LABEL_10;
  }
  CFStringRef PathComponent = CFURLCopyLastPathComponent((CFURLRef)a1);
  if (PathComponent)
  {
    CFStringRef v10 = PathComponent;
    CFArrayAppendValue(v6, PathComponent);
    goto LABEL_8;
  }
LABEL_10:
  CFArrayAppendValue(v6, @".");
  CFIndex Count = CFArrayGetCount(v6);
  CFIndex v15 = Count - 1;
  if (Count >= 1)
  {
    CFIndex v16 = Count;
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, v15);
    CFStringAppend(Mutable, ValueAtIndex);
    if (v15)
    {
      CFIndex v18 = v16 - 2;
      do
      {
        CFStringAppend(Mutable, @"/");
        CFStringRef v19 = (const __CFString *)CFArrayGetValueAtIndex(v6, v18);
        CFStringAppend(Mutable, v19);
        --v18;
      }
      while (v18 != -1);
    }
  }
  uint64_t v20 = sub_1001B2278(Mutable);
  CFRelease(v6);
  CFRelease(Mutable);
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v20;
}

CFURLRef sub_1001B219C(const __CFString *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFURLRef result = CFURLCreateWithFileSystemPath(v2, a1, kCFURLPOSIXPathStyle, 0);
  if (result)
  {
    CFURLRef v4 = result;
    CFStringRef PathComponent = CFURLCopyLastPathComponent(result);
    CFRelease(v4);
    return (const __CFURL *)PathComponent;
  }
  return result;
}

CFStringRef sub_1001B21EC(const __CFString *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFURLRef v3 = CFURLCreateWithFileSystemPath(v2, a1, kCFURLPOSIXPathStyle, 0);
  if (!v3) {
    return 0;
  }
  CFURLRef v4 = v3;
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(v2, v3);
  if (PathComponent)
  {
    CFURLRef v6 = PathComponent;
    CFStringRef v7 = CFURLCopyFileSystemPath(PathComponent, kCFURLPOSIXPathStyle);
    CFRelease(v6);
  }
  else
  {
    CFStringRef v7 = 0;
  }
  CFRelease(v4);
  return v7;
}

void *sub_1001B2278(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFURLRef v4 = malloc_type_malloc(v3, 0x64F17C99uLL);
  if (!CFStringGetCString(a1, (char *)v4, v3, 0x8000100u))
  {
    free(v4);
    return 0;
  }
  return v4;
}

id sub_1001B22F4(void *a1)
{
  id v1 = a1;
  CFAllocatorRef v2 = [v1 aa_primaryAppleAccount];

  return v2;
}

id sub_1001B23AC(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = [v1 bytes];
    CC_LONG v3 = [v1 length];

    CC_SHA256(v2, v3, (unsigned __int8 *)&v5);
    a1 = +[NSData dataWithBytes:&v5 length:32];
  }

  return a1;
}

id sub_1001B2470(void *a1)
{
  if (a1)
  {
    id v1 = [a1 dataUsingEncoding:4];
    id v2 = v1;
    if (v1)
    {
      CC_LONG v3 = sub_1001B23AC(v1);
    }
    else
    {
      CC_LONG v3 = 0;
    }
  }
  else
  {
    CC_LONG v3 = 0;
  }

  return v3;
}

id sub_1001B24DC(void *a1)
{
  if (a1)
  {
    id v1 = sub_1001B23AC(a1);
    id v2 = v1;
    if (v1)
    {
      CC_LONG v3 = [v1 base64EncodedStringWithOptions:0];
    }
    else
    {
      CC_LONG v3 = 0;
    }
  }
  else
  {
    CC_LONG v3 = 0;
  }

  return v3;
}

uint64_t sub_1001B2548(const __CFString *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v2, a1, 0x8000100u, 0);
  if (!ExternalRepresentation) {
    return 0;
  }
  CFDataRef v4 = ExternalRepresentation;
  uint64_t v5 = sub_1001B24DC(ExternalRepresentation);
  CFRelease(v4);
  return v5;
}

void *sub_1001B25A8(const __CFURL *a1)
{
  if (!a1) {
    return 0;
  }
  CFURLRef v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1) {
    return 0;
  }
  CFURLRef v2 = v1;
  CFStringRef v3 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  if (v3)
  {
    CFStringRef v4 = v3;
    uint64_t v5 = sub_1001B2278(v3);
    CFRelease(v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  CFRelease(v2);
  return v5;
}

uint64_t sub_1001B2618(const __CFURL *a1)
{
  CFBooleanRef propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsReadableKey, &propertyValueTypeRefPtr, 0)) {
    BOOL v2 = propertyValueTypeRefPtr == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  uint64_t result = CFBooleanGetValue(propertyValueTypeRefPtr);
  if (result)
  {
    [(__CFURL *)a1 fileSystemRepresentation];
    return sandbox_check_by_audit_token() == 0;
  }
  return result;
}

BOOL sub_1001B26B8(const __CFURL *a1)
{
  CFBooleanRef propertyValueTypeRefPtr = 0;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsWritableKey, &propertyValueTypeRefPtr, 0)) {
    BOOL v1 = propertyValueTypeRefPtr == 0;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1 && CFBooleanGetValue(propertyValueTypeRefPtr) != 0;
}

uint64_t sub_1001B2718(const __CFURL *a1)
{
  uint64_t v3 = 0;
  CFErrorRef error = 0;
  if (!CFURLCopyResourcePropertyForKey(a1, kCFURLLocalizedNameKey, &v3, &error))
  {
    BOOL v1 = daemon_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1001B4D08();
    }

    CFRelease(error);
  }
  return v3;
}

id sub_1001B2794()
{
  uint64_t v0 = (void *)SFNodeCopyProtocols();
  BOOL v1 = [v0 firstObject];

  return v1;
}

id sub_1001B27DC(void *a1, void *a2)
{
  id v3 = a1;
  CFStringRef v4 = +[NSFileManager defaultManager];
  uint64_t v5 = [v4 URLForDirectory:99 inDomain:1 appropriateForURL:v3 create:1 error:a2];

  CFURLRef v6 = daemon_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_1001B4EA8();
  }

  if (v5)
  {
    CFStringRef v7 = +[NSUUID UUID];
    CFStringRef v8 = [v7 UUIDString];

    id v9 = v8;
    id v10 = [v9 UTF8String];
    if (!v10
      || (+[NSURL fileURLWithFileSystemRepresentation:v10 isDirectory:1 relativeToURL:v5], (uint64_t v11 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      if (a2)
      {
        +[NSError errorWithDomain:NSPOSIXErrorDomain code:12 userInfo:0];
        CFIndex v18 = 0;
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        CFIndex v18 = 0;
      }
      goto LABEL_27;
    }
    CFStringRef v12 = (void *)v11;
    NSFileAttributeKey v22 = NSFileProtectionKey;
    NSFileProtectionType v23 = NSFileProtectionCompleteUntilFirstUserAuthentication;
    CFIndex v13 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    uint64_t v14 = [v12 absoluteURL];
    CFIndex v15 = +[NSFileManager defaultManager];
    unsigned int v16 = [v15 createDirectoryAtURL:v14 withIntermediateDirectories:0 attributes:v13 error:a2];

    if (v16)
    {
      id v17 = v14;
      CFIndex v18 = v17;
      if (!a2 || v17) {
        goto LABEL_26;
      }
      CFStringRef v19 = daemon_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_1001B4DD8();
      }
    }
    else
    {
      if (!a2 || *a2)
      {
        CFIndex v18 = 0;
LABEL_26:

LABEL_27:
        goto LABEL_28;
      }
      CFStringRef v19 = daemon_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_1001B4E40();
      }
    }

    +[NSError errorWithDomain:NSPOSIXErrorDomain code:12 userInfo:0];
    CFIndex v18 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_26;
  }
  if (a2 && !*a2)
  {
    uint64_t v20 = daemon_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_1001B4D70();
    }

    +[NSError errorWithDomain:NSPOSIXErrorDomain code:12 userInfo:0];
    CFIndex v18 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    CFIndex v18 = 0;
  }
LABEL_28:

  return v18;
}

id sub_1001B2B24()
{
  uint64_t v0 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  BOOL v1 = [v0 firstObject];

  if (v1)
  {
    BOOL v2 = [v1 stringByAppendingPathComponent:@"Sharing"];
    id v3 = +[NSFileManager defaultManager];
    id v8 = 0;
    unsigned __int8 v4 = [v3 createDirectoryAtPath:v2 withIntermediateDirectories:1 attributes:0 error:&v8];
    id v5 = v8;

    if (v4) {
      goto LABEL_9;
    }
    CFURLRef v6 = daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001B4F50();
    }
  }
  else
  {
    CFURLRef v6 = daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001B4F1C();
    }
    id v5 = 0;
    BOOL v2 = 0;
  }

LABEL_9:

  return v2;
}

void sub_1001B2C50(void *a1)
{
  CFURLRef v1 = a1;
  sub_1001B2CB8(v1, 0);
  CFURLRef v2 = [(__CFURL *)v1 URLByDeletingLastPathComponent];

  sub_1001B2CB8(v2, 0);
}

BOOL sub_1001B2CB8(const __CFURL *a1, void *a2)
{
  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    if (!removefile((const char *)buffer, 0, 1u))
    {
      int v4 = 0;
      return v4 == 0;
    }
    int v4 = *__error();
    if (!a2) {
      return v4 == 0;
    }
  }
  else
  {
    int v4 = 2;
    if (!a2) {
      return v4 == 0;
    }
  }
  if (v4)
  {
    *a2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v4 userInfo:0];
    int v4 = 1;
  }
  return v4 == 0;
}

CFURLRef sub_1001B2DAC(const __CFAllocator *a1, int a2)
{
  bzero(__s, 0x400uLL);
  if (confstr(a2, __s, 0x400uLL))
  {
    size_t v4 = strlen(__s);
    return CFURLCreateFromFileSystemRepresentation(a1, (const UInt8 *)__s, v4, 1u);
  }
  else
  {
    CFURLRef v6 = daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001B4F84(a2, v6);
    }

    return 0;
  }
}

id sub_1001B2E7C()
{
  uint64_t v0 = SFAirDropDownloadsURL();
  CFURLRef v1 = v0;
  if (v0) {
    id v2 = v0;
  }

  return v1;
}

BOOL sub_1001B2EC4(const __CFURL *a1, void *a2)
{
  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    if (CFURLHasDirectoryPath(a1))
    {
      if (mkdir((const char *)buffer, 0x180u) < 0)
      {
LABEL_10:
        int v4 = *__error();
        if (!a2) {
          return v4 == 0;
        }
        goto LABEL_11;
      }
    }
    else
    {
      int v5 = open((const char *)buffer, 2564, 384);
      if (v5 < 0) {
        goto LABEL_10;
      }
      close(v5);
    }
    sub_1001B184C(a1);
    int v4 = 0;
    return v4 == 0;
  }
  int v4 = 2;
  if (!a2) {
    return v4 == 0;
  }
LABEL_11:
  if (v4)
  {
    *a2 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v4 userInfo:0];
    int v4 = 1;
  }
  return v4 == 0;
}

BOOL sub_1001B2FE8(const __CFURL *a1, const __CFURL *a2, void *a3)
{
  bzero(buffer, 0x400uLL);
  bzero(v10, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024)
    && CFURLGetFileSystemRepresentation(a2, 1u, (UInt8 *)v10, 1024))
  {
    rename(buffer, v10, v6);
    if (!v7)
    {
      int v8 = 0;
      return v8 == 0;
    }
    int v8 = *__error();
    if (!a3) {
      return v8 == 0;
    }
  }
  else
  {
    int v8 = 2;
    if (!a3) {
      return v8 == 0;
    }
  }
  if (v8)
  {
    *a3 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:v8 userInfo:0];
    int v8 = 1;
  }
  return v8 == 0;
}

id sub_1001B3100(void *a1)
{
  id v1 = a1;
  id v2 = objc_opt_new();
  id v3 = [v1 copy];
  int v4 = [v3 pathExtension];
  if (([(__CFString *)v4 isEqualToString:&stru_1008E7020] & 1) == 0)
  {
    while (1)
    {
      CFStringRef PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v4, 0);
      CFDictionaryRef v6 = UTTypeCopyDeclaration(PreferredIdentifierForTag);
      if (!v6) {
        break;
      }
      CFDictionaryRef v7 = v6;
      [v2 addObject:v4];
      int v8 = [v3 stringByDeletingPathExtension];

      CFRelease(v7);
      CFRelease(PreferredIdentifierForTag);

      int v4 = [v8 pathExtension];
      id v3 = v8;
      if ([(__CFString *)v4 isEqualToString:&stru_1008E7020]) {
        goto LABEL_7;
      }
    }
    CFRelease(PreferredIdentifierForTag);
  }
  int v8 = v3;
LABEL_7:

  id v9 = [v8 mutableCopy];
  id v10 = +[NSCharacterSet whitespaceCharacterSet];
  uint64_t v11 = [v9 rangeOfCharacterFromSet:v10 options:4];
  uint64_t v13 = v12;

  if (v13)
  {
    uint64_t v14 = [v9 length];
    int64_t v15 = v14 - v11;
    unsigned int v16 = [v9 substringWithRange:v11, v14 - v11];
    id v17 = v16;
    if (v16
      && (int v18 = [v16 intValue], objc_msgSend(v17, "floatValue"), v18)
      && (v19 == (float)v18 ? (v20 = v18 == -2147483647) : (v20 = 1), !v20 ? (BOOL v21 = v18 == 0x7FFFFFFF) : (BOOL v21 = 1), !v21))
    {
      [v9 deleteCharactersInRange:v11, v15];
      uint64_t v29 = +[NSString stringWithFormat:@" %ld", v18 + 1];
      [v9 appendString:v29];
    }
    else
    {
      [v9 appendString:@" 2"];
    }
  }
  else
  {
    [v9 appendString:@" 2"];
  }
  if ([v2 count])
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    NSFileAttributeKey v22 = [v2 reverseObjectEnumerator];
    id v23 = [v22 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v31;
      do
      {
        for (CFIndex i = 0; i != v24; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v31 != v25) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = *(void *)(*((void *)&v30 + 1) + 8 * i);
          [v9 appendString:@"."];
          [v9 appendString:v27];
        }
        id v24 = [v22 countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v24);
    }
  }

  return v9;
}

id sub_1001B3434(void *a1, void *a2, unsigned char *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = daemon_log();
  id v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v53 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Saving files to %@", buf, 0xCu);
    }

    id v43 = +[NSMutableArray array];
    uint64_t v11 = +[NSFileManager defaultManager];
    uint64_t v12 = [v8 path];
    unsigned __int8 v13 = [v11 fileExistsAtPath:v12];

    if ((v13 & 1) == 0)
    {
      id v51 = 0;
      unsigned __int8 v14 = [v11 createDirectoryAtURL:v8 withIntermediateDirectories:1 attributes:0 error:&v51];
      id v15 = v51;
      id v16 = v15;
      if ((v14 & 1) == 0)
      {
        id v36 = daemon_log();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          sub_1001B5078();
        }

        if (a4)
        {
          id v16 = v16;
          char v34 = 0;
          *a4 = v16;
        }
        else
        {
          char v34 = 0;
        }
LABEL_46:

        if (a3) {
          *a3 = v34 & 1;
        }
        id v35 = [v43 copy];

        goto LABEL_49;
      }
    }
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v16 = v7;
    id v45 = [v16 countByEnumeratingWithState:&v47 objects:v56 count:16];
    if (v45)
    {
      long long v40 = a4;
      long long v38 = a3;
      id v39 = v7;
      uint64_t v44 = *(void *)v48;
      char v41 = 1;
      id obj = v16;
      do
      {
        for (CFIndex i = 0; i != v45; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v48 != v44) {
            objc_enumerationMutation(obj);
          }
          int v18 = *(void **)(*((void *)&v47 + 1) + 8 * i);
          float v19 = [v18 lastPathComponent:v38, v39];
          BOOL v20 = [v8 URLByAppendingPathComponent:v19];

          id v46 = 0;
          unsigned __int8 v21 = [v11 moveItemAtURL:v18 toURL:v20 error:&v46];
          id v22 = v46;
          if (v21)
          {
LABEL_13:
            id v23 = daemon_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              long long v32 = [v18 lastPathComponent];
              long long v33 = [v20 lastPathComponent];
              *(_DWORD *)buf = 138412546;
              id v53 = v32;
              __int16 v54 = 2112;
              uint64_t v55 = v33;
              _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "SDMoveFilesToFolder moved '%@' to folder as '%@'", buf, 0x16u);
            }
            [v43 addObject:v20];
          }
          else
          {
            while (1)
            {
              id v24 = [v22 domain];
              if (![v24 isEqual:NSCocoaErrorDomain]) {
                break;
              }
              id v25 = [v22 code];

              if (v25 != (id)516) {
                goto LABEL_22;
              }
              id v26 = [v20 lastPathComponent];
              uint64_t v27 = sub_1001B3100(v26);
              if ([v26 isEqual:v27])
              {
                long long v31 = daemon_log();
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  id v53 = v22;
                  _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to move item to folder. Could not resolve name conflict. Error: %@", buf, 0xCu);
                }

                if (v40) {
                  *long long v40 = v22;
                }

                goto LABEL_31;
              }
              uint64_t v28 = [v8 URLByAppendingPathComponent:v27];

              id v46 = 0;
              unsigned __int8 v29 = [v11 moveItemAtURL:v18 toURL:v28 error:&v46];
              id v22 = v46;
              BOOL v20 = (void *)v28;
              if (v29) {
                goto LABEL_13;
              }
            }

LABEL_22:
            long long v30 = daemon_log();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              id v53 = v22;
              _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to move item to folder. Error: %@", buf, 0xCu);
            }

            if (v40)
            {
              id v22 = v22;
              char v41 = 0;
              *long long v40 = v22;
              goto LABEL_32;
            }
LABEL_31:
            char v41 = 0;
          }
LABEL_32:
        }
        id v16 = obj;
        id v45 = [obj countByEnumeratingWithState:&v47 objects:v56 count:16];
      }
      while (v45);
      a3 = v38;
      id v7 = v39;
      char v34 = v41;
    }
    else
    {
      char v34 = 1;
    }
    goto LABEL_46;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1001B5044();
  }

  if (a3) {
    *a3 = 0;
  }
  id v35 = &__NSArray0__struct;
LABEL_49:

  return v35;
}

BOOL sub_1001B39C8(const __CFURL *a1, const __CFURL *a2, id *a3)
{
  BOOL v4 = sub_1001B2FE8(a1, a2, a3);
  BOOL v5 = v4;
  if (a3)
  {
    if (!v4)
    {
      CFDictionaryRef v6 = [*a3 domain];
      unsigned int v7 = [v6 isEqual:NSPOSIXErrorDomain];

      if (v7) {
        [*a3 code];
      }
    }
  }
  return v5;
}

__CFString *sub_1001B3A38(uint64_t a1)
{
  CFURLRef v1 = (const __CFURL *)(id)__chkstk_darwin(a1);
  CFURLRef v2 = v1;
  if (v1 && (id v3 = (char *)sub_1001B25A8(v1)) != 0)
  {
    BOOL v4 = v3;
    bzero(v10, 0x1010uLL);
    int v5 = fsctl(v4, 0xD0107A0CuLL, v10, 0);
    if (v5)
    {
      int v6 = v5;
      unsigned int v7 = browser_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1001B50FC(v6, v7);
      }

      id v8 = 0;
    }
    else
    {
      id v8 = (__CFString *)CFStringCreateWithPascalString(0, v11, 0x8000100u);
    }
    free(v4);
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id sub_1001B3B74(void *a1)
{
  id v7 = 0;
  id v6 = 0;
  unsigned __int8 v1 = [a1 getResourceValue:&v7 forKey:NSURLVolumeNameKey error:&v6];
  id v2 = v7;
  id v3 = v6;
  if ((v1 & 1) == 0)
  {
    BOOL v4 = browser_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001B519C();
    }
  }

  return v2;
}

BOOL sub_1001B3C24()
{
  CFBooleanRef v0 = (const __CFBoolean *)qword_100980280;
  if (!qword_100980280)
  {
    int v1 = sub_1000D9060(@"DisableAWDL", 0);
    id v2 = &kCFBooleanTrue;
    if (!v1) {
      id v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v0 = *v2;
    qword_100980280 = (uint64_t)*v2;
  }
  return CFBooleanGetValue(v0) != 0;
}

id sub_1001B3C88(void *a1, int a2)
{
  id v3 = [a1 lowercaseString];
  BOOL v4 = v3;
  if (a2
    && (([v3 hasSuffix:@"@me.com"] & 1) != 0
     || [v4 hasSuffix:@"@mac.com"]))
  {
    int v5 = [v4 componentsSeparatedByString:@"@"];
    if ([v5 count])
    {
      id v6 = [v5 objectAtIndexedSubscript:0];
      id v7 = +[NSString stringWithFormat:@"%@@icloud.com", v6];
    }
    else
    {
      id v7 = 0;
    }
  }
  else
  {
    id v7 = v4;
  }

  return v7;
}

id sub_1001B3D7C(void *a1)
{
  id v1 = a1;
  active = (void *)CPPhoneNumberCopyActiveCountryCode();
  id v3 = (void *)PNCopyBestGuessNormalizedNumberForCountry();

  if (v3)
  {
    +[NSString stringWithUTF8String:v3];
    uint64_t v4 = CFPhoneNumberCreate();
    if (v4)
    {
      int v5 = (const void *)v4;
      uint64_t String = CFPhoneNumberCreateString();
      if (String)
      {
        id v7 = (void *)String;
        id v8 = +[NSCharacterSet characterSetWithCharactersInString:@"+"];
        id v9 = [v7 stringByTrimmingCharactersInSet:v8];
      }
      else
      {
        id v9 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      id v9 = 0;
    }
    free(v3);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

uint64_t sub_1001B3E88(const __CFString *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unsigned int valuePtr = a2;
  CFStringRef v3 = (const __CFString *)sub_1000D91F0(a1);
  if (v3)
  {
    CFStringRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
        if ((valuePtr & 0x80000000) == 0)
        {
LABEL_10:
          CFRelease(v4);
          return valuePtr;
        }
      }
      else
      {
        unsigned int valuePtr = v2;
        if ((v2 & 0x80000000) == 0) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      CFTypeID v6 = CFGetTypeID(v4);
      CFTypeID TypeID = CFStringGetTypeID();
      Intuint64_t Value = v2;
      if (v6 == TypeID)
      {
        Intuint64_t Value = CFStringGetIntValue(v4);
        unsigned int valuePtr = IntValue;
      }
      if ((IntValue & 0x80000000) == 0) {
        goto LABEL_10;
      }
    }
    unsigned int valuePtr = v2;
    goto LABEL_10;
  }
  return v2;
}

id sub_1001B3F50(void *a1)
{
  id v1 = a1;
  long long v16 = 0u;
  long long v17 = 0u;
  xpc_connection_get_audit_token();
  memset(&v15, 0, sizeof(v15));
  uint64_t v2 = SecTaskCreateWithAuditToken(0, &v15);
  if (v2)
  {
    CFStringRef v3 = v2;
    CFStringRef v4 = (void *)SecTaskCopyValueForEntitlement(v2, @"application-identifier", 0);
    if (v4)
    {
      CFTypeID v5 = v4;
      if ((unint64_t)[v4 length] < 0xB
        || [v5 characterAtIndex:10] != 46)
      {
        goto LABEL_19;
      }
      unint64_t v6 = 0;
      do
      {
        unsigned int v7 = [v5 characterAtIndex:v6];
        BOOL v9 = v7 - 65 < 0x1A || v7 - 48 < 0xA;
      }
      while (v9 && v6++ < 9);
      if (!v9
        || (objc_msgSend(v5, "substringWithRange:", 11, (char *)objc_msgSend(v5, "length") - 11),
            (id v11 = (id)objc_claimAutoreleasedReturnValue()) == 0))
      {
LABEL_19:
        id v11 = v5;
      }
    }
    else
    {
      id v11 = 0;
    }
    CFRelease(v3);
  }
  else
  {
    uint64_t pid = xpc_connection_get_pid(v1);
    unsigned __int8 v13 = daemon_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1001B5204(pid, v13);
    }

    id v11 = 0;
  }

  return v11;
}

CFStringRef sub_1001B40B8()
{
  CFStringRef v0 = (const __CFString *)CFPreferencesCopyValue(@"StreamID", kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  if (!v0)
  {
    id v1 = +[NSUUID UUID];
    uint64_t v2 = [v1 UUIDString];
    CFStringRef v3 = [v2 substringWithRange:24, 12];
    CFStringRef v0 = [v3 lowercaseString];

    CFPreferencesSetValue(@"StreamID", v0, kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
    CFPreferencesSynchronize(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
    CFStringRef v4 = streams_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      CStringPtr = CFStringGetCStringPtr(v0, 0x600u);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Created new Stream ID (%s)", (uint8_t *)&v6, 0xCu);
    }
  }
  return v0;
}

uint64_t sub_1001B423C()
{
  BOOL v9 = 0;
  if (getifaddrs(&v9))
  {
    CFStringRef v0 = airdrop_log();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      sub_1001B52A8();
    }

    return 0;
  }
  else
  {
    BOOL v2 = sub_1001B3C24();
    if (v2) {
      CFStringRef v3 = "en0";
    }
    else {
      CFStringRef v3 = "awdl0";
    }
    if (v2) {
      size_t v4 = 3;
    }
    else {
      size_t v4 = 5;
    }
    CFTypeID v5 = v9;
    if (v9)
    {
      uint64_t v1 = 0;
      do
      {
        if (v5->ifa_addr->sa_family == 30)
        {
          ifa_name = v5->ifa_name;
          if (!strncasecmp(ifa_name, v3, v4)) {
            uint64_t v1 = if_nametoindex(ifa_name);
          }
        }
        CFTypeID v5 = v5->ifa_next;
      }
      while (v5);
      unsigned int v7 = v9;
    }
    else
    {
      unsigned int v7 = 0;
      uint64_t v1 = 0;
    }
    freeifaddrs(v7);
  }
  return v1;
}

__CFString *sub_1001B4338(const __CFString *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFIndex Length = CFStringGetLength(a1);
  MutableCopy = CFStringCreateMutableCopy(v2, Length, a1);
  CFStringTrim(MutableCopy, @".");
  return MutableCopy;
}

CFMutableStringRef sub_1001B438C(const __CFAllocator *a1, CFStringRef theString)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(a1, 0, theString);
  v4.length = CFStringGetLength(MutableCopy);
  v4.location = 0;
  CFStringFindAndReplace(MutableCopy, @"\\", @"\\\\", v4, 0);
  v5.length = CFStringGetLength(MutableCopy);
  v5.location = 0;
  CFStringFindAndReplace(MutableCopy, @".", @"\\.", v5, 0);
  return MutableCopy;
}

__CFString *sub_1001B4410(void *a1, void *a2, void *a3, int a4)
{
  unsigned int v7 = a1;
  id v8 = a2;
  BOOL v9 = a3;
  id v10 = v9;
  id v11 = 0;
  if (v7 && v8 && v9)
  {
    memset(buffer, 0, sizeof(buffer));
    if (!CFStringGetCString(v7, (char *)buffer, 64, 0x8000100u)) {
      goto LABEL_8;
    }
    bzero(regtype, 0x3F1uLL);
    if (!CFStringGetCString(v8, regtype, 1009, 0x8000100u)) {
      goto LABEL_8;
    }
    bzero(domain, 0x3F1uLL);
    if (!CFStringGetCString(v10, domain, 1009, 0x8000100u)) {
      goto LABEL_8;
    }
    bzero(fullName, 0x3F1uLL);
    if (DNSServiceConstructFullName(fullName, (const char *const)buffer, regtype, domain)) {
      goto LABEL_8;
    }
    if (a4)
    {
      CFMutableStringRef v13 = sub_1001B438C(0, v7);
      if (!v13)
      {
LABEL_8:
        id v11 = 0;
        goto LABEL_9;
      }
      CFMutableStringRef v14 = v13;
      audit_token_t v15 = sub_1001B4338(v10);
      id v11 = (__CFString *)CFStringCreateWithFormat(0, 0, @"%@.%@%@", v14, v8, v15);
      CFRelease(v15);
      CFRelease(v14);
    }
    else
    {
      id v11 = (__CFString *)CFStringCreateWithCString(0, fullName, 0x8000100u);
    }
  }
LABEL_9:

  return v11;
}

__CFString *sub_1001B45E4()
{
  CFStringRef v0 = (__CFNetService *)_CFNetServiceCreateFromURL();
  if (v0)
  {
    uint64_t v1 = v0;
    CFStringRef Domain = CFNetServiceGetDomain(v0);
    CFIndex Length = CFStringGetLength(Domain);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, Length, Domain);
    CFStringLowercase(MutableCopy, 0);
    CFStringTrim(MutableCopy, @".");
    CFRelease(v1);
  }
  else
  {
    CFMutableStringRef MutableCopy = 0;
  }

  return MutableCopy;
}

id sub_1001B4670()
{
  CFStringRef v0 = sub_1001B45E4();
  id v1 = [v0 isEqual:@"local"];

  return v1;
}

__CFDictionary *sub_1001B46B4(unsigned int a1, const UInt8 *a2)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    CFStringRef v5 = CFStringCreateWithBytes(0, a2, a1, 0x8000100u, 0);
    if (v5)
    {
      CFStringRef v6 = v5;
      unsigned int v7 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      CFIndex Length = CFStringGetLength(v6);
      CFIndex v9 = Length - 1;
      if (Length < 1)
      {
        CFIndex v10 = Length - 1;
      }
      else
      {
        CFIndex v10 = Length - 1;
        do
        {
          uint64_t v11 = v9;
          int CharacterAtIndex = CFStringGetCharacterAtIndex(v6, v9--);
          if (CharacterAtIndex == 44)
          {
            if (v11 < 1) {
              goto LABEL_12;
            }
            char v13 = 0;
            uint64_t v14 = v11;
            while (CFStringGetCharacterAtIndex(v6, --v14) == 92)
            {
              ++v13;
              if (v14 <= 0)
              {
                char v13 = v11;
                break;
              }
            }
            if ((v13 & 1) == 0)
            {
LABEL_12:
              v32.location = v11 + 1;
              v32.length = v10 - v11;
              CFStringRef v15 = CFStringCreateWithSubstring(0, v6, v32);
              CFIndex v10 = v9;
              if (v15)
              {
                CFStringRef v16 = v15;
                CFArrayAppendValue(v7, v15);
                CFRelease(v16);
                CFIndex v10 = v9;
              }
            }
          }
        }
        while (v11 > 0);
        CFIndex v9 = -1;
      }
      v33.location = v9 + 1;
      v33.length = v10 - v9;
      CFStringRef v17 = CFStringCreateWithSubstring(0, v6, v33);
      if (v17)
      {
        CFStringRef v18 = v17;
        CFArrayAppendValue(v7, v17);
        CFRelease(v18);
      }
      CFIndex Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        CFIndex v20 = Count;
        for (CFIndex i = 0; i != v20; ++i)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, i);
          CFRange v23 = CFStringFind(ValueAtIndex, @"=", 0);
          if (v23.length >= 1)
          {
            v34.location = 0;
            v34.length = v23.location;
            CFStringRef v24 = CFStringCreateWithSubstring(0, ValueAtIndex, v34);
            if (v24)
            {
              CFStringRef v25 = v24;
              CFIndex v26 = CFStringGetLength(ValueAtIndex);
              v35.length = v26 + ~CFStringGetLength(v25);
              v35.location = v23.location + 1;
              CFStringRef v27 = CFStringCreateWithSubstring(0, ValueAtIndex, v35);
              if (v27)
              {
                CFStringRef v28 = v27;
                CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v27);
                v36.length = CFStringGetLength(MutableCopy);
                v36.location = 0;
                CFStringFindAndReplace(MutableCopy, @"\\,", @",", v36, 0);
                v37.length = CFStringGetLength(MutableCopy);
                v37.location = 0;
                CFStringFindAndReplace(MutableCopy, @"\\\\", @"\\", v37, 0);
                CFDictionarySetValue(Mutable, v25, MutableCopy);
                CFRelease(MutableCopy);
                CFRelease(v28);
              }
              CFRelease(v25);
            }
          }
        }
      }
      CFRelease(v7);
      CFRelease(v6);
    }
  }

  return Mutable;
}

void sub_1001B499C()
{
  if (SFDeviceSupportsAirDrop()) {
    CFStringRef v0 = @"YES";
  }
  else {
    CFStringRef v0 = @"NO";
  }
  id v1 = v0;
  if (SFDeviceSupportsAutoUnlock()) {
    CFAllocatorRef v2 = @"YES";
  }
  else {
    CFAllocatorRef v2 = @"NO";
  }
  CFStringRef v3 = v2;
  if (SFDeviceSupportsContinuity()) {
    CFRange v4 = @"YES";
  }
  else {
    CFRange v4 = @"NO";
  }
  CFStringRef v5 = v4;
  if (SFDeviceSupportsRemoteDisc()) {
    CFStringRef v6 = @"YES";
  }
  else {
    CFStringRef v6 = @"NO";
  }
  unsigned int v7 = v6;
  id v8 = daemon_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138413314;
    CFIndex v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v5;
    __int16 v15 = 2112;
    CFStringRef v16 = v1;
    __int16 v17 = 2112;
    CFStringRef v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device Capabilities (Auto Unlock:%@, Handoff:%@, Instant Hotspot:%@, AirDrop:%@, Remote Disc:%@)", (uint8_t *)&v9, 0x34u);
  }
}

uint64_t sub_1001B4AE0()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.retain)();
}

uint64_t sub_1001B4AF0()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.release)();
}

BOOL sub_1001B4B00(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 1uLL) == kCFCompareEqualTo;
}

void sub_1001B4B28(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x300], 8) = a1;
}

void sub_1001B4B34()
{
  sub_1001B4B28(__stack_chk_guard);
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "setFileIncomplete: kCFURLCreationDateKey %@", v2, v3, v4, v5, v6);
}

void sub_1001B4B9C()
{
  sub_1001B4B28(__stack_chk_guard);
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "setFileIncomplete: CFURLCopyResourcePropertyForKey %@", v2, v3, v4, v5, v6);
}

void sub_1001B4C04()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "setFileIncomplete: finderInfoData is NULL", v2, v3, v4, v5, v6);
}

void sub_1001B4C38()
{
  sub_1001B4B28(__stack_chk_guard);
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "setFileIncomplete: _kCFURLFinderInfoKey %@", v2, v3, v4, v5, v6);
}

void sub_1001B4CA0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Exception caught trying to retrieve primary iCloud account : %@", v2, v3, v4, v5, v6);
}

void sub_1001B4D08()
{
  sub_1001B4B28(__stack_chk_guard);
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "copyLocalizedFileName %@", v2, v3, v4, v5, v6);
}

void sub_1001B4D70()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "NSItemReplacementDirectory appropriateForURL:%@ returned nil error", v2, v3, v4, v5, v6);
}

void sub_1001B4DD8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "absoluteURL was nil for %@", v2, v3, v4, v5, v6);
}

void sub_1001B4E40()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "createDirectoryAtURL:%@ returned nil error", v2, v3, v4, v5, v6);
}

void sub_1001B4EA8()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Unique temporary folder: %@", v1, 0xCu);
}

void sub_1001B4F1C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Missing Library folder", v2, v3, v4, v5, v6);
}

void sub_1001B4F50()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create Sharing folder", v2, v3, v4, v5, v6);
}

void sub_1001B4F84(int a1, NSObject *a2)
{
  int v4 = *__error();
  uint64_t v5 = __error();
  uint8_t v6 = strerror(*v5);
  v7[0] = 67109634;
  v7[1] = a1;
  __int16 v8 = 1024;
  int v9 = v4;
  __int16 v10 = 2080;
  __int16 v11 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "copyUserFolder: confstr(%d) failed with error %d (%s)", (uint8_t *)v7, 0x18u);
}

void sub_1001B5044()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Cannot move files to nil folder", v2, v3, v4, v5, v6);
}

void sub_1001B5078()
{
  sub_10002972C();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to create folder %@ with error: %@", v2, 0x16u);
}

void sub_1001B50FC(int a1, NSObject *a2)
{
  int v4 = *__error();
  v5[0] = 67109376;
  v5[1] = a1;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "This is not a valid AFP volume (FSCTL returned %d errno = %d)\n", (uint8_t *)v5, 0xEu);
}

void sub_1001B519C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "_SDVolumeNameForMountPoint: NSURLVolumeNameKey %@", v2, v3, v4, v5, v6);
}

void sub_1001B5204(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = NSPrintF();
  *(_DWORD *)buf = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SecTaskCreateWithAuditToken returned NULL for %@", buf, 0xCu);
}

void sub_1001B52A8()
{
  __error();
  sub_1000A41F8((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0);
}

void sub_1001B5818(uint64_t a1, int a2)
{
  uint64_t v4 = streams_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v5 = @"NO";
    if (a2) {
      CFStringRef v5 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDServiceManager: Accept Reply = %@", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1001B594C;
  v6[3] = &unk_1008CFAF0;
  id v7 = *(id *)(a1 + 32);
  char v8 = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
}

uint64_t sub_1001B594C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1001B5AC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001B74DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v5 = [[SDAItemSource alloc] initWithAttributedString:v3 previewImage:0 subject:0];

  [(SDAItemSource *)v5 setFakeBundleID:@"com.apple.mobilemail"];
  [(SDAItemSource *)v5 setFakeBytes:200];
  LODWORD(v4) = 0.5;
  [(SDAItemSource *)v5 setFakeDuration:v4];
  [*(id *)(a1 + 32) addObject:v5];
}

void sub_1001B7658(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v5 = [[SDAItemSource alloc] initWithString:v3 previewImage:0 subject:@"some subject"];

  [(SDAItemSource *)v5 setFakeBundleID:@"com.apple.mobilemail"];
  [(SDAItemSource *)v5 setFakeBytes:200];
  LODWORD(v4) = 0.5;
  [(SDAItemSource *)v5 setFakeDuration:v4];
  [*(id *)(a1 + 32) addObject:v5];
}

void sub_1001B7818(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = [v9 objectForKeyedSubscript:@"kSDAItemSourcesURL"];
  double v4 = +[NSURL URLWithString:v3];

  CFStringRef v5 = [v9 objectForKeyedSubscript:@"kSDAItemSourcesPreviewImage"];

  if (v5)
  {
    CFStringRef v5 = [v9 objectForKeyedSubscript:@"kSDAItemSourcesPreviewImage"];
  }
  uint8_t v6 = [v9 objectForKeyedSubscript:@"kSDAItemSourcesSubject"];

  if (v6)
  {
    uint8_t v6 = [v9 objectForKeyedSubscript:@"kSDAItemSourcesSubject"];
  }
  id v7 = [[SDAItemSource alloc] initWithURL:v4 previewImage:v5 subject:v6];
  [(SDAItemSource *)v7 setFakeBundleID:*(void *)(a1 + 32)];
  [(SDAItemSource *)v7 setFakeBytes:*(void *)(a1 + 48)];
  LODWORD(v_Block_object_dispose(&STACK[0x300], 8) = *(_DWORD *)(a1 + 56);
  [(SDAItemSource *)v7 setFakeDuration:v8];
  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1001B7AB8(uint64_t a1, void *a2)
{
  id v18 = [a2 componentsSeparatedByString:@"."];
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  double v4 = [v18 objectAtIndexedSubscript:0];
  CFStringRef v5 = [v18 objectAtIndexedSubscript:1];
  uint8_t v6 = [v3 URLForResource:v4 withExtension:v5];

  id v7 = [v6 pathExtension];
  CFStringRef PreferredIdentifierForTag = (__CFString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v7, 0);

  if (UTTypeConformsTo(PreferredIdentifierForTag, kUTTypeImage))
  {
    id v9 = [v6 path];
    uint64_t v10 = +[UIImage imageWithContentsOfFile:v9];
  }
  else
  {
    __int16 v11 = *(void **)(a1 + 40);
    uint64_t v12 = v11;
    if (!v11)
    {
      uint64_t v12 = [v18 objectAtIndexedSubscript:0];
    }
    id v9 = +[NSString stringWithFormat:@"%@-preview.png", v12];
    if (!v11) {

    }
    uint64_t v10 = +[UIImage imageNamed:v9 inBundle:*(void *)(*(void *)(a1 + 32) + 8)];
  }
  __int16 v13 = (void *)v10;

  uint64_t v14 = [SDAItemSource alloc];
  __int16 v15 = [v18 objectAtIndexedSubscript:0];
  CFStringRef v16 = [(SDAItemSource *)v14 initWithURL:v6 previewImage:v13 subject:v15];

  [(SDAItemSource *)v16 setFakeBundleID:*(void *)(a1 + 48)];
  [(SDAItemSource *)v16 setFakeBytes:*(void *)(a1 + 64)];
  LODWORD(v17) = *(_DWORD *)(a1 + 72);
  [(SDAItemSource *)v16 setFakeDuration:v17];
  [*(id *)(a1 + 56) addObject:v16];
}

void sub_1001B7DAC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 activityViewController:0 itemForActivityType:UIActivityTypeAirDrop];
  [v2 addObject:v3];
}

void sub_1001B8C78(id a1)
{
  uint64_t v1 = objc_alloc_init(SDDomainBrowser);
  uint64_t v2 = (void *)qword_100980298;
  qword_100980298 = (uint64_t)v1;
}

unsigned __int8 *sub_1001B9074(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = 0;
  while (1)
  {
    int v3 = *result;
    if (!*result || v3 == 46) {
      break;
    }
    double v4 = result + 1;
    if (v3 == 92)
    {
      int v5 = (char)*v4;
      if (*v4)
      {
        LOBYTE(v3) = *v4;
        double v4 = result + 2;
        if ((v5 - 48) <= 9)
        {
          int v6 = (char)*v4;
          if ((v6 - 48) <= 9)
          {
            int v7 = (char)result[3];
            if ((v7 - 48) <= 9)
            {
              unsigned int v8 = 10 * v6 + 100 * v5 + v7 - 5328;
              if (!v8) {
                unsigned int v8 = 45;
              }
              if (v8 < 0x100)
              {
                LOBYTE(v3) = v8;
                double v4 = result + 4;
              }
            }
          }
        }
      }
      else
      {
        LOBYTE(v3) = 92;
      }
    }
    *(unsigned char *)(a2 + v2++) = v3;
    uint64_t result = v4;
    if (v2 == 64)
    {
      uint64_t result = 0;
      *(unsigned char *)(a2 + 63) = 0;
      return result;
    }
  }
  *(unsigned char *)(a2 + v2) = 0;
  if (!v2) {
    return 0;
  }
  if (*result) {
    ++result;
  }
  return result;
}

CFComparisonResult sub_1001B95A0(const __CFString *a1, const __CFString *a2)
{
  unsigned int v4 = sub_1001B99F8(a1);
  unsigned int v5 = sub_1001B99F8(a2);
  if (v4 == v5)
  {
    return CFStringCompare(a1, a2, 1uLL);
  }
  else if (v4 > v5)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

id sub_1001B98C0(uint64_t a1)
{
  [*(id *)(a1 + 32) restart];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 postNotification];
}

uint64_t sub_1001B99F8(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  int v3 = (char *)malloc_type_malloc(Length + 1, 0xAED758B5uLL);
  CFStringGetCString(a1, v3, Length + 1, 0x8000100u);
  unsigned __int8 v4 = 0;
  v3[Length - 1] = 0;
  unsigned int v5 = (unsigned __int8 *)v3;
  do
  {
    if (!*v5) {
      break;
    }
    ++v4;
    unsigned int v5 = sub_1001B9074(v5, (uint64_t)v7);
  }
  while (v5);
  free(v3);
  return v4;
}

void sub_1001B9AC0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDDomainBrowser: didNotSearch %@", (uint8_t *)&v2, 0xCu);
}

void sub_1001B9B8C(id a1)
{
  uint64_t v1 = objc_alloc_init(SDSubCredentialAgent);
  int v2 = (void *)qword_1009802A8;
  qword_1009802A8 = (uint64_t)v1;
}

id sub_1001B9D0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_1001B9E14(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1001BA1E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _uiPresentWithParams:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

uint64_t sub_1001BA9E0(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 8))
  {
    if (dword_100969048 <= 30)
    {
      if (dword_100969048 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        return LogPrintF();
      }
    }
  }
  else if (dword_100969048 <= 60)
  {
    if (dword_100969048 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_1001BAB6C(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 8))
  {
    if (dword_100969048 <= 30)
    {
      if (dword_100969048 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
      {
        return LogPrintF();
      }
    }
  }
  else if (dword_100969048 <= 60)
  {
    if (dword_100969048 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

void sub_1001BAD24(uint64_t a1)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8))
  {
    if (dword_100969048 <= 30 && (dword_100969048 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void **)(v2 + 8);
    *(void *)(v2 + _Block_object_dispose(&STACK[0x300], 8) = 0;
  }
  else if (dword_100969048 <= 30 && (dword_100969048 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

BOOL sub_1001BB418(id a1, id a2, NSDictionary *a3)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned __int8 v4 = [v3 isFileURL];
  }
  else {
    unsigned __int8 v4 = 0;
  }

  return v4;
}

id sub_1001BB7CC(void *a1)
{
  if (a1)
  {
    [a1 bytes];
    a1 = _ShareSheetBundleIDFromAuditToken();
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1001BB804(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001BB87C;
  block[3] = &unk_1008CA4B8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1001BB87C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) activityDidFinish:1];
}

void sub_1001BBAF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = [a2 copy];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001BBBEC;
  block[3] = &unk_1008CFC68;
  id v11 = [a3 copy];
  id v15 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(a1 + 40);
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = v7;
  id v8 = v5;
  id v9 = v11;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1001BBBEC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v2();
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    v5[0] = LSFileProviderStringKey;
    v5[1] = LSRequireOpenInPlaceKey;
    v6[0] = v3;
    v6[1] = &__kCFBooleanTrue;
    unsigned __int8 v4 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
    [*(id *)(a1 + 48) _performLaunchServicesOpenWithDocumentOpenURL:*(void *)(a1 + 56) launchServiceOptions:v4 completion:*(void *)(a1 + 64)];
  }
}

BOOL sub_1001BC010(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unsigned __int8 v4 = [v3 url];
    if ([v4 isEqual:*(void *)(a1 + 32)])
    {
      id v5 = [v3 bookmarkExportDataEncodedAsString];
      BOOL v6 = [v5 length] != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

id sub_1001BC280(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSMutableArray array];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = [v1 securityScopedResources];
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (CFIndex i = 0; i != v5; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v10 + 1) + 8 * i) url];
        [v2 addObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id sub_1001BCB8C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  if (a3) {
    id v6 = [a3 bytes];
  }
  else {
    id v6 = 0;
  }
  int v7 = +[LSDocumentProxy documentProxyForURL:v5 isContentManaged:a2 sourceAuditToken:v6];

  return v7;
}

void sub_1001BCC10(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  int CanOpenInPlaceByReferenceOriginalFile = _UIApplicationCanOpenInPlaceByReferenceOriginalFile();
  int v7 = *(void **)(a1 + 40);
  id v8 = *(void **)(a1 + 72);
  if (CanOpenInPlaceByReferenceOriginalFile) {
    id v9 = (objc_class *)[v8 classForOpenInPlaceActivity];
  }
  else {
    id v9 = (objc_class *)[v8 classForOpenByCopyActivity];
  }
  id v10 = [[v9 alloc] initWithApplicationProxy:v5 documentProxy:*(void *)(a1 + 48) isContentManaged:*(unsigned __int8 *)(a1 + 80) sourceApplicationAuditTokenData:*(void *)(a1 + 56) appIsDocumentTypeOwner:a3 supportedTypeIdentifiers:*(void *)(a1 + 64)];

  [v7 addObject:v10];
}

id sub_1001BD3E8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) activityDidFinish:a2];
}

id sub_1001BD578(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) activityDidFinish:a2];
}

void sub_1001BD590(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = qword_1009802B0;
  id v6 = a3;
  if (v5 != -1) {
    dispatch_once(&qword_1009802B0, &stru_1008CFD00);
  }
  off_100969118 = (uint64_t (*)())dlsym((void *)qword_1009802B8, "FPExtendBookmarkForDocumentURL");
  ((void (*)(uint64_t, uint64_t, id))off_100969118)(a1, a2, v6);
}

void sub_1001BD638(id a1)
{
  qword_1009802B8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FileProvider.framework/FileProvider", 2);
}

void sub_1001BD664(uint64_t a1, void *a2)
{
  id v5 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = [v5 securityScopedResources];
    [v3 addObjectsFromArray:v4];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1001BD7D0(id a1)
{
  id v1 = objc_alloc_init(SDManagedBrowser);
  uint64_t v2 = (void *)qword_1009802C8;
  qword_1009802C8 = (uint64_t)v1;
}

id sub_1001BD974(uint64_t a1)
{
  return _[*(id *)(a1 + 32) buildNodesAndNotify];
}

uint64_t SDAuthenticationConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v29 = 24;
        goto LABEL_54;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        float v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;

        continue;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_49:
        *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x300], 8) = v22 != 0;
        continue;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1 || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v14 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0) {
        goto LABEL_51;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v29 = 8;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001BF208()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Error sending %@, error:%@");
}

void sub_1001BF270()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "Failed to create destination (deviceID: %@, IDS device: %@)");
}

id sub_1001BF4C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1001BF5C4()
{
  if (qword_1009802D8 != -1) {
    dispatch_once(&qword_1009802D8, &stru_1008CFD70);
  }
  uint64_t v0 = (void *)qword_1009802D0;

  return v0;
}

id sub_1001BF68C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _ensureStarted];
}

void sub_1001BFB48(NSObject *a1, int a2, uint64_t a3, void *a4)
{
  unint64_t v6 = a4;
  dispatch_assert_queue_V2(v6[9]);
  switch(a2)
  {
    case 0:
      unint64_t v7 = sub_1001BF5C4();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 6291714;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BTSession attached: %#m\n", buf, 4u);
      }

      void v6[2] = a1;
      goto LABEL_24;
    case 1:
      unsigned int v13 = sub_1001BF5C4();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 6291714;
      uint64_t v14 = "BTSession detached: %#m\n";
      unint64_t v15 = buf;
      char v16 = v13;
      os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_15;
    case 2:
      dispatch_queue_t v18 = v6[2];
      unsigned int v13 = sub_1001BF5C4();
      BOOL v19 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (!v18)
      {
        if (v19)
        {
          *(_WORD *)buf = 0;
          uint64_t v14 = "### BTSession terminated (bluetoothd crash) when stopping\n";
          unint64_t v15 = buf;
          char v16 = v13;
          os_log_type_t v17 = OS_LOG_TYPE_ERROR;
          uint32_t v20 = 2;
LABEL_22:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v14, v15, v20);
        }
LABEL_23:

        CFRelease(v6);
        goto LABEL_24;
      }
      if (v19)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "### BTSession terminated (bluetoothd crash)...re-attaching\n", buf, 2u);
      }

      void v6[2] = 0;
      *(void *)buf = sub_1001BFB48;
      if (off_100969128((uint64_t)"SDProximityPairingBufferedScanner", (uint64_t)buf, (uint64_t)v6, v6[9]))
      {
        unsigned int v13 = sub_1001BF5C4();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int v21 = 6291714;
          uint64_t v14 = "### BTSession re-attach failed: %#m\n";
          unint64_t v15 = (uint8_t *)&v21;
          char v16 = v13;
          os_log_type_t v17 = OS_LOG_TYPE_ERROR;
LABEL_15:
          uint32_t v20 = 4;
          goto LABEL_22;
        }
        goto LABEL_23;
      }
LABEL_24:

      return;
    case 3:
      char v8 = sub_1001BF5C4();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 6291714;
      BOOL v9 = "### BTSession failed: %#m\n";
      int v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
      uint32_t v12 = 4;
      goto LABEL_18;
    default:
      char v8 = sub_1001BF5C4();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v23 = 96;
      BOOL v9 = "### BTSession unknown event %d, result %#m\n";
      int v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_INFO;
      uint32_t v12 = 10;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
LABEL_19:

      goto LABEL_24;
  }
}

void sub_1001C00E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 72));
  _Unwind_Resume(a1);
}

void sub_1001C0134(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (_os_feature_enabled_impl()) {
    [WeakRetained foundBufferedPairingDevices:v4];
  }
}

void sub_1001C01AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained proxPairingLoggerAndInvalidationHandler:@"Invalidation Handler" withLogLevel:16 andError:0];
}

void sub_1001C01FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained proxPairingLoggerAndInvalidationHandler:@"Interruption Handler" withLogLevel:16 andError:0];
}

void sub_1001C024C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained proxPairingLoggerAndInvalidationHandler:@"Error Handler" withLogLevel:16 andError:v3];
}

void sub_1001C0558(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_1001C0574(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained proxPairingLoggerAndInvalidationHandler:@"ActivateWithCompletion Handler" withLogLevel:16 andError:v3];
}

uint64_t sub_1001C3934(uint64_t a1)
{
  if (a1 >> 1 == 4103) {
    return 1;
  }
  id v2 = [objc_alloc((Class)SFHeadphoneProduct) initWithProductID:a1];
  id v3 = [v2 supportsOptimizedBatteryCharging];

  return (uint64_t)v3;
}

void sub_1001C418C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 advertisementFields];
  uint64_t v4 = CFDictionaryGetInt64Ranged() & 0x24;
  uint64_t Int64 = CFDictionaryGetInt64();
  if (v4 | Int64)
  {
    if (Int64 && [v2 proxPairingTicks])
    {
      [v2 setProxPairingTicks:0];
      unint64_t v6 = sub_1001BF5C4();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412290;
        id v8 = v2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing up ticks %@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
  else if (![v2 proxPairingTicks])
  {
    [v2 setProxPairingTicks:mach_absolute_time()];
  }
}

void sub_1001C4510(id a1)
{
  os_log_t v1 = os_log_create("com.apple.sharing", "ProximityPairingBufferedScanner");
  id v2 = (void *)qword_1009802D0;
  qword_1009802D0 = (uint64_t)v1;
}

uint64_t sub_1001C4554(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = qword_1009802E0;
  id v8 = a4;
  if (v7 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  off_100969128 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTSessionAttachWithQueue");
  uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, id))off_100969128)(a1, a2, a3, v8);

  return v9;
}

void sub_1001C45FC(id a1)
{
  qword_1009802E8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileBluetooth.framework/MobileBluetooth", 2);
}

uint64_t sub_1001C4628(uint64_t a1)
{
  if (qword_1009802E0 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  id v2 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTSessionDetachWithQueue");
  off_100969130 = v2;

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

Class sub_1001C46A4()
{
  if (qword_1009802F8 != -1) {
    dispatch_once(&qword_1009802F8, &stru_1008CFDB0);
  }
  Class result = objc_getClass("CBDiscovery");
  qword_1009802F0 = (uint64_t)result;
  off_100969120 = (uint64_t (*)())sub_1001C4708;
  return result;
}

id sub_1001C4708()
{
  return (id)qword_1009802F0;
}

void sub_1001C4714(id a1)
{
  qword_100980300 = (uint64_t)dlopen("/System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth", 2);
}

uint64_t sub_1001C4740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009802E0 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  unint64_t v6 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTDeviceFromIdentifier");
  off_100969138 = v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t sub_1001C47D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009802E0 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  unint64_t v6 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTDeviceGetName");
  off_100969140 = v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t sub_1001C4868(uint64_t a1, uint64_t a2)
{
  if (qword_1009802E0 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTDeviceGetPairingStatus");
  off_100969148 = v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t sub_1001C48EC(uint64_t a1, uint64_t a2)
{
  if (qword_1009802E0 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTDeviceIsTemporaryPaired");
  off_100969150 = v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t sub_1001C4970(uint64_t a1, uint64_t a2)
{
  if (qword_1009802E0 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTDeviceGetConnectedServices");
  off_100969158 = v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t sub_1001C49F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009802E0 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  unint64_t v6 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTDeviceGetAddressString");
  off_100969160 = v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t sub_1001C4A88(uint64_t a1, uint64_t a2)
{
  if (qword_1009802E0 != -1) {
    dispatch_once(&qword_1009802E0, &stru_1008CFD90);
  }
  uint64_t v4 = (uint64_t (*)())dlsym((void *)qword_1009802E8, "BTDeviceAddressFromString");
  off_100969168 = v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

id sub_1001C4D48(uint64_t a1)
{
  return [*(id *)(a1 + 32) _start];
}

uint64_t sub_1001C4E04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(a1 + 40))
  {
    [*(id *)(a1 + 32) setAttemptError:];
    id v3 = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }

  return _objc_release_x2(v3);
}

void sub_1001C523C(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    [v3 setErrorType:4];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    CFStringRef v10 = @"AWDL info exchange failed";
    unint64_t v6 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    uint64_t v7 = +[NSError errorWithDomain:v5 code:103 userInfo:v6];
    [v4 notifyDelegateWithError:v7];
  }
  else
  {
    id v8 = [v3 delegate];
    [v8 sessionDidSendInitialData:*(void *)(a1 + 32)];
  }
}

void sub_1001C537C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) setAttemptError:a2];
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    CFStringRef v8 = @"Proxy message failed";
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    unint64_t v6 = +[NSError errorWithDomain:v4 code:103 userInfo:v5];
    [v3 notifyDelegateWithError:v6];
  }
}

void sub_1001C63BC(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Missing AWDL Info", v1, 2u);
}

void sub_1001C6400(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Session missing device ID for encrypted send", v1, 2u);
}

void sub_1001C6444(uint64_t a1, NSObject *a2)
{
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Ranging key data: %{private}@", (uint8_t *)&v2, 0xCu);
}

uint64_t SDUnlockSetupSessionCreatedReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 64) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_74;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_76;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_74:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_76:
        uint64_t v46 = 48;
        goto LABEL_101;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 64) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_80:
        uint64_t v46 = 32;
        goto LABEL_101;
      case 3u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 40;
        goto LABEL_72;
      case 4u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 16;
        goto LABEL_72;
      case 5u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 64) |= 1u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v14 |= (unint64_t)(v27 & 0x7F) << v24;
            if (v27 < 0)
            {
              v24 += 7;
              BOOL v9 = v25++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_84:
        uint64_t v46 = 8;
        goto LABEL_101;
      case 6u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 64) |= 2u;
        while (2)
        {
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v14 |= (unint64_t)(v31 & 0x7F) << v28;
            if (v31 < 0)
            {
              v28 += 7;
              BOOL v9 = v29++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_88:
        uint64_t v46 = 12;
        goto LABEL_101;
      case 7u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        *(unsigned char *)(a1 + 64) |= 0x40u;
        while (2)
        {
          unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 == -1 || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              BOOL v9 = v33++ >= 9;
              if (v9)
              {
                uint64_t v34 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v34 = 0;
        }
LABEL_92:
        *(unsigned char *)(a1 + 60) = v34 != 0;
        continue;
      case 8u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 64) |= 0x20u;
        while (2)
        {
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 == -1 || v39 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
            v14 |= (unint64_t)(v40 & 0x7F) << v37;
            if (v40 < 0)
            {
              v37 += 7;
              BOOL v9 = v38++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_96:
        uint64_t v46 = 56;
        goto LABEL_101;
      case 9u:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 64) |= 0x10u;
        break;
      case 0xAu:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 24;
LABEL_72:
        id v45 = *(void **)(a1 + v23);
        *(void *)(a1 + v23) = v22;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v43 == -1 || v43 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 1;
      v14 |= (unint64_t)(v44 & 0x7F) << v41;
      if ((v44 & 0x80) == 0) {
        goto LABEL_98;
      }
      v41 += 7;
      BOOL v9 = v42++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_100;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_98:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_100:
    uint64_t v46 = 52;
LABEL_101:
    *(_DWORD *)(a1 + v46) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1001C7F1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unpublish];
}

id sub_1001C7F98(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;
  return _[*(id *)(a1 + 32) handleClosedConnection];
}

id sub_1001C825C(uint64_t a1)
{
  return [*(id *)(a1 + 32) stop];
}

void sub_1001C8910(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 setSf_transferState:3];
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationTotalBytesKey];
  [v4 setTotalUnitCount:[v3 longLongValue]];

  [v4 setCompletedUnitCount:0];
}

void sub_1001C899C(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (![v6 totalUnitCount])
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationTotalBytesKey];
    [v6 setTotalUnitCount:[v3 longLongValue]];
  }
  id v4 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationBytesCopiedKey];
  [v6 setCompletedUnitCount:[v4 longLongValue]];

  unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationTimeRemainingKey];
  [v6 setUserInfoObject:v5 forKey:NSProgressEstimatedTimeRemainingKey];
}

void sub_1001C8A8C(id a1, NSProgress *a2)
{
}

void sub_1001C8A98(id a1, NSProgress *a2)
{
}

void sub_1001C8AA4(uint64_t a1, void *a2)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 120);
  uint64_t v3 = kSFOperationErrorKey;
  id v4 = a2;
  id v6 = [v2 objectForKeyedSubscript:v3];
  unsigned int v5 = [v6 localizedDescription];
  [v4 sf_failedWithError:v5];
}

void sub_1001C8C60(id a1)
{
  v3[0] = kSFOperationConvertMediaFormatsKey;
  v4[0] = objc_opt_class();
  v3[1] = kSFOperationFileBomPathKey;
  v4[1] = objc_opt_class();
  _DWORD v3[2] = kSFOperationFileIsDirectoryKey;
  void v4[2] = objc_opt_class();
  void v3[3] = kSFOperationFileNameKey;
  void v4[3] = objc_opt_class();
  v3[4] = kSFOperationtFileSubTypeKey;
  void v4[4] = objc_opt_class();
  void v3[5] = kSFOperationFileTypeKey;
  void v4[5] = objc_opt_class();
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
  int v2 = (void *)qword_100980310;
  qword_100980310 = v1;
}

uint64_t sub_1001CA274(uint64_t a1)
{
  return IOPMAssertionRelease(*(_DWORD *)(a1 + 32));
}

id sub_1001CAE10(uint64_t a1)
{
  return [*(id *)(a1 + 32) silentlyCancelRequest];
}

id sub_1001CAEA8(id a1, id a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v2;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v5 = 0;
      id v4 = 0;
      goto LABEL_10;
    }
    id v3 = +[NSURL URLWithString:v2 relativeToURL:0];
  }
  id v4 = v3;
  id v5 = [v3 scheme];
  if (v5)
  {
    id v6 = [v4 scheme];
    int IsSupported = SFAirDropUrlSchemeIsSupported();

    if (IsSupported)
    {
      id v5 = v4;
      id v4 = v5;
    }
    else
    {
      id v5 = 0;
    }
  }
LABEL_10:

  return v5;
}

id sub_1001CBC90(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:2];
}

id sub_1001CC124(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 handleReadStreamEvent:a1 event:a2];
}

void sub_1001CC4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CC4D4(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained startPublishingProgressForPlaceholderFiles:v3];
}

CFURLRef sub_1001CCB34()
{
  CFURLRef result = (const __CFURL *)_CFHTTPServerRequestCopyProperty();
  if (result)
  {
    CFURLRef v1 = result;
    CFStringRef v2 = CFURLCopyStrictPath(result, 0);
    CFRelease(v1);
    return (const __CFURL *)v2;
  }
  return result;
}

void sub_1001CD024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CD04C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001CD05C(uint64_t a1)
{
}

void sub_1001CD064(uint64_t a1)
{
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 136), 0xFFFFFFFFFFFFFFFFLL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001CD100;
  block[3] = &unk_1008CFEA0;
  block[6] = *(void *)(a1 + 48);
  dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 56), block);
}

void sub_1001CD100(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 208));
  if (WeakRetained)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(void *)(v3 + 144))
    {

      goto LABEL_5;
    }
    int v4 = *(unsigned __int8 *)(v3 + 11);

    if (v4)
    {
LABEL_5:
      id v5 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationFilesKey];
      id v6 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationItemsKey];
      id v7 = [v5 count];
      BOOL v8 = v7 == 0;
      if (v7) {
        BOOL v9 = v5;
      }
      else {
        BOOL v9 = v6;
      }
      if (v8) {
        CFStringRef v10 = @"%lu items";
      }
      else {
        CFStringRef v10 = @"%lu files";
      }
      os_log_type_t v11 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v10, [v9 count]);
      char v12 = airdrop_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        unsigned int v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received Upload request for %@", buf, 0xCu);
      }

      [*(id *)(a1 + 32) storeRequestValue:*(void *)(a1 + 48) forKey:@"Content-Type" convertToNumber:0];
      [*(id *)(a1 + 32) storeRequestValue:*(void *)(a1 + 48) forKey:kSFOperationTotalBytesKey convertToNumber:1];
      if ([*(id *)(a1 + 32) thereIsEnoughFreeSpace])
      {
        if ([*(id *)(a1 + 32) oneHundredContinue:*(void *)(a1 + 48)]) {
          [*(id *)(a1 + 32) enqueueResponse:*(void *)(a1 + 48) code:100 body:0];
        }
        uint64_t v13 = *(void *)(a1 + 48);
        uint64_t v14 = *(void **)(a1 + 32);
        uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
        id obj = *(id *)(v15 + 40);
        unsigned __int8 v16 = [v14 startReceivingFile:v13 error:&obj];
        objc_storeStrong((id *)(v15 + 40), obj);
        if (v16) {
          goto LABEL_31;
        }
        [*(id *)(*(void *)(a1 + 32) + 120) setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKeyedSubscript:kSFOperationErrorKey];
        os_log_type_t v17 = *(void **)(a1 + 32);
        uint64_t v18 = 500;
      }
      else
      {
        char v21 = airdrop_log();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_1001CF958();
        }

        uint64_t v22 = sub_100052DC0(-2, 0);
        uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8);
        char v24 = *(void **)(v23 + 40);
        *(void *)(v23 + 40) = v22;

        [*(id *)(*(void *)(a1 + 32) + 120) setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKeyedSubscript:kSFOperationErrorKey];
        if ([*(id *)(a1 + 32) oneHundredContinue:*(void *)(a1 + 48)])
        {
          buf[0] = 0;
          CFDataRef v25 = CFDataCreate(0, buf, 1);
          if ([*(id *)(*(void *)(a1 + 32) + 80) enableBugs]) {
            CFDataRef v26 = 0;
          }
          else {
            CFDataRef v26 = v25;
          }
          [*(id *)(a1 + 32) enqueueResponse:*(void *)(a1 + 48) code:417 body:v26];
          CFRelease(v25);
          goto LABEL_31;
        }
        os_log_type_t v17 = *(void **)(a1 + 32);
        uint64_t v18 = 507;
      }
      [v17 sendUploadResponse:v18];
LABEL_31:

      return;
    }
  }
  id v19 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 208));

  if (v19)
  {
    unint64_t v20 = airdrop_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_1001CF924();
    }

    [*(id *)(a1 + 32) enqueueResponse:*(void *)(a1 + 48) code:400 body:0];
  }
}

id sub_1001CD590(void *a1)
{
  [*(id *)(a1[4] + 120) setObject:a1[5] forKeyedSubscript:kSFOperationBytesCopiedKey];
  [*(id *)(a1[4] + 120) setObject:a1[6] forKeyedSubscript:kSFOperationTimeRemainingKey];
  CFStringRef v2 = (void *)a1[4];

  return [v2 notifyClientForEvent:7];
}

void sub_1001CD68C(uint64_t a1)
{
  uint64_t v2 = kSFOperationTotalBytesKey;
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationTotalBytesKey];
  uint64_t v4 = (uint64_t)[v3 longLongValue];

  if (!v4)
  {
    uint64_t v4 = 128;
    id v5 = +[NSNumber numberWithLongLong:128];
    [*(id *)(*(void *)(a1 + 32) + 120) setObject:v5 forKeyedSubscript:v2];
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(NSObject **)(v6 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001CD8FC;
  block[3] = &unk_1008CA4B8;
  void block[4] = v6;
  dispatch_async(v7, block);
  BOOL v8 = *(void **)(a1 + 32);
  BOOL v9 = +[NSNumber numberWithLongLong:v4 / 5];
  [v8 notifyClientOfBytesCopied:v9 timeRemaining:&off_100902D78];

  CFStringRef v10 = *(void **)(a1 + 32);
  os_log_type_t v11 = +[NSNumber numberWithLongLong:2 * v4 / 5];
  [v10 notifyClientOfBytesCopied:v11 timeRemaining:&off_100902D78];

  char v12 = *(void **)(a1 + 32);
  uint64_t v13 = +[NSNumber numberWithLongLong:3 * v4 / 5];
  [v12 notifyClientOfBytesCopied:v13 timeRemaining:&off_100902D78];

  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = +[NSNumber numberWithLongLong:4 * v4 / 5];
  [v14 notifyClientOfBytesCopied:v15 timeRemaining:&off_100902D90];

  unsigned __int8 v16 = *(void **)(a1 + 32);
  os_log_type_t v17 = +[NSNumber numberWithLongLong:v4];
  [v16 notifyClientOfBytesCopied:v17 timeRemaining:&off_100902D90];

  uint64_t v18 = *(void *)(a1 + 32);
  id v19 = *(NSObject **)(v18 + 56);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001CD908;
  void v20[3] = &unk_1008CA4B8;
  void v20[4] = v18;
  dispatch_async(v19, v20);
}

id sub_1001CD8FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:5];
}

id sub_1001CD908(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:9];
}

id sub_1001CE400(void *a1, uint64_t a2)
{
  return _[a1 didReceiveError:a2];
}

id sub_1001CE408(void *a1, uint64_t a2)
{
  return _[a1 didReceiveRequest:a2];
}

id sub_1001CE410(void *a1, uint64_t a2, uint64_t a3)
{
  return _[a1 didSendResponse:a3 forRequest:a2];
}

void sub_1001CE494(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32))
  {
    *(unsigned char *)(v2 + 11) = 1;
    [*(id *)(a1 + 32) sendAskResponse:200];
    uint64_t v3 = *(void **)(a1 + 32);
    [v3 notifyClientForEvent:6];
  }
  else
  {
    id v4 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:1 userInfo:0];
    [*(id *)(*(void *)(a1 + 32) + 120) setObject:v4 forKeyedSubscript:kSFOperationErrorKey];
    [*(id *)(a1 + 32) sendAskResponse:500];
  }
}

void sub_1001CE8CC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection %@", v2, v3, v4, v5, v6);
}

void sub_1001CE934()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveError suppressed", v2, v3, v4, v5, v6);
}

void sub_1001CE968()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveError %@", v2, v3, v4, v5, v6);
}

void sub_1001CE9D0()
{
  sub_10007155C();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: invalid value for %@: %@");
}

void sub_1001CEA38(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint8_t v6 = NSStringFromClass(v5);
  int v7 = 138412546;
  BOOL v8 = v6;
  __int16 v9 = 2112;
  uint64_t v10 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "SDAirDropConnection: unexpected class %@ for file info key %@", (uint8_t *)&v7, 0x16u);
}

void sub_1001CEAEC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: Files array has invalid items", v2, v3, v4, v5, v6);
}

void sub_1001CEB20()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: unhandled key %@ for storeArrayValue", v2, v3, v4, v5, v6);
}

void sub_1001CEB88()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeArrayValue value for key %@ is invalid", v2, v3, v4, v5, v6);
}

void sub_1001CEBF0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: _CFHTTPServerRequestCopyProperty returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001CEC24()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFURLCreateStringByReplacingPercentEscapes returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001CEC58()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeRequestValue value is not a string", v2, v3, v4, v5, v6);
}

void sub_1001CEC8C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeDataValue value for key %@ is invalid", v2, v3, v4, v5, v6);
}

void sub_1001CECF4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeStringValue value for key %@ is invalid", v2, v3, v4, v5, v6);
}

void sub_1001CED5C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeNumberValue value for key %@ is invalid", v2, v3, v4, v5, v6);
}

void sub_1001CEDC4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeBooleanValue value for key %@ is invalid", v2, v3, v4, v5, v6);
}

void sub_1001CEE2C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: createCGImageWithJPEG2000Data returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001CEE60()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: storeIconValue fileIconData is invalid", v2, v3, v4, v5, v6);
}

void sub_1001CEE94()
{
  sub_1001B4B28(__stack_chk_guard);
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFPropertyListCreateData failed %@", v2, v3, v4, v5, v6);
}

void sub_1001CEEFC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,createPersonForAskRequest: computerName is invalid", v2, v3, v4, v5, v6);
}

void sub_1001CEF30()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: createPersonForAskRequest senderIcon is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CEF64()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: _SDHashStringFromData returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001CEF98()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: icon hashes don't match", v2, v3, v4, v5, v6);
}

void sub_1001CEFCC()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,createPersonForAskRequest: validAirDropID(%@) returned NO", v2, v3, v4, v5, v6);
}

void sub_1001CF034(void *a1, void *a2, NSObject *a3)
{
  id v5 = [a1 count];
  uint8_t v6 = [a2 identifier];
  int v7 = 134218755;
  id v8 = v5;
  __int16 v9 = 2160;
  uint64_t v10 = 1752392040;
  __int16 v11 = 2113;
  char v12 = v6;
  __int16 v13 = 2113;
  uint64_t v14 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Sender is blocked. [number of contacts:%lu] [contact Identifier: %{private, mask.hash}@] [contact:%{private}@]", (uint8_t *)&v7, 0x2Au);
}

void sub_1001CF10C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: no certificate chain for %@", v2, v3, v4, v5, v6);
}

void sub_1001CF174()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,senderIsTrusted: userIdentity is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CF1A8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: SDAppleIDAuthenticateCertificateChainSync failed %@", v2, v3, v4, v5, v6);
}

void sub_1001CF210()
{
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: copyCertificateChainFromTrust returned %s array", v2, v3, v4, v5, v6);
}

void sub_1001CF290()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: myAccountIdentifier is an empty string", v2, v3, v4, v5, v6);
}

void sub_1001CF2C4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001CF334(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "SDAirDropConnection: client cert chain not trusted. SFAppleIDVerifyCertificateChainSync failed with err=%d", a5, a6, a7, a8, 0);
}

void sub_1001CF3A4()
{
  sub_1001B4B28(__stack_chk_guard);
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFPropertyListCreateWithData failed %@", v2, v3, v4, v5, v6);
}

void sub_1001CF40C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFPropertyListCreateWithData returned invalid dictionary", v2, v3, v4, v5, v6);
}

void sub_1001CF440()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,allowAskRequestFromPerson: person is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CF474()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,allowAskRequestFromPerson: appleID is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CF4A8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,handleAskRequest: senderID is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CF4DC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection,handleAskRequest: no files or items", v2, v3, v4, v5, v6);
}

void sub_1001CF510()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "AirDrop failed to validate Apple ID certificate of sender", v2, v3, v4, v5, v6);
}

void sub_1001CF544(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001CF5B0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFReadStreamRead returned %ld", v2, v3, v4, v5, v6);
}

void sub_1001CF618()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: _CFHTTPServerRequestCopyBodyStream returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001CF64C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: CFReadStreamOpen failed", v2, v3, v4, v5, v6);
}

void sub_1001CF680()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: startReceivingFile destination is nil", v2, v3, v4, v5, v6);
}

void sub_1001CF6B4()
{
  sub_1001B4B28(__stack_chk_guard);
  sub_100071594();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: thereIsEnoughFreeSpace failed %@", v2, v3, v4, v5, v6);
}

void sub_1001CF71C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "makeDestinationDirectory: createDirectoryAtURL failed %@", v2, v3, v4, v5, v6);
}

void sub_1001CF784()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Ask already in progress", v2, v3, v4, v5, v6);
}

void sub_1001CF7B8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Bad Upload request", v2, v3, v4, v5, v6);
}

void sub_1001CF7EC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Upload already in progress", v2, v3, v4, v5, v6);
}

void sub_1001CF820()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Discover already in progress", v2, v3, v4, v5, v6);
}

void sub_1001CF854()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest method is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CF888()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest unknown method", v2, v3, v4, v5, v6);
}

void sub_1001CF8BC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest operation is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CF8F0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest unknown operation", v2, v3, v4, v5, v6);
}

void sub_1001CF924()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didReceiveRequest askRequest NULL userAccepted false", v2, v3, v4, v5, v6);
}

void sub_1001CF958()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: kSFOperationErrorNotEnoughSpace", v2, v3, v4, v5, v6);
}

void sub_1001CF98C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didSendResponse method is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CF9C0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didSendResponse method is unknown", v2, v3, v4, v5, v6);
}

void sub_1001CF9F4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didSendResponse operation is NULL", v2, v3, v4, v5, v6);
}

void sub_1001CFA28()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDAirDropConnection: didSendResponse operation is unknown", v2, v3, v4, v5, v6);
}

void sub_1001CFA5C()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Connection from %@ closed but transfer is finished", v1, 0xCu);
}

uint64_t SDAutoUnlockStartAdvertisingReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001D03CC(id a1)
{
  uint64_t v1 = +[SDStatusMonitor sharedMonitor];
  unsigned int v2 = [v1 enableContinuity];

  if (v2)
  {
    uint64_t v3 = objc_alloc_init(SDActivityScanner);
    char v4 = (void *)qword_100980318;
    qword_100980318 = (uint64_t)v3;
  }
}

void sub_1001D0BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  objc_sync_exit(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D0C60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001D0C70(uint64_t a1)
{
}

void sub_1001D0C78(uint64_t a1)
{
  [*(id *)(a1 + 32) lostAllDevices];
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

void sub_1001D1004(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 clientAdvertisement];
  [v3 receivedAdvertisement:v4];
}

id sub_1001D1068(uint64_t a1, void *a2)
{
  return _[a2 pairedDevicesChanged:*(void *)(a1 + 32)];
}

void sub_1001D1488(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (([*(id *)(a1 + 32) deviceTracked] & 1) == 0)
    {
      [*(id *)(a1 + 32) setDeviceTracked:1];
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1001D170C;
      void v19[3] = &unk_1008CFFB0;
      unint64_t v7 = *(void **)(a1 + 40);
      id v20 = *(id *)(a1 + 32);
      [v7 _enumerateRemoteObjectProxiesUsingBlock:v19];
    }
    char v8 = [v5 options];
    BOOL v9 = off_100969170();
    int v10 = [v8 objectForKeyedSubscript:v9];
    unsigned int v11 = [v10 BOOLValue];

    if (v11 && ![*(id *)(a1 + 48) isDefaultPairedDevice])
    {
      char v16 = handoff_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        sub_1001D35A4();
      }
    }
    else
    {
      char v12 = handoff_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v22 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received a new advertisement %@", buf, 0xCu);
      }

      unsigned int v13 = *(void **)(a1 + 40);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_1001D1780;
      v17[3] = &unk_1008CFFB0;
      uint64_t v14 = v5;
      uint64_t v18 = v14;
      [v13 _enumerateRemoteObjectProxiesUsingBlock:v17];
      uint64_t v15 = *(void *)(a1 + 72);
      if (v15) {
        (*(void (**)(uint64_t, NSObject *))(v15 + 16))(v15, v14);
      }
      char v16 = v18;
    }
  }
  else
  {
    char v16 = handoff_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_1001D34E0(a1, (uint64_t)v6, v16);
    }
  }
}

void sub_1001D170C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v5 = [v2 idsDevice];
  id v4 = sub_1000C9CC4(v5);
  [v3 foundDeviceWithDevice:v4];
}

id sub_1001D1780(uint64_t a1, void *a2)
{
  return [a2 receivedAdvertisement:*(void *)(a1 + 32)];
}

void sub_1001D1ADC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 clientAdvertisement];
  [v3 receivedAdvertisement:v4];
}

id sub_1001D1C44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) dumpState];
}

void sub_1001D26E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1001D27E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1001D28C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1001D2A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1001D2CF4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v5 = [v2 idsDevice];
  id v4 = sub_1000C9CC4(v5);
  [v3 lostDeviceWithDevice:v4];
}

id sub_1001D3060(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 104) = *(void *)(a1 + 40);
  return [*(id *)(a1 + 32) restart];
}

void sub_1001D3188(void *a1)
{
  kdebug_trace();
  uint64_t v2 = handoff_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    id v4 = SFHexStringForData();
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    BOOL v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Requesting payload from %@ for %@", (uint8_t *)&v6, 0x16u);
  }
  id v5 = +[SDActivityPayloadManager sharedPayloadManager];
  [v5 sendActivityPayloadRequestToDeviceIdentifier:a1[4] withAdvertisementPayload:a1[5] command:a1[6] timeout:a1[8] completionHandler:a1[7]];
}

id sub_1001D333C()
{
  if (qword_100980330 != -1) {
    dispatch_once(&qword_100980330, &stru_1008D0040);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_100980338, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100980328, *v0);
  }
  off_100969170 = (uint64_t (*)())sub_1001D33CC;
  uint64_t v1 = (void *)qword_100980328;

  return v1;
}

id sub_1001D33CC()
{
  return (id)qword_100980328;
}

void sub_1001D33D8(id a1)
{
  qword_100980338 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

void sub_1001D3404(void *a1, NSObject *a2)
{
  uint64_t v3 = a1;
  id v4 = [a1 count];
  if (v4)
  {
    uint64_t v3 = [v3 valueForKeyPath:@"@unionOfObjects.uniqueIDOverride"];
    SFCompactStringFromCollection();
    id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = @"[]";
  }
  int v6 = 138412290;
  uint64_t v7 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "nearbyServiceDevicesChanged: %@", (uint8_t *)&v6, 0xCu);
  if (v4)
  {
  }
}

void sub_1001D34E0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v6 = SFHexStringForData();
  uint64_t v7 = *(void *)(a1 + 64);
  int v8 = 138412802;
  BOOL v9 = v6;
  __int16 v10 = 2112;
  uint64_t v11 = v7;
  __int16 v12 = 2112;
  uint64_t v13 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failed to update with raw advertisementData %@ from %@ (%@)", (uint8_t *)&v8, 0x20u);
}

void sub_1001D35A4()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Ignoring new advertisement as it is for default pair only which is not me", v2, v3, v4, v5, v6);
}

void sub_1001D35D8()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Scanning client arrived", v2, v3, v4, v5, v6);
}

void sub_1001D360C()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Scanning client went away", v2, v3, v4, v5, v6);
}

void sub_1001D3640(unint64_t a1, NSObject *a2)
{
  if (a1 > 3) {
    uint64_t v2 = "UnexpectedType";
  }
  else {
    uint64_t v2 = off_1008CFFF8[a1];
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "IDSContinuity didStartScanningForType: %s", (uint8_t *)&v3, 0xCu);
}

void sub_1001D36D8(unint64_t a1, NSObject *a2)
{
  if (a1 > 3) {
    uint64_t v2 = "UnexpectedType";
  }
  else {
    uint64_t v2 = off_1008CFFF8[a1];
  }
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "IDSContinuity didStopScanningForType: %s", (uint8_t *)&v3, 0xCu);
}

void sub_1001D3770(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136315394;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "IDSContinuity didFailToStartScanningForType: %s withError: (%@)", buf, 0x16u);
}

void sub_1001D37D8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Saw device %@ but cannot find mathing IDSDevice", (uint8_t *)&v2, 0xCu);
}

void sub_1001D3850()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "lostAllDevices", v2, v3, v4, v5, v6);
}

void sub_1001D38E4(id a1)
{
  uint64_t v1 = objc_alloc_init(SDConnectedBrowser);
  uint64_t v2 = (void *)qword_100980348;
  qword_100980348 = (uint64_t)v1;
}

void sub_1001D46D0(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"com.apple.sharingd.ConnectedChanged" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_1001D4818(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"com.apple.sharingd.ConnectedChanged" object:0 userInfo:0];
}

void sub_1001D4918(uint64_t a1)
{
  [*(id *)(a1 + 32) removeAirDropPersonInternal:*(void *)(a1 + 40)];
  id v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

id sub_1001D4A50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) buildNodesAndNotify:1];
}

void sub_1001D4B3C(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDConnectedBrowser: _CFURLGetVolumePropertyFlags returned %@", (uint8_t *)&v3, 0xCu);
}

void sub_1001D4BB8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SDConnectedBrowser: getResourceValue %@", (uint8_t *)&v2, 0xCu);
}

uint64_t SDAutoUnlockDeviceRegistrationRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001D5FEC(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Attempting to intialize _NIRangingPeer with nil macAddress", v1, 2u);
}

uint64_t SDAuthenticationPreRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t v18 = PBReaderReadString();
      id v19 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v18;
    }
    else
    {
      if (v12 == 2)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
          v15 |= (unint64_t)(v23 & 0x7F) << v20;
          if ((v23 & 0x80) == 0) {
            goto LABEL_42;
          }
          v20 += 7;
          BOOL v9 = v21++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v25 = 16;
      }
      else
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v25 = 20;
      }
      *(_DWORD *)(a1 + v25) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001D6B78(id a1)
{
  id v1 = +[UIScreen mainScreen];
  int v2 = [v1 traitCollection];
  v11[0] = v2;
  uint64_t v3 = +[UIDevice currentDevice];
  char v4 = +[UITraitCollection traitCollectionWithUserInterfaceIdiom:](UITraitCollection, "traitCollectionWithUserInterfaceIdiom:", [v3 userInterfaceIdiom]);
  v11[1] = v4;
  unsigned int v5 = +[NSArray arrayWithObjects:v11 count:2];
  unint64_t v6 = +[UITraitCollection traitCollectionWithTraitsFromCollections:v5];

  unint64_t v7 = sub_100233570();
  char v8 = +[UIImage imageNamed:@"UIActivityUserDefaults" inBundle:v7 compatibleWithTraitCollection:v6];
  uint64_t v9 = +[UIActivity _activityImageForActionRepresentationImage:v8];
  int v10 = (void *)qword_100980350;
  qword_100980350 = v9;
}

void sub_1001D73A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 10))
  {
    *(unsigned char *)(v1 + 10) = 1;
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v3 + 9))
    {
      [(id)v3 setSessionKeepAliveTransactionIdentifier:0];
      uint64_t v3 = *(void *)(a1 + 32);
    }
    [*(id *)(v3 + 24) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0;

    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = *(void **)(v6 + 80);
    *(void *)(v6 + 80) = 0;

    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 88);
    *(void *)(v8 + 8_Block_object_dispose(&STACK[0x300], 8) = 0;
  }
}

void sub_1001D7444(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      unsigned int v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        unsigned int v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_1001D7658(id a1)
{
  id v1 = daemon_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_1001DCE34();
  }
}

void sub_1001D7AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D7B10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001D7B20(uint64_t a1)
{
}

void sub_1001D7B28(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DCE74();
  }
}

void sub_1001D7B7C(uint64_t a1, void *a2, char a3)
{
  id v7 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  long long v6 = *(unsigned char **)(a1 + 40);
  if (v6) {
    *long long v6 = a3;
  }
}

void sub_1001D8240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001D829C(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DCF40();
  }
}

void sub_1001D82F0(uint64_t a1, void *a2, char a3)
{
  id v7 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  long long v6 = *(unsigned char **)(a1 + 40);
  if (v6) {
    *long long v6 = a3;
  }
}

id sub_1001D86A8(uint64_t a1, void *a2)
{
  id v3 = [a2 contactIDs];
  uint64_t v4 = [v3 componentsJoinedByString:@","];
  unsigned int v5 = [*(id *)(a1 + 32) stringByAppendingFormat:@"%@,%li,%f,%i,%li", v4, *(void *)(a1 + 40), floor(*(double *)(a1 + 48)), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 56)];

  return v5;
}

SharingXPCHelperImageItem *__cdecl sub_1001D874C(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  uint64_t v4 = a2;
  unsigned int v5 = [SharingXPCHelperGroupContactIcon alloc];
  long long v6 = [(SharingXPCHelperImageItem *)v4 contacts];
  id v7 = [(SharingXPCHelperImageItem *)v4 iconIndex];
  long long v8 = [(SharingXPCHelperImageItem *)v4 cacheLookupKey];

  long long v9 = [(SharingXPCHelperGroupContactIcon *)v5 initWithContacts:v6 icon:a3 atIndex:v7 cacheLookupKey:v8];

  return (SharingXPCHelperImageItem *)v9;
}

id sub_1001D8800(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000;
  char v27 = sub_1001D7B10;
  char v28 = sub_1001D7B20;
  id v29 = 0;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 24) synchronousRemoteObjectProxyWithErrorHandler:&stru_1008D01B8];
  uint64_t v5 = *(void *)(a1 + 40);
  double v6 = *(double *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1001D8A58;
  v23[3] = &unk_1008D01E0;
  v23[4] = &v24;
  [v4 groupMonogramImageDataForContactsSync:v3 style:v5 diameter:v7 backgroundStyle:v8 monogramsAsFlatImages:v23 replyHandler:v6];

  if (*(unsigned char *)(a1 + 65))
  {
    id v9 = *(id *)(a1 + 32);
    int v10 = [*(id *)(a1 + 32) queuedBlocks];
    unsigned int v14 = _NSConcreteStackBlock;
    uint64_t v15 = 3221225472;
    unint64_t v16 = sub_1001D8A68;
    char v17 = &unk_1008D0208;
    id v18 = v3;
    id v19 = v9;
    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 48);
    char v22 = *(unsigned char *)(a1 + 64);
    uint64_t v11 = objc_retainBlock(&v14);
    [v10 addObject:v11, v14, v15, v16, v17];
  }
  id v12 = (id)v25[5];
  _Block_object_dispose(&v24, 8);

  return v12;
}

void sub_1001D89E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001D8A04(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD01C();
  }
}

void sub_1001D8A58(uint64_t a1, void *a2)
{
}

id sub_1001D8A68(uint64_t a1)
{
  id v2 = sharingXPCHelperLog();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cache miss for %@ -> creating cache for opposite color too", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) groupMonogramImageDataForContacts:*(void *)(a1 + 32) style:*(void *)(a1 + 48) diameter:*(unsigned __int8 *)(a1 + 64) monogramsAsFlatImages:0 processOppositeBackgroundStyle:*(double *)(a1 + 56)];
}

void sub_1001D8D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001D8D58(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD090();
  }
}

void sub_1001D8DAC(uint64_t a1, void *a2)
{
}

id sub_1001D9034(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 contactIDs:*(void *)(a1 + 32)];
  v10[1] = v3;
  uint64_t v4 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
  void v10[2] = v4;
  int v5 = +[NSNumber numberWithDouble:floor(*(double *)(a1 + 48))];
  v10[3] = v5;
  uint64_t v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
  void v10[4] = v6;
  uint64_t v7 = +[NSArray arrayWithObjects:v10 count:5];

  uint64_t v8 = [v7 componentsJoinedByString:@","];

  return v8;
}

SharingXPCHelperImageItem *__cdecl sub_1001D9160(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  uint64_t v4 = a2;
  int v5 = [SharingXPCHelperContactIcon alloc];
  uint64_t v6 = [(SharingXPCHelperImageItem *)v4 contact];
  id v7 = [(SharingXPCHelperImageItem *)v4 iconIndex];
  uint64_t v8 = [(SharingXPCHelperImageItem *)v4 cacheLookupKey];

  id v9 = [(SharingXPCHelperContactIcon *)v5 initWithContact:v6 icon:a3 atIndex:v7 cacheLookupKey:v8];

  return (SharingXPCHelperImageItem *)v9;
}

id sub_1001D9214(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v21 = 0;
  char v22 = &v21;
  uint64_t v23 = 0x3032000000;
  uint64_t v24 = sub_1001D7B10;
  uint64_t v25 = sub_1001D7B20;
  id v26 = 0;
  id v26 = +[NSMutableArray array];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = v3;
  id v4 = [obj countByEnumeratingWithState:&v17 objects:v28 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v18;
    do
    {
      for (CFIndex i = 0; i != v4; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 24) synchronousRemoteObjectProxyWithErrorHandler:&stru_1008D02E0];
        uint64_t v27 = v7;
        id v9 = +[NSArray arrayWithObjects:&v27 count:1];
        uint64_t v10 = *(void *)(a1 + 40);
        double v11 = *(double *)(a1 + 48);
        uint64_t v12 = *(unsigned __int8 *)(a1 + 56);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_1001D94E4;
        v16[3] = &unk_1008D0308;
        v16[4] = &v21;
        [v8 monogramImagesForMultipleContactsSync:v9 style:v10 diameter:v12 monogramAsFlatImages:v16 replyHandler:v11];
      }
      id v4 = [obj countByEnumeratingWithState:&v17 objects:v28 count:16];
    }
    while (v4);
  }

  id v13 = (id)v22[5];
  _Block_object_dispose(&v21, 8);

  return v13;
}

void sub_1001D9468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001D9490(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD104();
  }
}

void sub_1001D94E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v4 = sharingXPCHelperLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001DD178();
    }
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObjectsFromArray:v3];
}

void sub_1001D9CA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[SharingXPCHelperImageItem alloc] initWithImageTitle:v3];

  [*(id *)(a1 + 32) addObject:v4];
}

id sub_1001D9D20(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 56);
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (v3) {
    [v4 keyDerivedFromRelevantTraitCollectionProperties];
  }
  else {
  uint64_t v6 = [v4 keyDerivedFromRelevantTraitCollectionPropertiesWithOppositeUserInterfaceStyle];
  }
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = [v5 imageTitle];

  id v9 = +[SDXPCHelperConnection identifierForColor:*(void *)(a1 + 48)];
  uint64_t v10 = [v7 stringByAppendingFormat:@",%@,%@,%@,", v8, v9, v6];

  return v10;
}

SharingXPCHelperImageItem *__cdecl sub_1001D9DF8(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  id v4 = a2;
  id v5 = [SharingXPCHelperImageItem alloc];
  uint64_t v6 = [(SharingXPCHelperImageItem *)v4 imageTitle];
  uint64_t v7 = [(SharingXPCHelperImageItem *)v4 cacheLookupKey];

  uint64_t v8 = [(SharingXPCHelperImageItem *)v5 initWithImageTitle:v6 image:a3 cacheLookupKey:v7];

  return v8;
}

id sub_1001D9E9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v19 = 0;
  long long v20 = &v19;
  uint64_t v21 = 0x3032000000;
  char v22 = sub_1001D7B10;
  uint64_t v23 = sub_1001D7B20;
  id v24 = 0;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 24) synchronousRemoteObjectProxyWithErrorHandler:&stru_1008D0398];
  uint64_t v5 = *(void *)(a1 + 40);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001DA0E8;
  v18[3] = &unk_1008D0308;
  void v18[4] = &v19;
  [v4 CGImgDataForUIActivityTitles:v3 foregroundColor:v5 replyHandler:v18];

  if (*(unsigned char *)(a1 + 48))
  {
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = [*(id *)(a1 + 32) queuedBlocks];
    double v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_1001DA0F8;
    unsigned int v14 = &unk_1008CAF18;
    id v15 = v6;
    id v16 = *(id *)(a1 + 40);
    id v17 = v3;
    uint64_t v8 = objc_retainBlock(&v11);
    [v7 addObject:v8, v11, v12, v13, v14, v15];
  }
  id v9 = (id)v20[5];
  _Block_object_dispose(&v19, 8);

  return v9;
}

void sub_1001DA078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DA094(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD23C();
  }
}

void sub_1001DA0E8(uint64_t a1, void *a2)
{
}

void sub_1001DA0F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) getOppositeColor:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableArray);
    id v4 = *(void **)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1001DA254;
    v8[3] = &unk_1008D03C0;
    id v5 = v3;
    id v9 = v5;
    [v4 enumerateObjectsUsingBlock:v8];
    id v6 = sharingXPCHelperLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cache miss for %@ -> creating cache for opposite color too", buf, 0xCu);
    }

    id v7 = [*(id *)(a1 + 32) CGImgForUIActivityTitles:v5 foregroundColor:v2 processOppositeColor:0];
  }
}

void sub_1001DA254(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 imageTitle];
  [v2 addObject:v3];
}

void sub_1001DA2AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 image])
  {
    id v7 = (id)CFRetain([v3 image]);
  }
  else
  {
    id v4 = [v3 imageData];
    id v7 = (id)SFCreateCGImageFromData();
  }
  id v5 = *(void **)(a1 + 32);
  id v6 = [v3 imageTitle];

  [v5 setObject:v7 forKeyedSubscript:v6];
}

void sub_1001DA718(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) MD5HashOfStrings:*(void *)(a1 + 40)];
  int64_t v2 = +[SDXPCHelperImageCache cacheCount];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 64));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v3 + 4_Block_object_dispose(&STACK[0x300], 8) = 0;
  id v5 = [*(id *)(*(void *)(a1 + 32) + 56) mutableCopy];
  [*(id *)(*(void *)(a1 + 32) + 56) removeAllObjects];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 64));
  if (*(void *)(a1 + 48)) {
    [v5 addEntriesFromDictionary:];
  }
  id v6 = objc_alloc_init((Class)SFShareSheetInvokedEvent);
  [v6 setAppBundleId:*(void *)(a1 + 56)];
  [v6 setNumberOfSuggestions:*(void *)(a1 + 64)];
  [v6 setSuggestionsHash:v7];
  [v6 setDaemonPID:getpid()];
  [v6 setDurationInMS:*(void *)(a1 + 72)];
  [v6 setIsDarkMode:*(unsigned __int8 *)(a1 + 80)];
  [v6 setCacheFileCount:v2];
  [v6 setTotalCacheAccessCount:v4];
  [v6 setIsCollaborative:*(unsigned __int8 *)(a1 + 81)];
  [v6 setCacheAccessInfo:v5];
  [v6 submitEvent];
}

void sub_1001DAD28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1001DAD50(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD2E4();
  }
}

void sub_1001DADA4(uint64_t a1, void *a2)
{
}

void sub_1001DADB4(uint64_t a1)
{
  int64_t v2 = [*(id *)(a1 + 32) getOppositeColor:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = sharingXPCHelperLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Cache miss for text %@ -> creating cache for opposite color too", (uint8_t *)&v5, 0xCu);
    }

    [*(id *)(a1 + 32) CGImgForNameLabelWithString:*(void *)(a1 + 48) textColor:v2 maxNumberOfLines:*(void *)(a1 + 56) isAirDrop:*(unsigned __int8 *)(a1 + 64) ignoreNameWrapping:*(unsigned __int8 *)(a1 + 65) processOppositeColor:0];
  }
}

void sub_1001DB23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1001DB25C(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD358();
  }
}

void sub_1001DB2B0(uint64_t a1, void *a2)
{
}

void sub_1001DB2C0(uint64_t a1)
{
  int64_t v2 = [*(id *)(a1 + 32) getOppositeColor:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = sharingXPCHelperLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Cache miss for label %@ -> creating cache for opposite color too", (uint8_t *)&v6, 0xCu);
    }

    id v5 = [*(id *)(a1 + 32) CGImgDataForActivityMoreListEntryForActivityTitle:*(void *)(a1 + 48) labelColor:v2 processOppositeColor:0 activityCategory:*(void *)(a1 + 56)];
  }
}

void sub_1001DB668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DB684(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD3CC();
  }
}

void sub_1001DB6D8(uint64_t a1, void *a2)
{
}

void sub_1001DB968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DB984(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD440();
  }
}

void sub_1001DB9D8(uint64_t a1, void *a2)
{
}

void sub_1001DC1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DC1F0(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD4B4();
  }
}

void sub_1001DC244(uint64_t a1, void *a2)
{
}

void sub_1001DC3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DC3D0(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD528();
  }
}

void sub_1001DC424(uint64_t a1, void *a2)
{
}

void sub_1001DC570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DC588(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD59C();
  }
}

void sub_1001DC5DC(uint64_t a1, void *a2)
{
}

void sub_1001DC738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DC750(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD610();
  }
}

void sub_1001DC7A4(uint64_t a1, void *a2)
{
}

void sub_1001DC8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001DC8E8(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD684();
  }
}

void sub_1001DC93C(uint64_t a1, void *a2)
{
}

void sub_1001DCAA8(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD72C();
  }
}

void sub_1001DCB94(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001DD7A0();
  }
}

Class sub_1001DCCBC()
{
  if (qword_100980368 != -1) {
    dispatch_once(&qword_100980368, &stru_1008D0608);
  }
  Class result = objc_getClass("INImageServiceConnection");
  qword_100980360 = (uint64_t)result;
  off_100969298 = (uint64_t (*)())sub_1001DCD20;
  return result;
}

id sub_1001DCD20()
{
  return (id)qword_100980360;
}

void sub_1001DCD2C(id a1)
{
  qword_100980370 = (uint64_t)dlopen("/System/Library/Frameworks/Intents.framework/Intents", 2);
}

double sub_1001DCD58()
{
  if (qword_100980368 != -1) {
    dispatch_once(&qword_100980368, &stru_1008D0608);
  }
  os_log_t v0 = (long long *)dlsym((void *)qword_100980370, "INImageDefaultScaledSize");
  if (v0) {
    xmmword_100980378 = *v0;
  }
  off_1009692A0 = (uint64_t (*)())sub_1001DCDD4;
  return *(double *)&xmmword_100980378;
}

double sub_1001DCDD4()
{
  return *(double *)&xmmword_100980378;
}

void sub_1001DCDE4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1001DCE00()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection deallocated without -invalidate call", v2, v3, v4, v5, v6);
}

void sub_1001DCE34()
{
  sub_10001587C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "SDXPCHelperConnection makeActivatedConnection invalidationHandler", v1, 2u);
}

void sub_1001DCE74()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DCEE8(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "copyConversationIdentityImageIconDataForImage: image does not exist at url (%@)", buf, 0xCu);
}

void sub_1001DCF40()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DCFB4()
{
  sub_10002972C();
  sub_100173CF8((void *)&_mh_execute_header, v0, v1, "Share sheet host app config not set on %@ as expected.", v2, v3, v4, v5, v6);
}

void sub_1001DD01C()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD090()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD104()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD178()
{
  sub_10001587C();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "monogramImagesForMultipleContactsSync failed to return images", v1, 2u);
}

void sub_1001DD1B8()
{
  sub_10002972C();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to fetch icon data from INImage %@ with error %@", v2, 0x16u);
}

void sub_1001DD23C()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD2B0()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "CGImgForNameLabelWithString called with nil string.", v2, v3, v4, v5, v6);
}

void sub_1001DD2E4()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD358()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD3CC()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD440()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD4B4()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD528()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD59C()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD610()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD684()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD6F8()
{
  sub_10001587C();
  sub_100173D14((void *)&_mh_execute_header, v0, v1, "_latestHostConfig = nil", v2, v3, v4, v5, v6);
}

void sub_1001DD72C()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

void sub_1001DD7A0()
{
  sub_1000CEF3C();
  sub_1001DCDE4((void *)&_mh_execute_header, v0, v1, "SDXPCHelperConnection %s remoteObjectProxyWithErrorHandler: %@", v2, v3, v4, v5, 2u);
}

Class sub_1001DDE5C()
{
  if (qword_100980390 != -1) {
    dispatch_once(&qword_100980390, &stru_1008D0628);
  }
  Class result = objc_getClass("LPLinkMetadata");
  qword_100980388 = (uint64_t)result;
  off_1009692A8 = (uint64_t (*)())sub_1001DDEC0;
  return result;
}

id sub_1001DDEC0()
{
  return (id)qword_100980388;
}

void sub_1001DDECC(id a1)
{
  qword_100980398 = (uint64_t)dlopen("/System/Library/Frameworks/LinkPresentation.framework/LinkPresentation", 2);
}

Class sub_1001DDEF8()
{
  if (qword_100980390 != -1) {
    dispatch_once(&qword_100980390, &stru_1008D0628);
  }
  Class result = objc_getClass("LPImage");
  qword_1009803A0 = (uint64_t)result;
  off_1009692B0 = (uint64_t (*)())sub_1001DDF5C;
  return result;
}

id sub_1001DDF5C()
{
  return (id)qword_1009803A0;
}

void sub_1001DE6E8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint8_t v6 = streams_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001E0490();
    }

    uint64_t v7 = *(void **)(a1 + 32);
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    CFStringRef v11 = @"Could not send request to other device";
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
    uint64_t v9 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:55 userInfo:v8];
    [v7 notifyStreamRequestWithError:v9];

    [*(id *)(a1 + 32) stop];
  }
}

void sub_1001DEA20(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) switchToStreaming];
  }
  else
  {
    uint8_t v6 = streams_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001E04F8();
    }

    [*(id *)(a1 + 32) stop];
  }
}

uint64_t sub_1001DEFEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    return (uint64_t)_[a3 stream:a1 handleEvent:a2];
  }
  return result;
}

id sub_1001DF530(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendInitialResponse:a2];
}

void sub_1001E0490()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error sending initial request = %@", v2, v3, v4, v5, v6);
}

void sub_1001E04F8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error sending initial response = %@", v2, v3, v4, v5, v6);
}

void sub_1001E0560()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Creating file handle failed", v2, v3, v4, v5, v6);
}

void sub_1001E0594()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error getting streams = %@", v2, v3, v4, v5, v6);
}

void sub_1001E05FC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to set buffer size on socket", v2, v3, v4, v5, v6);
}

void sub_1001E0630()
{
  uint64_t v0 = __error();
  strerror(*v0);
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v1, v2, "Could not create sock pair = %s", v3, v4, v5, v6, v7);
}

void sub_1001E06B0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Unarchiving stream handler failed: %@", v2, v3, v4, v5, v6);
}

void sub_1001E0718()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No type in stream handler message", v2, v3, v4, v5, v6);
}

void sub_1001E074C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No service in request", v2, v3, v4, v5, v6);
}

void sub_1001E0780()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create file handles", v2, v3, v4, v5, v6);
}

void sub_1001E07B4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Received NSStreamEventHasBytesAvailable on a stream other than an input stream", v2, v3, v4, v5, v6);
}

void sub_1001E07E8(void *a1)
{
  uint64_t v1 = [a1 streamError];
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v2, v3, "Client stream received CFErrorRef error = %@", v4, v5, v6, v7, v8);
}

void sub_1001E086C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error writing to client output stream, writeCFIndex Length = %ld", v2, v3, v4, v5, v6);
}

void sub_1001E08D4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Read zero bytes from the client stream", v2, v3, v4, v5, v6);
}

void sub_1001E0908()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No stream data to write to network", v2, v3, v4, v5, v6);
}

uint64_t SDUnlockLongTermKeyResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 24) = v14;
        continue;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_29;
      case 3u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
LABEL_29:
        long long v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        continue;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v23 |= (unint64_t)(v25 & 0x7F) << v21;
      if ((v25 & 0x80) == 0) {
        goto LABEL_42;
      }
      v21 += 7;
      BOOL v9 = v22++ >= 9;
      if (v9)
      {
        uint64_t v23 = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v23 = 0;
    }
LABEL_44:
    *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x300], 8) = v23 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1001E1D9C(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retry setup device timer fired", v4, 2u);
  }

  [*(id *)(a1 + 32) setSetupRetryDeviceTimer:0];
  return [*(id *)(a1 + 32) setSetupRetryDeviceID:0];
}

int64_t sub_1001E1FCC(id a1, SFAutoUnlockDevice *a2, SFAutoUnlockDevice *a3)
{
  char v4 = a2;
  unsigned int v5 = a3;
  id v6 = [(SFAutoUnlockDevice *)v4 type];
  if ((uint64_t)v6 >= (uint64_t)[(SFAutoUnlockDevice *)v5 type])
  {
    id v8 = [(SFAutoUnlockDevice *)v4 type];
    int64_t v7 = (uint64_t)v8 > (uint64_t)[(SFAutoUnlockDevice *)v5 type];
  }
  else
  {
    int64_t v7 = -1;
  }

  return v7;
}

id sub_1001E22D4(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Suggested device timer fired", v4, 2u);
  }

  [*(id *)(a1 + 32) setDeviceTimer:0];
  return [*(id *)(a1 + 32) setSuggestedDeviceID:0];
}

id sub_1001E2604(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Suggestion service timer fired", v4, 2u);
  }

  return [*(id *)(a1 + 32) invalidateSuggestionService];
}

void sub_1001E2BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001E2C0C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v4 = [v3 copy];

  [WeakRetained handleFoundPeer:v4];
}

void sub_1001E2C7C(id a1)
{
  uint64_t v1 = auto_unlock_log();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Scanner invalidated", v2, 2u);
  }
}

void sub_1001E2CE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = auto_unlock_log();
  unsigned int v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001E456C((uint64_t)v3, v5);
    }

    [*(id *)(a1 + 32) invalidateScanner];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Scanner started", v6, 2u);
    }
  }
}

id sub_1001E32BC(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Suggestion scan timer fired", v4, 2u);
  }

  [*(id *)(a1 + 32) postNotificationIfNeeded];
  return [*(id *)(a1 + 32) invalidateScanner];
}

void sub_1001E351C(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_1001E45E4(a1, v2);
  }
}

void sub_1001E3650(uint64_t a1)
{
  if (*(_WORD *)(a1 + 56) == 401 && *(void *)(a1 + 32))
  {
    uint64_t v2 = [[SDAutoUnlockStartAdvertising alloc] initWithData:*(void *)(a1 + 40)];
    id v3 = +[SDStatusMonitor sharedMonitor];
    unsigned int v4 = [v3 deviceRequiresNewRanging];

    unsigned int v5 = auto_unlock_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v6 = @"NO";
      if (v4) {
        CFStringRef v6 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      CFStringRef v13 = v6;
      __int16 v14 = 2112;
      unint64_t v15 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received SDAutoUnlockMessageTypeStartAdvertising (new ranging required: %@, message: %@)", buf, 0x16u);
    }

    if (v4 && [(SDAutoUnlockStartAdvertising *)v2 version] != 2)
    {
      int v10 = auto_unlock_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Skipping response advertisement because Mac OS version is too old", buf, 2u);
      }
    }
    else
    {
      int64_t v7 = +[SDAutoUnlockAKSManager sharedManager];
      unsigned int v8 = [v7 ltkExistsForKeyDevice:*(void *)(a1 + 32)];

      if (v8)
      {
        BOOL v9 = *(void **)(a1 + 48);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        void v11[2] = sub_1001E3868;
        void v11[3] = &unk_1008CA0C0;
        v11[4] = v9;
        [v9 watchAvailableForUnlockWithCompletionHandler:v11];
LABEL_15:

        return;
      }
      int v10 = +[SDAutoUnlockAKSManager sharedManager];
      [v10 updateLTKs];
    }

    goto LABEL_15;
  }
}

id *sub_1001E3868(id *result, int a2)
{
  if (a2) {
    return (id *)_[result[4] updateSuggestionService];
  }
  return result;
}

id sub_1001E42E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidateScanner];
}

id sub_1001E4360(uint64_t a1)
{
  return [*(id *)(a1 + 32) triggerDevicesIfNeeded];
}

void sub_1001E456C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Scanner error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1001E45E4(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error sending message to start advertising to %@", (uint8_t *)&v3, 0xCu);
}

void sub_1001E4B44(id a1)
{
  uint64_t v1 = objc_alloc_init(SDStatusMonitor);
  uint64_t v2 = (void *)qword_1009803B0;
  qword_1009803B0 = (uint64_t)v1;
}

void sub_1001E68CC(void *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    CFStringRef v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1001E6998;
    v9[3] = &unk_1008CA6A8;
    void v9[4] = a1[6];
    [v6 saveVerifiedAccount:v7 withCompletionHandler:v9];
  }
  else
  {
    unsigned int v8 = tethering_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001F4C60();
    }
  }
}

void sub_1001E6998(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = tethering_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1001F4CC8();
  }

  [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AltDSIDChanged"];
}

void sub_1001E8504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E852C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001E853C(uint64_t a1)
{
}

void sub_1001E8544(uint64_t a1, void *a2, unsigned char *a3)
{
  *a3 = 1;
}

id sub_1001E8AD8(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Reset meCard called with reason: %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(v4 + 696);
  *(void *)(v4 + 696) = 0;

  return [*(id *)(a1 + 40) meCard];
}

void sub_1001E92BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001E92FC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  CFStringRef v6 = [v5 objectForKeyedSubscript:@"FamilyHotspotIdentifier"];
  int v7 = [v5 objectForKeyedSubscript:@"FamilyHotspotDisplayName"];
  uint64_t v8 = [v5 objectForKeyedSubscript:@"FamilyHotspotSharingMode"];

  if ((uint64_t)[v8 integerValue] >= 3)
  {

    uint64_t v8 = &off_100902E20;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    BOOL v9 = *(void **)(a1 + 32);
    unint64_t v10 = (unint64_t)[v8 integerValue];
    if (v10 > 2) {
      CFStringRef v11 = "?";
    }
    else {
      CFStringRef v11 = off_1008D0BF8[v10];
    }
    uint64_t v16 = +[NSString stringWithFormat:@"'%@' -> %s", v7, v11];
    [v9 appendString:v16];

    if ((char *)[*(id *)(a1 + 40) count] - 1 != a3) {
      [*(id *)(a1 + 32) appendString:@", "];
    }
  }
  else
  {
    uint64_t v12 = [*(id *)(*(void *)(a1 + 48) + 416) objectForKeyedSubscript:v6];
    unint64_t v13 = (unint64_t)[v12 integerValue];

    if ((id)v13 != [v8 integerValue])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      uint64_t v14 = daemon_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        if (v13 > 2) {
          uint64_t v15 = "?";
        }
        else {
          uint64_t v15 = off_1008D0BF8[v13];
        }
        unint64_t v17 = (unint64_t)[v8 integerValue];
        if (v17 > 2) {
          uint64_t v18 = "?";
        }
        else {
          uint64_t v18 = off_1008D0BF8[v17];
        }
        *(_DWORD *)buf = 138412802;
        long long v20 = v7;
        __int16 v21 = 2080;
        unsigned int v22 = v15;
        __int16 v23 = 2080;
        unint64_t v24 = v18;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Family hotspot state updated: '%@' : %s -> %s", buf, 0x20u);
      }
    }
  }
  if (![v8 integerValue]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
  [*(id *)(*(void *)(a1 + 48) + 416) setObject:v8 forKeyedSubscript:v6];
}

id sub_1001E9968(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Added reason to prevent locale change exit (reason %@)", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(*(void *)(a1 + 40) + 520) addReason:*(void *)(a1 + 32)];
}

id sub_1001E9AF8(void *a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pushed expiration date of reason to prevent locale change exit (reason %@)", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1[5] + 520) pushPreventionDateForReason:a1[4] newDate:a1[6]];
}

id sub_1001E9C64(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Removed reason to prevent locale change exit (reason %@)", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(*(void *)(a1 + 40) + 520) removeReason:*(void *)(a1 + 32)];
}

void sub_1001EA430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001EA450(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained bluetoothDidSetPowerStateWithError:v3];
}

void sub_1001EA524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1001ECCE4(id a1)
{
  id v2 = [(objc_class *)off_100969558() sharedManager];
  if ([v2 isMultiUser])
  {
    uint64_t v1 = [v2 currentUser];
    byte_1009803B8 = [v1 userType] == (id)1;
  }
  else
  {
    byte_1009803B8 = 0;
  }
}

id sub_1001ED71C(uint64_t a1, void *a2)
{
  [a2 clearMyAppleIDInfo];
  [a2 updateDiscoverableMode];

  return [a2 postNotification:@"com.apple.sharingd.AppleIDChanged"];
}

void sub_1001EE204(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = daemon_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "non-null";
    if (!a2) {
      uint64_t v6 = "null";
    }
    int v8 = 136315138;
    BOOL v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SDStatusMonitor: wirelessDeviceCallBack(device %s)", (uint8_t *)&v8, 0xCu);
  }

  id v7 = a3;
  [v7 forceAWDLDeviceRefresh:a2];
  [v7 updateWirelessDevice];
}

void sub_1001EE2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = daemon_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "WiFiManagerClientRegisterVirtInterfaceChangeCallback called for WiFiDeviceClient device %@", (uint8_t *)&v9, 0xCu);
  }

  id v8 = a5;
  [v8 forceAWDLDeviceRefresh:a2];
  [v8 updateWirelessDevice];
}

id sub_1001EE3B4(uint64_t a1, void *a2)
{
  [a2 logWiFiPowerState];
  [a2 clearWirelessState];
  [a2 updateAWDLStateInfo];
  [a2 updateDiscoverableMode];

  return [a2 postNotification:@"com.apple.sharingd.WirelessPowerChanged"];
}

id sub_1001EE410(uint64_t a1, uint64_t a2, void *a3)
{
  [a3 handleAWDLState:a2];

  return [a3 postNotification:@"com.apple.sharingd.VirtualInterfacesChanged"];
}

void sub_1001EE458(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = daemon_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"YES";
    if (!a2) {
      CFStringRef v6 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    CFStringRef v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Host AP state changed (event data: %@)", buf, 0xCu);
  }

  CFStringRef v8 = @"HostAPEventData";
  uint64_t v9 = a2;
  id v7 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  [a3 postNotification:@"com.apple.sharingd.HotspotHostAPStateChanged" userInfo:v7];
}

id sub_1001EE564(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = daemon_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (a2) {
      CFStringRef v6 = @"YES";
    }
    int v8 = 138412290;
    CFStringRef v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "wirelessCriticalCallback inCriticalState=%@", (uint8_t *)&v8, 0xCu);
  }

  return [a3 updateWirelessCritical:a2];
}

void sub_1001EE6D0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)CWFInterface);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 672);
  *(void *)(v3 + 672) = v2;

  id location = 0;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001EE8F0;
  v18[3] = &unk_1008D0938;
  objc_copyWeak(&v19, &location);
  [*(id *)(*(void *)(a1 + 32) + 672) setEventHandler:v18];
  [*(id *)(*(void *)(a1 + 32) + 672) activate];
  int v5 = *(void **)(*(void *)(a1 + 32) + 672);
  id v17 = 0;
  [v5 startMonitoringEventType:3 error:&v17];
  id v6 = v17;
  id v7 = *(void **)(*(void *)(a1 + 32) + 672);
  id v16 = v6;
  [v7 startMonitoringEventType:8 error:&v16];
  id v8 = v16;

  CFStringRef v9 = *(void **)(*(void *)(a1 + 32) + 672);
  id v15 = v8;
  [v9 startMonitoringEventType:1 error:&v15];
  id v10 = v15;

  if (v10)
  {
    CFStringRef v11 = daemon_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001F53D8();
    }

    [*(id *)(*(void *)(a1 + 32) + 672) invalidate];
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v13 = *(void **)(v12 + 672);
    *(void *)(v12 + 672) = 0;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1001EEA3C;
  v14[3] = &unk_1008CA4B8;
  v14[4] = *(void *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v14);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void sub_1001EE8CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1001EE8F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1001EE9AC;
  v5[3] = &unk_1008CA248;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  id v6 = v3;
  id v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_1001EE9AC(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Got BSSID event, checking channel and wifi state\n", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained updateWifiState:[*(id *)(a1 + 32) type]];
}

id sub_1001EEA3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateWifiState:1];
}

id sub_1001EEDBC(uint64_t a1)
{
  uint64_t state64 = 0;
  notify_get_state(*(_DWORD *)(*(void *)(a1 + 32) + 80), &state64);
  uint64_t v2 = +[NSNumber numberWithInt:state64 != 0];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;

  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.BacklightChanged"];
}

void sub_1001EEFC0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1001EEFDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained d2dEncryptionChanged];
}

void sub_1001EF2AC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1001EF2EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained bluetoothStateChanged];
}

void sub_1001EF32C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained bluetoothMonitorInvalidated];
}

void sub_1001EF36C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained bluetoothActivatedWithError:v3];
}

void sub_1001EF3C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained bluetoothStateChanged];
}

void sub_1001EF804(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained installBluetoothMonitor];
}

id sub_1001EF92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return _[a7 handleNameMonitorCallBack:a4 flags:a2 error:a3];
}

void sub_1001EFE94(uint64_t a1)
{
  [*(id *)(a1 + 32) updateDiscoverableMode];
  [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.WirelessCarPlayChanged"];
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless CarPlay session state changed.", v3, 2u);
  }
}

uint64_t sub_1001F0158(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Contact store did change notification received", v4, 2u);
  }

  [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.ContactsChanged"];
  return notify_post("com.apple.sharing.privacy-changed");
}

uint64_t sub_1001F0254(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MeCard changed notification received", v4, 2u);
  }

  [*(id *)(a1 + 32) clearMyIconAndHash];
  [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.ContactsChanged"];
  return notify_post("com.apple.sharing.privacy-changed");
}

void sub_1001F0508(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = a2;
    [v3 fetchLTEShows4GWithContext:v4];
    [*(id *)(a1 + 32) fetchDataStatusWithContext:v4];
    [*(id *)(a1 + 32) fetchSIMStatusWithContext:v4];
    [*(id *)(a1 + 32) fetchSignalStrengthWithContext:v4];
  }
}

void sub_1001F0620(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (*(void *)(a1 + 32))
    {
      id v7 = daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412290;
        id v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Fetched preferred data context %@", (uint8_t *)&v9, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
  else
  {
    id v8 = daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001F5510();
    }
  }
}

void sub_1001F07F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001F5578();
    }
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v8 = [v5 isEqualToString:@"4G"];
    }
    else {
      id v8 = 0;
    }
    [*(id *)(a1 + 32) updateLTEShows4G:v8];
  }
}

void sub_1001F0924(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) updateSIMStatus:a2];
  }
  else
  {
    id v6 = daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001F55E0();
    }
  }
}

void sub_1001F0A10(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) updateDataStatus:a2];
  }
  else
  {
    id v6 = daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001F5648();
    }
  }
}

void sub_1001F0AFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) updateSignalStrength:a2];
  }
  else
  {
    id v6 = daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001F56B0();
    }
  }
}

void sub_1001F10B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = a2;
    [v3 fetchLTEShows4GWithContext:v4];
    [*(id *)(a1 + 32) fetchDataStatusWithContext:v4];
    [*(id *)(a1 + 32) fetchSIMStatusWithContext:v4];
    [*(id *)(a1 + 32) fetchSignalStrengthWithContext:v4];
  }
}

id *sub_1001F11A0(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] fetchSIMStatusWithContext:a2];
  }
  return result;
}

id *sub_1001F1220(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] fetchDataStatusWithContext:a2];
  }
  return result;
}

id *sub_1001F12A0(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] fetchSignalStrengthWithContext:a2];
  }
  return result;
}

id sub_1001F177C(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 handleDynamicStoreCallback:a1 changedKeys:a2];
}

id sub_1001F1824(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 200) && MKBDeviceUnlockedSinceBoot() == 1)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 200) = 1;
    [*(id *)(a1 + 32) installContactsMonitor];
    [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.KeyBagFirstUnlock"];
  }
  uint64_t v2 = +[NSNumber numberWithInt:MKBGetDeviceLockState()];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 176);
  *(void *)(v3 + 176) = v2;

  if ([*(id *)(a1 + 32) deviceKeyBagUnlocked])
  {
    uint64_t v5 = +[NSDate now];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 704);
    *(void *)(v6 + 704) = v5;
  }
  id v8 = *(void **)(a1 + 32);

  return [v8 postNotification:@"com.apple.sharingd.KeyBagLockStatusChanged"];
}

void sub_1001F1988(id a1, BOOL a2)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sharingd Exiting...", v3, 2u);
  }

  exit(0);
}

void sub_1001F19E8(uint64_t a1, void *a2)
{
  uint64_t v3 = daemon_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Current language changed", buf, 2u);
  }

  +[SDXPCHelperImageCache clearCacheWithSync:1];
  id v4 = a2;
  uint64_t v5 = self;
  objc_sync_enter(v5);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F4B70;
  block[3] = &unk_1008CA4B8;
  id v8 = v4;
  id v6 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_sync_exit(v5);
}

id sub_1001F211C(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.PowerSourceChanged"];
}

void sub_1001F2618(uint64_t a1, const void *a2)
{
  id v4 = daemon_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_1001F5928();
  }

  if (!CFEqual(a2, SBSEventObserverEventDimmed) && !CFEqual(a2, SBSEventObserverEventUndimmed))
  {
    if (CFEqual(a2, SBSEventObserverEventContinuityUIWasObscured))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 232);
      id v7 = &__kCFBooleanFalse;
LABEL_9:
      *(void *)(v5 + 232) = v7;

      [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.HandoffVisibilityChanged"];
      goto LABEL_10;
    }
    if (CFEqual(a2, SBSEventObserverEventContinuityUIBecameVisible))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 232);
      id v7 = &__kCFBooleanTrue;
      goto LABEL_9;
    }
    int v9 = daemon_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      CFStringRef v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SDStatusMonitor: SBSEventObserved unknown event %@", (uint8_t *)&v10, 0xCu);
    }
  }
LABEL_10:
  if (CFEqual(a2, SBSEventObserverEventContinuityUIBecameVisible))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.sharing.SpringBoard.startDiscovery", 0, 0, 1u);
  }
}

void sub_1001F3060(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = v4 != 0;
  id v6 = daemon_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109120;
    v10[1] = v4 != 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Mirroring active state changed: %d", (uint8_t *)v10, 8u);
  }

  pthread_mutex_lock(&stru_100969508);
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(unsigned __int8 *)(v7 + 688);
  *(unsigned char *)(v7 + 68_Block_object_dispose(&STACK[0x300], 8) = v5;
  pthread_mutex_unlock(&stru_100969508);
  if (v8 != v5)
  {
    int v9 = +[NSNotificationCenter defaultCenter];
    [v9 postNotificationName:@"com.apple.sharingd.MirroringStateChanged" object:0];
  }
}

void sub_1001F320C(uint64_t a1)
{
  uint64_t state64 = 0;
  uint32_t state = notify_get_state(*(_DWORD *)(*(void *)(a1 + 32) + 500), &state64);
  uint64_t v3 = daemon_log();
  id v4 = v3;
  if (state)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001F5AAC();
    }
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v12 = state64;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UI locked state changed %llu", buf, 0xCu);
    }

    uint64_t v5 = +[NSNumber numberWithInt:state64 == 0];
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 192);
    *(void *)(v6 + 192) = v5;

    if (state64)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(void **)(v8 + 480);
      *(void *)(v8 + 480) = 0;
    }
    [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.UILockStatusChanged"];
  }
}

void sub_1001F37B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = daemon_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WiFi Preferences changed callback, purging ssid cache", v7, 2u);
  }

  uint64_t v5 = a3;
  pthread_mutex_lock(&stru_100969508);
  [v5[60] removeAllObjects];
  id v6 = v5[60];
  v5[60] = 0;

  pthread_mutex_unlock(&stru_100969508);
  [v5 updateAutoHotspotState];
  [v5 updateFamilyHotspotState];
}

id sub_1001F40C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _expireEveryoneModeAndOnlySetDefault:0];
}

Class sub_1001F45B8()
{
  if (qword_1009803F0 != -1) {
    dispatch_once(&qword_1009803F0, &stru_1008D0B00);
  }
  Class result = objc_getClass("TUPrivacyManager");
  qword_1009803E8 = (uint64_t)result;
  off_100969548 = (uint64_t (*)())sub_1001F461C;
  return result;
}

id sub_1001F461C()
{
  return (id)qword_1009803E8;
}

void sub_1001F4628(id a1)
{
  qword_1009803F8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities", 2);
}

Class sub_1001F4654()
{
  if (qword_1009803F0 != -1) {
    dispatch_once(&qword_1009803F0, &stru_1008D0B00);
  }
  Class result = objc_getClass("TUPhoneNumber");
  qword_100980400 = (uint64_t)result;
  off_100969550 = (uint64_t (*)())sub_1001F46B8;
  return result;
}

id sub_1001F46B8()
{
  return (id)qword_100980400;
}

uint64_t sub_1001F46C4()
{
  if (qword_1009803F0 != -1) {
    dispatch_once(&qword_1009803F0, &stru_1008D0B00);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)qword_1009803F8, "TUHomeCountryCode");
  off_100969770 = v0;

  return v0();
}

Class sub_1001F472C()
{
  if (qword_100980410 != -1) {
    dispatch_once(&qword_100980410, &stru_1008D0B20);
  }
  Class result = objc_getClass("UMUserManager");
  qword_100980408 = (uint64_t)result;
  off_100969558 = (uint64_t (*)())sub_1001F4790;
  return result;
}

id sub_1001F4790()
{
  return (id)qword_100980408;
}

void sub_1001F479C(id a1)
{
  qword_100980418 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement", 2);
}

Class sub_1001F47C8()
{
  if (qword_100980428 != -1) {
    dispatch_once(&qword_100980428, &stru_1008D0B40);
  }
  Class result = objc_getClass("BLSBacklight");
  qword_100980420 = (uint64_t)result;
  off_100969560 = (uint64_t (*)())sub_1001F482C;
  return result;
}

id sub_1001F482C()
{
  return (id)qword_100980420;
}

void sub_1001F4838(id a1)
{
  qword_100980430 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BacklightServices.framework/BacklightServices", 2);
}

Class sub_1001F4864()
{
  if (qword_100980440 != -1) {
    dispatch_once(&qword_100980440, &stru_1008D0B60);
  }
  Class result = objc_getClass("AVSystemController");
  qword_100980438 = (uint64_t)result;
  off_100969568 = (uint64_t (*)())sub_1001F48C8;
  return result;
}

id sub_1001F48C8()
{
  return (id)qword_100980438;
}

void sub_1001F48D4(id a1)
{
  qword_100980448 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MediaExperience.framework/MediaExperience", 2);
}

id sub_1001F4900()
{
  if (qword_100980440 != -1) {
    dispatch_once(&qword_100980440, &stru_1008D0B60);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980448, "AVSystemController_CarPlayIsConnectedAttribute");
  if (v0) {
    objc_storeStrong((id *)&qword_1009803D0, *v0);
  }
  off_100969570 = (uint64_t (*)())sub_1001F4990;
  uint64_t v1 = (void *)qword_1009803D0;

  return v1;
}

id sub_1001F4990()
{
  return (id)qword_1009803D0;
}

id sub_1001F499C()
{
  if (qword_100980440 != -1) {
    dispatch_once(&qword_100980440, &stru_1008D0B60);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980448, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1009803C8, *v0);
  }
  off_100969578 = (uint64_t (*)())sub_1001F4A2C;
  uint64_t v1 = (void *)qword_1009803C8;

  return v1;
}

id sub_1001F4A2C()
{
  return (id)qword_1009803C8;
}

id sub_1001F4A38()
{
  if (qword_100980440 != -1) {
    dispatch_once(&qword_100980440, &stru_1008D0B60);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980448, "AVSystemController_CarPlayIsConnectedDidChangeNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1009803D8, *v0);
  }
  off_100969580 = (uint64_t (*)())sub_1001F4AC8;
  uint64_t v1 = (void *)qword_1009803D8;

  return v1;
}

id sub_1001F4AC8()
{
  return (id)qword_1009803D8;
}

id sub_1001F4AD4()
{
  if (qword_100980440 != -1) {
    dispatch_once(&qword_100980440, &stru_1008D0B60);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100980448, "AVSystemController_SubscribeToNotificationsAttribute");
  if (v0) {
    objc_storeStrong((id *)&qword_1009803E0, *v0);
  }
  off_100969588 = (uint64_t (*)())sub_1001F4B64;
  uint64_t v1 = (void *)qword_1009803E0;

  return v1;
}

id sub_1001F4B64()
{
  return (id)qword_1009803E0;
}

id sub_1001F4B70(uint64_t a1)
{
  uint64_t v2 = daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "currentLocalChanged", v4, 2u);
  }

  return [*(id *)(*(void *)(a1 + 32) + 520) scheduleOperation];
}

void sub_1001F4BF8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SecCertificateCopyCommonNames returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001F4C2C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SecCertificateCopyCommonNames returned empty array", v2, v3, v4, v5, v6);
}

void sub_1001F4C60()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Could not fix Alt-DSID CFErrorRef error = %@", v2, v3, v4, v5, v6);
}

void sub_1001F4CC8()
{
  sub_1001F4BE8();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x12u);
}

void sub_1001F4D4C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "addAdditionalInformationToMeCard: _myAppleID = nil", v2, v3, v4, v5, v6);
}

void sub_1001F4D80(uint64_t a1, NSObject *a2)
{
  int v2 = 141558275;
  uint64_t v3 = 1752392040;
  __int16 v4 = 2113;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "addAdditionalInformationToMeCard: accountForAppleID (%{private, mask.hash}@) = nil", (uint8_t *)&v2, 0x16u);
}

void sub_1001F4E0C()
{
  sub_10002972C();
  sub_1001F4BE8();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x16u);
}

void sub_1001F4E88()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Adding additional information to me-card if needed", v2, v3, v4, v5, v6);
}

void sub_1001F4EBC()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "No me-card set", v2, v3, v4, v5, v6);
}

void sub_1001F4EF0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to retrieve me-card due to %@", v2, v3, v4, v5, v6);
}

void sub_1001F4F58()
{
  sub_10002008C();
  sub_1001F4BE8();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0xEu);
}

void sub_1001F4FD4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Tethering active but no ssid found for hotspot.", v2, v3, v4, v5, v6);
}

void sub_1001F5008()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: setWirelessEnabled _wifiManager is NULL", v2, v3, v4, v5, v6);
}

void sub_1001F503C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "_awdlDevice is NULL", v2, v3, v4, v5, v6);
}

void sub_1001F5070()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "WiFiDeviceClientCopyInterfaceStateInfo returned NULL state", v2, v3, v4, v5, v6);
}

void sub_1001F50A4()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "WiFiDeviceClientCopyInterfaceStateInfo returned error %d", v2, v3, v4, v5, v6);
}

void sub_1001F510C(NSObject *a1)
{
  int v2 = *__error();
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "sysctl returned %d", (uint8_t *)v3, 8u);
}

void sub_1001F519C()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SecIdentityCopyCertificate returned %d", v2, v3, v4, v5, v6);
}

void sub_1001F5204()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "altDSID is nil", v2, v3, v4, v5, v6);
}

void sub_1001F5238()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "altDSID is equal to primary email", v2, v3, v4, v5, v6);
}

void sub_1001F526C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "altDSID is equal to Apple ID account", v2, v3, v4, v5, v6);
}

void sub_1001F52A0()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: SBGetScreenLockStatus returned %d", v2, v3, v4, v5, v6);
}

void sub_1001F5308()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: WiFiManagerClientCreate returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001F533C()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: WiFi device found on startup", v2, v3, v4, v5, v6);
}

void sub_1001F5370()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: WiFiManagerClientCopyDevices returned NULL", v2, v3, v4, v5, v6);
}

void sub_1001F53A4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: WiFiManagerClientCopyDevices is empty", v2, v3, v4, v5, v6);
}

void sub_1001F53D8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to register wifi monitor %@\n", v2, v3, v4, v5, v6);
}

void sub_1001F5440()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: DNSServiceSetDispatchQueue returned %d", v2, v3, v4, v5, v6);
}

void sub_1001F54A8()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: DNSServiceRegister returned %d", v2, v3, v4, v5, v6);
}

void sub_1001F5510()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "CoreTelephony missing data preferred context %@", v2, v3, v4, v5, v6);
}

void sub_1001F5578()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "CoreTelephony copyCarrierBundleValueWithDefault failed %@", v2, v3, v4, v5, v6);
}

void sub_1001F55E0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "CoreTelephony getSIMStatus failed %@", v2, v3, v4, v5, v6);
}

void sub_1001F5648()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "CoreTelephony getDataStatus failed %@", v2, v3, v4, v5, v6);
}

void sub_1001F56B0()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "CoreTelephony getSignalStrengthInfo failed %@", v2, v3, v4, v5, v6);
}

void sub_1001F5718()
{
  int v0 = SCError();
  SCErrorString(v0);
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v1, v2, "SCDynamicStoreCreate failed: %s", v3, v4, v5, v6, v7);
}

void sub_1001F5794()
{
  int v0 = SCError();
  SCErrorString(v0);
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v1, v2, "SCDynamicStoreSetNotificationKeys failed: %s", v3, v4, v5, v6, v7);
}

void sub_1001F5810()
{
  int v0 = SCError();
  SCErrorString(v0);
  sub_10002972C();
  sub_100071574((void *)&_mh_execute_header, v1, v2, "SCDynamicStoreCreateRunLoopSource failed: %s", v3, v4, v5, v6, v7);
}

void sub_1001F588C()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: handleNameMonitorCallBack returned %d", v2, v3, v4, v5, v6);
}

void sub_1001F58F4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: IORegisterForSystemPower failed", v2, v3, v4, v5, v6);
}

void sub_1001F5928()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "SDStatusMonitor: SBSEventObserved %@", v1, 0xCu);
}

void sub_1001F599C()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Backlight activating", v2, v3, v4, v5, v6);
}

void sub_1001F59D0()
{
  sub_10001587C();
  sub_10008F10C((void *)&_mh_execute_header, v0, v1, "Backlight deactivating", v2, v3, v4, v5, v6);
}

void sub_1001F5A04(void *a1, uint64_t a2, NSObject *a3)
{
  unsigned int v4 = [a1 isScreenOnForBacklightState:a2];
  CFStringRef v5 = @"Off";
  if (v4) {
    CFStringRef v5 = @"On";
  }
  int v6 = 138412290;
  CFStringRef v7 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Backlight didCompleteUpdatingScreenOnState to %@", (uint8_t *)&v6, 0xCu);
}

void sub_1001F5AAC()
{
  sub_10002008C();
  sub_10002002C((void *)&_mh_execute_header, v0, v1, "SDStatusMonitor: notify_get_state returned %d", v2, v3, v4, v5, v6);
}

void sub_1001F5B14()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "### Failed to make ssid prefs?", v2, v3, v4, v5, v6);
}

void sub_1001F5D14(id a1)
{
  uint64_t v1 = objc_alloc_init(SDUnlockKeyManager);
  uint64_t v2 = (void *)qword_100980450;
  qword_100980450 = (uint64_t)v1;
}

void sub_1001F66B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) getWatchNameForTesting];
  uint64_t v1 = +[SDHUDManager shared];
  [v1 postPairedUnlockBannerFor:v2 needsLockButton:0 needsUpdate:0];
}

void sub_1001F6728(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) getWatchNameForTesting];
  uint64_t v1 = +[SDHUDManager shared];
  [v1 postPairedUnlockBannerFor:v2 needsLockButton:1 needsUpdate:1];
}

void sub_1001F6798(id a1, int a2)
{
  id v2 = +[SDHUDManager shared];
  [v2 updatePairedUnlockBannerToUnlocked];
}

void sub_1001F67E0(id a1, int a2)
{
  id v2 = +[SDHUDManager shared];
  [v2 dismissPairedUnlockBanner];
}

id sub_1001F69E8(uint64_t a1)
{
  [*(id *)(a1 + 32) setAutoUnlockEnabledUpdatedAfterFirstUnlock:1];
  id v2 = +[SDStatusMonitor sharedMonitor];
  unsigned int v3 = [v2 deviceKeyBagUnlocked];

  if (v3
    && ([*(id *)(a1 + 32) shouldUseTwoPartPill] & 1) == 0
    && [*(id *)(a1 + 32) waitingForAutoUnlockStateUpdateToStartPairedUnlock])
  {
    uint64_t v4 = paired_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFStringRef v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Auto Unlock not enabled. Starting unlock", v11, 2u);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 6_Block_object_dispose(&STACK[0x300], 8) = [*(id *)(a1 + 32) startUnlockIfNeeded];
    uint64_t v5 = paired_unlock_log();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    if (*(unsigned char *)(*(void *)(a1 + 32) + 68)) {
      CFStringRef v6 = @"YES";
    }
    else {
      CFStringRef v6 = @"NO";
    }
    *(_DWORD *)CFStringRef v11 = 138412290;
    *(void *)&v11[4] = v6;
    CFStringRef v7 = "Paired Unlock started: %@";
    uint64_t v8 = v5;
    uint32_t v9 = 12;
    goto LABEL_14;
  }
  if ([*(id *)(a1 + 32) waitingForAutoUnlockStateUpdateToStartPairedUnlock])
  {
    uint64_t v5 = paired_unlock_log();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
LABEL_15:

      return [*(id *)(a1 + 32) setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:0, *(_OWORD *)v11];
    }
    *(_WORD *)CFStringRef v11 = 0;
    CFStringRef v7 = "Auto Unlock enabled. Not performing Paired Unlock";
    uint64_t v8 = v5;
    uint32_t v9 = 2;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, v11, v9);
    goto LABEL_15;
  }
  return [*(id *)(a1 + 32) setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:0, *(_OWORD *)v11];
}

void sub_1001F73E8(uint64_t a1)
{
  id v2 = +[SDStatusMonitor sharedMonitor];
  id v3 = [v2 pairedWatchWristState];

  if (v3 == (id)2)
  {
    if ([*(id *)(a1 + 32) needsOffWristBeforePairedUnlock])
    {
      uint64_t v4 = paired_unlock_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Eligible for Paired Unlock after off wrist event", buf, 2u);
      }

      [*(id *)(a1 + 32) setNeedsOffWristBeforePairedUnlock:0];
    }
    uint64_t v5 = [*(id *)(a1 + 32) delayedStartTimer];

    if (v5)
    {
      CFStringRef v6 = paired_unlock_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CFStringRef v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Watch off wrist while waiting to start Paired Unlock. Cancelling operation and dismissing banner", v7, 2u);
      }

      [*(id *)(a1 + 32) invalidateDelayedStartTimer];
      [*(id *)(a1 + 32) resetAndClearState];
    }
  }
}

void sub_1001F757C(uint64_t a1)
{
  id v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Paired Unlock Banner dismissed", buf, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 104))
  {
    uint64_t v4 = paired_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Banner dismissed while waiting for user response. Cancelling Paired Unlock", v12, 2u);
    }

    [*(id *)(a1 + 32) invalidateDelayedStartTimer];
    uint64_t v5 = [*(id *)(a1 + 32) metrics];

    if (v5)
    {
      CFStringRef v6 = [*(id *)(a1 + 32) metrics];
      [v6 setFailureReason:16];
    }
    [*(id *)(a1 + 32) sendResetMessage:[*(id *)(*(void *)(a1 + 32) + 128) unlockSessionID] reason:16];
  }
  else
  {
    int v7 = *(unsigned __int8 *)(v3 + 68);
    uint64_t v8 = paired_unlock_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        *(_WORD *)CFStringRef v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Dismissed while performing Paired Unlock. Cancelling or relocking watch if necessary", v11, 2u);
      }

      [*(id *)(a1 + 32) sendRelockRequestWithReset:1];
    }
    else
    {
      if (v9)
      {
        *(_WORD *)int v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Banner dismissed after Paired Unlock finished. Doing nothing according to policy.", v10, 2u);
      }
    }
  }
}

id sub_1001F77B4(uint64_t a1)
{
  id v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Paired Unlock Banner lock button tapped. Disabling Paired unlock until watch off wrist or unlocked", buf, 2u);
  }

  [*(id *)(a1 + 32) setNeedsOffWristBeforePairedUnlock:1];
  uint64_t v3 = [*(id *)(a1 + 32) delayedStartTimer];

  uint64_t v4 = paired_unlock_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)CFStringRef v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Lock button tapped before starting Paired Unlock. Not starting Paired Unlock", v11, 2u);
    }

    [*(id *)(a1 + 32) invalidateDelayedStartTimer];
  }
  else
  {
    if (v5)
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Lock button tapped during or after Paired Unlock. Relocking watch if necessary", v10, 2u);
    }

    [*(id *)(a1 + 32) sendRelockRequestWithReset:1];
  }
  CFStringRef v6 = [*(id *)(a1 + 32) metrics];

  if (v6)
  {
    int v7 = [*(id *)(a1 + 32) metrics];
    [v7 setRelockedWatch:1];

    uint64_t v8 = [*(id *)(a1 + 32) metrics];
    [v8 setFailureReason:17];
  }
  return [*(id *)(a1 + 32) sendResetMessage:objc_msgSend(*(id *)(*(void *)(a1 + 32) + 128), "unlockSessionID") reason:17];
}

id sub_1001F7F84(uint64_t a1)
{
  id v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Delayed start timer fired", v5, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
  return [*(id *)(a1 + 32) invalidateDelayedStartTimer];
}

id sub_1001F819C(uint64_t a1)
{
  id v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Long-term key timer fired, resetting state", v4, 2u);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 67) = 0;
  [*(id *)(a1 + 32) releaseKeyBagAssertion];
  return [*(id *)(a1 + 32) abortDevicePairingWithReason:@"com.apple.sharingd.abort-reason.response.timeout"];
}

void sub_1001F84F4(uint64_t a1)
{
  [*(id *)(a1 + 32) setRemoteDeviceLocked:1];
  [*(id *)(a1 + 32) resetAndClearState];
  [*(id *)(a1 + 32) setSecurityManager:0];
  [*(id *)(a1 + 32) updateSecurityManager];
  id v2 = *(void **)(*(void *)(a1 + 32) + 96);
  uint64_t v3 = objc_opt_new();
  [v2 timeIntervalSinceDate:v3];
  double v5 = v4;

  if (v5 > 0.0 && ![*(id *)(a1 + 32) unlockingState])
  {
    CFStringRef v6 = paired_unlock_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Retrying unlock after switch", v9, 2u);
    }

    [*(id *)(a1 + 32) startUnlockIfNeeded];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 96);
    *(void *)(v7 + 96) = 0;
  }
}

void sub_1001F8BBC(uint64_t a1)
{
  id v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "State timer fired, assuming devices are not connected", v7, 2u);
  }

  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Remote never responded with state";
  double v5 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  CFStringRef v6 = +[NSError errorWithDomain:v4 code:113 userInfo:v5];
  [v3 notifyUnlockStateWithState:0 error:v6];
}

void sub_1001F8FBC(uint64_t a1)
{
  if (!*(void *)(a1 + 40)) {
    return;
  }
  if (![*(id *)(a1 + 32) unlockEnabled])
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v7 = SFUnlockErrorDomian;
    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    CFStringRef v14 = @"Paired Unlock disabled";
    NSErrorUserInfoKey v8 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    uint64_t v9 = v7;
    uint64_t v10 = 109;
LABEL_9:
    uint64_t v12 = +[NSError errorWithDomain:v9 code:v10 userInfo:v8];
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v12);

    return;
  }
  unsigned int v2 = [*(id *)(a1 + 32) initiateStashBagCreationWithManifest:0];
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v2)
  {
    uint64_t v11 = SFUnlockErrorDomian;
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    CFStringRef v16 = @"Could not initiate stash creation";
    NSErrorUserInfoKey v8 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    uint64_t v9 = v11;
    uint64_t v10 = 101;
    goto LABEL_9;
  }
  id v4 = [*(id *)(a1 + 40) copy];
  uint64_t v5 = *(void *)(a1 + 32);
  CFStringRef v6 = *(void **)(v5 + 144);
  *(void *)(v5 + 144) = v4;
}

void sub_1001F9248(uint64_t a1)
{
  if (!*(void *)(a1 + 48)) {
    return;
  }
  if (![*(id *)(a1 + 32) unlockEnabled])
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v7 = SFUnlockErrorDomian;
    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    CFStringRef v14 = @"Paired Unlock disabled";
    NSErrorUserInfoKey v8 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    uint64_t v9 = v7;
    uint64_t v10 = 109;
LABEL_9:
    uint64_t v12 = +[NSError errorWithDomain:v9 code:v10 userInfo:v8];
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v12);

    return;
  }
  unsigned int v2 = [*(id *)(a1 + 32) initiateStashBagCreationWithManifest:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v2)
  {
    uint64_t v11 = SFUnlockErrorDomian;
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    CFStringRef v16 = @"Could not initiate stash creation with manifest";
    NSErrorUserInfoKey v8 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    uint64_t v9 = v11;
    uint64_t v10 = 101;
    goto LABEL_9;
  }
  id v4 = [*(id *)(a1 + 48) copy];
  uint64_t v5 = *(void *)(a1 + 32);
  CFStringRef v6 = *(void **)(v5 + 144);
  *(void *)(v5 + 144) = v4;
}

void sub_1001F994C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001FB0B4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 68);
  uint64_t v3 = paired_unlock_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Telling watch to finish unlocking", buf, 2u);
    }

    [*(id *)(a1 + 32) sendSessionAuthenticationToken:*(void *)(a1 + 40) sessionID:[*(id *)(a1 + 48) sessionID]];
    uint64_t v5 = paired_unlock_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Preemptively assuming watch will succeed in unlock. Updating pill to \"Unlocked\"", v10, 2u);
    }

    CFStringRef v6 = +[SDHUDManager shared];
    [v6 updatePairedUnlockBannerToUnlocked];

    uint64_t v7 = +[NSDate date];
    NSErrorUserInfoKey v8 = [*(id *)(a1 + 32) metricDates];
    [v8 setPillUpdated:v7];
  }
  else
  {
    if (v4)
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempt cancelled. Not sending auth token. Dismissing banner just in case", v9, 2u);
    }

    uint64_t v7 = +[SDHUDManager shared];
    [v7 dismissPairedUnlockBanner];
  }
}

id sub_1001FBDE8(uint64_t a1)
{
  int v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_1001FEC9C();
  }

  id result = [*(id *)(a1 + 32) releaseKeyBagAssertion];
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 67))
  {
    *(unsigned char *)(v4 + 67) = 0;
    [*(id *)(a1 + 32) invalidateLongTermKeyTimer];
    return [*(id *)(a1 + 32) abortDevicePairingWithReason:@"com.apple.sharingd.abort-reason.send.request"];
  }
  return result;
}

id sub_1001FBFC4(uint64_t a1)
{
  int v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_1001FECD0();
  }

  return [*(id *)(a1 + 32) abortDevicePairingWithReason:@"com.apple.sharingd.abort-reason.send.response"];
}

id sub_1001FC174(uint64_t a1)
{
  return [*(id *)(a1 + 32) disableUnlockPairing];
}

id sub_1001FC2F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) disableUnlockPairing];
}

id sub_1001FC44C(uint64_t a1)
{
  return [*(id *)(a1 + 32) disableUnlockPairing];
}

id sub_1001FC5B8(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) metrics];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) metrics];
    [v3 setFailureReason:24];
  }
  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 resetAndClearState];
}

void sub_1001FC794(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = paired_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Resetting state. Error: %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v5 = [*(id *)(a1 + 32) metrics];

  if (v5)
  {
    CFStringRef v6 = [*(id *)(a1 + 32) metrics];
    [v6 setFailureReason:24];
  }
  [*(id *)(a1 + 32) resetAndClearState];
}

void sub_1001FC9CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  CFStringRef v6 = @"Message failed to send";
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  uint64_t v4 = +[NSError errorWithDomain:v2 code:103 userInfo:v3];
  [v1 notifyStashStateWithError:v4];
}

void sub_1001FCBE8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  CFStringRef v6 = @"Message failed to send";
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  uint64_t v4 = +[NSError errorWithDomain:v2 code:103 userInfo:v3];
  [v1 notifyStashStateWithError:v4];
}

void sub_1001FCDD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = paired_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001FED04();
  }

  NSErrorUserInfoKey v5 = *(void **)(a1 + 32);
  uint64_t v6 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
  CFStringRef v10 = @"State request failed to send";
  int v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  id v8 = +[NSError errorWithDomain:v6 code:103 userInfo:v7];
  [v5 notifyUnlockStateWithState:0 error:v8];
}

void sub_1001FD02C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = paired_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001FED6C();
  }
}

void sub_1001FE5CC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1001FE5F8()
{
  sub_1001FE5EC();
  [v1 pairingCompatibilityState];
  [v0 deviceIsPaired];
  sub_1001FE5CC((void *)&_mh_execute_header, v2, v3, "Received notification out of state (uint32_t state = %d, isPaired = %@)", v4, v5, v6, v7, 2u);
}

void sub_1001FE6AC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No device in un-pair notification", v2, v3, v4, v5, v6);
}

void sub_1001FE6E0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No device in pairing failed notification", v2, v3, v4, v5, v6);
}

void sub_1001FE714()
{
  sub_1001FE5EC();
  [v1 hasLongTermKey];
  id v8 = [v0 longTermKey];
  sub_100031E50((void *)&_mh_execute_header, v2, v3, "Failed to sign remote key (has remote key = %@, remote key = %@)", v4, v5, v6, v7, 2u);
}

void sub_1001FE7D0(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 pairingCompatibilityState];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to setup long-term key, incorrect uint32_t state = %d", (uint8_t *)v3, 8u);
}

void sub_1001FE85C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handleClassALongTermKeyRequest: %@", v2, v3, v4, v5, v6);
}

void sub_1001FE8C4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handleSetupRequest: %@", v2, v3, v4, v5, v6);
}

void sub_1001FE92C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handleCreateEscrowSecret: %@", v2, v3, v4, v5, v6);
}

void sub_1001FE994()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Bad signature for the auth step, disabling unlock. User will need to re-enable", v2, v3, v4, v5, v6);
}

void sub_1001FE9C8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create auth token", v2, v3, v4, v5, v6);
}

void sub_1001FE9FC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Exchange response failed. Retrying", v2, v3, v4, v5, v6);
}

void sub_1001FEA30(void *a1, void *a2)
{
  [a1 unlockingState];
  [a2 hasKey];
  sub_1001FE5CC((void *)&_mh_execute_header, v3, v4, "Failed in exchange response (unlocking uint32_t state = %d, has key = %@)", v5, v6, v7, v8, 2u);
}

void sub_1001FEAE8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create stash token", v2, v3, v4, v5, v6);
}

void sub_1001FEB1C(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error in stash key response = %d", (uint8_t *)v2, 8u);
}

void sub_1001FEB94()
{
  sub_1001FE5EC();
  if ([v2 hasUnlockEnabled]) {
    CFStringRef v3 = @"YES";
  }
  else {
    CFStringRef v3 = @"NO";
  }
  if ([v1 unlockEnabled]) {
    CFStringRef v4 = @"YES";
  }
  else {
    CFStringRef v4 = @"NO";
  }
  if ([v1 hasPasscodeEnabled]) {
    CFStringRef v5 = @"YES";
  }
  else {
    CFStringRef v5 = @"NO";
  }
  int v7 = 138413058;
  if ([v1 passcodeEnabled]) {
    CFStringRef v6 = @"YES";
  }
  else {
    CFStringRef v6 = @"NO";
  }
  CFStringRef v8 = v3;
  __int16 v9 = 2112;
  CFStringRef v10 = v4;
  __int16 v11 = 2112;
  CFStringRef v12 = v5;
  __int16 v13 = 2112;
  CFStringRef v14 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "State response is missing information (has unlock enabled = %@, unlock enabled = %@, has passcode enabled = %@, passcode enabled = %@", (uint8_t *)&v7, 0x2Au);
}

void sub_1001FEC9C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to start LTK transfer", v2, v3, v4, v5, v6);
}

void sub_1001FECD0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Transferring long-term keys failed. Paired Unlock will not work until devices completely re-pair", v2, v3, v4, v5, v6);
}

void sub_1001FED04()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to send state request with CFErrorRef error = %@", v2, v3, v4, v5, v6);
}

void sub_1001FED6C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "### Unable to send relock request: %@", v2, v3, v4, v5, v6);
}

void sub_1001FEDD4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not generate ephmeral key data", v2, v3, v4, v5, v6);
}

void sub_1001FEE08()
{
  sub_10001587C();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Local LTK corrupted. Deleting LTKs, disabling Unlock with iPhone", v1, 2u);
}

void sub_1001FEE48(int *a1, NSObject *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not create AKS session (errorCode: %x)", (uint8_t *)v3, 8u);
}

void sub_1001FEEC4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No stored passcode", v2, v3, v4, v5, v6);
}

void sub_1001FEEF8()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Not unlocking, active devices don't match (window: %@)", v2, v3, v4, v5, v6);
}

void sub_1001FEF60()
{
  sub_1001FE5EC();
  [v0 unlockingState];
  sub_10002972C();
  sub_100031E50((void *)&_mh_execute_header, v1, v2, "Initiating unlock out of state without record (uint32_t state = %ld, record = %@)", v3, v4, v5, v6, v7);
}

void sub_1001FEFF0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Missing escrow secret for stash session", v2, v3, v4, v5, v6);
}

void sub_1001FF024()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create stash bag session", v2, v3, v4, v5, v6);
}

void sub_1001FF728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001FF750(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained completionHandler];
  v1[2](v1, 1, 0, 1);

  [WeakRetained openLinks];
}

void sub_1001FFB0C(id a1)
{
  uint64_t v1 = objc_alloc_init(SDUnlockLockManager);
  uint64_t v2 = (void *)qword_100980460;
  qword_100980460 = (uint64_t)v1;
}

void sub_1001FFF4C(uint64_t a1)
{
  uint64_t v2 = +[SDStatusMonitor sharedMonitor];
  id v3 = [v2 deviceKeyBagState];

  uint64_t v4 = paired_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 134217984;
    id v22 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "keyBagLockStateChange: %ld", (uint8_t *)&v21, 0xCu);
  }

  uint64_t v5 = +[SDStatusMonitor sharedMonitor];
  unsigned int v6 = [v5 deviceKeyBagLocked];

  if (v6) {
    [*(id *)(a1 + 32) setLastUnlockedByPairedUnlock:0];
  }
  if ([*(id *)(a1 + 32) unlockEnabled])
  {
    uint8_t v7 = +[SDStatusMonitor sharedMonitor];
    unsigned int v8 = [v7 deviceKeyBagLocking];

    if (v8)
    {
      [*(id *)(a1 + 32) sendDeviceLockStateChanged:0];
      __int16 v9 = *(void **)(a1 + 32);
      uint64_t v10 = 1;
LABEL_24:
      [v9 setSentLockedState:v10];
      return;
    }
    CFStringRef v12 = +[SDStatusMonitor sharedMonitor];
    unsigned int v13 = [v12 deviceKeyBagDisabled];

    if (v13)
    {
      CFStringRef v14 = paired_unlock_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v21) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Passcode disabled", (uint8_t *)&v21, 2u);
      }

      [*(id *)(a1 + 32) disableUnlockPairing];
      [*(id *)(a1 + 32) sendDisableMessage];
      return;
    }
    NSErrorUserInfoKey v15 = +[SDStatusMonitor sharedMonitor];
    if ([v15 deviceKeyBagLocked])
    {
      unsigned __int8 v16 = [*(id *)(a1 + 32) sentLockedState];

      if ((v16 & 1) == 0)
      {
        [*(id *)(a1 + 32) sendDeviceLockStateChanged:0];
LABEL_23:
        __int16 v9 = *(void **)(a1 + 32);
        uint64_t v10 = 0;
        goto LABEL_24;
      }
    }
    else
    {
    }
    id v17 = +[SDStatusMonitor sharedMonitor];
    unsigned int v18 = [v17 deviceKeyBagUnlocked];

    if (v18)
    {
      [*(id *)(a1 + 32) sendDeviceLockStateChanged:1];
      if ([*(id *)(a1 + 32) lastUnlockedByPairedUnlock])
      {
        id v19 = [*(id *)(a1 + 32) dailyMetrics];
        [v19 setSuccessfulAttempts:[v19 successfulAttempts] + 1];
      }
      long long v20 = [*(id *)(a1 + 32) dailyMetrics];
      [v20 setTotalUnlocks:((char *)[v20 totalUnlocks]) + 1];
    }
    goto LABEL_23;
  }
  __int16 v11 = paired_unlock_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v21) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Paired unlock disabled not sending lock state", (uint8_t *)&v21, 2u);
  }
}

void sub_100200730(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  uint64_t v5 = [v3 dailyMetrics];
  if (v5)
  {
    unsigned int v6 = (void *)v5;
    unsigned int v7 = [*(id *)(a1 + 32) unlockEnabled];

    if (v7)
    {
      unsigned int v8 = [*(id *)(a1 + 32) dailyMetrics];
      __int16 v9 = [v8 totalAttempts];
      uint64_t v10 = [*(id *)(a1 + 32) dailyMetrics];
      int64_t v11 = v9 - (unsigned char *)[v10 successfulAttempts];
      CFStringRef v12 = [*(id *)(a1 + 32) dailyMetrics];
      [v12 setFailedAttempts:v11];

      unsigned int v13 = [*(id *)(a1 + 32) dailyMetrics];
      CFStringRef v14 = [v13 totalUnlocks];
      NSErrorUserInfoKey v15 = [*(id *)(a1 + 32) dailyMetrics];
      int64_t v16 = v14 - (unsigned char *)[v15 successfulAttempts];
      id v17 = [*(id *)(a1 + 32) dailyMetrics];
      [v17 setPasscodeUnlocks:v16];

      id v18 = +[SFAutoUnlockManager autoUnlockEnabled];
      id v19 = [*(id *)(a1 + 32) dailyMetrics];
      [v19 setPhoneAutoUnlockEnabled:v18];

      long long v20 = [*(id *)(a1 + 32) idsController];
      int v21 = [v20 activeIDSDevice];

      id v22 = [v21 productBuildVersion];
      __int16 v23 = [*(id *)(a1 + 32) dailyMetrics];
      [v23 setPhoneSoftwareVersion:v22];

      unint64_t v24 = [v21 modelIdentifier];
      char v25 = [*(id *)(a1 + 32) dailyMetrics];
      [v25 setPhoneHardwareModel:v24];

      id v26 = paired_unlock_log();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Submitting daily metrics", v29, 2u);
      }

      uint64_t v27 = [*(id *)(a1 + 32) dailyMetrics];
      [v27 submitEvent];
    }
  }
  id v28 = objc_alloc_init((Class)SFPairedUnlockDailyEvent);
  [*(id *)(a1 + 32) setDailyMetrics:v28];

  v4[2](v4, 1);
}

id sub_100200C68(uint64_t a1)
{
  uint64_t v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Long-term key timer fired, resetting state", v4, 2u);
  }

  return [*(id *)(a1 + 32) resetLongTermKeyRequest];
}

void sub_100200E50(id *a1)
{
  uint64_t v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client enabling unlock", (uint8_t *)&v23, 2u);
  }

  id v3 = a1[4];
  if (v3 && [v3 length] && a1[7])
  {
    if ([a1[5] isEqualToString:IDSDefaultPairedDevice])
    {
      uint64_t v4 = [a1[6] idsController];
      unsigned int v5 = [v4 hasDefaultDevice];

      if (v5)
      {
        id v6 = [a1[4] copy];
        unsigned int v7 = a1[6];
        unsigned int v8 = (void *)v7[15];
        v7[15] = v6;

        id v9 = [a1[7] copy];
        uint64_t v10 = a1[6];
        int64_t v11 = (void *)v10[27];
        v10[27] = v9;

        *((unsigned char *)a1[6] + 66) = 1;
        CFStringRef v12 = paired_unlock_log();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Preventing exit for enable", (uint8_t *)&v23, 2u);
        }

        unsigned int v13 = +[SDStatusMonitor sharedMonitor];
        [v13 addPreventExitForLocaleReason:@"SDUnlockSetupSessionPreventExitReason"];

        *((unsigned char *)a1[6] + 70) = 1;
        [a1[6] enableUnlockForcingLTKTransfer:0];
        return;
      }
    }
    int v21 = paired_unlock_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      sub_100204F18((uint64_t)(a1 + 5), (uint64_t)a1);
    }

    NSErrorUserInfoKey v15 = (void (**)(id, void, void *))a1[7];
    if (v15)
    {
      uint64_t v22 = SFUnlockErrorDomian;
      NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
      CFStringRef v27 = @"Bad device identifier";
      id v17 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      uint64_t v18 = v22;
      uint64_t v19 = 104;
      goto LABEL_15;
    }
  }
  else
  {
    CFStringRef v14 = paired_unlock_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100204E68(a1 + 4, (uint64_t)a1, v14);
    }

    NSErrorUserInfoKey v15 = (void (**)(id, void, void *))a1[7];
    if (v15)
    {
      uint64_t v16 = SFUnlockErrorDomian;
      NSErrorUserInfoKey v24 = NSLocalizedDescriptionKey;
      CFStringRef v25 = @"Invalid password";
      id v17 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
      uint64_t v18 = v16;
      uint64_t v19 = 112;
LABEL_15:
      long long v20 = +[NSError errorWithDomain:v18 code:v19 userInfo:v17];
      v15[2](v15, 0, v20);
    }
  }
}

void sub_1002015A0(id a1)
{
  id v1 = +[SDStatusMonitor sharedMonitor];
  [v1 removePreventExitForLocaleReason:@"SDUnlockSetupSessionPreventExitReason"];
}

void sub_100202EA8(uint64_t a1, int a2, int a3)
{
  id v6 = +[NSDate now];
  unsigned int v7 = [*(id *)(a1 + 32) metricDates];
  [v7 setMotionCheckEnded:v6];

  int v8 = a3 ^ 1;
  if (((a2 ^ 1) & 1) != 0
    || (v8 & 1) != 0
    || ![*(id *)(a1 + 40) hasKey]
    || ![*(id *)(a1 + 40) hasUsingRecord])
  {
    CFStringRef v14 = paired_unlock_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v16 = @"NO";
      uint64_t v17 = *(void *)(a1 + 40);
      if (a2) {
        CFStringRef v18 = @"YES";
      }
      else {
        CFStringRef v18 = @"NO";
      }
      *(_DWORD *)int v21 = 138412802;
      *(void *)&v21[4] = v18;
      *(_WORD *)&v21[12] = 2112;
      if (a3) {
        CFStringRef v16 = @"YES";
      }
      *(void *)&v21[14] = v16;
      __int16 v22 = 2112;
      uint64_t v23 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Resetting (on wrist = %@, motion detected = %@, exchange request = %@)", v21, 0x20u);
    }

    if ((a2 & 1) != 0 || a3)
    {
      if ((v8 | a2) == 1)
      {
        if ((a2 ^ 1 | a3) == 1) {
          uint64_t v15 = ![*(id *)(a1 + 40) hasKey]
        }
             || ([*(id *)(a1 + 40) hasUsingRecord] & 1) == 0;
        else {
          uint64_t v15 = 6;
        }
      }
      else
      {
        uint64_t v15 = 5;
      }
    }
    else
    {
      uint64_t v15 = 7;
    }
    [*(id *)(a1 + 32) sendResetMessage:[*(id *)(a1 + 40) sessionID] reason:v15];
  }
  else
  {
    id v9 = [*(id *)(a1 + 32) securityManager];
    [*(id *)(a1 + 32) setUnlockAuthSession:[v9 unlockSessionAsOriginator:usingEscrow:[*(id *)(a1 + 40) usingRecord] escrowSecret:0]];

    if (((unint64_t)[*(id *)(a1 + 32) unlockAuthSession] & 0x8000000000000000) != 0)
    {
      uint64_t v19 = paired_unlock_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_1002057D8();
      }

      [*(id *)(a1 + 32) sendKeyExchangeResponse:0 sessionID:[*(id *)(a1 + 40) sessionID]];
      [*(id *)(a1 + 32) resetAndClearState];
    }
    else
    {
      uint64_t v10 = [*(id *)(a1 + 32) securityManager];
      id v11 = [*(id *)(a1 + 32) unlockAuthSession];
      CFStringRef v12 = [*(id *)(a1 + 40) key];
      unsigned int v13 = [v10 stepWithAuthSession:v11 data:v12];

      if (v13)
      {
        [*(id *)(a1 + 32) sendKeyExchangeResponse:v13 sessionID:[*(id *)(a1 + 40) sessionID]];
        [*(id *)(a1 + 32) setWaitingForAuthToken:1];
      }
      else
      {
        long long v20 = paired_unlock_log();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_1002057A4();
        }

        [*(id *)(a1 + 32) sendKeyExchangeResponse:0 sessionID:[*(id *)(a1 + 40) sessionID]];
        [*(id *)(a1 + 32) resetAndClearState];
      }
    }
  }
}

void sub_10020390C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = paired_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_100205978();
  }
}

id sub_100203AB0(uint64_t a1)
{
  uint64_t v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_1002059E0();
  }

  [*(id *)(a1 + 32) invalidateLongTermKeyTimer];
  return [*(id *)(a1 + 32) resetLongTermKeyRequest];
}

void sub_100203C6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = paired_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100205A14();
  }

  unsigned int v5 = *(void **)(a1 + 32);
  uint64_t v6 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
  CFStringRef v10 = @"Failed to send to other device";
  unsigned int v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  int v8 = +[NSError errorWithDomain:v6 code:106 userInfo:v7];
  [v5 notifyEnableStateWithError:v8];
}

void sub_100203EDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = paired_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100205A7C();
  }

  unsigned int v5 = *(void **)(a1 + 32);
  uint64_t v6 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
  CFStringRef v10 = @"Failed to send to other device";
  unsigned int v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  int v8 = +[NSError errorWithDomain:v6 code:106 userInfo:v7];
  [v5 notifyEnableStateWithError:v8];
}

void sub_10020414C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = paired_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100205AE4();
  }

  unsigned int v5 = *(void **)(a1 + 32);
  uint64_t v6 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
  CFStringRef v10 = @"Failed to send to other device";
  unsigned int v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  int v8 = +[NSError errorWithDomain:v6 code:106 userInfo:v7];
  [v5 notifyEnableStateWithError:v8];
}

id sub_1002043E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetAndClearState];
}

id sub_100204518(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetAndClearState];
}

id sub_10020466C(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetStashState];
}

id sub_1002047A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetStashState];
}

void sub_1002048A0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = paired_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_100205B4C();
  }
}

void sub_100204DD8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_100204DF8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018D34((void *)&_mh_execute_header, a2, a3, "Failed to get long term information (key = %@)", a5, a6, a7, a8, 2u);
}

void sub_100204E68(void *a1, uint64_t a2, os_log_t log)
{
  CFStringRef v3 = @"YES";
  if (*a1) {
    CFStringRef v4 = @"YES";
  }
  else {
    CFStringRef v4 = @"NO";
  }
  if (!*(void *)(a2 + 56)) {
    CFStringRef v3 = @"NO";
  }
  int v5 = 138412546;
  CFStringRef v6 = v4;
  __int16 v7 = 2112;
  CFStringRef v8 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Invalid parameters (passcode = %@, handler = %@)", (uint8_t *)&v5, 0x16u);
}

void sub_100204F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = [*(id *)(a2 + 48) idsController];
  [v2 hasDefaultDevice];
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Failed to create unlock session (identifier = %@, has default paired device = %@)", v5, v6, v7, v8, 2u);
}

void sub_100204FD8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Received start ltk with request outstanding", v2, v3, v4, v5, v6);
}

void sub_10020500C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Long-Term key failed on the other side", v2, v3, v4, v5, v6);
}

void sub_100205040()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to sign remote key", v2, v3, v4, v5, v6);
}

void sub_100205074(void *a1)
{
  [a1 hasLongTermKey];
  uint64_t v2 = [a1 longTermKey];
  sub_100204DC0();
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Long-Term key response is missing information (has remote key = %@, remote key = %{private}@)", v5, v6, v7, v8, v9);
}

void sub_100205124(void *a1)
{
  [a1 hasRequestID];
  uint64_t v8 = [a1 requestID];
  sub_100204DD8((void *)&_mh_execute_header, v2, v3, "Incorrect request ID in response (has request ID = %@, response request ID = %@, local request ID  = %@)", v4, v5, v6, v7, 2u);
}

void sub_1002051FC(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error in class A LTK transfer = %d", (uint8_t *)v2, 8u);
}

void sub_100205274()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to sign remote key for enable", v2, v3, v4, v5, v6);
}

void sub_1002052A8(void *a1)
{
  [a1 hasLongTermKey];
  uint64_t v2 = [a1 longTermKey];
  sub_100204DC0();
  sub_100031E50((void *)&_mh_execute_header, v3, v4, "Long term key response is missing information for enable (has remote key = %@, remote key = %{private}@)", v5, v6, v7, v8, v9);
}

void sub_100205358(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error in session created response = %d", (uint8_t *)v2, 8u);
}

void sub_1002053D0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Enabling with keys", v2, v3, v4, v5, v6);
}

void sub_100205404()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not sign remote key", v2, v3, v4, v5, v6);
}

void sub_100205438(void *a1, void *a2, NSObject *a3)
{
  if ([a1 hasToken]) {
    CFStringRef v6 = @"YES";
  }
  else {
    CFStringRef v6 = @"NO";
  }
  uint64_t v7 = [a1 token];
  uint64_t v8 = [a2 securityManager];
  uint8_t v9 = [v8 localLongTermKey];
  if (v9) {
    CFStringRef v10 = @"YES";
  }
  else {
    CFStringRef v10 = @"NO";
  }
  id v11 = [a2 securityManager];
  CFStringRef v12 = [v11 remoteLongTermKey];
  int v14 = 138413058;
  if (v12) {
    CFStringRef v13 = @"YES";
  }
  else {
    CFStringRef v13 = @"NO";
  }
  CFStringRef v15 = v6;
  __int16 v16 = 2112;
  uint64_t v17 = v7;
  __int16 v18 = 2112;
  CFStringRef v19 = v10;
  __int16 v20 = 2112;
  CFStringRef v21 = v13;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Missing information for escrow session (has token = %@, token = %@, local long-term key = %@, remote long-term key = %@)", (uint8_t *)&v14, 0x2Au);
}

void sub_10020558C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not setup escrow session", v2, v3, v4, v5, v6);
}

void sub_1002055C0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to create session", v2, v3, v4, v5, v6);
}

void sub_1002055F4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Creating escrow record failed = %@", v2, v3, v4, v5, v6);
}

void sub_10020565C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Bad signature error indicated bad LTKs on phone side, enabling with new keys", v2, v3, v4, v5, v6);
}

void sub_100205690()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Final step failed", v2, v3, v4, v5, v6);
}

void sub_1002056C4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No session ID in request", v2, v3, v4, v5, v6);
}

void sub_1002056F8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100018D34((void *)&_mh_execute_header, a1, a3, "Lost mode = %@; not unlocking.", a5, a6, a7, a8, 2u);
}

void sub_100205770()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Unlock pairing is disabled", v2, v3, v4, v5, v6);
}

void sub_1002057A4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not step for ephemeral key response", v2, v3, v4, v5, v6);
}

void sub_1002057D8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Could not create unlock session", v2, v3, v4, v5, v6);
}

void sub_10020580C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Device went off wrist waiting for auth token", v2, v3, v4, v5, v6);
}

void sub_100205840(void *a1)
{
  [a1 inPosition];
  [a1 waitingForAuthToken];
  sub_100204DD8((void *)&_mh_execute_header, v2, v3, "Resetting (position = %@, waiting on auth = %@, session auth token = %@)", v4, v5, v6, v7, 2u);
}

void sub_100205910()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Stash: No key is exchange request = %@", v2, v3, v4, v5, v6);
}

void sub_100205978()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to send device unlocked message: %@", v2, v3, v4, v5, v6);
}

void sub_1002059E0()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Transferring long-term keys failed.", v2, v3, v4, v5, v6);
}

void sub_100205A14()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to send class A long term key request: %@", v2, v3, v4, v5, v6);
}

void sub_100205A7C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to send device enable request: %@", v2, v3, v4, v5, v6);
}

void sub_100205AE4()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to send request to create escrow key: %@", v2, v3, v4, v5, v6);
}

void sub_100205B4C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to send state response with CFErrorRef error = %@", v2, v3, v4, v5, v6);
}

uint64_t SDUnlockSessionAuthTokenReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 28) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v28 = 24;
        goto LABEL_54;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v28 = 20;
        goto LABEL_54;
      case 3u:
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x300], 8) = v22;

        continue;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v26 == -1 || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
      v14 |= (unint64_t)(v27 & 0x7F) << v24;
      if ((v27 & 0x80) == 0) {
        goto LABEL_51;
      }
      v24 += 7;
      BOOL v9 = v25++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v28 = 16;
LABEL_54:
    *(_DWORD *)(a1 + v2_Block_object_dispose(&STACK[0x300], 8) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100206BE8(unsigned int a1)
{
  if (a1 >= 0x1A)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"Unknown reason %hu", a1];
  }
  else
  {
    uint64_t v1 = *(&off_1008D0EB8 + (__int16)a1);
  }

  return v1;
}

void sub_100207910(uint64_t a1)
{
  [*(id *)(a1 + 32) resetAndClearState];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v2 securityManager];
  [v2 disableUnlockPairingForSecManager:v3];

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v5 = (const __CFString *)SFPairedUnlockStateChangedNotification;

  CFNotificationCenterPostNotification(DarwinNotifyCenter, v5, 0, 0, 1u);
}

uint64_t sub_100207B20(uint64_t a1)
{
  [*(id *)(a1 + 32) disableUnlockPairing];
  [*(id *)(a1 + 32) sendDisableMessage];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

id sub_100207DE0(uint64_t a1)
{
  uint64_t v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Session timer fired, resetting state", v6, 2u);
  }

  uint64_t v3 = [*(id *)(a1 + 32) metrics];

  if (v3)
  {
    char v4 = [*(id *)(a1 + 32) metrics];
    [v4 setFailureReason:19];
  }
  return [*(id *)(a1 + 32) resetAndClearState];
}

void sub_100207FE0(id a1, NSError *a2)
{
  uint64_t v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_100208B74();
  }
}

void sub_1002080C8(id a1, NSError *a2)
{
  uint64_t v2 = paired_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_100208BA8();
  }
}

void sub_100208B74()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to send device reset message", v2, v3, v4, v5, v6);
}

void sub_100208BA8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Failed to send disable message", v2, v3, v4, v5, v6);
}

void sub_100208BDC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Long-Term Keys failed to transfer, aborting pairing", v2, v3, v4, v5, v6);
}

void sub_100208C10()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No active NR device", v2, v3, v4, v5, v6);
}

void sub_100208C44()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No active IDS device", v2, v3, v4, v5, v6);
}

void sub_100208C78()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "No active NR device for IDS device", v2, v3, v4, v5, v6);
}

void sub_100208CAC()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Switch incomplete, active devices don't match", v2, v3, v4, v5, v6);
}

void sub_100208D38(id a1)
{
  uint64_t v1 = objc_alloc_init(SDNearbyAgent);
  uint64_t v2 = (void *)gSFNearbyAgent;
  gSFNearbyAgent = v1;
}

void sub_100208E48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10020A334(_Unwind_Exception *a1)
{
}

const char *sub_10020A3B8(unsigned int a1)
{
  if (a1 > 0xF) {
    return "?";
  }
  else {
    return off_1008D1468[a1];
  }
}

void sub_10020A3DC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = [a3 identity];

  if (v4) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

void *sub_10020A8CC(void *result)
{
  uint64_t v1 = result[4];
  if (*((_DWORD *)result + 10) != *(_DWORD *)(v1 + 928))
  {
    uint64_t v2 = result;
    if (dword_100969808 <= 40)
    {
      if (dword_100969808 != -1 || (int v3 = _LogCategory_Initialize(), v1 = v2[4], v3))
      {
        LogPrintF();
        uint64_t v1 = v2[4];
      }
    }
    *(_DWORD *)(v1 + 92_Block_object_dispose(&STACK[0x3A0], 8) = *((_DWORD *)v2 + 10);
    uint64_t v4 = v2[4];
    uint64_t v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = 0;

    uint8_t v6 = (void *)v2[4];
    return [v6 _update];
  }
  return result;
}

void *sub_10020AA58(void *result)
{
  int v1 = *((unsigned __int8 *)result + 40);
  uint64_t v2 = result[4];
  if (v1 != *(unsigned __int8 *)(v2 + 920))
  {
    int v3 = result;
    if (dword_100969808 <= 30)
    {
      if (dword_100969808 != -1 || (int v4 = _LogCategory_Initialize(), LOBYTE(v1) = *((unsigned char *)v3 + 40), v2 = v3[4], v4))
      {
        LogPrintF();
        LOBYTE(v1) = *((unsigned char *)v3 + 40);
        uint64_t v2 = v3[4];
      }
    }
    *(unsigned char *)(v2 + 920) = v1;
    uint64_t v5 = (void *)v3[4];
    return [v5 _update];
  }
  return result;
}

void *sub_10020ABC0(void *result)
{
  int v1 = *((unsigned __int8 *)result + 40);
  uint64_t v2 = result[4];
  if (v1 != *(unsigned __int8 *)(v2 + 921))
  {
    int v3 = result;
    if (dword_100969808 <= 30)
    {
      if (dword_100969808 != -1 || (int v4 = _LogCategory_Initialize(), LOBYTE(v1) = *((unsigned char *)v3 + 40), v2 = v3[4], v4))
      {
        LogPrintF();
        LOBYTE(v1) = *((unsigned char *)v3 + 40);
        uint64_t v2 = v3[4];
      }
    }
    *(unsigned char *)(v2 + 921) = v1;
    uint64_t v5 = (void *)v3[4];
    return [v5 _update];
  }
  return result;
}

void *sub_10020AD28(void *result)
{
  int v1 = result;
  uint64_t v2 = result[4];
  int v3 = *(_DWORD *)(v2 + 516);
  if (*((unsigned char *)result + 40)) {
    int v4 = v3 + 1;
  }
  else {
    int v4 = v3 - 1;
  }
  *(_DWORD *)(v2 + 516) = v4;
  uint64_t v5 = result[4];
  int v6 = *(_DWORD *)(v5 + 516);
  int v7 = v6 != 0;
  if (*(unsigned __int8 *)(v5 + 922) == v7)
  {
    if (dword_100969808 <= 30)
    {
      if (dword_100969808 != -1) {
        return (void *)LogPrintF();
      }
      uint64_t result = (void *)_LogCategory_Initialize();
      if (result) {
        return (void *)LogPrintF();
      }
    }
  }
  else
  {
    if (dword_100969808 <= 30)
    {
      if (dword_100969808 != -1 || (int v8 = _LogCategory_Initialize(), v5 = v1[4], v8))
      {
        LogPrintF();
        uint64_t v5 = v1[4];
      }
    }
    *(unsigned char *)(v5 + 922) = v7;
    BOOL v9 = (void *)v1[4];
    return [v9 _update];
  }
  return result;
}

_DWORD *sub_10020AF2C(_DWORD *result)
{
  int v1 = result[10];
  uint64_t v2 = *((void *)result + 4);
  if (v1 != *(_DWORD *)(v2 + 932))
  {
    int v3 = result;
    if (dword_100969808 <= 20)
    {
      if (dword_100969808 != -1 || (int v4 = _LogCategory_Initialize(), v1 = v3[10], v2 = *((void *)v3 + 4), v4))
      {
        LogPrintF();
        int v1 = v3[10];
        uint64_t v2 = *((void *)v3 + 4);
      }
    }
    *(_DWORD *)(v2 + 932) = v1;
    uint64_t v5 = *((void *)v3 + 4);
    int v6 = *(void **)(v5 + 112);
    *(void *)(v5 + 112) = 0;

    int v7 = (void *)*((void *)v3 + 4);
    return [v7 _update];
  }
  return result;
}

unsigned char *sub_10020B080(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[8]) {
    return [result _activate];
  }
  return result;
}

id sub_10020B8C4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleBluetoothDeviceConnected:a2];
}

id sub_10020B8D0(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 552);
  uint64_t state64 = 0;
  notify_get_state(v2, &state64);
  *(void *)(*(void *)(a1 + 32) + 544) = state64;
  if (dword_100969808 > 30 || dword_100969808 == -1 && !_LogCategory_Initialize()) {
    return [*(id *)(a1 + 32) _update:v4];
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 544);
  LogPrintF();
  return [*(id *)(a1 + 32) _update:v5];
}

id sub_10020B97C(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(void **)(a1 + 32);

  return _[v2 _bleAdvertisingAddressChanged];
}

id sub_10020BA00(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_10020BA84(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

uint64_t sub_10020BB08(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100969808 <= 50)
  {
    if (dword_100969808 != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  *(_DWORD *)(*(void *)(v1 + 32) + 676) = -1;
  return result;
}

id sub_10020BB84(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _idsMeDeviceChanged];
}

id sub_10020BC08(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 60) = -1;
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_10020BC98(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _updateCameraState];
  if ([*(id *)(a1 + 32) _shouldDeliverDonStateUpdates]) {
    [*(id *)(a1 + 32) _updateDonState];
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_10020BD38(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_10020BDBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCameraState];
}

id sub_10020BDC4(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

void sub_10020BE48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 952);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020BEBC;
  block[3] = &unk_1008CA4B8;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_10020BEBC(uint64_t a1)
{
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 676) = -1;
  if ([*(id *)(a1 + 32) _shouldDeliverDonStateUpdates]) {
    [*(id *)(a1 + 32) _updateDonState];
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

void sub_10020BF60(id a1, CUBluetoothDevice *a2, id a3)
{
  int v8 = a2;
  id v4 = a3;
  if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v5 = [SDHeadphoneEngravingRequest alloc];
  int v6 = [(CUBluetoothDevice *)v8 addressString];
  int v7 = [(SDHeadphoneEngravingRequest *)v5 initWithBluetoothAddress:v6];

  [(SDHeadphoneEngravingRequest *)v7 setCompletion:v4];
  [(SDHeadphoneEngravingRequest *)v7 start];
}

id sub_10020C0D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_10020C66C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_10020C6FC(void *result)
{
  if (*(void *)(result[4] + 784))
  {
    uint64_t v1 = result;
    if (dword_100969808 <= 40 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    int v2 = (void *)v1[4];
    return [v2 _update];
  }
  return result;
}

void *sub_10020C80C(void *result)
{
  if (*(void *)(result[4] + 784))
  {
    uint64_t v1 = result;
    if (dword_100969808 <= 40 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = v1[4];
    int v3 = *(void **)(v2 + 392);
    *(void *)(v2 + 392) = 0;

    id v4 = (void *)v1[4];
    return [v4 _update];
  }
  return result;
}

id sub_10020E340(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_10020E57C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10020EA7C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activityMonitorUpdate];
}

void *sub_10020EDB4(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  int v3 = (void *)result[98];
  if (!v3) {
    return result;
  }
  if (dword_100969808 <= 40)
  {
    if (dword_100969808 == -1)
    {
      int v4 = _LogCategory_Initialize();
      uint64_t result = *(void **)(a1 + 32);
      if (!v4) {
        goto LABEL_7;
      }
      int v3 = (void *)result[98];
    }
    [v3 carplayConnected];
    LogPrintF();
    uint64_t result = *(void **)(a1 + 32);
  }
LABEL_7:

  return [result _update];
}

void *sub_10020EF30(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  int v3 = (void *)result[98];
  if (!v3) {
    return result;
  }
  if (dword_100969808 <= 40)
  {
    if (dword_100969808 == -1)
    {
      int v4 = _LogCategory_Initialize();
      uint64_t result = *(void **)(a1 + 32);
      if (!v4) {
        goto LABEL_7;
      }
      int v3 = (void *)result[98];
    }
    [v3 multipleUsersLoggedIn];
    LogPrintF();
    uint64_t result = *(void **)(a1 + 32);
  }
LABEL_7:

  return [result _update];
}

unsigned __int8 *sub_10020F098(unsigned __int8 *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 784))
  {
    uint64_t v2 = result;
    *(unsigned char *)(v1 + 44) = result[40];
    [*((id *)result + 4) _enhancedDiscoveryScreenChange:result[40]];
    int v3 = (void *)*((void *)v2 + 4);
    return (unsigned __int8 *)[v3 _update];
  }
  return result;
}

id sub_10020F16C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(id *)(v2 + 784);
  if (result)
  {
    int v4 = *(unsigned __int8 *)(v2 + 56);
    *(unsigned char *)(*(void *)(a1 + 32) + 56) = [result deviceUIUnlocked];
    if (dword_100969808 <= 40 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v4 && *(unsigned char *)(v5 + 56))
    {
      *(void *)(v5 + 40_Block_object_dispose(&STACK[0x3A0], 8) = 0;
      uint64_t v5 = *(void *)(a1 + 32);
    }
    return [(id)v5 _update];
  }
  return result;
}

void *sub_10020F300(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  int v3 = (void *)result[98];
  if (!v3) {
    return result;
  }
  if (dword_100969808 <= 40)
  {
    if (dword_100969808 == -1)
    {
      int v4 = _LogCategory_Initialize();
      id result = *(void **)(a1 + 32);
      if (!v4) {
        goto LABEL_7;
      }
      int v3 = (void *)result[98];
    }
    [v3 mediaAccessControlSetting];
    LogPrintF();
    id result = *(void **)(a1 + 32);
  }
LABEL_7:

  return [result _update];
}

void *sub_10020F438(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  int v3 = (void *)result[98];
  if (!v3) {
    return result;
  }
  if (dword_100969808 <= 40)
  {
    if (dword_100969808 == -1)
    {
      int v4 = _LogCategory_Initialize();
      id result = *(void **)(a1 + 32);
      if (!v4) {
        goto LABEL_7;
      }
      int v3 = (void *)result[98];
    }
    id v6 = [v3 pairedWatchWristState];
    LogPrintF();
    id result = *(void **)(a1 + 32);
  }
LABEL_7:
  [result _idsMeDeviceChanged:v6];
  uint64_t v5 = *(void **)(a1 + 32);

  return [v5 _update];
}

uint64_t sub_10020F59C(uint64_t a1)
{
  char v3 = 0;
  [*(id *)(a1 + 32) _activityMonitorCurrentLevelAndNeedsPoll:0 recentUserActivity:&v3];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10021045C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  char v3 = v2;
  if (v2)
  {
    if (dword_100969808 <= 60)
    {
      uint64_t v5 = v2;
      if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), char v3 = v5, v4))
      {
        LogPrintF();
        char v3 = v5;
      }
    }
  }
}

void sub_1002104F4(uint64_t a1)
{
  if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 136);
  if (v2)
  {
    char v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 136);
    *(void *)(v4 + 136) = 0;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 96) = 0;
  [*(id *)(*(void *)(a1 + 32) + 120) invalidate];
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 120);
  *(void *)(v6 + 120) = 0;
}

void sub_10021092C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v11 = v3;
  if (dword_100969798 <= 50)
  {
    if (dword_100969798 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v11, v4))
    {
      id v10 = v3;
      LogPrintF();
      id v3 = v11;
    }
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (!v5[18])
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + 144);
    *(void *)(v7 + 144) = v6;

    id v3 = v11;
    uint64_t v5 = *(void **)(a1 + 32);
  }
  [v5 _deviceDiscoveryBLEDeviceFound:v3 type:15 v10];
  BOOL v9 = [v11 identifier];
  if (v9) {
    [*(id *)(*(void *)(a1 + 32) + 144) setObject:v11 forKeyedSubscript:v9];
  }
}

void sub_100210A34(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (dword_100969798 <= 50 && (dword_100969798 != -1 || _LogCategory_Initialize()))
  {
    id v4 = v5;
    LogPrintF();
  }
  id v3 = [v5 identifier:v4];
  if (v3) {
    [*(id *)(*(void *)(a1 + 32) + 144) removeObjectForKey:v3];
  }
  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceLost:v5 type:15];
}

void sub_100210B08(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = v5;
  if (dword_100969798 <= 20)
  {
    if (dword_100969798 != -1 || (int v6 = _LogCategory_Initialize(), v5 = v8, v6))
    {
      id v7 = v5;
      LogPrintF();
      id v5 = v8;
    }
  }
  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceChanged:v5 type:15 changes:a3];
}

id sub_100210BC0(uint64_t a1, uint64_t a2)
{
  if (dword_100969808 <= 20 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  id v4 = *(void **)(a1 + 32);

  return _[v4 _deviceDiscoveryBLEScanStateChanged:a2 type:15];
}

void sub_100210C84(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100969808 <= 60)
    {
      id v5 = v2;
      if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
      {
        LogPrintF();
        id v3 = v5;
      }
    }
  }
}

void sub_10021162C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100211650(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100211660(uint64_t a1)
{
}

void sub_100211668(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v7 = a3;
  if (([v7 sessionFlags] & 0x100) == 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

const char *sub_1002116EC(int a1)
{
  id result = "Invalid";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      id result = "ContinuityRemote";
      break;
    case 2:
      id result = "iOSSetup";
      break;
    case 3:
      id result = "Repair";
      break;
    case 4:
      id result = "Setup2";
      break;
    case 5:
      id result = "AudioTuning";
      break;
    case 6:
      id result = "PasswordGranting";
      break;
    case 7:
      id result = "PasswordSharing";
      break;
    case 8:
      id result = "System";
      break;
    case 9:
      id result = "AutoUnlock";
      break;
    case 10:
      id result = "WHASetup";
      break;
    case 11:
      id result = "AppleTVSetup";
      break;
    case 12:
      id result = "DeviceDiagnostics";
      break;
    case 13:
      id result = "RemoteAutoFill";
      break;
    case 14:
      id result = "ApplePay";
      break;
    case 15:
      id result = "CompanionLinkProx";
      break;
    case 16:
      id result = "RemoteManagement";
      break;
    case 17:
      id result = "RemoteAutoFillPong";
      break;
    case 18:
      id result = "RemoteDisplay";
      break;
    case 19:
      id result = "ContinuityKeyboard";
      break;
    case 20:
      id result = "PhoneCallHandoff";
      break;
    case 21:
      id result = "ShareAudio";
      break;
    case 22:
      id result = "AuthenticateAccounts";
      break;
    case 23:
      goto LABEL_5;
    case 24:
      id result = "HasInvitations";
      break;
    case 25:
      id result = "AcceptedInvitation";
      break;
    default:
      if (a1 == 127) {
        id result = "Debug";
      }
      else {
LABEL_5:
      }
        id result = "?";
      break;
  }
  return result;
}

void sub_1002121CC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100969808 <= 60)
    {
      id v5 = v2;
      if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
      {
        LogPrintF();
        id v3 = v5;
      }
    }
  }
}

void *sub_100212C7C(void *result)
{
  if (result[4] == *(void *)(result[5] + 208))
  {
    uint64_t v1 = result;
    if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(void **)(v1[5] + 208);
    if (v2)
    {
      id v3 = v2;
      dispatch_source_cancel(v3);
      uint64_t v4 = v1[5];
      id v5 = *(void **)(v4 + 208);
      *(void *)(v4 + 20_Block_object_dispose(&STACK[0x3A0], 8) = 0;
    }
    int v6 = (void *)v1[5];
    return [v6 _update];
  }
  return result;
}

const char *sub_100213568(unsigned int a1)
{
  if (a1 > 0x41) {
    return "?";
  }
  else {
    return off_1008D1740[(char)a1];
  }
}

void sub_100214830(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100969808 <= 90)
    {
      id v6 = v3;
      if (dword_100969808 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v4 = v6, v5))
      {
        sub_1002116EC(*(unsigned __int8 *)(a1 + 58));
        [*(id *)(a1 + 32) length];
        [*(id *)(a1 + 40) length];
        LogPrintF();
        uint64_t v4 = v6;
      }
    }
  }
}

void sub_100214940(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100969808 <= 90)
    {
      id v6 = v3;
      if (dword_100969808 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v4 = v6, v5))
      {
        sub_1002116EC(*(unsigned __int8 *)(a1 + 58));
        [*(id *)(a1 + 32) length];
        [*(id *)(a1 + 40) length];
        LogPrintF();
        uint64_t v4 = v6;
      }
    }
  }
}

void sub_100214A50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100969808 <= 90)
    {
      id v6 = v3;
      if (dword_100969808 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v4 = v6, v5))
      {
        sub_1002116EC(*(unsigned __int8 *)(a1 + 49));
        [*(id *)(a1 + 32) length];
        LogPrintF();
        uint64_t v4 = v6;
      }
    }
  }
}

void sub_100214DB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v11 = v3;
  if (dword_100969808 <= 50)
  {
    if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v11, v4))
    {
      id v10 = v3;
      LogPrintF();
      id v3 = v11;
    }
  }
  int v5 = *(void **)(a1 + 32);
  if (!v5[28])
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 224);
    *(void *)(v7 + 224) = v6;

    id v3 = v11;
    int v5 = *(void **)(a1 + 32);
  }
  [v5 _deviceDiscoveryBLEDeviceFound:v3 type:16 v10];
  uint64_t v9 = [v11 identifier];
  if (v9) {
    [*(id *)(*(void *)(a1 + 32) + 224) setObject:v11 forKeyedSubscript:v9];
  }
}

void sub_100214EBC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    id v4 = v5;
    LogPrintF();
  }
  id v3 = [v5 identifier:v4];
  if (v3) {
    [*(id *)(*(void *)(a1 + 32) + 224) removeObjectForKey:v3];
  }
  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceLost:v5 type:16];
}

void sub_100214F90(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = v5;
  if (dword_100969808 <= 20)
  {
    if (dword_100969808 != -1 || (int v6 = _LogCategory_Initialize(), v5 = v8, v6))
    {
      id v7 = v5;
      LogPrintF();
      id v5 = v8;
    }
  }
  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceChanged:v5 type:16 changes:a3];
}

id sub_100215048(uint64_t a1, uint64_t a2)
{
  if (dword_100969808 <= 20 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  id v4 = *(void **)(a1 + 32);

  return _[v4 _deviceDiscoveryBLEScanStateChanged:a2 type:16];
}

void sub_10021510C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100969808 <= 60)
    {
      id v5 = v2;
      if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
      {
        LogPrintF();
        id v3 = v5;
      }
    }
  }
}

void sub_100215720(uint64_t a1, void *a2)
{
  id v9 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 952));
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 280))
  {
    if (*(unsigned char *)(v3 + 704))
    {
      int v4 = v9;
      if (dword_100969798 > 30) {
        goto LABEL_13;
      }
      if (dword_100969798 == -1)
      {
        int v5 = _LogCategory_Initialize();
        int v4 = v9;
        if (!v5) {
          goto LABEL_13;
        }
      }
      id v8 = [v4 advertisementFields];
      id v7 = v9;
      LogPrintF();
    }
    else
    {
      int v4 = v9;
      if (dword_100969798 > 30) {
        goto LABEL_13;
      }
      if (dword_100969798 == -1)
      {
        int v6 = _LogCategory_Initialize();
        int v4 = v9;
        if (!v6) {
          goto LABEL_13;
        }
      }
      id v7 = v4;
      LogPrintF();
    }
    int v4 = v9;
LABEL_13:
    [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceFound:v4 type:7 v7 v8];
  }
}

void sub_100215864(uint64_t a1, void *a2)
{
  id v5 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 952));
  if (*(unsigned char *)(*(void *)(a1 + 32) + 704))
  {
    if (dword_100969798 <= 30 && (dword_100969798 != -1 || _LogCategory_Initialize()))
    {
      int v4 = [v5 advertisementFields];
      id v3 = v5;
      LogPrintF();
    }
  }
  else if (dword_100969798 <= 30 && (dword_100969798 != -1 || _LogCategory_Initialize()))
  {
    id v3 = v5;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceLost:v5 type:7 v3 v4];
}

void sub_100215990(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 952));
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 280))
  {
    if (*(unsigned char *)(v5 + 704))
    {
      int v6 = v11;
      if (dword_100969798 > 30) {
        goto LABEL_13;
      }
      if (dword_100969798 == -1)
      {
        int v7 = _LogCategory_Initialize();
        int v6 = v11;
        if (!v7) {
          goto LABEL_13;
        }
      }
      id v10 = [v6 advertisementFields];
      id v9 = v11;
      LogPrintF();
    }
    else
    {
      int v6 = v11;
      if (dword_100969798 > 30) {
        goto LABEL_13;
      }
      if (dword_100969798 == -1)
      {
        int v8 = _LogCategory_Initialize();
        int v6 = v11;
        if (!v8) {
          goto LABEL_13;
        }
      }
      id v9 = v6;
      LogPrintF();
    }
    int v6 = v11;
LABEL_13:
    [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceChanged:v6 type:7 changes:a3, v9, v10];
  }
}

id sub_100215AE4(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 952));
  if (dword_100969808 <= 20 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v4 = *(void **)(a1 + 32);

  return _[v4 _deviceDiscoveryBLEScanStateChanged:a2 type:7];
}

void sub_100215BB4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100969808 <= 60)
    {
      uint64_t v5 = v2;
      if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
      {
        LogPrintF();
        id v3 = v5;
      }
    }
  }
}

id sub_100215F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _btPipeHandleFrameType:a2 data:a3];
}

void sub_10021651C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100969808 <= 60)
    {
      uint64_t v5 = v2;
      if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
      {
        LogPrintF();
        id v3 = v5;
      }
    }
  }
}

id sub_10021668C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void *sub_100216828(void *result)
{
  if (*(void *)(result[4] + 784))
  {
    uint64_t v1 = result;
    if (dword_100969808 <= 40 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = (void *)v1[4];
    return [v2 _update];
  }
  return result;
}

void sub_1002171CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) deviceFilter];
  id v3 = *(void **)(a1 + 40);
  id v4 = v2;
  id v5 = v3;
  if (v4 == v5)
  {

    goto LABEL_12;
  }
  int v6 = v5;
  if ((v4 == 0) != (v5 != 0))
  {
    unsigned __int8 v7 = [v4 isEqual:v5];

    if (v7) {
      goto LABEL_12;
    }
  }
  else
  {
  }
  if (dword_100969808 <= 10 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v43 = *(void *)(a1 + 32);
    uint64_t v47 = *(void *)(a1 + 40);
    LogPrintF();
    [*(id *)(a1 + 32) setDeviceFilter:*(void *)(a1 + 40), v43, v47];
  }
  else
  {
    [*(id *)(a1 + 32) setDeviceFilter:*(void *)(a1 + 40), v42, v46];
  }
LABEL_12:
  int v8 = *(_DWORD *)(a1 + 104);
  if (v8 != [*(id *)(a1 + 32) changeFlags])
  {
    if (dword_100969808 <= 10 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      id v9 = *(void **)(a1 + 32);
      id v48 = [v9 changeFlags];
      uint64_t v55 = *(unsigned int *)(a1 + 104);
      LogPrintF();
      [*(id *)(a1 + 32) setChangeFlags:*(unsigned int *)(a1 + 104), v9, v48, v55];
    }
    else
    {
      [*(id *)(a1 + 32) setChangeFlags:*(unsigned int *)(a1 + 104), v42, v46, v54];
    }
  }
  id v10 = [*(id *)(a1 + 32) payloadFilterData];
  id v11 = *(void **)(a1 + 48);
  id v12 = v10;
  id v13 = v11;
  if (v12 == v13)
  {

    goto LABEL_25;
  }
  uint64_t v14 = v13;
  if ((v12 == 0) == (v13 != 0))
  {

    goto LABEL_24;
  }
  unsigned __int8 v15 = [v12 isEqual:v13];

  if ((v15 & 1) == 0) {
LABEL_24:
  }
    [*(id *)(a1 + 32) setPayloadFilterData:*(void *)(a1 + 48) mask:*(void *)(a1 + 48)];
LABEL_25:
  id v16 = *(id *)(a1 + 80);
  if (v16 != [*(id *)(a1 + 32) rssiThreshold])
  {
    if (dword_100969808 <= 10 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v44 = *(void *)(a1 + 32);
      uint64_t v49 = *(void *)(a1 + 80);
      LogPrintF();
      [*(id *)(a1 + 32) setRssiThreshold:*(void *)(a1 + 80), v44, v49];
    }
    else
    {
      [*(id *)(a1 + 32) setRssiThreshold:v42, v46];
    }
  }
  int v17 = *(unsigned __int8 *)(a1 + 108);
  if (v17 != [*(id *)(a1 + 32) scanCache])
  {
    if (dword_100969808 <= 10 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      char v18 = *(void **)(a1 + 32);
      unsigned int v19 = [v18 scanCache];
      CFStringRef v20 = @"NO";
      if (v19) {
        CFStringRef v21 = @"YES";
      }
      else {
        CFStringRef v21 = @"NO";
      }
      if (*(unsigned char *)(a1 + 108)) {
        CFStringRef v20 = @"YES";
      }
      CFStringRef v50 = v21;
      CFStringRef v56 = v20;
      LogPrintF();
      [*(id *)(a1 + 32) setScanCache:*(unsigned __int8 *)(a1 + 108), v18, v50, v56];
    }
    else
    {
      [*(id *)(a1 + 32) setScanCache:*(unsigned __int8 *)(a1 + 108), v42, v46, v54];
    }
  }
  id v22 = *(id *)(a1 + 88);
  if (v22 != [*(id *)(a1 + 32) scanRate])
  {
    if (dword_100969808 > 10 || dword_100969808 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_82;
    }
    uint64_t v23 = *(void **)(a1 + 32);
    uint64_t v24 = (uint64_t)[v23 scanRate];
    if (v24 > 19)
    {
      if (v24 > 39)
      {
        if (v24 == 40)
        {
          unsigned int v25 = "High";
          goto LABEL_64;
        }
        if (v24 == 50)
        {
          unsigned int v25 = "Aggressive";
          goto LABEL_64;
        }
      }
      else
      {
        if (v24 == 20)
        {
          unsigned int v25 = "Normal";
          goto LABEL_64;
        }
        if (v24 == 30)
        {
          unsigned int v25 = "HighNormal";
          goto LABEL_64;
        }
      }
LABEL_63:
      unsigned int v25 = "?";
    }
    else
    {
      unsigned int v25 = "Invalid";
      switch(v24)
      {
        case 0:
          break;
        case 1:
          unsigned int v25 = "BackgroundOld";
          break;
        case 2:
          unsigned int v25 = "NormalOld";
          break;
        case 3:
          unsigned int v25 = "HighOld";
          break;
        case 4:
          unsigned int v25 = "AggressiveOld";
          break;
        case 10:
          unsigned int v25 = "Background";
          break;
        default:
          goto LABEL_63;
      }
    }
LABEL_64:
    uint64_t v26 = *(void *)(a1 + 88);
    if (v26 <= 19)
    {
      char v27 = "Invalid";
      switch(v26)
      {
        case 0:
          goto LABEL_81;
        case 1:
          char v27 = "BackgroundOld";
          break;
        case 2:
          char v27 = "NormalOld";
          break;
        case 3:
          char v27 = "HighOld";
          break;
        case 4:
          char v27 = "AggressiveOld";
          break;
        case 10:
          char v27 = "Background";
          break;
        default:
          goto LABEL_80;
      }
      goto LABEL_81;
    }
    if (v26 > 39)
    {
      if (v26 == 40)
      {
        char v27 = "High";
        goto LABEL_81;
      }
      if (v26 == 50)
      {
        char v27 = "Aggressive";
        goto LABEL_81;
      }
    }
    else
    {
      if (v26 == 20)
      {
        char v27 = "Normal";
        goto LABEL_81;
      }
      if (v26 == 30)
      {
        char v27 = "HighNormal";
LABEL_81:
        uint64_t v46 = v25;
        __int16 v54 = v27;
        unsigned int v42 = v23;
        LogPrintF();
LABEL_82:
        [*(id *)(a1 + 32) setScanRate:*(void *)(a1 + 88), v42, v46, v54];
        goto LABEL_83;
      }
    }
LABEL_80:
    char v27 = "?";
    goto LABEL_81;
  }
LABEL_83:
  id v28 = *(id *)(a1 + 96);
  if (v28 != [*(id *)(a1 + 32) rescanIntervalScreenOff])
  {
    if (dword_100969808 <= 10 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      id v29 = *(void **)(a1 + 32);
      id v51 = [v29 rescanIntervalScreenOff];
      uint64_t v57 = *(void *)(a1 + 96);
      LogPrintF();
      [*(id *)(a1 + 32) setRescanIntervalScreenOff:v29, v51, v57];
    }
    else
    {
      [*(id *)(a1 + 32) setRescanIntervalScreenOff:*(void *)(a1 + 96), v42, v46, v54];
    }
  }
  unint64_t v30 = [*(id *)(a1 + 32) trackedPeers];
  char v31 = *(void **)(a1 + 56);
  id v32 = v30;
  id v33 = v31;
  if (v32 == v33)
  {

    goto LABEL_100;
  }
  uint64_t v34 = v33;
  if ((v32 == 0) != (v33 != 0))
  {
    unsigned __int8 v35 = [v32 isEqual:v33];

    if (v35) {
      goto LABEL_100;
    }
  }
  else
  {
  }
  if (dword_100969808 <= 10 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v45 = *(void *)(a1 + 32);
    uint64_t v52 = *(void *)(a1 + 56);
    LogPrintF();
    [*(id *)(a1 + 32) setTrackedPeers:*(void *)(a1 + 56), v45, v52];
  }
  else
  {
    [*(id *)(a1 + 32) setTrackedPeers:*(void *)(a1 + 56), v42, v46];
  }
LABEL_100:
  char v36 = [*(id *)(a1 + 32) useCases];
  char v37 = *(void **)(a1 + 64);
  id v58 = v36;
  id v38 = v37;
  if (v58 == v38)
  {
  }
  else
  {
    if ((v58 == 0) != (v38 != 0))
    {
      unsigned __int8 v39 = [v58 isEqual:v38];

      if (v39) {
        return;
      }
    }
    else
    {
    }
    if (dword_100969808 <= 10 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      id v53 = [*(id *)(a1 + 72) _useCasesToHexString:*(void *)(a1 + 64)];
      LogPrintF();
    }
    uint64_t v40 = *(void *)(a1 + 64);
    char v41 = *(void **)(a1 + 32);
    [v41 setUseCases:v40];
  }
}

void sub_100218F68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(NSObject **)(v7 + 952);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10021907C;
    block[3] = &unk_1008CA640;
    void block[4] = v7;
    id v10 = v5;
    dispatch_async(v8, block);
  }
}

id sub_10021907C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 693) = [*(id *)(a1 + 40) isMounted];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _cameraStateChanged];
}

void *sub_100219560(void *result)
{
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 693))
  {
    float v2 = *(float *)(v1 + 696);
    if (v2 != -1.0)
    {
      id v3 = result;
      float v4 = *(float *)(v1 + 696);
      if (*(unsigned char *)(v1 + 792))
      {
        float v5 = *(float *)(v1 + 700);
        if (v5 == -1.0) {
          return result;
        }
        float v4 = *(float *)(v1 + 696);
        if (v5 > v2) {
          float v4 = *(float *)(v1 + 700);
        }
      }
      if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      BOOL v6 = v4 > 7.0 || v4 < 0.0;
      *(unsigned char *)(v3[4] + 694) = v6;
      uint64_t v7 = (void *)v3[4];
      return [v7 _updateCameraState];
    }
  }
  return result;
}

void sub_100219958(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100219970(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if ([v14 isEqualToString:@"RLuxOutput"])
  {
    id v6 = v5;
    uint64_t v7 = [v6 objectForKeyedSubscript:@"status"];
    id v8 = [v7 intValue];
    if (v8)
    {
      if (dword_100969808 <= 30)
      {
        double v9 = *(double *)&v8;
        if (dword_100969808 != -1 || _LogCategory_Initialize())
        {
          double v13 = v9;
          LogPrintF();
        }
      }
    }
    else
    {
      id v11 = [v6 objectForKeyedSubscript:@"lux"];
      [v11 floatValue];
      *(_DWORD *)(*(void *)(a1 + 32) + 700) = v12;
      if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize()))
      {
        double v13 = *(float *)(*(void *)(a1 + 32) + 700);
        LogPrintF();
      }
      [*(id *)(a1 + 32) _useLuxValue:v13];
    }
    [*(id *)(*(void *)(a1 + 32) + 296) unregisterNotificationForKey:@"RLuxOutput" withIdentifier:v13];
  }
  else if ([v14 isEqualToString:@"Lux"])
  {
    [v5 floatValue];
    *(_DWORD *)(*(void *)(a1 + 32) + 696) = v10;
    [*(id *)(*(void *)(a1 + 32) + 296) setProperty:&__kCFBooleanFalse forKey:@"ActivateALS"];
    [*(id *)(*(void *)(a1 + 32) + 296) unregisterNotificationForKey:@"Lux"];
    if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      double v13 = *(float *)(*(void *)(a1 + 32) + 696);
      LogPrintF();
    }
    [*(id *)(a1 + 32) _useLuxValue:v13];
  }
}

id sub_100219C5C(uint64_t a1)
{
  id result = (id)*(unsigned int *)(*(void *)(a1 + 32) + 856);
  if (result != -1)
  {
    uint64_t state64 = 0;
    id result = (id)notify_get_state((int)result, &state64);
    if (state64 == 3)
    {
      return [*(id *)(a1 + 32) _notifyCameraConfigChange];
    }
    else if (state64 == 2)
    {
      return [*(id *)(a1 + 32) _checkConditionsForEnhancedDiscovery];
    }
    else if ((state64 & 0xFFFFFFFE) == 4)
    {
      [*(id *)(a1 + 32) _discoverySessionStateChange:state64 == 4];
      [*(id *)(a1 + 32) _checkConditionsForEnhancedDiscovery];
      return [*(id *)(a1 + 32) _cameraStateChanged];
    }
  }
  return result;
}

void sub_10021A04C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    unsigned __int8 v15 = *(void **)(a1 + 32);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_10021A384;
    v21[3] = &unk_1008D1220;
    id v22 = v15;
    id v16 = *(id *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    id v23 = v16;
    uint64_t v24 = v17;
    [v22 sendRequestID:@"com.sharing.donState" request:&off_100906CC0 options:0 responseHandler:v21];

    id v6 = v22;
    goto LABEL_23;
  }
  if (dword_100969808 <= 90 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    if (*(unsigned char *)(a1 + 56)) {
      float v4 = "yes";
    }
    else {
      float v4 = "no";
    }
    id v18 = v3;
    unsigned int v19 = v4;
    LogPrintF();
  }
  [*(id *)(a1 + 32) invalidate:v18, v19];
  if (*(unsigned char *)(a1 + 56))
  {
    id v5 = [*(id *)(a1 + 40) idsDeviceIdentifier];

    if (v5)
    {
      id v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(*(void *)(a1 + 48) + 952));
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10021A378;
      handler[3] = &unk_1008CA640;
      int8x16_t v20 = *(int8x16_t *)(a1 + 40);
      id v7 = (id)v20.i64[0];
      int8x16_t v26 = vextq_s8(v20, v20, 8uLL);
      dispatch_source_set_event_handler(v6, handler);
      SFDispatchTimerSet();
      if (!*(void *)(*(void *)(a1 + 48) + 504))
      {
        id v8 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v9 = *(void *)(a1 + 48);
        int v10 = *(void **)(v9 + 504);
        *(void *)(v9 + 504) = v8;
      }
      id v11 = [*(id *)(a1 + 40) idsDeviceIdentifier];
      int v12 = [*(id *)(*(void *)(a1 + 48) + 504) objectForKeyedSubscript:v11];

      if (v12)
      {
        double v13 = [*(id *)(*(void *)(a1 + 48) + 504) objectForKeyedSubscript:v11];
        id v14 = v13;
        if (v13)
        {
          dispatch_source_cancel(v13);
        }
        [*(id *)(*(void *)(a1 + 48) + 504) setObject:0 forKeyedSubscript:v11];
      }
      [*(id *)(*(void *)(a1 + 48) + 504) setObject:v6 forKeyedSubscript:v11];
      dispatch_resume(v6);

LABEL_23:
    }
  }
}

id sub_10021A378(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleRetryTimerForDevice:*(void *)(a1 + 40)];
}

void sub_10021A384(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v15 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    if (dword_100969808 <= 90 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      [*(id *)(a1 + 32) invalidate:v8];
    }
    else
    {
      [*(id *)(a1 + 32) invalidate:v14];
    }
  }
  else
  {
    uint64_t v9 = [*(id *)(a1 + 40) idsDeviceIdentifier];
    if (v9)
    {
      int v10 = *(void **)(*(void *)(a1 + 48) + 480);
      if (!v10)
      {
        id v11 = objc_alloc_init((Class)NSMutableSet);
        uint64_t v12 = *(void *)(a1 + 48);
        double v13 = *(void **)(v12 + 480);
        *(void *)(v12 + 480) = v11;

        int v10 = *(void **)(*(void *)(a1 + 48) + 480);
      }
      [v10 addObject:v9];
    }
    [*(id *)(a1 + 32) invalidate];
  }
}

void sub_10021A5FC(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = [v9 model];
  unsigned int v4 = [v3 containsString:@"Watch"];

  id v5 = v9;
  if (v4)
  {
    if (dword_100969808 <= 30)
    {
      if (dword_100969808 != -1 || (int v6 = _LogCategory_Initialize(), v5 = v9, v6))
      {
        id v8 = v5;
        LogPrintF();
        id v5 = v9;
      }
    }
    id v7 = [v5 idsDeviceIdentifier:v8];
    if (([*(id *)(*(void *)(a1 + 32) + 480) containsObject:v7] & 1) == 0) {
      [*(id *)(a1 + 32) _deliverDonnedEventToDevice:v9 allowRetry:1];
    }

    id v5 = v9;
  }
}

void sub_10021A704(uint64_t a1, void *a2)
{
  id v3 = [a2 idsDeviceIdentifier];
  if (v3)
  {
    unsigned int v4 = v3;
    [*(id *)(*(void *)(a1 + 32) + 480) removeObject:v3];
    id v3 = v4;
  }
}

void sub_10021A768(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v7 = v3;
    if (dword_100969808 <= 90 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      id v6 = v7;
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 32) + 16) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0;

    id v3 = v7;
  }
}

void sub_10021AA10(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100969808 <= 90 && (dword_100969808 != -1 || _LogCategory_Initialize()))
    {
      id v5 = v3;
      LogPrintF();
    }
    [*(id *)(a1 + 32) invalidate:v5];
    if (*(void *)(a1 + 40)) {
      [*(id *)(*(void *)(a1 + 48) + 480) removeObject:];
    }
    [*(id *)(a1 + 48) _invalidateWatchDiscoveryIfNeeded];
  }
  else
  {
    if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v4 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_10021AB94;
    v6[3] = &unk_1008D1220;
    int8x16_t v7 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
    id v8 = v4;
    [v8 sendRequestID:@"com.sharing.donState" request:&off_100906CE8 options:0 responseHandler:v6];
  }
}

void sub_10021AB94(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8 && dword_100969808 <= 90 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    id v12 = v8;
    LogPrintF();
  }
  id v9 = [*(id *)(*(void *)(a1 + 32) + 504) objectForKeyedSubscript:*(void *)(a1 + 40), v12];

  if (v9)
  {
    int v10 = [*(id *)(*(void *)(a1 + 32) + 504) objectForKeyedSubscript:*(void *)(a1 + 40)];
    id v11 = v10;
    if (v10)
    {
      dispatch_source_cancel(v10);
    }
    [*(id *)(*(void *)(a1 + 32) + 504) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }
  [*(id *)(a1 + 48) invalidate];
  if (*(void *)(a1 + 40)) {
    [*(id *)(*(void *)(a1 + 32) + 480) removeObject:];
  }
  [*(id *)(a1 + 32) _invalidateWatchDiscoveryIfNeeded];
}

void sub_10021BB5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v4 = [v6 bluetoothStateChangedHandler];

  if (v4)
  {
    id v5 = [v6 bluetoothStateChangedHandler];
    v5[2](v5, *(void *)(a1 + 32));
  }
}

id sub_10021DC38(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _enhancedDiscoveryTimerFired];
}

void sub_10021E7BC(uint64_t a1)
{
  [*(id *)(a1 + 32) _checkConditionsForEnhancedDiscovery];
  float v2 = *(void **)(*(void *)(a1 + 32) + 344);
  if (v2)
  {
    id v5 = v2;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 344);
    *(void *)(v3 + 344) = 0;
  }
}

id sub_10021EBDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _deviceDiscoveryRequestStart:*(void *)(a1 + 40)];
}

void sub_10021F3EC(uint64_t a1)
{
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 472);
  id v3 = [v2 countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v3)
  {
    id v4 = v3;
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = *(void *)v37;
    do
    {
      for (CFIndex i = 0; i != v4; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v37 != v8) {
          objc_enumerationMutation(v2);
        }
        int v10 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        if (([v10 discoveryFlags] & 0x10) != 0) {
          v5 |= [v10 overrideScreenOff];
        }
        if ([v10 discoveryFlags]) {
          v6 |= [v10 overrideScreenOff];
        }
        if (([v10 discoveryFlags] & 2) != 0) {
          v7 |= [v10 overrideScreenOff];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v36 objects:v41 count:16];
    }
    while (v4);
  }
  else
  {
    LOBYTE(v5) = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v7) = 0;
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 433) = v5 & 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 449) = v6 & 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 465) = v7 & 1;
  unsigned int v11 = [*(id *)(a1 + 40) discoveryFlags];
  char v12 = v11;
  if ((v11 & 0x20) != 0)
  {
    uint64_t v13 = [*(id *)(a1 + 32) idsBluetoothDeviceIDsForSharing];
LABEL_24:
    uint64_t v14 = (void *)v13;
    [*(id *)(a1 + 40) setDeviceFilter:v13];

    goto LABEL_25;
  }
  if ((v11 & 0x100000) != 0)
  {
    uint64_t v13 = [*(id *)(a1 + 32) _idsBluetoothDeviceIDsForMe];
    goto LABEL_24;
  }
  if ((v11 & 0x200000) != 0)
  {
    uint64_t v13 = [*(id *)(a1 + 32) _idsBluetoothDeviceIDsForHomePods];
    goto LABEL_24;
  }
  if ((v11 & 0x1000000) != 0) {
    [*(id *)(a1 + 32) _unlockDeviceFilterChangedForRequest:*(void *)(a1 + 40)];
  }
LABEL_25:
  id v15 = [*(id *)(a1 + 40) deviceFoundHandler];
  if (v15)
  {
  }
  else
  {
    id v16 = [*(id *)(a1 + 40) deviceLostHandler];

    if (!v16)
    {
LABEL_30:
      id v17 = 0;
      goto LABEL_34;
    }
  }
  if ((v12 & 0x10) != 0)
  {
    uint64_t v18 = 424;
  }
  else
  {
    if ((v12 & 1) == 0) {
      goto LABEL_30;
    }
    uint64_t v18 = 440;
  }
  id v17 = *(id *)(*(void *)(a1 + 32) + v18);
LABEL_34:
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v19 = v17;
  id v20 = [v19 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v33;
    do
    {
      for (j = 0; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v33 != v22) {
          objc_enumerationMutation(v19);
        }
        uint64_t v24 = *(void *)(*((void *)&v32 + 1) + 8 * (void)j);
        unsigned int v25 = [v19 objectForKeyedSubscript:v24];
        if (v25)
        {
          uint64_t v26 = [*(id *)(a1 + 40) deviceFilter];
          if (v26
            && (char v27 = (void *)v26,
                [*(id *)(a1 + 40) deviceFilter],
                id v28 = objc_claimAutoreleasedReturnValue(),
                unsigned __int8 v29 = [v28 containsObject:v24],
                v28,
                v27,
                (v29 & 1) == 0))
          {
            uint64_t v30 = [*(id *)(a1 + 40) deviceLostHandler];
          }
          else
          {
            uint64_t v30 = [*(id *)(a1 + 40) deviceFoundHandler];
          }
          char v31 = (void *)v30;
          if (v30) {
            (*(void (**)(uint64_t, void *))(v30 + 16))(v30, v25);
          }
        }
      }
      id v21 = [v19 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v21);
  }

  [*(id *)(a1 + 32) _update];
}

void sub_10022005C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  NSPrintF();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v1 _deviceDiscoveryFastScanStop:v2 reset:v4 reason:v3];
}

void sub_1002208F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_10022091C(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v10 = a2;
  id v7 = a3;
  uint64_t v8 = [v7 rapportIdentifier];
  unsigned int v9 = [v8 isEqual:a1[4]];

  if (v9 && ([v10 isEqual:a1[5]] & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
    *a4 = 1;
  }
}

const char *sub_100221028(int a1)
{
  if (a1 > 99)
  {
    switch(a1)
    {
      case 'd':
        return "B238SetupAfterWiFi";
      case 'e':
        return "B389SetupFromFindMy";
      case 'f':
        return "B389SetupDone";
      default:
        return "?";
    }
  }
  else
  {
    id result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        id result = "ATVSetup";
        break;
      case 4:
        id result = "MobileBackup";
        break;
      case 5:
        id result = "WatchSetup";
        break;
      case 6:
        id result = "ATVPair";
        break;
      case 7:
        id result = "InternetRelay";
        break;
      case 8:
        id result = "WiFiPassword";
        break;
      case 9:
        id result = "iOSSetup";
        break;
      case 10:
        id result = "Repair";
        break;
      case 11:
        id result = "LegacyHomePodSetup";
        break;
      case 12:
        id result = "ApplePay";
        break;
      case 13:
        id result = "WHASetup";
        break;
      case 14:
        id result = "DevToolsPair";
        break;
      case 17:
        id result = "DDPing";
        break;
      case 18:
        id result = "DDPong";
        break;
      case 19:
        id result = "RemoteAutoFill";
        break;
      case 20:
        id result = "CompanionLinkProx";
        break;
      case 21:
        id result = "RemoteManagement";
        break;
      case 22:
        id result = "RemoteAutoFillPong";
        break;
      case 24:
        id result = "AccessorySetup";
        break;
      case 25:
        id result = "TVLS";
        break;
      case 27:
        id result = "ShareAudio";
        break;
      case 28:
        id result = "AppSignIn";
        break;
      case 29:
        id result = "Fitness";
        break;
      case 30:
        id result = "TVCCS";
        break;
      case 31:
        id result = "TVSA";
        break;
      case 32:
        id result = "AuthenticateAccounts";
        break;
      case 33:
        id result = "HomePodSetup";
        break;
      case 34:
        id result = "CompanionAuthentication";
        break;
      case 36:
        id result = "dovePeace";
        break;
      case 43:
        id result = "AuthenticateAccountsV2";
        break;
      case 50:
        id result = "NeedsRDLink";
        break;
      case 51:
        id result = "NeedsCLink";
        break;
      case 52:
        id result = "Goodbye";
        break;
      case 53:
        id result = "PointToShare";
        break;
      case 55:
        id result = "AUAction";
        break;
      case 56:
        id result = "AcceptedInvitations";
        break;
      case 84:
        id result = "HasInvitations";
        break;
      default:
        return "?";
    }
  }
  return result;
}

id sub_100221E3C(uint64_t a1)
{
  if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _identificationGetIdentities];
}

void sub_100222090(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 952);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_100222170;
  v10[3] = &unk_1008CA770;
  id v11 = *(id *)(a1 + 40);
  id v12 = v6;
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = v5;
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

void sub_100222170(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  if (*(void *)(a1 + 40))
  {
    if (dword_100969808 <= 90 && (dword_100969808 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    return;
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(v2 + 968);
  *(void *)(v2 + 96_Block_object_dispose(&STACK[0x3A0], 8) = 0;

  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v4 = *(id *)(a1 + 56);
  id v5 = [v4 countByEnumeratingWithState:&v41 objects:v46 count:16];
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_24;
  }
  id v6 = v5;
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)v42;
  do
  {
    for (CFIndex i = 0; i != v6; CFIndex i = (char *)i + 1)
    {
      if (*(void *)v42 != v8) {
        objc_enumerationMutation(v4);
      }
      id v10 = *(void **)(*((void *)&v41 + 1) + 8 * i);
      if ([v10 type] == 1)
      {
        uint64_t v11 = *(void *)(a1 + 48);
        id v12 = *(void **)(v11 + 960);
        if (v12)
        {
          uint64_t v7 = (uint64_t)[v12 compareWithRPIdentity:v10];
          uint64_t v11 = *(void *)(a1 + 48);
        }
        else
        {
          uint64_t v7 = 2048;
        }
        uint64_t v13 = (id *)(v11 + 960);
        goto LABEL_17;
      }
      if ([v10 type] == 14)
      {
        uint64_t v13 = (id *)(*(void *)(a1 + 48) + 968);
LABEL_17:
        objc_storeStrong(v13, v10);
      }
      uint64_t v14 = *(void *)(a1 + 48);
      if (*(void *)(v14 + 960) && *(void *)(v14 + 968)) {
        goto LABEL_24;
      }
    }
    id v6 = [v4 countByEnumeratingWithState:&v41 objects:v46 count:16];
  }
  while (v6);
LABEL_24:

  id v15 = *(void **)(*(void *)(a1 + 48) + 960);
  if (v15)
  {
    if (dword_100969808 <= 30)
    {
      if (dword_100969808 != -1) {
        goto LABEL_27;
      }
      if (_LogCategory_Initialize())
      {
        id v15 = *(void **)(*(void *)(a1 + 48) + 960);
LABEL_27:
        uint64_t v35 = v7;
        long long v36 = &unk_10076E680;
        id v34 = v15;
LABEL_30:
        LogPrintF();
      }
    }
  }
  else if (dword_100969808 <= 60 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_30;
  }
  id v16 = *(void **)(*(void *)(a1 + 48) + 968);
  if (v16)
  {
    if (dword_100969808 <= 30)
    {
      if (dword_100969808 != -1) {
        goto LABEL_39;
      }
      if (_LogCategory_Initialize())
      {
        id v16 = *(void **)(*(void *)(a1 + 48) + 968);
LABEL_39:
        id v34 = v16;
LABEL_42:
        LogPrintF();
      }
    }
  }
  else if (dword_100969808 <= 60 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_42;
  }
  if (v7)
  {
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = *(void **)(v17 + 72);
    *(void *)(v17 + 72) = 0;

    uint64_t v19 = *(void *)(a1 + 48);
    id v20 = *(void **)(v19 + 936);
    *(void *)(v19 + 936) = 0;

    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void **)(v21 + 112);
    *(void *)(v21 + 112) = 0;
  }
  id v23 = objc_alloc_init((Class)NSMutableArray);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v24 = *(id *)(a1 + 56);
  id v25 = [v24 countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = *(void *)v38;
    do
    {
      for (j = 0; j != v26; j = (char *)j + 1)
      {
        if (*(void *)v38 != v27) {
          objc_enumerationMutation(v24);
        }
        unsigned __int8 v29 = *(void **)(*((void *)&v37 + 1) + 8 * (void)j);
        if (objc_msgSend(v29, "type", v34, v35, v36) != 1
          && [v29 type] != 14)
        {
          [v23 addObject:v29];
        }
      }
      id v26 = [v24 countByEnumeratingWithState:&v37 objects:v45 count:16];
    }
    while (v26);
  }

  id v30 = [v23 copy];
  uint64_t v31 = *(void *)(a1 + 48);
  long long v32 = *(void **)(v31 + 880);
  *(void *)(v31 + 880) = v30;

  if (dword_100969808 <= 30 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    id v34 = [*(id *)(a1 + 56) count:v34];
    LogPrintF();
  }
  [*(id *)(a1 + 48) _identificationReIdentify:v34];
  [*(id *)(a1 + 48) _identificationCheckFlagsAndACL];
  [*(id *)(a1 + 48) _update];
  long long v33 = +[NSNotificationCenter defaultCenter];
  [v33 postNotificationName:off_100969790 object:0];
}

id sub_100223204(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _identificationMaintenanceTimer];
}

void sub_100223340(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  unint64_t v4 = (unint64_t)[v6 discoveryFlags];
  id v5 = (void *)(v4 & ~*(void *)(a1 + 32));
  if (v5 != (void *)v4)
  {
    [v6 setDiscoveryFlags:v5];
    if (!v5) {
      [v6 setLastUpdateTicks:mach_absolute_time()];
    }
  }
}

void sub_1002246CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100224838(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100224E7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100225290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1002256F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002258D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100225D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 64), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100225DC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [objc_alloc((Class)NSUUID) initWithUUIDString:*(void *)(*((void *)&v9 + 1) + 8 * (void)v7)];
        if (v8) {
          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v8];
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100226068(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002263C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002271E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100228A68(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v10 = a3;
  BOOL v6 = [v10 serviceType] == *(unsigned __int8 *)(a1 + 48);
  uint64_t v7 = v10;
  if (v6)
  {
    id v8 = [v10 receivedFramePeerHandler];

    if (v8)
    {
      long long v9 = [v10 receivedFramePeerHandler];
      v9[2](v9, *(unsigned __int8 *)(a1 + 49), *(void *)(a1 + 32), *(void *)(a1 + 40));
    }
    *a4 = 1;
    uint64_t v7 = v10;
  }
}

void sub_10022940C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v13 = a3;
  BOOL v6 = [v13 serviceType] == *(unsigned __int8 *)(a1 + 48);
  uint64_t v7 = v13;
  if (v6)
  {
    id v8 = [v13 peerDevice];
    long long v9 = [v8 identifier];
    unsigned int v10 = [v9 isEqual:*(void *)(a1 + 32)];

    uint64_t v7 = v13;
    if (v10)
    {
      long long v11 = [v13 receivedFrameHandler];

      if (v11)
      {
        long long v12 = [v13 receivedFrameHandler];
        v12[2](v12, *(unsigned __int8 *)(a1 + 49), *(void *)(a1 + 40));
      }
      *a4 = 1;
      uint64_t v7 = v13;
    }
  }
}

void sub_100229844(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_100969808 <= 90)
    {
      id v6 = v3;
      if (dword_100969808 != -1 || (v5 = _LogCategory_Initialize(), id v4 = v6, v5))
      {
        [*(id *)(a1 + 32) length];
        LogPrintF();
        id v4 = v6;
      }
    }
  }
}

void sub_10022A424(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (dword_100969808 <= 20)
  {
    id v5 = v2;
    if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
    {
      LogPrintF();
      id v3 = v5;
    }
  }
}

void sub_10022A4DC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (dword_100969808 <= 20)
  {
    id v5 = v2;
    if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), id v3 = v5, v4))
    {
      LogPrintF();
      id v3 = v5;
    }
  }
}

id sub_10022BF00(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startUnlockBLEConnectionWithDevice:*(void *)(a1 + 40) encrypted:*(unsigned __int8 *)(a1 + 48)];
}

id sub_10022C1A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopUnlockBLEConnectionWithDevice:*(void *)(a1 + 40)];
}

id sub_10022C390(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendUnlockData:*(void *)(a1 + 40) toBLEDevice:*(void *)(a1 + 48) direct:0 completion:*(void *)(a1 + 56)];
}

void sub_10022C75C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v8 = a3;
  if ([v8 serviceType] == 9)
  {
    id v6 = [v8 receivedFramePeerHandler];

    if (v6)
    {
      uint64_t v7 = [v8 receivedFramePeerHandler];
      v7[2](v7, 7, *(void *)(a1 + 32), *(void *)(a1 + 40));

      *a4 = 1;
    }
  }
}

id sub_10022C874(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 472);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (CFIndex i = 0; i != v4; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        if ((objc_msgSend(v7, "discoveryFlags", (void)v9) & 0x1000000) != 0) {
          [*(id *)(a1 + 32) _unlockDeviceFilterChangedForRequest:v7];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }

  return [*(id *)(a1 + 32) _update];
}

_DWORD *sub_10022CD0C(_DWORD *result)
{
  uint64_t v1 = result;
  if (dword_100969808 <= 50)
  {
    if (dword_100969808 != -1 || (id result = (_DWORD *)_LogCategory_Initialize(), result)) {
      id result = (_DWORD *)LogPrintF();
    }
  }
  int v2 = v1[11];
  if ((v2 & 1) != 0 && (uint64_t v3 = *((void *)v1 + 4), (v1[10] & 1) != *(unsigned char *)(v3 + 834)))
  {
    *(unsigned char *)(v3 + 834) = v1[10] & 1;
    int v4 = 1;
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    int v4 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }
  uint64_t v5 = *((void *)v1 + 4);
  if (((v1[10] >> 1) & 1) != *(unsigned char *)(v5 + 836))
  {
    *(unsigned char *)(v5 + 836) = (v1[10] & 2) != 0;
    int v4 = 1;
  }
LABEL_12:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)v1 + 4);
    if (((v1[10] >> 2) & 1) != *(unsigned char *)(v6 + 833))
    {
      *(unsigned char *)(v6 + 833) = (v1[10] & 4) != 0;
      int v4 = 1;
    }
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v7 = *((void *)v1 + 4);
    if (((v1[10] >> 3) & 1) != *(unsigned char *)(v7 + 837))
    {
      *(unsigned char *)(v7 + 837) = (v1[10] & 8) != 0;
      int v4 = 1;
    }
  }
  if ((v2 & 0x10) != 0)
  {
    uint64_t v8 = *((void *)v1 + 4);
    if (((v1[10] >> 4) & 1) != *(unsigned char *)(v8 + 832))
    {
      *(unsigned char *)(v8 + 832) = (v1[10] & 0x10) != 0;
      int v4 = 1;
    }
  }
  if ((v2 & 0x20) != 0 && (uint64_t v9 = *((void *)v1 + 4), ((v1[10] >> 5) & 1) != *(unsigned char *)(v9 + 835)))
  {
    *(unsigned char *)(v9 + 835) = (v1[10] & 0x20) != 0;
  }
  else if (!v4)
  {
    return result;
  }
  long long v10 = (void *)*((void *)v1 + 4);

  return [v10 _update];
}

void sub_10022D084(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NSData dataWithBytes:&Current length:8];
  [v2 sendUnlockData:v3 toBLEDevice:*(void *)(a1 + 40) completion:&stru_1008D1398];
}

void sub_10022D0F8(id a1, NSError *a2)
{
  int v2 = a2;
  uint64_t v3 = v2;
  if (dword_100969808 <= 50)
  {
    uint64_t v5 = v2;
    if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v5, v4))
    {
      LogPrintF();
      uint64_t v3 = v5;
    }
  }
}

void sub_10022D19C(uint64_t a1)
{
  [*(id *)(a1 + 32) stopUnlockBLEConnectionWithDevice:*(void *)(a1 + 40)];
  int v2 = *(void **)(*(void *)(a1 + 32) + 848);
  if (v2)
  {
    uint64_t v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 848);
    *(void *)(v4 + 84_Block_object_dispose(&STACK[0x3A0], 8) = 0;
  }
  if (dword_100969808 <= 50 && (dword_100969808 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

id sub_10022D470(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 896) = 1;
  return [*(id *)(a1 + 32) _update];
}

id sub_10022D4F8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 896) = 0;
  return [*(id *)(a1 + 32) _update];
}

id sub_10022D838(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10022D8B4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _testPipePing];
}

void sub_10022D9BC(id a1, NSError *a2)
{
  int v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_100969808 <= 60)
    {
      uint64_t v5 = v2;
      if (dword_100969808 != -1 || (v4 = _LogCategory_Initialize(), uint64_t v3 = v5, v4))
      {
        LogPrintF();
        uint64_t v3 = v5;
      }
    }
  }
}

Class sub_10022E1A4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_100980488)
  {
    v3[1] = _NSConcreteStackBlock;
    _DWORD v3[2] = (void *)3221225472;
    void v3[3] = sub_10022E2D0;
    v3[4] = &unk_1008CB370;
    void v3[5] = v3;
    long long v4 = off_1008D13D8;
    uint64_t v5 = 0;
    qword_100980488 = _sl_dlopen();
  }
  if (!qword_100980488) {
    sub_10022E868(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SSAccountStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10022E8E8();
  }
  qword_100980480 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10022E2D0()
{
  uint64_t result = _sl_dlopen();
  qword_100980488 = result;
  return result;
}

Class sub_10022E344(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_100980498)
  {
    v3[1] = _NSConcreteStackBlock;
    _DWORD v3[2] = (void *)3221225472;
    void v3[3] = sub_10022E470;
    v3[4] = &unk_1008CB370;
    void v3[5] = v3;
    long long v4 = off_1008D13F0;
    uint64_t v5 = 0;
    qword_100980498 = _sl_dlopen();
  }
  if (!qword_100980498) {
    sub_10022E964(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AKAccountManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10022E9E4();
  }
  qword_100980490 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10022E470()
{
  uint64_t result = _sl_dlopen();
  qword_100980498 = result;
  return result;
}

Class sub_10022E4E4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1009804A8)
  {
    v3[1] = _NSConcreteStackBlock;
    _DWORD v3[2] = (void *)3221225472;
    void v3[3] = sub_10022E610;
    v3[4] = &unk_1008CB370;
    void v3[5] = v3;
    long long v4 = off_1008D1408;
    uint64_t v5 = 0;
    qword_1009804A8 = _sl_dlopen();
  }
  if (!qword_1009804A8) {
    sub_10022EA60(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("BrightnessSystemClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10022EAE0();
  }
  qword_1009804A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10022E610()
{
  uint64_t result = _sl_dlopen();
  qword_1009804A8 = result;
  return result;
}

Class sub_10022E684(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1009804B8)
  {
    v3[1] = _NSConcreteStackBlock;
    _DWORD v3[2] = (void *)3221225472;
    void v3[3] = sub_10022E7B0;
    v3[4] = &unk_1008CB370;
    void v3[5] = v3;
    long long v4 = off_1008D1420;
    uint64_t v5 = 0;
    qword_1009804B8 = _sl_dlopen();
  }
  if (!qword_1009804B8) {
    sub_10022EB5C(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("ANAnnounce");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10022EBDC();
  }
  qword_1009804B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10022E7B0()
{
  uint64_t result = _sl_dlopen();
  qword_1009804B8 = result;
  return result;
}

void sub_10022E824(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Auto Unlock advertise rate background", v1, 2u);
}

void sub_10022E868(void *a1)
{
  int v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *StoreServicesLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SDNearbyAgent.m" lineNumber:86 description:@"%s", *a1];

  __break(1u);
}

void sub_10022E8E8()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getSSAccountStoreClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDNearbyAgent.m" lineNumber:88 description:@"Unable to find class %s", "SSAccountStore"];

  __break(1u);
}

void sub_10022E964(void *a1)
{
  int v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *AuthKitLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SDNearbyAgent.m" lineNumber:79 description:@"%s", *a1];

  __break(1u);
}

void sub_10022E9E4()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getAKAccountManagerClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDNearbyAgent.m" lineNumber:81 description:@"Unable to find class %s", "AKAccountManager"];

  __break(1u);
}

void sub_10022EA60(void *a1)
{
  int v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *CoreBrightnessLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SDNearbyAgent.m" lineNumber:95 description:@"%s", *a1];

  __break(1u);
}

void sub_10022EAE0()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getBrightnessSystemClientClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDNearbyAgent.m" lineNumber:96 description:@"Unable to find class %s", "BrightnessSystemClient"];

  __break(1u);
}

void sub_10022EB5C(void *a1)
{
  int v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *AnnounceLibrary(void)"];
  [v2 handleFailureInFunction:v3 file:@"SDNearbyAgent.m" lineNumber:109 description:@"%s" a1];

  __break(1u);
}

void sub_10022EBDC()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getANAnnounceClass(void)_block_invoke"];
  [v0 handleFailureInFunction:v1 file:@"SDNearbyAgent.m" lineNumber:111 description:@"Unable to find class %s" arguments:v1, @"ANAnnounce"];

  __break(1u);
}

void sub_10022EC58(void *a1)
{
  id v1 = a1;
  int v14 = 0;
  if (v1)
  {
    if (dword_1009698E0 <= 30 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
    {
      id v8 = v1;
      LogPrintF();
    }
    int v2 = sub_10022EFA4(v1, &v14);
    uint64_t v3 = v2;
    if (v14)
    {
      id v4 = 0;
    }
    else
    {
      id v4 = [v2 username];
      if (v4)
      {
        pthread_mutex_lock(&stru_100969950);
        [(id)qword_1009804C0 removeObjectForKey:v4];
        pthread_mutex_unlock(&stru_100969950);
        if (dword_1009698E0 <= 30 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
        {
          id v8 = v1;
          LogPrintF();
        }
        uint64_t v5 = [v3 accountStore:v8];
        id v13 = 0;
        [v5 setCredential:0 forAccount:v3 serviceID:@"com.apple.gs.authagent.auth" error:&v13];
        id v6 = v13;

        if (v6 && dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
        {
          id v9 = v1;
          id v10 = v6;
          LogPrintF();
        }
        uint64_t v7 = [v3 accountStore:v9, v10];
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        void v11[2] = sub_10022F418;
        void v11[3] = &unk_1008CA6A8;
        id v4 = v4;
        id v12 = v4;
        [v7 saveAccount:v3 withCompletionHandler:v11];
      }
      else
      {
        int v14 = 201201;
      }
    }
    if (v14 && dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  else
  {
    if (dword_1009698E0 <= 30 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    pthread_mutex_lock(&stru_100969950);
    [(id)qword_1009804C0 removeAllObjects];
    pthread_mutex_unlock(&stru_100969950);
    uint64_t v3 = 0;
    id v4 = 0;
    int v14 = 0;
  }
}

id sub_10022EFA4(void *a1, int *a2)
{
  id v3 = a1;
  if (!v3)
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
    long long v11 = 0;
    id v10 = 0;
    id obj = 0;
    id v9 = 0;
    id v8 = 0;
    int v25 = -6705;
    goto LABEL_44;
  }
  id v4 = +[AKAccountManager sharedInstance];
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v7 = 0;
    long long v11 = 0;
LABEL_53:
    id v10 = 0;
    goto LABEL_54;
  }
  uint64_t v6 = [v4 appleIDAccountWithAppleID:v3];
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    id v8 = 0;
    id v9 = 0;
    id obj = 0;
    id v10 = 0;
    long long v11 = 0;
LABEL_39:
    if (dword_1009698E0 <= 50 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    int v25 = 0;
    goto LABEL_44;
  }
  if (dword_1009698E0 <= 50 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  id v12 = [v5 store];
  long long v11 = v12;
  if (!v12)
  {
    uint64_t v7 = 0;
    goto LABEL_53;
  }
  id v10 = [v12 accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierIDMS];
  if (!v10
    || ([v11 accountsWithAccountType:v10], (id v13 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v7 = 0;
LABEL_54:
    id obj = 0;
    id v9 = 0;
    id v8 = 0;
    int v25 = 201204;
    goto LABEL_44;
  }
  unsigned __int8 v29 = v10;
  id v30 = v11;
  uint64_t v31 = a2;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id obj = v13;
  id v14 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
  if (v14)
  {
    id v15 = v14;
    id v9 = 0;
    id v16 = 0;
    uint64_t v33 = *(void *)v39;
    while (2)
    {
      for (CFIndex i = 0; i != v15; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v39 != v33) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void *)(*((void *)&v38 + 1) + 8 * i);
        uint64_t v19 = [v5 aliasesForAccount:v18, v28];

        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        id v9 = v19;
        id v20 = [v9 countByEnumeratingWithState:&v34 objects:v42 count:16];
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = v5;
          uint64_t v23 = *(void *)v35;
LABEL_19:
          uint64_t v24 = 0;
          while (1)
          {
            if (*(void *)v35 != v23) {
              objc_enumerationMutation(v9);
            }
            if (![*(id *)(*((void *)&v34 + 1) + 8 * v24) caseInsensitiveCompare:v3]) {
              break;
            }
            if (v21 == (id)++v24)
            {
              id v21 = [v9 countByEnumeratingWithState:&v34 objects:v42 count:16];
              if (v21) {
                goto LABEL_19;
              }
              uint64_t v5 = v22;
              goto LABEL_34;
            }
          }
          uint64_t v5 = v22;
          id v8 = [v22 altDSIDForAccount:v18];

          if (!v8)
          {
            if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
            {
              uint64_t v28 = v18;
              LogPrintF();
            }
            id v16 = 0;
            goto LABEL_34;
          }
          uint64_t v7 = [v22 appleIDAccountWithAltDSID:v8];

          if (!v7)
          {
            id v16 = v8;
            continue;
          }

          long long v11 = v30;
          a2 = v31;
          id v10 = v29;
          goto LABEL_39;
        }
LABEL_34:
      }
      id v15 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
      if (v15) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v9 = 0;
    id v16 = 0;
  }

  uint64_t v7 = 0;
  int v25 = 201204;
  id v8 = v16;
  long long v11 = v30;
  a2 = v31;
  id v10 = v29;
LABEL_44:
  if (a2) {
    *a2 = v25;
  }
  id v26 = v7;

  return v26;
}

void sub_10022F418(uint64_t a1, int a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (a2)
  {
    if (dword_1009698E0 <= 30)
    {
      id v8 = v4;
      if (dword_1009698E0 != -1 || (int v6 = _LogCategory_Initialize(), v5 = v8, v6))
      {
LABEL_7:
        LogPrintF();
        uint64_t v5 = v8;
      }
    }
  }
  else if (dword_1009698E0 <= 90)
  {
    id v8 = v4;
    if (dword_1009698E0 != -1) {
      goto LABEL_7;
    }
    int v7 = _LogCategory_Initialize();
    uint64_t v5 = v8;
    if (v7) {
      goto LABEL_7;
    }
  }
}

void sub_10022F51C(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = dispatch_get_global_queue(0, 0);
  }
  id v9 = v8;
  v55[0] = 0;
  long long v37 = v6;
  long long v38 = v5;
  if (!v5)
  {
    long long v36 = 0;
    id v22 = 0;
    id v25 = 0;
    uint64_t v24 = 0;
    id v11 = 0;
    int v32 = -6705;
    goto LABEL_46;
  }
  if (!v7)
  {
    id v11 = 0;
    uint64_t v24 = 0;
    id v23 = 0;
    id v13 = 0;
    id v25 = 0;
    id v26 = 0;
    id v22 = 0;
    id v5 = 0;
    long long v36 = 0;
    goto LABEL_62;
  }
  id v10 = sub_10022EFA4(v5, v55);
  id v11 = [v10 username];
  if (!v11) {
    id v11 = v5;
  }
  pthread_mutex_lock(&stru_100969950);
  id v12 = [(id)qword_1009804C0 objectForKeyedSubscript:v11];
  long long v36 = v10;
  if (v12)
  {
    id v13 = v12;
    id v14 = [v12 objectForKeyedSubscript:@"altDSID"];
    id v15 = [v13 objectForKeyedSubscript:@"gsToken"];
    if (dword_1009698E0 <= 40 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10022FDFC;
    block[3] = &unk_1008CCF78;
    id v54 = v7;
    id v22 = v14;
    id v52 = v22;
    id v23 = v15;
    id v53 = v23;
    dispatch_async(v9, block);

    pthread_mutex_unlock(&stru_100969950);
    uint64_t v24 = 0;
    id v25 = 0;
    id v26 = 0;
    id v5 = 0;
    goto LABEL_62;
  }
  pthread_mutex_unlock(&stru_100969950);
  if (!v10)
  {
    id v21 = 0;
    id v16 = 0;
    goto LABEL_36;
  }
  id v16 = [v10 aa_altDSID];
  uint64_t v17 = [v10 accountType];
  uint64_t v18 = [v17 identifier];
  unsigned int v19 = [v18 isEqualToString:ACAccountTypeIdentifierAppleIDAuthentication];

  if (!v19)
  {
    if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v27 = [v10 accountType];
      uint64_t v33 = [v27 identifier];
      BOOL v35 = (BOOL)v11;
      LogPrintF();
    }
    goto LABEL_35;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v33 = (uint64_t)v10;
      LogPrintF();
    }
LABEL_35:
    id v21 = 0;
    goto LABEL_36;
  }
  uint64_t v20 = [v10 aida_tokenForService:@"com.apple.gs.authagent.auth"];
  id v21 = (void *)v20;
  if (v16 && v20)
  {
    if (dword_1009698E0 <= 50 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_10022FE18;
    v47[3] = &unk_1008CCF78;
    id v50 = v7;
    id v22 = v16;
    id v48 = v22;
    id v5 = v21;
    id v49 = v5;
    dispatch_async(v9, v47);

    uint64_t v24 = 0;
    id v23 = 0;
    id v13 = 0;
    id v25 = 0;
    id v26 = 0;
    goto LABEL_62;
  }
  if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v33 = v16 != 0;
    BOOL v35 = v21 != 0;
    LogPrintF();
  }
LABEL_36:
  uint64_t v24 = +[NSDate date];
  uint64_t v28 = sub_10017E8D0();
  [v24 timeIntervalSinceDate:v28];
  double v30 = fabs(v29);

  if (v30 <= 5.0)
  {
    id v5 = v21;
    id v22 = v16;
    if (dword_1009698E0 <= 50 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v25 = 0;
    int v32 = 201229;
    goto LABEL_46;
  }
  int v31 = BYSetupAssistantNeedsToRun();
  if (!v31) {
    goto LABEL_54;
  }
  if (dword_1009698E0 <= 50)
  {
    if (dword_1009698E0 != -1 || _LogCategory_Initialize()) {
      LogPrintF();
    }
LABEL_54:
    if (dword_1009698E0 <= 50 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
    {
      id v34 = v11;
      LogPrintF();
    }
  }
  id v5 = v21;
  id v26 = objc_alloc_init((Class)AKAppleIDAuthenticationContext);
  [v26 setServiceType:1];
  [v26 setServiceIdentifier:@"com.apple.gs.authagent.auth"];
  [v26 setUsername:v11];
  [v26 _setPassword:0];
  id v22 = v16;
  [v26 setAltDSID:v16];
  [v26 setIsUsernameEditable:0];
  if (v31) {
    [v26 setAuthenticationType:1];
  }
  [v26 setShouldUpdatePersistentServiceTokens:1 v34];
  id v25 = objc_alloc_init((Class)AKAppleIDAuthenticationController);
  if (v26)
  {
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_10022FE34;
    v42[3] = &unk_1008D1D70;
    id v22 = v22;
    id v43 = v22;
    id v11 = v11;
    id v44 = v11;
    id v46 = v7;
    uint64_t v45 = v9;
    [v25 authenticateWithContext:v26 completion:v42];

    id v23 = 0;
    id v13 = 0;
LABEL_62:
    v55[0] = 0;
    goto LABEL_63;
  }
  int v32 = -6762;
LABEL_46:
  v55[0] = v32;
  if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (v7)
  {
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_1002302B4;
    v39[3] = &unk_1008CCCD8;
    id v40 = v7;
    int v41 = v55[0];
    dispatch_async(v9, v39);
  }
  id v23 = 0;
  id v13 = 0;
  id v26 = 0;
LABEL_63:
}

uint64_t sub_10022FDFC(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t sub_10022FE18(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void sub_10022FE34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    id v8 = [v5 objectForKeyedSubscript:AKAuthenticationAlternateDSIDKey];
    if (!v8) {
      id v8 = *(id *)(a1 + 32);
    }
    id v9 = [v5 objectForKeyedSubscript:AKAuthenticationIDMSTokenKey];
    uint64_t v10 = [v9 objectForKeyedSubscript:@"com.apple.gs.authagent.auth"];
    id v11 = (void *)v10;
    if (v8) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      if (dword_1009698E0 > 90 || dword_1009698E0 == -1 && !_LogCategory_Initialize()) {
        goto LABEL_31;
      }
    }
    else
    {
      pthread_mutex_lock(&stru_100969950);
      if (!qword_1009804C0)
      {
        id v13 = objc_alloc_init((Class)NSMutableDictionary);
        id v14 = (void *)qword_1009804C0;
        qword_1009804C0 = (uint64_t)v13;
      }
      v27[0] = @"altDSID";
      v27[1] = @"gsToken";
      v28[0] = v8;
      v28[1] = v11;
      id v15 = +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:2];
      [(id)qword_1009804C0 setObject:v15 forKeyedSubscript:*(void *)(a1 + 40)];

      pthread_mutex_unlock(&stru_100969950);
      if (dword_1009698E0 > 50) {
        goto LABEL_31;
      }
      if (dword_1009698E0 != -1 || _LogCategory_Initialize()) {
        LogPrintF();
      }
      if (dword_1009698E0 > 10 || dword_1009698E0 == -1 && !_LogCategory_Initialize()) {
        goto LABEL_31;
      }
    }
    LogPrintF();
LABEL_31:
    uint64_t v18 = *(void **)(a1 + 56);
    if (v18)
    {
      unsigned int v19 = *(NSObject **)(a1 + 48);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100230240;
      v23[3] = &unk_1008CCF78;
      id v26 = v18;
      id v24 = v8;
      id v25 = v11;
      dispatch_async(v19, v23);
    }
    goto LABEL_34;
  }
  if ([v6 code] == (id)-7003)
  {
    sub_10017E784();
    sub_10017E928();
  }
  if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  id v16 = *(void **)(a1 + 56);
  if (v16)
  {
    uint64_t v17 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100230268;
    block[3] = &unk_1008CB7D8;
    id v22 = v16;
    id v21 = v7;
    dispatch_async(v17, block);

    id v8 = v22;
LABEL_34:
  }
}

uint64_t sub_100230240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
}

uint64_t sub_100230268(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) code];
  id v3 = *(uint64_t (**)(uint64_t, void, void, id))(v1 + 16);

  return v3(v1, 0, 0, v2);
}

uint64_t sub_1002302B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, 0, *(unsigned int *)(a1 + 40));
}

uint64_t sub_1002302D4(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = 0;
  uint64_t v8 = 4294960591;
  id v9 = 0;
  id v10 = 0;
  if (v5 && v6)
  {
    id v10 = +[NSString stringWithFormat:@"%@:%@", v5, v6];
    id v7 = v10;
    if (v10)
    {
      id v10 = [v10 dataUsingEncoding:4];
      id v9 = v10;
      if (v10
        && ([v10 base64EncodedStringWithOptions:0],
            (id v10 = (id)objc_claimAutoreleasedReturnValue()) != 0))
      {
        if (a3)
        {
          id v10 = v10;
          uint64_t v8 = 0;
          *a3 = v10;
        }
        else
        {
          uint64_t v8 = 0;
        }
      }
      else
      {
        uint64_t v8 = 4294960534;
      }
    }
    else
    {
      id v9 = 0;
      uint64_t v8 = 4294960568;
    }
  }

  return v8;
}

uint64_t sub_1002303CC(void *a1, int a2, void *a3)
{
  id v4 = a1;
  id v5 = v4;
  if (!v4)
  {
    uint64_t v29 = 4294960591;
    goto LABEL_29;
  }
  if (!a3) {
    goto LABEL_28;
  }
  if (![v4 count])
  {
    id v8 = 0;
    id v9 = 0;
    id v27 = 0;
LABEL_27:
    uint64_t v28 = v27;
    *a3 = v27;

LABEL_28:
    uint64_t v29 = 0;
    goto LABEL_29;
  }
  id v34 = +[NSMutableArray array];
  if (v34)
  {
    int v31 = a3;
    int v32 = v5;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id obj = v5;
    id v6 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (!v6)
    {
      id v8 = 0;
      id v9 = 0;
      goto LABEL_26;
    }
    id v7 = v6;
    id v8 = 0;
    id v9 = 0;
    uint64_t v10 = *(void *)v37;
    while (1)
    {
      id v11 = 0;
      BOOL v12 = v9;
      do
      {
        if (*(void *)v37 != v10) {
          objc_enumerationMutation(obj);
        }
        id v13 = [*(id *)(*((void *)&v36 + 1) + 8 * (void)v11) lowercaseString];

        if (a2)
        {
          id v14 = v13;
          id v13 = +[NSMutableString string];
          unsigned int v15 = [v14 length];
          uint64_t v16 = v15 - 1;
          if ((int)(v15 - 1) >= 0)
          {
            do
            {
              uint64_t v17 = [v14 substringWithRange:v16];
              [v13 appendString:v17];

              --v16;
            }
            while (v16 != -1);
          }
        }
        id v8 = v13;
        uint64_t v18 = +[NSMutableData dataWithLength:32];
        if (v18)
        {
          id v19 = [v8 dataUsingEncoding:4];
          id v20 = [v19 bytes];
          CC_LONG v21 = [v19 length];
          id v22 = v18;
          CC_SHA256(v20, v21, (unsigned __int8 *)[v22 mutableBytes]);
          id v23 = malloc_type_malloc((2 * (void)[v22 length]) | 1, 0x100004077774924uLL);
          if (v23)
          {
            id v24 = v23;
            id v25 = v22;
            [v25 bytes];
            [v25 length];
            DataToHexCStringEx();
            id v9 = +[NSString stringWithUTF8String:v24];
            free(v24);
            goto LABEL_17;
          }
        }
        else
        {
          id v19 = 0;
        }
        id v9 = 0;
LABEL_17:

        if (v9) {
          [v34 addObject:v9];
        }
        id v11 = (char *)v11 + 1;
        BOOL v12 = v9;
      }
      while (v11 != v7);
      id v26 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      id v7 = v26;
      if (!v26)
      {
LABEL_26:

        a3 = v31;
        id v5 = v32;
        id v27 = v34;
        goto LABEL_27;
      }
    }
  }
  uint64_t v29 = 4294960568;
LABEL_29:

  return v29;
}

void sub_10023070C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v9)
  {
    id v11 = v9;
  }
  else
  {
    dispatch_get_global_queue(0, 0);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  BOOL v12 = v11;
  id v13 = [v7 count];
  if (v8 && v13)
  {
    if (v10)
    {
      id v14 = v7;
      id v15 = v8;
      id v16 = v10;
      SFAppleIDVerifyCertificateChain();
    }
  }
  else if (v10)
  {
    (*((void (**)(id, void, uint64_t))v10 + 2))(v10, 0, 4294960591);
  }
}

void sub_10023085C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    id v4 = [*(id *)(a1 + 32) objectAtIndexedSubscript:0];

    if (v4)
    {
      int v5 = SFAppleIDCommonNameForCertificate();
      id v6 = 0;
      if (!v5)
      {
        id v7 = [*(id *)(a1 + 40) accountIdentifier];
        unsigned __int8 v8 = [v6 isEqualToString:v7];

        if ((v8 & 1) == 0
          && dword_1009698E0 <= 90
          && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    else
    {
      id v6 = 0;
    }
  }
  else
  {
    if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v6 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
}

uint64_t sub_1002309F0(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  int v21 = 0;
  if (![v5 count] || !v6)
  {
    uint64_t v7 = 0;
    id v8 = 0;
    int v19 = -6705;
LABEL_21:
    int v21 = v19;
    if (!a3) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if (SFAppleIDVerifyCertificateChainSync())
  {
    id v8 = [v5 objectAtIndexedSubscript:0];

    if (v8)
    {
      int v9 = SFAppleIDCommonNameForCertificate();
      id v8 = 0;
      int v21 = v9;
      if (v9)
      {
        uint64_t v7 = 0;
        if (!a3) {
          goto LABEL_19;
        }
        goto LABEL_13;
      }
      id v10 = [v6 accountIdentifier];
      unsigned __int8 v11 = [v8 isEqualToString:v10];

      if (v11)
      {
        int v21 = 0;
        uint64_t v7 = 1;
        if (!a3) {
          goto LABEL_19;
        }
        goto LABEL_13;
      }
      if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      uint64_t v7 = 0;
      int v19 = 201238;
    }
    else
    {
      uint64_t v7 = 0;
      int v19 = -6762;
    }
    goto LABEL_21;
  }
  if (dword_1009698E0 <= 90 && (dword_1009698E0 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v20 = 0;
    LogPrintF();
  }
  uint64_t v7 = 0;
  id v8 = 0;
  if (a3)
  {
LABEL_13:
    if (v21)
    {
      NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
      uint64_t v12 = +[NSString stringWithUTF8String:DebugGetErrorString()];
      id v13 = (void *)v12;
      CFStringRef v14 = @"?";
      if (v12) {
        CFStringRef v14 = (const __CFString *)v12;
      }
      CFStringRef v23 = v14;
      id v15 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1, v20);
      id v16 = +[NSError errorWithDomain:NSOSStatusErrorDomain code:v21 userInfo:v15];
    }
    else
    {
      id v16 = 0;
    }
    id v17 = v16;
    *a3 = v17;
  }
LABEL_19:

  return v7;
}

uint64_t SDAuthenticationRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 72) |= 8u;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_47;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_49;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_47:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_49:
        uint64_t v31 = 68;
        goto LABEL_54;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 72) |= 4u;
        break;
      case 3u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 56;
        goto LABEL_45;
      case 4u:
        uint64_t v25 = PBReaderReadData();
        uint64_t v26 = 32;
        goto LABEL_45;
      case 5u:
        uint64_t v25 = PBReaderReadData();
        uint64_t v26 = 40;
        goto LABEL_45;
      case 6u:
        *(unsigned char *)(a1 + 72) |= 2u;
        unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v32 = 16;
        goto LABEL_59;
      case 7u:
        uint64_t v25 = PBReaderReadData();
        uint64_t v26 = 24;
        goto LABEL_45;
      case 8u:
        *(unsigned char *)(a1 + 72) |= 1u;
        unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v32 = 8;
LABEL_59:
        *(void *)(a1 + v32) = v28;
        continue;
      case 9u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 48;
LABEL_45:
        double v30 = *(void **)(a1 + v26);
        *(void *)(a1 + v26) = v25;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v23 = v22 + 1;
      if (v22 == -1 || v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
      v15 |= (unint64_t)(v24 & 0x7F) << v20;
      if ((v24 & 0x80) == 0) {
        goto LABEL_51;
      }
      v20 += 7;
      BOOL v10 = v21++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_53;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_53:
    uint64_t v31 = 64;
LABEL_54:
    *(_DWORD *)(a1 + v31) = v15;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100232B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak((id *)(v19 - 128));
  _Unwind_Resume(a1);
}

void sub_100232BAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained alertManager:*(void *)(*(void *)(a1 + 32) + 48) cancelingTransferWithRecordID:*(void *)(a1 + 40) withFailureReason:0];
}

id sub_100232C0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _unpublish];

  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(void **)(*(void *)(a1 + 32) + 40);

  return [v4 setObject:0 forKeyedSubscript:v3];
}

void sub_100232DA4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = a2;
  char v4 = [v3 dispatchQueue];
  dispatch_assert_queue_V2(v4);

  [v5 transferWithIdentifierWasAccepted:*(void *)(a1 + 40)];
}

void sub_100232F60(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[4];
  id v5 = a2;
  char v4 = [v3 dispatchQueue];
  dispatch_assert_queue_V2(v4);

  [v5 transferWithIdentifierWasDeclined:a1[5] withFailureReason:a1[6]];
}

void sub_10023339C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10023340C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10023347C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropClassroomTransferManager: createCGImageWithData returned NULL", v1, 2u);
}

void sub_1002334C0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDAirDropClassroomTransferManager: replaceIconValue fileIconData is invalid", v1, 2u);
}

void sub_100233504(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

id sub_100233570()
{
  id v0 = (void *)qword_1009804C8;
  if (!qword_1009804C8)
  {
    uint64_t v1 = +[NSBundle bundleForClass:objc_opt_class()];
    id v2 = (void *)qword_1009804C8;
    qword_1009804C8 = v1;

    id v0 = (void *)qword_1009804C8;
  }

  return v0;
}

id _ShareSheetBundleIDFromAuditToken()
{
  if (CPCopyBundleIdentifierAndTeamFromAuditToken()) {
    id v0 = 0;
  }
  else {
    id v0 = (void *)CPCopyBundleIdentifierFromAuditToken();
  }
  if (!v0) {
    NSLog(@"Cannot get bundle ID from audit token.");
  }

  return v0;
}

id share_sheet_log()
{
  if (qword_1009804E8[0] != -1) {
    dispatch_once(qword_1009804E8, &stru_1008D1E50);
  }
  id v0 = (void *)qword_1009804E0;

  return v0;
}

id magic_head_log()
{
  if (qword_1009804D8 != -1) {
    dispatch_once(&qword_1009804D8, &stru_1008D1E30);
  }
  id v0 = (void *)qword_1009804D0;

  return v0;
}

void sub_100233728(id a1)
{
  os_log_t v1 = os_log_create("com.apple.sharing", "MagicHead");
  id v2 = (void *)qword_1009804D0;
  qword_1009804D0 = (uint64_t)v1;
}

void sub_10023376C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.ShareSheet", "ShareSheet");
  id v2 = (void *)qword_1009804E0;
  qword_1009804E0 = (uint64_t)v1;
}

id sub_1002337B0(void *a1)
{
  id v1 = a1;
  id v2 = objc_opt_new();
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v26 objects:v31 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v27;
    uint64_t v19 = *(void *)v27;
    id v20 = v3;
    do
    {
      uint64_t v7 = 0;
      id v21 = v5;
      do
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(v3);
        }
        unint64_t v8 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          char v9 = [v8 objectForKey:@"attachments"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            long long v24 = 0u;
            long long v25 = 0u;
            long long v22 = 0u;
            long long v23 = 0u;
            id v10 = v9;
            id v11 = [v10 countByEnumeratingWithState:&v22 objects:v30 count:16];
            if (v11)
            {
              id v12 = v11;
              uint64_t v13 = *(void *)v23;
              do
              {
                for (CFIndex i = 0; i != v12; CFIndex i = (char *)i + 1)
                {
                  if (*(void *)v23 != v13) {
                    objc_enumerationMutation(v10);
                  }
                  uint64_t v15 = *(void **)(*((void *)&v22 + 1) + 8 * i);
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    uint64_t v16 = [v15 objectForKey:@"registeredTypeIdentifiers"];
                    if (v16) {
                      [v2 addObjectsFromArray:v16];
                    }
                  }
                }
                id v12 = [v10 countByEnumeratingWithState:&v22 objects:v30 count:16];
              }
              while (v12);
            }

            uint64_t v6 = v19;
            id v3 = v20;
            id v5 = v21;
          }
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v7 != v5);
      id v5 = [v3 countByEnumeratingWithState:&v26 objects:v31 count:16];
    }
    while (v5);
  }

  id v17 = [v2 copy];

  return v17;
}

id sub_100233A24(void *a1)
{
  sub_1002337B0(a1);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = (char *)[v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      for (CFIndex i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        if (!SFIsImage())
        {

          id v6 = 0;
          goto LABEL_11;
        }
      }
      id v3 = (char *)[v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

  id v6 = v1;
LABEL_11:

  return v6;
}

id sub_100233C14(uint64_t a1)
{
  return [*(id *)(a1 + 32) onQueue_start];
}

void sub_100233E00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10023489C((uint64_t)v3, v4);
    }

    [*(id *)(a1 + 32) invalidateResponseTimer];
    id v5 = *(void **)(a1 + 32);
    id v6 = +[NSError errorWithDomain:SFAutoUnlockErrorDomain code:151 userInfo:0];
    [v5 notifyDelegateWithError:v6];
  }
}

void sub_100234294(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    CFStringRef v8 = @"Step failed";
    id v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    id v6 = +[NSError errorWithDomain:v4 code:151 userInfo:v5];
    [v3 notifyDelegateWithError:v6];
  }
}

id *sub_100234758(id *result)
{
  id v1 = result;
  int v2 = *((unsigned __int16 *)result + 24);
  if (v2 == 504)
  {
    uint64_t v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received SDAutoUnlockMessageTypeRegistrationFinalize", (uint8_t *)v5, 2u);
    }

    [v1[4] invalidateResponseTimer];
    return (id *)[v1[4] handleFinalize:v1[5]];
  }
  else if (v2 == 502)
  {
    id v3 = auto_unlock_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received SDAutoUnlockMessageTypeRegistrationResponse", buf, 2u);
    }

    [v1[4] invalidateResponseTimer];
    return (id *)[v1[4] handleInitialResponse:v1[5]];
  }
  return result;
}

void sub_10023489C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error sending initial request for registration: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100234914(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error finalizing registration (%lu)", (uint8_t *)&v2, 0xCu);
}

void sub_10023498C(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to do final step in registration", v1, 2u);
}

void sub_1002349D0(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Received SDAutoUnlockDeviceRegistrationStep without step data", v1, 2u);
}

void sub_100235964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10023598C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerImport];
}

void sub_100235C3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6 && v5)
  {
    if ([v5 success])
    {
      CFStringRef v8 = [v5 openAppURL];

      if (v8)
      {
        long long v9 = [v5 openAppURL];
        id v17 = v9;
        long long v10 = +[NSArray arrayWithObjects:&v17 count:1];
        long long v11 = [*(id *)(a1 + 32) transfer];
        [v11 setCompletedURLs:v10];

        if (+[SFAirDropUserDefaults_objc moveToAppEnabled](SFAirDropUserDefaults_objc, "moveToAppEnabled")&& [v5 shouldOfferOpenAction])
        {
          id v12 = [*(id *)(a1 + 32) updateTransferStateHandler];
          v12[2](v12, 7);
          uint64_t v13 = 1;
LABEL_14:

          goto LABEL_15;
        }
        if ((+[SFAirDropUserDefaults_objc moveToAppEnabled](SFAirDropUserDefaults_objc, "moveToAppEnabled") & 1) == 0&& ([v5 shouldOfferOpenAction] & 1) == 0)
        {
          unsigned int v14 = *(void **)(a1 + 32);
          id v12 = [v5 openAppURL];
          uint64_t v16 = v12;
          uint64_t v15 = +[NSArray arrayWithObjects:&v16 count:1];
          uint64_t v13 = (uint64_t)[v14 openURLs:v15];

          goto LABEL_14;
        }
      }
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 0;
    }
LABEL_15:
    NSErrorUserInfoKey v7 = [*(id *)(a1 + 32) completionHandler];
    ((void (**)(void, uint64_t, id, id))v7)[2](v7, v13, [v5 shouldOfferOpenAction], [v5 shouldCleanupItems]);
    goto LABEL_16;
  }
  NSErrorUserInfoKey v7 = [*(id *)(a1 + 32) completionHandler];
  v7[2](v7, 0, 0, 1);
LABEL_16:
}

void sub_1002361B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1002361EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002361FC(uint64_t a1)
{
}

void sub_100236204(uint64_t a1)
{
  int v2 = +[NSMutableArray array];
  double v30 = +[NSMutableArray array];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = *(id *)(a1 + 32);
  id v31 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v31)
  {
    uint64_t v29 = *(void *)v34;
    long long v27 = v2;
    do
    {
      for (CFIndex i = 0; i != v31; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v34 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        id v5 = [v4 pathExtension];
        CFStringRef PreferredIdentifierForTag = (__CFString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v5, 0);
        if (SFIsPhotosAssetBundle())
        {
          NSErrorUserInfoKey v7 = [objc_alloc((Class)PFAssetBundle) initWithAssetBundleAtURL:v4];
          if (v7)
          {
            CFStringRef v8 = +[PHAssetCreationRequest creationRequestForAssetFromAssetBundle:v7];
          }
          else
          {
            long long v10 = airdrop_log();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              long long v38 = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "PFAssetBundle initWithAssetBundleAtURL(%@) returned nil", buf, 0xCu);
            }

            CFStringRef v8 = 0;
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v11 = *(void *)(a1 + 40);
            id v32 = 0;
            id v12 = [v7 writeDowngradedRepresentationToDirectory:v11 error:&v32];
            id v13 = v32;
            if (v12)
            {
              [v2 addObject:v12];
            }
            else
            {
              unsigned int v14 = airdrop_log();
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                long long v38 = v4;
                __int16 v39 = 2112;
                id v40 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to downgrade asset bundle %@ with error: %@", buf, 0x16u);
              }

              int v2 = v27;
            }
            goto LABEL_38;
          }
        }
        else if (SFIsLivePhotos())
        {
          NSErrorUserInfoKey v7 = [objc_alloc((Class)PFVideoComplement) initWithBundleAtURL:v4];
          if (v7)
          {
            CFStringRef v8 = +[PHAssetCreationRequest creationRequestForAssetFromVideoComplementBundle:v7];
          }
          else
          {
            uint64_t v15 = airdrop_log();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              long long v38 = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "PFVideoComplement initWithBundleAtURL(%@) returned nil", buf, 0xCu);
            }

            CFStringRef v8 = 0;
          }
          if (*(unsigned char *)(a1 + 72))
          {
            uint64_t v16 = [v7 videoPath];
            id v13 = +[NSURL fileURLWithPath:v16];

            if (v13)
            {
              [v2 addObject:v13];
LABEL_39:

              goto LABEL_40;
            }
            id v12 = airdrop_log();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              long long v38 = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No video URL exists for Live Photo %@", buf, 0xCu);
            }
LABEL_38:

            goto LABEL_39;
          }
        }
        else
        {
          if (SFIsVideo())
          {
            uint64_t v9 = 2;
            goto LABEL_22;
          }
          if (SFIsImage())
          {
            uint64_t v9 = 1;
LABEL_22:
            CFStringRef v8 = +[PHAssetCreationRequest creationRequestForAsset];
            NSErrorUserInfoKey v7 = objc_alloc_init((Class)PHAssetResourceCreationOptions);
            [v8 addResourceWithType:v9 fileURL:v4 options:v7];
            if (*(unsigned char *)(a1 + 72)) {
              [v2 addObject:v4];
            }
            goto LABEL_40;
          }
          NSErrorUserInfoKey v7 = airdrop_log();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            long long v38 = v4;
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Not a Photos type %@. Ignoring", buf, 0xCu);
          }
          CFStringRef v8 = 0;
        }
LABEL_40:

        [v8 setImportSessionID:*(void *)(a1 + 48)];
        id v17 = [v8 placeholderForCreatedAsset];
        char v18 = [v17 localIdentifier];
        [v30 addObject:v18];

        if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
        {
          uint64_t v19 = [v8 placeholderForCreatedAsset];
          id v20 = [v19 localIdentifier];
          id v21 = +[NSString stringWithFormat:@"photos://asset?albumname=camera-roll&identifier=%@", v20];

          uint64_t v22 = +[NSURL URLWithString:v21];
          uint64_t v23 = *(void *)(*(void *)(a1 + 64) + 8);
          long long v24 = *(void **)(v23 + 40);
          *(void *)(v23 + 40) = v22;
        }
      }
      id v31 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v31);
  }

  id v25 = [v2 copy];
  [*(id *)(a1 + 56) setUnprivatizedURLs:v25];

  id v26 = [v30 copy];
  [*(id *)(a1 + 56) setAssetIdentifiers:v26];
}

void sub_1002367D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = airdrop_log();
  NSErrorUserInfoKey v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = [*(id *)(a1 + 32) count];
      v17[0] = 67109120;
      v17[1] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PHPhotoLibrary performChanges reported success for %d items", (uint8_t *)v17, 8u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_1002372EC();
  }

  uint64_t v9 = a2;
  if ((+[SFAirDropUserDefaults_objc moveToAppEnabled] & 1) == 0)
  {
    long long v10 = +[SDStatusMonitor sharedMonitor];
    unsigned __int16 v11 = (unsigned __int16)[v10 systemUIFlags];

    uint64_t v9 = (v11 & 0x3006) != 0;
    if (_os_feature_enabled_impl()) {
      uint64_t v9 = _os_feature_enabled_impl();
    }
  }
  id v12 = [SDAirDropHandlerPhotosImportResult alloc];
  id v13 = [*(id *)(a1 + 40) unprivatizedURLs];
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v15 = [*(id *)(a1 + 40) assetIdentifiers];
  uint64_t v16 = [(SDAirDropHandlerPhotosImportResult *)v12 initWithImportedFiles:v13 openAppURL:v14 assetIdentifiers:v15 success:a2 shouldOfferOpenAction:v9 shouldCleanupItems:1];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100236B98(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = airdrop_log();
  NSErrorUserInfoKey v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = [*(id *)(a1 + 32) count];
      v9[0] = 67109120;
      v9[1] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PHPhotoLibrary expunge reported success for %d items", (uint8_t *)v9, 8u);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_10023739C();
  }
}

void sub_100236F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100236FC8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v2 = [WeakRetained transfer];
  uint64_t v3 = [v2 completedURLs];
  uint64_t v4 = [v3 firstObject];

  if (v4)
  {
    NSErrorUserInfoKey v7 = v4;
    id v5 = +[NSArray arrayWithObjects:&v7 count:1];
    [WeakRetained openURLs:v5];
  }
  id v6 = [WeakRetained completionHandler];
  v6[2](v6, 1, 0, 1);
}

void sub_1002370C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [WeakRetained unprivatizedURLs];
  [WeakRetained launchMoveToAppShareSheetForFiles:v1];
}

void sub_1002372EC()
{
  sub_1002372D4();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "PHPhotoLibrary performChanges failed with error %@ for items %@");
}

void sub_100237358(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "PHPhotoLibrary skipping expunge of 0 assets", v1, 2u);
}

void sub_10023739C()
{
  sub_1002372D4();
  sub_10007153C((void *)&_mh_execute_header, v0, v1, "PHPhotoLibrary expunge failed with error %@ for assets %@");
}

void sub_1002377FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_100237830(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = airdrop_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 48);
      int v5 = *(unsigned __int8 *)(a1 + 49);
      v11[0] = 67109376;
      v11[1] = v4;
      __int16 v12 = 1024;
      int v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Turning on AirDrop, turning on WLAN=%d, Bluetooth=%d", (uint8_t *)v11, 0xEu);
    }

    if (*(unsigned char *)(a1 + 48))
    {
      id v6 = +[SDStatusMonitor sharedMonitor];
      [v6 setWirelessEnabled:1];
    }
    if (*(unsigned char *)(a1 + 49))
    {
      NSErrorUserInfoKey v7 = +[SDStatusMonitor sharedMonitor];
      [v7 setBluetoothEnabled:1];
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained invalidate];

  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
}

void sub_100237968(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = airdrop_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error presenting enable radios alert %@", (uint8_t *)&v8, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained invalidate];

  uint64_t v6 = *(void *)(a1 + 32);
  NSErrorUserInfoKey v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_100237C2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56));
  [WeakRetained airDropController:*(void *)(a1 + 32) didChange:*(void *)(*(void *)(a1 + 32) + 24)];
}

uint64_t SDAutoUnlockAuthPromptRequestReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0;
        while (1)
        {
          unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v9 = v5++ >= 9;
          if (v9)
          {
            unint64_t v6 = 0;
            int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0;
        }
LABEL_13:
        if (v10) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = (v6 & 7) == 4;
        }
        if (!v11)
        {
          switch((v6 >> 3))
          {
            case 1u:
              char v12 = 0;
              unsigned int v13 = 0;
              uint64_t v14 = 0;
              *(unsigned char *)(a1 + 36) |= 1u;
              break;
            case 2u:
              uint64_t v18 = PBReaderReadData();
              uint64_t v19 = 16;
              goto LABEL_30;
            case 3u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 8;
              goto LABEL_30;
            case 4u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 24;
LABEL_30:
              id v20 = *(void **)(a1 + v19);
              *(void *)(a1 + v19) = v18;

              goto LABEL_35;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_35:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
          }
          while (1)
          {
            unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
            v14 |= (unint64_t)(v16 & 0x7F) << v12;
            if ((v16 & 0x80) == 0) {
              goto LABEL_32;
            }
            v12 += 7;
            BOOL v9 = v13++ >= 9;
            if (v9)
            {
              LODWORD(v14) = 0;
              goto LABEL_34;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v14) = 0;
          }
LABEL_34:
          *(_DWORD *)(a1 + 32) = v14;
          goto LABEL_35;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100238FBC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@: loadIconHandler is nil.", (uint8_t *)&v2, 0xCu);
}

id sub_1002398D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a4) {
    return [a10 notifyClient:a4];
  }
  else {
    return _[a10 parseResults:a6 port:__rev16(a7) txtLen:a8 txtRecord:a9 interface:a3];
  }
}

id sub_100239904(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClient:4294901728];
}

void sub_100239ACC(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Resolved a Bonjour server with unknown protocol", v1, 2u);
}

void sub_100239B10(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "SDBonjourResolver: DNSServiceSetDispatchQueue returned %d", a5, a6, a7, a8, 0);
}

void sub_100239B7C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "SDBonjourResolver: DNSServiceResolve returned %d", a5, a6, a7, a8, 0);
}

void sub_100239BE8(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Bonjour resolver failed to find awdl0 interface", v1, 2u);
}

void sub_100239C2C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002002C((void *)&_mh_execute_header, a2, a3, "SDBonjourResolver: DNSServiceCreateConnection returned %d", a5, a6, a7, a8, 0);
}

id sub_10023A118(uint64_t a1)
{
  int v2 = +[SDAutoUnlockWiFiManager sharedManager];
  uint64_t v3 = [*(id *)(a1 + 32) wifiRequest];
  [v2 cancelWiFiRequest:v3];

  char v4 = *(void **)(a1 + 32);

  return [v4 setWifiRequest:0];
}

id sub_10023A250(uint64_t a1)
{
  int v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Asked to complete attempt if necessary", buf, 2u);
  }

  [*(id *)(a1 + 32) setShouldWaitToCompleteUnlock:0];
  uint64_t v3 = [*(id *)(a1 + 32) prewarmIdleStartDate];
  [v3 timeIntervalSinceNow];
  [*(id *)(a1 + 32) setPrewarmIdleTime:-v4];

  id result = [*(id *)(a1 + 32) isWaitingToCompleteUnlock];
  if (result)
  {
    id result = [*(id *)(a1 + 32) isAuthenticatingForSiri];
    if ((result & 1) == 0)
    {
      unint64_t v6 = auto_unlock_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completing waiting unlock attempt", v7, 2u);
      }

      return [*(id *)(a1 + 32) consumeAuthTokenIfReady];
    }
  }
  return result;
}

void sub_10023A3D8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isWaitingToCompleteUnlock])
  {
    int v2 = auto_unlock_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down AWDL", v6, 2u);
    }

    [*(id *)(a1 + 32) cancelWiFiRequest];
    uint64_t v3 = objc_alloc_init(SDAutoUnlockCleanUpAWDL);
    [(SDAutoUnlockCleanUpAWDL *)v3 setVersion:1];
    double v4 = *(void **)(a1 + 32);
    unsigned int v5 = [(SDAutoUnlockCleanUpAWDL *)v3 data];
    [v4 sendData:v5 type:15 completionHandler:&stru_1008D1F38];
  }
}

void sub_10023A4AC(id a1, NSError *a2)
{
  int v2 = a2;
  if (v2)
  {
    uint64_t v3 = auto_unlock_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100243090();
    }
  }
}

id sub_10023A58C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancel];
}

id sub_10023A998(uint64_t a1)
{
  int v2 = +[SDAutoUnlockWiFiManager sharedManager];
  uint64_t v3 = [*(id *)(a1 + 32) wifiRequest];
  [v2 cancelWiFiRequest:v3];

  double v4 = *(void **)(a1 + 32);

  return [v4 setWifiRequest:0];
}

id sub_10023AB64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleCanceledAfterSuccess];
}

void sub_10023C678(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) autoUnlockDevice];
  unsigned int v3 = [v2 supportsApproveIcon];

  if (v3)
  {
    [*(id *)(a1 + 32) setImageData:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) setImageHash:*(void *)(a1 + 48)];
    double v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = [*(id *)(a1 + 32) deviceID];
      int v17 = 138412290;
      CFStringRef v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Image data updated (%@)", (uint8_t *)&v17, 0xCu);
    }
    unint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    char v8 = [v6 appName];
    [v6 sendAuthPromptRequestWithImageHash:v7 appName:v8];

    BOOL v9 = [*(id *)(a1 + 32) iconTransferStore];
    int v10 = [*(id *)(a1 + 32) imageHash];
    BOOL v11 = [*(id *)(a1 + 32) deviceID];
    [*(id *)(a1 + 32) setImageDataAlreadyCached:[v9 imageCachedForHash:v10 device:v11]];

    char v12 = auto_unlock_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = [*(id *)(a1 + 32) imageDataAlreadyCached];
      CFStringRef v14 = @"NO";
      if (v13) {
        CFStringRef v14 = @"YES";
      }
      int v17 = 138412290;
      CFStringRef v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Image already cached: %@", (uint8_t *)&v17, 0xCu);
    }

    unint64_t v15 = *(void **)(a1 + 32);
    char v16 = [v15 imageData];
    [v15 sendAuthPromptImageDataIfReady:v16];
  }
  else
  {
    char v16 = auto_unlock_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Not updating icon, watch doesn't support icons", (uint8_t *)&v17, 2u);
    }
  }
}

void sub_10023C964(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 301) = *(unsigned char *)(a1 + 40);
  int v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if ([*(id *)(a1 + 32) chosenDevice]) {
      CFStringRef v3 = @"YES";
    }
    else {
      CFStringRef v3 = @"NO";
    }
    double v4 = [*(id *)(a1 + 32) deviceID];
    int v7 = 138412546;
    CFStringRef v8 = v3;
    __int16 v9 = 2112;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Chosen device updated: %@ (%@)", (uint8_t *)&v7, 0x16u);
  }
  unsigned int v5 = *(void **)(a1 + 32);
  unint64_t v6 = [v5 imageData];
  [v5 sendAuthPromptImageDataIfReady:v6];
}

id sub_10023CB20(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 303) = *(unsigned char *)(a1 + 40);
  return [*(id *)(a1 + 32) setShouldWaitToCompleteUnlock:*(unsigned __int8 *)(a1 + 40)];
}

uint64_t sub_10023CBD8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 304) = *(unsigned char *)(result + 40);
  return result;
}

void sub_10023DA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10023DA20(uint64_t a1)
{
  int v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Confirmation timer fired", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained notifyDelegateWithError:*(void *)(a1 + 32)];
}

id sub_10023DC08(uint64_t a1)
{
  kdebug_trace();
  unsigned __int8 v2 = [*(id *)(a1 + 32) rangingDisabled];
  CFStringRef v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 setInRange:1];
    [*(id *)(a1 + 32) setDistance:&off_100907410];
    double v4 = *(void **)(a1 + 32);
    return [v4 handlePeerInRange];
  }
  unint64_t v6 = [v3 wifiRequest];
  int v7 = [v6 wifiRangingResults];
  [*(id *)(a1 + 32) setWifiRangingResults:v7];

  CFStringRef v8 = [*(id *)(a1 + 32) wifiRequest];
  __int16 v9 = [v8 wifiRangingError];
  int v10 = [v9 domain];
  [*(id *)(a1 + 32) setWifiErrorDomain:v10];

  BOOL v11 = [*(id *)(a1 + 32) wifiRequest];
  char v12 = [v11 wifiRangingError];
  [*(id *)(a1 + 32) setWifiRangingErrorCode:[v12 code]];

  unsigned int v13 = +[NSDate date];
  CFStringRef v14 = [*(id *)(a1 + 32) rangingStart];
  [v13 timeIntervalSinceDate:v14];
  [*(id *)(a1 + 32) setRangingInterval:];

  unint64_t v15 = auto_unlock_log();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    int v17 = [*(id *)(a1 + 32) wifiErrorDomain];
    uint64_t v18 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    uint64_t v23 = v16;
    __int16 v24 = 2112;
    id v25 = v17;
    __int16 v26 = 1024;
    int v27 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "AWDL ranging results returned %@, domain: %@, error %d", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 48)) {
    goto LABEL_8;
  }
  if (![*(id *)(a1 + 32) peerInRange:*(void *)(a1 + 40)])
  {
    if (!*(void *)(a1 + 48)) {
      return [*(id *)(a1 + 32) handlePeerOutOfRange];
    }
LABEL_8:
    [*(id *)(a1 + 32) setRangingTimedOut:1];
    [*(id *)(a1 + 32) setRangingErrorString:@"Ranging Timeout"];
    if ([*(id *)(a1 + 32) wifiRangingErrorCode])
    {
      uint64_t v19 = [*(id *)(a1 + 32) rangingErrorString];
      id v20 = -[NSObject stringByAppendingFormat:](v19, "stringByAppendingFormat:", @" (%ld)", [*(id *)(a1 + 32) wifiRangingErrorCode]);
      [*(id *)(a1 + 32) setRangingErrorString:v20];
    }
    else
    {
      uint64_t v19 = auto_unlock_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_10024312C();
      }
    }

    return [*(id *)(a1 + 32) handlePeerOutOfRange];
  }
  id v21 = auto_unlock_log();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Peer in range", buf, 2u);
  }

  [*(id *)(a1 + 32) setInRange:1];
  return [*(id *)(a1 + 32) handlePeerInRange];
}

void sub_1002405D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, id *a13)
{
  objc_destroyWeak((id *)(v13 - 112));
  _Unwind_Resume(a1);
}

void sub_100240628(id a1, id a2)
{
  unsigned __int8 v2 = (void (**)(id, uint64_t))a2;
  CFStringRef v3 = auto_unlock_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting wifi request", v4, 2u);
  }

  v2[2](v2, 1);
}

void sub_1002406B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = auto_unlock_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = [*(id *)(a1 + 32) wifiRequest];
    *(_DWORD *)buf = 136315650;
    uint64_t v16 = "-[SDAutoUnlockLockSession startAWDL]_block_invoke";
    __int16 v17 = 2112;
    uint64_t v18 = v6;
    __int16 v19 = 1024;
    int v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s AWDL started request:%@ error:%d", buf, 0x1Cu);
  }
  int v7 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v9 = WeakRetained;
  if (a3)
  {
    [WeakRetained invalidateResponseTimer];

    id v9 = objc_loadWeakRetained(v7);
    uint64_t v10 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    CFStringRef v14 = @"AWDL network failed to start";
    BOOL v11 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    char v12 = +[NSError errorWithDomain:v10 code:192 userInfo:v11];
    [v9 notifyDelegateWithError:v12];
  }
  else
  {
    [WeakRetained handleAWDLUp];
  }
}

void sub_100240844(uint64_t a1, uint64_t a2)
{
  double v4 = auto_unlock_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v5 = @"NO";
    if (a2) {
      CFStringRef v5 = @"YES";
    }
    int v7 = 138412290;
    CFStringRef v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Peer found (awdl up same time : %@)", (uint8_t *)&v7, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handlePeerFound:a2];
}

void sub_100240924(uint64_t a1)
{
  unsigned __int8 v2 = auto_unlock_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ranging started", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleRangingStarted];
}

void sub_1002409A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int v7 = auto_unlock_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Ranging completed", v10, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = [v5 code];

  [WeakRetained handleRangingResults:v6 errorCode:v9];
}

void sub_100240A60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleWiFiRequestInvalidated];
}

void sub_100241248(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(a1 + 32) setAttemptError:v3];
    double v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10024366C();
    }

    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
    }
  }
}

void sub_10024155C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    CFStringRef v8 = @"Auth prompt request failed";
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    id v6 = +[NSError errorWithDomain:v4 code:200 userInfo:v5];
    [v3 notifyDelegateWithError:v6];
  }
}

void sub_100241B2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = auto_unlock_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error sending image data %@", buf, 0xCu);
    }

    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    CFStringRef v10 = @"Image data message failed";
    NSErrorUserInfoKey v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    CFStringRef v8 = +[NSError errorWithDomain:v6 code:202 userInfo:v7];
    [v5 notifyDelegateWithError:v8];
  }
}

void sub_100241E10(uint64_t a1)
{
  [*(id *)(a1 + 32) setErrorType:5];
  [*(id *)(a1 + 32) invalidateResponseTimer];
  unsigned __int8 v2 = *(void **)(a1 + 32);
  uint64_t v3 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
  CFStringRef v7 = @"Exchange response failed";
  uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  uint64_t v5 = +[NSError errorWithDomain:v3 code:103 userInfo:v4];
  [v2 notifyDelegateWithError:v5];
}

id sub_100241F98(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendUnlockConfirmation:1 withError:0 suppressNotification:*(unsigned char *)(a1 + 40) == 0];
}

void sub_1002422E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) setAttemptError:];
    [*(id *)(a1 + 40) invalidateConfirmationTimer];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
LABEL_7:
    [v4 notifyDelegateWithError:v5];
    goto LABEL_8;
  }
  NSErrorUserInfoKey v6 = *(void **)(a1 + 40);
  if (v3)
  {
    [v6 setAttemptError:v3];
    [*(id *)(a1 + 40) invalidateConfirmationTimer];
    CFStringRef v7 = auto_unlock_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFStringRef v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error sending confirmation", v14, 2u);
    }

    [*(id *)(a1 + 40) lockKeyBagIfNeeded];
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    goto LABEL_7;
  }
  unsigned int v8 = [v6 canceled];
  NSErrorUserInfoKey v9 = *(void **)(a1 + 40);
  if (v8)
  {
    [v9 invalidateConfirmationTimer];
    uint64_t v10 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    CFStringRef v16 = @"Attempt Cancelled";
    BOOL v11 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    id v12 = +[NSError errorWithDomain:v10 code:118 userInfo:v11];

    [*(id *)(a1 + 40) notifyDelegateWithError:v12];
  }
  else if ([v9 supportsConfirmationACK])
  {
    NSErrorUserInfoKey v13 = auto_unlock_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFStringRef v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Waiting for confirmation ack", v14, 2u);
    }
  }
  else
  {
    [*(id *)(a1 + 40) handleConfirmationACK];
  }
LABEL_8:
}

void sub_100243090()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Failed to send clean up AWDL message: %@", v2, v3, v4, v5, v6);
}

void sub_1002430F8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Updating image data for non-auth prompt attempt", v2, v3, v4, v5, v6);
}

void sub_10024312C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Ranging timeout with no error code", v2, v3, v4, v5, v6);
}

void sub_100243160()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handlePeerOutOfRange %@", v2, v3, v4, v5, v6);
}

void sub_1002431C8()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "AWDL ranging timeout is %ld", v1, 0xCu);
}

void sub_10024323C()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Deserializing AWDL info failed", v2, v3, v4, v5, v6);
}

void sub_100243270()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "%@", v2, v3, v4, v5, v6);
}

void sub_1002432D8()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Already received auth prompt response", v2, v3, v4, v5, v6);
}

void sub_10024330C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handleSessionKeyExchangeRequest: %@", v2, v3, v4, v5, v6);
}

void sub_100243374()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Watch locked on wrist from connection", v2, v3, v4, v5, v6);
}

void sub_1002433A8(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 attemptType];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unexpected attempt type: %d", (uint8_t *)v3, 8u);
}

void sub_100243434()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "handleSessionAuthToken: %@", v2, v3, v4, v5, v6);
}

void sub_10024349C()
{
  sub_10002972C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "peer discovery timeout is %ld", v1, 0xCu);
}

void sub_100243510()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Auth token: Already received auth token", v2, v3, v4, v5, v6);
}

void sub_100243544(char a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Skip ranging is %d", (uint8_t *)v2, 8u);
}

void sub_1002435C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100243638()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Not sending data, local device ID is NULL", v2, v3, v4, v5, v6);
}

void sub_10024366C()
{
  sub_10002972C();
  sub_100018D34((void *)&_mh_execute_header, v0, v1, "Error sending AWDL info %@", v2, v3, v4, v5, v6);
}

void sub_1002436D4()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Not sending data for auth prompt, local device ID is NULL", v2, v3, v4, v5, v6);
}

void sub_100243708()
{
  sub_10001587C();
  sub_100015860((void *)&_mh_execute_header, v0, v1, "Sending SDAutoUnlockAuthPromptRequest", v2, v3, v4, v5, v6);
}

void sub_100243888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_100243934(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_enumerateRemoteObjectProxiesUsingBlock:*(void *)(a1 + 40)];
}

void sub_100243B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100243B58(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = daemon_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001741F4(a1);
  }
}

id sub_100243C80(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_remoteObjectProxyForConnection:*(void *)(a1 + 40) usingBlock:*(void *)(a1 + 48)];
}

void sub_100243D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100243DA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = daemon_log();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001741F4(a1);
  }
}

id sub_100243E8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_activate];
}

id sub_10024405C(uint64_t a1)
{
  return [*(id *)(a1 + 32) onqueue_invalidate];
}

void sub_10024441C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_100244458(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = objc_loadWeakRetained((id *)(a1 + 40));
    [v2 onqueue_connectionInvalidated:WeakRetained];
  }
}

void sub_1002446A0(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  dispatch_queue_set_specific(*(dispatch_queue_t *)(*(void *)(a1 + 40) + 32), "SDXPCDaemonConnection", v2, 0);
  [*(id *)(a1 + 48) invoke];
  dispatch_queue_set_specific(*(dispatch_queue_t *)(*(void *)(a1 + 40) + 32), "SDXPCDaemonConnection", 0, 0);

  CFRelease(v2);
}

void sub_100244CC4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Activate already called", v1, 2u);
}

uint64_t sub_100244D08()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10024A2B8(v0, qword_100969AB8);
  uint64_t v1 = sub_10000B47C(v0, (uint64_t)qword_100969AB8);
  if (qword_100969C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000B47C(v0, (uint64_t)qword_100994558);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100244DD0(uint64_t a1, uint64_t a2)
{
  v2[22] = a1;
  v2[23] = a2;
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint8_t v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  sub_10000A844((uint64_t *)&unk_10096AC10);
  v2[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[28] = v4;
  v2[29] = *(void *)(v4 - 8);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  return _swift_task_switch(sub_100244F64, 0, 0);
}

uint64_t sub_100244F64()
{
  sub_10000B740(0, (unint64_t *)&qword_10096AC60);
  uint64_t v1 = (void *)static NSUserDefaults.airdrop.getter();
  char v2 = SFAirDropUserDefaults.overrideReceivedFilesPathiOS.getter();

  if (v2)
  {
    URL.init(fileURLWithPath:)();
    sub_10000A844(&qword_10096AC70);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10076E7A0;
    *(void *)(inited + 32) = NSFileProtectionKey;
    *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
    uint64_t v4 = NSFileProtectionKey;
    uint64_t v5 = NSFileProtectionCompleteUntilFirstUserAuthentication;
    unint64_t v6 = sub_1002456E4(inited);
    id v7 = [self defaultManager];
    URL._bridgeToObjectiveC()(v8);
    uint64_t v10 = v9;
    sub_10039E4CC(v6);
    swift_bridgeObjectRelease();
    type metadata accessor for FileAttributeKey(0);
    sub_100248A28(&qword_10096AC78, type metadata accessor for FileAttributeKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v0[21] = 0;
    unsigned int v12 = [v7 createDirectoryAtURL:v10 withIntermediateDirectories:1 attributes:isa error:v0 + 21];

    NSErrorUserInfoKey v13 = (void *)v0[21];
    if (v12)
    {
      (*(void (**)(void, void, void))(v0[29] + 32))(v0[22], v0[32], v0[28]);
LABEL_8:
      id v36 = v13;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v37 = (uint64_t (*)(void))v0[1];
      goto LABEL_15;
    }
    uint64_t v38 = v0[32];
LABEL_13:
    uint64_t v41 = v0[28];
    uint64_t v42 = v0[29];
    id v43 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v41);
    goto LABEL_14;
  }
  id v14 = sub_1001B2E7C();
  if (v14)
  {
    NSErrorUserInfoKey v15 = v14;
    uint64_t v17 = v0[29];
    uint64_t v16 = v0[30];
    uint64_t v19 = v0[27];
    uint64_t v18 = v0[28];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
    v20(v19, v16, v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v18) != 1)
    {
      uint64_t v21 = v0[25];
      uint64_t v22 = v0[26];
      uint64_t v23 = v0[24];
      uint64_t v45 = v20;
      v20(v0[31], v0[27], v0[28]);
      v0[16] = 0xD000000000000011;
      v0[17] = 0x80000001007B60B0;
      uint64_t v24 = enum case for URL.DirectoryHint.isDirectory(_:);
      uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 104);
      unsigned int v46 = enum case for URL.DirectoryHint.isDirectory(_:);
      v47(v22, enum case for URL.DirectoryHint.isDirectory(_:), v23);
      sub_10024A1FC();
      URL.append<A>(path:directoryHint:)();
      id v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v25(v22, v23);
      v0[18] = UUID.uuidString.getter();
      v0[19] = v26;
      v47(v22, v24, v23);
      URL.append<A>(path:directoryHint:)();
      v25(v22, v23);
      swift_bridgeObjectRelease();
      v0[14] = 0x73656C6946;
      v0[15] = 0xE500000000000000;
      v47(v22, v46, v23);
      URL.append<A>(path:directoryHint:)();
      v25(v22, v23);
      sub_10000A844(&qword_10096AC70);
      uint64_t v27 = swift_initStackObject();
      *(_OWORD *)(v27 + 16) = xmmword_10076E7A0;
      *(void *)(v27 + 32) = NSFileProtectionKey;
      *(void *)(v27 + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      long long v28 = NSFileProtectionKey;
      uint64_t v29 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v30 = sub_1002456E4(v27);
      id v31 = [self defaultManager];
      URL._bridgeToObjectiveC()(v32);
      long long v34 = v33;
      sub_10039E4CC(v30);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100248A28(&qword_10096AC78, type metadata accessor for FileAttributeKey);
      Class v35 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v0[20] = 0;
      LOBYTE(v21) = [v31 createDirectoryAtURL:v34 withIntermediateDirectories:1 attributes:v35 error:v0 + 20];

      NSErrorUserInfoKey v13 = (void *)v0[20];
      if (v21)
      {
        v45(v0[22], v0[31], v0[28]);
        goto LABEL_8;
      }
      uint64_t v38 = v0[31];
      goto LABEL_13;
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[29] + 56))(v0[27], 1, 1, v0[28]);
  }
  sub_10000A7E8(v0[27], (uint64_t *)&unk_10096AC10);
  uint64_t v39 = type metadata accessor for SFAirDropReceive.Failure();
  sub_100248A28(&qword_10096BA40, (void (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v40, enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:), v39);
  swift_willThrow();
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v37 = (uint64_t (*)(void))v0[1];
LABEL_15:
  return v37();
}

unint64_t sub_1002456E4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    char v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096AC80);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_1005836C4((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    _DWORD v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002457F0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    char v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096ABD0);
  char v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10024A330(v4, (uint64_t)&v14, &qword_10096ABD8);
    uint64_t v5 = v14;
    unint64_t result = sub_1005837C4(v14);
    if (v7) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    uint64_t v8 = v2[7] + 40 * result;
    long long v9 = v15;
    long long v10 = v16;
    *(void *)(v8 + 32) = v17;
    *(_OWORD *)uint64_t v8 = v9;
    *(_OWORD *)(v8 + 16) = v10;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    _DWORD v2[2] = v13;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10024592C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096A9F0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10024A330(v6, (uint64_t)v15, &qword_10096A9F8);
    unint64_t result = sub_100583878((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100249444(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _DWORD v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100245A70(uint64_t a1)
{
  return sub_100246758(a1, &qword_10096ACD8);
}

unint64_t sub_100245A7C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844((uint64_t *)&unk_10096BB70);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10024A330(v6, (uint64_t)&v15, &qword_10096AA10);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1005838BC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100249444(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _DWORD v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100245BB4(uint64_t a1)
{
  return sub_100246508(a1, &qword_10096AA18, &qword_10096AA20, (uint64_t (*)(uint64_t))sub_1005838E8);
}

unint64_t sub_100245BDC(uint64_t a1)
{
  return sub_1002460FC(a1, &qword_10096ABF0, &qword_10096ABF8, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, (uint64_t (*)(void))type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation);
}

unint64_t sub_100245C18(uint64_t a1)
{
  return sub_100246758(a1, (uint64_t *)&unk_10096AA00);
}

unint64_t sub_100245C24(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096AE78);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_1005838E8((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    _DWORD v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100245D30(uint64_t a1)
{
  return sub_1002471BC(a1, &qword_10096ACC8, &qword_10096ACD0);
}

unint64_t sub_100245D44(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096AC58);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1005838BC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    _DWORD v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100245E58(uint64_t a1)
{
  return sub_100246758(a1, &qword_10096ACC0);
}

unint64_t sub_100245E64(uint64_t a1)
{
  return sub_1002469B4(a1, &qword_10096AC30, &qword_10096AC38, (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer);
}

unint64_t sub_100245E8C(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096AC00);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096AC08);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10024A330(v12, (uint64_t)v5, &qword_10096AC00);
    unint64_t result = sub_100583A00((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for SFNWInterfaceType();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    _DWORD v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002460C0(uint64_t a1)
{
  return sub_1002460FC(a1, &qword_10096AB18, &qword_10096AB20, type metadata accessor for RegistrationState, type metadata accessor for RegistrationState);
}

unint64_t sub_1002460FC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  id v31 = a4;
  id v32 = a5;
  long long v33 = a2;
  uint64_t v7 = sub_10000A844(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v12 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  uint64_t v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v30 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_10024A330(v17, (uint64_t)v10, v33);
    uint64_t v20 = *v10;
    uint64_t v19 = v10[1];
    unint64_t result = sub_1005838BC(*v10, v19);
    if (v22) {
      break;
    }
    unint64_t v23 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v24 = (uint64_t *)(v12[6] + 16 * result);
    *uint64_t v24 = v20;
    v24[1] = v19;
    uint64_t v25 = v12[7];
    uint64_t v26 = v31(0);
    unint64_t result = sub_10024A194(v14, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v23, v32);
    uint64_t v27 = v12[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_11;
    }
    v12[2] = v29;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002462EC(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096AB08);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096AB10);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10024A330(v12, (uint64_t)v5, &qword_10096AB08);
    unint64_t result = sub_100583A00((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    _DWORD v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002464E0(uint64_t a1)
{
  return sub_100246508(a1, &qword_10096ABE0, &qword_10096ABE8, (uint64_t (*)(uint64_t))sub_1005837C4);
}

unint64_t sub_100246508(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10024A330(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_100249444(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    void v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100246638(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096AAA0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1005838BC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    _DWORD v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10024674C(uint64_t a1)
{
  return sub_100246758(a1, &qword_10096AA90);
}

unint64_t sub_100246758(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_1005838BC(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v12 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    _DWORD v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100246870(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096AB58);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1005838BC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    _DWORD v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10024698C(uint64_t a1)
{
  return sub_1002469B4(a1, &qword_10096AC40, &qword_10096AC48, (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer);
}

unint64_t sub_1002469B4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v30 = a4;
  uint64_t v7 = sub_10000A844(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    BOOL v12 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  BOOL v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  BOOL v14 = &v10[*(int *)(v7 + 48)];
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v29 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_10024A330(v17, (uint64_t)v10, a2);
    unint64_t result = sub_10058392C((uint64_t)v10);
    if (v20) {
      break;
    }
    unint64_t v21 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v22 = v12[6];
    uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v22 + *(void *)(*(void *)(v23 - 8) + 72) * v21, v10, v23);
    uint64_t v24 = v12[7];
    uint64_t v25 = v30(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v24 + *(void *)(*(void *)(v25 - 8) + 72) * v21, v14, v25);
    uint64_t v26 = v12[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_11;
    }
    v12[2] = v28;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100246BE8(uint64_t a1)
{
  return sub_100246E1C(a1, &qword_10096A9E8);
}

unint64_t sub_100246BF4(uint64_t a1)
{
  return sub_100247078(a1, &qword_10096ACB0, &qword_10096ACB8, (uint64_t (*)(uint64_t))sub_1005836C4);
}

unint64_t sub_100246C1C(uint64_t a1)
{
  uint64_t v2 = sub_10000A844(&qword_10096ACA0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A844(&qword_10096ACA8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10024A330(v12, (uint64_t)v5, &qword_10096ACA0);
    unint64_t result = sub_100583AD4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for URL();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(unsigned char *)(v7[7] + v16) = v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    _DWORD v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}