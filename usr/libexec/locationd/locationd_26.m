void sub_1011AE5A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011AE5B4(uint64_t a1, unsigned __int8 *a2)
{
  a2[1320] = 0;
  if (a2[1] | *a2) {
    BOOL v3 = *(unsigned char *)(a1 + 1424) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    sub_101599DD8((uint64_t)(a2 + 8), a1 + 56, 1, (uint64_t)&v17);
    a2[544] = v17;
    long long v5 = *(_OWORD *)&v18[24];
    *((_OWORD *)a2 + 35) = *(_OWORD *)&v18[8];
    *((_OWORD *)a2 + 36) = v5;
    *((void *)a2 + 74) = v19;
    long long v6 = v23;
    *((_OWORD *)a2 + 40) = v22;
    *((_OWORD *)a2 + 41) = v6;
    *((_OWORD *)a2 + 42) = v24;
    long long v7 = v25;
    *(_OWORD *)(a2 + 712) = v26;
    *(_OWORD *)(a2 + 696) = v7;
    *(_OWORD *)(a2 + 744) = v28;
    *(_OWORD *)(a2 + 760) = v29;
    long long v8 = v21;
    long long v9 = v20;
    *((void *)a2 + 91) = v27;
    v10 = a2 + 784;
    *((_OWORD *)a2 + 38) = v9;
    *((_OWORD *)a2 + 39) = v8;
    memcpy(a2 + 784, v30, 0x128uLL);
    uint64_t v11 = 0;
    while ((*(void *)&a2[v11 + 160] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v11 += 8;
      if (v11 == 32)
      {
        uint64_t v12 = 0;
        while ((*(void *)&a2[v12 + 208] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v12 += 8;
          if (v12 == 24)
          {
            uint64_t v13 = 0;
            while ((*(void *)&v10[v13] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            {
              v13 += 8;
              if (v13 == 288)
              {
                uint64_t v14 = 0;
                while (*(double *)&v10[v14] >= 0.0)
                {
                  v14 += 56;
                  if (v14 == 336)
                  {
                    long long v15 = *(_OWORD *)(a2 + 760);
                    *((_OWORD *)a2 + 86) = *(_OWORD *)(a2 + 744);
                    *((_OWORD *)a2 + 87) = v15;
                    LOBYTE(v17) = 1;
                    *(int64x2_t *)v18 = vdupq_n_s64(3uLL);
                    *(_OWORD *)&v18[16] = xmmword_101D07BB0;
                    *(void *)&v18[32] = a2 + 952;
                    v19 = a2 + 1072;
                    sub_1011B7DF8((uint64_t)(a2 + 1408), &v17);
                    *((double *)a2 + 159) = sqrt(*((double *)a2 + 177) + *((double *)a2 + 181));
                    *((double *)a2 + 160) = sqrt(*((double *)a2 + 185));
                    long long v16 = *((_OWORD *)a2 + 69);
                    *(_OWORD *)(a2 + 1336) = *((_OWORD *)a2 + 68);
                    *(_OWORD *)(a2 + 1352) = v16;
                    if (!cnnavigation::ENUToECEF() && !cnnavigation::ECEFToLLA())
                    {
                      a2[1320] = 1;
                      uint64_t result = *((_DWORD *)a2 + 380) | 1u;
                      *((_DWORD *)a2 + 380) = result;
                      return result;
                    }
                    return *((unsigned int *)a2 + 380);
                  }
                }
                return *((unsigned int *)a2 + 380);
              }
            }
            return *((unsigned int *)a2 + 380);
          }
        }
        return *((unsigned int *)a2 + 380);
      }
    }
  }
  return *((unsigned int *)a2 + 380);
}

uint64_t sub_1011AE804(uint64_t a1, unsigned __int8 *a2)
{
  a2[1496] = 0;
  if (a2[1] | *a2) {
    _ZF = *(unsigned char *)(a1 + 1424) == 0;
  }
  else {
    _ZF = 1;
  }
  if (!_ZF && *(unsigned char *)(a1 + 1400) != 0)
  {
    __double2 v6 = __sincos_stret(*(double *)(a1 + 1408));
    double v7 = *(double *)(a1 + 1416);
    uint64_t v48 = 0;
    *(void *)&v49[0] = off_102316AA0;
    v49[1] = v6.__cosval;
    v49[2] = v6.__sinval;
    v49[3] = 0.0;
    v49[4] = 0.0;
    *(void *)&v41[0] = off_102316730;
    v41[1] = v6.__sinval * (v7 * v6.__sinval);
    double v42 = -(v7 * v6.__sinval * v6.__cosval);
    uint64_t v43 = 0;
    double v44 = v42;
    double v45 = v6.__cosval * (v7 * v6.__cosval);
    long long v46 = 0u;
    long long v47 = 0u;
    v38 = off_102316AA0;
    long long v39 = 0u;
    long long v40 = 0u;
    v36 = off_102316730;
    memset(v37, 0, sizeof(v37));
    sub_101599ACC((uint64_t)(a2 + 8), v49, v41, (uint64_t)&v38, (uint64_t)&v36, 1);
    v32 = off_1023174F0;
    double v33 = -*((double *)&v39 + 1);
    double v34 = *(double *)&v39;
    uint64_t v35 = 0;
    v20[0] = 1;
    int64x2_t v21 = vdupq_n_s64(2uLL);
    long long v22 = xmmword_101DAB7D0;
    long long v23 = v37;
    long long v24 = &v37[40];
    sub_1011B7C8C((uint64_t)v20, (uint64_t)&v32, v25);
    long long v28 = off_1023174F0;
    double v29 = 0.0;
    double v30 = 0.0;
    uint64_t v31 = 0;
    long long v8 = v26;
    long long v9 = v27;
    if (v26 != v27)
    {
      v10 = &v29;
      do
      {
        uint64_t v11 = *v8++;
        *(void *)v10++ = v11;
      }
      while (v8 != v9);
    }
    sub_1011B9060(v25);
    double v12 = atan2(*((long double *)&v39 + 1), *(long double *)&v39);
    *((double *)a2 + 188) = v12;
    double v13 = v34 * v30 + v33 * v29;
    *((double *)a2 + 189) = v13;
    if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v13 >= 0.0)
    {
      *((double *)a2 + 161) = v12;
      double v14 = sqrt(v13);
      *((double *)a2 + 162) = v14;
      if (v14 <= 3.14159265)
      {
        a2[1496] = 1;
        uint64_t result = *((_DWORD *)a2 + 380) | 2u;
        *((_DWORD *)a2 + 380) = result;
        return result;
      }
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a2 + 1288) = _Q0;
    }
  }
  return *((unsigned int *)a2 + 380);
}

BOOL sub_1011AEA90(uint64_t a1, double a2, double a3, int8x16_t a4)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1528) = _Q0;
  LOBYTE(v60) = 1;
  int64x2_t v22 = vdupq_n_s64(3uLL);
  int64x2_t v61 = v22;
  long long v62 = xmmword_101D07BB0;
  uint64_t v63 = a1 + 784;
  uint64_t v64 = a1 + 904;
  uint64_t v55 = 0;
  v56 = off_102316AA0;
  uint64_t v58 = 0x3FF0000000000000;
  uint64_t v59 = 0;
  long long v57 = xmmword_101DAB840;
  *(void *)&_Q0 = *(void *)(a1 + 672);
  v52[1] = off_102316AA0;
  long long v53 = *(_OWORD *)(a1 + 656);
  uint64_t v54 = _Q0;
  sub_101599690((double *)(a1 + 600), a1 + 688, (double *)&v56, (uint64_t)v50, (int8x16_t)(unint64_t)_Q0, a4);
  sub_1011B5780((uint64_t)v50, &v60, (uint64_t *)v43);
  LOBYTE(v28) = 0;
  int64x2_t v29 = v22;
  long long v30 = xmmword_101DAB7F0;
  uint64_t v31 = &v51;
  v32 = v52;
  sub_1011B77B4((uint64_t *)v43, &v28, v45);
  uint64_t v48 = off_102316730;
  memset(v49, 0, sizeof(v49));
  v10 = v46;
  uint64_t v11 = v47;
  if (v46 != v47)
  {
    double v12 = v49;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while (v10 != v11);
  }
  sub_1011B9060(v45);
  sub_1011B9060(v43);
  double v14 = *((double *)&v53 + 1) * *((double *)&v53 + 1) + *(double *)&v53 * *(double *)&v53;
  if (sqrt(v14) == 0.0) {
    return 0;
  }
  long long v40 = off_1023174F0;
  v41[0] = -*((double *)&v53 + 1) / v14;
  v41[1] = *(double *)&v53 / v14;
  uint64_t v42 = 0;
  LOBYTE(v33) = 0;
  long long v34 = xmmword_101DAB7E0;
  int64x2_t v35 = vdupq_n_s64(1uLL);
  v36 = v41;
  v37 = &v42;
  memset(v43, 0, sizeof(v43));
  uint64_t v44 = 0;
  sub_1011B9358((uint64_t *)v43, &v33);
  v23[0] = 0;
  int64x2_t v24 = vdupq_n_s64(2uLL);
  long long v25 = xmmword_101DAB7D0;
  long long v26 = v49;
  uint64_t v27 = &v49[40];
  sub_1011B7C8C((uint64_t)v23, (uint64_t)&v40, &v28);
  sub_1011B7E68((uint64_t *)v43, (uint64_t)&v28, v45);
  v39[0] = 0.0;
  v39[1] = 0.0;
  v38 = off_102316E10;
  long long v16 = v46;
  uint64_t v17 = v47;
  if (v46 != v47)
  {
    v18 = v39;
    do
    {
      uint64_t v19 = *v16++;
      *(void *)v18++ = v19;
    }
    while (v16 != v17);
  }
  sub_1011B9060(v45);
  sub_1011B9060(&v28);
  sub_1011B9060(v43);
  BOOL result = 0;
  double v20 = v39[0];
  if ((*(void *)&v39[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v39[0] >= 0.0)
  {
    *(long double *)(a1 + 1528) = atan2(*((long double *)&v53 + 1), *(long double *)&v53);
    double v21 = sqrt(v20);
    *(double *)(a1 + 1536) = v21;
    BOOL result = v21 <= 3.14159265;
    *(unsigned char *)(a1 + 1524) = result;
  }
  return result;
}

void sub_1011AEDC0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8296)) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 6760);
  if ((unint64_t)(0x13A524387AC82261 * ((v3 - *(void *)(a1 + 6752)) >> 3)) < 2) {
    return;
  }
  if (!*(unsigned char *)(a2 + 160))
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v11 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a2 + 16);
      int v13 = *(unsigned __int8 *)(a2 + 160);
      *(_DWORD *)buf = 134349312;
      *(void *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLVLF,filterUnfusedLocation,Invalid LocData,machAbsTime,%{public}.3lf,currLocIsEnuValid,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v14 = *(void *)(a2 + 16);
      int v15 = *(unsigned __int8 *)(a2 + 160);
      *(_DWORD *)long long v57 = 134349312;
      *(void *)&v57[4] = v14;
      *(_WORD *)&v57[12] = 1026;
      *(_DWORD *)&v57[14] = v15;
      long long v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::filterUnfusedLocation(const fusion::LocData &)", "%s\n", v16);
      goto LABEL_87;
    }
    return;
  }
  sub_1011B8F30((uint64_t)v57, v3 - 2176);
  double v5 = *(double *)(a2 + 16) - *(double *)&v57[16];
  *(_DWORD *)long long v57 = *(_DWORD *)a2;
  *(_OWORD *)&v57[8] = *(_OWORD *)(a2 + 8);
  *(void *)&v57[24] = *(void *)(a2 + 24);
  LOBYTE(v73) = 0;
  double v6 = *(double *)(a2 + 144);
  double v7 = *(double *)(a2 + 152);
  if (v7 > 0.0 && v6 < 0.5)
  {
    *(double *)__B = v7 * (v5 * (v5 * 0.5) * v7);
    buf[0] = 1;
    *(_OWORD *)&buf[8] = xmmword_101D8A880;
    long long v76 = xmmword_101DAB7C0;
    *(void *)&long long v77 = v70;
    *((void *)&v77 + 1) = (char *)v71 + 8;
    sub_1011BA574((uint64_t)buf, (const double *)__B);
    *(void *)&long long v62 = sqrt(*(double *)v70 + *(double *)v71);
    long long v17 = *(_OWORD *)(a2 + 144);
    long long v63 = *(_OWORD *)(a2 + 128);
    long long v64 = v17;
    goto LABEL_20;
  }
  double v9 = *(double *)(a2 + 136);
  if (v9 <= 0.0)
  {
    if (*((double *)&v63 + 1) > 0.0)
    {
      if (v7 > 0.0)
      {
        double v9 = *((double *)&v63 + 1);
        double v10 = *(double *)&v63;
        goto LABEL_47;
      }
      if (*((double *)&v64 + 1) > 0.0)
      {
        double v10 = *(double *)&v63;
        double v6 = *(double *)&v64;
        double v9 = *((double *)&v63 + 1);
        double v7 = *((double *)&v64 + 1);
        goto LABEL_47;
      }
    }
  }
  else
  {
    if (v7 > 0.0)
    {
      double v10 = *(double *)(a2 + 128);
LABEL_47:
      sub_1011B17D8((uint64_t)v57, v10, v9, v6, v7, v5);
      goto LABEL_49;
    }
    if (*((double *)&v64 + 1) > 0.0)
    {
      double v10 = *(double *)(a2 + 128);
      double v7 = *((double *)&v64 + 1);
      double v6 = *(double *)&v64;
      goto LABEL_47;
    }
  }
  *(void *)&long long v63 = *(void *)(a2 + 128);
  *((double *)&v63 + 1) = v9;
  *(double *)&long long v64 = v6;
  *((double *)&v64 + 1) = v7;
LABEL_49:
  double v31 = hypot(*(long double *)&v62, *((long double *)&v62 + 1));
  double v32 = hypot(*(long double *)(a2 + 112), *(long double *)(a2 + 120));
  double v33 = v31 + v32;
  unint64_t v34 = (unint64_t)(COERCE__INT64(fabs(v31 + v32)) - 0x10000000000000) >> 53;
  if ((COERCE__INT64(v31 + v32) <= -1 || v34 >= 0x3FF)
    && (unint64_t)(COERCE__INT64(v31 + v32) - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    v52 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349568;
      *(void *)&buf[4] = v53;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v31;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&long long v76 = v32;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "CLVLF,filterUnfusedLocation,Invalid horzAcc,machAbsTime,%{public}.3lf,prevHorzAcc,%{public}.3lf,currHorzAcc,%{public}.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v54 = *(void *)(a2 + 16);
      *(_DWORD *)__B = 134349568;
      *(void *)&__B[4] = v54;
      *(_WORD *)&__B[12] = 2050;
      *(double *)&__B[14] = v31;
      *(_WORD *)&__B[22] = 2050;
      v56[0] = v32;
      long long v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::filterUnfusedLocation(const fusion::LocData &)", "%s\n", v16);
      goto LABEL_87;
    }
    return;
  }
  *(void *)buf = off_102316AA0;
  *(_OWORD *)&buf[8] = v68;
  long long v76 = v69;
  uint64_t v37 = 8;
  double v38 = v32 / v33;
  do
  {
    *(double *)&buf[v37] = v38 * *(double *)&buf[v37];
    v37 += 8;
  }
  while (v37 != 32);
  *(void *)__B = off_102316AA0;
  *(_OWORD *)&__B[8] = *(_OWORD *)(a2 + 216);
  *(_OWORD *)v56 = *(_OWORD *)(a2 + 232);
  uint64_t v39 = 8;
  double v40 = v31 / v33;
  do
  {
    *(double *)&__B[v39] = v40 * *(double *)&__B[v39];
    v39 += 8;
  }
  while (v39 != 32);
  for (uint64_t i = 8; i != 32; i += 8)
    *(double *)&buf[i] = *(double *)&buf[i] + *(double *)&__B[i];
  uint64_t v42 = 0;
  long long v68 = *(_OWORD *)&buf[8];
  long long v69 = v76;
  double v43 = v38 * v38;
  do
  {
    *(double *)((char *)v70 + v42) = v43 * *(double *)((char *)v70 + v42);
    v42 += 8;
  }
  while (v42 != 72);
  long long v44 = *(_OWORD *)(a2 + 256);
  long long v76 = *(_OWORD *)(a2 + 272);
  long long v45 = *(_OWORD *)(a2 + 304);
  long long v77 = *(_OWORD *)(a2 + 288);
  long long v78 = v45;
  long long v79 = *(_OWORD *)(a2 + 320);
  double v46 = v40 * v40;
  *(void *)buf = off_102316730;
  *(_OWORD *)&buf[8] = v44;
  for (uint64_t j = 8; j != 80; j += 8)
    *(double *)&buf[j] = v46 * *(double *)&buf[j];
  for (uint64_t k = 0; k != 72; k += 8)
    *(double *)((char *)v70 + k) = *(double *)((char *)v70 + k) + *(double *)&buf[k + 8];
  *(void *)&long long v62 = sqrt(*(double *)v70 + *(double *)v71);
  *((void *)&v62 + 1) = sqrt(*(double *)&v72);
  if (cnnavigation::ENUToECEF() || cnnavigation::ECEFToLLA())
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    v49 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      uint64_t v50 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349056;
      *(void *)&buf[4] = v50;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "CLVLF,filterUnfusedLocation,Propagated LLA invalid,machAbsTime,%{public}.3lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v51 = *(void *)(a2 + 16);
      *(_DWORD *)__B = 134349056;
      *(void *)&__B[4] = v51;
      long long v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::filterUnfusedLocation(const fusion::LocData &)", "%s\n", v16);
LABEL_87:
      if (v16 != buf) {
        free(v16);
      }
      return;
    }
    return;
  }
LABEL_20:
  long long v18 = *(_OWORD *)&v57[16];
  *(_OWORD *)(a1 + 7936) = *(_OWORD *)v57;
  *(_OWORD *)(a1 + 7952) = v18;
  *(_OWORD *)(a1 + 7976) = v58;
  *(_OWORD *)(a1 + 7992) = v59;
  long long v19 = v61;
  *(_OWORD *)(a1 + 8016) = v60;
  *(_OWORD *)(a1 + 8032) = v19;
  *(_OWORD *)(a1 + 8080) = v64;
  long long v20 = v62;
  *(_OWORD *)(a1 + 8064) = v63;
  *(_OWORD *)(a1 + 8048) = v20;
  long long v21 = v66;
  *(_OWORD *)(a1 + 8128) = v67;
  *(_OWORD *)(a1 + 8112) = v21;
  *(_OWORD *)(a1 + 8152) = v68;
  *(_OWORD *)(a1 + 8168) = v69;
  *(_OWORD *)(a1 + 8256) = v72;
  long long v22 = v71[0];
  *(_OWORD *)(a1 + 8240) = v71[1];
  *(_OWORD *)(a1 + 8224) = v22;
  long long v23 = v70[0];
  *(_OWORD *)(a1 + 8208) = v70[1];
  *(unsigned char *)(a1 + 8096) = v65;
  *(_OWORD *)(a1 + 0x2000) = v23;
  *(void *)(a1 + 8288) = v74;
  *(_OWORD *)(a1 + 8272) = v73;
  *(_DWORD *)(a1 + 8296) = 5;
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  int64x2_t v24 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void *)(a2 + 16);
    double v26 = 1.57079633 - *(double *)(a1 + 8064);
    if (v26 < 0.0 || v26 >= 6.28318531)
    {
      double v26 = fmod(v26, 6.28318531);
      if (v26 < 0.0 || v26 == 0.0 && (*(void *)&v26 & 0x8000000000000000) == 0) {
        double v26 = v26 + 6.28318531;
      }
    }
    uint64_t v27 = *(void *)(a1 + 8080);
    *(_DWORD *)buf = 134349568;
    *(void *)&buf[4] = v25;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v26 * 57.2957795;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&long long v76 = v27;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLVLF,filterUnfusedLocation,Location propagated,machAbsTime,%{public}.3lf,course,%{public}.3lf,speed,%{public}.3lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v28 = *(void *)(a2 + 16);
    double v29 = 1.57079633 - *(double *)(a1 + 8064);
    if (v29 < 0.0 || v29 >= 6.28318531)
    {
      double v29 = fmod(v29, 6.28318531);
      if (v29 < 0.0 || v29 == 0.0 && (*(void *)&v29 & 0x8000000000000000) == 0) {
        double v29 = v29 + 6.28318531;
      }
    }
    double v30 = *(double *)(a1 + 8080);
    *(_DWORD *)__B = 134349568;
    *(void *)&__B[4] = v28;
    *(_WORD *)&__B[12] = 2050;
    *(double *)&__B[14] = v29 * 57.2957795;
    *(_WORD *)&__B[22] = 2050;
    v56[0] = v30;
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::filterUnfusedLocation(const fusion::LocData &)", "%s\n", v16);
    goto LABEL_87;
  }
}

void sub_1011AF8E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011AF8F0(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 8296) & 2) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 6752);
    if (v3 != *(void *)(a1 + 6760))
    {
      if (*(_DWORD *)(v3 + 1904) | *(_DWORD *)a2)
      {
        uint64_t v5 = v3 + 1160;
        sub_1011B8F30((uint64_t)v27, a1 + 7936);
        if (sub_1011ACF20(v5, (uint64_t)v27, (uint64_t)v27))
        {
          double v6 = v28;
          double v7 = *(double *)(a1 + 8064);
          double v8 = vabdd_f64(v28, v7);
          if (6.28318531 - v8 >= v8) {
            double v9 = v8;
          }
          else {
            double v9 = 6.28318531 - v8;
          }
          double v10 = *(double *)(a1 + 8072);
          double v11 = v10 * 1.5;
          if (v10 * 1.5 > 3.14159265) {
            double v11 = 3.14159265;
          }
          if (v9 > v11)
          {
            double v12 = v29;
            double v13 = sqrt(v29);
            double v14 = v10 + v13;
            unint64_t v15 = (unint64_t)(COERCE__INT64(fabs(v10 + v13)) - 0x10000000000000) >> 53;
            if ((COERCE__INT64(v10 + v13) <= -1 || v15 >= 0x3FF)
              && (unint64_t)(COERCE__INT64(v10 + v13) - 1) >= 0xFFFFFFFFFFFFFLL)
            {
              if (qword_102419420 != -1) {
                dispatch_once(&qword_102419420, &stru_1023166C8);
              }
              int64x2_t v24 = qword_102419428;
              if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
              {
                uint64_t v25 = *(void *)(a2 + 40);
                *(_DWORD *)buf = 134349568;
                uint64_t v37 = v25;
                __int16 v38 = 2050;
                double v39 = v10;
                __int16 v40 = 2050;
                double v41 = v13;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLVLF,filterFusedCourse,Invalid courseAcc,machAbsTime,%{public}.3lf,prevCourseAcc,%{public}.3lf,currCourseAcc,%{public}.3lf", buf, 0x20u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419420 != -1) {
                  dispatch_once(&qword_102419420, &stru_1023166C8);
                }
                uint64_t v26 = *(void *)(a2 + 40);
                int v30 = 134349568;
                uint64_t v31 = v26;
                __int16 v32 = 2050;
                double v33 = v10;
                __int16 v34 = 2050;
                double v35 = v13;
                long long v23 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::filterFusedCourse(const fusion::VioData &)", "%s\n", v23);
                goto LABEL_35;
              }
            }
            else
            {
              double v18 = v13 / v14;
              double v19 = v10 / v14;
              *(double *)(a1 + 8064) = v28 * v19 + v18 * v7;
              *(unsigned char *)(a1 + 8272) = v27[336];
              *(double *)(a1 + 8072) = sqrt(v12 * (v19 * v19) + v10 * (v18 * v18) * v10);
              *(double *)(a1 + 8280) = v6;
              *(double *)(a1 + 8288) = v12;
              if (qword_102419420 != -1) {
                dispatch_once(&qword_102419420, &stru_1023166C8);
              }
              long long v20 = qword_102419428;
              if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v21 = *(void *)(a2 + 40);
                *(_DWORD *)buf = 134349312;
                uint64_t v37 = v21;
                __int16 v38 = 2050;
                double v39 = v9 * 57.2957795;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLVLF,filterFusedCourse,Course adjusted,machAbsTime,%{public}.3lf,courseDiff,%{public}.3lf", buf, 0x16u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419420 != -1) {
                  dispatch_once(&qword_102419420, &stru_1023166C8);
                }
                uint64_t v22 = *(void *)(a2 + 40);
                int v30 = 134349312;
                uint64_t v31 = v22;
                __int16 v32 = 2050;
                double v33 = v9 * 57.2957795;
                long long v23 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::filterFusedCourse(const fusion::VioData &)", "%s\n", v23);
LABEL_35:
                if (v23 != (char *)buf) {
                  free(v23);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1011AFD6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011AFD78(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  long long v6 = *(_OWORD *)(a2 + 104);
  long long v7 = *(_OWORD *)(a2 + 120);
  long long v8 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  long long v11 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v11;
  memcpy((void *)(a1 + 248), (const void *)(a2 + 248), 0x128uLL);
  *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
  long long v13 = *(_OWORD *)(a2 + 560);
  long long v12 = *(_OWORD *)(a2 + 576);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(_OWORD *)(a1 + 560) = v13;
  *(_OWORD *)(a1 + 576) = v12;
  long long v15 = *(_OWORD *)(a2 + 624);
  long long v14 = *(_OWORD *)(a2 + 640);
  long long v16 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v16;
  *(_OWORD *)(a1 + 624) = v15;
  *(_OWORD *)(a1 + 640) = v14;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  long long v17 = *(_OWORD *)(a2 + 696);
  long long v18 = *(_OWORD *)(a2 + 712);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = v18;
  *(_OWORD *)(a1 + 696) = v17;
  long long v19 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = v19;
  memcpy((void *)(a1 + 784), (const void *)(a2 + 784), 0x128uLL);
  long long v20 = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1088) = v20;
  long long v21 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v21;
  long long v22 = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = v22;
  long long v23 = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1216) = v23;
  long long v24 = *(_OWORD *)(a2 + 1256);
  *(_OWORD *)(a1 + 1240) = *(_OWORD *)(a2 + 1240);
  *(_OWORD *)(a1 + 1256) = v24;
  char v25 = *(unsigned char *)(a2 + 1320);
  long long v27 = *(_OWORD *)(a2 + 1288);
  long long v26 = *(_OWORD *)(a2 + 1304);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1288) = v27;
  *(_OWORD *)(a1 + 1304) = v26;
  *(unsigned char *)(a1 + 1320) = v25;
  long long v28 = *(_OWORD *)(a2 + 1352);
  *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1352) = v28;
  long long v29 = *(_OWORD *)(a2 + 1392);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1392) = v29;
  *(_OWORD *)(a1 + 1416) = *(_OWORD *)(a2 + 1416);
  long long v30 = *(_OWORD *)(a2 + 1480);
  long long v32 = *(_OWORD *)(a2 + 1432);
  long long v31 = *(_OWORD *)(a2 + 1448);
  *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a2 + 1464);
  *(_OWORD *)(a1 + 1480) = v30;
  *(_OWORD *)(a1 + 1432) = v32;
  *(_OWORD *)(a1 + 1448) = v31;
  long long v33 = *(_OWORD *)(a2 + 1496);
  *(void *)(a1 + 1512) = *(void *)(a2 + 1512);
  *(_OWORD *)(a1 + 1496) = v33;
  uint64_t v34 = *(void *)(a2 + 1536);
  *(_OWORD *)(a1 + 1520) = *(_OWORD *)(a2 + 1520);
  *(void *)(a1 + 1536) = v34;
  sub_1011B15C0(a1 + 1544, a2 + 1544);
  return a1;
}

BOOL sub_1011AFF4C(void *a1)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    if ((a1[i + 867] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      return 0;
    }
  }
  for (uint64_t j = 0; j != 3; ++j)
  {
    if ((a1[j + 873] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      return 0;
    }
  }
  uint64_t v4 = 0;
  long long v5 = a1 + 878;
  do
  {
    if ((v5[v4] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      return 0;
    }
    ++v4;
  }
  while (v4 != 36);
  for (uint64_t k = 0; k != 42; k += 7)
  {
    if (*(double *)&v5[k] <= 0.0) {
      return 0;
    }
  }
  uint64_t v7 = a1[844];
  uint64_t v8 = a1[845];
  if (v7 == v8) {
    return 1;
  }
  LOBYTE(v9) = 1;
  char v10 = 1;
  do
  {
    v10 &= (*(_DWORD *)(v7 + 1520) & 3) == 0;
    v9 &= (*(_DWORD *)(v7 + 1520) & 4u) >> 2;
    v7 += 3336;
  }
  while (v7 != v8);
  if (v10)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v11 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = 0x13A524387AC82261 * ((uint64_t)(a1[845] - a1[844]) >> 3);
      uint64_t v13 = a1[994];
      *(_DWORD *)buf = 134218240;
      uint64_t v20 = v12;
      __int16 v21 = 2050;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLVLF,checkStateHealth,Location not fused consecutively for last %zu epochs,machAbsTime,%{public}.3lf", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 == -1) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  if (!v9) {
    return 1;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  long long v15 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = 0x13A524387AC82261 * ((uint64_t)(a1[845] - a1[844]) >> 3);
    uint64_t v17 = a1[994];
    *(_DWORD *)buf = 134218240;
    uint64_t v20 = v16;
    __int16 v21 = 2050;
    uint64_t v22 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLVLF,checkStateHealth,Location propagated consecutively for last %zu epochs,machAbsTime,%{public}.3lf", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (!result) {
    return result;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419420 != -1) {
LABEL_36:
  }
    dispatch_once(&qword_102419420, &stru_1023166C8);
LABEL_31:
  long long v18 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::checkStateHealth()", "%s\n", v18);
  if (v18 != (char *)buf) {
    free(v18);
  }
  return 0;
}

void sub_1011B03EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1011B03F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a3 + 176) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a3 + 192) = v3;
  *(unsigned char *)(a3 + 160) = 0;
  if (*(double *)(a3 + 112) <= 0.0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v7 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVLF,computeEnuFromEcef,latitude/longitude unavailable", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 == -1)
    {
LABEL_18:
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLVisionLocationFuser::computeEnuFromEcef(const math::Vector3 &, const math::Vector3 &, fusion::LocData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 0;
    }
LABEL_24:
    dispatch_once(&qword_102419420, &stru_1023166C8);
    goto LABEL_18;
  }
  if (*(double *)(a3 + 120) <= 0.0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v8 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLVLF,computeEnuFromEcef,altitude unavailable", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 == -1) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  int v5 = cnnavigation::ECEFToENU();
  *(unsigned char *)(a3 + 160) = v5 == 0;
  if (v5) {
    return 0;
  }
  double v10 = *(double *)(a3 + 120);
  double v11 = *(double *)(a3 + 112) * (*(double *)(a3 + 112) * 0.5);
  *(double *)(a3 + 288) = v11;
  *(double *)(a3 + 256) = v11;
  double v12 = v10 * v10;
  if (v10 < 0.0) {
    double v12 = 0.0;
  }
  *(double *)(a3 + 320) = v12;
  return 1;
}

void sub_1011B0730(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1011B073C(uint64_t a1)
{
  double v2 = *(double *)(a1 + 152);
  if (*(unsigned char *)(a1 + 1784)) {
    BOOL v3 = *(unsigned char *)(a1 + 1616) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3 || v2 <= 0.0)
  {
    return v2 > 0.0 && *(double *)(a1 + 144) < 0.5;
  }
  else
  {
    BOOL v4 = hypot(*(long double *)(a1 + 1632), *(long double *)(a1 + 1640)) / *(double *)(a1 + 1752) < 0.4;
    return *(double *)(a1 + 144) < 0.5 && v4;
  }
}

BOOL sub_1011B07D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 1784)) {
    BOOL v5 = *(unsigned char *)(a2 + 160) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && *(unsigned char *)(a3 + 1320) != 0)
  {
    BOOL v84 = sub_1011B5E00(a1 + 4960, a2, a3);
    uint64_t v20 = 0;
    v126 = off_102316AA0;
    long long v127 = *(_OWORD *)(a2 + 216);
    long long v128 = *(_OWORD *)(a2 + 232);
    do
    {
      *(double *)&(&v126)[v20 + 1] = *(double *)&(&v126)[v20 + 1] - *(double *)(a3 + 744 + v20 * 8);
      ++v20;
    }
    while (v20 != 3);
    *(_OWORD *)&v153[8] = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    uint64_t v83 = a1 + 6784;
    long long v161 = 0u;
    *(void *)v153 = off_102316FC8;
    uint64_t v162 = 0;
    sub_101599690((double *)(a1 + 6840), a1 + 6928, (double *)(a2 + 608), (uint64_t)buf, (int8x16_t)0, v19);
    *(_OWORD *)&v153[8] = *(_OWORD *)&buf[8];
    long long v154 = *(_OWORD *)&buf[24];
    long long v155 = *(_OWORD *)&buf[40];
    long long v156 = *(_OWORD *)&buf[56];
    *(void *)&long long v157 = *(void *)v164;
    *((void *)&v161 + 1) = 0x3FF0000000000000;
    *((void *)&v159 + 1) = 0x3FF0000000000000;
    *((void *)&v157 + 1) = 0x3FF0000000000000;
    LOBYTE(__p[0]) = 0;
    *(int64x2_t *)&__p[1] = vdupq_n_s64(3uLL);
    int64x2_t v149 = (int64x2_t)xmmword_101D07BB0;
    v150 = (long long *)(a2 + 824);
    v151 = (char *)(a2 + 944);
    sub_1011B5780(a1 + 6840, (uint64_t *)__p, (uint64_t *)buf);
    v120 = off_102316730;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    __int16 v21 = *(uint64_t **)&buf[24];
    uint64_t v22 = *(uint64_t **)&buf[32];
    if (*(void *)&buf[24] != *(void *)&buf[32])
    {
      long long v23 = &v121;
      do
      {
        uint64_t v24 = *v21++;
        *(void *)long long v23 = v24;
        long long v23 = (long long *)((char *)v23 + 8);
      }
      while (v21 != v22);
    }
    sub_1011B9060(buf);
    buf[0] = 0;
    *(int64x2_t *)&buf[8] = vdupq_n_s64(3uLL);
    *(_OWORD *)&unsigned char buf[24] = xmmword_101DAB7F0;
    *(void *)&buf[40] = a1 + 6848;
    *(void *)&buf[48] = a1 + 6920;
    sub_1011BA96C((double *)&v120, buf);
    for (uint64_t i = 0; i != 9; ++i)
      *(double *)&(&v120)[i + 1] = *(double *)&(&v120)[i + 1] + *(double *)(a2 + 256 + i * 8);
    sub_1011B59D8((uint64_t)v153, a1 + 7016, (uint64_t)buf);
    LOBYTE(v94) = 1;
    float64x2_t v95 = (float64x2_t)xmmword_101DAB800;
    long long v96 = xmmword_101DAB7F0;
    *(void *)&long long v97 = &v153[8];
    *((void *)&v97 + 1) = &v162;
    sub_1011B5900((uint64_t)buf, (uint64_t *)&v94, (uint64_t *)__p);
    uint64_t v26 = 0;
    long long v116 = v122;
    long long v117 = v123;
    long long v118 = v124;
    long long v119 = v125;
    v114 = off_102316730;
    long long v115 = v121;
    uint64_t v27 = v149.i64[0];
    do
    {
      *(double *)&(&v114)[v26 + 1] = *(double *)&(&v114)[v26 + 1] + *(double *)(v27 + v26 * 8);
      ++v26;
    }
    while (v26 != 9);
    sub_1011B9060(__p);
    memset(buf, 0, 24);
    memset(__p, 0, sizeof(__p));
    sub_1011B5A88((uint64_t)&v114, (uint64_t)v107);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    LOBYTE(__p[0]) = 0;
    *(_OWORD *)&__p[1] = xmmword_101DAB7D0;
    int64x2_t v149 = vdupq_n_s64(1uLL);
    v150 = &v127;
    v151 = (char *)&v128 + 8;
    v94 = off_102316AA0;
    *((void *)&v96 + 1) = 0;
    float64x2_t v95 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v110, *((double *)&v127 + 1)), v108, *(double *)&v127), v112, *(double *)&v128);
    *(double *)&long long v96 = *((double *)&v127 + 1) * v111 + v109 * *(double *)&v127 + v113 * *(double *)&v128;
    sub_1011B5B70((uint64_t)__p, (uint64_t)&v94, (uint64_t *)buf);
    v106[0] = 0.0;
    v106[1] = 0.0;
    v105 = off_102316E10;
    long long v28 = *(uint64_t **)&buf[24];
    long long v29 = *(uint64_t **)&buf[32];
    if (*(void *)&buf[24] != *(void *)&buf[32])
    {
      long long v30 = v106;
      do
      {
        uint64_t v31 = *v28++;
        *(void *)v30++ = v31;
      }
      while (v28 != v29);
    }
    sub_1011B9060(buf);
    if (v106[0] <= 6.7553467) {
      goto LABEL_40;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v32 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v33 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349312;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v84;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLVLF,updateWithCLPoints,Mahalanobis test failed,machAbsTime,%{public}.3lf,forceUpdateNeeded,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v79 = *(void **)(a2 + 16);
      LODWORD(__p[0]) = 134349312;
      *(void **)((char *)__p + 4) = v79;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = v84;
      v80 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::LocData> &, const fusion::LocationFuserState &)", "%s\n", v80);
      if (v80 != (char *)buf) {
        free(v80);
      }
    }
    if (v84)
    {
LABEL_40:
      sub_1011B59D8((uint64_t)v153, a1 + 7016, (uint64_t)__p);
      LOBYTE(v129) = 0;
      *(_OWORD *)&v130[4] = xmmword_101DAB800;
      *(_OWORD *)v131 = xmmword_101DAB7F0;
      *(void *)&v131[16] = &__p[1];
      *(void *)&v131[24] = &v152;
      sub_1011B5C04((uint64_t)&v129, (uint64_t)v107, (uint64_t *)buf);
      v94 = off_102317180;
      float64x2_t v95 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      uint64_t v104 = 0;
      uint64_t v34 = *(double **)&buf[24];
      double v35 = *(double **)&buf[32];
      if (*(void *)&buf[24] != *(void *)&buf[32])
      {
        v36 = &v95;
        do
        {
          float64_t v37 = *v34++;
          v36->f64[0] = v37;
          v36 = (float64x2_t *)((char *)v36 + 8);
        }
        while (v34 != v35);
      }
      sub_1011B9060(buf);
      sub_1011B5CA8((uint64_t)&v94, (uint64_t)&v126, (uint64_t)v89);
      *(float64x2_t *)(a1 + 6984) = vaddq_f64(v92, *(float64x2_t *)(a1 + 6984));
      *(double *)(a1 + 7000) = v93 + *(double *)(a1 + 7000);
      sub_1011B5D30((uint64_t)&v94, (uint64_t)__p, (uint64_t)buf);
      sub_1011BA934(a1 + 7016, (uint64_t)buf);
      if (sqrt(v90.f64[1] * v90.f64[1] + v90.f64[0] * v90.f64[0] + v91 * v91) != 0.0)
      {
        LOBYTE(v129) = 0;
        *(_OWORD *)&v130[4] = xmmword_101DAB7F0;
        *(int64x2_t *)v131 = vdupq_n_s64(1uLL);
        *(void *)&v131[16] = a1 + 6936;
        *(void *)&v131[24] = a1 + 6960;
        memset(buf, 0, sizeof(buf));
        sub_1011B9358((uint64_t *)buf, &v129);
        sub_1011BA6E4((uint64_t)buf, (const double *)(a1 + 6960));
        float64x2_t v87 = 0u;
        long long v88 = 0u;
        __int16 v38 = *(double **)&buf[24];
        double v39 = *(double **)&buf[32];
        if (*(void *)&buf[24] != *(void *)&buf[32])
        {
          __int16 v40 = &v87;
          do
          {
            float64_t v41 = *v38++;
            v40->f64[0] = v41;
            __int16 v40 = (float64x2_t *)((char *)v40 + 8);
          }
          while (v38 != v39);
        }
        sub_1011B9060(buf);
        float64x2_t v42 = vaddq_f64(v90, v87);
        float64x2_t v87 = v42;
        double v43 = v91 + *(double *)&v88;
        *(double *)&long long v88 = v43;
        int8x16_t v44 = (int8x16_t)vmulq_f64(v42, v42);
        *(double *)v44.i64 = sqrt(vmlad_n_f64(*(double *)&v44.i64[1], v42.f64[0], v42.f64[0]) + v43 * v43);
        if (*(double *)v44.i64 == 0.0)
        {
          memset(&buf[8], 0, 40);
          *(void *)buf = off_102316520;
          sub_10159843C(v83, (uint64_t)buf, (int8x16_t)0, v43, (int8x16_t)v42);
        }
        else
        {
          float64x2_t v46 = (float64x2_t)vdupq_lane_s64(v44.i64[0], 0);
          int8x16_t v45 = (int8x16_t)vdivq_f64(v42, v46);
          v46.f64[0] = 3.14159265;
          double v47 = v43 / *(double *)v44.i64;
          if (*(double *)v44.i64 > 3.14159265)
          {
            v48.f64[0] = NAN;
            v48.f64[1] = NAN;
            int8x16_t v82 = (int8x16_t)vnegq_f64(v48);
            double v85 = *(double *)vbslq_s8(v82, (int8x16_t)v46, v44).i64;
            int8x16_t v86 = v45;
            int8x16_t v81 = (int8x16_t)v46;
            *(double *)v44.i64 = fmod(*(double *)v44.i64 + v85, 6.28318531);
            *(void *)&double v43 = vbslq_s8(v82, v81, v44).u64[0];
            if (*(double *)v44.i64 == 0.0) {
              *(double *)v44.i64 = v43;
            }
            else {
              *(double *)v44.i64 = *(double *)v44.i64 - v85;
            }
            int8x16_t v45 = v86;
          }
          *(void *)buf = off_102316520;
          *(int8x16_t *)&buf[8] = v45;
          *(double *)&unsigned char buf[24] = v47;
          *(_OWORD *)&buf[32] = v44.u64[0];
          sub_10159843C(v83, (uint64_t)buf, v44, v43, v45);
        }
      }
      sub_101598BE8(v83);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      v49 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v50 = *(void *)(a2 + 16);
        uint64_t v51 = *(void *)(a1 + 6936);
        uint64_t v52 = *(void *)(a1 + 6944);
        uint64_t v53 = *(void *)(a1 + 6952);
        double v54 = *(double *)(a1 + 6960) * 57.2957795;
        uint64_t v55 = *(void *)(a1 + 6984);
        uint64_t v56 = *(void *)(a1 + 6992);
        uint64_t v57 = *(void *)(a1 + 7000);
        uint64_t v58 = *(void *)(a1 + 7024);
        uint64_t v59 = *(void *)(a1 + 7080);
        uint64_t v60 = *(void *)(a1 + 7136);
        uint64_t v61 = *(void *)(a1 + 7192);
        uint64_t v62 = *(void *)(a1 + 7248);
        uint64_t v63 = *(void *)(a1 + 7304);
        *(_DWORD *)buf = 134352385;
        *(void *)&uint8_t buf[4] = v50;
        *(_WORD *)&buf[12] = 2049;
        *(void *)&buf[14] = v51;
        *(_WORD *)&buf[22] = 2049;
        *(void *)&unsigned char buf[24] = v52;
        *(_WORD *)&buf[32] = 2049;
        *(void *)&buf[34] = v53;
        *(_WORD *)&buf[42] = 2049;
        *(double *)&buf[44] = v54;
        *(_WORD *)&buf[52] = 2049;
        *(void *)&buf[54] = v55;
        *(_WORD *)&buf[62] = 2049;
        *(void *)&buf[64] = v56;
        *(_WORD *)v164 = 2049;
        *(void *)&v164[2] = v57;
        __int16 v165 = 2049;
        uint64_t v166 = v58;
        __int16 v167 = 2049;
        uint64_t v168 = v59;
        __int16 v169 = 2049;
        uint64_t v170 = v60;
        __int16 v171 = 2049;
        uint64_t v172 = v61;
        __int16 v173 = 2049;
        uint64_t v174 = v62;
        __int16 v175 = 2049;
        uint64_t v176 = v63;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLVLF,updateWithCLPoints,Filter updated,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", buf, 0x8Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v64 = *(void *)(a2 + 16);
        uint64_t v65 = *(void *)(a1 + 6936);
        uint64_t v66 = *(void *)(a1 + 6944);
        uint64_t v67 = *(void *)(a1 + 6952);
        double v68 = *(double *)(a1 + 6960) * 57.2957795;
        uint64_t v69 = *(void *)(a1 + 6984);
        uint64_t v70 = *(void *)(a1 + 6992);
        uint64_t v71 = *(void *)(a1 + 7000);
        uint64_t v72 = *(void *)(a1 + 7024);
        uint64_t v73 = *(void *)(a1 + 7080);
        uint64_t v74 = *(void *)(a1 + 7136);
        uint64_t v75 = *(void *)(a1 + 7192);
        uint64_t v76 = *(void *)(a1 + 7248);
        uint64_t v77 = *(void *)(a1 + 7304);
        int v129 = 134352385;
        *(void *)v130 = v64;
        *(_WORD *)&v130[8] = 2049;
        *(void *)&v130[10] = v65;
        *(_WORD *)&v130[18] = 2049;
        *(void *)v131 = v66;
        *(_WORD *)&v131[8] = 2049;
        *(void *)&v131[10] = v67;
        *(_WORD *)&v131[18] = 2049;
        *(double *)&v131[20] = v68;
        *(_WORD *)&v131[28] = 2049;
        *(void *)&v131[30] = v69;
        __int16 v132 = 2049;
        uint64_t v133 = v70;
        __int16 v134 = 2049;
        uint64_t v135 = v71;
        __int16 v136 = 2049;
        uint64_t v137 = v72;
        __int16 v138 = 2049;
        uint64_t v139 = v73;
        __int16 v140 = 2049;
        uint64_t v141 = v74;
        __int16 v142 = 2049;
        uint64_t v143 = v75;
        __int16 v144 = 2049;
        uint64_t v145 = v76;
        __int16 v146 = 2049;
        uint64_t v147 = v77;
        long long v78 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::LocData> &, const fusion::LocationFuserState &)", "%s\n", v78);
        if (v78 != (char *)buf) {
          free(v78);
        }
      }
      return 1;
    }
    return 0;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  uint64_t v7 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a2 + 16);
    int v9 = *(unsigned __int8 *)(a2 + 1784);
    int v10 = *(unsigned __int8 *)(a2 + 160);
    int v11 = *(unsigned __int8 *)(a3 + 1320);
    *(_DWORD *)buf = 134349824;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v9;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v10;
    *(_WORD *)&unsigned char buf[24] = 1026;
    *(_DWORD *)&buf[26] = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLVLF,updateWithCLPoints,Invalid measurement,machAbsTime,%{public}.3lf,isVioSynced,%{public}d,isLocEnuValid,%{public}d,isPredictedStateEnuValid,%{public}d", buf, 0x1Eu);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v13 = *(void *)(a2 + 16);
    int v14 = *(unsigned __int8 *)(a2 + 1784);
    int v15 = *(unsigned __int8 *)(a2 + 160);
    int v16 = *(unsigned __int8 *)(a3 + 1320);
    *(_DWORD *)v153 = 134349824;
    *(void *)&v153[4] = v13;
    *(_WORD *)&v153[12] = 1026;
    *(_DWORD *)&v153[14] = v14;
    *(_WORD *)&v153[18] = 1026;
    *(_DWORD *)&v153[20] = v15;
    LOWORD(v154) = 1026;
    *(_DWORD *)((char *)&v154 + 2) = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::LocData> &, const fusion::LocationFuserState &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    return 0;
  }
  return result;
}

void sub_1011B15B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011B15C0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  long long v9 = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  long long v11 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v11;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  long long v12 = *(_OWORD *)(a2 + 272);
  long long v13 = *(_OWORD *)(a2 + 288);
  long long v14 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v14;
  *(_OWORD *)(a1 + 272) = v12;
  *(_OWORD *)(a1 + 288) = v13;
  long long v15 = *(_OWORD *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = v15;
  int v16 = (_OWORD *)(a1 + 360);
  uint64_t v17 = (_OWORD *)(a2 + 360);
  long long v18 = *(_OWORD *)(a2 + 360);
  long long v19 = *(_OWORD *)(a2 + 376);
  long long v20 = *(_OWORD *)(a2 + 392);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v19;
  *(_OWORD *)(a1 + 392) = v20;
  *(_OWORD *)(a1 + 360) = v18;
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  long long v21 = *(_OWORD *)(a2 + 432);
  long long v22 = *(_OWORD *)(a2 + 448);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(_OWORD *)(a1 + 432) = v21;
  *(_OWORD *)(a1 + 448) = v22;
  long long v23 = *(_OWORD *)(a2 + 544);
  long long v25 = *(_OWORD *)(a2 + 496);
  long long v24 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = v23;
  *(_OWORD *)(a1 + 496) = v25;
  *(_OWORD *)(a1 + 512) = v24;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  long long v26 = *(_OWORD *)(a2 + 568);
  long long v27 = *(_OWORD *)(a2 + 584);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(_OWORD *)(a1 + 568) = v26;
  *(_OWORD *)(a1 + 584) = v27;
  long long v28 = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = v28;
  memcpy((void *)(a1 + 656), (const void *)(a2 + 656), 0x128uLL);
  *(unsigned char *)(a1 + 952) = *(unsigned char *)(a2 + 952);
  long long v30 = v17[38];
  long long v29 = v17[39];
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  v16[38] = v30;
  v16[39] = v29;
  long long v32 = v17[42];
  long long v31 = v17[43];
  long long v33 = v17[45];
  v16[44] = v17[44];
  v16[45] = v33;
  v16[42] = v32;
  v16[43] = v31;
  v16[41] = v17[41];
  long long v34 = *(_OWORD *)(a2 + 1104);
  long long v35 = *(_OWORD *)(a2 + 1120);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(_OWORD *)(a1 + 1120) = v35;
  *(_OWORD *)(a1 + 1104) = v34;
  long long v36 = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1152) = v36;
  memcpy((void *)(a1 + 1192), (const void *)(a2 + 1192), 0x128uLL);
  long long v37 = v17[71];
  v16[72] = v17[72];
  v16[71] = v37;
  *(_OWORD *)(a1 + 1536) = *(_OWORD *)(a2 + 1536);
  long long v38 = *(_OWORD *)(a2 + 1568);
  long long v39 = *(_OWORD *)(a2 + 1584);
  long long v40 = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
  *(_OWORD *)(a1 + 1600) = v40;
  *(_OWORD *)(a1 + 1584) = v39;
  *(_OWORD *)(a1 + 1568) = v38;
  *(unsigned char *)(a1 + 1616) = *(unsigned char *)(a2 + 1616);
  long long v41 = *(_OWORD *)(a2 + 1632);
  *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
  *(_OWORD *)(a1 + 1632) = v41;
  v16[82] = v17[82];
  long long v42 = v17[84];
  long long v43 = v17[85];
  long long v44 = v17[86];
  v16[83] = v17[83];
  v16[86] = v44;
  v16[85] = v43;
  v16[84] = v42;
  long long v45 = v17[87];
  long long v46 = v17[88];
  *(unsigned char *)(a1 + 1784) = *(unsigned char *)(a2 + 1784);
  v16[88] = v46;
  v16[87] = v45;
  return a1;
}

BOOL sub_1011B17D8(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  BOOL v7 = a3 < 0.0 || *(unsigned char *)(a1 + 160) == 0 || a5 < 0.0;
  if (!v7)
  {
    __double2 v14 = __sincos_stret(a2);
    double v15 = v14.__sinval * a6 * a4 + *(double *)(a1 + 224);
    *(double *)(a1 + 216) = v14.__cosval * a6 * a4 + *(double *)(a1 + 216);
    *(double *)(a1 + 224) = v15;
    v29[15] = (uint64_t)off_102317338;
    double v30 = -(v14.__sinval * a6 * a4);
    double v31 = v14.__cosval * a6 * a4;
    double v32 = v14.__cosval * a6;
    double v33 = v14.__sinval * a6;
    uint64_t v34 = 0;
    *(double *)&v29[10] = a3 * a3;
    v29[9] = (uint64_t)off_102317338;
    v29[11] = 0;
    v29[12] = 0;
    *(double *)&v29[13] = a5 * a5;
    v29[14] = 0;
    long long v27 = &v34;
    v28[0] = off_102317338;
    v28[5] = 0;
    *(double *)&v28[1] = v14.__cosval * a6 * 0.0 - v14.__sinval * a6 * a4 * (a3 * a3);
    *(double *)&v28[2] = v14.__sinval * a6 * 0.0 + v31 * (a3 * a3);
    *(double *)&v28[3] = v14.__cosval * a6 * (a5 * a5) - v14.__sinval * a6 * a4 * 0.0;
    *(double *)&v28[4] = v14.__sinval * a6 * (a5 * a5) + v31 * 0.0;
    LOBYTE(v23) = 0;
    int64x2_t v17 = vdupq_n_s64(2uLL);
    int64x2_t v24 = v17;
    long long v25 = xmmword_101D8A880;
    long long v26 = &v30;
    sub_1011B7D20((uint64_t)v28, &v23, v29);
    LOBYTE(v18) = 1;
    int64x2_t v19 = v17;
    long long v20 = xmmword_101DAB7D0;
    uint64_t v21 = a1 + 256;
    uint64_t v22 = a1 + 296;
    sub_1011BB260(&v18, (uint64_t)v29);
    sub_1011B9060(v29);
    *(double *)(a1 + 112) = sqrt(*(double *)(a1 + 256) + *(double *)(a1 + 288));
    *(double *)(a1 + 128) = a2;
    *(double *)(a1 + 136) = a3;
    *(double *)(a1 + 144) = a4;
    *(double *)(a1 + 152) = a5;
  }
  return !v7;
}

void sub_1011B19C0(uint64_t a1, double a2)
{
  unsigned __int8 v4 = atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 1), 1u, memory_order_acquire);
  if ((v4 & 1) == 0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v5 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVioDataLessThanMachAbsoluteTime,Called without locking vision buffers", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVioDataLessThanMachAbsoluteTime(const CFTimeInterval)", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  long long v6 = *(long long **)(a1 + 16);
  if ((long long *)v7 != v6)
  {
    while (*(double *)(v7 + 40) >= a2)
    {
      v7 += 1432;
      if ((long long *)v7 == v6)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        goto LABEL_19;
      }
    }
    if ((long long *)v7 == v6 || (long long *)(v7 + 1432) == v6)
    {
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = v7;
      do
      {
        if (*(double *)(v7 + 1472) >= a2)
        {
          long long v9 = *(_OWORD *)(v7 + 1432);
          long long v10 = *(_OWORD *)(v7 + 1448);
          long long v11 = *(_OWORD *)(v7 + 1464);
          *(void *)(v8 + 48) = *(void *)(v7 + 1480);
          *(_OWORD *)(v8 + 16) = v10;
          *(_OWORD *)(v8 + 32) = v11;
          *(_OWORD *)uint64_t v8 = v9;
          *(unsigned char *)(v8 + 56) = *(unsigned char *)(v7 + 1488);
          long long v12 = *(_OWORD *)(v7 + 1504);
          long long v13 = *(_OWORD *)(v7 + 1520);
          *(void *)(v8 + 104) = *(void *)(v7 + 1536);
          *(_OWORD *)(v8 + 88) = v13;
          *(_OWORD *)(v8 + 72) = v12;
          long long v14 = *(_OWORD *)(v7 + 1584);
          long long v15 = *(_OWORD *)(v7 + 1600);
          long long v16 = *(_OWORD *)(v7 + 1616);
          *(_OWORD *)(v8 + 136) = *(_OWORD *)(v7 + 1568);
          *(_OWORD *)(v8 + 184) = v16;
          *(_OWORD *)(v8 + 168) = v15;
          *(_OWORD *)(v8 + 152) = v14;
          *(_OWORD *)(v8 + 120) = *(_OWORD *)(v7 + 1552);
          long long v17 = *(_OWORD *)(v7 + 1640);
          long long v18 = *(_OWORD *)(v7 + 1656);
          *(void *)(v8 + 240) = *(void *)(v7 + 1672);
          *(_OWORD *)(v8 + 208) = v17;
          *(_OWORD *)(v8 + 224) = v18;
          long long v19 = *(_OWORD *)(v7 + 1704);
          *(_OWORD *)(v8 + 256) = *(_OWORD *)(v7 + 1688);
          *(_OWORD *)(v8 + 272) = v19;
          memcpy((void *)(v8 + 296), (const void *)(v7 + 1728), 0x129uLL);
          long long v21 = *(_OWORD *)(v7 + 2040);
          long long v20 = *(_OWORD *)(v7 + 2056);
          *(void *)(v8 + 640) = *(void *)(v7 + 2072);
          *(_OWORD *)(v8 + 608) = v21;
          *(_OWORD *)(v8 + 624) = v20;
          long long v23 = *(_OWORD *)(v7 + 2104);
          long long v22 = *(_OWORD *)(v7 + 2120);
          long long v24 = *(_OWORD *)(v7 + 2152);
          *(_OWORD *)(v8 + 704) = *(_OWORD *)(v7 + 2136);
          *(_OWORD *)(v8 + 720) = v24;
          *(_OWORD *)(v8 + 672) = v23;
          *(_OWORD *)(v8 + 688) = v22;
          *(_OWORD *)(v8 + 656) = *(_OWORD *)(v7 + 2088);
          long long v25 = *(_OWORD *)(v7 + 2176);
          long long v26 = *(_OWORD *)(v7 + 2192);
          *(void *)(v8 + 776) = *(void *)(v7 + 2208);
          *(_OWORD *)(v8 + 760) = v26;
          *(_OWORD *)(v8 + 744) = v25;
          long long v27 = *(_OWORD *)(v7 + 2224);
          *(_OWORD *)(v8 + 808) = *(_OWORD *)(v7 + 2240);
          *(_OWORD *)(v8 + 792) = v27;
          memcpy((void *)(v8 + 832), (const void *)(v7 + 2264), 0x128uLL);
          long long v28 = *(_OWORD *)(v7 + 2568);
          *(_OWORD *)(v8 + 1152) = *(_OWORD *)(v7 + 2584);
          *(_OWORD *)(v8 + 1136) = v28;
          *(_OWORD *)(v8 + 1176) = *(_OWORD *)(v7 + 2608);
          long long v29 = *(_OWORD *)(v7 + 2640);
          long long v30 = *(_OWORD *)(v7 + 2656);
          long long v31 = *(_OWORD *)(v7 + 2672);
          *(_OWORD *)(v8 + 1192) = *(_OWORD *)(v7 + 2624);
          *(_OWORD *)(v8 + 1240) = v31;
          *(_OWORD *)(v8 + 1224) = v30;
          *(_OWORD *)(v8 + 1208) = v29;
          *(unsigned char *)(v8 + 1256) = *(unsigned char *)(v7 + 2688);
          long long v32 = *(_OWORD *)(v7 + 2704);
          *(_OWORD *)(v8 + 1288) = *(_OWORD *)(v7 + 2720);
          *(_OWORD *)(v8 + 1272) = v32;
          *(_OWORD *)(v8 + 1312) = *(_OWORD *)(v7 + 2744);
          long long v33 = *(_OWORD *)(v7 + 2792);
          long long v34 = *(_OWORD *)(v7 + 2808);
          long long v35 = *(_OWORD *)(v7 + 2776);
          *(_OWORD *)(v8 + 1328) = *(_OWORD *)(v7 + 2760);
          *(_OWORD *)(v8 + 1376) = v34;
          *(_OWORD *)(v8 + 1360) = v33;
          *(_OWORD *)(v8 + 1344) = v35;
          long long v36 = *(_OWORD *)(v7 + 2824);
          long long v37 = *(_OWORD *)(v7 + 2840);
          *(unsigned char *)(v8 + 1424) = *(unsigned char *)(v7 + 2856);
          *(_OWORD *)(v8 + 1408) = v37;
          *(_OWORD *)(v8 + 1392) = v36;
          v8 += 1432;
        }
        long long v38 = (long long *)(v7 + 2864);
        v7 += 1432;
      }
      while (v38 != v6);
      long long v6 = *(long long **)(a1 + 16);
    }
LABEL_19:
    sub_1011B7C38(a1 + 8, v8, v6);
  }
  if ((v4 & 1) == 0) {
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
  }
}

void sub_1011B1DA4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011B1DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_1011BA0BC(a3, *(void *)(a1 + 8), a2);
    *(void *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_1011B1DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_1011BA514(a3, *(void *)(a1 + 8), a2);
    *(void *)(a1 + 8) = v5;
  }
  return a2;
}

void sub_1011B1E40()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v146 = v1;
  uint64_t v2 = v0;
  BOOL v3 = (atomic_uchar *)(v0 + 1);
  sub_1011A3C3C((atomic_uchar *)(v0 + 1));
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 40);
  if (v4 == v5)
  {
    uint64_t v5 = *(void *)(v2 + 32);
  }
  else
  {
    while (*(unsigned char *)(v4 + 3152) && *(double *)(v4 + 1136) >= 0.6827)
    {
      v4 += 3160;
      if (v4 == v5)
      {
        uint64_t v4 = *(void *)(v2 + 40);
        goto LABEL_14;
      }
    }
    if (v4 != v5)
    {
      uint64_t v6 = v4 + 3160;
      if (v4 + 3160 != v5)
      {
        do
        {
          if (*(unsigned char *)(v6 + 3152) && *(double *)(v6 + 1136) >= 0.6827)
          {
            sub_1011BA11C(v4, v6);
            v4 += 3160;
          }
          v6 += 3160;
        }
        while (v6 != v5);
        uint64_t v5 = *(void *)(v2 + 40);
      }
    }
  }
LABEL_14:
  sub_1011B1DB0(v2 + 32, v4, v5);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 40);
  atomic_store(0, (unsigned __int8 *)(v2 + 1));
  if (v7 == v8) {
    return;
  }
  uint64_t v145 = (unsigned char *)(v2 + 9272);
  __int16 v144 = (unsigned char *)(v2 + 8736);
  long long v9 = (unsigned __int8 *)(v2 + 6776);
  long long v10 = (_OWORD *)(v2 + 8680);
  uint64_t v143 = (_OWORD *)(v2 + 8752);
  __int16 v142 = (_OWORD *)(v2 + 8800);
  uint64_t v141 = (_OWORD *)(v2 + 8888);
  __int16 v140 = (_OWORD *)(v2 + 8936);
  __src = (void *)(v2 + 8976);
  __int16 v138 = (_OWORD *)(v2 + 9288);
  uint64_t v137 = (_OWORD *)(v2 + 9336);
  __int16 v136 = (_OWORD *)(v2 + 9424);
  uint64_t v135 = (_OWORD *)(v2 + 9472);
  __int16 v134 = (void *)(v2 + 9512);
  uint64_t v133 = (_OWORD *)(v2 + 9816);
  __int16 v132 = (_OWORD *)(v2 + 9856);
  v131 = (_OWORD *)(v2 + 9952);
  v130 = (_OWORD *)(v2 + 9992);
  int v129 = (_OWORD *)(v2 + 10072);
  int64x2_t v128 = vdupq_n_s64(3uLL);
  while (1)
  {
    sub_1011A3C3C(v3);
    uint64_t v11 = *(void *)(v2 + 32);
    if (v11 == *(void *)(v2 + 40) || *(double *)(v11 + 8) > *(double *)(v146 + 8)) {
      break;
    }
    sub_1011B8B90((uint64_t)v185, *(long long **)(v2 + 32));
    sub_1011B8DC4((uint64_t)v190, (long long *)(v11 + 1728));
    sub_1011BA0BC(*(void *)(v2 + 32) + 3160, *(void *)(v2 + 40), *(void *)(v2 + 32));
    *(void *)(v2 + 40) = v12;
    atomic_store(0, (unsigned __int8 *)(v2 + 1));
    v182 = off_102316AA0;
    long long v183 = v187;
    long long v184 = v188;
    if (!sub_10159A928((uint64_t)v185))
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v15 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v267 = 134349056;
        *(void *)&v267[4] = v186;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLVLF,initWithFrames,Unable to compute VLF for ENU,machAbsTime,%{public}.3lf", v267, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_32;
      }
      bzero(v267, 0x65CuLL);
      if (qword_102419420 == -1) {
        goto LABEL_71;
      }
      goto LABEL_77;
    }
    char v181 = 1;
    sub_10159B84C((uint64_t)v185, &v181, (uint64_t)&v160);
    if (v181)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v14 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v267 = 134349056;
        *(void *)&v267[4] = v186;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLVLF,initWithFrames,Unable to convert VLF to LOC,machAbsTime,%{public}.3lf", v267, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_32;
      }
      bzero(v267, 0x65CuLL);
      if (qword_102419420 == -1) {
        goto LABEL_71;
      }
      goto LABEL_77;
    }
    LODWORD(v160) = *(_DWORD *)(v2 + 13272);
    long long v17 = *(_OWORD *)(v2 + 13416);
    long long v167 = *(_OWORD *)(v2 + 13400);
    long long v168 = v17;
    if (sub_1011B47EC(v13, (uint64_t)v185))
    {
      long long v157 = off_102316AA0;
      long long v158 = v204;
      long long v159 = v205;
      long long v204 = 0uLL;
      *(void *)&long long v205 = 0;
      sub_101599DA8((uint64_t)v192, (uint64_t)&v239);
      sub_101599DD8((uint64_t)&v189, (uint64_t)&v239, 1, (uint64_t)v267);
      *(unsigned char *)(v2 + 6784) = v267[0];
      long long v18 = *(_OWORD *)v270;
      *(_OWORD *)(v2 + 6800) = *(_OWORD *)&v269[2];
      *(_OWORD *)(v2 + 6816) = v18;
      *(void *)(v2 + 6832) = *(void *)&v270[16];
      long long v19 = *(_OWORD *)v273;
      *(_OWORD *)(v2 + 6880) = *(_OWORD *)&v272[32];
      *(_OWORD *)(v2 + 6896) = v19;
      *(_OWORD *)(v2 + 6912) = *(_OWORD *)&v273[16];
      long long v20 = *(_OWORD *)&v272[16];
      *(_OWORD *)(v2 + 6848) = *(_OWORD *)v272;
      *(_OWORD *)(v2 + 6864) = v20;
      long long v21 = v274;
      long long v22 = v275;
      *(void *)(v2 + 6968) = v276;
      *(_OWORD *)(v2 + 6936) = v21;
      *(_OWORD *)(v2 + 6952) = v22;
      long long v23 = v278;
      *(_OWORD *)(v2 + 6984) = v277;
      *(_OWORD *)(v2 + 7000) = v23;
      memcpy((void *)(v2 + 7024), v279, 0x128uLL);
      v152[0] = 1;
      int64x2_t v153 = v128;
      long long v154 = xmmword_101D07BB0;
      uint64_t v155 = v2 + 7024;
      uint64_t v156 = v2 + 7144;
      double v24 = *(double *)(v2 + 7024) + *(double *)(v2 + 7080) + *(double *)(v2 + 7136);
      double v25 = sqrt(v24);
      BOOL v27 = (v25 < 0.0 || ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(void *)&v25 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v27 && v25 < 0.261799388)
      {
        *(double *)v267 = 0.0685389195 / v24;
        sub_1011B9A58((uint64_t)v152, (const double *)v267);
      }
      v147[0] = 1;
      int64x2_t v148 = vdupq_n_s64(3uLL);
      long long v149 = xmmword_101D07BB0;
      uint64_t v150 = v2 + 7192;
      uint64_t v151 = v2 + 7312;
      double v28 = *(double *)(v2 + 7192) + *(double *)(v2 + 7248) + *(double *)(v2 + 7304);
      double v29 = sqrt(v28);
      BOOL v31 = (v29 < 0.0 || ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(void *)&v29 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v31 && v29 < 3.0)
      {
        *(double *)v267 = 9.0 / v28;
        sub_1011B9A58((uint64_t)v147, (const double *)v267);
      }
      *long long v9 = 1;
      long long v32 = v184;
      *(_OWORD *)(v2 + 7864) = v183;
      *(_OWORD *)(v2 + 7880) = v32;
      long long v33 = v159;
      *(_OWORD *)(v2 + 7904) = v158;
      *(_OWORD *)(v2 + 7920) = v33;
      long long v34 = v161;
      *(_OWORD *)(v2 + 7936) = v160;
      *(_OWORD *)(v2 + 7952) = v34;
      long long v35 = v163;
      *(_OWORD *)(v2 + 7976) = v162;
      *(_OWORD *)(v2 + 7992) = v35;
      long long v36 = v165;
      *(_OWORD *)(v2 + 8016) = v164;
      *(_OWORD *)(v2 + 8032) = v36;
      long long v37 = v167;
      *(_OWORD *)(v2 + 8048) = v166;
      *(_OWORD *)(v2 + 8064) = v37;
      *(_OWORD *)(v2 + 8080) = v168;
      *(unsigned char *)(v2 + 8096) = v169;
      long long v38 = v171;
      *(_OWORD *)(v2 + 8112) = v170;
      *(_OWORD *)(v2 + 8128) = v38;
      long long v39 = v173;
      *(_OWORD *)(v2 + 8152) = v172;
      *(_OWORD *)(v2 + 8168) = v39;
      long long v40 = v178;
      long long v41 = v176;
      *(_OWORD *)(v2 + 8240) = v177;
      *(_OWORD *)(v2 + 8256) = v40;
      long long v42 = v175;
      *(_OWORD *)(v2 + 0x2000) = v174;
      *(_OWORD *)(v2 + 8208) = v42;
      *(_OWORD *)(v2 + 8224) = v41;
      *(void *)(v2 + 8288) = v180;
      *(_OWORD *)(v2 + 8272) = v179;
      *(_DWORD *)(v2 + 8296) = 0;
      sub_1011AE5B4((uint64_t)v190, v9);
      sub_1011AE804((uint64_t)v190, v9);
      sub_1011AEA90((uint64_t)v9, v43, v44, v45);
      long long v46 = v161;
      *(_OWORD *)(v2 + 8320) = v160;
      *(_OWORD *)(v2 + 8336) = v46;
      long long v47 = v163;
      *(_OWORD *)(v2 + 8360) = v162;
      *(_OWORD *)(v2 + 8376) = v47;
      long long v48 = v165;
      *(_OWORD *)(v2 + 8400) = v164;
      *(_OWORD *)(v2 + 8416) = v48;
      *(unsigned char *)(v2 + 8480) = v169;
      long long v49 = v168;
      long long v50 = v166;
      *(_OWORD *)(v2 + 8448) = v167;
      *(_OWORD *)(v2 + 8464) = v49;
      *(_OWORD *)(v2 + 8432) = v50;
      long long v51 = v171;
      *(_OWORD *)(v2 + 8496) = v170;
      *(_OWORD *)(v2 + 8512) = v51;
      long long v52 = v173;
      *(_OWORD *)(v2 + 8536) = v172;
      *(_OWORD *)(v2 + 8552) = v52;
      long long v53 = v177;
      *(_OWORD *)(v2 + 8608) = v176;
      *(_OWORD *)(v2 + 8624) = v53;
      *(_OWORD *)(v2 + 8640) = v178;
      long long v54 = v175;
      *(_OWORD *)(v2 + 8576) = v174;
      *(_OWORD *)(v2 + 8592) = v54;
      *(void *)(v2 + 8672) = v180;
      *(_OWORD *)(v2 + 8656) = v179;
      *(void *)(v2 + 8728) = v191;
      long long v55 = v190[2];
      long long v56 = v190[0];
      *(_OWORD *)(v2 + 8696) = v190[1];
      *(_OWORD *)(v2 + 8712) = v55;
      _OWORD *v10 = v56;
      *__int16 v144 = v192[0];
      long long v57 = v194;
      *uint64_t v143 = v193;
      *(_OWORD *)(v2 + 8768) = v57;
      *(void *)(v2 + 8784) = v195;
      long long v58 = v196;
      long long v59 = v197;
      long long v60 = v200;
      *(_OWORD *)(v2 + 8848) = v199;
      *(_OWORD *)(v2 + 8864) = v60;
      long long v61 = v198;
      *(_OWORD *)(v2 + 8816) = v59;
      *(_OWORD *)(v2 + 8832) = v61;
      *__int16 v142 = v58;
      long long v62 = v201;
      long long v63 = v202;
      *(void *)(v2 + 8920) = v203;
      *uint64_t v141 = v62;
      *(_OWORD *)(v2 + 8904) = v63;
      long long v64 = v205;
      *__int16 v140 = v204;
      *(_OWORD *)(v2 + 8952) = v64;
      memcpy(__src, v206, 0x128uLL);
      *uint64_t v145 = v206[296];
      long long v65 = v208;
      *__int16 v138 = v207;
      *(_OWORD *)(v2 + 9304) = v65;
      *(void *)(v2 + 9320) = v209;
      long long v66 = v213;
      *(_OWORD *)(v2 + 9368) = v212;
      *(_OWORD *)(v2 + 9384) = v66;
      *(_OWORD *)(v2 + 9400) = v214;
      long long v67 = v211;
      *uint64_t v137 = v210;
      *(_OWORD *)(v2 + 9352) = v67;
      long long v68 = v216;
      *__int16 v136 = v215;
      *(_OWORD *)(v2 + 9440) = v68;
      *(void *)(v2 + 9456) = v217;
      long long v69 = v219;
      *uint64_t v135 = v218;
      *(_OWORD *)(v2 + 9488) = v69;
      memcpy(v134, v220, 0x128uLL);
      long long v70 = v222;
      *uint64_t v133 = v221;
      *(_OWORD *)(v2 + 9832) = v70;
      long long v71 = v226;
      *(_OWORD *)(v2 + 9888) = v225;
      *(_OWORD *)(v2 + 9904) = v71;
      *(_OWORD *)(v2 + 9920) = v227;
      long long v72 = v224;
      *__int16 v132 = v223;
      *(_OWORD *)(v2 + 9872) = v72;
      *(unsigned char *)(v2 + 9936) = v228;
      long long v73 = v230;
      _OWORD *v131 = v229;
      *(_OWORD *)(v2 + 9968) = v73;
      long long v74 = v234;
      *(_OWORD *)(v2 + 10024) = v233;
      *(_OWORD *)(v2 + 10040) = v74;
      *(_OWORD *)(v2 + 10056) = v235;
      long long v75 = v232;
      _OWORD *v130 = v231;
      *(_OWORD *)(v2 + 10008) = v75;
      long long v76 = v237;
      *int v129 = v236;
      *(_OWORD *)(v2 + 10088) = v76;
      *(unsigned char *)(v2 + 10104) = v238;
      uint64_t v77 = sub_1011AFD78(v2 + 3416, (uint64_t)v9);
      sub_1011AFD78(v2 + 80, v77);
      unint64_t v78 = *(void *)(v2 + 6752);
      *(void *)(v2 + 6760) = v78;
      if (v78 >= *(void *)(v2 + 6768)) {
        uint64_t v79 = sub_1011BA378((uint64_t *)(v2 + 6752), (uint64_t)v9);
      }
      else {
        uint64_t v79 = sub_1011B9980(v78, (uint64_t)v9) + 3336;
      }
      *(void *)(v2 + 6760) = v79;
      long long v81 = *(_OWORD *)(v2 + 8696);
      *(_OWORD *)(v2 + 10112) = *v10;
      *(_OWORD *)(v2 + 10128) = v81;
      *(_OWORD *)(v2 + 10144) = *(_OWORD *)(v2 + 8712);
      *(void *)(v2 + 10160) = *(void *)(v2 + 8728);
      *(unsigned char *)(v2 + 10168) = *v144;
      long long v82 = *(_OWORD *)(v2 + 8768);
      *(_OWORD *)(v2 + 10184) = *v143;
      *(_OWORD *)(v2 + 10200) = v82;
      *(void *)(v2 + 10216) = *(void *)(v2 + 8784);
      long long v83 = *(_OWORD *)(v2 + 8848);
      *(_OWORD *)(v2 + 10264) = *(_OWORD *)(v2 + 8832);
      *(_OWORD *)(v2 + 10280) = v83;
      *(_OWORD *)(v2 + 10296) = *(_OWORD *)(v2 + 8864);
      long long v84 = *(_OWORD *)(v2 + 8816);
      *(_OWORD *)(v2 + 10232) = *v142;
      *(_OWORD *)(v2 + 10248) = v84;
      long long v85 = *(_OWORD *)(v2 + 8904);
      *(_OWORD *)(v2 + 10320) = *v141;
      *(_OWORD *)(v2 + 10336) = v85;
      *(void *)(v2 + 10352) = *(void *)(v2 + 8920);
      long long v86 = *(_OWORD *)(v2 + 8952);
      *(_OWORD *)(v2 + 10368) = *v140;
      *(_OWORD *)(v2 + 10384) = v86;
      memcpy((void *)(v2 + 10408), __src, 0x128uLL);
      *(unsigned char *)(v2 + 10704) = *v145;
      long long v87 = *(_OWORD *)(v2 + 9304);
      *(_OWORD *)(v2 + 10720) = *v138;
      *(_OWORD *)(v2 + 10736) = v87;
      *(void *)(v2 + 10752) = *(void *)(v2 + 9320);
      long long v88 = *(_OWORD *)(v2 + 9384);
      *(_OWORD *)(v2 + 10800) = *(_OWORD *)(v2 + 9368);
      *(_OWORD *)(v2 + 10816) = v88;
      *(_OWORD *)(v2 + 10832) = *(_OWORD *)(v2 + 9400);
      long long v89 = *(_OWORD *)(v2 + 9352);
      *(_OWORD *)(v2 + 10768) = *v137;
      *(_OWORD *)(v2 + 10784) = v89;
      long long v90 = *(_OWORD *)(v2 + 9440);
      *(_OWORD *)(v2 + 10856) = *v136;
      *(_OWORD *)(v2 + 10872) = v90;
      *(void *)(v2 + 10888) = *(void *)(v2 + 9456);
      long long v91 = *(_OWORD *)(v2 + 9488);
      *(_OWORD *)(v2 + 10904) = *v135;
      *(_OWORD *)(v2 + 10920) = v91;
      memcpy((void *)(v2 + 10944), v134, 0x128uLL);
      long long v92 = *(_OWORD *)(v2 + 9832);
      *(_OWORD *)(v2 + 11248) = *v133;
      *(_OWORD *)(v2 + 11264) = v92;
      long long v93 = *(_OWORD *)(v2 + 9904);
      *(_OWORD *)(v2 + 11320) = *(_OWORD *)(v2 + 9888);
      *(_OWORD *)(v2 + 11336) = v93;
      *(_OWORD *)(v2 + 11352) = *(_OWORD *)(v2 + 9920);
      long long v94 = *(_OWORD *)(v2 + 9872);
      *(_OWORD *)(v2 + 11288) = *v132;
      *(_OWORD *)(v2 + 11304) = v94;
      *(unsigned char *)(v2 + 11368) = *(unsigned char *)(v2 + 9936);
      long long v95 = *(_OWORD *)(v2 + 9968);
      *(_OWORD *)(v2 + 11384) = *v131;
      *(_OWORD *)(v2 + 11400) = v95;
      long long v96 = *(_OWORD *)(v2 + 10040);
      *(_OWORD *)(v2 + 11456) = *(_OWORD *)(v2 + 10024);
      *(_OWORD *)(v2 + 11472) = v96;
      *(_OWORD *)(v2 + 11488) = *(_OWORD *)(v2 + 10056);
      long long v97 = *(_OWORD *)(v2 + 10008);
      *(_OWORD *)(v2 + 11424) = *v130;
      *(_OWORD *)(v2 + 11440) = v97;
      long long v98 = *(_OWORD *)(v2 + 10088);
      *(_OWORD *)(v2 + 11504) = *v129;
      *(_OWORD *)(v2 + 11520) = v98;
      *(unsigned char *)(v2 + 11536) = *(unsigned char *)(v2 + 10104);
      sub_1011B4BD8(v2, *(double *)(v2 + 7952));
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v99 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v100 = *(void *)(v2 + 6936);
        uint64_t v101 = *(void *)(v2 + 6944);
        uint64_t v102 = *(void *)(v2 + 6952);
        double v103 = *(double *)(v2 + 6960) * 57.2957795;
        uint64_t v104 = *(void *)(v2 + 6984);
        uint64_t v105 = *(void *)(v2 + 6992);
        uint64_t v106 = *(void *)(v2 + 7000);
        uint64_t v107 = *(void *)(v2 + 7024);
        uint64_t v108 = *(void *)(v2 + 7080);
        uint64_t v109 = *(void *)(v2 + 7136);
        uint64_t v110 = *(void *)(v2 + 7192);
        uint64_t v111 = *(void *)(v2 + 7248);
        uint64_t v112 = *(void *)(v2 + 7304);
        *(_DWORD *)v267 = 134352385;
        *(void *)&v267[4] = v186;
        __int16 v268 = 2049;
        *(void *)v269 = v100;
        *(_WORD *)&v269[8] = 2049;
        *(void *)&v269[10] = v101;
        *(_WORD *)v270 = 2049;
        *(void *)&v270[2] = v102;
        *(_WORD *)&v270[10] = 2049;
        *(double *)&v270[12] = v103;
        *(_WORD *)&v270[20] = 2049;
        *(void *)&v270[22] = v104;
        __int16 v271 = 2049;
        *(void *)v272 = v105;
        *(_WORD *)&v272[8] = 2049;
        *(void *)&v272[10] = v106;
        *(_WORD *)&v272[18] = 2049;
        *(void *)&v272[20] = v107;
        *(_WORD *)&v272[28] = 2049;
        *(void *)&v272[30] = v108;
        *(_WORD *)&v272[38] = 2049;
        *(void *)&v272[40] = v109;
        *(_WORD *)v273 = 2049;
        *(void *)&v273[2] = v110;
        *(_WORD *)&v273[10] = 2049;
        *(void *)&v273[12] = v111;
        *(_WORD *)&v273[20] = 2049;
        *(void *)&v273[22] = v112;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "CLVLF,initWithFrames,Filter initialized,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", v267, 0x8Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v267, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v114 = *(void *)(v2 + 6936);
        uint64_t v115 = *(void *)(v2 + 6944);
        uint64_t v116 = *(void *)(v2 + 6952);
        double v117 = *(double *)(v2 + 6960) * 57.2957795;
        uint64_t v118 = *(void *)(v2 + 6984);
        uint64_t v119 = *(void *)(v2 + 6992);
        uint64_t v120 = *(void *)(v2 + 7000);
        uint64_t v121 = *(void *)(v2 + 7024);
        uint64_t v122 = *(void *)(v2 + 7080);
        uint64_t v123 = *(void *)(v2 + 7136);
        uint64_t v124 = *(void *)(v2 + 7192);
        uint64_t v125 = *(void *)(v2 + 7248);
        uint64_t v126 = *(void *)(v2 + 7304);
        int v239 = 134352385;
        uint64_t v240 = v186;
        __int16 v241 = 2049;
        uint64_t v242 = v114;
        __int16 v243 = 2049;
        uint64_t v244 = v115;
        __int16 v245 = 2049;
        uint64_t v246 = v116;
        __int16 v247 = 2049;
        double v248 = v117;
        __int16 v249 = 2049;
        uint64_t v250 = v118;
        __int16 v251 = 2049;
        uint64_t v252 = v119;
        __int16 v253 = 2049;
        uint64_t v254 = v120;
        __int16 v255 = 2049;
        uint64_t v256 = v121;
        __int16 v257 = 2049;
        uint64_t v258 = v122;
        __int16 v259 = 2049;
        uint64_t v260 = v123;
        __int16 v261 = 2049;
        uint64_t v262 = v124;
        __int16 v263 = 2049;
        uint64_t v264 = v125;
        __int16 v265 = 2049;
        uint64_t v266 = v126;
        long long v127 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithFrames(const CLVisionTime &)", "%s\n", v127);
        if (v127 != v267) {
          free(v127);
        }
      }
      int v16 = 3;
      goto LABEL_33;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    v80 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v267 = 134349056;
      *(void *)&v267[4] = v186;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "CLVLF,initWithFrames,Invalid measurement,machAbsTime,%{public}.3lf", v267, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v267, 0x65CuLL);
      if (qword_102419420 == -1)
      {
LABEL_71:
        int v239 = 134349056;
        uint64_t v240 = v186;
        double v113 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::initWithFrames(const CLVisionTime &)", "%s\n", v113);
        if (v113 != v267) {
          free(v113);
        }
        goto LABEL_32;
      }
LABEL_77:
      dispatch_once(&qword_102419420, &stru_1023166C8);
      goto LABEL_71;
    }
LABEL_32:
    int v16 = 2;
LABEL_33:
    if (v16 != 2) {
      return;
    }
  }
  atomic_store(0, (unsigned __int8 *)v3);
}

void sub_1011B32EC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1011B32FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = a1 + 56;
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(a1 + 56);
  }
  else
  {
    int v5 = *(_DWORD *)(v3 - 1792);
    while (*(unsigned char *)(v2 + 1784) && *(_DWORD *)v2 == v5)
    {
      v2 += 1792;
      if (v2 == v3)
      {
        uint64_t v2 = *(void *)(a1 + 64);
        goto LABEL_15;
      }
    }
    if (v2 != v3)
    {
      uint64_t v6 = v2 + 1792;
      if (v2 + 1792 != v3)
      {
        do
        {
          if (*(unsigned char *)(v6 + 1784) && *(_DWORD *)v6 == v5)
          {
            sub_1011B15C0(v2, v6);
            v2 += 1792;
          }
          v6 += 1792;
        }
        while (v6 != v3);
        uint64_t v3 = *(void *)(a1 + 64);
      }
    }
  }
LABEL_15:
  sub_1011B1DF8(v4, v2, v3);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 8)) >= 3)
  {
    uint64_t v133 = off_102316AA0;
    long long v9 = *(_OWORD *)(v8 - 1160);
    uint64_t v118 = (long long *)(v8 - 1176);
    long long v134 = *(_OWORD *)(v8 - 1176);
    long long v135 = v9;
    uint64_t v10 = v7 + 616;
    for (uint64_t i = 77; i != 80; ++i)
      *(double *)&(&v133)[i - 76] = *(double *)&(&v133)[i - 76] - *(double *)(v7 + i * 8);
    double v12 = hypot(*(long double *)&v134, *((long double *)&v134 + 1));
    uint64_t v119 = (_OWORD *)(v8 - 1792);
    uint64_t v13 = (long long *)(v8 - 1752);
    double v14 = sub_1000F1648(dbl_102485E78, *(double *)(v8 - 1752) * 57.2957795, *(double *)(v8 - 1744) * 57.2957795, *(double *)(v7 + 40) * 57.2957795, *(double *)(v7 + 48) * 57.2957795, *(double *)(v8 - 1736));
    if (v12 < 8.0 || v14 < 8.0)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      int v16 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = *(void *)(v8 - 1776);
        *(_DWORD *)buf = 134349569;
        *(void *)&uint8_t buf[4] = v17;
        __int16 v165 = 2049;
        double v166 = v12;
        __int16 v167 = 2049;
        double v168 = v14;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Not enough movement,machAbsTime,%{public}.3lf,vioHorzDist,%{private}.3lf,locHorzDist,%{private}.3lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v18 = *(void *)(v8 - 1776);
        int v136 = 134349569;
        uint64_t v137 = v18;
        __int16 v138 = 2049;
        double v139 = v12;
        __int16 v140 = 2049;
        double v141 = v14;
        long long v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
        goto LABEL_136;
      }
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(a1 + 64);
      if (v20 == v21)
      {
LABEL_34:
        if (!sub_1011ACF20(v7, (uint64_t)v119, (uint64_t)v119))
        {
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          long long v22 = qword_102419428;
          if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v23 = *(void *)(v8 - 1776);
            *(_DWORD *)buf = 134349056;
            *(void *)&uint8_t buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Unable to compute course in ENU,machAbsTime,%{public}.3lf", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            uint64_t v98 = *(void *)(v8 - 1776);
            int v136 = 134349056;
            uint64_t v137 = v98;
            long long v99 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v99);
            if (v99 != buf) {
              free(v99);
            }
          }
        }
        double v24 = (double *)(v8 - 1664);
        double v25 = vabdd_f64(*(double *)(v8 - 1448), *(double *)(v8 - 1664));
        if (6.28318531 - v25 < v25) {
          double v25 = 6.28318531 - v25;
        }
        if (v25 <= 1.83259571)
        {
          uint64_t v34 = 0;
          uint64_t v35 = v7 + 360;
          v130 = off_102316AA0;
          long long v36 = *v118;
          long long v132 = *(_OWORD *)(v8 - 1160);
          long long v131 = v36;
          do
          {
            *(double *)(v10 + v34 * 8) = *(double *)(v10 + v34 * 8) - *(double *)&(&v130)[v34 + 1];
            ++v34;
          }
          while (v34 != 3);
          for (uint64_t j = 1; j != 4; ++j)
            *(double *)(v8 + j * 8 - 1184) = *(double *)(v8 + j * 8 - 1184) - *(double *)&(&v130)[j];
          if ((sub_1011AD1FC(v35, v8 - 1432, v8 - 1432) & 1) == 0)
          {
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            long long v38 = qword_102419428;
            if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v39 = *(void *)(v8 - 1776);
              *(_DWORD *)buf = 134349056;
              *(void *)&uint8_t buf[4] = v39;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Unable to compute delta position in VIO,machAbsTime,%{public}.3lf", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419420 != -1) {
                dispatch_once(&qword_102419420, &stru_1023166C8);
              }
              uint64_t v100 = *(void *)(v8 - 1776);
              int v136 = 134349056;
              uint64_t v137 = v100;
              uint64_t v101 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v101);
              if (v101 != buf) {
                free(v101);
              }
            }
          }
          if (!sub_1011AD370(v35, v8 - 1432, v8 - 1432))
          {
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            long long v40 = qword_102419428;
            if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v41 = *(void *)(v8 - 1776);
              *(_DWORD *)buf = 134349056;
              *(void *)&uint8_t buf[4] = v41;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Unable to compute course in VIO,machAbsTime,%{public}.3lf", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419420 != -1) {
                dispatch_once(&qword_102419420, &stru_1023166C8);
              }
              uint64_t v102 = *(void *)(v8 - 1776);
              int v136 = 134349056;
              uint64_t v137 = v102;
              double v103 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v103);
              if (v103 != buf) {
                free(v103);
              }
            }
          }
          for (uint64_t k = 0; k != 3; ++k)
            *(double *)(v10 + k * 8) = *(double *)(v10 + k * 8) + *(double *)&(&v130)[k + 1];
          for (uint64_t m = 1; m != 4; ++m)
            *(double *)(v8 + m * 8 - 1184) = *(double *)(v8 + m * 8 - 1184) + *(double *)&(&v130)[m];
          if (sub_1011B4C98((uint64_t *)v4, a1 + 6784, 1))
          {
            v125[0] = 1;
            long long v44 = xmmword_101D07BB0;
            int64x2_t v126 = vdupq_n_s64(3uLL);
            long long v127 = xmmword_101D07BB0;
            uint64_t v128 = a1 + 7024;
            uint64_t v129 = a1 + 7144;
            double v45 = *(double *)(a1 + 7024) + *(double *)(a1 + 7080) + *(double *)(a1 + 7136);
            double v46 = sqrt(v45);
            BOOL v48 = (v46 < 0.0 || ((*(void *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
               && (unint64_t)(*(void *)&v46 - 1) > 0xFFFFFFFFFFFFELL;
            if (!v48 && v46 < 0.261799388)
            {
              *(double *)buf = 0.0685389195 / v45;
              sub_1011B9A58((uint64_t)v125, (const double *)buf);
              long long v44 = xmmword_101D07BB0;
            }
            v120[0] = 1;
            int64x2_t v121 = vdupq_n_s64(3uLL);
            long long v122 = v44;
            uint64_t v123 = a1 + 7192;
            uint64_t v124 = a1 + 7312;
            double v49 = *(double *)(a1 + 7192) + *(double *)(a1 + 7248) + *(double *)(a1 + 7304);
            double v50 = sqrt(v49);
            if ((v50 >= 0.0 && ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
               || (unint64_t)(*(void *)&v50 - 1) <= 0xFFFFFFFFFFFFELL)
              && v50 < 3.0)
            {
              *(double *)buf = 9.0 / v49;
              sub_1011B9A58((uint64_t)v120, (const double *)buf);
            }
            *(void *)uint64_t v118 = 0;
            *(void *)(v8 - 1168) = 0;
            *(void *)(v8 - 1160) = 0;
            *(unsigned char *)(v4 + 6721) = 1;
            long long v54 = *v13;
            *(_OWORD *)(a1 + 7880) = *(_OWORD *)(v8 - 1736);
            *(_OWORD *)(a1 + 7864) = v54;
            long long v55 = v132;
            *(_OWORD *)(a1 + 7904) = v131;
            *(_OWORD *)(a1 + 7920) = v55;
            long long v56 = *(_OWORD *)(v8 - 1776);
            *(_OWORD *)(a1 + 7936) = *v119;
            *(_OWORD *)(a1 + 7952) = v56;
            long long v57 = *(_OWORD *)(v8 - 1736);
            *(_OWORD *)(a1 + 7976) = *v13;
            *(_OWORD *)(a1 + 7992) = v57;
            long long v58 = *(_OWORD *)(v8 - 1696);
            *(_OWORD *)(a1 + 8016) = *(_OWORD *)(v8 - 1712);
            *(_OWORD *)(a1 + 8032) = v58;
            char v59 = *(unsigned char *)(v8 - 1632);
            long long v61 = *(_OWORD *)(v8 - 1664);
            long long v60 = *(_OWORD *)(v8 - 1648);
            *(_OWORD *)(a1 + 8048) = *(_OWORD *)(v8 - 1680);
            *(_OWORD *)(a1 + 8064) = v61;
            *(_OWORD *)(a1 + 8080) = v60;
            *(unsigned char *)(a1 + 8096) = v59;
            long long v62 = *(_OWORD *)(v8 - 1600);
            *(_OWORD *)(a1 + 8112) = *(_OWORD *)(v8 - 1616);
            *(_OWORD *)(a1 + 8128) = v62;
            long long v63 = *(_OWORD *)(v8 - 1560);
            *(_OWORD *)(a1 + 8152) = *(_OWORD *)(v8 - 1576);
            *(_OWORD *)(a1 + 8168) = v63;
            *(_OWORD *)(a1 + 0x2000) = *(_OWORD *)(v8 - 1536);
            long long v64 = *(_OWORD *)(v8 - 1488);
            long long v65 = *(_OWORD *)(v8 - 1472);
            long long v66 = *(_OWORD *)(v8 - 1504);
            *(_OWORD *)(a1 + 8208) = *(_OWORD *)(v8 - 1520);
            *(_OWORD *)(a1 + 8256) = v65;
            *(_OWORD *)(a1 + 8240) = v64;
            *(_OWORD *)(a1 + 8224) = v66;
            long long v67 = *(_OWORD *)(v8 - 1456);
            *(void *)(a1 + 8288) = *(void *)(v8 - 1440);
            *(_OWORD *)(a1 + 8272) = v67;
            *(_DWORD *)(a1 + 8296) = 0;
            sub_1011AE5B4(v8 - 1432, (unsigned __int8 *)(a1 + 6776));
            sub_1011AE804(v8 - 1432, (unsigned __int8 *)(a1 + 6776));
            sub_1011AEA90(a1 + 6776, v68, v69, v70);
            sub_1011B15C0(a1 + 8320, (uint64_t)v119);
            *(void *)(a1 + 64) = *(void *)(a1 + 56);
            uint64_t v71 = sub_1011AFD78(a1 + 3416, a1 + 6776);
            sub_1011AFD78(a1 + 80, v71);
            unint64_t v72 = *(void *)(a1 + 6752);
            *(void *)(a1 + 6760) = v72;
            if (v72 >= *(void *)(a1 + 6768)) {
              uint64_t v73 = sub_1011BA378((uint64_t *)(a1 + 6752), a1 + 6776);
            }
            else {
              uint64_t v73 = sub_1011B9980(v72, a1 + 6776) + 3336;
            }
            *(void *)(a1 + 6760) = v73;
            *(void *)(a1 + 10160) = *(void *)(a1 + 8728);
            *(_OWORD *)(a1 + 10112) = *(_OWORD *)(a1 + 8680);
            *(_OWORD *)(a1 + 10128) = *(_OWORD *)(a1 + 8696);
            *(_OWORD *)(a1 + 10144) = *(_OWORD *)(a1 + 8712);
            *(unsigned char *)(v4 + 10112) = *(unsigned char *)(v4 + 8680);
            *(void *)(a1 + 10216) = *(void *)(a1 + 8784);
            *(_OWORD *)(a1 + 10184) = *(_OWORD *)(a1 + 8752);
            *(_OWORD *)(a1 + 10200) = *(_OWORD *)(a1 + 8768);
            *(_OWORD *)(a1 + 10232) = *(_OWORD *)(a1 + 8800);
            *(_OWORD *)(a1 + 10296) = *(_OWORD *)(a1 + 8864);
            *(_OWORD *)(a1 + 10280) = *(_OWORD *)(a1 + 8848);
            *(_OWORD *)(a1 + 10264) = *(_OWORD *)(a1 + 8832);
            *(_OWORD *)(a1 + 10248) = *(_OWORD *)(a1 + 8816);
            *(_OWORD *)(a1 + 10320) = *(_OWORD *)(a1 + 8888);
            *(_OWORD *)(a1 + 10336) = *(_OWORD *)(a1 + 8904);
            *(void *)(a1 + 10352) = *(void *)(a1 + 8920);
            long long v80 = *(_OWORD *)(a1 + 8936);
            *(_OWORD *)(a1 + 10384) = *(_OWORD *)(a1 + 8952);
            *(_OWORD *)(a1 + 10368) = v80;
            memcpy((void *)(a1 + 10408), (const void *)(a1 + 8976), 0x128uLL);
            *(unsigned char *)(v4 + 10648) = *(unsigned char *)(v4 + 9216);
            *(_OWORD *)(a1 + 10720) = *(_OWORD *)(a1 + 9288);
            *(_OWORD *)(a1 + 10736) = *(_OWORD *)(a1 + 9304);
            *(void *)(a1 + 10752) = *(void *)(a1 + 9320);
            *(_OWORD *)(a1 + 10784) = *(_OWORD *)(a1 + 9352);
            *(_OWORD *)(a1 + 10800) = *(_OWORD *)(a1 + 9368);
            *(_OWORD *)(a1 + 10816) = *(_OWORD *)(a1 + 9384);
            *(_OWORD *)(a1 + 10832) = *(_OWORD *)(a1 + 9400);
            *(_OWORD *)(a1 + 10872) = *(_OWORD *)(a1 + 9440);
            *(_OWORD *)(a1 + 10856) = *(_OWORD *)(a1 + 9424);
            *(_OWORD *)(a1 + 10904) = *(_OWORD *)(a1 + 9472);
            *(_OWORD *)(a1 + 10920) = *(_OWORD *)(a1 + 9488);
            long long v81 = *(_OWORD *)(a1 + 9336);
            *(void *)(a1 + 10888) = *(void *)(a1 + 9456);
            *(_OWORD *)(a1 + 10768) = v81;
            memcpy((void *)(a1 + 10944), (const void *)(a1 + 9512), 0x128uLL);
            *(_OWORD *)(a1 + 11248) = *(_OWORD *)(a1 + 9816);
            *(_OWORD *)(a1 + 11264) = *(_OWORD *)(a1 + 9832);
            *(_OWORD *)(a1 + 11304) = *(_OWORD *)(a1 + 9872);
            *(_OWORD *)(a1 + 11320) = *(_OWORD *)(a1 + 9888);
            *(_OWORD *)(a1 + 11336) = *(_OWORD *)(a1 + 9904);
            *(_OWORD *)(a1 + 11352) = *(_OWORD *)(a1 + 9920);
            *(_OWORD *)(a1 + 11288) = *(_OWORD *)(a1 + 9856);
            *(unsigned char *)(v4 + 11312) = *(unsigned char *)(v4 + 9880);
            long long v82 = *(_OWORD *)(a1 + 9952);
            *(_OWORD *)(a1 + 11400) = *(_OWORD *)(a1 + 9968);
            *(_OWORD *)(a1 + 11384) = v82;
            *(_OWORD *)(a1 + 11488) = *(_OWORD *)(a1 + 10056);
            *(_OWORD *)(a1 + 11472) = *(_OWORD *)(a1 + 10040);
            *(_OWORD *)(a1 + 11456) = *(_OWORD *)(a1 + 10024);
            *(_OWORD *)(a1 + 11440) = *(_OWORD *)(a1 + 10008);
            *(_OWORD *)(a1 + 11424) = *(_OWORD *)(a1 + 9992);
            *(_OWORD *)(a1 + 11504) = *(_OWORD *)(a1 + 10072);
            *(_OWORD *)(a1 + 11520) = *(_OWORD *)(a1 + 10088);
            *(unsigned char *)(a1 + 11536) = *(unsigned char *)(a1 + 10104);
            sub_1011A3C3C((atomic_uchar *)(a1 + 1));
            sub_1011B5260(a1, *(double *)(a1 + 7952));
            atomic_store(0, (unsigned __int8 *)(a1 + 1));
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            long long v83 = qword_102419428;
            if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v84 = *(void *)(a1 + 8336);
              double v85 = *(double *)(a1 + 6936);
              double v86 = *(double *)(a1 + 6944);
              uint64_t v87 = *(void *)(a1 + 6952);
              double v88 = *(double *)(a1 + 6960) * 57.2957795;
              uint64_t v89 = *(void *)(a1 + 6984);
              uint64_t v90 = *(void *)(a1 + 6992);
              uint64_t v91 = *(void *)(a1 + 7000);
              uint64_t v92 = *(void *)(a1 + 7024);
              uint64_t v93 = *(void *)(a1 + 7080);
              uint64_t v94 = *(void *)(a1 + 7136);
              uint64_t v95 = *(void *)(a1 + 7192);
              uint64_t v96 = *(void *)(a1 + 7248);
              uint64_t v97 = *(void *)(a1 + 7304);
              *(_DWORD *)buf = 134352385;
              *(void *)&uint8_t buf[4] = v84;
              __int16 v165 = 2049;
              double v166 = v85;
              __int16 v167 = 2049;
              double v168 = v86;
              __int16 v169 = 2049;
              uint64_t v170 = v87;
              __int16 v171 = 2049;
              double v172 = v88;
              __int16 v173 = 2049;
              uint64_t v174 = v89;
              __int16 v175 = 2049;
              uint64_t v176 = v90;
              __int16 v177 = 2049;
              uint64_t v178 = v91;
              __int16 v179 = 2049;
              uint64_t v180 = v92;
              __int16 v181 = 2049;
              uint64_t v182 = v93;
              __int16 v183 = 2049;
              uint64_t v184 = v94;
              __int16 v185 = 2049;
              uint64_t v186 = v95;
              __int16 v187 = 2049;
              uint64_t v188 = v96;
              __int16 v189 = 2049;
              uint64_t v190 = v97;
              _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "CLVLF,initWithPoints,Filter initialized,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", buf, 0x8Eu);
            }
            if (!sub_10013D1A0(115, 2)) {
              return;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            uint64_t v104 = *(void *)(a1 + 8336);
            double v105 = *(double *)(a1 + 6936);
            double v106 = *(double *)(a1 + 6944);
            uint64_t v107 = *(void *)(a1 + 6952);
            double v108 = *(double *)(a1 + 6960) * 57.2957795;
            uint64_t v109 = *(void *)(a1 + 6984);
            uint64_t v110 = *(void *)(a1 + 6992);
            uint64_t v111 = *(void *)(a1 + 7000);
            uint64_t v112 = *(void *)(a1 + 7024);
            uint64_t v113 = *(void *)(a1 + 7080);
            uint64_t v114 = *(void *)(a1 + 7136);
            uint64_t v115 = *(void *)(a1 + 7192);
            uint64_t v116 = *(void *)(a1 + 7248);
            uint64_t v117 = *(void *)(a1 + 7304);
            int v136 = 134352385;
            uint64_t v137 = v104;
            __int16 v138 = 2049;
            double v139 = v105;
            __int16 v140 = 2049;
            double v141 = v106;
            __int16 v142 = 2049;
            uint64_t v143 = v107;
            __int16 v144 = 2049;
            double v145 = v108;
            __int16 v146 = 2049;
            uint64_t v147 = v109;
            __int16 v148 = 2049;
            uint64_t v149 = v110;
            __int16 v150 = 2049;
            uint64_t v151 = v111;
            __int16 v152 = 2049;
            uint64_t v153 = v112;
            __int16 v154 = 2049;
            uint64_t v155 = v113;
            __int16 v156 = 2049;
            uint64_t v157 = v114;
            __int16 v158 = 2049;
            uint64_t v159 = v115;
            __int16 v160 = 2049;
            uint64_t v161 = v116;
            __int16 v162 = 2049;
            uint64_t v163 = v117;
            long long v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
          }
          else
          {
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            uint64_t v77 = qword_102419428;
            if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
            {
              uint64_t v78 = *(void *)(v8 - 1776);
              *(_DWORD *)buf = 134349056;
              *(void *)&uint8_t buf[4] = v78;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "CLVLF,initWithPoints,Unable to initialize transform_vio2enu,machAbsTime,%{public}.3lf", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 0)) {
              return;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            uint64_t v79 = *(void *)(v8 - 1776);
            int v136 = 134349056;
            uint64_t v137 = v79;
            long long v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
          }
        }
        else
        {
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          long long v26 = (double *)(v8 - 1448);
          BOOL v27 = qword_102419428;
          if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v28 = *(void *)(v8 - 1776);
            double v29 = *v26 * 57.2957795;
            double v30 = *v24 * 57.2957795;
            *(_DWORD *)buf = 134349569;
            *(void *)&uint8_t buf[4] = v28;
            __int16 v165 = 2049;
            double v166 = v29;
            __int16 v167 = 2049;
            double v168 = v30;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLVLF,initialize,Computed course and reported course are too different,machAbsTime,%{public}.3lf,courseEnuFromPos,%{private}.3lf,courseEnu,%{private}.3lf", buf, 0x20u);
          }
          if (!sub_10013D1A0(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          uint64_t v31 = *(void *)(v8 - 1776);
          double v32 = *v26 * 57.2957795;
          double v33 = *v24 * 57.2957795;
          int v136 = 134349569;
          uint64_t v137 = v31;
          __int16 v138 = 2049;
          double v139 = v32;
          __int16 v140 = 2049;
          double v141 = v33;
          long long v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
        }
LABEL_136:
        if (v19 != buf) {
          free(v19);
        }
        return;
      }
      while (sub_1011B03F8(v20 + 72, v8 - 1760, v20))
      {
        v20 += 1792;
        if (v20 == v21) {
          goto LABEL_34;
        }
      }
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v74 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        uint64_t v75 = *(void *)(v8 - 1776);
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = v75;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "CLVLF,initWithPoints,Unable to compute ENU potisions,machAbsTime,%{public}.3lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v76 = *(void *)(v8 - 1776);
        int v136 = 134349056;
        uint64_t v137 = v76;
        long long v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::initWithPoints()", "%s\n", v19);
        goto LABEL_136;
      }
    }
  }
}

void sub_1011B47E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011B47EC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1144)) {
    BOOL v2 = *(unsigned char *)(a2 + 3152) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 1;
  }
  double v4 = *(double *)(a2 + 1864);
  if (v4 >= 1.0)
  {
    atan2(-*(double *)(a2 + 1904), *(long double *)(a2 + 1880));
    double v5 = -1.57079633;
  }
  else if (v4 <= -1.0)
  {
    atan2(-*(double *)(a2 + 1904), *(long double *)(a2 + 1880));
    double v5 = 1.57079633;
  }
  else
  {
    atan2(*(long double *)(a2 + 1888), *(long double *)(a2 + 1912));
    double v5 = asin(-v4);
    atan2(*(long double *)(a2 + 1856), *(long double *)(a2 + 1848));
  }
  double v6 = *(double *)(a2 + 1272);
  if (v6 >= 1.0)
  {
    atan2(-*(double *)(a2 + 1312), *(long double *)(a2 + 1288));
    double v7 = -1.57079633;
  }
  else if (v6 <= -1.0)
  {
    atan2(-*(double *)(a2 + 1312), *(long double *)(a2 + 1288));
    double v7 = 1.57079633;
  }
  else
  {
    atan2(*(long double *)(a2 + 1296), *(long double *)(a2 + 1320));
    double v7 = asin(-v6);
    atan2(*(long double *)(a2 + 1264), *(long double *)(a2 + 1256));
  }
  double v8 = vabdd_f64(v5, v7);
  double v9 = 6.28318531 - v8 >= v8 ? v8 : 6.28318531 - v8;
  if (v9 <= 0.261799388) {
    return 1;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  uint64_t v11 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134283777;
    double v14 = v9 * 57.2957795;
    __int16 v15 = 2049;
    uint64_t v16 = 0x402DFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,VL-VIO pitchDiff,%{private}.3lf,pitchDiffThres,%{private}.3lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::LocationFuserMeasurement<fusion::VlfData> &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return 0;
}

void sub_1011B4BCC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011B4BD8(uint64_t result, double a2)
{
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v3 = *(void *)(result + 64);
  uint64_t v2 = result + 56;
  if (v4 != v3)
  {
    uint64_t v6 = result;
    while (*(double *)(v4 + 16) >= a2)
    {
      v4 += 1792;
      if (v4 == v3)
      {
        uint64_t v4 = *(void *)(result + 64);
        return sub_1011B1DF8(v2, v4, v3);
      }
    }
    if (v4 != v3)
    {
      uint64_t v7 = v4 + 1792;
      if (v4 + 1792 != v3)
      {
        do
        {
          if (*(double *)(v7 + 16) >= a2)
          {
            sub_1011B15C0(v4, v7);
            v4 += 1792;
          }
          v7 += 1792;
        }
        while (v7 != v3);
        uint64_t v3 = *(void *)(v6 + 64);
      }
    }
    return sub_1011B1DF8(v2, v4, v3);
  }
  return result;
}

uint64_t sub_1011B4C98(uint64_t *a1, uint64_t a2, int a3)
{
  sub_10159876C(a2);
  *(unsigned char *)a2 = a3 ^ 1;
  uint64_t v6 = a1[1];
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v6 - *a1) >> 8)) < 3
    || !*(unsigned char *)(v6 - 1632)
    || !*(unsigned char *)(v6 - 1456)
    || !*(unsigned char *)(v6 - 32))
  {
    return 0;
  }
  __double2 v7 = __sincos_stret(*(double *)(v6 - 1448) - *(double *)(v6 - 24));
  v68[0] = off_102316730;
  v68[1] = *(void *)&v7.__cosval;
  v68[2] = *(void *)&v7.__sinval;
  v68[3] = 0;
  *(double *)&v68[4] = -v7.__sinval;
  v68[5] = *(void *)&v7.__cosval;
  memset(&v68[6], 0, 24);
  v68[9] = 0x3FF0000000000000;
  v68[10] = 0;
  sub_1015981F4((double *)a2, (uint64_t)v68);
  long long v8 = *(_OWORD *)(v6 - 1576);
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(v6 - 1560);
  *(_OWORD *)(a2 + 200) = v8;
  if (a3)
  {
    uint64_t v28 = (double *)(a2 + 56);
    LOBYTE(v47) = 0;
    int64x2_t v48 = vdupq_n_s64(3uLL);
    long long v49 = xmmword_101DAB7F0;
    *(void *)&long long v50 = a2 + 64;
    *((void *)&v50 + 1) = a2 + 136;
    sub_1011B94AC((uint64_t)v67, &v47);
    long long v61 = off_102316730;
    int64x2_t v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    uint64_t v58 = 0;
    uint64_t v55 = 0;
    uint64_t v52 = 0;
    int64x2_t v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v54 = 0u;
    long long v57 = 0u;
    uint64_t v60 = 0;
    unint64_t v59 = 0xBFF0000000000000;
    unint64_t v56 = 0xBFF0000000000000;
    long long v47 = off_102316FC8;
    unint64_t v53 = 0xBFF0000000000000;
    long long v44 = off_102316AA0;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    if (*a1 != v10)
    {
      uint64_t v11 = *a1;
      do
      {
        double v29 = off_102316AA0;
        long long v12 = *(_OWORD *)(v11 + 632);
        int64x2_t __B = *(int64x2_t *)(v11 + 616);
        long long v31 = v12;
        for (uint64_t i = 8; i != 32; i += 8)
          *(double *)((char *)&v29 + i) = *(double *)((char *)&v29 + i) - *(double *)(v6 + i - 1184);
        for (uint64_t j = 1; j != 4; ++j)
          *(double *)&(&v44)[j] = *(double *)&(&v44)[j] + *(double *)((char *)&v29 + j * 8);
        v11 += 1792;
      }
      while (v11 != v10);
    }
    for (uint64_t k = 1; k != 4; ++k)
      *(double *)&(&v44)[k] = *(double *)&(&v44)[k]
                            / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 8));
    if (v9 != v10)
    {
      int64x2_t v27 = vdupq_n_s64(3uLL);
      do
      {
        if (*(unsigned char *)(v9 + 160))
        {
          LOBYTE(v35) = 0;
          int64x2_t v36 = v27;
          long long v37 = xmmword_101D07BB0;
          uint64_t v38 = v9 + 824;
          uint64_t v39 = v9 + 944;
          sub_1011B5780((uint64_t)v28, &v35, v40);
          sub_1011B7F3C((uint64_t)v40, (uint64_t)v67, (uint64_t *)&__p);
          uint64_t v16 = 0;
          double v29 = off_102316730;
          long long v17 = *(_OWORD *)(v9 + 304);
          long long v32 = *(_OWORD *)(v9 + 288);
          long long v33 = v17;
          long long v34 = *(_OWORD *)(v9 + 320);
          long long v18 = *(_OWORD *)(v9 + 272);
          int64x2_t __B = *(int64x2_t *)(v9 + 256);
          long long v31 = v18;
          uint64_t v19 = v43;
          do
          {
            *(double *)((char *)&v29 + v16 + 8) = *(double *)((char *)&v29 + v16 + 8) + *(double *)(v19 + v16);
            v16 += 8;
          }
          while (v16 != 72);
          long long v64 = v32;
          long long v65 = v33;
          long long v66 = v34;
          int64x2_t v62 = __B;
          long long v63 = v31;
          sub_1011B9060(&__p);
          sub_1011B9060(v40);
          double v29 = 0;
          int64x2_t __B = 0uLL;
          __p = 0;
          int8x16_t v42 = 0uLL;
          sub_1011B7FD0((double *)&v61);
          if (__p)
          {
            v42.i64[0] = (uint64_t)__p;
            operator delete(__p);
          }
          if (v29)
          {
            __B.i64[0] = (uint64_t)v29;
            operator delete(v29);
          }
          __p = off_102316AA0;
          int8x16_t v21 = *(int8x16_t *)(v9 + 616);
          long long v22 = *(_OWORD *)(v9 + 632);
          int8x16_t v42 = v21;
          long long v43 = v22;
          for (uint64_t m = 8; m != 32; m += 8)
            *(double *)((char *)&__p + m) = *(double *)((char *)&__p + m) - *(double *)(v6 + m - 1184);
          for (uint64_t n = 1; n != 4; ++n)
          {
            *(double *)v21.i64 = *(double *)((char *)&__p + n * 8) - *(double *)&(&v44)[n];
            *(void **)((char *)&__p + n * 8) = (void *)v21.i64[0];
          }
          sub_101599690(v28, a2 + 144, (double *)&__p, (uint64_t)&v29, v21, v20);
          for (iuint64_t i = 8; ii != 80; ii += 8)
            *(double *)((char *)&v29 + ii) = -*(double *)((char *)&v29 + ii);
          int64x2_t v48 = __B;
          long long v49 = v31;
          long long v50 = v32;
          long long v51 = v33;
          uint64_t v52 = v34;
          sub_1011B8074((uint64_t)&v61, (uint64_t)&v47, (uint64_t)&v29);
          cblas_dgemm(CblasColMajor, CblasTrans, CblasNoTrans, 6, 6, 3, 1.0, (const double *)v48.i64, 3, (const double *)__B.i64, 3, 1.0, (double *)(a2 + 240), 6);
        }
        v9 += 1792;
      }
      while (v9 != v10);
    }
    double v29 = 0;
    int64x2_t __B = 0uLL;
    __p = 0;
    int8x16_t v42 = 0uLL;
    sub_1011BA858((__CLPK_doublereal *)(a2 + 240), 6uLL, (__CLPK_doublereal **)&v29, (__CLPK_integer **)&__p);
    if (__p)
    {
      v42.i64[0] = (uint64_t)__p;
      operator delete(__p);
    }
    if (v29)
    {
      __B.i64[0] = (uint64_t)v29;
      operator delete(v29);
    }
  }
  return 1;
}

void sub_1011B5260(uint64_t a1, double a2)
{
  unsigned __int8 v4 = atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 1), 1u, memory_order_acquire);
  if ((v4 & 1) == 0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    double v5 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVlfDataLessThanMachAbsoluteTime,Called without locking vision buffers", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVlfDataLessThanMachAbsoluteTime(const CFTimeInterval)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v7 != v6)
  {
    while (*(double *)(v7 + 8) >= a2)
    {
      v7 += 3160;
      if (v7 == v6)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        goto LABEL_17;
      }
    }
    if (v7 != v6)
    {
      uint64_t v8 = v7 + 3160;
      if (v7 + 3160 != v6)
      {
        do
        {
          if (*(double *)(v8 + 8) >= a2)
          {
            sub_1011BA11C(v7, v8);
            v7 += 3160;
          }
          v8 += 3160;
        }
        while (v8 != v6);
        uint64_t v6 = *(void *)(a1 + 40);
      }
    }
LABEL_17:
    sub_1011B1DB0(a1 + 32, v7, v6);
  }
  if ((v4 & 1) == 0) {
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
  }
}

void sub_1011B54A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011B54B0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = sub_1011BA80C(a3, 6, a2[2]);
  uint64_t v6 = a2[2];
  if (v6)
  {
    uint64_t v7 = (const double *)a2[5];
    uint64_t v8 = a2[3];
    uint64_t __incY = v5[2];
    __Y = (double *)v5[3];
    if (v6 == 1)
    {
      cblas_dgemv(CblasColMajor, CblasNoTrans, 6, 6, 1.0, (const double *)(a1 + 8), 6, v7, v8, 0.0, __Y, __incY);
    }
    else
    {
      uint64_t v11 = a2[4];
      if (v8 == 1)
      {
        CBLAS_TRANSPOSE v12 = CblasNoTrans;
      }
      else
      {
        uint64_t v11 = a2[3];
        CBLAS_TRANSPOSE v12 = CblasTrans;
      }
      cblas_dgemm(CblasColMajor, CblasNoTrans, v12, 6, v6, 6, 1.0, (const double *)(a1 + 8), 6, v7, v11, 0.0, __Y, __incY);
    }
  }
}

void sub_1011B5588(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_1023168E8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(void *)(a3 + 296) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  uint64_t __C = a3 + 8;
  *(_OWORD *)(__C + 256) = 0u;
  *(_OWORD *)(__C + 272) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 6, 6, 6, 1.0, (const double *)(a1 + 8), 6, (const double *)(a2 + 8), 6, 0.0, (double *)__C, 6);
}

BOOL sub_1011B5654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v7 = *(_OWORD *)(a2 + 2000);
  long long v19 = *(_OWORD *)(a2 + 1984);
  long long v20 = v7;
  do
  {
    *(double *)&v18[v6 + 8] = *(double *)&v18[v6 + 8] - *(double *)(a1 + 616 + v6);
    v6 += 8;
  }
  while (v6 != 24);
  uint64_t v8 = 0;
  long long v9 = v19;
  long long v16 = *(_OWORD *)(a3 + 1376);
  long long v17 = *(_OWORD *)(a3 + 1392);
  do
  {
    *(double *)&v15[v8 + 8] = *(double *)&v15[v8 + 8] - *(double *)(a2 + 1392 + v8);
    v8 += 8;
  }
  while (v8 != 24);
  double v10 = hypot(*(long double *)&v9, *((long double *)&v9 + 1));
  double v11 = hypot(*(long double *)&v16, *((long double *)&v16 + 1));
  if (v10 < 8.0
    && ((double v12 = sqrt(*(double *)(a2 + 1600) + *(double *)(a2 + 1656)), v12 <= 0.0)
     || (double v13 = *(double *)(a3 + 1272), v13 <= 0.0)
     || v13 + *(double *)&qword_102485EA0 * v12 >= v11))
  {
    return vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 16)) >= 16.0;
  }
  else
  {
    return 1;
  }
}

void sub_1011B5780(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = sub_1011BA80C(a3, 3, a2[2]);
  uint64_t v6 = a2[2];
  if (v6)
  {
    long long v7 = (const double *)a2[5];
    uint64_t v8 = a2[3];
    uint64_t __incY = v5[2];
    __Y = (double *)v5[3];
    if (v6 == 1)
    {
      cblas_dgemv(CblasColMajor, CblasNoTrans, 3, 3, 1.0, (const double *)(a1 + 8), 3, v7, v8, 0.0, __Y, __incY);
    }
    else
    {
      uint64_t v11 = a2[4];
      if (v8 == 1)
      {
        CBLAS_TRANSPOSE v12 = CblasNoTrans;
      }
      else
      {
        uint64_t v11 = a2[3];
        CBLAS_TRANSPOSE v12 = CblasTrans;
      }
      cblas_dgemm(CblasColMajor, CblasNoTrans, v12, 3, v6, 3, 1.0, (const double *)(a1 + 8), 3, v7, v11, 0.0, __Y, __incY);
    }
  }
}

double sub_1011B5858(double *a1, void *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = a2[4];
  unsigned __int8 v4 = (double *)a2[5];
  double v5 = a1[2];
  a1[1] = *v4 + a1[1];
  a1[2] = v4[v2] + v5;
  double v6 = a1[4];
  a1[3] = v4[2 * v2] + a1[3];
  a1[4] = v4[v3] + v6;
  double v7 = a1[6];
  a1[5] = v4[v3 + v2] + a1[5];
  a1[6] = v4[2 * v2 + v3] + v7;
  double v8 = a1[8];
  a1[7] = v4[2 * v3] + a1[7];
  a1[8] = v4[2 * v3 + v2] + v8;
  double result = v4[2 * v3 + 2 * v2] + a1[9];
  a1[9] = result;
  return result;
}

void sub_1011B5900(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = sub_1011BA80C(a3, 3, a2[2]);
  uint64_t v6 = a2[2];
  if (v6)
  {
    double v7 = (const double *)a2[5];
    uint64_t v8 = a2[3];
    uint64_t __incY = v5[2];
    __Y = (double *)v5[3];
    if (v6 == 1)
    {
      cblas_dgemv(CblasColMajor, CblasNoTrans, 3, 6, 1.0, (const double *)(a1 + 8), 3, v7, v8, 0.0, __Y, __incY);
    }
    else
    {
      uint64_t v11 = a2[4];
      if (v8 == 1)
      {
        CBLAS_TRANSPOSE v12 = CblasNoTrans;
      }
      else
      {
        uint64_t v11 = a2[3];
        CBLAS_TRANSPOSE v12 = CblasTrans;
      }
      cblas_dgemm(CblasColMajor, CblasNoTrans, v12, 3, v6, 6, 1.0, (const double *)(a1 + 8), 3, v7, v11, 0.0, __Y, __incY);
    }
  }
}

void sub_1011B59D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_102316FC8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 3, 6, 6, 1.0, (const double *)(a1 + 8), 3, (const double *)(a2 + 8), 6, 0.0, (double *)(a3 + 8), 3);
}

double sub_1011B5A88@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  double v2 = *(double *)(a2 + 8);
  double v3 = *(double *)(a2 + 16);
  double v4 = *(double *)(a2 + 24);
  double v5 = *(double *)(a2 + 32);
  double v6 = *(double *)(a2 + 40);
  double v7 = *(double *)(a2 + 48);
  double v8 = *(double *)(a2 + 56);
  double v9 = *(double *)(a2 + 64);
  double v10 = *(double *)(a2 + 72);
  double v11 = v6 * v10 - v9 * v7;
  double v12 = v9 * v4 - v3 * v10;
  double v13 = v3 * v7 - v6 * v4;
  double v14 = v5 * v12 + v11 * v2 + v13 * v8;
  *(void *)a2 = off_102316730;
  *(double *)(a2 + 8) = v11 / v14;
  *(double *)(a2 + 16) = v12 / v14;
  *(double *)(a2 + 24) = v13 / v14;
  *(double *)(a2 + 32) = (v8 * v7 - v5 * v10) / v14;
  *(double *)(a2 + 40) = (v2 * v10 - v8 * v4) / v14;
  *(double *)(a2 + 48) = (v5 * v4 - v2 * v7) / v14;
  *(double *)(a2 + 56) = (v5 * v9 - v8 * v6) / v14;
  *(double *)(a2 + 64) = (v8 * v3 - v2 * v9) / v14;
  double result = (v2 * v6 - v5 * v3) / v14;
  *(double *)(a2 + 72) = result;
  return result;
}

void sub_1011B5B70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = sub_1011BA80C(a3, *(void *)(a1 + 8), 1);
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6 == 1) {
      CBLAS_TRANSPOSE v7 = CblasNoTrans;
    }
    else {
      CBLAS_TRANSPOSE v7 = CblasTrans;
    }
    if (v6 == 1) {
      int v8 = *(void *)(a1 + 8);
    }
    else {
      int v8 = 3;
    }
    if (v6 == 1) {
      int v9 = 3;
    }
    else {
      int v9 = *(void *)(a1 + 8);
    }
    if (v6 == 1) {
      int v10 = *(_DWORD *)(a1 + 32);
    }
    else {
      int v10 = *(void *)(a1 + 24);
    }
    cblas_dgemv(CblasColMajor, v7, v8, v9, 1.0, *(const double **)(a1 + 40), v10, (const double *)(a2 + 8), 1, 0.0, (double *)v5[3], v5[2]);
  }
}

void sub_1011B5C04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = sub_1011BA80C(a3, *(void *)(a1 + 8), 3);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7 == 1) {
      CBLAS_TRANSPOSE v8 = CblasNoTrans;
    }
    else {
      CBLAS_TRANSPOSE v8 = CblasTrans;
    }
    if (v7 == 1) {
      int v9 = *(_DWORD *)(a1 + 32);
    }
    else {
      int v9 = *(void *)(a1 + 24);
    }
    cblas_dgemm(CblasColMajor, v8, CblasNoTrans, v6, 3, 3, 1.0, *(const double **)(a1 + 40), v9, (const double *)(a2 + 8), 3, 0.0, (double *)v5[3], v5[2]);
  }
}

void sub_1011B5CA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_102316C58;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemv(CblasColMajor, CblasNoTrans, 6, 3, 1.0, (const double *)(a1 + 8), 6, (const double *)(a2 + 8), 1, 0.0, (double *)(a3 + 8), 1);
}

void sub_1011B5D30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_1023168E8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(void *)(a3 + 296) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  uint64_t __C = a3 + 8;
  *(_OWORD *)(__C + 256) = 0u;
  *(_OWORD *)(__C + 272) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 6, 6, 3, 1.0, (const double *)(a1 + 8), 6, (const double *)(a2 + 8), 3, 0.0, (double *)__C, 6);
}

BOOL sub_1011B5E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v7 = *(_OWORD *)(a2 + 632);
  long long v19 = *(_OWORD *)(a2 + 616);
  long long v20 = v7;
  do
  {
    *(double *)&v18[v6 + 8] = *(double *)&v18[v6 + 8] - *(double *)(a1 + 616 + v6);
    v6 += 8;
  }
  while (v6 != 24);
  uint64_t v8 = 0;
  long long v9 = v19;
  long long v16 = *(_OWORD *)(a3 + 1376);
  long long v17 = *(_OWORD *)(a3 + 1392);
  do
  {
    *(double *)&v15[v8 + 8] = *(double *)&v15[v8 + 8] - *(double *)(a2 + 216 + v8);
    v8 += 8;
  }
  while (v8 != 24);
  double v10 = hypot(*(long double *)&v9, *((long double *)&v9 + 1));
  double v11 = hypot(*(long double *)&v16, *((long double *)&v16 + 1));
  if (v10 < 8.0
    && ((double v12 = *(double *)(a2 + 112), v12 <= 0.0)
     || (double v13 = *(double *)(a3 + 1272), v13 <= 0.0)
     || v13 + *(double *)&qword_102485EA0 * v12 >= v11))
  {
    return vabdd_f64(*(double *)(a2 + 16), *(double *)(a1 + 16)) >= 16.0;
  }
  else
  {
    return 1;
  }
}

BOOL sub_1011B5F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  double v4 = *(double *)(a3 + 40);
  double v5 = *(double *)(a2 + 40);
  long long v6 = *(_OWORD *)(a3 + 272);
  long long v13 = *(_OWORD *)(a3 + 256);
  long long v14 = v6;
  do
  {
    *(double *)&v12[v3 + 8] = *(double *)&v12[v3 + 8] - *(double *)(a2 + 256 + v3);
    v3 += 8;
  }
  while (v3 != 24);
  double v7 = *((double *)&v13 + 1) * *((double *)&v13 + 1) + *(double *)&v13 * *(double *)&v13;
  double v8 = vabdd_f64(v4, v5);
  double v9 = v8 * (v8 * 36.0);
  return v7 <= 0.0576 || v7 <= v9;
}

BOOL sub_1011B5FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)a2;
  *(void *)(a3 + 48) = *(void *)(a2 + 16);
  *(_OWORD *)(a3 + 32) = v5;
  *(unsigned char *)(a3 + 1424) = 0;
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v140 = *(void *)(a1 + 8);
  uint64_t v139 = v6;
  BOOL v7 = sub_1011B748C(v140, v6, a2, &v140, (unint64_t *)&v139);
  if (v7)
  {
    unint64_t v8 = v140;
    uint64_t v9 = v139;
    BOOL result = sub_1011B5F20(v7, v140, v139);
    if (!result) {
      return result;
    }
    double v11 = *(double *)(v8 + 40);
    double v12 = *(double *)(a2 + 8);
    if (v11 == v12)
    {
      long long v13 = *(_OWORD *)v8;
      long long v14 = *(_OWORD *)(v8 + 16);
      long long v15 = *(_OWORD *)(v8 + 32);
      *(void *)(a3 + 48) = *(void *)(v8 + 48);
      *(_OWORD *)(a3 + 16) = v14;
      *(_OWORD *)(a3 + 32) = v15;
      *(_OWORD *)a3 = v13;
      *(unsigned char *)(a3 + 56) = *(unsigned char *)(v8 + 56);
      long long v16 = *(_OWORD *)(v8 + 72);
      long long v17 = *(_OWORD *)(v8 + 88);
      *(void *)(a3 + 104) = *(void *)(v8 + 104);
      *(_OWORD *)(a3 + 88) = v17;
      *(_OWORD *)(a3 + 72) = v16;
      long long v18 = *(_OWORD *)(v8 + 152);
      long long v19 = *(_OWORD *)(v8 + 168);
      long long v20 = *(_OWORD *)(v8 + 184);
      *(_OWORD *)(a3 + 136) = *(_OWORD *)(v8 + 136);
      *(_OWORD *)(a3 + 184) = v20;
      *(_OWORD *)(a3 + 168) = v19;
      *(_OWORD *)(a3 + 152) = v18;
      *(_OWORD *)(a3 + 120) = *(_OWORD *)(v8 + 120);
      long long v21 = *(_OWORD *)(v8 + 208);
      long long v22 = *(_OWORD *)(v8 + 224);
      *(void *)(a3 + 240) = *(void *)(v8 + 240);
      *(_OWORD *)(a3 + 208) = v21;
      *(_OWORD *)(a3 + 224) = v22;
      long long v23 = *(_OWORD *)(v8 + 272);
      *(_OWORD *)(a3 + 256) = *(_OWORD *)(v8 + 256);
      *(_OWORD *)(a3 + 272) = v23;
      memcpy((void *)(a3 + 296), (const void *)(v8 + 296), 0x129uLL);
      long long v25 = *(_OWORD *)(v8 + 608);
      long long v24 = *(_OWORD *)(v8 + 624);
      *(void *)(a3 + 640) = *(void *)(v8 + 640);
      *(_OWORD *)(a3 + 608) = v25;
      *(_OWORD *)(a3 + 624) = v24;
      long long v27 = *(_OWORD *)(v8 + 672);
      long long v26 = *(_OWORD *)(v8 + 688);
      long long v28 = *(_OWORD *)(v8 + 720);
      *(_OWORD *)(a3 + 704) = *(_OWORD *)(v8 + 704);
      *(_OWORD *)(a3 + 720) = v28;
      *(_OWORD *)(a3 + 672) = v27;
      *(_OWORD *)(a3 + 688) = v26;
      *(_OWORD *)(a3 + 656) = *(_OWORD *)(v8 + 656);
      long long v29 = *(_OWORD *)(v8 + 744);
      long long v30 = *(_OWORD *)(v8 + 760);
      *(void *)(a3 + 776) = *(void *)(v8 + 776);
      *(_OWORD *)(a3 + 760) = v30;
      *(_OWORD *)(a3 + 744) = v29;
      long long v31 = *(_OWORD *)(v8 + 792);
      *(_OWORD *)(a3 + 808) = *(_OWORD *)(v8 + 808);
      *(_OWORD *)(a3 + 792) = v31;
      memcpy((void *)(a3 + 832), (const void *)(v8 + 832), 0x128uLL);
      long long v32 = *(_OWORD *)(v8 + 1136);
      *(_OWORD *)(a3 + 1152) = *(_OWORD *)(v8 + 1152);
      *(_OWORD *)(a3 + 1136) = v32;
      *(_OWORD *)(a3 + 1176) = *(_OWORD *)(v8 + 1176);
      long long v33 = *(_OWORD *)(v8 + 1208);
      long long v34 = *(_OWORD *)(v8 + 1224);
      long long v35 = *(_OWORD *)(v8 + 1240);
      *(_OWORD *)(a3 + 1192) = *(_OWORD *)(v8 + 1192);
      *(_OWORD *)(a3 + 1240) = v35;
      *(_OWORD *)(a3 + 1224) = v34;
      *(_OWORD *)(a3 + 1208) = v33;
      *(unsigned char *)(a3 + 1256) = *(unsigned char *)(v8 + 1256);
      long long v36 = *(_OWORD *)(v8 + 1272);
      *(_OWORD *)(a3 + 1288) = *(_OWORD *)(v8 + 1288);
      *(_OWORD *)(a3 + 1272) = v36;
      *(_OWORD *)(a3 + 1312) = *(_OWORD *)(v8 + 1312);
      long long v37 = *(_OWORD *)(v8 + 1344);
      long long v38 = *(_OWORD *)(v8 + 1360);
      long long v39 = *(_OWORD *)(v8 + 1376);
      *(_OWORD *)(a3 + 1328) = *(_OWORD *)(v8 + 1328);
      *(_OWORD *)(a3 + 1376) = v39;
      *(_OWORD *)(a3 + 1360) = v38;
      *(_OWORD *)(a3 + 1344) = v37;
      long long v40 = *(_OWORD *)(v8 + 1392);
      long long v41 = *(_OWORD *)(v8 + 1408);
LABEL_17:
      *(_OWORD *)(a3 + 1408) = v41;
      *(_OWORD *)(a3 + 1392) = v40;
LABEL_18:
      BOOL result = 1;
      *(unsigned char *)(a3 + 1424) = 1;
      return result;
    }
    double v46 = *(double *)(v9 + 40);
    if (v46 == v12)
    {
      long long v47 = *(_OWORD *)v9;
      long long v48 = *(_OWORD *)(v9 + 16);
      long long v49 = *(_OWORD *)(v9 + 32);
      *(void *)(a3 + 48) = *(void *)(v9 + 48);
      *(_OWORD *)(a3 + 16) = v48;
      *(_OWORD *)(a3 + 32) = v49;
      *(_OWORD *)a3 = v47;
      *(unsigned char *)(a3 + 56) = *(unsigned char *)(v9 + 56);
      long long v50 = *(_OWORD *)(v9 + 72);
      long long v51 = *(_OWORD *)(v9 + 88);
      *(void *)(a3 + 104) = *(void *)(v9 + 104);
      *(_OWORD *)(a3 + 88) = v51;
      *(_OWORD *)(a3 + 72) = v50;
      long long v52 = *(_OWORD *)(v9 + 152);
      long long v53 = *(_OWORD *)(v9 + 168);
      long long v54 = *(_OWORD *)(v9 + 184);
      *(_OWORD *)(a3 + 136) = *(_OWORD *)(v9 + 136);
      *(_OWORD *)(a3 + 184) = v54;
      *(_OWORD *)(a3 + 168) = v53;
      *(_OWORD *)(a3 + 152) = v52;
      *(_OWORD *)(a3 + 120) = *(_OWORD *)(v9 + 120);
      long long v55 = *(_OWORD *)(v9 + 208);
      long long v56 = *(_OWORD *)(v9 + 224);
      *(void *)(a3 + 240) = *(void *)(v9 + 240);
      *(_OWORD *)(a3 + 208) = v55;
      *(_OWORD *)(a3 + 224) = v56;
      long long v57 = *(_OWORD *)(v9 + 272);
      *(_OWORD *)(a3 + 256) = *(_OWORD *)(v9 + 256);
      *(_OWORD *)(a3 + 272) = v57;
      memcpy((void *)(a3 + 296), (const void *)(v9 + 296), 0x129uLL);
      long long v59 = *(_OWORD *)(v9 + 608);
      long long v58 = *(_OWORD *)(v9 + 624);
      *(void *)(a3 + 640) = *(void *)(v9 + 640);
      *(_OWORD *)(a3 + 608) = v59;
      *(_OWORD *)(a3 + 624) = v58;
      long long v61 = *(_OWORD *)(v9 + 672);
      long long v60 = *(_OWORD *)(v9 + 688);
      long long v62 = *(_OWORD *)(v9 + 720);
      *(_OWORD *)(a3 + 704) = *(_OWORD *)(v9 + 704);
      *(_OWORD *)(a3 + 720) = v62;
      *(_OWORD *)(a3 + 672) = v61;
      *(_OWORD *)(a3 + 688) = v60;
      *(_OWORD *)(a3 + 656) = *(_OWORD *)(v9 + 656);
      long long v63 = *(_OWORD *)(v9 + 744);
      long long v64 = *(_OWORD *)(v9 + 760);
      *(void *)(a3 + 776) = *(void *)(v9 + 776);
      *(_OWORD *)(a3 + 760) = v64;
      *(_OWORD *)(a3 + 744) = v63;
      long long v65 = *(_OWORD *)(v9 + 792);
      *(_OWORD *)(a3 + 808) = *(_OWORD *)(v9 + 808);
      *(_OWORD *)(a3 + 792) = v65;
      memcpy((void *)(a3 + 832), (const void *)(v9 + 832), 0x128uLL);
      long long v66 = *(_OWORD *)(v9 + 1136);
      *(_OWORD *)(a3 + 1152) = *(_OWORD *)(v9 + 1152);
      *(_OWORD *)(a3 + 1136) = v66;
      *(_OWORD *)(a3 + 1176) = *(_OWORD *)(v9 + 1176);
      long long v67 = *(_OWORD *)(v9 + 1208);
      long long v68 = *(_OWORD *)(v9 + 1224);
      long long v69 = *(_OWORD *)(v9 + 1240);
      *(_OWORD *)(a3 + 1192) = *(_OWORD *)(v9 + 1192);
      *(_OWORD *)(a3 + 1240) = v69;
      *(_OWORD *)(a3 + 1224) = v68;
      *(_OWORD *)(a3 + 1208) = v67;
      *(unsigned char *)(a3 + 1256) = *(unsigned char *)(v9 + 1256);
      long long v70 = *(_OWORD *)(v9 + 1272);
      *(_OWORD *)(a3 + 1288) = *(_OWORD *)(v9 + 1288);
      *(_OWORD *)(a3 + 1272) = v70;
      *(_OWORD *)(a3 + 1312) = *(_OWORD *)(v9 + 1312);
      long long v71 = *(_OWORD *)(v9 + 1344);
      long long v72 = *(_OWORD *)(v9 + 1360);
      long long v73 = *(_OWORD *)(v9 + 1376);
      *(_OWORD *)(a3 + 1328) = *(_OWORD *)(v9 + 1328);
      *(_OWORD *)(a3 + 1376) = v73;
      *(_OWORD *)(a3 + 1360) = v72;
      *(_OWORD *)(a3 + 1344) = v71;
      long long v40 = *(_OWORD *)(v9 + 1392);
      long long v41 = *(_OWORD *)(v9 + 1408);
      goto LABEL_17;
    }
    if (*(_DWORD *)v9) {
      long long v74 = (_DWORD *)v9;
    }
    else {
      long long v74 = (_DWORD *)v8;
    }
    *(_DWORD *)a3 = *v74;
    *(void *)(a3 + 16) = *(void *)(v9 + 16);
    uint64_t v138 = 0;
    memset(v137, 0, sizeof(v137));
    int v136 = off_1023166F8;
    sub_1011B90B4((double *)&v136, v8 + 112);
    memset(v135, 0, sizeof(v135));
    long long v134 = off_1023166F8;
    sub_1011B90B4((double *)&v134, v139 + 112);
    memset(v133, 0, sizeof(v133));
    long long v132 = off_1023166F8;
    if (sub_1011B75AC((uint64_t)v137, v135, v133, *(double *)(v140 + 40), *(double *)(v139 + 40), *(double *)(a2 + 8)))
    {
      double v75 = v46 - v11;
      double v76 = v46 - v12;
      buf[0] = off_102316730;
      *(_OWORD *)&buf[1] = 0u;
      long long v146 = 0u;
      double v77 = v12 - v11;
      long long v147 = 0u;
      long long v148 = 0u;
      v149[0] = 0u;
      sub_1011BAAA4(v133, (double *)&buf[1]);
      sub_1015981F4((double *)(a3 + 56), (uint64_t)buf);
      LOBYTE(v127) = 0;
      int64x2_t v128 = vdupq_n_s64(3uLL);
      long long v129 = xmmword_101DAB7F0;
      unint64_t v130 = v140 + 120;
      unint64_t v131 = v140 + 192;
      sub_1011B5780(a3 + 112, &v127, (uint64_t *)&v141);
      buf[0] = off_102316730;
      *(_OWORD *)&buf[1] = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v148 = 0u;
      v149[0] = 0u;
      uint64_t v78 = v143;
      uint64_t v79 = v144;
      if (v143 != v144)
      {
        long long v80 = &buf[1];
        do
        {
          uint64_t v81 = *v78++;
          *v80++ = v81;
        }
        while (v78 != v79);
      }
      double v82 = v76 / v75;
      double v83 = v77 / v75;
      sub_1011B9060(&v141);
      LOBYTE(v121) = 0;
      int64x2_t v96 = vdupq_n_s64(3uLL);
      int64x2_t v122 = v96;
      long long v123 = xmmword_101D07BB0;
      *(void *)&long long v124 = v140 + 296;
      *((void *)&v124 + 1) = v140 + 416;
      sub_1011B5780((uint64_t)buf, (uint64_t *)&v121, &v127);
      LOBYTE(v115) = 0;
      int64x2_t v116 = v96;
      *(_OWORD *)uint64_t v117 = xmmword_101DAB7F0;
      *(void *)&v117[16] = &buf[1];
      uint64_t v118 = (char *)v149 + 8;
      sub_1011B77B4(&v127, &v115, (uint64_t *)&v141);
      LOBYTE(v110) = 1;
      int64x2_t v111 = v96;
      long long v112 = xmmword_101D07BB0;
      uint64_t v113 = a3 + 296;
      uint64_t v114 = a3 + 416;
      sub_1011BA71C(&v110, (uint64_t *)&v141);
      sub_1011B9060(&v141);
      sub_1011B9060(&v127);
      LOBYTE(v127) = 0;
      int64x2_t v128 = v96;
      long long v129 = xmmword_101D07BB0;
      unint64_t v130 = v140 + 320;
      unint64_t v131 = v140 + 440;
      LOBYTE(v121) = 0;
      int64x2_t v122 = v96;
      long long v123 = xmmword_101DAB7F0;
      *(void *)&long long v124 = &buf[1];
      *((void *)&v124 + 1) = (char *)v149 + 8;
      sub_1011B789C(&v127, (uint64_t *)&v121, (uint64_t *)&v141);
      LOBYTE(v115) = 1;
      int64x2_t v116 = v96;
      *(_OWORD *)uint64_t v117 = xmmword_101D07BB0;
      *(void *)&v117[16] = a3 + 320;
      uint64_t v118 = (char *)(a3 + 440);
      sub_1011BA71C(&v115, (uint64_t *)&v141);
      sub_1011B9060(&v141);
      LOBYTE(v127) = 0;
      int64x2_t v128 = v96;
      long long v129 = xmmword_101D07BB0;
      unint64_t v130 = v140 + 440;
      unint64_t v131 = v140 + 560;
      sub_1011B5780((uint64_t)buf, &v127, (uint64_t *)&v141);
      LOBYTE(v121) = 1;
      int64x2_t v122 = v96;
      long long v123 = xmmword_101D07BB0;
      *(void *)&long long v124 = a3 + 440;
      *((void *)&v124 + 1) = a3 + 560;
      sub_1011BA71C(&v121, (uint64_t *)&v141);
      sub_1011B9060(&v141);
      uint64_t v84 = 0;
      unint64_t v85 = v140;
      uint64_t v86 = v139;
      uint64_t v87 = v140 + 256;
      uint64_t v88 = v139 + 256;
      do
      {
        *(double *)(a3 + 256 + v84) = v83 * *(double *)(v88 + v84) + v82 * *(double *)(v87 + v84);
        v84 += 8;
      }
      while (v84 != 24);
      int64x2_t v97 = vdupq_n_s64(3uLL);
      LOBYTE(v127) = 0;
      int64x2_t v128 = v97;
      long long v129 = xmmword_101D07BB0;
      unint64_t v130 = v85 + 464;
      unint64_t v131 = v85 + 584;
      sub_1011B7998(&v127, (uint64_t)&v141);
      LOBYTE(v121) = 0;
      int64x2_t v122 = v97;
      long long v123 = xmmword_101D07BB0;
      *(void *)&long long v124 = v86 + 464;
      *((void *)&v124 + 1) = v86 + 584;
      sub_1011B7998(&v121, (uint64_t)&v127);
      int64x2_t v121 = off_102316730;
      int64x2_t v122 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      for (uint64_t i = 1; i != 10; ++i)
        *(double *)&(&v121)[i] = v83 * *(double *)((char *)&v127 + i * 8) + v82 * *(double *)((char *)&v141 + i * 8);
      sub_1011B7A50((double *)&v121, (uint64_t)&v115);
      uint64_t v90 = 0;
      *(int64x2_t *)(a3 + 464) = v116;
      uint64_t v91 = v118;
      *(void *)(a3 + 480) = *(void *)v117;
      *(_OWORD *)(a3 + 512) = *(_OWORD *)&v117[8];
      *(void *)(a3 + 528) = v91;
      *(_OWORD *)(a3 + 560) = v119;
      *(void *)(a3 + 576) = v120;
      do
      {
        *(double *)(a3 + 1136 + v90) = v83 * *(double *)(v86 + 1136 + v90) + v82 * *(double *)(v85 + 1136 + v90);
        v90 += 8;
      }
      while (v90 != 24);
      sub_1011B7ADC((double *)(v85 + 1168), (uint64_t)&v115);
      sub_1011B7ADC((double *)(v86 + 1168), (uint64_t)&v110);
      uint64_t v104 = off_102316730;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      for (uint64_t j = 1; j != 10; ++j)
        *(double *)&(&v104)[j] = v83 * *(double *)((char *)&v110 + j * 8) + v82 * *(double *)((char *)&v115 + j * 8);
      sub_1011B7A50((double *)&v104, (uint64_t)v98);
      *(_OWORD *)(a3 + 1192) = v100;
      *(_OWORD *)(a3 + 1208) = v101;
      *(_OWORD *)(a3 + 1224) = v102;
      *(_OWORD *)(a3 + 1240) = v103;
      *(_OWORD *)(a3 + 1176) = v99;
      goto LABEL_18;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v93 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      uint64_t v94 = *(void *)(a2 + 8);
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v94;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "CLVLF,interpolateVioDataAt,mach::SphericalLinearInterpolator::interpolate error,machAbsTime,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v95 = *(void *)(a2 + 8);
    int v141 = 134349056;
    uint64_t v142 = v95;
    long long v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::interpolateVioDataAt(const CLVisionTime &, fusion::VioData &)", "%s\n", v45);
LABEL_13:
    if (v45 != (char *)buf) {
      free(v45);
    }
    return 0;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  int8x16_t v42 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    uint64_t v43 = *(void *)(a2 + 8);
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "CLVLF,interpolateVioDataAt,util::binary_find_nearest error,machAbsTime,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v44 = *(void *)(a2 + 8);
    int v141 = 134349056;
    uint64_t v142 = v44;
    long long v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::interpolateVioDataAt(const CLVisionTime &, fusion::VioData &)", "%s\n", v45);
    goto LABEL_13;
  }
  return result;
}

void sub_1011B6C10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1011B6C1C(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v4 = *a2;
  *(void *)(a3 + 48) = *((void *)a2 + 2);
  *(_OWORD *)(a3 + 32) = v4;
  *(unsigned char *)(a3 + 1424) = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (0xED6866F8D962AE7BLL * ((v5 - *(void *)(a1 + 8)) >> 3) > 1)
  {
    BOOL result = sub_1011B5F20(a1, v5 - 2864, v5 - 1432);
    if (result)
    {
      double v12 = *(double *)(v5 - 1392);
      double v13 = *(double *)(v5 - 2824);
      double v14 = v12 - v13;
      double v15 = *((double *)a2 + 1);
      double v16 = v12 - v15;
      double v17 = (v15 - v13) / (v12 - v13);
      if (*(_DWORD *)(v5 - 2864)) {
        long long v18 = (_DWORD *)(v5 - 2864);
      }
      else {
        long long v18 = (_DWORD *)(v5 - 1432);
      }
      *(_DWORD *)a3 = *v18;
      *(void *)(a3 + 16) = *(void *)(v5 - 1416);
      LOBYTE(v78[0]) = 0;
      int64x2_t v35 = vdupq_n_s64(3uLL);
      *(int64x2_t *)&v78[1] = v35;
      long long v79 = xmmword_101DAB7F0;
      *(void *)&long long v80 = v5 - 2744;
      *((void *)&v80 + 1) = v5 - 2672;
      sub_1011B5780(v5 - 1320, v78, (uint64_t *)&buf);
      uint64_t v73 = 0;
      long long v72 = 0u;
      long long v71 = 0u;
      long long v70 = off_1023166F8;
      sub_1011B92CC((double *)&v70, (uint64_t)&buf);
      long long v75 = 0u;
      long long v76 = 0u;
      long long v74 = off_102316520;
      uint64_t v77 = 0;
      sub_1011BAC34((double *)&v71, (uint64_t)&v75);
      sub_1011B9060(&buf);
      *((double *)&v76 + 1) = v17 * *((double *)&v76 + 1);
      *(void *)&long long buf = off_102316730;
      uint64_t v92 = 0;
      __double2 v19 = __sincos_stret(*((double *)&v76 + 1));
      double v20 = (1.0 - v19.__cosval) * (*(double *)&v75 * *((double *)&v75 + 1));
      double v21 = (1.0 - v19.__cosval) * (*(double *)&v75 * *(double *)&v76);
      double v22 = (1.0 - v19.__cosval) * (*((double *)&v75 + 1) * *(double *)&v76);
      *((double *)&buf + 1) = v19.__cosval + *(double *)&v75 * *(double *)&v75 * (1.0 - v19.__cosval);
      double v84 = v19.__sinval * *(double *)&v76 + v20;
      double v85 = v21 - v19.__sinval * *((double *)&v75 + 1);
      double v86 = v20 - v19.__sinval * *(double *)&v76;
      double v87 = v19.__cosval + (1.0 - v19.__cosval) * (*((double *)&v75 + 1) * *((double *)&v75 + 1));
      double v88 = *(double *)&v75 * v19.__sinval + v22;
      double v89 = v19.__sinval * *((double *)&v75 + 1) + v21;
      double v90 = v22 - *(double *)&v75 * v19.__sinval;
      double v91 = v19.__cosval + (1.0 - v19.__cosval) * (*(double *)&v76 * *(double *)&v76);
      sub_1011B7B6C((double *)&buf, (double *)(v5 - 2752), (uint64_t)v78);
      sub_1015981F4((double *)(a3 + 56), (uint64_t)v78);
      LOBYTE(v65) = 0;
      int64x2_t v66 = v35;
      long long v67 = xmmword_101DAB7F0;
      uint64_t v68 = v5 - 1312;
      uint64_t v69 = v5 - 1240;
      sub_1011B5780(a3 + 112, &v65, (uint64_t *)&v70);
      v78[0] = (uint64_t)off_102316730;
      *(_OWORD *)&v78[1] = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v24 = (uint64_t *)*((void *)&v72 + 1);
      long long v23 = (uint64_t *)v72;
      if ((void)v72 != *((void *)&v72 + 1))
      {
        long long v25 = &v78[1];
        do
        {
          uint64_t v26 = *v23++;
          *v25++ = v26;
        }
        while (v23 != v24);
      }
      double v27 = v16 / v14;
      sub_1011B9060(&v70);
      LOBYTE(v59) = 0;
      int64x2_t v33 = vdupq_n_s64(3uLL);
      int64x2_t v60 = v33;
      long long v61 = xmmword_101D07BB0;
      *(void *)&long long v62 = v5 - 1136;
      *((void *)&v62 + 1) = v5 - 1016;
      sub_1011B5780((uint64_t)v78, (uint64_t *)&v59, &v65);
      LOBYTE(v53) = 0;
      int64x2_t v54 = v33;
      *(_OWORD *)long long v55 = xmmword_101DAB7F0;
      *(void *)&v55[16] = &v78[1];
      long long v56 = (char *)&v82 + 8;
      sub_1011B77B4(&v65, &v53, (uint64_t *)&v70);
      LOBYTE(v48) = 1;
      int64x2_t v49 = v33;
      long long v50 = xmmword_101D07BB0;
      uint64_t v51 = a3 + 296;
      uint64_t v52 = a3 + 416;
      sub_1011BA71C(&v48, (uint64_t *)&v70);
      sub_1011B9060(&v70);
      sub_1011B9060(&v65);
      LOBYTE(v65) = 0;
      int64x2_t v66 = v33;
      long long v67 = xmmword_101D07BB0;
      uint64_t v68 = v5 - 1112;
      uint64_t v69 = v5 - 992;
      LOBYTE(v59) = 0;
      int64x2_t v60 = v33;
      long long v61 = xmmword_101DAB7F0;
      *(void *)&long long v62 = &v78[1];
      *((void *)&v62 + 1) = (char *)&v82 + 8;
      sub_1011B789C(&v65, (uint64_t *)&v59, (uint64_t *)&v70);
      LOBYTE(v53) = 1;
      int64x2_t v54 = v33;
      *(_OWORD *)long long v55 = xmmword_101D07BB0;
      *(void *)&v55[16] = a3 + 320;
      long long v56 = (char *)(a3 + 440);
      sub_1011BA71C(&v53, (uint64_t *)&v70);
      sub_1011B9060(&v70);
      LOBYTE(v65) = 0;
      int64x2_t v66 = v33;
      long long v67 = xmmword_101D07BB0;
      uint64_t v68 = v5 - 992;
      uint64_t v69 = v5 - 872;
      sub_1011B5780((uint64_t)v78, &v65, (uint64_t *)&v70);
      LOBYTE(v59) = 1;
      int64x2_t v60 = v33;
      long long v61 = xmmword_101D07BB0;
      *(void *)&long long v62 = a3 + 440;
      *((void *)&v62 + 1) = a3 + 560;
      sub_1011BA71C(&v59, (uint64_t *)&v70);
      sub_1011B9060(&v70);
      for (uint64_t i = 0; i != 24; i += 8)
        *(double *)(a3 + 256 + i) = v17 * *(double *)(v5 + i - 1176) + v27 * *(double *)(v5 + i - 2608);
      int64x2_t v34 = vdupq_n_s64(3uLL);
      LOBYTE(v65) = 0;
      int64x2_t v66 = v34;
      long long v67 = xmmword_101D07BB0;
      uint64_t v68 = v5 - 2400;
      uint64_t v69 = v5 - 2280;
      sub_1011B7998(&v65, (uint64_t)&v70);
      LOBYTE(v59) = 0;
      int64x2_t v60 = v34;
      long long v61 = xmmword_101D07BB0;
      *(void *)&long long v62 = v5 - 968;
      *((void *)&v62 + 1) = v5 - 848;
      sub_1011B7998(&v59, (uint64_t)&v65);
      long long v59 = off_102316730;
      int64x2_t v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      for (uint64_t j = 1; j != 10; ++j)
        *(double *)&(&v59)[j] = v17 * *(double *)((char *)&v65 + j * 8) + v27 * *(double *)&(&v70)[j];
      sub_1011B7A50((double *)&v59, (uint64_t)&v53);
      uint64_t v30 = 0;
      *(int64x2_t *)(a3 + 464) = v54;
      long long v31 = v56;
      *(void *)(a3 + 480) = *(void *)v55;
      *(_OWORD *)(a3 + 512) = *(_OWORD *)&v55[8];
      *(void *)(a3 + 528) = v31;
      *(_OWORD *)(a3 + 560) = v57;
      *(void *)(a3 + 576) = v58;
      do
      {
        *(double *)(a3 + 1136 + v30) = v17 * *(double *)(v5 + v30 - 296) + v27 * *(double *)(v5 + v30 - 1728);
        v30 += 8;
      }
      while (v30 != 24);
      sub_1011B7ADC((double *)(v5 - 1696), (uint64_t)&v53);
      sub_1011B7ADC((double *)(v5 - 264), (uint64_t)&v48);
      int8x16_t v42 = off_102316730;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      for (uint64_t k = 1; k != 10; ++k)
        *(double *)&(&v42)[k] = v17 * *(double *)((char *)&v48 + k * 8) + v27 * *(double *)((char *)&v53 + k * 8);
      sub_1011B7A50((double *)&v42, (uint64_t)v36);
      *(_OWORD *)(a3 + 1192) = v38;
      *(_OWORD *)(a3 + 1208) = v39;
      *(_OWORD *)(a3 + 1224) = v40;
      *(_OWORD *)(a3 + 1240) = v41;
      *(_OWORD *)(a3 + 1176) = v37;
      BOOL result = 1;
      *(unsigned char *)(a3 + 1424) = 1;
    }
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    unint64_t v6 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *((void *)a2 + 1);
      LODWORD(buf) = 134349056;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVLF,extrapolateVioDataAt,Not enough VIO data,machAbsTime,%{public}.3lf", (uint8_t *)&buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v9 = *((void *)a2 + 1);
      LODWORD(v78[0]) = 134349056;
      *(uint64_t *)((char *)v78 + 4) = v9;
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::extrapolateVioDataAt(const CLVisionTime &, fusion::VioData &)", "%s\n", v10);
      if (v10 != (char *)&buf) {
        free(v10);
      }
      return 0;
    }
  }
  return result;
}

void sub_1011B7480(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1011B748C(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  if (a1 >= a2)
  {
    uint64_t v6 = 0;
    *a4 = a1;
    *a5 = a2;
    return v6;
  }
  double v5 = *(double *)(a3 + 8);
  if (*(double *)(a1 + 40) > v5)
  {
    uint64_t v6 = 0;
    *a5 = a1;
    *a4 = a1;
    return v6;
  }
  if (*(double *)(a2 - 1392) < v5)
  {
    uint64_t v6 = 0;
    *a5 = a2;
    *a4 = a2;
    return v6;
  }
  unint64_t v7 = a2;
  if (a2 != a1)
  {
    unint64_t v8 = 0xED6866F8D962AE7BLL * ((uint64_t)(a2 - a1) >> 3);
    unint64_t v7 = a1;
    do
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = v7 + 1432 * (v8 >> 1);
      double v11 = *(double *)(v10 + 40);
      unint64_t v12 = v10 + 1432;
      v8 += ~(v8 >> 1);
      if (v11 < v5) {
        unint64_t v7 = v12;
      }
      else {
        unint64_t v8 = v9;
      }
    }
    while (v8);
  }
  *a4 = v7 - 1432;
  *a5 = v7;
  if (v7 == a1)
  {
    int v13 = 1;
    goto LABEL_17;
  }
  if (v7 == a2)
  {
    int v13 = -1;
LABEL_17:
    *a4 += 1432 * v13;
    unint64_t v7 = *a5 + 1432 * v13;
    *a5 = v7;
  }
  uint64_t v6 = 0;
  if (*a4 >= a1 && *a4 < a2) {
    return v7 >= a1 && v7 < a2;
  }
  return v6;
}

BOOL sub_1011B75AC(uint64_t a1, double *a2, double *a3, double a4, double a5, double a6)
{
  BOOL v6 = a5 >= a6 && a6 >= a4;
  if (v6)
  {
    if (a4 == a5
      || (double v10 = *(double *)(a1 + 24),
          double v11 = a2[2],
          double v12 = a2[3],
          double v13 = *(double *)(a1 + 8) * a2[1] + *(double *)a1 * *a2 + *(double *)(a1 + 16) * v11 + v10 * v12,
          fabs(v13) >= 1.0))
    {
      long long v19 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *((_OWORD *)a3 + 1) = v19;
    }
    else
    {
      double v14 = -v13;
      if (v13 >= 0.0) {
        double v14 = *(double *)(a1 + 8) * a2[1] + *(double *)a1 * *a2 + *(double *)(a1 + 16) * v11 + v10 * v12;
      }
      double v15 = (a6 - a4) / (a5 - a4);
      double v16 = sqrt(1.0 - v14 * v14);
      if (fabs(v16) >= 2.22044605e-16)
      {
        double v21 = acos(v14);
        long double v22 = sin((1.0 - v15) * v21);
        long double v23 = v15 * v21;
        double v24 = v22 / v16;
        double v25 = sin(v23) / v16;
        uint64_t v26 = 0;
        if (v13 >= 0.0)
        {
          do
          {
            a3[v26] = v25 * a2[v26] + v24 * *(double *)(a1 + v26 * 8);
            ++v26;
          }
          while (v26 != 4);
        }
        else
        {
          double v27 = -v25;
          do
          {
            a3[v26] = a2[v26] * v27 + v24 * *(double *)(a1 + v26 * 8);
            ++v26;
          }
          while (v26 != 4);
        }
        double v28 = *a3;
        double v29 = a3[1];
        double v30 = a3[2];
        double v31 = a3[3];
        double v32 = sqrt(v29 * v29 + v28 * v28 + v30 * v30 + v31 * v31);
        if (v32 == 0.0)
        {
          double v33 = 1.0;
          double v34 = 0.0;
          double v35 = 0.0;
          double v36 = 0.0;
        }
        else
        {
          double v34 = v28 / v32;
          double v35 = v29 / v32;
          double v36 = v30 / v32;
          double v33 = v31 / v32;
        }
        *a3 = v34;
        a3[1] = v35;
        a3[2] = v36;
        a3[3] = v33;
      }
      else
      {
        double v17 = 1.0 - v15;
        uint64_t v18 = 0;
        if (v13 >= 0.0)
        {
          do
          {
            a3[v18] = v15 * a2[v18] + v17 * *(double *)(a1 + v18 * 8);
            ++v18;
          }
          while (v18 != 4);
        }
        else
        {
          do
          {
            a3[v18] = a2[v18] * -v15 + v17 * *(double *)(a1 + v18 * 8);
            ++v18;
          }
          while (v18 != 4);
        }
      }
    }
  }
  return v6;
}

void sub_1011B77B4(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = sub_1011BA80C(a3, *a1, a2[2]);
  uint64_t v6 = *a1;
  if (*a1)
  {
    uint64_t v7 = a1[1];
    if (v7)
    {
      uint64_t v8 = a2[2];
      if (v8)
      {
        unint64_t v9 = (const double *)a1[3];
        double v10 = (const double *)a2[5];
        uint64_t v11 = a2[3];
        uint64_t __incY = v5[2];
        __Y = (double *)v5[3];
        if (v8 == 1)
        {
          cblas_dgemv(CblasColMajor, CblasNoTrans, v6, v7, 1.0, v9, a1[2], v10, v11, 0.0, __Y, __incY);
        }
        else
        {
          uint64_t v14 = a2[4];
          if (v7 == 1) {
            int v15 = *a1;
          }
          else {
            int v15 = a1[2];
          }
          if (v11 == 1)
          {
            CBLAS_TRANSPOSE v16 = CblasNoTrans;
          }
          else
          {
            uint64_t v14 = a2[3];
            CBLAS_TRANSPOSE v16 = CblasTrans;
          }
          cblas_dgemm(CblasColMajor, CblasNoTrans, v16, v6, v8, v7, 1.0, v9, v15, v10, v14, 0.0, __Y, __incY);
        }
      }
    }
  }
}

void sub_1011B789C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  double v5 = sub_1011BA80C(a3, a1[1], a2[2]);
  uint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v7 = a1[2];
    if (v7)
    {
      uint64_t v8 = a2[2];
      if (v8)
      {
        uint64_t v10 = a1[4];
        unint64_t v9 = (const double *)a1[5];
        uint64_t v11 = a1[3];
        double v12 = (const double *)a2[5];
        uint64_t v13 = a2[3];
        uint64_t __incY = v5[2];
        __Y = (double *)v5[3];
        if (v8 == 1)
        {
          if (v11 == 1) {
            CBLAS_TRANSPOSE v16 = CblasNoTrans;
          }
          else {
            CBLAS_TRANSPOSE v16 = CblasTrans;
          }
          if (v11 == 1) {
            int v17 = a1[1];
          }
          else {
            int v17 = a1[2];
          }
          if (v11 == 1)
          {
            LODWORD(v6) = a1[2];
            int v18 = a1[4];
          }
          else
          {
            int v18 = a1[3];
          }
          cblas_dgemv(CblasColMajor, v16, v17, v6, 1.0, v9, v18, v12, v13, 0.0, __Y, __incY);
        }
        else
        {
          if (v7 == 1) {
            LODWORD(v10) = a1[1];
          }
          if (v11 == 1) {
            CBLAS_TRANSPOSE v19 = CblasNoTrans;
          }
          else {
            CBLAS_TRANSPOSE v19 = CblasTrans;
          }
          if (v11 == 1) {
            LODWORD(v11) = v10;
          }
          if (v13 == 1) {
            uint64_t v20 = a2[4];
          }
          else {
            uint64_t v20 = a2[3];
          }
          if (v13 == 1) {
            CBLAS_TRANSPOSE v21 = CblasNoTrans;
          }
          else {
            CBLAS_TRANSPOSE v21 = CblasTrans;
          }
          cblas_dgemm(CblasColMajor, v19, v21, v6, v8, v7, 1.0, v9, v11, v12, v20, 0.0, __Y, __incY);
        }
      }
    }
  }
}

double sub_1011B7998@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = off_102316730;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v3 = a1[4];
  double v2 = (double *)a1[5];
  uint64_t v4 = a1[3];
  uint64_t v5 = 8;
  uint64_t v6 = v2;
  do
  {
    *(double *)(a2 + v5) = sqrt(*v6);
    v5 += 32;
    v6 += v3 + v4;
  }
  while (v5 != 104);
  double v7 = *(double *)(a2 + 40);
  double v8 = *(double *)(a2 + 8);
  double v9 = v2[v4] / (v7 * v8);
  *(double *)(a2 + 16) = v9;
  double v10 = *(double *)(a2 + 72);
  double v11 = v2[2 * v4] / (v8 * v10);
  *(double *)(a2 + 24) = v11;
  double v12 = v2[2 * v4 + v3];
  *(double *)(a2 + 32) = v9;
  double result = v12 / (v7 * v10);
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v11;
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_1011B7A50@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = off_102316730;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  for (uint64_t i = 1; i != 13; i += 4)
    *(double *)(a2 + i * 8) = a1[i] * a1[i];
  double v3 = a1[1];
  double v4 = a1[5];
  double v5 = a1[6];
  double result = a1[2] * v4 * v3;
  double v7 = a1[9];
  double v8 = v3 * (a1[3] * v7);
  *(double *)(a2 + 16) = result;
  *(double *)(a2 + 24) = v8;
  double v9 = v4 * (v7 * v5);
  *(double *)(a2 + 32) = result;
  *(double *)(a2 + 48) = v9;
  *(double *)(a2 + 56) = v8;
  *(double *)(a2 + 64) = v9;
  return result;
}

double sub_1011B7ADC@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = off_102316730;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  for (uint64_t i = 1; i != 13; i += 4)
    *(double *)(a2 + i * 8) = sqrt(a1[i]);
  double v3 = *(double *)(a2 + 40);
  double v4 = *(double *)(a2 + 8);
  double v5 = a1[2] / (v3 * v4);
  double v6 = *(double *)(a2 + 72);
  double v7 = a1[3] / (v4 * v6);
  *(double *)(a2 + 16) = v5;
  *(double *)(a2 + 24) = v7;
  double v8 = a1[6];
  *(double *)(a2 + 32) = v5;
  double result = v8 / (v3 * v6);
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v7;
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_1011B7B6C@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_102316730;
  *(void *)(a3 + 80) = 0;
  double v3 = a2[1];
  double v4 = a2[2];
  double v6 = a1[3];
  double v5 = a1[4];
  double v7 = a1[1];
  double v8 = a1[2];
  double v9 = a1[7];
  double v10 = a1[8];
  double v11 = a2[3];
  double v12 = a2[4];
  double v13 = a1[5];
  double v14 = a1[6];
  *(double *)(a3 + 8) = v5 * v4 + v7 * v3 + v9 * v11;
  *(double *)(a3 + 16) = v4 * v13 + v8 * v3 + v10 * v11;
  double v15 = v4 * v14 + v6 * v3;
  double v16 = a1[9];
  double v17 = v15 + v16 * v11;
  double v18 = a2[5];
  double v19 = a2[6];
  *(double *)(a3 + 24) = v17;
  *(double *)(a3 + 32) = v5 * v18 + v7 * v12 + v9 * v19;
  *(double *)(a3 + 40) = v13 * v18 + v8 * v12 + v10 * v19;
  *(double *)(a3 + 48) = v14 * v18 + v6 * v12 + v16 * v19;
  double v20 = a2[7];
  double v21 = a2[8];
  double v22 = v5 * v21 + v7 * v20;
  double v23 = a2[9];
  *(double *)(a3 + 56) = v22 + v9 * v23;
  *(double *)(a3 + 64) = v13 * v21 + v8 * v20 + v10 * v23;
  double result = v14 * v21 + v6 * v20 + v16 * v23;
  *(double *)(a3 + 72) = result;
  return result;
}

uint64_t sub_1011B7C38(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_1011BAEC8((uint64_t)&v7, a3, *(long long **)(a1 + 8), a2);
    *(void *)(a1 + 8) = v5;
  }
  return a2;
}

void sub_1011B7C8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_1011BA80C(a3, *(void *)(a1 + 8), 1);
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6 == 1) {
      CBLAS_TRANSPOSE v7 = CblasNoTrans;
    }
    else {
      CBLAS_TRANSPOSE v7 = CblasTrans;
    }
    if (v6 == 1) {
      int v8 = *(void *)(a1 + 8);
    }
    else {
      int v8 = 2;
    }
    if (v6 == 1) {
      int v9 = 2;
    }
    else {
      int v9 = *(void *)(a1 + 8);
    }
    if (v6 == 1) {
      int v10 = *(_DWORD *)(a1 + 32);
    }
    else {
      int v10 = *(void *)(a1 + 24);
    }
    cblas_dgemv(CblasColMajor, v7, v8, v9, 1.0, *(const double **)(a1 + 40), v10, (const double *)(a2 + 8), 1, 0.0, (double *)v5[3], v5[2]);
  }
}

void sub_1011B7D20(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_1011BA80C(a3, 2, a2[2]);
  uint64_t v6 = a2[2];
  if (v6)
  {
    CBLAS_TRANSPOSE v7 = (const double *)a2[5];
    uint64_t v8 = a2[3];
    uint64_t __incY = v5[2];
    __Y = (double *)v5[3];
    if (v6 == 1)
    {
      cblas_dgemv(CblasColMajor, CblasNoTrans, 2, 2, 1.0, (const double *)(a1 + 8), 2, v7, v8, 0.0, __Y, __incY);
    }
    else
    {
      uint64_t v11 = a2[4];
      if (v8 == 1)
      {
        CBLAS_TRANSPOSE v12 = CblasNoTrans;
      }
      else
      {
        uint64_t v11 = a2[3];
        CBLAS_TRANSPOSE v12 = CblasTrans;
      }
      cblas_dgemm(CblasColMajor, CblasNoTrans, v12, 2, v6, 2, 1.0, (const double *)(a1 + 8), 2, v7, v11, 0.0, __Y, __incY);
    }
  }
}

double sub_1011B7DF8(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = a2[4];
  double v4 = (void *)a2[5];
  *(void *)(a1 + 8) = *v4;
  *(void *)(a1 + 16) = v4[v2];
  *(void *)(a1 + 24) = v4[2 * v2];
  *(void *)(a1 + 32) = v4[v3];
  *(void *)(a1 + 40) = v4[v3 + v2];
  *(void *)(a1 + 48) = v4[2 * v2 + v3];
  *(void *)(a1 + 56) = v4[2 * v3];
  *(void *)(a1 + 64) = v4[2 * v3 + v2];
  double result = *(double *)&v4[2 * v3 + 2 * v2];
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1011B7E68(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_1011BA80C(a3, *a1, *(void *)(a2 + 8));
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(a2 + 8);
  if (*a1) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9 && v8 != 0)
  {
    uint64_t v11 = (const double *)a1[3];
    CBLAS_TRANSPOSE v12 = *(const double **)(a2 + 24);
    __Y = (double *)v5[3];
    if (v8 == 1) {
      cblas_dgemv(CblasColMajor, CblasNoTrans, v7, v6, 1.0, v11, v7, v12, 1, 0.0, __Y, 1);
    }
    else {
      cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, v7, v8, v6, 1.0, v11, v7, v12, v6, 0.0, __Y, *a1);
    }
  }
}

void sub_1011B7F3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = sub_1011BA80C(a3, *(void *)a1, 3);
  if (*(void *)a1) {
    cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, *(void *)a1, 3, 3, 1.0, *(const double **)(a1 + 24), *(void *)a1, (const double *)(a2 + 8), 3, 0.0, (double *)v5[3], *(void *)a1);
  }
}

double sub_1011B7FD0(double *a1)
{
  double v1 = a1[1];
  double v2 = a1[2];
  double v3 = a1[3];
  double v4 = a1[4];
  double v5 = a1[5];
  double v6 = a1[6];
  double v7 = a1[7];
  double v8 = a1[8];
  double v9 = a1[9];
  double v10 = v5 * v9 - v8 * v6;
  double v11 = v8 * v3 - v2 * v9;
  double v12 = v2 * v6 - v5 * v3;
  double v13 = v4 * v11 + v10 * v1 + v12 * v7;
  a1[1] = v10 / v13;
  a1[2] = v11 / v13;
  a1[3] = v12 / v13;
  a1[4] = (v7 * v6 - v4 * v9) / v13;
  a1[5] = (v1 * v9 - v7 * v3) / v13;
  a1[6] = (v4 * v3 - v1 * v6) / v13;
  a1[7] = (v4 * v8 - v7 * v5) / v13;
  a1[8] = (v7 * v2 - v1 * v8) / v13;
  double result = (v1 * v5 - v4 * v2) / v13;
  a1[9] = result;
  return result;
}

void sub_1011B8074(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_102316FC8;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 3, 6, 3, 1.0, (const double *)(a1 + 8), 3, (const double *)(a2 + 8), 3, 0.0, (double *)(a3 + 8), 3);
}

uint64_t sub_1011B8120(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 16) = off_1023166F8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = off_102316730;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = off_102316520;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = off_102316AA0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = off_1023168E8;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 552) = off_1023166F8;
  *(void *)(a1 + 600) = off_102316730;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 688) = off_102316520;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 736) = off_102316AA0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(void *)(a1 + 776) = off_1023168E8;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(void *)(a1 + 1072) = 0;
  *(void *)(a1 + 1080) = off_102316AA0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(void *)(a1 + 1120) = off_102316AA0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  sub_1011B8A70(a1 + 1160);
  *(_DWORD *)(a1 + 1520) = 0;
  *(unsigned char *)(a1 + 1524) = 0;
  *(void *)(a1 + 1528) = 0xBFF0000000000000;
  *(void *)(a1 + 1536) = 0xBFF0000000000000;
  sub_1011B8A70(a1 + 1544);
  sub_1011B83D4(a1 + 1904);
  return a1;
}

void sub_1011B83C0()
{
}

uint64_t sub_1011B83D4(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v8 = _Q0;
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 64) = off_1023166F8;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = off_102316730;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = off_102316520;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = off_102316AA0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = off_1023168E8;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = 0;
  sub_1011B85F8(a1 + 592, 1);
  *(void *)(a1 + 1128) = off_102316AA0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(void *)(a1 + 1168) = off_102316730;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(unsigned char *)(a1 + 1256) = 0;
  *(void *)(a1 + 1264) = off_102316AA0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(void *)(a1 + 1304) = off_102316730;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(void *)(a1 + 1392) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1408) = v8;
  *(unsigned char *)(a1 + 1424) = 0;
  return a1;
}

uint64_t sub_1011B85F8(uint64_t a1, int a2)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 8) = off_1023166F8;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = off_102316730;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = off_102316520;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = off_102316AA0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = off_1023168E8;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 528) = 0;
  if (a2) {
    sub_10159876C(a1);
  }
  return a1;
}

double sub_1011B8718(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(void *)(a1 + 16) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 24) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 32) = off_1023166F8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = off_102316730;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = off_102316520;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = off_102316AA0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = off_1023168E8;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 545) = 0u;
  *(void *)(a1 + 568) = off_1023166F8;
  *(void *)(a1 + 616) = off_102316730;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 704) = off_102316520;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 752) = off_102316AA0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 792) = off_1023168E8;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1096) = off_102316AA0;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1129) = 0u;
  *(void *)(a1 + 1152) = off_102316AA0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(void *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(unsigned char *)(a1 + 1192) = 0;
  *(void *)(a1 + 1200) = off_1023166F8;
  *(void *)(a1 + 1248) = off_102316730;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = off_102316520;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(void *)(a1 + 1376) = 0;
  *(void *)(a1 + 1384) = off_102316AA0;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(void *)(a1 + 1424) = off_1023168E8;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(void *)(a1 + 1720) = 0;
  return result;
}

__n128 sub_1011B8A70(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = 0xBFF0000000000000;
  *(void *)(a1 + 32) = off_102316AA0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = off_102316AA0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(__n128 *)(a1 + 112) = result;
  *(__n128 *)(a1 + 128) = result;
  *(__n128 *)(a1 + 144) = result;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = off_102316AA0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = off_102316AA0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 248) = off_102316730;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0xBFF0000000000000;
  *(void *)(a1 + 352) = 0xBFF0000000000000;
  return result;
}

void sub_1011B8B60(id a1)
{
  qword_102419428 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

uint64_t sub_1011B8B90(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  sub_1011B8C5C(a1 + 24, (uint64_t)a2 + 24);
  sub_1011B8C5C(a1 + 560, (uint64_t)(a2 + 35));
  *(void *)(a1 + 1096) = off_102316AA0;
  long long v5 = a2[69];
  *(_OWORD *)(a1 + 1120) = a2[70];
  *(_OWORD *)(a1 + 1104) = v5;
  uint64_t v6 = *((void *)a2 + 142);
  *(unsigned char *)(a1 + 1144) = *((unsigned char *)a2 + 1144);
  *(void *)(a1 + 1136) = v6;
  *(void *)(a1 + 1152) = off_102316AA0;
  long long v7 = *(long long *)((char *)a2 + 1160);
  *(_OWORD *)(a1 + 1176) = *(long long *)((char *)a2 + 1176);
  *(_OWORD *)(a1 + 1160) = v7;
  sub_1011B8C5C(a1 + 1192, (uint64_t)a2 + 1192);
  return a1;
}

uint64_t sub_1011B8C5C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = off_102316520;
  long long v3 = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 8) = off_1023166F8;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = off_102316730;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 144) = off_102316520;
  long long v8 = *(_OWORD *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v8;
  *(void *)(a1 + 184) = v9;
  *(void *)(a1 + 192) = off_102316AA0;
  long long v10 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v10;
  *(void *)(a1 + 232) = off_1023168E8;
  memcpy((void *)(a1 + 240), (const void *)(a2 + 240), 0x128uLL);
  return a1;
}

void sub_1011B8D9C()
{
}

void sub_1011B8DB0()
{
}

uint64_t sub_1011B8DC4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  sub_1011B8C5C(a1 + 56, (uint64_t)a2 + 56);
  sub_1011B8C5C(a1 + 592, (uint64_t)(a2 + 37));
  *(void *)(a1 + 1128) = off_102316AA0;
  long long v7 = a2[71];
  *(_OWORD *)(a1 + 1152) = a2[72];
  *(_OWORD *)(a1 + 1136) = v7;
  *(void *)(a1 + 1168) = off_102316730;
  *(_OWORD *)(a1 + 1176) = *(long long *)((char *)a2 + 1176);
  long long v8 = *(long long *)((char *)a2 + 1192);
  long long v9 = *(long long *)((char *)a2 + 1208);
  long long v10 = *(long long *)((char *)a2 + 1224);
  *(_OWORD *)(a1 + 1240) = *(long long *)((char *)a2 + 1240);
  *(_OWORD *)(a1 + 1224) = v10;
  *(_OWORD *)(a1 + 1208) = v9;
  *(_OWORD *)(a1 + 1192) = v8;
  *(unsigned char *)(a1 + 1256) = *((unsigned char *)a2 + 1256);
  *(void *)(a1 + 1264) = off_102316AA0;
  long long v11 = *(long long *)((char *)a2 + 1272);
  *(_OWORD *)(a1 + 1288) = *(long long *)((char *)a2 + 1288);
  *(_OWORD *)(a1 + 1272) = v11;
  *(void *)(a1 + 1304) = off_102316730;
  *(_OWORD *)(a1 + 1312) = a2[82];
  long long v12 = a2[83];
  long long v13 = a2[84];
  long long v14 = a2[85];
  *(_OWORD *)(a1 + 1376) = a2[86];
  *(_OWORD *)(a1 + 1360) = v14;
  *(_OWORD *)(a1 + 1344) = v13;
  *(_OWORD *)(a1 + 1328) = v12;
  long long v15 = a2[87];
  long long v16 = a2[88];
  *(unsigned char *)(a1 + 1424) = *((unsigned char *)a2 + 1424);
  *(_OWORD *)(a1 + 1408) = v16;
  *(_OWORD *)(a1 + 1392) = v15;
  return a1;
}

__n128 sub_1011B8F30(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 32) = off_102316AA0;
  long long v3 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v3;
  *(void *)(a1 + 72) = off_102316AA0;
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a1 + 168) = off_102316AA0;
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(void *)(a1 + 208) = off_102316AA0;
  long long v9 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v9;
  *(void *)(a1 + 248) = off_102316730;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  long long v10 = *(_OWORD *)(a2 + 272);
  long long v11 = *(_OWORD *)(a2 + 288);
  long long v12 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v12;
  *(_OWORD *)(a1 + 272) = v10;
  *(_OWORD *)(a1 + 288) = v11;
  __n128 result = *(__n128 *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(__n128 *)(a1 + 336) = result;
  return result;
}

void sub_1011B904C()
{
}

void *sub_1011B9060(void *a1)
{
  long long v2 = (void *)a1[6];
  if (v2) {
    operator delete(v2);
  }
  long long v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1011B90A0()
{
}

void sub_1011B90B4(double *a1, uint64_t a2)
{
  long long v3 = a1 + 1;
  sub_1011B9140((double *)(a2 + 8), a1 + 1);
  double v5 = a1[1];
  double v4 = a1[2];
  double v6 = a1[3];
  double v7 = a1[4];
  double v8 = sqrt(v4 * v4 + v5 * v5 + v6 * v6 + v7 * v7);
  if (v8 == 0.0)
  {
    *long long v3 = 0;
    a1[2] = 0.0;
    double v9 = 1.0;
    a1[3] = 0.0;
  }
  else
  {
    if (v8 == 1.0) {
      return;
    }
    a1[1] = v5 / v8;
    a1[2] = v4 / v8;
    a1[3] = v6 / v8;
    double v9 = v7 / v8;
  }
  a1[4] = v9;
}

double sub_1011B9140(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[4];
  double v4 = a1[8];
  double v5 = *a1 + v3 + v4;
  if (v5 <= 0.0)
  {
    if (v2 > v3)
    {
      BOOL v8 = v2 == v4;
      BOOL v9 = v2 < v4;
    }
    else
    {
      BOOL v8 = 1;
      BOOL v9 = 0;
    }
    if (v9 || v8)
    {
      double v10 = 1.0 - v2;
      if (v3 <= v4)
      {
        double v15 = sqrt(v10 - v3 + v4);
        double v6 = v15 + v15;
        *a2 = (a1[2] + a1[6]) / v6;
        a2[1] = (a1[7] + a1[5]) / v6;
        a2[2] = v6 * 0.25;
        double v13 = a1[3];
        double v14 = a1[1];
      }
      else
      {
        double v11 = sqrt(v10 + v3 - v4);
        double v6 = v11 + v11;
        *a2 = (a1[3] + a1[1]) / v6;
        a2[1] = v6 * 0.25;
        a2[2] = (a1[7] + a1[5]) / v6;
        double v13 = a1[2];
        double v14 = a1[6];
      }
    }
    else
    {
      double v12 = sqrt(v2 + 1.0 - v3 - v4);
      double v6 = v12 + v12;
      *a2 = v6 * 0.25;
      a2[1] = (a1[3] + a1[1]) / v6;
      a2[2] = (a1[2] + a1[6]) / v6;
      double v13 = a1[7];
      double v14 = a1[5];
    }
    double v7 = v13 - v14;
  }
  else
  {
    double v6 = 0.5 / sqrt(v5 + 1.0);
    *a2 = v6 * (a1[7] - a1[5]);
    a2[1] = v6 * (a1[2] - a1[6]);
    a2[2] = v6 * (a1[3] - a1[1]);
    double v7 = 0.25;
  }
  double result = v7 / v6;
  a2[3] = result;
  return result;
}

void sub_1011B92CC(double *a1, uint64_t a2)
{
  double v3 = a1 + 1;
  sub_1011B9140(*(double **)(a2 + 24), a1 + 1);
  double v5 = a1[1];
  double v4 = a1[2];
  double v6 = a1[3];
  double v7 = a1[4];
  double v8 = sqrt(v4 * v4 + v5 * v5 + v6 * v6 + v7 * v7);
  if (v8 == 0.0)
  {
    *double v3 = 0;
    a1[2] = 0.0;
    double v9 = 1.0;
    a1[3] = 0.0;
  }
  else
  {
    if (v8 == 1.0) {
      return;
    }
    a1[1] = v5 / v8;
    a1[2] = v4 / v8;
    a1[3] = v6 / v8;
    double v9 = v7 / v8;
  }
  a1[4] = v9;
}

void sub_1011B9358(uint64_t *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  *a1 = v4;
  a1[1] = v5;
  if (v5 == 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v4;
  }
  a1[2] = v6;
  double v7 = (void **)(a1 + 3);
  sub_100907574((uint64_t)(a1 + 3), v5 * v4);
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[4];
  if (v8 == v9)
  {
    double v10 = (unsigned char *)a2[5];
    double v11 = (unsigned char *)a2[6];
    if (v11 != v10)
    {
      double v12 = *v7;
      memmove(v12, v10, v11 - v10);
    }
  }
  else
  {
    uint64_t v13 = a2[3];
    unint64_t v14 = a1[1];
    if (v13 == 1)
    {
      if (v14)
      {
        for (unint64_t i = 0; i < v14; ++i)
        {
          if (v8)
          {
            memmove((void *)(a1[3] + 8 * a1[2] * i), (const void *)(a2[5] + 8 * a2[4] * i), 8 * v8);
            unint64_t v14 = a1[1];
          }
        }
      }
    }
    else if (v14)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = *a1;
      uint64_t v19 = 8 * a1[2];
      double v20 = (void *)a2[5];
      uint64_t v21 = 8 * v9;
      uint64_t v22 = 8 * v13;
      do
      {
        if (v18)
        {
          double v23 = (char *)*v7 + v16;
          double v24 = v20;
          uint64_t v25 = v18;
          do
          {
            *v23++ = *v24;
            double v24 = (void *)((char *)v24 + v22);
            --v25;
          }
          while (v25);
        }
        ++v17;
        v16 += v19;
        double v20 = (void *)((char *)v20 + v21);
      }
      while (v17 != v14);
    }
  }
}

double sub_1011B94AC(uint64_t a1, void *a2)
{
  *(void *)a1 = off_102316730;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v2 = a2[3];
  uint64_t v3 = a2[4];
  uint64_t v4 = (void *)a2[5];
  *(void *)(a1 + 8) = *v4;
  *(void *)(a1 + 16) = v4[v2];
  *(void *)(a1 + 24) = v4[2 * v2];
  *(void *)(a1 + 32) = v4[v3];
  *(void *)(a1 + 40) = v4[v3 + v2];
  *(void *)(a1 + 48) = v4[2 * v2 + v3];
  *(void *)(a1 + 56) = v4[2 * v3];
  *(void *)(a1 + 64) = v4[2 * v3 + v2];
  double result = *(double *)&v4[2 * v3 + 2 * v2];
  *(double *)(a1 + 72) = result;
  return result;
}

uint64_t sub_1011B9550(uint64_t *a1, void *a2)
{
  uint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    uint64_t v4 = (long long *)((char *)v4 - 1432);
    uint64_t result = sub_1011B8DC4(result - 1432, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1011B95D8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2DC3EED6866F8ELL) {
    sub_1001D7FA0();
  }
  return operator new(1432 * a2);
}

uint64_t sub_1011B9624(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1011B96E8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1011B969C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x14BD3EDDA68FE1) {
    sub_1001D7FA0();
  }
  return operator new(3160 * a2);
}

uint64_t sub_1011B96E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v10 = a3;
    uint64_t v11 = a7 - 3160;
    do
    {
      sub_1011B8B90(v11, (long long *)(v10 - 3160));
      sub_1011B8DC4(v11 + 1728, (long long *)(v10 - 1432));
      v7 -= 3160;
      v11 -= 3160;
      v10 -= 3160;
    }
    while (v10 != a5);
  }
  return a6;
}

uint64_t sub_1011B9768(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1011B982C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1011B97E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924925) {
    sub_1001D7FA0();
  }
  return operator new(1792 * a2);
}

uint64_t sub_1011B982C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v10 = a3;
    uint64_t v11 = a7 - 1792;
    do
    {
      sub_1011B8F30(v11, v10 - 1792);
      sub_1011B8DC4(v11 + 360, (long long *)(v10 - 1432));
      v7 -= 1792;
      v11 -= 1792;
      v10 -= 1792;
    }
    while (v10 != a5);
  }
  return a6;
}

uint64_t sub_1011B98AC(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 3336;
    uint64_t result = sub_1011B9980(result - 3336, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1011B9934(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13A524387AC823) {
    sub_1001D7FA0();
  }
  return operator new(3336 * a2);
}

uint64_t sub_1011B9980(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  sub_1011B8C5C(a1 + 8, a2 + 8);
  sub_1011B8C5C(a1 + 544, a2 + 544);
  *(void *)(a1 + 1080) = off_102316AA0;
  long long v4 = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1088) = v4;
  *(void *)(a1 + 1120) = off_102316AA0;
  long long v5 = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1144) = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = v5;
  sub_1011B8F30(a1 + 1160, a2 + 1160);
  long long v6 = *(_OWORD *)(a2 + 1520);
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  *(_OWORD *)(a1 + 1520) = v6;
  sub_1011B8F30(a1 + 1544, a2 + 1544);
  sub_1011B8DC4(a1 + 1904, (long long *)(a2 + 1904));
  return a1;
}

void sub_1011B9A58(uint64_t a1, const double *__B)
{
  vDSP_Stride v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(double **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 == 1)
  {
    vDSP_Length v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (v6 == v4)
      {
        vDSP_vsmulD(*(const double **)(a1 + 40), 1, __B, v3, 1, v7 * v4);
      }
      else
      {
        uint64_t v12 = 8 * v4;
        do
        {
          vDSP_vsmulD(v3, 1, __B, v3, 1, v6);
          uint64_t v3 = (double *)((char *)v3 + v12);
          --v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    vDSP_Length v9 = *(void *)(a1 + 16);
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      if (v9 == v5)
      {
        vDSP_vsmulD(*(const double **)(a1 + 40), 1, __B, v3, 1, v10 * v5);
      }
      else if (v4 == 1 || v10 == 1)
      {
        uint64_t v14 = 8 * v5;
        do
        {
          vDSP_vsmulD(v3, v4, __B, v3, 1, v9);
          uint64_t v3 = (double *)((char *)v3 + v14);
          --v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v5;
        do
        {
          uint64_t v17 = v3;
          uint64_t v18 = v3;
          vDSP_Length v19 = v9;
          do
          {
            *v18++ = *v17 * *__B;
            v17 += v4;
            --v19;
          }
          while (v19);
          ++v15;
          uint64_t v3 = (double *)((char *)v3 + v16);
        }
        while (v15 != v10);
      }
    }
  }
}

uint64_t sub_1011B9BC8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xED6866F8D962AE7BLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2DC3EED6866F8DLL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xED6866F8D962AE7BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x16E1F76B4337C6) {
    unint64_t v9 = 0x2DC3EED6866F8DLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1011B95D8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __p = v10;
  uint64_t v14 = &v10[1432 * v4];
  uint64_t v16 = &v10[1432 * v9];
  sub_1011B8DC4((uint64_t)v14, a2);
  uint64_t v15 = v14 + 1432;
  sub_1011B9550(a1, &__p);
  uint64_t v11 = a1[1];
  if (v15 != v14) {
    uint64_t v15 = &v14[(v15 - v14 - 1432) % 0x598uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_1011B9D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011B9D64(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEBE8AB1946A49E23 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x14BD3EDDA68FE0) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEBE8AB1946A49E23 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xA5E9F6ED347F0) {
    unint64_t v9 = 0x14BD3EDDA68FE0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1011B969C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __p = v10;
  uint64_t v14 = &v10[3160 * v4];
  uint64_t v16 = &v10[3160 * v9];
  sub_1011B8B90((uint64_t)v14, a2);
  sub_1011B8DC4((uint64_t)(v14 + 1728), a2 + 108);
  uint64_t v15 = v14 + 3160;
  sub_1011B9624(a1, &__p);
  uint64_t v11 = a1[1];
  if (v15 != v14) {
    uint64_t v15 = &v14[(v15 - v14 - 3160) % 0xC58uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_1011B9EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011B9F14(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 8);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x24924924924924) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 8);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x12492492492492) {
    unint64_t v9 = 0x24924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1011B97E0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __p = v10;
  uint64_t v14 = &v10[1792 * v4];
  uint64_t v16 = &v10[1792 * v9];
  sub_1011B8F30((uint64_t)v14, a2);
  sub_1011B8DC4((uint64_t)(v14 + 360), (long long *)(a2 + 360));
  uint64_t v15 = v14 + 1792;
  sub_1011B9768(a1, &__p);
  uint64_t v11 = a1[1];
  if (v15 != v14) {
    v15 += -1792
  }
         - 1792 * ((((unint64_t)(v15 - v14 - 1792) >> 8) * (unsigned __int128)0x2492492492492493uLL) >> 64);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_1011BA068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011BA0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1011BA11C(a3, v4);
      v4 += 3160;
      a3 += 3160;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1011BA11C(uint64_t a1, uint64_t a2)
{
  sub_1011A7D40(a1, (long long *)a2);
  long long v4 = *(_OWORD *)(a2 + 1744);
  long long v5 = *(_OWORD *)(a2 + 1760);
  uint64_t v6 = *(void *)(a2 + 1776);
  *(_OWORD *)(a1 + 1728) = *(_OWORD *)(a2 + 1728);
  *(void *)(a1 + 1776) = v6;
  *(_OWORD *)(a1 + 1760) = v5;
  *(_OWORD *)(a1 + 1744) = v4;
  *(unsigned char *)(a1 + 1784) = *(unsigned char *)(a2 + 1784);
  long long v7 = *(_OWORD *)(a2 + 1816);
  long long v8 = *(_OWORD *)(a2 + 1800);
  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  *(_OWORD *)(a1 + 1800) = v8;
  *(_OWORD *)(a1 + 1816) = v7;
  long long v9 = *(_OWORD *)(a2 + 1880);
  long long v10 = *(_OWORD *)(a2 + 1896);
  long long v11 = *(_OWORD *)(a2 + 1864);
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)(a2 + 1912);
  *(_OWORD *)(a1 + 1864) = v11;
  *(_OWORD *)(a1 + 1896) = v10;
  *(_OWORD *)(a1 + 1880) = v9;
  *(_OWORD *)(a1 + 1848) = *(_OWORD *)(a2 + 1848);
  long long v12 = *(_OWORD *)(a2 + 1936);
  long long v13 = *(_OWORD *)(a2 + 1952);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  *(_OWORD *)(a1 + 1952) = v13;
  *(_OWORD *)(a1 + 1936) = v12;
  long long v14 = *(_OWORD *)(a2 + 1984);
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a2 + 2000);
  *(_OWORD *)(a1 + 1984) = v14;
  memcpy((void *)(a1 + 2024), (const void *)(a2 + 2024), 0x129uLL);
  long long v15 = *(_OWORD *)(a2 + 2352);
  long long v16 = *(_OWORD *)(a2 + 2336);
  *(void *)(a1 + 2368) = *(void *)(a2 + 2368);
  *(_OWORD *)(a1 + 2336) = v16;
  *(_OWORD *)(a1 + 2352) = v15;
  long long v17 = *(_OWORD *)(a2 + 2416);
  long long v18 = *(_OWORD *)(a2 + 2432);
  long long v19 = *(_OWORD *)(a2 + 2400);
  *(_OWORD *)(a1 + 2448) = *(_OWORD *)(a2 + 2448);
  *(_OWORD *)(a1 + 2400) = v19;
  *(_OWORD *)(a1 + 2432) = v18;
  *(_OWORD *)(a1 + 2416) = v17;
  *(_OWORD *)(a1 + 2384) = *(_OWORD *)(a2 + 2384);
  long long v20 = *(_OWORD *)(a2 + 2472);
  long long v21 = *(_OWORD *)(a2 + 2488);
  *(void *)(a1 + 2504) = *(void *)(a2 + 2504);
  *(_OWORD *)(a1 + 2488) = v21;
  *(_OWORD *)(a1 + 2472) = v20;
  long long v22 = *(_OWORD *)(a2 + 2520);
  *(_OWORD *)(a1 + 2536) = *(_OWORD *)(a2 + 2536);
  *(_OWORD *)(a1 + 2520) = v22;
  memcpy((void *)(a1 + 2560), (const void *)(a2 + 2560), 0x128uLL);
  long long v23 = *(_OWORD *)(a2 + 2864);
  *(_OWORD *)(a1 + 2880) = *(_OWORD *)(a2 + 2880);
  *(_OWORD *)(a1 + 2864) = v23;
  *(_OWORD *)(a1 + 2904) = *(_OWORD *)(a2 + 2904);
  long long v24 = *(_OWORD *)(a2 + 2936);
  long long v25 = *(_OWORD *)(a2 + 2952);
  long long v26 = *(_OWORD *)(a2 + 2968);
  *(_OWORD *)(a1 + 2920) = *(_OWORD *)(a2 + 2920);
  *(_OWORD *)(a1 + 2968) = v26;
  *(_OWORD *)(a1 + 2952) = v25;
  *(_OWORD *)(a1 + 2936) = v24;
  *(unsigned char *)(a1 + 2984) = *(unsigned char *)(a2 + 2984);
  long long v27 = *(_OWORD *)(a2 + 3000);
  *(_OWORD *)(a1 + 3016) = *(_OWORD *)(a2 + 3016);
  *(_OWORD *)(a1 + 3000) = v27;
  *(_OWORD *)(a1 + 3040) = *(_OWORD *)(a2 + 3040);
  long long v28 = *(_OWORD *)(a2 + 3072);
  long long v29 = *(_OWORD *)(a2 + 3088);
  long long v30 = *(_OWORD *)(a2 + 3104);
  *(_OWORD *)(a1 + 3056) = *(_OWORD *)(a2 + 3056);
  *(_OWORD *)(a1 + 3104) = v30;
  *(_OWORD *)(a1 + 3088) = v29;
  *(_OWORD *)(a1 + 3072) = v28;
  long long v31 = *(_OWORD *)(a2 + 3120);
  long long v32 = *(_OWORD *)(a2 + 3136);
  *(unsigned char *)(a1 + 3152) = *(unsigned char *)(a2 + 3152);
  *(_OWORD *)(a1 + 3136) = v32;
  *(_OWORD *)(a1 + 3120) = v31;
  return a1;
}

uint64_t sub_1011BA318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1011AFD78(a3, v4);
      v4 += 3336;
      a3 += 3336;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1011BA378(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x13A524387AC82261 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x13A524387AC822) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x13A524387AC82261 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x9D2921C3D6411) {
    unint64_t v9 = 0x13A524387AC822;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1011B9934(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  __p = v10;
  long long v14 = &v10[3336 * v4];
  long long v16 = &v10[3336 * v9];
  sub_1011B9980((uint64_t)v14, a2);
  long long v15 = v14 + 3336;
  sub_1011B98AC(a1, &__p);
  uint64_t v11 = a1[1];
  if (v15 != v14) {
    long long v15 = &v14[(v15 - v14 - 3336) % 0xD08uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_1011BA4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011BA514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_1011B15C0(a3, v4);
      v4 += 1792;
      a3 += 1792;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1011BA574(uint64_t a1, const double *__B)
{
  vDSP_Stride v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(double **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 == 1)
  {
    vDSP_Length v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      if (v6 == v4)
      {
        vDSP_vsaddD(*(const double **)(a1 + 40), 1, __B, v3, 1, v7 * v4);
      }
      else
      {
        uint64_t v12 = 8 * v4;
        do
        {
          vDSP_vsaddD(v3, 1, __B, v3, 1, v6);
          uint64_t v3 = (double *)((char *)v3 + v12);
          --v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    vDSP_Length v9 = *(void *)(a1 + 16);
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      if (v9 == v5)
      {
        vDSP_vsaddD(*(const double **)(a1 + 40), 1, __B, v3, 1, v10 * v5);
      }
      else if (v4 == 1 || v10 == 1)
      {
        uint64_t v14 = 8 * v5;
        do
        {
          vDSP_vsaddD(v3, v4, __B, v3, 1, v9);
          uint64_t v3 = (double *)((char *)v3 + v14);
          --v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v5;
        do
        {
          long long v17 = v3;
          long long v18 = v3;
          vDSP_Length v19 = v9;
          do
          {
            *v18++ = *v17 + *__B;
            v17 += v4;
            --v19;
          }
          while (v19);
          ++v15;
          uint64_t v3 = (double *)((char *)v3 + v16);
        }
        while (v15 != v10);
      }
    }
  }
}

void sub_1011BA6E4(uint64_t a1, const double *__B)
{
}

void *sub_1011BA71C(void *result, uint64_t *a2)
{
  uint64_t v2 = result[4];
  uint64_t v3 = result[1];
  if (v2 == v3)
  {
    vDSP_Stride v4 = (uint64_t *)a2[3];
    uint64_t v5 = (uint64_t *)a2[4];
    if (v4 != v5)
    {
      vDSP_Length v6 = (void *)result[5];
      do
      {
        uint64_t v7 = *v4++;
        *v6++ = v7;
      }
      while (v4 != v5);
    }
  }
  else
  {
    uint64_t v8 = result[3];
    uint64_t v9 = a2[1];
    uint64_t v10 = a2[2];
    if (v8 == 1)
    {
      if (v9)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a2[3];
        uint64_t v13 = result[5];
        do
        {
          if (v3)
          {
            uint64_t v14 = (uint64_t *)(v12 + 8 * v11 * v10);
            uint64_t v15 = (void *)(v13 + 8 * v11 * v2);
            uint64_t result = (void *)(8 * v3);
            do
            {
              uint64_t v16 = *v14++;
              *v15++ = v16;
              --result;
            }
            while (result);
          }
          ++v11;
        }
        while (v11 != v9);
      }
    }
    else if (v9)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = *a2;
      uint64_t v20 = 8 * v2;
      long long v21 = (uint64_t *)a2[3];
      uint64_t v22 = 8 * v8;
      uint64_t v23 = 8 * v10;
      do
      {
        if (v19)
        {
          long long v24 = (void *)(result[5] + v17);
          long long v25 = v21;
          uint64_t v26 = v19;
          do
          {
            uint64_t v27 = *v25++;
            *long long v24 = v27;
            long long v24 = (void *)((char *)v24 + v22);
            --v26;
          }
          while (v26);
        }
        ++v18;
        v17 += v20;
        long long v21 = (uint64_t *)((char *)v21 + v23);
      }
      while (v18 != v9);
    }
  }
  return result;
}

uint64_t *sub_1011BA80C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3 == 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = a2;
  }
  a1[2] = v4;
  sub_1001DCFA4(a1 + 3, a3 * a2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return a1;
}

__CLPK_doublereal *sub_1011BA858(__CLPK_doublereal *result, unint64_t a2, __CLPK_doublereal **a3, __CLPK_integer **a4)
{
  if (a2)
  {
    vDSP_Length v6 = result;
    __CLPK_integer __lda = a2;
    __uint64_t n = a2;
    sub_10027BFBC((uint64_t)a4, a2);
    __CLPK_integer __info = 1;
    dgetrf_(&__n, &__n, v6, &__lda, *a4, &__info);
    __lworuint64_t k = -1;
    __CLPK_integer __info = 1;
    __woruint64_t k = 0.0;
    dgetri_(&__n, v6, &__lda, *a4, &__work, &__lwork, &__info);
    sub_100907574((uint64_t)a3, (unint64_t)__work);
    __lworuint64_t k = (int)__work;
    __CLPK_integer __info = 1;
    return (__CLPK_doublereal *)dgetri_(&__n, v6, &__lda, *a4, *a3, &__lwork, &__info);
  }
  return result;
}

void sub_1011BA934(uint64_t a1, uint64_t a2)
{
}

double sub_1011BA96C(double *a1, void *a2)
{
  double v3 = a1[1];
  double v2 = a1[2];
  double v4 = a1[3];
  double v5 = a1[4];
  double v7 = a1[5];
  double v6 = a1[6];
  double v9 = a1[7];
  double v8 = a1[8];
  double v10 = a1[9];
  uint64_t v12 = a2[4];
  uint64_t v11 = (double *)a2[5];
  uint64_t v13 = a2[3];
  uint64_t v14 = v12 + v13;
  uint64_t v15 = v12 + 2 * v13;
  uint64_t v16 = v13 + 2 * v12;
  a1[1] = v5 * v11[v13] + v3 * *v11 + v9 * v11[2 * v13];
  a1[2] = v7 * v11[v13] + v2 * *v11 + v8 * v11[2 * v13];
  a1[3] = v6 * v11[v13] + v4 * *v11 + v10 * v11[2 * v13];
  a1[4] = v5 * v11[v12 + v13] + v3 * v11[v12] + v9 * v11[v15];
  double v17 = v11[v12 + v13];
  uint64_t v18 = 2 * v12 + 2 * v13;
  a1[5] = v7 * v17 + v2 * v11[v12] + v8 * v11[v15];
  a1[6] = v6 * v11[v14] + v4 * v11[v12] + v10 * v11[v15];
  v12 *= 16;
  a1[7] = v5 * v11[v16] + v3 * *(double *)((char *)v11 + v12) + v9 * v11[v18];
  a1[8] = v7 * v11[v16] + v2 * *(double *)((char *)v11 + v12) + v8 * v11[v18];
  double result = v6 * v11[v16] + v4 * *(double *)((char *)v11 + v12) + v10 * v11[v18];
  a1[9] = result;
  return result;
}

double sub_1011BAAA4(double *a1, double *a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  double result = v2 * v2;
  double v5 = a1[2];
  double v6 = a1[3];
  double v7 = sqrt(v2 * v2 + v3 * v3 + v5 * v5 + v6 * v6);
  if (v7 == 0.0)
  {
    *a2 = 1.0;
    a2[1] = 0.0;
    a2[2] = 0.0;
    a2[3] = 0.0;
    a2[4] = 1.0;
    a2[5] = 0.0;
    a2[6] = 0.0;
    a2[7] = 0.0;
    a2[8] = 1.0;
  }
  else
  {
    if (v7 == 1.0)
    {
      double v25 = v3 * v3;
      double v26 = v3 * v2;
      double v27 = v3 * v5;
      double v28 = v3 * v6;
      double v29 = v2 * v5;
      double v30 = v2 * v6;
      double v31 = v5 * v5;
      double v32 = v5 * v6;
      double v21 = v6 * v6;
      double v33 = v26 + v26;
      *a2 = v25 - result - v31 + v21;
      a2[1] = v33 - v32 - v32;
      double v34 = v27 + v27;
      a2[2] = v30 + v34 + v30;
      a2[3] = v32 + v33 + v32;
      a2[4] = result - v25 - v31 + v21;
      a2[5] = v29 + v29 - v28 - v28;
      a2[6] = v34 - v30 - v30;
      a2[7] = v28 + v29 + v29 + v28;
      double v24 = v31 - v25 - result;
    }
    else
    {
      double v8 = v3 / v7;
      double v9 = v2 / v7;
      double v10 = v5 / v7;
      double v11 = v6 / v7;
      double v12 = v8 * v8;
      double v13 = v8 * v9;
      double v14 = v8 * v10;
      double v15 = v8 * v11;
      double v16 = v9 * v9;
      double v17 = v9 * v10;
      double v18 = v9 * v11;
      double v19 = v10 * v10;
      double v20 = v10 * v11;
      double v21 = v11 * v11;
      double v22 = v13 + v13;
      *a2 = v21 + v12 - v16 - v19;
      a2[1] = v22 - v20 - v20;
      double v23 = v14 + v14;
      a2[2] = v18 + v18 + v23;
      a2[3] = v20 + v20 + v22;
      a2[4] = v21 + v16 - v12 - v19;
      a2[5] = v17 + v17 - v15 - v15;
      a2[6] = v23 - v18 - v18;
      a2[7] = v15 + v15 + v17 + v17;
      double v24 = v19 - v12 - v16;
    }
    double result = v21 + v24;
    a2[8] = result;
  }
  return result;
}

void sub_1011BAC34(double *a1, uint64_t a2)
{
  double v3 = *a1;
  double v4 = a1[1];
  double v5 = a1[2];
  double v6 = a1[3];
  double v7 = sqrt(v4 * v4 + v3 * v3 + v5 * v5 + v6 * v6);
  if (v7 == 0.0)
  {
    a1 = (double *)&unk_101DAD3E8;
LABEL_3:
    sub_1011BADA0(a1, (double *)a2);
    return;
  }
  if (v7 == 1.0) {
    goto LABEL_3;
  }
  double v8 = v3 / v7;
  double v9 = v4 / v7;
  double v10 = v5 / v7;
  double v11 = sqrt(v9 * v9 + v8 * v8 + v10 * v10);
  if (v11 <= 1.0) {
    double v12 = v11;
  }
  else {
    double v12 = 1.0;
  }
  long double v13 = asin(v12);
  if (v13 == 0.0)
  {
    *(void *)a2 = 0x3FF0000000000000;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *(double *)v14.i64 = v6 / v7;
    v16.f64[0] = NAN;
    v16.f64[1] = NAN;
    v15.i64[0] = 1.0;
    *(void *)&double v17 = vbslq_s8((int8x16_t)vnegq_f64(v16), v15, v14).u64[0];
    double v18 = -v8;
    double v19 = -v9;
    double v20 = -v10;
    double v21 = fabs(v6 / v7);
    if (fabs(v13) >= 2.22044605e-16)
    {
      *(double *)a2 = v17 * (v18 / v12);
      *(double *)(a2 + 8) = v17 * (v19 / v12);
      *(double *)(a2 + 16) = v17 * (v20 / v12);
      long double v13 = v12;
    }
    else
    {
      *(long double *)a2 = v17 * (v18 / v13);
      *(long double *)(a2 + 8) = v17 * (v19 / v13);
      *(long double *)(a2 + 16) = v17 * (v20 / v13);
    }
    long double v22 = atan2(v13, v21);
    *(long double *)(a2 + 24) = v22 + v22;
  }
}

void sub_1011BADA0(double *a1, double *a2)
{
  double v4 = *a1;
  double v5 = sqrt(a1[1] * a1[1] + v4 * v4 + a1[2] * a1[2]);
  if (v5 <= 1.0) {
    double v6 = v5;
  }
  else {
    double v6 = 1.0;
  }
  long double v7 = asin(v6);
  if (v7 == 0.0)
  {
    *a2 = 1.0;
    a2[1] = 0.0;
    a2[2] = 0.0;
    a2[3] = 0.0;
  }
  else
  {
    v8.i64[0] = (uint64_t)a1[3];
    v10.f64[0] = NAN;
    v10.f64[1] = NAN;
    v9.i64[0] = 1.0;
    v8.i64[0] = vbslq_s8((int8x16_t)vnegq_f64(v10), v9, v8).u64[0];
    double v11 = -v4;
    if (fabs(v7) >= 2.22044605e-16)
    {
      *a2 = *(double *)v8.i64 * (v11 / v6);
      a2[1] = *(double *)v8.i64 * (-a1[1] / v6);
      a2[2] = *(double *)v8.i64 * (-a1[2] / v6);
      double v12 = fabs(a1[3]);
      long double v7 = v6;
    }
    else
    {
      *a2 = v11 / v7 * *(double *)v8.i64;
      a2[1] = *(double *)v8.i64 * (-a1[1] / v7);
      a2[2] = *(double *)v8.i64 * (-a1[2] / v7);
      double v12 = fabs(a1[3]);
    }
    long double v13 = atan2(v7, v12);
    a2[3] = v13 + v13;
  }
}

long long *sub_1011BAEC8(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  double v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  double v6 = a3;
  do
  {
    long long v7 = *v5;
    long long v8 = v5[1];
    long long v9 = v5[2];
    *(void *)(a4 + 48) = *((void *)v5 + 6);
    *(_OWORD *)(a4 + 16) = v8;
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)a4 = v7;
    *(unsigned char *)(a4 + 56) = *((unsigned char *)v5 + 56);
    long long v10 = *(long long *)((char *)v5 + 72);
    long long v11 = *(long long *)((char *)v5 + 88);
    *(void *)(a4 + 104) = *((void *)v5 + 13);
    *(_OWORD *)(a4 + 88) = v11;
    *(_OWORD *)(a4 + 72) = v10;
    long long v12 = *(long long *)((char *)v5 + 152);
    long long v13 = *(long long *)((char *)v5 + 168);
    long long v14 = *(long long *)((char *)v5 + 184);
    *(_OWORD *)(a4 + 136) = *(long long *)((char *)v5 + 136);
    *(_OWORD *)(a4 + 184) = v14;
    *(_OWORD *)(a4 + 168) = v13;
    *(_OWORD *)(a4 + 152) = v12;
    *(_OWORD *)(a4 + 120) = *(long long *)((char *)v5 + 120);
    long long v15 = v5[13];
    long long v16 = v5[14];
    *(void *)(a4 + 240) = *((void *)v5 + 30);
    *(_OWORD *)(a4 + 208) = v15;
    *(_OWORD *)(a4 + 224) = v16;
    long long v17 = v5[17];
    *(_OWORD *)(a4 + 256) = v5[16];
    *(_OWORD *)(a4 + 272) = v17;
    memcpy((void *)(a4 + 296), (char *)v5 + 296, 0x129uLL);
    long long v19 = v5[38];
    long long v18 = v5[39];
    *(void *)(a4 + 640) = *((void *)v5 + 80);
    *(_OWORD *)(a4 + 608) = v19;
    *(_OWORD *)(a4 + 624) = v18;
    long long v21 = v5[42];
    long long v20 = v5[43];
    long long v22 = v5[45];
    *(_OWORD *)(a4 + 704) = v5[44];
    *(_OWORD *)(a4 + 720) = v22;
    *(_OWORD *)(a4 + 672) = v21;
    *(_OWORD *)(a4 + 688) = v20;
    *(_OWORD *)(a4 + 656) = v5[41];
    long long v23 = *(long long *)((char *)v5 + 744);
    long long v24 = *(long long *)((char *)v5 + 760);
    *(void *)(a4 + 776) = *((void *)v5 + 97);
    *(_OWORD *)(a4 + 744) = v23;
    *(_OWORD *)(a4 + 760) = v24;
    long long v25 = *(long long *)((char *)v5 + 808);
    *(_OWORD *)(a4 + 792) = *(long long *)((char *)v5 + 792);
    *(_OWORD *)(a4 + 808) = v25;
    memcpy((void *)(a4 + 832), v5 + 52, 0x128uLL);
    long long v26 = v5[71];
    *(_OWORD *)(a4 + 1152) = v5[72];
    *(_OWORD *)(a4 + 1136) = v26;
    *(_OWORD *)(a4 + 1176) = *(long long *)((char *)v5 + 1176);
    long long v27 = *(long long *)((char *)v5 + 1240);
    long long v29 = *(long long *)((char *)v5 + 1192);
    long long v28 = *(long long *)((char *)v5 + 1208);
    *(_OWORD *)(a4 + 1224) = *(long long *)((char *)v5 + 1224);
    *(_OWORD *)(a4 + 1240) = v27;
    *(_OWORD *)(a4 + 1192) = v29;
    *(_OWORD *)(a4 + 1208) = v28;
    *(unsigned char *)(a4 + 1256) = *((unsigned char *)v5 + 1256);
    long long v30 = *(long long *)((char *)v5 + 1288);
    *(_OWORD *)(a4 + 1272) = *(long long *)((char *)v5 + 1272);
    *(_OWORD *)(a4 + 1288) = v30;
    *(_OWORD *)(a4 + 1312) = v5[82];
    long long v31 = v5[84];
    long long v32 = v5[85];
    long long v33 = v5[86];
    *(_OWORD *)(a4 + 1328) = v5[83];
    *(_OWORD *)(a4 + 1376) = v33;
    *(_OWORD *)(a4 + 1360) = v32;
    *(_OWORD *)(a4 + 1344) = v31;
    long long v34 = v5[87];
    long long v35 = v5[88];
    *(unsigned char *)(a4 + 1424) = *((unsigned char *)v5 + 1424);
    *(_OWORD *)(a4 + 1408) = v35;
    *(_OWORD *)(a4 + 1392) = v34;
    a4 += 1432;
    double v5 = (long long *)((char *)v5 + 1432);
  }
  while (v5 != v6);
  return v6;
}

void sub_1011BB098(const double *__A, vDSP_Stride __IA, uint64_t a3, const double *__B, vDSP_Stride __IB, uint64_t a6, double *__C, uint64_t a8, vDSP_Length a9, uint64_t a10)
{
  uint64_t v10 = a10;
  if (a9) {
    BOOL v11 = a10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    long long v12 = __C;
    long long v13 = __B;
    long long v14 = __A;
    if (a9 == a8 && a9 == a3 && a9 == a6)
    {
      vDSP_vaddD(__A, 1, __B, 1, __C, 1, a10 * a9);
    }
    else
    {
      BOOL v19 = __IB == 1 && __IA == 1;
      if (v19 || a10 == 1)
      {
        uint64_t v26 = 8 * a8;
        uint64_t v27 = 8 * a6;
        uint64_t v28 = 8 * a3;
        do
        {
          vDSP_vaddD(v14, __IA, v13, __IB, v12, 1, a9);
          long long v12 = (double *)((char *)v12 + v26);
          long long v13 = (const double *)((char *)v13 + v27);
          long long v14 = (const double *)((char *)v14 + v28);
          --v10;
        }
        while (v10);
      }
      else if (a10 == __IA && a10 == __IB)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 8 * a10;
        do
        {
          long long v22 = (double *)v14;
          long long v23 = (double *)v13;
          long long v24 = v12;
          uint64_t v25 = a10;
          do
          {
            *long long v24 = *v22 + *v23;
            v24 += a8;
            v23 += a6;
            v22 += a3;
            --v25;
          }
          while (v25);
          ++v20;
          ++v12;
          long long v13 = (const double *)((char *)v13 + v21);
          long long v14 = (const double *)((char *)v14 + v21);
        }
        while (v20 != a9);
      }
      else
      {
        uint64_t v29 = 0;
        do
        {
          long long v30 = (double *)v14;
          long long v31 = (double *)v13;
          long long v32 = v12;
          vDSP_Length v33 = a9;
          do
          {
            *v32++ = *v30 + *v31;
            v31 += __IB;
            v30 += __IA;
            --v33;
          }
          while (v33);
          ++v29;
          v12 += a8;
          v13 += a6;
          v14 += a3;
        }
        while (v29 != a10);
      }
    }
  }
}

void sub_1011BB260(void *a1, uint64_t a2)
{
  double v3 = (double *)a1[5];
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v7 = *(void *)(a2 + 16);
  double v6 = *(const double **)(a2 + 24);
  if (v5 == 1) {
    sub_1011BB098(v3, 1, v4, v6, 1, v7, v3, v4, a1[1], a1[2]);
  }
  else {
    sub_1011BB098(v3, v4, v5, v6, v7, 1, v3, v5, a1[2], a1[1]);
  }
}

double sub_1011BB2D0()
{
  sub_100134750(qword_102485E00, "[");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485E00, (void *)&_mh_execute_header);
  sub_100134750(qword_102485E18, "]");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485E18, (void *)&_mh_execute_header);
  sub_100134750(qword_102485E30, " ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485E30, (void *)&_mh_execute_header);
  sub_100134750(qword_102485E48, ";");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485E48, (void *)&_mh_execute_header);
  sub_100134750(qword_102485E60, ", ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485E60, (void *)&_mh_execute_header);
  qword_102485EA8 = 0x4008000000000000;
  qword_102485EA0 = 0x400374B791E38EA2;

  return sub_101171D90((uint64_t)dbl_102485E78);
}

uint64_t sub_1011BB410(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  long long v17 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1011A3868((void *)a1, &v16, a3);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)a1 = off_1023176A8;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v15 = _Q1;
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 544) = 0xBFF0000000000000;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(unsigned char *)(a1 + 568) = 1;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(unsigned char *)(a1 + 600) = 0;
  sub_101171D90(a1 + 608);
  *(_DWORD *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 652) = 0;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 680) = 0xBFF0000000000000;
  *(void *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = v15;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 760) = 0;
  *(void *)(a1 + 768) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(unsigned char *)(a1 + 784) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(unsigned char *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_WORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(unsigned char *)(a1 + 600) = sub_100119A30();
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317770);
  }
  uint64_t v10 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *(unsigned __int8 *)(a1 + 600);
    *(_DWORD *)long long buf = 67240192;
    int v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,skipRMSECheckForScalingEntryThresholds,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317770);
    }
    int v13 = *(unsigned __int8 *)(a1 + 600);
    int v18 = 67240192;
    int v19 = v13;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLScoredMapMatcher::CLScoredMapMatcher(CLMapGeometryPtr, const std::string &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return a1;
}

void sub_1011BB718(_Unwind_Exception *a1)
{
  double v3 = *(std::__shared_weak_count **)(v1 + 560);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (*(char *)(v1 + 271) < 0) {
    operator delete(*(void **)(v1 + 248));
  }
  sub_1011A38FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011BB764(uint64_t a1)
{
  *(void *)a1 = off_1023176A8;
  double v2 = *(std::__shared_weak_count **)(a1 + 560);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }

  return sub_1011A38FC(a1);
}

void sub_1011BB7D4(uint64_t a1)
{
  sub_1011BB764(a1);

  operator delete();
}

void sub_1011BB80C(uint64_t a1)
{
  *(unsigned char *)(a1 + 568) = 1;
  *(_DWORD *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 652) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v7 = _Q0;
  *(void *)long long v8 = 0xBFF0000000000000;
  v10[15] = 0;
  LODWORD(v10[16]) = 0;
  memset(&v10[10], 0, 34);
  memset(&v10[17], 0, 75);
  memset(&v10[27], 0, 56);
  memset(&v8[8], 0, 80);
  memset(v10, 0, 78);
  long long v9 = 0u;
  v10[34] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v8[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v8[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v8[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v8[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v8[80]);
  memcpy((void *)(a1 + 272), v10, 0x118uLL);
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 736) = v7;
  *(_WORD *)(a1 + 752) = 256;
  *(_DWORD *)(a1 + 648) = 0;
  *(unsigned char *)(a1 + 652) = 0;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 780) = 0;
  *(unsigned char *)(a1 + 784) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(unsigned char *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 840) = 0;
  if (SHIBYTE(v9) < 0) {
    operator delete(*(void **)&v8[80]);
  }
}

void sub_1011BB978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011BB994(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 229);
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(unsigned __int8 *)(result + 816) != v2 || *(double *)(result + 832) == 0.0)
  {
    *(void *)(result + 832) = v3;
    *(unsigned char *)(result + 816) = v2;
  }
  *(void *)(result + 824) = v3;
  return result;
}

uint64_t sub_1011BB9C4(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 840))
  {
    *a2 = 0x4066800000000000;
    return 1;
  }
  if (*(unsigned char *)(a1 + 776))
  {
    if (!*(unsigned char *)(a1 + 808) || (double v5 = *(double *)(a1 + 792), v5 > 15.0) && v5 > *(double *)(a1 + 800) * 0.5)
    {
      *a2 = 0x4066800000000000;
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317770);
        }
        double v6 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          int v7 = *(unsigned __int8 *)(a1 + 776);
          uint64_t v8 = *(void *)(a1 + 792);
          uint64_t v9 = *(void *)(a1 + 800);
          uint64_t v10 = *a2;
          *(_DWORD *)long long buf = 67240960;
          int v13 = v7;
          __int16 v14 = 2050;
          uint64_t v15 = v8;
          __int16 v16 = 2050;
          uint64_t v17 = v9;
          __int16 v18 = 2050;
          uint64_t v19 = v10;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,holdCourseEngaged,%{public}d,fabsCourseDiffWithPriorSnap,%{public}.1lf,rawCourseUnc,%{public}.1lf,newCourseUnc,%{public}.1f", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317770);
          }
          int v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::shouldOverrideCourseUnc(double &)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      return 1;
    }
  }
  return 0;
}

void sub_1011BBC34(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 104);
  if (v3 < 0.0) {
    goto LABEL_2;
  }
  double v4 = *(double *)(a1 + 224);
  if (v4 < 0.0 || vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 128)) >= 2.2) {
    goto LABEL_2;
  }
  double v5 = fmod(v3 - v4, 360.0);
  if (v5 < 0.0) {
    double v5 = v5 + 360.0;
  }
  if (v5 > 180.0) {
    double v5 = v5 + -360.0;
  }
  double v6 = fabs(v5);
  if (*(unsigned char *)(a1 + 752))
  {
    if (v6 >= 8.0) {
      return;
    }
LABEL_2:
    *(unsigned char *)(a1 + 752) = 0;
    return;
  }
  if (v6 > 14.0) {
    *(unsigned char *)(a1 + 752) = 1;
  }
}

double sub_1011BBD04(long double a1)
{
  double v1 = fmod(a1, 360.0);
  if (v1 < 0.0) {
    double v1 = v1 + 360.0;
  }
  if (v1 > 180.0) {
    double v1 = v1 + -360.0;
  }
  return fabs(v1);
}

uint64_t sub_1011BBD5C(uint64_t result, double a2, double a3)
{
  *(double *)(result + 848) = a2;
  *(double *)(result + 856) = a3;
  return result;
}

void sub_1011BBD68(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 8);
  double v5 = *(double *)(a1 + 128);
  double v6 = (double *)(a1 + 608);
  double v7 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 176), *(double *)(a1 + 184), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
  *(unsigned char *)(a1 + 840) = 0;
  double v8 = *(double *)(a2 + 192);
  if (v8 > 179.0) {
    *(unsigned char *)(a1 + 840) = 1;
  }
  double v9 = *(double *)(a2 + 104);
  if (v8 > 0.0 || v9 < 0.0)
  {
    double v10 = *(double *)(a2 + 192);
  }
  else
  {
    double v10 = sub_1004BF70C(*(double *)(a2 + 96));
    *(double *)(a2 + 192) = v10;
    double v9 = *(double *)(a2 + 104);
  }
  double v11 = vabdd_f64(v4, v5);
  if (v9 < 0.0 && v10 > 0.0 && *(double *)(a2 + 96) < 0.001 && v11 < 2.2)
  {
    double v12 = *(double *)(a1 + 224);
    if (v12 >= 0.0)
    {
      double v13 = *(double *)(a1 + 312);
      if (v13 > 0.0 && v13 < 90.0)
      {
        *(double *)(a2 + 104) = v12;
        double v9 = v12;
      }
    }
  }
  if (v9 >= 0.0 && *(unsigned char *)(a1 + 840))
  {
    if (*(unsigned char *)(a1 + 652))
    {
      double v9 = *(double *)(a1 + 424);
      *(double *)(a2 + 104) = v9;
      double v10 = 29.9;
    }
    else if (v11 >= 2.2 {
           || (double v9 = *(double *)(a1 + 224), v9 < 0.0)
    }
           || (double v14 = *(double *)(a1 + 312), v14 <= 0.0)
           || v14 >= 90.0)
    {
      *(void *)(a2 + 104) = 0xBFF0000000000000;
      double v10 = -1.0;
      double v9 = -1.0;
    }
    else
    {
      *(double *)(a2 + 104) = v9;
      if (v14 >= 29.9) {
        double v10 = v14;
      }
      else {
        double v10 = 29.9;
      }
    }
    *(double *)(a2 + 192) = v10;
    *(double *)(a1 + 848) = v9;
    *(double *)(a1 + 856) = v10;
  }
  double v15 = *(double *)(a2 + 96);
  double v16 = 12.0;
  if (v10 < 12.0 && (v10 > 0.0 ? (_NF = v15 < 2.0) : (_NF = 0), _NF)
    || ((double v16 = 6.5, v10 > 0.0) ? (v18 = v10 < 6.5) : (v18 = 0), v18))
  {
    *(double *)(a2 + 192) = v16;
    double v10 = v16;
  }
  double v19 = v4 - v5;
  if (v9 >= 0.0 && v10 > 0.0 && v10 < 30.0)
  {
    double v22 = *(double *)(a1 + 224);
    if (v22 >= 0.0 && v19 != 0.0)
    {
      double v23 = fmod(v9 - v22, 360.0);
      if (v23 < 0.0) {
        double v23 = v23 + 360.0;
      }
      if (v23 > 180.0) {
        double v23 = v23 + -360.0;
      }
      if (fabs(v23 / v19) > 45.0)
      {
        *(void *)(a2 + 192) = 0x403E000000000000;
        double v10 = 30.0;
      }
    }
  }
  float v20 = v7;
  if (!*(unsigned char *)(a1 + 776))
  {
    if (*(unsigned char *)(a1 + 384))
    {
      if (v19 != 0.0 && v11 < 1.4 && v9 >= 0.0 && v15 < 5.0 && v20 < 5.0)
      {
        double v24 = *(double *)(a1 + 224);
        if (v24 >= 0.0)
        {
          double v25 = *(double *)(a1 + 312);
          if (v25 > 0.0 && v25 <= 29.9)
          {
            double v26 = fmod(v9 - v24, 360.0);
            if (v26 < 0.0) {
              double v26 = v26 + 360.0;
            }
            if (v26 > 180.0) {
              double v26 = v26 + -360.0;
            }
            double v27 = fabs(v26 / v19);
            if (v27 > 135.0)
            {
              if (*(unsigned char *)(a1 + 96))
              {
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_102317770);
                }
                uint64_t v28 = qword_102419438;
                if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v29 = *(void *)(a2 + 8);
                  uint64_t v30 = *(void *)(a1 + 224);
                  uint64_t v32 = *(void *)(a2 + 96);
                  uint64_t v31 = *(void *)(a2 + 104);
                  *(_DWORD *)long long buf = 134350080;
                  *(void *)&uint8_t buf[4] = v29;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(void *)&buf[14] = v31;
                  *(_WORD *)&buf[22] = 2050;
                  *(void *)&unsigned char buf[24] = v30;
                  __int16 v122 = 2050;
                  uint64_t v123 = v32;
                  __int16 v124 = 2050;
                  double v125 = v27;
                  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,high course rate,course,%{public}.1lf,priorCourse,%{public}.1lf,speed,%{public}.1lf,fabsCourseRate,%{public}.1lf", buf, 0x34u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_102317770);
                  }
                  uint64_t v106 = *(void *)(a2 + 8);
                  uint64_t v107 = *(void *)(a1 + 224);
                  uint64_t v109 = *(void *)(a2 + 96);
                  uint64_t v108 = *(void *)(a2 + 104);
                  *(_DWORD *)long long v112 = 134350080;
                  *(void *)&v112[4] = v106;
                  *(_WORD *)&v112[12] = 2050;
                  *(void *)&v112[14] = v108;
                  *(_WORD *)&v112[22] = 2050;
                  *(void *)&v112[24] = v107;
                  __int16 v113 = 2050;
                  uint64_t v114 = v109;
                  __int16 v115 = 2050;
                  double v116 = v27;
                  uint64_t v110 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v110);
                  if (v110 != buf) {
                    free(v110);
                  }
                }
              }
              double v9 = *(double *)(a1 + 224);
              *(double *)(a2 + 104) = v9;
              double v10 = *(double *)(a1 + 312);
              *(double *)(a2 + 192) = v10;
              *(double *)(a1 + 848) = v9;
              *(double *)(a1 + 856) = v10;
            }
          }
        }
      }
    }
  }
  if (v9 >= 0.0)
  {
    double v21 = *(double *)(a2 + 96);
    if (v10 <= 0.0 || v10 >= 20.0 || v21 <= 5.0)
    {
      double v33 = *(double *)(a1 + 736);
      if (v33 >= 0.0)
      {
        double v34 = fmod(v9 - v33, 360.0);
        if (v34 < 0.0) {
          double v34 = v34 + 360.0;
        }
        if (v34 > 180.0) {
          double v34 = v34 + -360.0;
        }
        if (fabs(v34) < 30.0 && v21 < 5.0)
        {
          double v39 = *(double *)(a1 + 744);
          if (v39 < v10) {
            *(double *)(a2 + 192) = v39;
          }
        }
        else
        {
          __asm { FMOV            V0.2D, #-1.0 }
          *(_OWORD *)(a1 + 736) = _Q0;
        }
      }
    }
    else
    {
      *(double *)(a1 + 736) = v9;
      *(double *)(a1 + 744) = v10;
    }
  }
  sub_1011BBC34(a1, a2);
  if (!*(unsigned char *)(a1 + 652) || v11 > 4.9)
  {
    *(_WORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 780) = 0;
    *(unsigned char *)(a1 + 784) = 0;
    *(void *)(a1 + 800) = 0;
    *(void *)(a1 + 792) = 0;
    *(unsigned char *)(a1 + 808) = 0;
    return;
  }
  float v41 = sub_1011BD0C4(v40, *(_DWORD *)(a1 + 780), *(unsigned __int8 *)(a1 + 777));
  if (v41 >= 11.1000001) {
    float v42 = v41;
  }
  else {
    float v42 = 11.1;
  }
  *(void *)long long buf = 0;
  uint64_t v111 = 0;
  *(void *)long long v112 = 0;
  sub_1000F17A8(v6, (double *)v112, (double *)buf, (double *)&v111, *(double *)(a1 + 408), *(double *)(a1 + 416), *(double *)(a2 + 72), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 72));
  double v43 = *(double *)(a1 + 424);
  float v44 = *(double *)v112 * *(double *)v112 + *(double *)buf * *(double *)buf;
  float v45 = sqrtf(v44);
  float v46 = *(double *)buf;
  float v47 = *(double *)v112;
  float v48 = atan2f(v46, v47);
  float v49 = v43 * -0.0174532925;
  float v50 = sinf(v48 + v49) * v45;
  float v51 = fabsf(v50);
  float v52 = (float)(v42 * 0.5) + 7.5;
  if (*(unsigned char *)(a1 + 777) && v51 < v52) {
    goto LABEL_106;
  }
  int v53 = *(_DWORD *)(a1 + 760);
  if (v53 == 1)
  {
    BOOL v54 = v50 <= (float)-v52;
    float v52 = 7.5;
  }
  else
  {
    if (v53 != 2) {
      goto LABEL_105;
    }
    BOOL v54 = v50 <= -7.5;
  }
  if (!v54 && v50 < v52) {
    goto LABEL_106;
  }
LABEL_105:
  if (v51 < (float)((float)(v42 * 0.5) * 0.5))
  {
LABEL_106:
    int v56 = 1;
    goto LABEL_107;
  }
  int v56 = 0;
LABEL_107:
  double v57 = *(double *)(a2 + 104);
  double v58 = 0.0;
  if (v57 >= 0.0)
  {
    double v59 = fmod(v57 - v43, 360.0);
    if (v59 < 0.0) {
      double v59 = v59 + 360.0;
    }
    if (v59 > 180.0) {
      double v59 = v59 + -360.0;
    }
    double v58 = fabs(v59);
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317770);
    }
    int64x2_t v60 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v61 = *(void *)(a2 + 192);
      uint64_t v62 = *(void *)(a1 + 424);
      uint64_t v64 = *(void *)(a2 + 96);
      uint64_t v63 = *(void *)(a2 + 104);
      *(_DWORD *)long long buf = 134350592;
      *(void *)&uint8_t buf[4] = v63;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v61;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v62;
      __int16 v122 = 2050;
      uint64_t v123 = v64;
      __int16 v124 = 2050;
      double v125 = v50;
      __int16 v126 = 1026;
      int v127 = v56;
      __int16 v128 = 2050;
      double v129 = v42;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,course,%{public}.1lf,courseUnc,%{public}.1lf,lastSnapCourse,%{public}.1lf,speed,%{public}.1lf,acrossTrack,%{public}.1f,onRoad,%{public}d,widthUsed,%{public}.1lf", buf, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317770);
      }
      uint64_t v91 = *(void *)(a2 + 192);
      uint64_t v92 = *(void *)(a1 + 424);
      uint64_t v94 = *(void *)(a2 + 96);
      uint64_t v93 = *(void *)(a2 + 104);
      *(_DWORD *)long long v112 = 134350592;
      *(void *)&v112[4] = v93;
      *(_WORD *)&v112[12] = 2050;
      *(void *)&v112[14] = v91;
      *(_WORD *)&v112[22] = 2050;
      *(void *)&v112[24] = v92;
      __int16 v113 = 2050;
      uint64_t v114 = v94;
      __int16 v115 = 2050;
      double v116 = v50;
      __int16 v117 = 1026;
      int v118 = v56;
      __int16 v119 = 2050;
      double v120 = v42;
      uint64_t v95 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v95);
      if (v95 != buf) {
        free(v95);
      }
    }
  }
  if (*(unsigned char *)(a2 + 228))
  {
    int v65 = 1;
  }
  else
  {
    double v66 = *(double *)(a2 + 96);
    int v65 = v66 >= 0.0 && v66 < 0.35;
  }
  int v67 = sub_10073DD54();
  double v68 = *(double *)(a2 + 96);
  if (v67 && *(double *)(a2 + 184) > 0.0 && v68 >= 0.0 && v65 && v68 < 0.002)
  {
    BOOL v70 = v11 >= 1.1 || *(unsigned char *)(a2 + 228) != 0;
    int v65 = v20 <= 0.7 || v70;
  }
  if (v11 >= 3.0) {
    int v71 = (v58 > 135.0) & ~v65;
  }
  else {
    int v71 = 0;
  }
  if (v58 > 30.0) {
    int v72 = v56;
  }
  else {
    int v72 = 0;
  }
  if (v72 != 1
    || (v71 & 1) != 0
    || *(unsigned char *)(a2 + 229)
    || *(unsigned char *)(a1 + 816)
    || (double v73 = *(double *)(a1 + 824) - *(double *)(a1 + 832), v73 < 0.0)
    || v73 >= 30.0)
  {
    if (*(unsigned char *)(a1 + 776))
    {
      if (v68 > 3.0 || ((v56 | v65) ^ 1 | v71) == 1)
      {
        *(_WORD *)(a1 + 776) = 0;
        *(_DWORD *)(a1 + 780) = 0;
        *(unsigned char *)(a1 + 784) = 0;
        *(void *)(a1 + 800) = 0;
        *(void *)(a1 + 792) = 0;
        int v76 = 1;
        *(unsigned char *)(a1 + 808) = 0;
        goto LABEL_166;
      }
    }
    else
    {
      int v76 = 1;
      if (!v56 || v68 >= 1.5 && v20 >= 1.5)
      {
LABEL_166:
        if (*(double *)(a2 + 192) >= 30.0) {
          int v77 = v65;
        }
        else {
          int v77 = 0;
        }
        if (v77 == 1)
        {
          *(unsigned char *)(a1 + 776) = 1;
        }
        else
        {
          if (!*(unsigned char *)(a2 + 228)) {
            int v76 = 0;
          }
          if (v76 == 1)
          {
            double v78 = *(double *)(a2 + 96);
            if (v78 < 0.0 || v78 < 0.35)
            {
              if (*(unsigned char *)(a1 + 384))
              {
                if (v11 < 2.2 && v58 > 30.0)
                {
                  *(unsigned char *)(a1 + 776) = 1;
                  if (*(unsigned char *)(a1 + 96))
                  {
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_102317770);
                    }
                    long long v79 = qword_102419438;
                    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)long long buf = 134349056;
                      *(double *)&uint8_t buf[4] = v58;
                      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,large course diff when static,fabsCourseDiffWithPriorSnap,%{public}.1lf", buf, 0xCu);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419430 != -1) {
                        dispatch_once(&qword_102419430, &stru_102317770);
                      }
                      *(_DWORD *)long long v112 = 134349056;
                      *(double *)&v112[4] = v58;
                      uint64_t v104 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v104);
                      if (v104 != buf) {
                        free(v104);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (sub_10073DD54())
        {
          if (!*(unsigned char *)(a1 + 776) && v11 < 1.1 && *(double *)(a2 + 184) > 0.0)
          {
            double v80 = *(double *)(a2 + 96);
            if (v80 >= 0.0 && v80 < 5.0 && v20 < 5.0)
            {
              char v81 = *(double *)(a2 + 104) < 0.0 ? 1 : v71;
              if ((v81 & 1) == 0 && v58 >= 135.0)
              {
                if (*(unsigned char *)(a1 + 96))
                {
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_102317770);
                  }
                  long long v82 = qword_102419438;
                  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)long long buf = 134349056;
                    *(double *)&uint8_t buf[4] = v58;
                    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,large course diff at slow speed within one second,fabsCourseDiffWithPriorSnap,%{public}.1lf", buf, 0xCu);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_102317770);
                    }
                    *(_DWORD *)long long v112 = 134349056;
                    *(double *)&v112[4] = v58;
                    long long v105 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v105);
                    if (v105 != buf) {
                      free(v105);
                    }
                  }
                }
                uint64_t v83 = *(void *)(a1 + 224);
                *(void *)(a2 + 104) = v83;
                uint64_t v84 = *(void *)(a1 + 312);
                *(void *)(a2 + 192) = v84;
                *(void *)(a1 + 848) = v83;
                *(void *)(a1 + 856) = v84;
              }
            }
          }
        }
        goto LABEL_204;
      }
      *(unsigned char *)(a1 + 776) = 1;
    }
    int v76 = 0;
    goto LABEL_166;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317770);
    }
    long long v74 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      double v75 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v75;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLMM,detected course swing after a recent dismount,intervalSinceDismount,%{public}.1lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317770);
      }
      double v102 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
      *(_DWORD *)long long v112 = 134349056;
      *(double *)&v112[4] = v102;
      long long v103 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v103);
      if (v103 != buf) {
        free(v103);
      }
    }
  }
  *(unsigned char *)(a1 + 776) = 1;
LABEL_204:
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317770);
    }
    double v85 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v86 = *(unsigned __int8 *)(a1 + 776);
      uint64_t v87 = *(void *)(a2 + 96);
      *(_DWORD *)long long buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v86;
      *(_WORD *)&buf[8] = 2050;
      *(void *)&buf[10] = v87;
      *(_WORD *)&buf[18] = 2050;
      *(double *)&buf[20] = v20;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,engaged,%{public}d,speed,%{public}.1lf,distance,%{public}.1lf", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317770);
      }
      int v96 = *(unsigned __int8 *)(a1 + 776);
      uint64_t v97 = *(void *)(a2 + 96);
      *(_DWORD *)long long v112 = 67240704;
      *(_DWORD *)&v112[4] = v96;
      *(_WORD *)&v112[8] = 2050;
      *(void *)&v112[10] = v97;
      *(_WORD *)&v112[18] = 2050;
      *(double *)&v112[20] = v20;
      uint64_t v98 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v98);
      if (v98 != buf) {
        free(v98);
      }
    }
  }
  if (*(unsigned char *)(a1 + 776))
  {
    *(unsigned char *)(a1 + 808) = *(double *)(a2 + 104) >= 0.0;
    *(double *)(a1 + 792) = v58;
    *(void *)(a1 + 800) = *(void *)(a2 + 192);
    *(void *)(a2 + 104) = *(void *)(a1 + 424);
    *(void *)(a2 + 192) = 0x403DE66666666666;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317770);
      }
      double v88 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v89 = *(void *)(a2 + 104);
        uint64_t v90 = *(void *)(a2 + 192);
        *(_DWORD *)long long buf = 134349568;
        *(void *)&uint8_t buf[4] = v89;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v90;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&unsigned char buf[24] = v58;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse,using prior snap,course,%{public}.1lf,courseUnc,%{public}.1lf,fabsCourseDiff,%{public}.1lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317770);
        }
        uint64_t v99 = *(void *)(a2 + 104);
        uint64_t v100 = *(void *)(a2 + 192);
        *(_DWORD *)long long v112 = 134349568;
        *(void *)&v112[4] = v99;
        *(_WORD *)&v112[12] = 2050;
        *(void *)&v112[14] = v100;
        *(_WORD *)&v112[22] = 2050;
        *(double *)&v112[24] = v58;
        long long v101 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)", "%s\n", v101);
        if (v101 != buf) {
          free(v101);
        }
      }
    }
  }
}

float sub_1011BD0C4(uint64_t a1, unsigned int a2, int a3)
{
  float result = 1.0;
  if ((a2 & 0xFFFFFFFE) != 8)
  {
    float result = 7.4;
    if (a3) {
      float result = 5.55;
    }
    if (a2 <= 7)
    {
      double v4 = (float *)&unk_101DADCA0;
      if (a3) {
        double v4 = (float *)&unk_101DADC80;
      }
      return v4[a2];
    }
  }
  return result;
}

void sub_1011BD114(uint64_t a1, uint64_t a2)
{
}

void sub_1011BD124(uint64_t a1, double *a2, double *a3, double *a4, double *a5, float *a6, double *a7, double *a8, char a9)
{
  double v17 = *a3;
  double v18 = *a2;
  if (*a3 != 0.0 || v18 != 0.0)
  {
    if (a9) {
      float v20 = 80.0;
    }
    else {
      float v20 = sub_1011BD0C4(a1, *(_DWORD *)(*(void *)a6 + 20), *(unsigned __int8 *)(*(void *)a6 + 16));
    }
    double v21 = a6[6];
    float v22 = v17 * v17 + v18 * v18;
    float v23 = sqrtf(v22);
    float v24 = v18;
    float v25 = v17;
    float v26 = atan2f(v24, v25);
    float v27 = v21 * 0.0174532925;
    __float2 v28 = __sincosf_stret(v26 - v27);
    float v29 = v23 * v28.__cosval;
    float v30 = v23 * v28.__sinval;
    if (!*(unsigned char *)(a1 + 753)) {
      goto LABEL_25;
    }
    float v31 = v20 * 0.5;
    float v32 = fabsf(v30);
    if (*(unsigned char *)(*(void *)a6 + 16))
    {
      if (v32 < v31) {
        goto LABEL_10;
      }
      float v37 = -v31;
      if (v30 < 0.0) {
        float v37 = v20 * 0.5;
      }
      goto LABEL_23;
    }
    double v35 = *(double *)(a1 + 768);
    if (v35 == 0.0 || vabdd_f64(a7[1], v35) > 120.0)
    {
      int v36 = sub_1012AD3B8(a7[7], a7[8]);
      *(_DWORD *)(a1 + 760) = v36;
      *(double *)(a1 + 768) = a7[1];
      if (v36) {
        goto LABEL_17;
      }
    }
    else
    {
      int v36 = *(_DWORD *)(a1 + 760);
      if (v36)
      {
LABEL_17:
        if (v36 != 2 || v30 <= 0.0)
        {
          if (v30 >= 0.0) {
            goto LABEL_24;
          }
          if (v32 >= v31)
          {
            *a8 = v31;
            float v30 = v31 + v30;
            goto LABEL_24;
          }
          double v34 = v32;
          goto LABEL_13;
        }
        if (v30 >= v31)
        {
          *a8 = (float)-v31;
          float v30 = v30 - v31;
          goto LABEL_24;
        }
        float v33 = -v32;
LABEL_12:
        double v34 = v33;
LABEL_13:
        *a8 = v34;
        float v30 = 0.0;
LABEL_24:
        float v38 = sqrtf((float)(v29 * v29) + (float)(v30 * v30));
        float v39 = atan2f(v30, v29);
        __float2 v40 = __sincosf_stret(v39 + v27);
        *a3 = (float)(v38 * v40.__cosval);
        *a2 = (float)(v38 * v40.__sinval);
LABEL_25:
        *a4 = v29;
        double v19 = v30;
        goto LABEL_26;
      }
    }
    float v37 = v20 * 0.25;
    if (v32 < (float)(v20 * 0.25))
    {
LABEL_10:
      float v33 = -v32;
      if (v30 < 0.0) {
        float v33 = v32;
      }
      goto LABEL_12;
    }
    if (v30 >= 0.0) {
      float v37 = -v37;
    }
LABEL_23:
    *a8 = v37;
    float v30 = v30 + v37;
    goto LABEL_24;
  }
  *a4 = 0.0;
  double v19 = 0.0;
LABEL_26:
  *a5 = v19;
}

BOOL sub_1011BD384(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v91 = 0;
  double v6 = *(double *)(a2 + 232);
  double v7 = fabs(*(double *)(a2 + 240));
  double v89 = fabs(*(double *)(a1 + 360));
  double v90 = v7;
  int v8 = (int)v6;
  if (v7 >= 25.0 && a3 == 0)
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
LABEL_9:
        int v10 = 0;
        int v11 = -1;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      case 11:
      case 12:
LABEL_10:
        int v12 = 2;
        goto LABEL_12;
      case 13:
      case 14:
      case 15:
      case 16:
LABEL_7:
        int v12 = 3;
        goto LABEL_12;
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_8:
        int v12 = 4;
        goto LABEL_12;
      default:
LABEL_11:
        int v12 = 10;
LABEL_12:
        int v10 = 1;
        unsigned __int8 v91 = 1;
        int v11 = v12;
        break;
    }
  }
  else
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 1;
    switch(v8)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_9;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        break;
      case 13:
        goto LABEL_12;
      case 14:
        goto LABEL_10;
      case 15:
      case 16:
        goto LABEL_7;
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_8;
      default:
        goto LABEL_11;
    }
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317770);
    }
    double v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v14 + v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317770);
      }
      int v71 = *(_DWORD *)(a1 + 648);
      *(_DWORD *)uint64_t v92 = 67240448;
      *(_DWORD *)&v92[4] = v71;
      *(_WORD *)&v92[8] = 1026;
      *(_DWORD *)&v92[10] = v71 + v11;
      int v72 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v72);
      if (v72 != buf) {
        free(v72);
      }
    }
  }
  *(_DWORD *)(a1 + 648) = (*(_DWORD *)(a1 + 648) + v11) & ~((*(_DWORD *)(a1 + 648) + v11) >> 31);
  __int16 v88 = 0;
  sub_1013E5BA0(a2, (BOOL *)&v88 + 1, &v88);
  if (HIBYTE(v88))
  {
    if ((_BYTE)v88)
    {
      double v15 = *(double *)(a2 + 96);
      if (v15 > 0.0 || !*(unsigned char *)(a2 + 228))
      {
        if (a3)
        {
          if (v7 <= 67.5) {
            goto LABEL_52;
          }
          if (*(double *)(a2 + 192) >= 20.0 && v15 <= 8.33333333) {
            int v17 = 4;
          }
          else {
            int v17 = 6;
          }
          goto LABEL_45;
        }
        if (v15 > 8.33333333 || *(double *)(a2 + 192) < 20.0)
        {
          if (v7 > 67.5)
          {
            int v17 = 18;
LABEL_45:
            unsigned __int8 v91 = 1;
            if (*(unsigned char *)(a1 + 96))
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317770);
              }
              double v18 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                int v19 = *(_DWORD *)(a1 + 648);
                *(_DWORD *)long long buf = 67240448;
                *(_DWORD *)&uint8_t buf[4] = v19;
                *(_WORD *)&buf[8] = 1026;
                *(_DWORD *)&buf[10] = v19 + v17;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_102317770);
                }
                int v78 = *(_DWORD *)(a1 + 648);
                *(_DWORD *)uint64_t v92 = 67240448;
                *(_DWORD *)&v92[4] = v78;
                *(_WORD *)&v92[8] = 1026;
                *(_DWORD *)&v92[10] = v78 + v17;
                long long v79 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v79);
                if (v79 != buf) {
                  free(v79);
                }
              }
            }
            *(_DWORD *)(a1 + 648) += v17;
            int v10 = 1;
            goto LABEL_52;
          }
          if (v7 > 45.0)
          {
LABEL_40:
            int v17 = 6;
            goto LABEL_45;
          }
          if (v7 > 30.0)
          {
LABEL_42:
            int v17 = 2;
            goto LABEL_45;
          }
          if (v7 > 20.0)
          {
LABEL_44:
            int v17 = 1;
            goto LABEL_45;
          }
        }
        if (v7 <= 67.5)
        {
          if (v7 <= 45.0)
          {
            if (v7 <= 30.0) {
              goto LABEL_52;
            }
            goto LABEL_44;
          }
          goto LABEL_42;
        }
        goto LABEL_40;
      }
    }
  }
LABEL_52:
  double v20 = sub_1013E5B64((double *)a2);
  if (v20 >= 10.0) {
    double v21 = v20;
  }
  else {
    double v21 = 10.0;
  }
  double v87 = v21;
  if (v21 < 50.0 && v10 == 0)
  {
    if (fabs(*(double *)(a2 + 256)) <= 75.0 && fabs(*(double *)(a2 + 248)) <= 150.0)
    {
      int v10 = 0;
    }
    else
    {
      unsigned __int8 v91 = 1;
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317770);
        }
        float v23 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          int v24 = *(_DWORD *)(a1 + 648);
          *(_DWORD *)long long buf = 67240448;
          *(_DWORD *)&uint8_t buf[4] = v24;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v24 + 1;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317770);
          }
          int v75 = *(_DWORD *)(a1 + 648);
          *(_DWORD *)uint64_t v92 = 67240448;
          *(_DWORD *)&v92[4] = v75;
          *(_WORD *)&v92[8] = 1026;
          *(_DWORD *)&v92[10] = v75 + 1;
          int v76 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v76);
          if (v76 != buf) {
            free(v76);
          }
        }
      }
      ++*(_DWORD *)(a1 + 648);
      int v10 = 1;
    }
  }
  float v25 = (_OWORD *)(a1 + 120);
  double v26 = *(double *)(a1 + 128);
  double v27 = *(double *)(a2 + 8) - v26;
  if (v26 == 0.0) {
    double v27 = 0.0;
  }
  if (v27 >= 0.0) {
    double v28 = v27;
  }
  else {
    double v28 = 0.0;
  }
  if (v28 <= 4.9)
  {
    if (v28 <= 75.0) {
      goto LABEL_80;
    }
  }
  else if (v28 <= 75.0 && *(unsigned char *)(a2 + 228) != 0)
  {
LABEL_80:
    int v30 = *(unsigned __int8 *)(a1 + 384);
    double v31 = 10000.0;
    if (*(unsigned char *)(a1 + 384) && *(unsigned char *)(a1 + 481))
    {
      if (*(unsigned char *)(a2 + 361)) {
        int v32 = a3;
      }
      else {
        int v32 = 1;
      }
      if (v32) {
        double v31 = 10000.0;
      }
      else {
        double v31 = 40000.0;
      }
    }
    double v86 = *(double *)(a2 + 256) * *(double *)(a2 + 256) + *(double *)(a2 + 248) * *(double *)(a2 + 248);
    if (v86 > v31)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317770);
        }
        float v33 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349312;
          *(void *)&uint8_t buf[4] = sqrt(v31);
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317770);
          }
          *(_DWORD *)uint64_t v92 = 134349312;
          *(void *)&v92[4] = sqrt(v31);
          *(_WORD *)&v92[12] = 1026;
          *(_DWORD *)&v92[14] = a3;
          int v77 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v77);
          if (v77 != buf) {
            free(v77);
          }
        }
      }
      char v34 = 0;
      *(unsigned char *)(a1 + 652) = 0;
      goto LABEL_173;
    }
    if (*(unsigned char *)(a1 + 652))
    {
      double v43 = *(double *)(a2 + 232);
      if (!v30) {
        goto LABEL_120;
      }
      if (v43 > 13.0)
      {
        double v44 = *(double *)(a1 + 216);
        double v45 = v44 <= 0.0 ? *(double *)(a2 + 96) : (v44 + *(double *)(a2 + 96)) * 0.5;
        if (sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 272), *(double *)(a1 + 280), *(double *)(a2 + 152), *(double *)(a2 + 160), *(double *)(a2 + 72))- v28 * v45 > 100.0)
        {
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317770);
            }
            float v46 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              int v47 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)long long buf = 67240448;
              *(_DWORD *)&uint8_t buf[4] = v47;
              *(_WORD *)&buf[8] = 2050;
              *(double *)&buf[10] = (double)v47 + 18.0;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLMM,jumpDistanceCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}.0f", buf, 0x12u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317770);
              }
              int v81 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)uint64_t v92 = 67240448;
              *(_DWORD *)&v92[4] = v81;
              *(_WORD *)&v92[8] = 2050;
              *(double *)&v92[10] = (double)v81 + 18.0;
              long long v82 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v82);
              if (v82 != buf) {
                free(v82);
              }
            }
          }
          *(_DWORD *)(a1 + 648) += 18;
          int v10 = 1;
          unsigned __int8 v91 = 1;
        }
      }
      if (*(unsigned char *)(a1 + 652))
      {
        double v43 = *(double *)(a2 + 232);
LABEL_120:
        if (v43 <= 70.0)
        {
          if (*(int *)(a1 + 648) < 18)
          {
            if (!*(unsigned char *)(a2 + 265) || (double v55 = v20 * 3.5, fabs(*(double *)(a2 + 256)) <= v55))
            {
              if (v43 < 6.5 && !v10)
              {
                *(_DWORD *)(a1 + 648) = 0;
                if (*(unsigned char *)(a1 + 96))
                {
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_102317770);
                  }
                  int v67 = qword_102419438;
                  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                  {
                    int v68 = *(_DWORD *)(a1 + 648);
                    *(_DWORD *)long long buf = 67240192;
                    *(_DWORD *)&uint8_t buf[4] = v68;
                    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMM,reseting offRoadCount,%{public}d", buf, 8u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_102317770);
                    }
                    int v69 = *(_DWORD *)(a1 + 648);
                    *(_DWORD *)uint64_t v92 = 67240192;
                    *(_DWORD *)&v92[4] = v69;
                    BOOL v70 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v70);
                    if (v70 != buf) {
                      free(v70);
                    }
                  }
                }
              }
              goto LABEL_166;
            }
            if (!*(unsigned char *)(a1 + 96)) {
              goto LABEL_155;
            }
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317770);
            }
            int v56 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v57 = *(void *)(a2 + 256);
              *(_DWORD *)long long buf = 134349312;
              *(void *)&uint8_t buf[4] = v57;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(double *)&buf[14] = v55;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,isAmbiguous,1,acrossTrack,%{public}.1lf,acrossTrackThreshold,%{public}.1lf", buf, 0x16u);
            }
            if (!sub_10013D1A0(115, 2))
            {
LABEL_155:
              *(unsigned char *)(a1 + 652) = 0;
LABEL_166:
              if (*(unsigned char *)(a1 + 841))
              {
                char v34 = *(unsigned char *)(a1 + 652);
                if (v34 && !*(unsigned char *)(a2 + 265) && fabs(*(double *)(a2 + 256)) <= 10.0) {
                  char v34 = 1;
                }
                else {
                  *(unsigned char *)(a1 + 841) = 0;
                }
              }
              else
              {
                *(void *)long long buf = 0x4079000000000000;
                *(void *)uint64_t v92 = 0x3FE0000000000000;
                *(unsigned char *)(a1 + 841) = sub_1011BE9F8(a1, a2, &v86, (double *)buf, (double *)v92, (unsigned char *)&v88 + 1, &v88, &v87, &v90, &v89, &v91);
                char v34 = *(unsigned char *)(a1 + 652);
              }
LABEL_173:
              long long v60 = *(_OWORD *)a2;
              long long v61 = *(_OWORD *)(a2 + 16);
              long long v62 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
              *(_OWORD *)(a1 + 168) = v62;
              *float v25 = v60;
              *(_OWORD *)(a1 + 136) = v61;
              long long v63 = *(_OWORD *)(a2 + 64);
              long long v64 = *(_OWORD *)(a2 + 80);
              long long v65 = *(_OWORD *)(a2 + 112);
              *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
              *(_OWORD *)(a1 + 232) = v65;
              *(_OWORD *)(a1 + 184) = v63;
              *(_OWORD *)(a1 + 200) = v64;
              std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
              memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
              *(unsigned char *)(a1 + 384) = v34;
              return *(unsigned char *)(a1 + 652) != 0;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317770);
            }
            uint64_t v83 = *(void *)(a2 + 256);
            *(_DWORD *)uint64_t v92 = 134349312;
            *(void *)&v92[4] = v83;
            *(_WORD *)&v92[12] = 2050;
            *(double *)&v92[14] = v55;
          }
          else
          {
            if (!*(unsigned char *)(a1 + 96)) {
              goto LABEL_155;
            }
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317770);
            }
            float v52 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              int v53 = *(_DWORD *)(a1 + 648);
              *(_DWORD *)long long buf = 67240448;
              *(_DWORD *)&uint8_t buf[4] = v53;
              *(_WORD *)&buf[8] = 2050;
              *(void *)&buf[10] = 0x4032000000000000;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,offRoadCount,%{public}d,threshold,%{public}.0f", buf, 0x12u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_155;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317770);
            }
            int v54 = *(_DWORD *)(a1 + 648);
            *(_DWORD *)uint64_t v92 = 67240448;
            *(_DWORD *)&v92[4] = v54;
            *(_WORD *)&v92[8] = 2050;
            *(void *)&v92[10] = 0x4032000000000000;
          }
        }
        else
        {
          if (!*(unsigned char *)(a1 + 96)) {
            goto LABEL_155;
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317770);
          }
          float v48 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v49 = *(void *)(a2 + 232);
            *(_DWORD *)long long buf = 134349312;
            *(void *)&uint8_t buf[4] = v49;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = 0x4051800000000000;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", buf, 0x16u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_155;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317770);
          }
          uint64_t v50 = *(void *)(a2 + 232);
          *(_DWORD *)uint64_t v92 = 134349312;
          *(void *)&v92[4] = v50;
          *(_WORD *)&v92[12] = 2050;
          *(void *)&v92[14] = 0x4051800000000000;
        }
        uint64_t v84 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v84);
        if (v84 != buf) {
          free(v84);
        }
        goto LABEL_155;
      }
    }
    *(void *)uint64_t v92 = 0x4079000000000000;
    uint64_t v85 = 0x4034000000000000;
    if (*(unsigned char *)(a2 + 348))
    {
      if (v20 > 7.5) {
        goto LABEL_158;
      }
      uint64_t v51 = 0x401E000000000000;
    }
    else if (*(unsigned char *)(a1 + 600) || v21 >= 30.0)
    {
      *(void *)uint64_t v92 = 0x4093240000000000;
      uint64_t v51 = 0x4041800000000000;
    }
    else
    {
      if (v20 > 7.5) {
        goto LABEL_158;
      }
      uint64_t v51 = 0x402B000000000000;
    }
    uint64_t v85 = v51;
LABEL_158:
    BOOL v58 = sub_1011BE9F8(a1, a2, &v86, (double *)v92, (double *)&v85, (unsigned char *)&v88 + 1, &v88, &v87, &v90, &v89, &v91);
    *(unsigned char *)(a1 + 652) = v58;
    if (v58)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317770);
        }
        double v59 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "CLMM,startSnapping", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317770);
          }
          double v80 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v80);
          if (v80 != buf) {
            free(v80);
          }
        }
      }
      *(_DWORD *)(a1 + 648) = 0;
    }
    goto LABEL_166;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317770);
    }
    double v35 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v36 = *(unsigned __int8 *)(a2 + 228);
      *(_DWORD *)long long buf = 134349824;
      *(double *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = 0x401399999999999ALL;
      __int16 v98 = 2050;
      uint64_t v99 = 0x4052C00000000000;
      __int16 v100 = 1026;
      int v101 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMM,stopSnapping,timeout,dT,%{public}.1lf,threshold1,%{public}.1lf,threshold2,%{public}.1lf,static,%{public}d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317770);
      }
      int v73 = *(unsigned __int8 *)(a2 + 228);
      *(_DWORD *)uint64_t v92 = 134349824;
      *(double *)&v92[4] = v28;
      *(_WORD *)&v92[12] = 2050;
      *(void *)&v92[14] = 0x401399999999999ALL;
      __int16 v93 = 2050;
      uint64_t v94 = 0x4052C00000000000;
      __int16 v95 = 1026;
      int v96 = v73;
      long long v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, BOOL)", "%s\n", v74);
      if (v74 != buf) {
        free(v74);
      }
    }
  }
  *(unsigned char *)(a1 + 652) = 0;
  long long v37 = *(_OWORD *)a2;
  long long v38 = *(_OWORD *)(a2 + 16);
  long long v39 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 168) = v39;
  *float v25 = v37;
  *(_OWORD *)(a1 + 136) = v38;
  long long v40 = *(_OWORD *)(a2 + 64);
  long long v41 = *(_OWORD *)(a2 + 80);
  long long v42 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 232) = v42;
  *(_OWORD *)(a1 + 184) = v40;
  *(_OWORD *)(a1 + 200) = v41;
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 128));
  memcpy((void *)(a1 + 272), (const void *)(a2 + 152), 0x118uLL);
  *(unsigned char *)(a1 + 384) = 0;
  return *(unsigned char *)(a1 + 652) != 0;
}

BOOL sub_1011BE9F8(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, unsigned char *a6, unsigned char *a7, double *a8, double *a9, double *a10, unsigned __int8 *a11)
{
  if (*a11 | *(unsigned __int8 *)(a2 + 265) || *(unsigned char *)(a1 + 385) || *a3 >= *a4) {
    return 0;
  }
  BOOL result = 0;
  if (fabs(*(double *)(a2 + 256)) >= *a5 || *a8 >= 101.0) {
    return result;
  }
  double v13 = *(double *)(a2 + 232);
  if (v13 >= 3.0) {
    return 0;
  }
  BOOL result = 0;
  double v14 = *(double *)(a1 + 352);
  if (v14 >= 3.0) {
    return result;
  }
  if (*(double *)(a2 + 96) <= 1.67) {
    return result;
  }
  BOOL result = 0;
  if (*(double *)(a1 + 216) <= 1.67) {
    return result;
  }
  if (*(double *)(a2 + 104) < 0.0) {
    return result;
  }
  BOOL result = 0;
  if (*(double *)(a1 + 224) < 0.0 || *a9 >= 30.0 || *a10 >= 30.0) {
    return result;
  }
  if (*a6 && *a7 && *(double *)(a2 + 192) < 20.0)
  {
    if (*a9 < 40.0)
    {
      float v15 = *(float *)(a2 + 180);
      float v16 = 2.5;
      goto LABEL_21;
    }
    return 0;
  }
  float v15 = *(float *)(a2 + 180);
  float v16 = 3.0;
LABEL_21:
  if (v15 > v16) {
    return 1;
  }
  BOOL result = 0;
  if (v13 < 1.0 && v14 < 1.0) {
    return v15 > 1.1 || v15 == 0.0;
  }
  return result;
}

double sub_1011BEB6C(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, void *a5, void *a6)
{
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0x3FF0000000000000;
  long long v13 = 0u;
  long long v14 = 0u;
  int v15 = 0;
  sub_1011BEC98(a1, a2, a3, a4, &v18, &v17, &v16, (uint64_t)v10, 0);
  double result = *(double *)v10;
  uint64_t v9 = v11;
  *a5 = v10[0];
  *a6 = v9;
  return result;
}

void sub_1011BEBD8(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
  sub_1011BEC98(a1, a2, a3, a4, &v7, &v6, &v5, a5, 0);
}

double sub_1011BEC0C(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, void *a5, void *a6, double *a7, double *a8, void *a9, double *a10, char a11)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0x3FF0000000000000;
  long long v18 = 0u;
  long long v19 = 0u;
  int v20 = 0;
  sub_1011BEC98(a1, a2, a3, a4, a7, a8, a10, (uint64_t)v15, a11);
  uint64_t v13 = v16;
  *a5 = v15[0];
  *a6 = v13;
  double result = *((double *)&v19 + 1);
  *a9 = *((void *)&v19 + 1);
  return result;
}

void sub_1011BEC98(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, uint64_t a8, char a9)
{
  char v16 = a9;
  *(void *)a8 = 0;
  *(void *)(a8 + 16) = 0;
  uint64_t v17 = (double *)(a8 + 40);
  long long v18 = (double *)(a8 + 32);
  sub_1000F17A8((double *)(a1 + 608), (double *)(a8 + 40), (double *)(a8 + 32), (double *)(a8 + 48), *(double *)(a3 + 32), *(double *)(a3 + 40), a4[9], a4[7], a4[8], a4[9]);
  if (!*(void *)a3)
  {
    float v22 = a7;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317770);
    }
    long long v19 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning CLMM, NULL road", buf, 2u);
    }
    a7 = v22;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317770);
      }
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLScoredMapMatcher::calculateScoreAndVarFactor(CLMapDataUtil::CovarInvDet &, const struct CLMapGeometry::DistanceQueryResult &, const CLMapCrumb &, double &, double &, double &, CLMapDataUtil::MapMatcherScore &, BOOL)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
      a7 = v22;
      char v16 = a9;
    }
  }
  sub_1011BD124(a1, v18, v17, a5, a6, (float *)a3, a4, a7, v16);
  if (*(unsigned char *)(a2 + 40))
  {
    double v20 = fmod(a4[13] - *(float *)(a3 + 24), 360.0);
    if (v20 < 0.0) {
      double v20 = v20 + 360.0;
    }
    if (v20 > 180.0) {
      double v20 = v20 + -360.0;
    }
    *(double *)(a8 + 56) = fabs(v20);
  }
  sub_10053B11C(a2, a8);
}

uint64_t sub_1011BEF80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  double v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(unsigned __int8 *)(a2 + 229);
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 816) != v6 || *(double *)(a1 + 832) == 0.0)
  {
    *(void *)(a1 + 832) = v7;
    *(unsigned char *)(a1 + 816) = v6;
  }
  *(void *)(a1 + 824) = v7;
  ++*(_DWORD *)(a1 + 100);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)v4 + 48))(v4, a2, 450.0);
  uint64_t v54 = (uint64_t)&v54;
  double v55 = &v54;
  uint64_t v56 = 0;
  uint64_t v50 = (void *)(a1 + 552);
  if (!*(void *)(a1 + 552)
    || (double v8 = *(double *)(a2 + 8) - *(double *)(a1 + 592), v8 > 5.0)
    || ((*(uint64_t (**)(uint64_t, uint64_t *, void *, void, uint64_t, double, double))(*(void *)v4 + 72))(v4, &v54, v50, *(unsigned __int8 *)(a1 + 568), 1, *(double *)(a1 + 576), v8 * ((*(double *)(a2 + 96) + *(double *)(a1 + 584)) * 0.5)) & 1) != 0)
  {
    sub_1011BBD68(a1, a2);
    uint64_t v49 = a1 + 656;
    sub_10053A610(a1 + 656, a2, *(unsigned __int8 *)(a1 + 752));
    v9.n128_u64[0] = *(void *)(a2 + 80);
    double v10 = *(double *)(a2 + 200);
    if (v10 > 0.0)
    {
      double v11 = *(double *)(a2 + 208);
      if (v11 > 0.0) {
        v9.n128_f64[0] = sqrt(v11 / 2.45 * (v11 / 2.45) + v10 / 2.45 * (v10 / 2.45));
      }
    }
    double v12 = v9.n128_f64[0] * 4.0;
    v9.n128_u64[0] = 0x4052C00000000000;
    if (v12 >= 75.0)
    {
      v9.n128_f64[0] = v12;
      if (v12 > 249.9999) {
        v9.n128_u64[0] = 0x406F3FFF2E48E8A7;
      }
    }
    uint64_t v51 = (uint64_t)&v51;
    float v52 = &v51;
    uint64_t v53 = 0;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, __n128))(*(void *)v4 + 64))(v4, &v51, a2, 1, v9);
    uint64_t v14 = v13;
    if ((v13 & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      ++*(_DWORD *)(a1 + 108);
      goto LABEL_84;
    }
    uint64_t v48 = a2;
    int v15 = v52;
    if (v52 == &v51) {
      goto LABEL_81;
    }
    unsigned int v47 = v13;
    char v16 = 0;
    int v17 = 0;
    char v18 = 0;
    int v19 = 0;
    double v20 = 0.0;
    double v21 = 0.0;
    double v22 = 0.0;
    float v23 = &v51;
    while (*(unsigned char *)(v15[2] + 17))
    {
LABEL_64:
      int v15 = (uint64_t *)v15[1];
      if (v15 == &v51)
      {
        uint64_t v14 = v47;
        if (v23 != &v51)
        {
          sub_1011884B4(v48, v23 + 2);
          double v37 = v22 * 500.0;
          if (v18) {
            double v37 = v22;
          }
          double v38 = v21 * 500.0;
          if (v19) {
            double v38 = v21;
          }
          if ((v16 & 1) == 0) {
            double v37 = v37 * 10.0;
          }
          if ((v17 & 1) == 0) {
            double v38 = v38 * 10.0;
          }
          float v39 = v37 / v20;
          float v40 = v37 / v38;
          *(float *)(v48 + 176) = v39;
          *(float *)(v48 + 180) = v40;
          uint64_t v42 = v23[2];
          uint64_t v41 = v23[3];
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(a1 + 552) = v42;
          double v43 = *(std::__shared_weak_count **)(a1 + 560);
          *(void *)(a1 + 560) = v41;
          if (v43) {
            sub_1000DB0A0(v43);
          }
          *(unsigned char *)(a1 + 568) = *((unsigned char *)v23 + 36);
          *(void *)(a1 + 576) = v23[8];
          *(void *)(a1 + 584) = *(void *)(v48 + 96);
          *(void *)(a1 + 592) = *(void *)(v48 + 8);
          uint64_t v65 = 0;
          v66[0] = 0.0;
          uint64_t v64 = 0;
          double v57 = 0.0;
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          uint64_t v60 = 0x3FF0000000000000;
          long long v61 = 0u;
          long long v62 = 0u;
          int v63 = 0;
          sub_1011BEC98(a1, v49, (uint64_t)(v23 + 2), (double *)v48, v66, (double *)&v65, (double *)&v64, (uint64_t)&v57, 0);
          *(_OWORD *)(v48 + 288) = *(_OWORD *)(v48 + 152);
          *(void *)(v48 + 304) = *(void *)(v48 + 168);
          BOOL v44 = sub_1011BD384(a1, v48, 0);
          *(unsigned char *)(v48 + 264) = v44;
          if (v44)
          {
LABEL_84:
            sub_10017FF2C(&v51);
            goto LABEL_85;
          }
LABEL_83:
          ++*(_DWORD *)(a1 + 104);
          goto LABEL_84;
        }
LABEL_81:
        *(_OWORD *)(v48 + 152) = *(_OWORD *)(v48 + 56);
        *(void *)(v48 + 168) = *(void *)(v48 + 104);
        double v45 = *(std::__shared_weak_count **)(a1 + 560);
        *uint64_t v50 = 0;
        *(void *)(a1 + 560) = 0;
        if (v45) {
          sub_1000DB0A0(v45);
        }
        goto LABEL_83;
      }
    }
    double v57 = 0.0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0x3FF0000000000000;
    long long v61 = 0u;
    long long v62 = 0u;
    int v63 = 0;
    sub_1011BEC98(a1, v49, (uint64_t)(v15 + 2), (double *)v48, v66, (double *)&v65, (double *)&v64, (uint64_t)&v57, 0);
    int v24 = (void *)*v50;
    if (!*v50)
    {
      int v28 = 1;
      double v29 = v57;
      goto LABEL_33;
    }
    uint64_t v25 = *(void *)v15[2];
    if (*v24 == v25) {
      goto LABEL_30;
    }
    double v26 = v55;
    if (v55 == &v54) {
      goto LABEL_28;
    }
    char v27 = 0;
    do
    {
      if (v26[2] == v25 && *((unsigned __int8 *)v26 + 24) == *((unsigned __int8 *)v15 + 36)) {
        char v27 = 1;
      }
      double v26 = (uint64_t *)v26[1];
    }
    while (v26 != &v54);
    if (v27)
    {
LABEL_30:
      int v28 = 1;
      double v29 = v57;
      if (!*((unsigned char *)v15 + 37)) {
LABEL_31:
      }
        double v29 = v29 / 10.0;
    }
    else
    {
LABEL_28:
      int v28 = 0;
      double v29 = v57 / 500.0;
      if (!*((unsigned char *)v15 + 37)) {
        goto LABEL_31;
      }
    }
LABEL_33:
    double v20 = v20 + v57;
    if (*((unsigned char *)v15 + 37)) {
      BOOL v30 = 1;
    }
    else {
      BOOL v30 = v24 == 0;
    }
    int v31 = v30;
    if (v29 > v21) {
      int v32 = v28;
    }
    else {
      int v32 = v19;
    }
    if (v29 > v21) {
      double v33 = v29;
    }
    else {
      double v33 = v21;
    }
    if (v29 <= v21) {
      int v31 = v17;
    }
    if (*((unsigned char *)v15 + 37)) {
      BOOL v34 = 1;
    }
    else {
      BOOL v34 = v24 == 0;
    }
    char v35 = v34;
    BOOL v36 = v29 <= v22;
    if (v29 <= v22) {
      int v19 = v32;
    }
    else {
      float v23 = v15;
    }
    if (v29 > v22) {
      double v21 = v22;
    }
    else {
      double v21 = v33;
    }
    if (v29 > v22)
    {
      double v22 = v29;
      char v18 = v28;
    }
    if (v36) {
      int v17 = v31;
    }
    else {
      char v16 = v35;
    }
    goto LABEL_64;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v14 = 0;
  ++*(_DWORD *)(a1 + 108);
LABEL_85:
  sub_1011BF5D0(&v54);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  return v14;
}

void sub_1011BF544(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_10017FF2C((uint64_t *)va);
  sub_1011BF5D0((uint64_t *)va1);
  if (a3) {
    sub_1000DB0A0(a3);
  }
  _Unwind_Resume(a1);
}

void sub_1011BF5A0(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_1011BF5D0(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    double v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        double v5 = (uint64_t *)v3[1];
        int v6 = (std::__shared_weak_count *)v3[5];
        if (v6) {
          sub_1000DB0A0(v6);
        }
        operator delete(v3);
        double v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

float *sub_1011BF648(uint64_t a1, uint64_t a2)
{
  float v4 = sub_1011C07F8(a1);
  float v6 = v5;
  float v8 = v7;
  unint64_t v9 = 0;
  uint64_t v10 = (unsigned __int16 *)(a1 + 28);
  double v11 = (unsigned __int16 *)(a1 + 1076);
  double v12 = (unsigned __int16 *)(a1 + 2124);
  do
  {
    float v13 = *(float *)sub_1004182C4(v10, v9);
    float v14 = (float)(v6 * *(float *)sub_1004182C4(v11, v9)) + (float)(v13 * v4);
    double result = (float *)sub_1004182C4(v12, v9);
    uint64_t v16 = *(unsigned __int16 *)(a2 + 18);
    unint64_t v17 = *(unsigned int *)(a2 + 20);
    uint64_t v18 = *(unsigned __int16 *)(a2 + 16);
    if (v18 + v16 >= v17) {
      uint64_t v19 = *(unsigned int *)(a2 + 20);
    }
    else {
      uint64_t v19 = 0;
    }
    *(float *)(a2 + 24 + 4 * (v18 + v16 - v19)) = v14 + (float)(*result * v8);
    if (v17 <= v16)
    {
      if (v18 + 1 < v17) {
        LOWORD(v17) = 0;
      }
      *(_WORD *)(a2 + 16) = v18 + 1 - v17;
    }
    else
    {
      *(_WORD *)(a2 + 18) = v16 + 1;
    }
    *(unsigned char *)a2 = 1;
    ++v9;
  }
  while (v9 != 256);
  return result;
}

float sub_1011BF750(uint64_t a1, int a2, int a3)
{
  unint64_t v5 = *(unsigned __int16 *)(a1 + 18);
  __chkstk_darwin(a1);
  float v8 = (char *)&v12 - v7;
  if (v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (unsigned __int16 *)(v6 + 16);
    do
    {
      *(_DWORD *)&v8[4 * v9] = *(_DWORD *)sub_1004182C4(v10, v9);
      ++v9;
    }
    while (v5 != v9);
  }
  sub_100A68AC8(v8, 4uLL, v5, (uint64_t (*)(char *, char *, __n128))sub_1011C08C0);
  return *(float *)&v8[4 * (((int)v5 - 1) * a2 / 100) + 4 * a3];
}

float sub_1011BF858(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 18);
  if (*(_WORD *)(a1 + 18))
  {
    unint64_t v4 = 0;
    unint64_t v5 = (unsigned __int16 *)(a1 + 16);
    float v6 = 0.0;
    do
      float v6 = v6 + vabds_f32(*(float *)sub_1004182C4(v5, v4++), a2);
    while (v2 != v4);
  }
  else
  {
    float v6 = 0.0;
  }
  return v6 / (float)v2;
}

void sub_1011BF8D0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_1014F0838(v19);
  sub_1011BFB18(a1, &v18);
  float v6 = sub_100D6A9FC(*(_DWORD *)(a1 + 8), 0x80uLL, 0.39);
  int v7 = sub_100D6A824(v6);
  float v8 = sub_100D6A9FC(*(_DWORD *)(a1 + 8), 0x80uLL, 4.29);
  int v9 = sub_100D6A824(v8);
  LOBYTE(v21) = 1;
  v23[0] = 0x10000000000;
  int v22 = 1031798784;
  sub_1011BFBAC((unsigned __int16 *)a1, (float *)&v18, (uint64_t)&v21);
  sub_1014F083C((uint64_t)v19, v20, (unsigned __int16 *)v23);
  float v17 = sub_100D6AA48(v7, v9, (uint64_t)v20);
  *(float *)a3 = v17;
  if (a2) {
    *(float *)(a3 + 24) = sub_1011BF750((uint64_t)&v21, 90, 0);
  }
  uint64_t v21 = 0x10000000000;
  sub_1011BFC68((unsigned __int16 *)a1, (float *)&v18, (unsigned __int16 *)&v21);
  sub_1014F083C((uint64_t)v19, v20, (unsigned __int16 *)&v21);
  *(float *)v10.i32 = sub_100D6AA48(v7, v9, (uint64_t)v20);
  int32x2_t v16 = v10;
  *(_DWORD *)(a3 + 4) = v10.i32[0];
  uint64_t v21 = 0x10000000000;
  sub_1011BFDE0((unsigned __int16 *)a1, (float *)&v18, (unsigned __int16 *)&v21);
  sub_1014F083C((uint64_t)v19, v20, (unsigned __int16 *)&v21);
  v11.f32[0] = sub_100D6AA48(v7, v9, (uint64_t)v20);
  *(_DWORD *)(a3 + 8) = v11.i32[0];
  v11.f32[1] = v17;
  *(int8x8_t *)(a3 + 12) = vand_s8((int8x8_t)vdiv_f32((float32x2_t)vdup_lane_s32(v16, 0), v11), (int8x8_t)vcgtz_f32(v11));
  sub_1014F083C((uint64_t)v19, &v21, (unsigned __int16 *)(a1 + 28));
  float v12 = sub_100D6A9FC(*(_DWORD *)(a1 + 8), 0x80uLL, 0.4);
  int v13 = sub_100D6A824(v12);
  float v14 = sub_100D6A9FC(*(_DWORD *)(a1 + 8), 0x80uLL, 50.0);
  int v15 = sub_100D6A824(v14);
  *(float *)(a3 + 20) = sub_100D6AA48(v13, v15, (uint64_t)&v21);
}

float sub_1011BFB18(uint64_t a1, float32x2_t *a2)
{
  unint64_t v3 = 0;
  v9.i32[0] = sub_1011C07F8(a1);
  v9.i32[1] = v4;
  float v10 = v5;
  float v6 = 0.0;
  do
  {
    *(float *)v7.i32 = sub_1004E30E4((uint64_t)&v9, v3);
    float v6 = v6 + (float)((float)(*(float *)v7.i32 * 0.25) * (float)(*(float *)v7.i32 * 0.25));
    ++v3;
  }
  while (v3 != 3);
  *(float *)v7.i32 = sqrtf(v6) * 4.0;
  *a2 = vdiv_f32(v9, (float32x2_t)vdup_lane_s32(v7, 0));
  *(float *)v7.i32 = v10 / *(float *)v7.i32;
  a2[1].i32[0] = v7.i32[0];
  return *(float *)v7.i32;
}

void sub_1011BFBAC(unsigned __int16 *a1, float *a2, uint64_t a3)
{
  unint64_t v6 = 0;
  uint64_t v7 = a3 + 24;
  do
  {
    float v8 = sub_1011C0860(a1, v6);
    float v11 = (float)((float)(v9 * a2[2]) + (float)(v10 * a2[1])) + (float)(v8 * *a2);
    uint64_t v12 = *(unsigned __int16 *)(a3 + 18);
    unint64_t v13 = *(unsigned int *)(a3 + 20);
    uint64_t v14 = *(unsigned __int16 *)(a3 + 16);
    if (v14 + v12 >= v13) {
      uint64_t v15 = *(unsigned int *)(a3 + 20);
    }
    else {
      uint64_t v15 = 0;
    }
    *(float *)(v7 + 4 * (v14 + v12 - v15)) = v11;
    if (v13 <= v12)
    {
      if (v14 + 1 < v13) {
        LOWORD(v13) = 0;
      }
      *(_WORD *)(a3 + 16) = v14 + 1 - v13;
    }
    else
    {
      *(_WORD *)(a3 + 18) = v12 + 1;
    }
    *(unsigned char *)a3 = 1;
    ++v6;
  }
  while (v6 != 256);
}

float *sub_1011BFC68(unsigned __int16 *a1, float *a2, unsigned __int16 *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485EC0, memory_order_acquire) & 1) == 0)
  {
    double v26 = a2;
    int v27 = __cxa_guard_acquire(&qword_102485EC0);
    a2 = v26;
    if (v27)
    {
      qword_102485EB0 = 1065353216;
      dword_102485EB8 = 0;
      __cxa_guard_release(&qword_102485EC0);
      a2 = v26;
    }
  }
  unint64_t v5 = 0;
  float v7 = a2[1];
  float v6 = a2[2];
  float v8 = (float)(v7 * *(float *)&dword_102485EB8) - (float)(v6 * *((float *)&qword_102485EB0 + 1));
  float v9 = (float)(v6 * *(float *)&qword_102485EB0) - (float)(*a2 * *(float *)&dword_102485EB8);
  float v10 = (float)(*a2 * *((float *)&qword_102485EB0 + 1)) - (float)(v7 * *(float *)&qword_102485EB0);
  float v11 = (float)(v9 * v6) - (float)(v10 * v7);
  float v12 = (float)(v10 * *a2) - (float)(v8 * v6);
  float v13 = (float)(v8 * v7) - (float)(v9 * *a2);
  float v28 = v11;
  float v29 = v12;
  float v30 = v13;
  float v14 = 0.0;
  do
  {
    float v15 = sub_1004E30E4((uint64_t)&v28, v5);
    float v14 = v14 + (float)((float)(v15 * 0.25) * (float)(v15 * 0.25));
    ++v5;
  }
  while (v5 != 3);
  unint64_t v16 = 0;
  float v17 = sqrtf(v14) * 4.0;
  float v18 = v28 / v17;
  float v19 = v29 / v17;
  float v20 = v30 / v17;
  do
  {
    float v21 = sub_1011C0860(a1, v16);
    float v24 = (float)((float)(v20 * v22) + (float)(v23 * v19)) + (float)(v21 * v18);
    double result = (float *)sub_1004182C4(a3, v16);
    *double result = v24;
    ++v16;
  }
  while (v16 != 256);
  return result;
}

float *sub_1011BFDE0(unsigned __int16 *a1, float *a2, unsigned __int16 *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485ED8, memory_order_acquire) & 1) == 0)
  {
    float v22 = a2;
    int v23 = __cxa_guard_acquire(&qword_102485ED8);
    a2 = v22;
    if (v23)
    {
      qword_102485EC8 = 1065353216;
      dword_102485ED0 = 0;
      __cxa_guard_release(&qword_102485ED8);
      a2 = v22;
    }
  }
  unint64_t v5 = 0;
  float v7 = a2[1];
  float v6 = a2[2];
  float v8 = (float)(v6 * *(float *)&qword_102485EC8) - (float)(*a2 * *(float *)&dword_102485ED0);
  float v9 = (float)(*a2 * *((float *)&qword_102485EC8 + 1)) - (float)(v7 * *(float *)&qword_102485EC8);
  float v24 = (float)(v7 * *(float *)&dword_102485ED0) - (float)(v6 * *((float *)&qword_102485EC8 + 1));
  float v25 = v8;
  float v26 = v9;
  float v10 = 0.0;
  do
  {
    float v11 = sub_1004E30E4((uint64_t)&v24, v5);
    float v10 = v10 + (float)((float)(v11 * 0.25) * (float)(v11 * 0.25));
    ++v5;
  }
  while (v5 != 3);
  unint64_t v12 = 0;
  float v13 = sqrtf(v10) * 4.0;
  float v14 = v24 / v13;
  float v15 = v25 / v13;
  float v16 = v26 / v13;
  do
  {
    float v17 = sub_1011C0860(a1, v12);
    float v20 = (float)((float)(v16 * v18) + (float)(v19 * v15)) + (float)(v17 * v14);
    double result = (float *)sub_1004182C4(a3, v12);
    *double result = v20;
    ++v12;
  }
  while (v12 != 256);
  return result;
}

double sub_1011BFF40(unsigned __int16 *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  v13[0] = 1;
  uint64_t v15 = 0x10000000000;
  int v14 = 1031798784;
  sub_1011BF648((uint64_t)a1, (uint64_t)v13);
  sub_1011C003C((uint64_t)v13);
  long long v8 = v11;
  *a2 = v10;
  a2[1] = v8;
  a2[2] = *(_OWORD *)v12;
  *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)&v12[12];
  sub_1011C03F0((uint64_t)v13, (uint64_t)&v10);
  *(_OWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = v11;
  sub_1011C04BC(a1, (uint64_t)&v10);
  double result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

void sub_1011C003C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (unsigned __int16 *)v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 44) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_DWORD *)(v5 + 8) = -1;
  *(_DWORD *)(v5 + 16) = -1;
  float v7 = sub_1011C06B0(v1);
  float v9 = v8;
  float v11 = v10;
  *(float *)uint64_t v6 = sqrtf((float)(v10 * v10) + (float)((float)(v7 * v7) + (float)(v8 * v8)));
  sub_1014F0838(v47);
  sub_1014F083C((uint64_t)v47, v51, v2 + 14);
  sub_1014F083C((uint64_t)v47, v50, v2 + 538);
  sub_1014F083C((uint64_t)v47, v49, v2 + 1062);
  for (uint64_t i = 0; i != 128; i += 4)
    *(float32x4_t *)&v48[i] = vsqrtq_f32(vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)&v51[i], *(float32x4_t *)&v51[i]), vmulq_f32(*(float32x4_t *)&v50[i], *(float32x4_t *)&v50[i])), vmulq_f32(*(float32x4_t *)&v49[i], *(float32x4_t *)&v49[i])));
  uint64_t v13 = 0;
  BOOL v14 = v9 <= v11 || v9 <= v7;
  uint64_t v15 = (float *)v49;
  if (!v14) {
    uint64_t v15 = (float *)v50;
  }
  if (v7 > v11 && v7 > v9) {
    uint64_t v15 = v51;
  }
  float v17 = 0.0;
  do
  {
    float v18 = v15[v13];
    if (v18 > v17)
    {
      *(float *)(v6 + 28) = v18;
      *(float *)(v6 + 32) = (float)(int)v13;
      float v17 = v18;
    }
    ++v13;
  }
  while (v13 != 128);
  uint64_t v19 = 0;
  float v20 = 0.0;
  int v21 = -1;
  float v22 = 0.0;
  do
  {
    float v23 = v48[v19];
    if (v23 > v22)
    {
      *(float *)(v6 + 4) = v23;
      *(_DWORD *)(v6 + 8) = v19;
      int v21 = v19;
      float v22 = v23;
    }
    float v20 = v20 + v23;
    ++v19;
  }
  while (v19 != 128);
  float v24 = v20 * 0.0078125;
  *(float *)(v6 + 24) = v24;
  if (v24 != 0.0)
  {
    float v25 = v22 / v24;
    float v26 = v24 + v22;
    if (v25 > 2.0 && v26 > 0.125)
    {
      *(float *)(v6 + 12) = v22;
      *(_DWORD *)(v6 + 16) = v21;
    }
  }
  float v28 = 0.0;
  for (uint64_t j = 2; j != 15; ++j)
    float v28 = v28 + v48[j];
  *(float *)(v6 + 52) = v28;
  float v30 = 0.0;
  for (uint64_t k = 46; k != 128; ++k)
    float v30 = v30 + v48[k];
  float v32 = 0.0;
  *(float *)(v6 + 56) = (float)((float)(v48[0] + 0.0) + v48[1]) / v30;
  for (uint64_t m = 46; m != 128; ++m)
    float v32 = v32 + v48[m];
  uint64_t v34 = 0;
  *(float *)(v6 + 20) = v32;
  float v35 = 0.0;
  do
  {
    float v36 = v51[v34];
    if (v36 > v35)
    {
      *(float *)(v6 + 48) = v36;
      float v35 = v36;
    }
    float v37 = *(float *)&v50[v34];
    if (v37 > v35)
    {
      *(float *)(v6 + 48) = v37;
      float v35 = v37;
    }
    float v38 = *(float *)&v49[v34];
    if (v38 > v35)
    {
      *(float *)(v6 + 48) = v38;
      float v35 = v38;
    }
    ++v34;
  }
  while (v34 != 128);
  v51[0] = 0.0;
  sub_1014F083C((uint64_t)v47, v51, (unsigned __int16 *)(v4 + 16));
  uint64_t v39 = 0;
  float v40 = 0.0;
  do
  {
    float v41 = v51[v39];
    if (v41 > v35)
    {
      *(float *)(v6 + 48) = v41;
      float v35 = v41;
    }
    if (v41 > v40)
    {
      *(float *)(v6 + 40) = (float)(int)v39;
      *(float *)(v6 + 44) = v41;
      float v40 = v41;
    }
    ++v39;
  }
  while (v39 != 128);
  uint64_t v42 = 0;
  float v43 = 0.0;
  do
    float v43 = v43 + v51[v42++];
  while (v42 != 128);
  uint64_t v44 = 0;
  float v45 = 0.0;
  do
  {
    float v46 = v51[v44];
    if (v46 != 0.0) {
      float v45 = v45 - (float)(logf(v46 / v43) * (float)(v46 / v43));
    }
    ++v44;
  }
  while (v44 != 128);
  *(float *)(v6 + 36) = v45;
}

void sub_1011C03F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 4) = sub_1011BF750(a1, 10, 0);
  float v4 = sub_1011BF750(a1, 50, 0);
  *(float *)(a2 + 8) = v4;
  if (*(unsigned char *)a1)
  {
    sub_1004184F0(a1);
    float v5 = *(float *)(a1 + 4);
    if (*(unsigned char *)a1) {
      sub_1004184F0(a1);
    }
  }
  else
  {
    float v5 = *(float *)(a1 + 4);
  }
  float v6 = sqrtf(*(float *)(a1 + 8)) / v5;
  if (v5 == 0.0) {
    float v6 = 1000.0;
  }
  *(float *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)a2 = sub_1011C071C(a1, v4);
  *(float *)(a2 + 16) = sub_1011BF858(a1, v4);
}

void sub_1011C04BC(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0;
  float v5 = a1 + 14;
  float v6 = a1 + 538;
  float v7 = a1 + 1062;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  do
  {
    float v11 = (float *)sub_1004182C4(v5, v4);
    float v8 = v8 + (float)(*v11 * *v11);
    unint64_t v12 = (float *)sub_1004182C4(v6, v4);
    float v9 = v9 + (float)(*v12 * *v12);
    uint64_t v13 = (float *)sub_1004182C4(v7, v4);
    float v10 = v10 + (float)(*v13 * *v13);
    ++v4;
  }
  while (v4 != 256);
  if (v8 <= v9 || v8 <= v10)
  {
    if (v9 <= v8 || v9 <= v10) {
      uint64_t v16 = (uint64_t)(a1 + 1054);
    }
    else {
      uint64_t v16 = (uint64_t)(a1 + 530);
    }
  }
  else
  {
    uint64_t v16 = (uint64_t)(a1 + 6);
  }
  *(float *)a2 = sub_1011BF750(v16, 25, 0);
  float v17 = sub_1011BF750(v16, 90, 0);
  if (v9 <= v10) {
    float v18 = v10;
  }
  else {
    float v18 = v9;
  }
  if (v8 > v18) {
    float v18 = v8;
  }
  *(float *)(a2 + 4) = v17;
  *(float *)(a2 + 8) = v18;
  sub_1014F0838(v27);
  sub_1014F083C((uint64_t)v27, v28, (unsigned __int16 *)(v16 + 16));
  uint64_t v19 = 0;
  *(_DWORD *)(a2 + 12) = 0;
  float v20 = 0.0;
  do
  {
    float v21 = v28[v19];
    if (v21 > v20)
    {
      *(float *)(a2 + 12) = (float)(int)v19;
      float v20 = v21;
    }
    ++v19;
  }
  while (v19 != 128);
  uint64_t v22 = 0;
  float v23 = 0.0;
  do
    float v23 = v23 + v28[v22++];
  while (v22 != 128);
  uint64_t v24 = 0;
  float v25 = 0.0;
  do
  {
    float v26 = v28[v24];
    if (v26 != 0.0) {
      float v25 = v25 - (float)(logf(v26 / v23) * (float)(v26 / v23));
    }
    ++v24;
  }
  while (v24 != 128);
  *(float *)(a2 + 16) = v25;
}

float sub_1011C06B0(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v2 = a1 + 12;
  if (v3) {
    sub_1004184F0(v2);
  }
  float v4 = *(float *)(a1 + 20);
  if (*(unsigned char *)(a1 + 1060)) {
    sub_1004184F0(a1 + 1060);
  }
  if (*(unsigned char *)(a1 + 2108)) {
    sub_1004184F0(a1 + 2108);
  }
  return sqrtf(v4);
}

float sub_1011C071C(uint64_t a1, float a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 18);
  float v3 = 0.0;
  if (v2 >= 2)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (v2 - 1);
    float v7 = (unsigned __int16 *)(a1 + 16);
    do
    {
      if (*(float *)sub_1004182C4(v7, v5) > a2 && *(float *)sub_1004182C4(v7, v5 + 1) <= a2)
      {
        float v3 = v3 + 1.0;
        ++v5;
      }
      else
      {
        float v8 = (float *)sub_1004182C4(v7, v5++);
        if (*v8 <= a2 && *(float *)sub_1004182C4(v7, v5) > a2) {
          float v3 = v3 + 1.0;
        }
      }
    }
    while (v5 != v6);
  }
  return v3;
}

float sub_1011C07F8(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v2 = a1 + 12;
  if (v3) {
    sub_1004184F0(v2);
  }
  float v4 = *(float *)(a1 + 16);
  if (*(unsigned char *)(a1 + 1060)) {
    sub_1004184F0(a1 + 1060);
  }
  if (*(unsigned char *)(a1 + 2108)) {
    sub_1004184F0(a1 + 2108);
  }
  return v4;
}

float sub_1011C0860(unsigned __int16 *a1, unint64_t a2)
{
  float v4 = *(float *)sub_1004182C4(a1 + 14, a2);
  sub_1004182C4(a1 + 538, a2);
  sub_1004182C4(a1 + 1062, a2);
  return v4;
}

BOOL sub_1011C08C0(float *a1, float *a2)
{
  return *a1 > *a2;
}

uint64_t sub_1011C08D4(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1023177A0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = off_1022B6DB8;
  float v11 = operator new(0x20uLL);
  v11[1] = 0;
  v11[2] = 0;
  *float v11 = off_1022B6DF0;
  *(void *)(a1 + 72) = v11;
  *((_DWORD *)v11 + 6) = 31337;
  *(void *)(a1 + 64) = v11 + 3;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v12 = mach_continuous_time();
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a3;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = -1;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonIdentifiableClient(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v13, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102317820);
  }
  BOOL v14 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    *(_DWORD *)long long buf = 68289794;
    int v27 = 0;
    __int16 v28 = 2082;
    float v29 = "";
    __int16 v30 = 2082;
    int v31 = "activity";
    __int16 v32 = 2114;
    uint64_t v33 = v15;
    __int16 v34 = 2050;
    uint64_t v35 = a1;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonIdentifiableClient(ctor)\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x30u);
  }
  *(unsigned char *)(a1 + 80) = [[objc_msgSend(a4, "objectForKey:", @"SDKAtLeast2024") boolValue];
  sub_1007A4B80(*(id **)(a1 + 24), *(void *)(a1 + 16));
  uint64_t v16 = sub_100068950(*(void *)(a1 + 24), *(void *)(a1 + 16), &xmmword_101D82EB8);
  *(void *)(a1 + 40) = v16;
  float v17 = v16;
  id v18 = [objc_msgSend(*(id *)(a1 + 32), "silo") newTimer];
  *(void *)(a1 + 176) = v18;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1011C0D8C;
  v24[3] = &unk_1022A3020;
  v24[4] = a1;
  [v18 setHandler:v24];
  if (*(void *)(a1 + 128))
  {
    CLConnection::setDefaultMessageHandler();
    CLConnection::start(*(CLConnection **)(a1 + 128));
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102317820);
    }
    uint64_t v19 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      float v20 = *(const char **)(a1 + 16);
      *(_DWORD *)long long buf = 68289538;
      int v27 = 0;
      __int16 v28 = 2082;
      float v29 = "";
      __int16 v30 = 2114;
      int v31 = v20;
      __int16 v32 = 2050;
      uint64_t v33 = a1;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonIdentifiableClient(ctor) #dic butterfly is created\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
    }
    float v21 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v22 = *(const char **)(a1 + 16);
      *(_DWORD *)long long buf = 68289538;
      int v27 = 0;
      __int16 v28 = 2082;
      float v29 = "";
      __int16 v30 = 2114;
      int v31 = v22;
      __int16 v32 = 2050;
      uint64_t v33 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLDaemonIdentifiableClient(ctor) #dic butterfly is created", "{\"msg%{public}.0s\":\"CLDaemonIdentifiableClient(ctor) #dic butterfly is created\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  sub_1007C000C(*(void *)(a1 + 24), *(void **)(a1 + 16), 0, 0, 0, *(unsigned char *)(a1 + 80) == 0, 1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_1011C0D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  sub_10012E38C(v19);
  _Unwind_Resume(a1);
}

void sub_1011C0D8C(uint64_t a1)
{
}

void sub_1011C0D94(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102317820);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    v5[0] = 68289538;
    v5[1] = 0;
    __int16 v6 = 2082;
    float v7 = "";
    __int16 v8 = 2114;
    uint64_t v9 = v3;
    __int16 v10 = 2050;
    uint64_t v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#dic procesAssertion timer fired\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v5, 0x26u);
  }
  [*(id *)(a1 + 176) setNextFireDelay:1.79769313e308];
  float v4 = *(void **)(a1 + 168);
  if (v4)
  {
    [v4 invalidate];

    *(void *)(a1 + 168) = 0;
  }
}

BOOL sub_1011C0EB4(uint64_t a1)
{
  return *(void *)(a1 + 128) == 0;
}

void sub_1011C0EC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1011C0F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011C0F50(uint64_t a1)
{
  *(void *)a1 = off_1023177A0;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102317820);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"~CLDaemonIdentifiableClient(dtor)\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v7, 0x26u);
  }
  sub_1007C000C(*(void *)(a1 + 24), *(void **)(a1 + 16), 0, 0, 0, *(unsigned char *)(a1 + 80) == 0, 0);
  uint64_t v4 = *(void **)(a1 + 176);
  if (v4)
  {
    [v4 invalidate];

    *(void *)(a1 + 176) = 0;
  }
  unint64_t v5 = *(void **)(a1 + 168);
  if (v5)
  {
    [v5 invalidate];

    *(void *)(a1 + 168) = 0;
  }

  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10118EB8C((void ***)(a1 + 144), 0);
  sub_10012E38C((void *)(a1 + 56));
  return a1;
}

void sub_1011C10E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011C10F8(uint64_t a1)
{
  sub_1011C0F50(a1);

  operator delete();
}

NSMutableDictionary *sub_1011C1130(CLConnection **a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionaryWithDictionary:(*((uint64_t (**)(CLConnection **))*a1 + 5))(a1)];
  [(NSMutableDictionary *)v2 setObject:[(CLConnection *)a1[2] clientKey] forKeyedSubscript:@"ClientKeyPath"];
  [(NSMutableDictionary *)v2 setObject:+[NSNumber numberWithUnsignedLong:a1[5]] forKeyedSubscript:@"AuthContext"];
  [(NSMutableDictionary *)v2 setObject:+[NSNumber numberWithUnsignedInt:(*((uint64_t (**)(CLConnection **))*a1 + 3))(a1)] forKeyedSubscript:@"Type"];
  uint64_t v3 = (*((uint64_t (**)(CLConnection **))*a1 + 5))(a1);
  if (v3) {
    [(NSMutableDictionary *)v2 setObject:v3 forKeyedSubscript:@"RehydrationPayload"];
  }
  uint64_t v4 = a1[16];
  if (v4)
  {
    [(NSMutableDictionary *)v2 setObject:+[NSNumber numberWithInt:CLConnection::getRemotePid(v4)] forKeyedSubscript:@"PID"];
    CLConnection::getAuditToken(v6, a1[16]);
    [(NSMutableDictionary *)v2 setObject:[(CLClientKeyPath *)sub_1000B5784() clientKey] forKeyedSubscript:@"NaturalConnectedIdentity"];
  }
  return v2;
}

void sub_1011C12C8(id *a1, void *a2)
{
  unsigned __int8 v4 = [a1[5] isEqual:a2];
  id v5 = a2;

  a1[5] = a2;
  if ((v4 & 1) == 0)
  {
    __int16 v6 = (void (*)(id *))*((void *)*a1 + 7);
    v6(a1);
  }
}

void sub_1011C135C(uint64_t a1)
{
  *(unsigned char *)(a1 + 160) = 0;
}

void sub_1011C1390(uint64_t a1, double a2)
{
  uint64_t v5 = *(void *)(a1 + 64);
  unsigned __int8 v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v4);
  }
  id v6 = [*(id *)(a1 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_1011C14A4;
  v7[3] = &unk_1022F0798;
  v7[4] = a1;
  v7[5] = v5;
  __int16 v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  [v6 afterInterval:v7 async:a2];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1011C1478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C14A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    if (*(void *)(v1 + 8) != -1) {
      sub_1007B3BD8(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 32));
    }
  }
}

void sub_1011C1528(uint64_t a1)
{
}

id sub_1011C1534(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 168))
  {
    if (*((char *)a2 + 23) >= 0) {
      id v6 = a2;
    }
    else {
      id v6 = (uint64_t *)*a2;
    }
    __int16 v28 = +[RBSDomainAttribute attributeWithDomain:name:](RBSDomainAttribute, "attributeWithDomain:name:", @"com.apple.locationd", +[NSString stringWithUTF8String:v6]);
    float v7 = +[NSArray arrayWithObjects:&v28 count:1];
    id v8 = objc_alloc((Class)RBSAssertion);
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = (uint64_t *)*a3;
    }
    id v10 = [v8 initWithExplanation:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9) target:+[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", CLConnection::getRemotePid(*(CLConnection **)(a1 + 128))) attributes:v7];
    *(void *)(a1 + 168) = v10;
    uint64_t v17 = 0;
    if ([v10 acquireWithError:&v17])
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
      uint64_t v11 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 68289538;
        int v19 = 0;
        __int16 v20 = 2082;
        float v21 = "";
        __int16 v22 = 2114;
        uint64_t v23 = v12;
        __int16 v24 = 2050;
        uint64_t v25 = a1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic processAssertion acquired\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102317840);
      }
      uint64_t v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        uint64_t v14 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 68289794;
        int v19 = 0;
        __int16 v20 = 2082;
        float v21 = "";
        __int16 v22 = 2114;
        uint64_t v23 = v14;
        __int16 v24 = 2050;
        uint64_t v25 = a1;
        __int16 v26 = 2114;
        uint64_t v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dic couldn't initialize process assertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"error\":%{public, location:escape_only}@}", buf, 0x30u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102317840);
        }
      }
      uint64_t v15 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v16 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 68289794;
        int v19 = 0;
        __int16 v20 = 2082;
        float v21 = "";
        __int16 v22 = 2114;
        uint64_t v23 = v16;
        __int16 v24 = 2050;
        uint64_t v25 = a1;
        __int16 v26 = 2114;
        uint64_t v27 = v17;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic couldn't initialize process assertion", "{\"msg%{public}.0s\":\"#dic couldn't initialize process assertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"error\":%{public, location:escape_only}@}", buf, 0x30u);
      }
    }
  }
  return [*(id *)(a1 + 176) setNextFireDelay:10.0];
}

void sub_1011C187C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  id v10 = (const std::string *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  if (!std::string::compare(v10, "kCLConnectionMessageDiagnostics"))
  {
    if (*(void *)(a1 + 128))
    {
      if ([*(id *)(a1 + 40) isNonProvisionallyAuthorizedForServiceTypeMask:a3]) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_29:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102317840);
    }
    uint64_t v29 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v30 = *(void *)(a1 + 16);
    uint64_t v31 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v31 + 23) >= 0) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = *(void *)v31;
    }
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v52 = 2082;
    uint64_t v53 = "";
    __int16 v54 = 2114;
    uint64_t v55 = v30;
    __int16 v56 = 2082;
    *(void *)double v57 = v32;
    *(_WORD *)&v57[8] = 2050;
    *(void *)&v57[10] = a1;
    uint64_t v17 = "{\"msg%{public}.0s\":\"disconnected #dic skip sending diagnostic mask\", \"ClientKeyPath\":%{public, location:"
          "escape_only}@, \"msg\":%{public, location:escape_only}s, \"self\":\"%{public}p\"}";
    id v18 = v29;
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
LABEL_36:
    uint32_t v20 = 48;
    goto LABEL_37;
  }
  uint64_t v11 = (const std::string *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v12 = std::string::compare(v11, "kCLConnectionMessageLocationUnavailable");
  int v13 = v12;
  if (!*(void *)(a1 + 128))
  {
    if (v12)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
      uint64_t v25 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = *(void *)(a1 + 16);
        int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        *(_DWORD *)long long buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v52 = 2082;
        uint64_t v53 = "";
        __int16 v54 = 2114;
        uint64_t v55 = v26;
        __int16 v56 = 1026;
        *(_DWORD *)double v57 = v27;
        *(_WORD *)&v57[4] = 2050;
        *(void *)&v57[6] = a1;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic sending message to disconnected client. skip messageSending and performAppLaunch\", \"ClientKeyPath\":%{public, location:escape_only}@, \"dicType\":%{public}d, \"this\":\"%{public}p\"}", buf, 0x2Cu);
      }
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLApplicationLifecycleManager"), "launchApplication:requiringAuthForServiceMask:", objc_msgSend(*(id *)(a1 + 16), "legacyClientKey"), a3];
      if (!*(void *)(a1 + 104)) {
        *(void *)(a1 + 104) = mach_continuous_time();
      }
      __int16 v28 = *(uint64_t **)(a1 + 144);
      if (v28) {
        sub_1011C2024(v28, (long long *)a2);
      }
      return;
    }
    goto LABEL_29;
  }
  if (([*(id *)(a1 + 40) isNonProvisionallyAuthorizedForServiceTypeMask:a3] & 1) == 0)
  {
LABEL_13:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102317820);
    }
    uint64_t v21 = qword_102419528;
    if (!os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO)) {
      return;
    }
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v23 + 23) >= 0) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = *(void *)v23;
    }
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v52 = 2082;
    uint64_t v53 = "";
    __int16 v54 = 2114;
    uint64_t v55 = v22;
    __int16 v56 = 2050;
    *(void *)double v57 = a1;
    *(_WORD *)&v57[8] = 2082;
    *(void *)&v57[10] = v24;
    uint64_t v17 = "{\"msg%{public}.0s\":\"Client not NonProvisionally authorized for message.\", \"ClientKeyPath\":%{public, loca"
          "tion:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}";
    id v18 = v21;
    os_log_type_t v19 = OS_LOG_TYPE_INFO;
    goto LABEL_36;
  }
  if (v13) {
    goto LABEL_38;
  }
LABEL_8:
  if (*(void *)(a1 + 152) != objc_msgSend(objc_msgSend((id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2), "objectForKeyedSubscript:", @"kCLConnectionMessageDiagnosticsKey"), "unsignedIntValue"))
  {
LABEL_38:
    if ([(id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2) allKeys].containsObject(@"kCLConnectionMessageDiagnosticsKey")) *(void *)(a1 + 152) = [(id)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2) objectForKeyedSubscript:@"kCLConnectionMessageDiagnosticsKey"] unsignedIntValue]; {
    sub_100134750(buf, "Location");
    }
    sub_100134750(__p, "Location subscription");
    sub_1011C1534(a1, (uint64_t *)buf, (uint64_t *)__p);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE3(v55) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v33 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v48 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v48) {
      sub_1000DB0A0(v48);
    }
    if (a4) {
      return;
    }
    if ((a3 & 0x13) == 0)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
      float v43 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        uint64_t v44 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v52 = 2082;
        uint64_t v53 = "";
        __int16 v54 = 2114;
        uint64_t v55 = v44;
        __int16 v56 = 2050;
        *(void *)double v57 = a1;
        *(_WORD *)&v57[8] = 1026;
        *(_DWORD *)&v57[10] = a3;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"passed in service type mask is not supported for #dic\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"serviceTypeMask\":%{public}d}", buf, 0x2Cu);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102317820);
        }
      }
      float v45 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v46 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v52 = 2082;
        uint64_t v53 = "";
        __int16 v54 = 2114;
        uint64_t v55 = v46;
        __int16 v56 = 2050;
        *(void *)double v57 = a1;
        *(_WORD *)&v57[8] = 1026;
        *(_DWORD *)&v57[10] = a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "passed in service type mask is not supported for #dic", "{\"msg%{public}.0s\":\"passed in service type mask is not supported for #dic\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"serviceTypeMask\":%{public}d}", buf, 0x2Cu);
      }
      return;
    }
    if ((a3 & 2) != 0) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = ~(4 * (_BYTE)a3) & 4;
    }
    int v35 = *(unsigned __int8 *)(a1 + 160);
    if (!*(unsigned char *)(a1 + 160)) {
      *(unsigned char *)(a1 + 160) = 1;
    }
    uint64_t v37 = *(void *)(a1 + 24);
    float v36 = (uint64_t *)(a1 + 24);
    float v38 = v36 - 1;
    sub_100102A58(v37, *(v36 - 1), v34, v35 == 0, a5);
    uint64_t v39 = *v36;
    uint64_t v40 = *v38;
    float v41 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    int v42 = *((char *)v41 + 23);
    if (v42 < 0)
    {
      if (v41[1] != 39)
      {
LABEL_68:
        BOOL v47 = 1;
        goto LABEL_69;
      }
      float v41 = (void *)*v41;
    }
    else if (v42 != 39)
    {
      goto LABEL_68;
    }
    BOOL v47 = memcmp(v41, "kCLConnectionMessageCompensatedLocation", 0x27uLL) != 0;
LABEL_69:
    sub_100103838(v39, v40, v47, 1);
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102317840);
  }
  uint64_t v14 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 152);
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v52 = 2082;
    uint64_t v53 = "";
    __int16 v54 = 2114;
    uint64_t v55 = v15;
    __int16 v56 = 2050;
    *(void *)double v57 = a1;
    *(_WORD *)&v57[8] = 1026;
    *(_DWORD *)&v57[10] = v16;
    uint64_t v17 = "{\"msg%{public}.0s\":\"#dic skip sending diagnostic mask - same as last one\", \"ClientKeyPath\":%{public, loc"
          "ation:escape_only}@, \"self\":\"%{public}p\", \"DiagnosticMask\":%{public}d}";
    id v18 = v14;
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    uint32_t v20 = 44;
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, buf, v20);
  }
}

void sub_1011C1FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1011C2024(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  float v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_1011C3F10(a1, v18);
    uint64_t v9 = (void *)a1[1];
    double result = sub_1000C5898(v18);
  }
  else
  {
    *float v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1011C212C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

void sub_1011C2140(void *a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102317820);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[2];
    BOOL v4 = a1[16] == 0;
    int v13 = 68289794;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2114;
    uint64_t v18 = v3;
    __int16 v19 = 2050;
    uint32_t v20 = a1;
    __int16 v21 = 1026;
    BOOL v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic handleDisconnection\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"isDisconnected\":%{public}hhd}", (uint8_t *)&v13, 0x2Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102317820);
    }
  }
  unint64_t v5 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v6 = a1[2];
    BOOL v7 = a1[16] == 0;
    int v13 = 68289794;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2114;
    uint64_t v18 = v6;
    __int16 v19 = 2050;
    uint32_t v20 = a1;
    __int16 v21 = 1026;
    BOOL v22 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic handleDisconnection", "{\"msg%{public}.0s\":\"#dic handleDisconnection\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"isDisconnected\":%{public}hhd}", (uint8_t *)&v13, 0x2Cu);
  }
  uint64_t v8 = (CLConnection *)a1[16];
  if (v8)
  {
    CLConnection::deferredDelete(v8);
    a1[16] = 0;
    a1[14] = mach_continuous_time();
  }
  if ((*(unsigned int (**)(void *))(*a1 + 64))(a1))
  {
    sub_1011C1390((uint64_t)a1, 0.0);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102317820);
    }
    uint64_t v9 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[2];
      int v13 = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2114;
      uint64_t v18 = v10;
      __int16 v19 = 2050;
      uint32_t v20 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic handleDisconnection - destruction deferred - becoming a butterfly\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
    }
    unint64_t v11 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v12 = a1[2];
      int v13 = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2114;
      uint64_t v18 = v12;
      __int16 v19 = 2050;
      uint32_t v20 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic handleDisconnection - destruction deferred - becoming a butterfly", "{\"msg%{public}.0s\":\"#dic handleDisconnection - destruction deferred - becoming a butterfly\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x26u);
    }
  }
}

uint64_t sub_1011C24A0(uint64_t result)
{
  *(unsigned char *)(result + 48) = 1;
  return result;
}

uint64_t sub_1011C24AC(double a1, double a2)
{
  uint64_t result = 0;
  if (a2 >= -180.0 && a1 <= 90.0 && a1 >= -90.0 && a2 <= 180.0)
  {
    BOOL v3 = fabs(a1) >= 0.0000001;
    return fabs(a2) >= 0.0000001 || v3;
  }
  return result;
}

void sub_1011C2514(uint64_t a1)
{
  [*(id *)(a1 + 32) silo];
  *(void *)(a1 + 120) = mach_continuous_time();
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v2);
  }
  id v4 = [*(id *)(a1 + 32) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  _DWORD v5[2] = sub_1011C262C;
  v5[3] = &unk_1022F0798;
  v5[4] = a1;
  v5[5] = v3;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  [v4 afterInterval:v5 async:5.0];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1011C2600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C262C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1011C26B0;
  v3[3] = &unk_1022A3020;
  v3[4] = v1;
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    if (*(void *)(v2 + 8) != -1) {
      sub_1011C26B0((uint64_t)v3);
    }
  }
}

void sub_1011C26B0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = mach_continuous_time();
  uint64_t v3 = v1[15];
  if (v3)
  {
    BOOL v4 = v2 >= v3;
    unint64_t v5 = v2 - v3;
    if (v4)
    {
      double v16 = sub_1000D3D90(v5);
      if (v16 >= 3.0)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102317820);
        }
        __int16 v21 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = v1[2];
          int v23 = 68289538;
          int v24 = 0;
          __int16 v25 = 2082;
          uint64_t v26 = "";
          __int16 v27 = 2114;
          uint64_t v28 = v22;
          __int16 v29 = 2050;
          double v30 = *(double *)&v1;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic retirement completed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v23, 0x26u);
        }
        sub_1007B3BD8(v1[3], (unint64_t)v1);
      }
      else
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102317820);
        }
        __int16 v17 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
        {
          uint64_t v18 = v1[2];
          int v23 = 68289794;
          int v24 = 0;
          __int16 v25 = 2082;
          uint64_t v26 = "";
          __int16 v27 = 2114;
          uint64_t v28 = v18;
          __int16 v29 = 2050;
          double v30 = v16;
          __int16 v31 = 2050;
          uint64_t v32 = v1;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dic retirement tickstamp is too early, skip retirement\", \"ClientKeyPath\":%{public, location:escape_only}@, \"timeDifferenceInSeconds\":\"%{public}.6f\", \"this\":\"%{public}p\"}", (uint8_t *)&v23, 0x30u);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_102317820);
          }
        }
        uint64_t v19 = qword_102419528;
        if (os_signpost_enabled((os_log_t)qword_102419528))
        {
          uint64_t v20 = v1[2];
          int v23 = 68289794;
          int v24 = 0;
          __int16 v25 = 2082;
          uint64_t v26 = "";
          __int16 v27 = 2114;
          uint64_t v28 = v20;
          __int16 v29 = 2050;
          double v30 = v16;
          __int16 v31 = 2050;
          uint64_t v32 = v1;
          uint64_t v10 = "#dic retirement tickstamp is too early, skip retirement";
          unint64_t v11 = "{\"msg%{public}.0s\":\"#dic retirement tickstamp is too early, skip retirement\", \"ClientKeyPath\":%{pu"
                "blic, location:escape_only}@, \"timeDifferenceInSeconds\":\"%{public}.6f\", \"this\":\"%{public}p\"}";
          uint64_t v12 = v19;
          uint32_t v13 = 48;
          goto LABEL_22;
        }
      }
    }
    else
    {
      v1[15] = 0;
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
      uint64_t v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        uint64_t v7 = v1[2];
        int v23 = 68289538;
        int v24 = 0;
        __int16 v25 = 2082;
        uint64_t v26 = "";
        __int16 v27 = 2114;
        uint64_t v28 = v7;
        __int16 v29 = 2050;
        double v30 = *(double *)&v1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dic #error retirement tickstamp should not be greater than 'now'\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v23, 0x26u);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102317820);
        }
      }
      uint64_t v8 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v9 = v1[2];
        int v23 = 68289538;
        int v24 = 0;
        __int16 v25 = 2082;
        uint64_t v26 = "";
        __int16 v27 = 2114;
        uint64_t v28 = v9;
        __int16 v29 = 2050;
        double v30 = *(double *)&v1;
        uint64_t v10 = "#dic #error retirement tickstamp should not be greater than 'now'";
        unint64_t v11 = "{\"msg%{public}.0s\":\"#dic #error retirement tickstamp should not be greater than 'now'\", \"ClientKeyPat"
              "h\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}";
        uint64_t v12 = v8;
        uint32_t v13 = 38;
LABEL_22:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v10, v11, (uint8_t *)&v23, v13);
      }
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102317820);
    }
    int v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = v1[2];
      int v23 = 68289538;
      int v24 = 0;
      __int16 v25 = 2082;
      uint64_t v26 = "";
      __int16 v27 = 2114;
      uint64_t v28 = v15;
      __int16 v29 = 2050;
      double v30 = *(double *)&v1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#dic abandoning retirement because client has already stopped running\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v23, 0x26u);
    }
  }
}

uint64_t sub_1011C2B48(uint64_t result)
{
  *(void *)(result + 120) = 0;
  return result;
}

uint64_t sub_1011C2B50()
{
  return AnalyticsSendEventLazy();
}

NSDictionary *sub_1011C2BC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = mach_continuous_time();
  unint64_t v4 = *(void *)(v2 + 96);
  double v5 = -1.0;
  double v6 = -1.0;
  if (v3 >= v4) {
    double v6 = sub_1000D3D90(v3 - v4);
  }
  unint64_t v7 = *(void *)(v2 + 112);
  if (v3 >= v7)
  {
    double v5 = sub_1000D3D90(v3 - v7);
    unint64_t v7 = *(void *)(v2 + 112);
    if (!v7)
    {
      double v9 = -1.0;
      goto LABEL_11;
    }
  }
  unint64_t v8 = *(void *)(v2 + 104);
  if (v8 <= v7)
  {
    unint64_t v14 = *(void *)(v2 + 8);
    double v9 = -1.0;
    unint64_t v13 = v14 - v7;
    if (v14 > v7) {
      goto LABEL_9;
    }
LABEL_11:
    double v12 = -1.0;
    goto LABEL_12;
  }
  double v9 = sub_1000D3D90(v8 - v7);
  unint64_t v10 = *(void *)(v2 + 8);
  unint64_t v11 = *(void *)(v2 + 104);
  double v12 = -1.0;
  unint64_t v13 = v10 - v11;
  if (v10 > v11) {
LABEL_9:
  }
    double v12 = sub_1000D3D90(v13);
LABEL_12:
  CFStringRef v15 = (const __CFString *)[*(id *)(v2 + 16) clientAnchorWithType];
  if (v15) {
    CFStringRef v16 = v15;
  }
  else {
    CFStringRef v16 = &stru_10234F018;
  }
  CFStringRef v17 = (const __CFString *)[*(id *)(v2 + 16) subIdentityIdWithType];
  if (v17) {
    CFStringRef v18 = v17;
  }
  else {
    CFStringRef v18 = &stru_10234F018;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102317840);
  }
  uint64_t v19 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    int v20 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)long long buf = 68291074;
    int v25 = 0;
    __int16 v26 = 2082;
    __int16 v27 = "";
    __int16 v28 = 2114;
    CFStringRef v29 = v16;
    __int16 v30 = 2114;
    CFStringRef v31 = v18;
    __int16 v32 = 1026;
    int v33 = v20;
    __int16 v34 = 2050;
    double v35 = v9;
    __int16 v36 = 2050;
    double v37 = v12;
    __int16 v38 = 2050;
    double v39 = v5;
    __int16 v40 = 2050;
    double v41 = v6;
    __int16 v42 = 2050;
    uint64_t v43 = v2;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#dic sending event to coreanalytics\", \"Anchor\":%{public, location:escape_only}@, \"SubIdentity\":%{public, location:escape_only}@, \"DICType\":%{public}d, \"StingDelay\":\"%{public}.6f\", \"EatDelay\":\"%{public}.6f\", \"DisconnectToDeathDelay\":\"%{public}.6f\", \"TotalDuration\":\"%{public}.6f\", \"this\":\"%{public}p\"}", buf, 0x5Eu);
  }
  v23[0] = v16;
  v23[1] = v18;
  v23[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40), @"Anchor", @"SubIdentity", @"DICType"];
  v22[3] = @"StingDelay";
  v23[3] = +[NSNumber numberWithDouble:v9];
  v22[4] = @"EatDelay";
  v23[4] = +[NSNumber numberWithDouble:v12];
  v22[5] = @"DisconnectToDeathDelay";
  v23[5] = +[NSNumber numberWithDouble:v5];
  v22[6] = @"TotalDuration";
  v23[6] = +[NSNumber numberWithDouble:v6];
  return +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:7];
}

uint64_t sub_1011C2E94(uint64_t a1)
{
  if (!*(void *)(a1 + 128)) {
    sub_101AA5844();
  }

  return CLConnection::isEntitled();
}

uint64_t sub_1011C2EC4(uint64_t a1, int a2)
{
  uint64_t v4 = 7;
  if (a2 == 7) {
    uint64_t v4 = 1031;
  }
  if (a2 == 9) {
    uint64_t v5 = 2055;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = (unint64_t)[*(id *)(a1 + 40) diagnosticMask] & v5;
  if (sub_10010145C())
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102317820);
    }
    unint64_t v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 16);
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = v8;
      __int16 v23 = 2050;
      uint64_t v24 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#dic failureReason sharing mode enabled\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
    }
    v6 |= 4uLL;
  }
  if ((sub_1000B558C(*(void *)(a1 + 24), *(void *)(a1 + 16)) & 1) != 0
    || [*(id *)(a1 + 16) isAuthLimited])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102317820);
    }
    double v9 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 16);
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = v10;
      __int16 v23 = 2050;
      uint64_t v24 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Warning #dic #AutoPrompt System services may not request authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
    }
    unint64_t v11 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v12 = *(void *)(a1 + 16);
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = v12;
      __int16 v23 = 2050;
      uint64_t v24 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Warning #dic #AutoPrompt System services may not request authorization", "{\"msg%{public}.0s\":\"Warning #dic #AutoPrompt System services may not request authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
    }
    v6 |= 1uLL;
  }
  if ([*(id *)(a1 + 40) inUseLevelIsAtLeast:5]) {
    uint64_t v13 = v6;
  }
  else {
    uint64_t v13 = v6 | 0x10;
  }
  if (sub_1007DB3BC(*(void *)(a1 + 24)) && !sub_10079F3F0(*(void **)(a1 + 16)))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102317820);
    }
    unint64_t v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      int v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = v15;
      __int16 v23 = 2050;
      uint64_t v24 = a1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic #AuthPrompt Authorization request ignored, at lock-screen\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
    }
    v13 |= 4uLL;
  }
  if (a2 == 7
    && [*(id *)(a1 + 40) registrationResult] == 4
    && [*(id *)(a1 + 40) transientAwareRegistrationResult] == 1)
  {
    return v13 | 4;
  }
  return v13;
}

void sub_1011C326C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (_os_feature_enabled_impl())
  {
    if (sub_1007A5C78(*(void *)(a1 + 24)))
    {
      double v6 = sub_1007DB3B0(*(void *)(a1 + 24));
      [objc_msgSend(*(id *)(a1 + 32), "silo") currentLatchedAbsoluteTimestamp];
      double v8 = v7 - v6;
      if (v8 < 900.0)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102317820);
        }
        uint64_t v9 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          sub_1007A5C88(*(void *)(a1 + 24));
          unint64_t v10 = sub_1007A5C88(*(void *)(a1 + 24));
          id v11 = sub_1007A5CA0(*(void *)(a1 + 24));
          unint64_t v12 = *(void *)(a1 + 16);
          *(_DWORD *)long long buf = 68290306;
          int v39 = 0;
          __int16 v40 = 2082;
          double v41 = "";
          __int16 v42 = 2050;
          unint64_t v43 = v10;
          __int16 v44 = 2114;
          id v45 = v11;
          __int16 v46 = 2114;
          unint64_t v47 = v12;
          __int16 v48 = 2050;
          uint64_t v49 = a1;
          __int16 v50 = 2050;
          *(void *)&double v51 = (uint64_t)v8;
          uint64_t v13 = "{\"msg%{public}.0s\":\"#dic #AutoPrompt ignored inflight request found\", \"existingRequestType\":%{publ"
                "ic, location:CLClientManager_Type::AuthorizationRequestType}lld, \"existingClientKey\":%{public, locatio"
                "n:escape_only}@, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"Inflight"
                "RequestSquattingDurationSeconds\":%{public}ld}";
          unint64_t v14 = v9;
          uint32_t v15 = 68;
LABEL_30:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
          return;
        }
        return;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102317820);
      }
      __int16 v19 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
      {
        unint64_t v20 = *(void *)(a1 + 16);
        id v21 = sub_1007A5CA0(*(void *)(a1 + 24));
        sub_1007A5C88(*(void *)(a1 + 24));
        unsigned int v22 = sub_1007A5C88(*(void *)(a1 + 24));
        *(_DWORD *)long long buf = 68290306;
        int v39 = 0;
        __int16 v40 = 2082;
        double v41 = "";
        __int16 v42 = 2114;
        unint64_t v43 = v20;
        __int16 v44 = 2050;
        id v45 = (id)a1;
        __int16 v46 = 2114;
        unint64_t v47 = (unint64_t)v21;
        __int16 v48 = 2050;
        uint64_t v49 = v22;
        __int16 v50 = 2050;
        double v51 = v8 / 60.0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"squattingClient\":%{public, location:escape_only}@, \"squattingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"InflightRequestSquattingDurationMinutes\":\"%{public}.2f\"}", buf, 0x44u);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102317820);
        }
      }
      __int16 v23 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        unint64_t v24 = *(void *)(a1 + 16);
        id v25 = sub_1007A5CA0(*(void *)(a1 + 24));
        sub_1007A5C88(*(void *)(a1 + 24));
        unsigned int v26 = sub_1007A5C88(*(void *)(a1 + 24));
        *(_DWORD *)long long buf = 68290306;
        int v39 = 0;
        __int16 v40 = 2082;
        double v41 = "";
        __int16 v42 = 2114;
        unint64_t v43 = v24;
        __int16 v44 = 2050;
        id v45 = (id)a1;
        __int16 v46 = 2114;
        unint64_t v47 = (unint64_t)v25;
        __int16 v48 = 2050;
        uint64_t v49 = v26;
        __int16 v50 = 2050;
        double v51 = v8 / 60.0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown", "{\"msg%{public}.0s\":\"#dic #AutoPrompt Inflight auth-request squatting for more than 15 mins. TearingDown\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"squattingClient\":%{public, location:escape_only}@, \"squattingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"InflightRequestSquattingDurationMinutes\":\"%{public}.2f\"}", buf, 0x44u);
      }
      sub_1007D5754(*(void *)(a1 + 24), 1, 0);
    }
    if (*a2 == 7)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102317840);
      }
      __int16 v27 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v28 = *(void *)(a1 + 16);
        *(_DWORD *)long long buf = 68289538;
        int v39 = 0;
        __int16 v40 = 2082;
        double v41 = "";
        __int16 v42 = 2114;
        unint64_t v43 = v28;
        __int16 v44 = 2050;
        id v45 = (id)a1;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#AutoPrompt AuthorizationUpgradeAvailable updated\", \"Client\":%{public, location:escape_only}@, \"self\":\"%{public}p\"}", buf, 0x26u);
      }
      sub_1007DC25C(*(void *)(a1 + 24), *(void *)(a1 + 16));
    }
    CFStringRef v29 = +[NSMutableDictionary dictionaryWithDictionary:a3];
    [(NSMutableDictionary *)v29 setObject:&__kCFBooleanTrue forKeyedSubscript:@"isAutoPrompting"];
    CFStringRef v31 = *(void **)(a1 + 16);
    uint64_t v30 = *(void *)(a1 + 24);
    id v32 = [v31 bundleId];
    sub_1007E1FD0((uint64_t)v37, (uint64_t)a2);
    sub_1007A7700(v30, (uint64_t)v31, v32, (uint64_t)v37, (uint64_t)v29);
    sub_1007E1E64((uint64_t)v37);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102317840);
    }
    uint64_t v33 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v34 = *(void **)(a1 + 16);
      id v35 = [[[v34 bundleId] UTF8String];
      uint64_t v36 = *a2;
      *(_DWORD *)long long buf = 68290050;
      int v39 = 0;
      __int16 v40 = 2082;
      double v41 = "";
      __int16 v42 = 2114;
      unint64_t v43 = (unint64_t)v34;
      __int16 v44 = 2050;
      id v45 = (id)a1;
      __int16 v46 = 2082;
      unint64_t v47 = (unint64_t)v35;
      __int16 v48 = 2050;
      uint64_t v49 = v36;
      uint64_t v13 = "{\"msg%{public}.0s\":\"#AutoPrompt posted\", \"Client\":%{public, location:escape_only}@, \"self\":\"%{publi"
            "c}p\", \"CKP.BundleId\":%{public, location:escape_only}s, \"type\":%{public, location:CLClientManager_Type::"
            "AuthorizationRequestType}lld}";
      unint64_t v14 = v33;
      uint32_t v15 = 58;
      goto LABEL_30;
    }
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102317840);
  }
  uint64_t v16 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v17 = *(void *)(a1 + 16);
    unint64_t v18 = *a2;
    *(_DWORD *)long long buf = 68289794;
    int v39 = 0;
    __int16 v40 = 2082;
    double v41 = "";
    __int16 v42 = 2114;
    unint64_t v43 = v17;
    __int16 v44 = 2050;
    id v45 = (id)a1;
    __int16 v46 = 2050;
    unint64_t v47 = v18;
    uint64_t v13 = "{\"msg%{public}.0s\":\"#dic #AutoPrompt AutoPrompt disabled\", \"Client\":%{public, location:escape_only}@, \""
          "this\":\"%{public}p\", \"type\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
    unint64_t v14 = v16;
    uint32_t v15 = 48;
    goto LABEL_30;
  }
}

void sub_1011C3890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1007E1E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011C38AC(uint64_t a1)
{
  if (!*(void *)(a1 + 128)) {
    return 0;
  }
  if (([*(id *)(a1 + 40) isAuthorizedForServiceType:20] & 1) != 0
    || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1), result))
  {
    if ([*(id *)(a1 + 40) transientAwareRegistrationResult] != 4) {
      return 0;
    }
    if (_os_feature_enabled_impl()) {
      return 1;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102317840);
    }
    uint64_t v3 = qword_102419538;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      double v8 = "";
      __int16 v9 = 2114;
      uint64_t v10 = v5;
      __int16 v11 = 2050;
      uint64_t v12 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic WhenInUse #AutoPrompt FF disabled\", \"Client\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)v6, 0x26u);
      return 0;
    }
  }
  return result;
}

void sub_1011C3A24(uint64_t a1)
{
  *(unsigned char *)(a1 + 136) = 1;
  if (!sub_1011C2EC4(a1, 2))
  {
    if ([sub_1000B59AC(*(void *)(a1 + 24), *(void *)(a1 + 16)) boolForKey:@"DefaultAccuracyReduced" defaultValue:0])int v2 = 1; {
    else
    }
      int v2 = 2;
    uint64_t v3 = *(void *)(a1 + 16);
    sub_100134750(__p, "");
    sub_1007E1DB0((uint64_t)v6, v2, v3, 0, (long long *)__p);
    sub_1011C326C(a1, v6, 0);
    sub_1007E1E64((uint64_t)v6);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1011C3AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id *sub_1011C3B0C(id *result)
{
  if (*((unsigned char *)result + 136))
  {
    uint64_t v1 = result;
    uint64_t result = (id *)[result[5] transientAwareRegistrationResult];
    if (result != 4) {
      *((unsigned char *)v1 + 136) = 0;
    }
  }
  return result;
}

uint64_t sub_1011C3B48(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 40) diagnosticMask];
  if (*(unsigned char *)(a1 + 136)) {
    v2 |= sub_1011C2EC4(a1, 2) | 0x2000;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1)) {
    v2 |= sub_1011C2EC4(a1, 9) | 0x2000;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 80))(a1)) {
    v2 |= sub_1011C2EC4(a1, 7) | 0x2000;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
    v2 |= 0x400uLL;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    v2 |= 0x800uLL;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) | *(void *)(a1 + 88) | v2;
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & v3;
}

void sub_1011C3CD8(uint64_t a1)
{
  uint64_t v2 = sub_1011C3B48(a1);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102317840);
  }
  uint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v9 = 2082;
    *(void *)&v9[2] = "";
    __int16 v10 = 2114;
    uint64_t v11 = v4;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    __int16 v14 = 1026;
    int v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic sending diagnostic mask\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"DiagnosticMask\":%{public}d}", buf, 0x2Cu);
  }
  id v7 = +[NSMutableDictionary dictionary];
  [v7 setObject:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v2)] forKeyedSubscript:@"kCLConnectionMessageDiagnosticsKey"];
  sub_1011C4054("kCLConnectionMessageDiagnostics", buf);
  uint64_t v5 = *(void *)buf;
  double v6 = *(std::__shared_weak_count **)v9;
  if (*(void *)v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v9 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1011C187C(a1, (uint64_t)&v5, 0, 1, 0.0);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (*(void *)v9) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v9);
  }
}

void sub_1011C3E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C3EB0(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1011C3EE0(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1011C3F10(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1011C3F88((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1011C3F88(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1011C401C((uint64_t)v12);
  return v10;
}

uint64_t sub_1011C401C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

void *sub_1011C4054@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  uint64_t result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011C40A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011C40B8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uuid_clear((unsigned __int8 *)(a1 + 17));
  *(unsigned char *)(a1 + 16) = 0;
  return a1;
}

void sub_1011C4118(_Unwind_Exception *a1)
{
  sub_1004B3E28(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1011C4138(uint64_t a1)
{
  *(unsigned char *)(a1 + 16) = 0;
}

id *sub_1011C4168@<X0>(id *result@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)(a2 + 80);
  if (v4) {
    BOOL v5 = v4 == 26;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v7 = result;
    uint64_t v8 = (const unsigned __int8 *)(a2 + 8);
    uint64_t result = (id *)uuid_is_null((const unsigned __int8 *)(a2 + 8));
    if (!result)
    {
      if (uuid_compare(v8, (const unsigned __int8 *)v7 + 17))
      {
        *((unsigned char *)v7 + 16) = 0;
        uuid_copy((unsigned __int8 *)v7 + 17, v8);
      }
      unint64_t v9 = (unint64_t)v7[10];
      if (v9 >= 0x41)
      {
        v7[9] = (char *)v7[9] + 1;
        v7[10] = (id)(v9 - 1);
        sub_1011C5278((uint64_t)(v7 + 5), 1);
      }
      sub_1011C4620(v7 + 5, (long long *)a2);
      uint64_t result = (id *)sub_100082064((char *)*v7 + 72);
      if (result)
      {
        sub_1000E1294((uint64_t *)v45, (uint64_t)"CLVO2MaxInputStore::add", 0);
        sub_1011C46E8((uint64_t *)*v7, v7 + 5);
        uint64_t v10 = (void **)v7[6];
        uint64_t v11 = v7[7];
        v7[10] = 0;
        unint64_t v12 = v11 - (unsigned char *)v10;
        if (v12 >= 0x11)
        {
          do
          {
            operator delete(*v10);
            char v13 = v7[7];
            uint64_t v10 = (void **)((char *)v7[6] + 8);
            void v7[6] = v10;
            unint64_t v12 = v13 - (unsigned char *)v10;
          }
          while (v12 > 0x10);
        }
        if (v12 >> 3 == 1)
        {
          uint64_t v14 = 18;
        }
        else
        {
          if (v12 >> 3 != 2)
          {
LABEL_18:
            if (*((unsigned char *)v7 + 16))
            {
              *(void *)&long long v50 = 0xFFEFFFFFFFFFFFFFLL;
              *(void *)&long long v51 = 0xFFEFFFFFFFFFFFFFLL;
              int v15 = sub_1009F3958((uint64_t)*v7);
              unint64_t v16 = (unint64_t)a3[2];
              unint64_t v17 = a3[1];
              if ((unint64_t)v17 >= v16)
              {
                unint64_t v24 = *a3;
                uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v17 - *a3) >> 4);
                unint64_t v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) > 0x249249249249249) {
                  sub_1001D7FD4();
                }
                unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v16 - (void)v24) >> 4);
                if (2 * v27 > v26) {
                  unint64_t v26 = 2 * v27;
                }
                if (v27 >= 0x124924924924924) {
                  unint64_t v28 = 0x249249249249249;
                }
                else {
                  unint64_t v28 = v26;
                }
                if (v28)
                {
                  CFStringRef v29 = (char *)sub_100227C5C((uint64_t)(a3 + 2), v28);
                  unint64_t v24 = *a3;
                  unint64_t v17 = a3[1];
                }
                else
                {
                  CFStringRef v29 = 0;
                }
                uint64_t v30 = &v29[112 * v25];
                CFStringRef v31 = &v29[112 * v28];
                long long v32 = *(_OWORD *)buf;
                long long v33 = v50;
                *((_OWORD *)v30 + 1) = v49;
                *((_OWORD *)v30 + 2) = v33;
                *(_OWORD *)uint64_t v30 = v32;
                long long v34 = v51;
                long long v35 = v52;
                long long v36 = v54;
                *((_OWORD *)v30 + 5) = v53;
                *((_OWORD *)v30 + 6) = v36;
                *((_OWORD *)v30 + 3) = v34;
                *((_OWORD *)v30 + 4) = v35;
                __int16 v23 = v30 + 112;
                if (v17 == v24)
                {
                  __int16 v42 = v30;
                }
                else
                {
                  do
                  {
                    long long v37 = *((_OWORD *)v17 - 7);
                    long long v38 = *((_OWORD *)v17 - 5);
                    *((_OWORD *)v30 - 6) = *((_OWORD *)v17 - 6);
                    *((_OWORD *)v30 - 5) = v38;
                    *((_OWORD *)v30 - 7) = v37;
                    long long v39 = *((_OWORD *)v17 - 4);
                    long long v40 = *((_OWORD *)v17 - 3);
                    long long v41 = *((_OWORD *)v17 - 2);
                    __int16 v42 = v30 - 112;
                    *(_OWORD *)(v30 - 23) = *(_OWORD *)(v17 - 23);
                    *((_OWORD *)v30 - 3) = v40;
                    *((_OWORD *)v30 - 2) = v41;
                    *((_OWORD *)v30 - 4) = v39;
                    v17 -= 112;
                    v30 -= 112;
                  }
                  while (v17 != v24);
                }
                *a3 = v42;
                a3[1] = v23;
                a3[2] = v31;
                if (v24) {
                  operator delete(v24);
                }
              }
              else
              {
                long long v18 = *(_OWORD *)buf;
                long long v19 = v50;
                *((_OWORD *)v17 + 1) = v49;
                *((_OWORD *)v17 + 2) = v19;
                *(_OWORD *)unint64_t v17 = v18;
                long long v20 = v51;
                long long v21 = v52;
                long long v22 = v54;
                *((_OWORD *)v17 + 5) = v53;
                *((_OWORD *)v17 + 6) = v22;
                *((_OWORD *)v17 + 3) = v20;
                *((_OWORD *)v17 + 4) = v21;
                __int16 v23 = v17 + 112;
              }
              a3[1] = v23;
            }
            else
            {
              int v15 = sub_1009F01B8((uint64_t)*v7, (const unsigned __int8 *)v7 + 17, a3);
              *((unsigned char *)v7 + 16) = v15 == 100;
            }
            if (v15 != 100)
            {
              if (qword_102418FF0 != -1) {
                dispatch_once(&qword_102418FF0, &stru_102317860);
              }
              unint64_t v43 = qword_102418FF8;
              if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)long long buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v15;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "failed to write VO2MaxInput entry, error %d", buf, 8u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102418FF0 != -1) {
                  dispatch_once(&qword_102418FF0, &stru_102317860);
                }
                int v46 = 67109120;
                int v47 = v15;
                __int16 v44 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "std::vector<VO2MaxInput> CLVO2MaxInputStore::add(const VO2MaxInput &)", "%s\n", v44);
                if (v44 != (char *)buf) {
                  free(v44);
                }
              }
            }
            return sub_1000E1098(v45);
          }
          uint64_t v14 = 36;
        }
        v7[9] = (id)v14;
        goto LABEL_18;
      }
    }
  }
  return result;
}

void sub_1011C45E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  BOOL v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1011C4620(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 36 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1011C52D8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x24)) + 112 * (v7 % 0x24);
  long long v9 = *a2;
  long long v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  __n128 result = (__n128)a2[3];
  long long v12 = a2[4];
  long long v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(__n128 *)(v8 + 48) = result;
  *(_OWORD *)(v8 + 64) = v12;
  ++a1[5];
  return result;
}

uint64_t sub_1011C46E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10002B640(a1[10]);
    uint64_t v5 = a2[1];
    if (a2[2] != v5)
    {
      unint64_t v6 = a2[4];
      uint64_t v7 = a2[5];
      unint64_t v8 = *(void *)(v5 + 8 * (v6 / 0x24)) + 112 * (v6 % 0x24);
      unint64_t v9 = *(void *)(v5 + 8 * ((v7 + v6) / 0x24)) + 112 * ((v7 + v6) % 0x24);
      if (v8 != v9)
      {
        long long v10 = (void *)(v5 + 8 * (v6 / 0x24));
        do
        {
          (*(void (**)(uint64_t *, unint64_t, void))(*a1 + 120))(a1, v8, 0);
          v8 += 112;
          if (v8 - *v10 == 4032)
          {
            unint64_t v11 = v10[1];
            ++v10;
            unint64_t v8 = v11;
          }
        }
        while (v8 != v9);
      }
    }
    uint64_t v12 = a1[10];
    return sub_100028FB4(v12);
  }
  return result;
}

void sub_1011C47FC(unsigned __int8 *uu@<X1>, uint64_t *a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!uuid_is_null(uu))
  {
    int v6 = sub_1009F01B8(*a2, uu, a3);
    if (v6 != 100)
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102317860);
      }
      uint64_t v7 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v10 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to get VO2MaxInput entries for session, error %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_102317860);
        }
        unint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::vector<VO2MaxInput> CLVO2MaxInputStore::getBySessionId(unsigned char *)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
  }
}

void sub_1011C49E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011C4A04(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485EF8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = a1;
    int v3 = __cxa_guard_acquire(&qword_102485EF8);
    a1 = v2;
    if (v3)
    {
      uint64_t v5 = 0;
      long long v4 = xmmword_101DADCE8;
      sub_1011C4B34(qword_102485EE0, &v4, 1uLL);
      __cxa_atexit((void (*)(void *))sub_1011C4BC0, qword_102485EE0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102485EF8);
      a1 = v2;
    }
  }
  return (*(uint64_t (**)(void, void *))(*(void *)*a1 + 32))(*a1, qword_102485EE0);
}

void sub_1011C4B14(_Unwind_Exception *a1)
{
}

void *sub_1011C4B34(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_1000DA584(a1, a3);
    uint64_t v6 = 3 * a3;
    uint64_t v7 = 24 * a3;
    unint64_t v8 = (char *)a1[1];
    memmove(v8, a2, v7 - 7);
    a1[1] = &v8[8 * v6];
  }
  return a1;
}

void sub_1011C4BA4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011C4BC0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1011C4BF4(uint64_t a1)
{
  return sub_1011F9E28((void *)(*(void *)a1 + 72));
}

BOOL sub_1011C4C00(uint64_t *a1, const unsigned __int8 *a2)
{
  return (int)sub_1009F4514(*a1, a2) > 0;
}

BOOL sub_1011C4C24(uint64_t *a1, const unsigned __int8 *a2, void *a3)
{
  id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2];
  [a3 setSessionId:[v6 UUIDString]];

  __p = 0;
  long long v13 = 0;
  uint64_t v14 = 0;
  id v7 = (id)sub_1009F410C(*a1, a2, &__p);
  int v8 = (int)v7;
  unint64_t v9 = (char *)__p;
  if (v7 != 109)
  {
    int v10 = v13;
    if (__p != v13)
    {
      do
      {
        id v7 = [a3 addInputs:sub_1011C4D18((uint64_t)v7, (uint64_t)v9)];
        v9 += 112;
      }
      while (v9 != v10);
      unint64_t v9 = (char *)__p;
    }
  }
  if (v9)
  {
    long long v13 = v9;
    operator delete(v9);
  }
  return v8 != 109;
}

void sub_1011C4CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CLCKVO2MaxCalorimetryInput *sub_1011C4D18(uint64_t a1, uint64_t a2)
{
  int v3 = objc_alloc_init(CLCKVO2MaxCalorimetryInput);
  [(CLCKVO2MaxCalorimetryInput *)v3 setStartTime:*(double *)(a2 + 32)];
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  [(CLCKVO2MaxCalorimetryInput *)v3 setMets:v4];
  [(CLCKVO2MaxCalorimetryInput *)v3 setMetSource:*(unsigned int *)(a2 + 76)];
  LODWORD(v5) = *(_DWORD *)(a2 + 40);
  [(CLCKVO2MaxCalorimetryInput *)v3 setHr:v5];
  LODWORD(v6) = *(_DWORD *)(a2 + 44);
  [(CLCKVO2MaxCalorimetryInput *)v3 setHrConfidence:v6];
  [(CLCKVO2MaxCalorimetryInput *)v3 setHrTime:*(double *)(a2 + 48)];
  [(CLCKVO2MaxCalorimetryInput *)v3 setGrade:*(double *)(a2 + 64)];
  [(CLCKVO2MaxCalorimetryInput *)v3 setGradeType:*(unsigned int *)(a2 + 56)];
  [(CLCKVO2MaxCalorimetryInput *)v3 setHasGPS:*(unsigned __int8 *)(a2 + 72)];
  [(CLCKVO2MaxCalorimetryInput *)v3 setHasStrideCal:*(unsigned __int8 *)(a2 + 73)];
  [(CLCKVO2MaxCalorimetryInput *)v3 setWorkoutType:*(unsigned int *)(a2 + 80)];
  [(CLCKVO2MaxCalorimetryInput *)v3 setCadence:*(double *)(a2 + 88)];
  [(CLCKVO2MaxCalorimetryInput *)v3 setPace:*(double *)(a2 + 96)];
  [(CLCKVO2MaxCalorimetryInput *)v3 setIsStroller:*(unsigned __int8 *)(a2 + 104)];
  return v3;
}

uint64_t sub_1011C4DF4(uint64_t *a1, void *a2)
{
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:[a2 sessionId]];
  v11[0] = 0;
  v11[1] = 0;
  [v4 getUUIDBytes:v11];

  __p = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_1011C4EF4(v5, a2, &__p);
  uint64_t v6 = sub_1009F467C(*a1, (const unsigned __int8 *)v11);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_1011C4ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1011C4EF4(uint64_t a1, void *a2, void **a3)
{
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  obuint64_t j = [a2 inputs];
  id result = [obj countByEnumeratingWithState:&v50 objects:v54 count:16];
  id v5 = result;
  if (result)
  {
    uint64_t v49 = *(void *)v51;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v51 != v49) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v50 + 1) + 8 * (void)v6);
        [v7 startTime];
        uint64_t v9 = v8;
        [v7 mets];
        int v11 = v10;
        unsigned int v12 = [v7 metSource];
        [v7 hr];
        int v14 = v13;
        [v7 hrConfidence];
        int v16 = v15;
        [v7 hrTime];
        uint64_t v18 = v17;
        [v7 grade];
        uint64_t v20 = v19;
        unsigned int v21 = [v7 gradeType];
        unsigned __int8 v22 = [v7 hasGPS];
        unsigned __int8 v23 = [v7 hasStrideCal];
        signed int v24 = [v7 workoutType];
        [v7 cadence];
        uint64_t v26 = v25;
        [v7 pace];
        uint64_t v28 = v27;
        unsigned __int8 v29 = [v7 isStroller];
        unsigned __int8 v30 = v29;
        CFStringRef v31 = (char *)a3[1];
        long long v32 = (char *)a3[2];
        if (v31 >= v32)
        {
          uint64_t v34 = 0x6DB6DB6DB6DB6DB7 * ((v31 - (unsigned char *)*a3) >> 4);
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) > 0x249249249249249) {
            sub_1001D7FD4();
          }
          unint64_t v36 = 0x6DB6DB6DB6DB6DB7 * ((v32 - (unsigned char *)*a3) >> 4);
          if (2 * v36 > v35) {
            unint64_t v35 = 2 * v36;
          }
          if (v36 >= 0x124924924924924) {
            unint64_t v37 = 0x249249249249249;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37) {
            long long v38 = (char *)sub_100227C5C((uint64_t)(a3 + 2), v37);
          }
          else {
            long long v38 = 0;
          }
          long long v39 = &v38[112 * v34];
          *((_DWORD *)v39 + 6) = v11;
          *((void *)v39 + 4) = v9;
          *((_DWORD *)v39 + 10) = v14;
          *((_DWORD *)v39 + 11) = v16;
          *((void *)v39 + 6) = v18;
          *((_DWORD *)v39 + 14) = v21;
          *((void *)v39 + 8) = v20;
          v39[72] = v22;
          v39[73] = v23;
          *((_DWORD *)v39 + 19) = v12;
          *((void *)v39 + 10) = v24;
          *((void *)v39 + 11) = v26;
          *((void *)v39 + 12) = v28;
          v39[104] = v30;
          long long v41 = (char *)*a3;
          long long v40 = (char *)a3[1];
          __int16 v42 = v39;
          if (v40 != *a3)
          {
            do
            {
              long long v43 = *((_OWORD *)v40 - 7);
              long long v44 = *((_OWORD *)v40 - 5);
              *((_OWORD *)v42 - 6) = *((_OWORD *)v40 - 6);
              *((_OWORD *)v42 - 5) = v44;
              *((_OWORD *)v42 - 7) = v43;
              long long v45 = *((_OWORD *)v40 - 4);
              long long v46 = *((_OWORD *)v40 - 3);
              long long v47 = *((_OWORD *)v40 - 2);
              *(_OWORD *)(v42 - 23) = *(_OWORD *)(v40 - 23);
              *((_OWORD *)v42 - 3) = v46;
              *((_OWORD *)v42 - 2) = v47;
              *((_OWORD *)v42 - 4) = v45;
              v42 -= 112;
              v40 -= 112;
            }
            while (v40 != v41);
            long long v40 = (char *)*a3;
          }
          long long v33 = v39 + 112;
          *a3 = v42;
          a3[1] = v39 + 112;
          a3[2] = &v38[112 * v37];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *((_DWORD *)v31 + 6) = v11;
          *((void *)v31 + 4) = v9;
          *((_DWORD *)v31 + 10) = v14;
          *((_DWORD *)v31 + 11) = v16;
          *((void *)v31 + 6) = v18;
          *((_DWORD *)v31 + 14) = v21;
          *((void *)v31 + 8) = v20;
          v31[72] = v22;
          v31[73] = v23;
          *((_DWORD *)v31 + 19) = v12;
          *((void *)v31 + 10) = v24;
          *((void *)v31 + 11) = v26;
          *((void *)v31 + 12) = v28;
          long long v33 = v31 + 112;
          v31[104] = v29;
        }
        a3[1] = v33;
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v6 != v5);
      id result = [obj countByEnumeratingWithState:&v50 objects:v54 count:16];
      id v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1011C5248(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1011C5278(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x24) {
    a2 = 1;
  }
  if (v2 < 0x48) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 36;
  }
  return v4 ^ 1u;
}

void sub_1011C52D8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x24;
  unint64_t v4 = v2 - 36;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    id v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unsigned __int8 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1011C55A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011C55F0(uint64_t result, double a2)
{
  *(double *)id result = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 8) = result + 16;
  return result;
}

uint64_t sub_1011C5608()
{
  return AnalyticsSendEventLazy();
}

NSDictionary *sub_1011C5680(unsigned int *a1)
{
  v3[0] = @"traceType";
  v4[0] = +[NSNumber numberWithInt:a1[8]];
  v3[1] = @"uploadStatus";
  v4[1] = +[NSNumber numberWithInt:a1[9]];
  v3[2] = @"discardReason";
  v4[2] = +[NSNumber numberWithInt:a1[10]];
  v3[3] = @"fileSizeKB";
  v4[3] = +[NSNumber numberWithInt:a1[11] >> 10];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

uint64_t sub_1011C5764(uint64_t a1, int a2, double a3)
{
  int v11 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1 + 16;
    do
    {
      int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        uint64_t v8 = (uint64_t *)v4;
      }
      else {
        uint64_t v8 = (uint64_t *)(v4 + 8);
      }
      if (!v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 16 && *(_DWORD *)(v5 + 32) <= a2 && *(double *)(v5 + 40) + *(double *)a1 >= a3) {
      return 0;
    }
  }
  uint64_t v9 = (uint64_t **)(a1 + 8);
  AnalyticsSendEventLazy();
  uint64_t v12 = &v11;
  *((double *)sub_1000FEE0C(v9, &v11, (uint64_t)&unk_101D0B290, &v12) + 5) = a3;
  return 1;
}

NSDictionary *sub_1011C587C(uint64_t a1)
{
  v4[0] = @"traceType";
  unint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v4[1] = @"blockReason";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 36)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

NSDictionary *sub_1011C5920(uint64_t a1)
{
  v3[0] = @"triggeredByLocation";
  v4[0] = +[NSNumber numberWithInt:***(unsigned int ***)(a1 + 32)];
  v3[1] = @"triggeredByLocationOfInterest";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(**(void **)(a1 + 32) + 8)];
  v3[2] = @"triggeredByWalking";
  void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(**(void **)(a1 + 32) + 16)];
  v3[3] = @"triggeredByLocationFailed";
  v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(**(void **)(a1 + 32) + 4)];
  void v3[4] = @"triggeredByLocationOfInterestFailed";
  void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(**(void **)(a1 + 32) + 12)];
  void v3[5] = @"triggeredByWalkingFailed";
  v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(**(void **)(a1 + 32) + 20)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
}

void sub_1011C5A68()
{
}

void sub_1011C5AC4()
{
}

void sub_1011C5AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_102317890;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x40D5180000000000;
  BOOL v3 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)buf, "CleanupInterval", v3);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  sub_1007E0344();
}

void sub_1011C60C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v28 = v25[9];
  v25[9] = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = v25[8];
  v25[8] = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = v25[7];
  v25[7] = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = v25[6];
  v25[6] = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *v26;
  *uint64_t v26 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C6220(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023178F0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023178F0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1012339A0(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1011C63EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C640C(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023178F0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023178F0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101232714(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1011C65D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C65F8(uint64_t a1, int *a2, char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023178F0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023178F0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10123427C(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1011C67C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C67E4(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023178F0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023178F0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101233664(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1011C69B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_1011C69D0(uint64_t a1)
{
  return sub_101234ACC(*(void *)(*(void *)(a1 + 32) + 8));
}

uint64_t sub_1011C69DC(uint64_t a1)
{
  *(void *)a1 = off_102317890;
  [*(id *)(a1 + 24) invalidate];

  *(void *)(a1 + 24) = 0;
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {

    *(void *)(a1 + 80) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

void sub_1011C6B38(uint64_t a1)
{
  sub_1011C69DC(a1);

  operator delete();
}

uint64_t sub_1011C6B70()
{
  sub_100103240();

  return sub_10010145C();
}

uint64_t sub_1011C6B98()
{
  return sub_1001073D0() & 1;
}

id sub_1011C6BB8(void *a1)
{
  unint64_t v2 = (CLTileDownloadSchedulingClient *)a1[10];
  if (!v2)
  {
    uint64_t v3 = [CLTileDownloadSchedulingClient alloc];
    uint64_t v4 = a1[1];
    if (v4) {
      uint64_t v5 = v4 + 112;
    }
    else {
      uint64_t v5 = 0;
    }
    unint64_t v2 = [(CLTileDownloadSchedulingClient *)v3 initWithUniverse:a1[2] andDelegate:v5];
    a1[10] = v2;
  }

  return (id)[(CLTileDownloadSchedulingClient *)v2 scheduleTileDownloadIfNecessary];
}

id sub_1011C6C14(uint64_t a1)
{
  id v1 = [objc_msgSend(*(id *)(a1 + 16), "vendor") proxyForService:@"CLClientManager"];
  if (byte_102485F2F >= 0) {
    unint64_t v2 = &qword_102485F18;
  }
  else {
    unint64_t v2 = (uint64_t *)qword_102485F18;
  }
  uint64_t v3 = +[NSString stringWithUTF8String:v2];

  return [v1 resetNotificationConsumedForIdentifier:v3];
}

void sub_1011C6C84(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1011C6CB4(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1011C6CE4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1011C6D64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1011C6DF4(_Unwind_Exception *a1)
{
}

void sub_1011C6E0C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DADD20;
      v0[3] = unk_101DADD30;
      v0[4] = xmmword_101DADD40;
      v0[0] = xmmword_101DADD00;
      v0[1] = unk_101DADD10;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1011C6EEC(_Unwind_Exception *a1)
{
}

uint64_t sub_1011C6F04()
{
  sub_100134750(qword_102485F00, "t");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485F00, (void *)&_mh_execute_header);
  sub_100134750(&qword_102485F18, "CellTilesManager");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102485F18, (void *)&_mh_execute_header);
}

uint64_t sub_1011C6F9C(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v19 = *a2;
  int64_t v20 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1011BB410(a1, &v19, a3);
  if (v20) {
    sub_1000DB0A0(v20);
  }
  *(void *)a1 = off_102317940;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 912) = a1 + 912;
  *(void *)(a1 + 920) = a1 + 912;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 976) = 0;
  sub_1011DEDC4(a1 + 1008);
  sub_1011DEDC4(a1 + 1848);
  *(unsigned char *)(a1 + 2688) = 0;
  *(_DWORD *)(a1 + 2728) = 0;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_WORD *)(a1 + 2732) = 1;
  *(_DWORD *)(a1 + 2736) = 0;
  *(unsigned char *)(a1 + 2792) = 0;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(void *)(a1 + 2800) = 0;
  *(_DWORD *)(a1 + 2824) = 0;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_DWORD *)(a1 + 2872) = 0;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(unsigned char *)(a1 + 2848) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_WORD *)(a1 + 2876) = 1;
  *(_DWORD *)(a1 + 2880) = 0;
  *(void *)(a1 + 2952) = 0;
  *(void *)(a1 + 2944) = 0;
  *(void *)(a1 + 2960) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(unsigned char *)(a1 + 2936) = 0;
  *(void *)(a1 + 2968) = 0xFFFFFFFFLL;
  *(void *)(a1 + 2976) = off_1022AD0A0;
  *(void *)(a1 + 2984) = 30;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(void *)(a1 + 3040) = 0;
  *(void *)(a1 + 3048) = a1 + 3048;
  *(void *)(a1 + 3056) = a1 + 3048;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3072) = a1 + 3072;
  *(void *)(a1 + 3080) = a1 + 3072;
  *(void *)(a1 + 3088) = 0;
  *(void *)(a1 + 3096) = a1 + 3096;
  *(void *)(a1 + 3104) = a1 + 3096;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3120) = a1 + 3120;
  *(void *)(a1 + 3128) = a1 + 3120;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3136) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3160) = 0xBFF0000000000000;
  sub_1011DEEB4(a1 + 3184);
  *(unsigned char *)(a1 + 3720) = 0;
  *(unsigned char *)(a1 + 3832) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 3840) = _Q0;
  *(void *)(a1 + 3856) = 0;
  *(void *)(a1 + 3872) = 0;
  *(void *)(a1 + 3864) = 0;
  *(void *)(a1 + 3880) = 0xBFF0000000000000;
  *(void *)(a1 + 3888) = 0xBFF0000000000000;
  *(void *)(a1 + 3904) = 0;
  *(void *)(a1 + 3896) = 0;
  *(_DWORD *)(a1 + 3912) = 0;
  *(_WORD *)(a1 + 3916) = 1;
  *(_DWORD *)(a1 + 3920) = 0;
  *(void *)(a1 + 3984) = 0;
  *(void *)(a1 + 4000) = 0;
  *(void *)(a1 + 3992) = 0;
  *(unsigned char *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(void *)(a1 + 4008) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 4016) = _Q0;
  *(void *)(a1 + 4032) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4040) = 0;
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(void *)(a1 + 4112) = 0;
  *(void *)(a1 + 4120) = 0xBFF0000000000000;
  *(void *)(a1 + 4128) = 0xBFF0000000000000;
  if (sub_100119A30())
  {
    *(unsigned char *)(a1 + 3168) = 0;
LABEL_8:
    double v11 = 30.0;
    goto LABEL_10;
  }
  int v10 = sub_10073DD54();
  *(unsigned char *)(a1 + 3168) = v10 ^ 1;
  if (((v10 ^ 1) & 1) == 0) {
    goto LABEL_8;
  }
  double v11 = 70.0;
LABEL_10:
  *(double *)(a1 + 3176) = v11;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  uint64_t v12 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(unsigned __int8 *)(a1 + 3168);
    uint64_t v14 = *(void *)(a1 + 3176);
    *(_DWORD *)long long buf = 67240448;
    int v26 = v13;
    __int16 v27 = 2050;
    uint64_t v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMM,Constructor,fUseSpeedCheckForDOT,%{public}d,fMaxDistanceForTIntersectionForDOT,%{public}.1lf", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    int v16 = *(unsigned __int8 *)(a1 + 3168);
    uint64_t v17 = *(void *)(a1 + 3176);
    int v21 = 67240448;
    int v22 = v16;
    __int16 v23 = 2050;
    uint64_t v24 = v17;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLParticleMapMatcher::CLParticleMapMatcher(CLMapGeometryPtr, const std::string &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  srandom(0);
  bzero((void *)(a1 + 3728), 0x68uLL);
  return a1;
}

void sub_1011C7400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)(v23 + 4096);
  sub_10082B6F0(&a23);
  a23 = (void **)(v23 + 4072);
  sub_10082B6F0(&a23);
  a23 = (void **)(v23 + 4048);
  sub_10082B790(&a23);
  sub_1011C7530(v25);
  if (*(char *)(v23 + 3399) < 0) {
    operator delete(*(void **)(v23 + 3376));
  }
  sub_10017FF2C(v24);
  sub_10017FF2C(v29);
  sub_10017FF2C(v28);
  sub_10017FF2C(a12);
  *(void *)(v23 + 2976) = a13;
  sub_1003A7340((void *)(v23 + 3000));
  sub_1011C7570(v27);
  sub_1011C75B0(v26);
  sub_1011C75F0(a14);
  sub_1011C75F0(a15);
  sub_1011DFF0C(v23 + 984, *(void **)(v23 + 992));
  uint64_t v31 = *(void **)(v23 + 960);
  if (v31)
  {
    *(void *)(v23 + 968) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(v23 + 936);
  if (v32)
  {
    *(void *)(v23 + 944) = v32;
    operator delete(v32);
  }
  sub_1003B2350(a16);
  a23 = (void **)(v23 + 888);
  sub_10082B830(&a23);
  a23 = (void **)(v23 + 864);
  sub_10082B830(&a23);
  sub_1011BB764(v23);
  _Unwind_Resume(a1);
}

void *sub_1011C7530(void *a1)
{
  unint64_t v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

void *sub_1011C7570(void *a1)
{
  unint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

void *sub_1011C75B0(void *a1)
{
  unint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

uint64_t sub_1011C75F0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 760);
  if (v2)
  {
    *(void *)(a1 + 768) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 680);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 656);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return a1;
}

uint64_t sub_1011C766C(uint64_t a1)
{
  *(void *)a1 = off_102317940;
  int v21 = (void **)(a1 + 4096);
  sub_10082B6F0(&v21);
  int v21 = (void **)(a1 + 4072);
  sub_10082B6F0(&v21);
  int v21 = (void **)(a1 + 4048);
  sub_10082B790(&v21);
  unint64_t v2 = *(void **)(a1 + 3984);
  if (v2)
  {
    *(void *)(a1 + 3992) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 3904);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (*(char *)(a1 + 3399) < 0) {
    operator delete(*(void **)(a1 + 3376));
  }
  sub_10017FF2C((uint64_t *)(a1 + 3120));
  sub_10017FF2C((uint64_t *)(a1 + 3096));
  sub_10017FF2C((uint64_t *)(a1 + 3072));
  sub_10017FF2C((uint64_t *)(a1 + 3048));
  *(void *)(a1 + 2976) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 3000));
  uint64_t v4 = *(void **)(a1 + 2944);
  if (v4)
  {
    *(void *)(a1 + 2952) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 2864);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = *(void **)(a1 + 2800);
  if (v6)
  {
    *(void *)(a1 + 2808) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 2720);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v8 = *(void **)(a1 + 2608);
  if (v8)
  {
    *(void *)(a1 + 2616) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 2528);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 2504);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (*(char *)(a1 + 2119) < 0) {
    operator delete(*(void **)(a1 + 2096));
  }
  double v11 = *(void **)(a1 + 1944);
  if (v11)
  {
    *(void *)(a1 + 1952) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 1864);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  int v13 = *(void **)(a1 + 1768);
  if (v13)
  {
    *(void *)(a1 + 1776) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 1688);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 1664);
  if (v15) {
    sub_1000DB0A0(v15);
  }
  if (*(char *)(a1 + 1279) < 0) {
    operator delete(*(void **)(a1 + 1256));
  }
  int v16 = *(void **)(a1 + 1104);
  if (v16)
  {
    *(void *)(a1 + 1112) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 1024);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  sub_1011DFF0C(a1 + 984, *(void **)(a1 + 992));
  __int16 v18 = *(void **)(a1 + 960);
  if (v18)
  {
    *(void *)(a1 + 968) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(a1 + 936);
  if (v19)
  {
    *(void *)(a1 + 944) = v19;
    operator delete(v19);
  }
  sub_1003B2350((void *)(a1 + 912));
  int v21 = (void **)(a1 + 888);
  sub_10082B830(&v21);
  int v21 = (void **)(a1 + 864);
  sub_10082B830(&v21);
  return sub_1011BB764(a1);
}

void sub_1011C7894(uint64_t a1)
{
  sub_1011C766C(a1);

  operator delete();
}

uint64_t sub_1011C78CC(uint64_t a1, uint64_t a2, int *a3, double a4)
{
  LODWORD(v23) = 0;
  BYTE5(v23) = 0;
  DWORD2(v23) = 0;
  long long v24 = 0uLL;
  uint64_t v7 = *(uint64_t **)a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v21 = v7;
  int v22 = v6;
  uint64_t v8 = *(void *)(a2 + 48);
  BYTE4(v23) = *(unsigned char *)(a2 + 20);
  uint64_t v25 = v8;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  v18[2] = 0;
  v17[0] = (__n128 *)v17;
  v17[1] = (__n128 *)v17;
  v17[2] = 0;
  *a3 = 0;
  unsigned int v9 = sub_1011C7A0C(a1, &v21, a3, v18, v17, &v20, &v19, a4);
  if (*a3 > 1) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    uint64_t v12 = v21;
    double v11 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = *(std::__shared_weak_count **)(a2 + 8);
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v11;
    if (v13) {
      sub_1000DB0A0(v13);
    }
    long long v14 = v24;
    *(_OWORD *)(a2 + 16) = v23;
    *(_OWORD *)(a2 + 32) = v14;
    *(void *)(a2 + 48) = v25;
    uint64_t v15 = v19;
    *(void *)(a2 + 32) = v20;
    *(void *)(a2 + 40) = v15;
    *(_DWORD *)(a2 + 24) = -1082130432;
  }
  sub_10017FF2C((uint64_t *)v17);
  sub_10017FF2C(v18);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  return v10;
}

void sub_1011C79E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_1000DB0A0(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011C7A0C(uint64_t a1, uint64_t **a2, int *a3, uint64_t *a4, __n128 **a5, void *a6, void *a7, double a8)
{
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v40 = *(void *)(a1 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = 0;
  *a6 = 0;
  *a7 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v39 = _Q0;
  do
  {
    sub_10017FF2C(a4);
    *a3 = 0;
    v65[0] = 0.0;
    v41[0] = 0;
    v41[1] = 0;
    long long v42 = v39;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    unint64_t v45 = 0xBFF0000000000000;
    double v57 = 0;
    int v58 = 0;
    memset(&v55[32], 0, 32);
    __int16 v56 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    memset(v62, 0, 27);
    memset(&v62[32], 0, 48);
    long long v54 = 0u;
    memset(v55, 0, 30);
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v63 = 0;
    unint64_t v64 = 0xBFF0000000000000;
    if (((*(uint64_t (**)(uint64_t, void *, uint64_t *, void, uint64_t, uint64_t **, void, double *, double, double))(*(void *)v40 + 80))(v40, v41, a4, 0, 1, a2, *((unsigned __int8 *)a2 + 20), v65, *((double *)a2 + 6), a8) & 1) == 0)
    {
      char v20 = 0;
      char v38 = 0;
      goto LABEL_22;
    }
    double v19 = v65[0];
    if (v65[0] == -1.0) {
      goto LABEL_6;
    }
    uint64_t v21 = a4[1];
    int v22 = *a3;
    if ((uint64_t *)v21 == a4)
    {
      uint64_t v23 = 0;
      int v26 = a4;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = **a2;
      int v25 = *((unsigned __int8 *)a2 + 20);
      int v26 = a4;
      do
      {
        if (**(void **)(v21 + 16) == v24 && *(unsigned __int8 *)(v21 + 32) != v25)
        {
          int v26 = (uint64_t *)v21;
        }
        else
        {
          *a3 = ++v22;
          uint64_t v23 = v21;
        }
        uint64_t v21 = *(void *)(v21 + 8);
      }
      while ((uint64_t *)v21 != a4);
    }
    a8 = a8 - v19;
    if (v22 >= 2)
    {
      if (v26 != a4) {
        sub_1011C7EC8((uint64_t)a4, v26);
      }
      char v20 = 0;
      uint64_t v27 = *((void *)&v52 + 1);
      *a6 = v52;
      *a7 = v27;
      a2[6] = v57;
      goto LABEL_21;
    }
    if (v22 != 1)
    {
      sub_10017FF2C(a4);
LABEL_6:
      char v20 = 0;
LABEL_21:
      char v38 = 1;
      goto LABEL_22;
    }
    uint64_t v29 = *(uint64_t **)(v23 + 16);
    uint64_t v28 = *(uint64_t **)(v23 + 24);
    if (v28) {
      atomic_fetch_add_explicit(v28 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = v12;
    uint64_t v30 = (std::__shared_weak_count *)a2[1];
    *a2 = v29;
    a2[1] = v28;
    if (v30) {
      sub_1000DB0A0(v30);
    }
    *((unsigned char *)a2 + 20) = *(unsigned char *)(v23 + 32);
    a2[6] = *(uint64_t **)(v23 + 40);
    *a3 = 0;
    uint64_t v31 = (__n128 *)a4[1];
    if (v31 == (__n128 *)a4)
    {
      char v20 = 1;
    }
    else
    {
      do
      {
        if (*(void *)v31[1].n128_u64[0] != **a2 || v31[2].n128_u8[0] == *((unsigned __int8 *)a2 + 20)) {
          sub_1010B1704(a5, v31 + 1);
        }
        uint64_t v31 = (__n128 *)v31->n128_u64[1];
        char v20 = 1;
      }
      while (v31 != (__n128 *)a4);
    }
    uint64_t v12 = v34;
LABEL_22:
    if (SHIBYTE(v51) < 0) {
      operator delete(*((void **)&v50 + 1));
    }
    if ((v20 & 1) == 0)
    {
      char v32 = v38;
      if (!v12) {
        return v32 & 1;
      }
      goto LABEL_42;
    }
    ++v13;
  }
  while (v13 != 30);
  char v32 = 1;
  if (v12) {
LABEL_42:
  }
    sub_1000DB0A0(v12);
  return v32 & 1;
}

void sub_1011C7D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (v40) {
    sub_1000DB0A0(v40);
  }
  _Unwind_Resume(exception_object);
}

double sub_1011C7D80(uint64_t a1, double a2)
{
  if (!*(unsigned char *)(a1 + 1008)) {
    return -1.0;
  }
  int v17 = 0;
  char v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 1016);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 1024);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v3;
  int v16 = v4;
  uint64_t v5 = *(void *)(a1 + 1064);
  char v18 = *(unsigned char *)(a1 + 1036);
  uint64_t v23 = v5;
  double v13 = 0.0;
  double v14 = 0.0;
  v12[0] = (uint64_t)v12;
  v12[1] = (uint64_t)v12;
  v12[2] = 0;
  v11[0] = (__n128 *)v11;
  v11[1] = (__n128 *)v11;
  void v11[2] = 0;
  int v10 = 0;
  double v6 = -1.0;
  if (sub_1011C7A0C(a1, &v15, &v10, v12, v11, &v14, &v13, a2))
  {
    double v8 = v13;
    double v7 = v14;
    if (!sub_1000EF668(v14, v13)) {
      double v6 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 1280), *(double *)(a1 + 1288), v7, v8, *(double *)(a1 + 1200));
    }
  }
  sub_10017FF2C((uint64_t *)v11);
  sub_10017FF2C(v12);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  return v6;
}

void sub_1011C7EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_1000DB0A0(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011C7EC8(uint64_t a1, uint64_t *__p)
{
  uint64_t v3 = *__p;
  uint64_t v4 = __p[1];
  *(void *)(v3 + 8) = v4;
  *(void *)__p[1] = v3;
  --*(void *)(a1 + 16);
  uint64_t v5 = (std::__shared_weak_count *)__p[3];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  operator delete(__p);
  return v4;
}

uint64_t sub_1011C7F1C(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  int v18 = 0;
  char v20 = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  double v8 = *(uint64_t **)(a1 + 1856);
  unsigned int v9 = *(std::__shared_weak_count **)(a1 + 1864);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = v8;
  int v17 = v9;
  uint64_t v10 = *(void *)(a1 + 1904);
  char v19 = *(unsigned char *)(a1 + 1876);
  uint64_t v24 = v10;
  sub_10017FF2C(a2);
  sub_10017FF2C(a3);
  int v13 = 0;
  uint64_t v11 = sub_1011C7A0C(a1, &v16, &v13, a2, (__n128 **)a3, &v15, &v14, a4);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  return v11;
}

void sub_1011C7FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011C8000(uint64_t a1)
{
  double v2 = __chkstk_darwin(a1);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  double v7 = v2;
  unsigned int v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = (std::__shared_weak_count *)v8[1];
  uint64_t v40 = *v8;
  long long v41 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100FFD4D0(&v42, &v40, v1);
  if (v41) {
    sub_1000DB0A0(v41);
  }
  int v13 = (int *)sub_1011DFFFC(v11 + 984, (uint64_t)&v42);
  uint64_t v14 = v13;
  if ((int *)(v11 + 992) == v13)
  {
    sub_1011DEFC4((uint64_t)&v25);
    uint64_t v20 = *v9;
    int v21 = (std::__shared_weak_count *)v9[1];
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = v26;
    uint64_t v25 = v20;
    int v26 = v21;
    if (v22) {
      sub_1000DB0A0(v22);
    }
    uint64_t v35 = v6;
    uint64_t v36 = v4;
    double v37 = v7;
    int v27 = 1;
    long long v44 = v42;
    uint64_t v45 = v43;
    sub_1011DF25C((uint64_t)&v46, (uint64_t)&v25);
    sub_1011E0078((uint64_t **)(v11 + 984), (uint64_t)&v44, &v44);
    if (v56 < 0) {
      operator delete(__p);
    }
    if (v54 < 0) {
      operator delete(v53);
    }
    if (v52 < 0) {
      operator delete(v51);
    }
    if (v49)
    {
      long long v50 = v49;
      operator delete(v49);
    }
    if (v48) {
      sub_1000DB0A0(v48);
    }
    if (v47) {
      sub_1000DB0A0(v47);
    }
    if (v39 < 0) {
      operator delete(v38);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v29)
    {
      uint64_t v30 = v29;
      operator delete(v29);
    }
    if (v28) {
      sub_1000DB0A0(v28);
    }
    if (v26) {
      sub_1000DB0A0(v26);
    }
  }
  else if (v13[18] > 95)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v23 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v44) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLMM,Unexpected out of bounds array access attempt", (uint8_t *)&v44, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&v44, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      LOWORD(v25) = 0;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLParticleMapMatcher::updateCandidate(const CLMapRoadPtr &, BOOL, double, double, double)", "%s\n", v24);
      if (v24 != (char *)&v44) {
        free(v24);
      }
    }
  }
  else
  {
    uint64_t v15 = *v9;
    uint64_t v16 = v9[1];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    int v17 = (std::__shared_weak_count *)*((void *)v13 + 8);
    *((void *)v14 + 7) = v15;
    *((void *)v14 + 8) = v16;
    if (v17) {
      sub_1000DB0A0(v17);
    }
    uint64_t v18 = v14[18];
    char v19 = (double *)&v14[2 * v18 + 8];
    *((void *)v19 + 137) = v6;
    *((void *)v19 + 233) = v4;
    v19[329] = v7;
    v14[18] = v18 + 1;
  }
}

void sub_1011C83E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1011C8424((uint64_t)&STACK[0x1540]);
  sub_1011C84A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011C8424(uint64_t a1)
{
  if (*(char *)(a1 + 5087) < 0) {
    operator delete(*(void **)(a1 + 5064));
  }
  if (*(char *)(a1 + 807) < 0) {
    operator delete(*(void **)(a1 + 784));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  double v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

uint64_t sub_1011C84A4(uint64_t a1)
{
  if (*(char *)(a1 + 5063) < 0) {
    operator delete(*(void **)(a1 + 5040));
  }
  if (*(char *)(a1 + 783) < 0) {
    operator delete(*(void **)(a1 + 760));
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  double v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

uint64_t sub_1011C8524(uint64_t a1)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,Assessing candidates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      *(_WORD *)long long v146 = 0;
      __int16 v119 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v119);
      if (v119 != (char *)buf) {
        free(v119);
      }
    }
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v125 = *(void *)(a1 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v122 = *(void *)(a1 + 1000);
  uint64_t v4 = *(void **)(a1 + 984);
  int v127 = (int *)(a1 + 992);
  __int16 v124 = v3;
  if (v4 != (void *)(a1 + 992))
  {
    while (1)
    {
      uint64_t v5 = v4[7];
      *((unsigned char *)v4 + 200) = 0;
      *((unsigned char *)v4 + 192) = 0;
      if (!v5)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        __int16 v115 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_215;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        *(_WORD *)long long v146 = 0;
        double v116 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v116);
        goto LABEL_228;
      }
      if (*(unsigned char *)(v5 + 17)) {
        *(unsigned char *)(a1 + 1844) = 1;
      }
      long long v6 = *(_OWORD *)(a1 + 1128);
      long long v7 = *(_OWORD *)(a1 + 1144);
      long long v8 = *(_OWORD *)(a1 + 1160);
      *(_OWORD *)(v4 + 627) = *(_OWORD *)(a1 + 1176);
      *(_OWORD *)(v4 + 625) = v8;
      *(_OWORD *)(v4 + 623) = v7;
      *(_OWORD *)(v4 + 621) = v6;
      long long v9 = *(_OWORD *)(a1 + 1192);
      long long v10 = *(_OWORD *)(a1 + 1208);
      long long v11 = *(_OWORD *)(a1 + 1224);
      *(_OWORD *)(v4 + 635) = *(_OWORD *)(a1 + 1240);
      *(_OWORD *)(v4 + 633) = v11;
      *(_OWORD *)(v4 + 631) = v10;
      *(_OWORD *)(v4 + 629) = v9;
      std::string::operator=((std::string *)(v4 + 637), (const std::string *)(a1 + 1256));
      memcpy(v4 + 640, (const void *)(a1 + 1280), 0x118uLL);
      if (!sub_101188D84(v125, (uint64_t)(v4 + 621), (double **)v4 + 7, *((unsigned char *)v4 + 48), (double *)v4 + 333, *((_DWORD *)v4 + 18)))break; {
      uint64_t v12 = (double *)(v4 + 677);
      }
      *(_OWORD *)(v4 + 677) = xmmword_101D1C450;
      if (*((int *)v4 + 18) < 1)
      {
        int v14 = 0;
      }
      else
      {
        uint64_t v13 = 0;
        int v14 = 0;
        do
        {
          if (sub_1000F1648((double *)(a1 + 608), *((double *)v4 + 640), *((double *)v4 + 641), *(double *)&v4[v13 + 141], *(double *)&v4[v13 + 237], *(double *)(a1 + 1200)) <= 40.0)
          {
            uint64_t v15 = (double *)&v4[v13];
            double v16 = v15[333];
            if (v16 > *((double *)v4 + 678))
            {
              *((double *)v4 + 678) = v16;
              double v16 = v15[333];
            }
            ++v14;
            if (v16 < *v12) {
              *uint64_t v12 = v16;
            }
          }
          ++v13;
        }
        while (v13 < *((int *)v4 + 18));
      }
      *((_DWORD *)v4 + 19) = v14;
      int v17 = *(uint64_t **)(a1 + 872);
      uint64_t v18 = *(uint64_t **)(a1 + 864);
      uint64_t v3 = v124;
      if (v18 != v17)
      {
        double v19 = 0.0;
        do
        {
          sub_1011C9EF0(v18, (uint64_t)buf);
          if (sub_100FFD530((uint64_t)buf, (uint64_t)(v4 + 4)) && *((double *)v18 + 7) > v19)
          {
            int v17 = v18;
            double v19 = *((double *)v18 + 7);
          }
          v18 += 14;
        }
        while (v18 != *(uint64_t **)(a1 + 872));
        if (v18 != v17)
        {
          uint64_t v21 = *v17;
          uint64_t v20 = v17[1];
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v22 = (std::__shared_weak_count *)v4[11];
          v4[10] = v21;
          v4[11] = v20;
          if (v22) {
            sub_1000DB0A0(v22);
          }
          long long v23 = *((_OWORD *)v17 + 1);
          long long v24 = *((_OWORD *)v17 + 2);
          v4[16] = v17[6];
          *((_OWORD *)v4 + 6) = v23;
          *((_OWORD *)v4 + 7) = v24;
          long long v25 = *(_OWORD *)(v17 + 7);
          *(_OWORD *)((char *)v4 + 145) = *(_OWORD *)((char *)v17 + 65);
          *(_OWORD *)(v4 + 17) = v25;
          if (v4 + 10 != v17) {
            sub_1010003E4((char *)v4 + 168, (char *)v17[11], v17[12], 0x8E38E38E38E38E39 * ((v17[12] - v17[11]) >> 3));
          }
        }
      }
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        int v26 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v27 = *(void *)(a1 + 1136);
          uint64_t v28 = v4[4];
          int v29 = *((unsigned __int8 *)v4 + 48);
          int v30 = *((_DWORD *)v4 + 19);
          *(_DWORD *)long long buf = 134349825;
          uint64_t v151 = v27;
          __int16 v152 = 2049;
          uint64_t v153 = v28;
          __int16 v154 = 1026;
          int v155 = v29;
          __int16 v156 = 1026;
          int v157 = v30;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,candidate,roadID,%{private}llu,fwd,%{public}d,countAroundMean,%{public}d", buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v34 = *(void *)(a1 + 1136);
          uint64_t v35 = v4[4];
          int v36 = *((unsigned __int8 *)v4 + 48);
          int v37 = *((_DWORD *)v4 + 19);
          *(_DWORD *)long long v146 = 134349825;
          *(void *)&v146[4] = v34;
          *(_WORD *)&v146[12] = 2049;
          *(void *)&v146[14] = v35;
          *(_WORD *)&v146[22] = 1026;
          *(_DWORD *)&v146[24] = v36;
          *(_WORD *)&v146[28] = 1026;
          *(_DWORD *)&v146[30] = v37;
          char v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
      }
      uint64_t v31 = (int *)v4[1];
      if (v31)
      {
        do
        {
          char v32 = v31;
          uint64_t v31 = *(int **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          char v32 = (int *)v4[2];
          _ZF = *(void *)v32 == (void)v4;
          uint64_t v4 = v32;
        }
        while (!_ZF);
      }
      uint64_t v4 = v32;
      if (v32 == v127) {
        goto LABEL_56;
      }
    }
    uint64_t v3 = v124;
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_215;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    __int16 v117 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "CLMM,interpolateOnRoad returned false, determining mean road position", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_215;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    *(_WORD *)long long v146 = 0;
    double v116 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v116);
LABEL_228:
    if (v116 != (char *)buf) {
      free(v116);
    }
    uint64_t v3 = v124;
LABEL_215:
    uint64_t v39 = 0;
    ++*(_DWORD *)(a1 + 104);
    if (!v3) {
      return v39;
    }
LABEL_216:
    sub_1000DB0A0(v3);
    return v39;
  }
LABEL_56:
  if (v122 < 2)
  {
    uint64_t v39 = 1;
    if (!v3) {
      return v39;
    }
    goto LABEL_216;
  }
  uint64_t v40 = *(int **)(a1 + 984);
  uint64_t v39 = 1;
  if (v40 == v127) {
    goto LABEL_219;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  long long v123 = _Q0;
  while (2)
  {
    uint64_t v137 = 0;
    uint64_t v45 = *(void *)(a1 + 1136);
    *(void *)long long v146 = 0;
    *(void *)&v146[8] = v45;
    *(_OWORD *)&v146[16] = v123;
    *(_OWORD *)&v146[32] = 0uLL;
    *(void *)long long v147 = 0xBFF0000000000000;
    v149[15] = 0.0;
    LODWORD(v149[16]) = 0;
    memset(&v149[10], 0, 34);
    memset(&v149[17], 0, 75);
    memset(&v149[27], 0, 56);
    memset(v149, 0, 78);
    long long v148 = 0u;
    memset(&v147[8], 0, 80);
    v149[34] = -1.0;
    uint64_t v134 = (uint64_t)&v134;
    long long v135 = &v134;
    uint64_t v136 = 0;
    uint64_t v46 = 1354;
    if (!*((unsigned char *)v40 + 48)) {
      uint64_t v46 = 1356;
    }
    if (((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *, void, uint64_t, void *, double, double))(*(void *)v125 + 80))(v125, v146, &v134, 0, 1, (void *)v40 + 7, *(double *)&v40[v46], 40.0) & 1) == 0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        double v86 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "CLMM,roadsAtIntersection returned false, searching for connected candidates", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          LOWORD(v138) = 0;
          int v101 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v101);
          if (v101 != (char *)buf) {
            free(v101);
          }
        }
      }
      ++*(_DWORD *)(a1 + 108);
LABEL_130:
      int v87 = 1;
      goto LABEL_158;
    }
    if (!v136) {
      goto LABEL_157;
    }
    int v47 = v40[18];
    if (v47 < 1)
    {
LABEL_131:
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        __int16 v88 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "CLMM,unexpected incomingCount < 1", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          LOWORD(v138) = 0;
          double v89 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v89);
          if (v89 != (char *)buf) {
            free(v89);
          }
        }
      }
      goto LABEL_157;
    }
    uint64_t v48 = 0;
    int v49 = 0;
    do
    {
      double v50 = *(double *)&v40[2 * v48 + 666];
      if (*((unsigned char *)v40 + 48))
      {
        if (v50 < v149[15]) {
          goto LABEL_74;
        }
      }
      else if (v50 < v149[15])
      {
        goto LABEL_74;
      }
      if (sub_1000F1648((double *)(a1 + 608), v149[0], v149[1], *(double *)&v40[2 * v48 + 282], *(double *)&v40[2 * v48 + 474], *(double *)(a1 + 1200)) <= 40.0)++v49; {
      int v47 = v40[18];
      }
LABEL_74:
      ++v48;
    }
    while (v48 < v47);
    if (v49 < 1) {
      goto LABEL_131;
    }
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      long long v51 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v52 = *(void *)(a1 + 1136);
        uint64_t v53 = *((void *)v40 + 4);
        int v54 = v40[19];
        *(_DWORD *)long long buf = 134349569;
        uint64_t v151 = v52;
        __int16 v152 = 2049;
        uint64_t v153 = v53;
        __int16 v154 = 1026;
        int v155 = v54;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,incoming,countAroundMean,%{public}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v102 = *(void *)(a1 + 1136);
        uint64_t v103 = *((void *)v40 + 4);
        int v104 = v40[19];
        int v138 = 134349569;
        uint64_t v139 = v102;
        __int16 v140 = 2049;
        uint64_t v141 = v103;
        __int16 v142 = 1026;
        int v143 = v104;
        long long v105 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v105);
        if (v105 != (char *)buf) {
          free(v105);
        }
      }
    }
    v40[52] = v49;
    long long v55 = v135;
    if (v135 == &v134) {
      goto LABEL_151;
    }
    uint64_t v56 = 0;
    int v121 = 0;
    int v57 = 0;
    double v120 = v40 + 172;
    while (2)
    {
      if (*(void *)v55[2] == *((void *)v40 + 4)
        && *((unsigned __int8 *)v55 + 32) == (*((unsigned __int8 *)v40 + 48) ^ 1))
      {
        goto LABEL_116;
      }
      int __str = v57;
      int v58 = (std::__shared_weak_count *)v55[3];
      uint64_t v131 = v55[2];
      long long v132 = v58;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100FFD4D0(v133, &v131, *((unsigned __int8 *)v55 + 32));
      if (v132) {
        sub_1000DB0A0(v132);
      }
      long long v59 = (int *)sub_1011DFFFC(a1 + 984, (uint64_t)v133);
      long long v60 = v59;
      double v130 = 0.0;
      if (v127 == v59 || v59[18] < 1)
      {
LABEL_114:
        uint64_t v68 = v56;
        goto LABEL_115;
      }
      uint64_t v61 = 0;
      int v62 = 0;
      double v63 = 0.0;
      while (2)
      {
        unint64_t v64 = &v60[2 * v61];
        double v65 = *((double *)v64 + 333);
        double v66 = *((double *)v55 + 5);
        if (*((unsigned char *)v60 + 48))
        {
          if (v65 <= v66) {
            goto LABEL_99;
          }
        }
        else if (v65 >= v66)
        {
          goto LABEL_99;
        }
        double v67 = sub_1000F1648((double *)(a1 + 608), v149[0], v149[1], *(double *)&v60[2 * v61 + 282], *(double *)&v60[2 * v61 + 474], *(double *)(a1 + 1200));
        if (v67 <= 40.0)
        {
          double v130 = *((double *)v64 + 333) + v130;
          double v63 = v63 + v67;
          ++v62;
        }
LABEL_99:
        if (++v61 < v60[18]) {
          continue;
        }
        break;
      }
      if (!v62)
      {
        uint64_t v68 = v56;
        goto LABEL_115;
      }
      ++v121;
      double v130 = v130 / (double)v62;
      uint64_t v68 = (v62 + v49);
      if ((int)v68 <= (int)v56) {
        goto LABEL_114;
      }
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        int v69 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v70 = *(void *)(a1 + 1136);
          uint64_t v71 = *((void *)v40 + 4);
          *(_DWORD *)long long buf = 134349825;
          uint64_t v151 = v70;
          __int16 v152 = 2049;
          uint64_t v153 = v71;
          __int16 v154 = 1026;
          int v155 = v49;
          __int16 v156 = 1026;
          int v157 = v62;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,combinedBest,roadID,%{private}llu,incomingCount,%{public}d,outgoingCount,%{public}d", buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v83 = *(void *)(a1 + 1136);
          uint64_t v84 = *((void *)v40 + 4);
          int v138 = 134349825;
          uint64_t v139 = v83;
          __int16 v140 = 2049;
          uint64_t v141 = v84;
          __int16 v142 = 1026;
          int v143 = v49;
          __int16 v144 = 1026;
          int v145 = v62;
          uint64_t v85 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v85);
          if (v85 != (char *)buf) {
            free(v85);
          }
        }
      }
      long long v72 = *(_OWORD *)&v147[32];
      *((_OWORD *)v40 + 20) = *(_OWORD *)&v147[16];
      *((_OWORD *)v40 + 21) = v72;
      long long v73 = *(_OWORD *)&v147[64];
      *((_OWORD *)v40 + 22) = *(_OWORD *)&v147[48];
      *((_OWORD *)v40 + 23) = v73;
      long long v74 = *(_OWORD *)&v146[16];
      *((_OWORD *)v40 + 16) = *(_OWORD *)v146;
      *((_OWORD *)v40 + 17) = v74;
      long long v75 = *(_OWORD *)v147;
      *((_OWORD *)v40 + 18) = *(_OWORD *)&v146[32];
      *((_OWORD *)v40 + 19) = v75;
      std::string::operator=((std::string *)v40 + 16, (const std::string *)&v147[80]);
      memcpy(v40 + 102, v149, 0x118uLL);
      v40[53] = v62;
      v40[54] = v68;
      *((double *)v40 + 31) = v63 / (double)v62;
      *((void *)v40 + 140) = v55[5];
      int v76 = (std::__shared_weak_count *)*((void *)v60 + 8);
      __int16 v128 = (__n128 *)*((void *)v60 + 7);
      double v129 = v76;
      if (v76) {
        atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100FFD4BC((__n128 *)v40 + 14, &v128, *((unsigned char *)v60 + 48));
      if (v129) {
        sub_1000DB0A0(v129);
      }
      long long v77 = *(_OWORD *)(a1 + 1128);
      long long v78 = *(_OWORD *)(a1 + 1144);
      long long v79 = *(_OWORD *)(a1 + 1176);
      *((_OWORD *)v40 + 45) = *(_OWORD *)(a1 + 1160);
      *((_OWORD *)v40 + 46) = v79;
      *double v120 = v77;
      *((_OWORD *)v40 + 44) = v78;
      long long v80 = *(_OWORD *)(a1 + 1192);
      long long v81 = *(_OWORD *)(a1 + 1208);
      long long v82 = *(_OWORD *)(a1 + 1240);
      *((_OWORD *)v40 + 49) = *(_OWORD *)(a1 + 1224);
      *((_OWORD *)v40 + 50) = v82;
      *((_OWORD *)v40 + 47) = v80;
      *((_OWORD *)v40 + 48) = v81;
      std::string::operator=((std::string *)v40 + 34, (const std::string *)(a1 + 1256));
      memcpy(v40 + 210, (const void *)(a1 + 1280), 0x118uLL);
      if (!sub_101188D84(v125, (uint64_t)v120, (double **)v60 + 7, *((unsigned char *)v60 + 48), &v130, 1))
      {
        if (*(unsigned char *)(a1 + 96))
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          __int16 v100 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "CLMM,interpolateOnRoad returned false, determining outgoing road position", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            LOWORD(v138) = 0;
            uint64_t v114 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v114);
            if (v114 != (char *)buf) {
              free(v114);
            }
          }
        }
        ++*(_DWORD *)(a1 + 104);
        goto LABEL_130;
      }
LABEL_115:
      int v57 = __str + 1;
      uint64_t v56 = v68;
LABEL_116:
      long long v55 = (uint64_t *)v55[1];
      if (v55 != &v134) {
        continue;
      }
      break;
    }
    if ((int)v56 >= 1)
    {
      *((unsigned char *)v40 + 200) = 1;
      if (v57 > 1) {
        *((unsigned char *)v40 + 192) = 1;
      }
      v40[49] = v121;
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_150;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      double v90 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v91 = *(void *)(a1 + 1136);
        uint64_t v92 = *((void *)v40 + 4);
        int v93 = *((unsigned __int8 *)v40 + 200);
        int v94 = *((unsigned __int8 *)v40 + 192);
        *(_DWORD *)long long buf = 134349825;
        uint64_t v151 = v91;
        __int16 v152 = 2049;
        uint64_t v153 = v92;
        __int16 v154 = 1026;
        int v155 = v93;
        __int16 v156 = 1026;
        int v157 = v94;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,isCombined,%{public}d,isMulti,%{public}d", buf, 0x22u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v109 = *(void *)(a1 + 1136);
        uint64_t v110 = *((void *)v40 + 4);
        int v111 = *((unsigned __int8 *)v40 + 200);
        int v112 = *((unsigned __int8 *)v40 + 192);
        int v138 = 134349825;
        uint64_t v139 = v109;
        __int16 v140 = 2049;
        uint64_t v141 = v110;
        __int16 v142 = 1026;
        int v143 = v111;
        __int16 v144 = 1026;
        int v145 = v112;
        __int16 v113 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v113);
        if (v113 != (char *)buf) {
          free(v113);
        }
        int v87 = 0;
      }
      else
      {
LABEL_150:
        int v87 = 0;
      }
      goto LABEL_158;
    }
LABEL_151:
    if (!*(unsigned char *)(a1 + 96))
    {
      int v87 = 37;
      goto LABEL_158;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    __int16 v95 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v96 = *(void *)(a1 + 1136);
      uint64_t v97 = *((void *)v40 + 4);
      *(_DWORD *)long long buf = 134349313;
      uint64_t v151 = v96;
      __int16 v152 = 2049;
      uint64_t v153 = v97;
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,no particles after the intersection", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2))
    {
LABEL_157:
      int v87 = 37;
      goto LABEL_158;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v106 = *(void *)(a1 + 1136);
    uint64_t v107 = *((void *)v40 + 4);
    int v138 = 134349313;
    uint64_t v139 = v106;
    __int16 v140 = 2049;
    uint64_t v141 = v107;
    uint64_t v108 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "%s\n", v108);
    if (v108 != (char *)buf) {
      free(v108);
    }
    int v87 = 37;
LABEL_158:
    sub_10017FF2C(&v134);
    if (SHIBYTE(v148) < 0) {
      operator delete(*(void **)&v147[80]);
    }
    if (v87 == 37 || !v87)
    {
      __int16 v98 = (int *)*((void *)v40 + 1);
      if (v98)
      {
        do
        {
          uint64_t v99 = v98;
          __int16 v98 = *(int **)v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          uint64_t v99 = (int *)*((void *)v40 + 2);
          _ZF = *(void *)v99 == (void)v40;
          uint64_t v40 = v99;
        }
        while (!_ZF);
      }
      uint64_t v40 = v99;
      if (v99 == v127)
      {
        uint64_t v39 = 1;
        goto LABEL_219;
      }
      continue;
    }
    break;
  }
  uint64_t v39 = 0;
LABEL_219:
  uint64_t v3 = v124;
  if (v124) {
    goto LABEL_216;
  }
  return v39;
}

void sub_1011C9E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (a41) {
    sub_1000DB0A0(a41);
  }
  _Unwind_Resume(a1);
}

void sub_1011C9EF0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v5 = *a1;
  long long v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100FFD4D0(a2, &v5, *((unsigned __int8 *)a1 + 20));
  if (v6) {
    sub_1000DB0A0(v6);
  }
}

void sub_1011C9F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011C9F64(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  long long v7 = *((_OWORD *)a2 + 1);
  long long v8 = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  long long v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)((char *)a2 + 65);
  *(_OWORD *)(a1 + 56) = v9;
  if ((uint64_t *)a1 != a2) {
    sub_1010003E4((char *)(a1 + 88), (char *)a2[11], a2[12], 0x8E38E38E38E38E39 * ((a2[12] - a2[11]) >> 3));
  }
  return a1;
}

uint64_t sub_1011CA000(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v230 = *(void *)(a1 + 8);
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = a1;
  double v3 = *(double *)(a1 + 2064);
  double v4 = 0.0;
  if (v3 >= 0.0)
  {
    if (*(double *)(a1 + 2152) > 0.0) {
      double v4 = *(double *)(a1 + 2152);
    }
    else {
      double v4 = 0.0;
    }
  }
  double v5 = *(double *)(a1 + 1224);
  if (v5 >= 0.0)
  {
    double v6 = *(double *)(a1 + 1640);
    if (v3 >= 0.0 && v6 < 2.2) {
      double v5 = (v3 + v5) * 0.5;
    }
    *(double *)(a1 + 1792) = v5;
  }
  else
  {
    *(void *)(a1 + 1792) = 0;
    double v6 = *(double *)(a1 + 1640);
    double v5 = 0.0;
  }
  double v8 = v5 * v6;
  if (*(double *)(a1 + 2048) > 0.0 && v6 < 2.2)
  {
    double v10 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 2024), *(double *)(a1 + 2032), *(double *)(a1 + 1200));
    if (v10 > 300.0)
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_83;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      long long v23 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = *(void *)(a1 + 1640);
        *(_DWORD *)long long buf = 134349312;
        *(double *)&uint8_t buf[4] = v10;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLMM, Position jump(m),%{public}.1lf,dT(s),%{public}.1lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_83;
      }
      long long v222 = v1;
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v25 = *(void *)(a1 + 1640);
      LODWORD(v248[0]) = 134349312;
      *(double *)((char *)v248 + 4) = v10;
      WORD2(v248[1]) = 2050;
      *(void *)((char *)&v248[1] + 6) = v25;
      int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v26);
LABEL_415:
      if (v26 != buf) {
        free(v26);
      }
      uint64_t v1 = v222;
      goto LABEL_83;
    }
    *(double *)(a1 + 1800) = v8;
    if (*(double *)(a1 + 1792) <= 0.0 || v10 < 0.0 || *(unsigned char *)(a1 + 1356))
    {
      if (v10 < 0.0)
      {
        uint64_t v2 = a1;
      }
      else
      {
        uint64_t v2 = a1;
        if (!*(unsigned char *)(a1 + 1356)) {
          *(double *)(a1 + 1800) = v10;
        }
      }
    }
    else
    {
      uint64_t v2 = a1;
      *(double *)(a1 + 1800) = (v8 + v10) * 0.5;
    }
  }
  else
  {
    *(double *)(a1 + 1800) = v8;
    double v10 = -1.0;
  }
  if (*(unsigned char *)(v2 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    long long v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 1136);
      uint64_t v13 = *(void *)(a1 + 1800);
      *(_DWORD *)long long buf = 134349824;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v13;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(double *)&unsigned char buf[24] = v8;
      LOWORD(v253[0]) = 2050;
      *(double *)((char *)v253 + 2) = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,predictionAndUpdate,distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v207 = *(void *)(a1 + 1136);
      uint64_t v208 = *(void *)(a1 + 1800);
      LODWORD(v248[0]) = 134349824;
      *(void *)((char *)v248 + 4) = v207;
      WORD2(v248[1]) = 2050;
      *(void *)((char *)&v248[1] + 6) = v208;
      HIWORD(v248[2]) = 2050;
      *(double *)&v248[3] = v8;
      LOWORD(v248[4]) = 2050;
      *(double *)((char *)&v248[4] + 2) = v10;
      uint64_t v209 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v209);
      if (v209 != buf) {
        free(v209);
      }
    }
  }
  *(void *)(a1 + 1608) = 0xBFF0000000000000;
  uint64_t v14 = *(void *)(a1 + 872);
  uint64_t v15 = *(void *)(a1 + 864);
  uint64_t v16 = v14 - v15;
  if (v14 == v15) {
    goto LABEL_364;
  }
  double v17 = *(double *)(a1 + 1800);
  double v18 = *(double *)(a1 + 1640);
  double v19 = v18 * v18;
  if (*(unsigned char *)(a1 + 1356) && v18 > 4.9)
  {
    double v20 = 24.01;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v21 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349312;
        *(double *)&uint8_t buf[4] = v19;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = 0x4038028F5C28F5C4;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,dT2 limited,from,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LODWORD(v248[0]) = 134349312;
        *(double *)((char *)v248 + 4) = v19;
        WORD2(v248[1]) = 2050;
        *(void *)((char *)&v248[1] + 6) = 0x4038028F5C28F5C4;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
      }
    }
  }
  else
  {
    double v20 = v18 * v18;
  }
  double v27 = v20 * ((v4 * v4 + *(double *)(a1 + 1312) * *(double *)(a1 + 1312)) * 0.25);
  *(double *)(a1 + 1808) = v27;
  double v28 = *(double *)(a1 + 1792);
  double v29 = v20 * 3.0;
  if (v28 >= 8.05555556) {
    double v29 = v20;
  }
  *(double *)(a1 + 1816) = v29;
  double v30 = v20 * (v28 * v28 * 0.25);
  *(double *)(a1 + 1824) = v30;
  *(double *)(a1 + 1832) = sqrt(v27 + v29 + v30);
  double v31 = *(double *)(a1 + 1640);
  if (v31 <= 0.0 || (v31 > 4.9 ? (BOOL v32 = *(unsigned char *)(a1 + 1356) == 0) : (BOOL v32 = 0), v32 || v31 > 75.0))
  {
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_83;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v39 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)(a1 + 1640);
      *(_DWORD *)long long buf = 134349568;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = 0x401399999999999ALL;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = 0x4052C00000000000;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#Warning CLMM,unexpected,dT,%{public}.1lf,minMoreThan,0,threshold1,%{public}.1lf,threshold2,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_83;
    }
    long long v222 = v1;
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v210 = *(void *)(a1 + 1640);
    LODWORD(v248[0]) = 134349568;
    *(void *)((char *)v248 + 4) = v210;
    WORD2(v248[1]) = 2050;
    *(void *)((char *)&v248[1] + 6) = 0x401399999999999ALL;
    HIWORD(v248[2]) = 2050;
    v248[3] = 0x4052C00000000000;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v26);
    goto LABEL_415;
  }
  long long v233 = (uint64_t *)(a1 + 864);
  long long v222 = v1;
  if (*(unsigned char *)(a1 + 2688))
  {
    double v33 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 2120), *(double *)(a1 + 2128), *(double *)(a1 + 2744), *(double *)(a1 + 2752), *(double *)(a1 + 1200));
    int v34 = *(_DWORD *)(a1 + 2824);
    int v35 = 4 * v34;
    if (v34 >= 1)
    {
      if (v35 <= 1) {
        int v36 = 1;
      }
      else {
        int v36 = 4 * v34;
      }
      unint64_t v37 = *(void *)(a1 + 872);
      do
      {
        if (v37 >= *(void *)(a1 + 880))
        {
          unint64_t v37 = sub_1011E03D4(v233, a1 + 2712);
          uint64_t v38 = a1;
        }
        else
        {
          sub_1011E04FC(a1 + 880, v37, a1 + 2712);
          v37 += 112;
          uint64_t v38 = a1;
          *(void *)(a1 + 872) = v37;
        }
        *(void *)(v38 + 872) = v37;
        --v36;
      }
      while (v36);
    }
  }
  else
  {
    int v35 = 0;
    double v33 = 0.0;
  }
  int v220 = v35;
  uint64_t v219 = v16;
  if (*(unsigned char *)(a1 + 2232))
  {
    uint64_t v44 = a1 + 3048;
    uint64_t v45 = a1 + 3096;
    if ((sub_1011C7F1C(a1, (uint64_t *)(a1 + 3048), (uint64_t *)(a1 + 3096), 80.0) & 1) == 0)
    {
      uint64_t v41 = 0;
      ++*(_DWORD *)(a1 + 108);
      goto LABEL_111;
    }
    uint64_t v46 = *(void *)(a1 + 3104);
    if (v46 == v45)
    {
      int v47 = 0;
    }
    else
    {
      int v47 = 0;
      uint64_t v48 = (unint64_t *)(a1 + 880);
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&unsigned char buf[24] = 0;
        __int16 v257 = 0;
        uint64_t v258 = 0;
        __p = 0;
        memset(v253, 0, sizeof(v253));
        long long v254 = 0u;
        char v255 = 0;
        uint64_t v50 = *(void *)(v46 + 16);
        uint64_t v49 = *(void *)(v46 + 24);
        if (v49)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
          long long v51 = *(std::__shared_weak_count **)&buf[8];
          *(void *)long long buf = v50;
          *(void *)&uint8_t buf[8] = v49;
          if (v51) {
            sub_1000DB0A0(v51);
          }
        }
        else
        {
          *(void *)long long buf = *(void *)(v46 + 16);
          *(void *)&uint8_t buf[8] = 0;
        }
        *(void *)&v253[1] = *(void *)(v46 + 40);
        buf[20] = *(unsigned char *)(v46 + 32);
        v47 += 6;
        unint64_t v52 = *(void *)(a1 + 872);
        int v53 = 6;
        do
        {
          if (v52 >= *v48)
          {
            unint64_t v52 = sub_1011E03D4(v233, (uint64_t)buf);
            uint64_t v54 = a1;
          }
          else
          {
            sub_1011E04FC((uint64_t)v48, v52, (uint64_t)buf);
            v52 += 112;
            uint64_t v54 = a1;
            *(void *)(a1 + 872) = v52;
          }
          *(void *)(v54 + 872) = v52;
          --v53;
        }
        while (v53);
        if (__p)
        {
          __int16 v257 = __p;
          operator delete(__p);
        }
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v46 = *(void *)(v46 + 8);
      }
      while (v46 != v45);
    }
    uint64_t v56 = *(void *)(a1 + 3056);
    int v55 = v47;
    if (v56 != v44)
    {
      int v57 = (unint64_t *)(a1 + 880);
      int v55 = v47;
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&unsigned char buf[24] = 0;
        __int16 v257 = 0;
        uint64_t v258 = 0;
        __p = 0;
        memset(v253, 0, sizeof(v253));
        long long v254 = 0u;
        char v255 = 0;
        uint64_t v59 = *(void *)(v56 + 16);
        uint64_t v58 = *(void *)(v56 + 24);
        if (v58)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
          long long v60 = *(std::__shared_weak_count **)&buf[8];
          *(void *)long long buf = v59;
          *(void *)&uint8_t buf[8] = v58;
          if (v60) {
            sub_1000DB0A0(v60);
          }
        }
        else
        {
          *(void *)long long buf = *(void *)(v56 + 16);
          *(void *)&uint8_t buf[8] = 0;
        }
        *(void *)&v253[1] = *(void *)(v56 + 40);
        buf[20] = *(unsigned char *)(v56 + 32);
        v55 += 6;
        unint64_t v61 = *(void *)(a1 + 872);
        int v62 = 6;
        do
        {
          if (v61 >= *v57)
          {
            unint64_t v61 = sub_1011E03D4(v233, (uint64_t)buf);
            uint64_t v63 = a1;
          }
          else
          {
            sub_1011E04FC((uint64_t)v57, v61, (uint64_t)buf);
            v61 += 112;
            uint64_t v63 = a1;
            *(void *)(a1 + 872) = v61;
          }
          *(void *)(v63 + 872) = v61;
          --v62;
        }
        while (v62);
        if (__p)
        {
          __int16 v257 = __p;
          operator delete(__p);
        }
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v56 = *(void *)(v56 + 8);
      }
      while (v56 != v44);
    }
    int v229 = v47 + v35 + v55;
    if (*(unsigned char *)(a1 + 2232))
    {
      uint64_t v64 = a1 + 1856;
      double v65 = (unint64_t *)(a1 + 880);
      unint64_t v66 = *(void *)(a1 + 872);
      int v67 = 12;
      do
      {
        if (v66 >= *v65)
        {
          unint64_t v66 = sub_1011E03D4(v233, v64);
          uint64_t v68 = a1;
        }
        else
        {
          sub_1011E04FC((uint64_t)v65, v66, v64);
          v66 += 112;
          uint64_t v68 = a1;
          *(void *)(a1 + 872) = v66;
        }
        *(void *)(v68 + 872) = v66;
        --v67;
      }
      while (v67);
      v229 += 12;
      int v216 = 12;
    }
    else
    {
      int v216 = 0;
    }
  }
  else
  {
    int v55 = 0;
    int v216 = 0;
    int v229 = v35;
  }
  if (!*(unsigned char *)(a1 + 114)
    || sub_100178D5C(a1 + 48, *(double *)(a1 + 1152), 6.0)
    || (uint64_t v69 = *(void *)(a1 + 4048), v223 = *(void *)(a1 + 4056), v69 == v223))
  {
    int v227 = 0;
  }
  else
  {
    int v227 = 0;
    do
    {
      uint64_t v70 = *(uint64_t **)v69;
      uint64_t v71 = *(std::__shared_weak_count **)(v69 + 8);
      if (v71) {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v72 = *(_DWORD *)(v69 + 16);
      int v231 = *(unsigned __int8 *)(v69 + 20);
      LOWORD(v238) = *(_WORD *)(v69 + 21);
      BYTE2(v238) = *(unsigned char *)(v69 + 23);
      float v73 = *(float *)(v69 + 24);
      int v74 = *(_DWORD *)(v69 + 28);
      uint64_t v75 = *(void *)(v69 + 32);
      uint64_t v76 = *(void *)(v69 + 40);
      v227 += 2;
      v229 += 2;
      char v77 = 1;
      uint64_t v225 = v69;
      uint64_t v78 = *(void *)(v69 + 48);
      do
      {
        char v79 = v77;
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&unsigned char buf[24] = 0;
        __int16 v257 = 0;
        uint64_t v258 = 0;
        __p = 0;
        memset(v253, 0, sizeof(v253));
        long long v254 = 0u;
        char v255 = 0;
        if (v71)
        {
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v80 = *(std::__shared_weak_count **)&buf[8];
          *(void *)long long buf = v70;
          *(void *)&uint8_t buf[8] = v71;
          if (v80) {
            sub_1000DB0A0(v80);
          }
        }
        else
        {
          *(void *)long long buf = v70;
          *(void *)&uint8_t buf[8] = 0;
        }
        *(_DWORD *)&uint8_t buf[16] = v72;
        buf[20] = v231;
        *(_WORD *)&buf[21] = v238;
        buf[23] = BYTE2(v238);
        *(float *)&unsigned char buf[24] = v73;
        *(_DWORD *)&buf[28] = v74;
        *(void *)&v253[0] = v75;
        *((void *)&v253[0] + 1) = v76;
        *(void *)&v253[1] = v78;
        unint64_t v81 = *(void *)(a1 + 872);
        if (v81 >= *(void *)(a1 + 880))
        {
          uint64_t v82 = sub_1011E03D4(v233, (uint64_t)buf);
          uint64_t v83 = a1;
        }
        else
        {
          sub_1011E04FC(a1 + 880, *(void *)(a1 + 872), (uint64_t)buf);
          uint64_t v82 = v81 + 112;
          uint64_t v83 = a1;
          *(void *)(a1 + 872) = v81 + 112;
        }
        *(void *)(v83 + 872) = v82;
        if (__p)
        {
          __int16 v257 = __p;
          operator delete(__p);
        }
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
        char v77 = 0;
      }
      while ((v79 & 1) != 0);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v84 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v85 = *(void *)(a1 + 1136);
        uint64_t v86 = *v70;
        *(_DWORD *)long long buf = 134350337;
        *(void *)&uint8_t buf[4] = v85;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)&buf[14] = v75;
        *(_WORD *)&unsigned char buf[22] = 2049;
        *(void *)&unsigned char buf[24] = v76;
        LOWORD(v253[0]) = 2050;
        *(double *)((char *)v253 + 2) = v73;
        WORD5(v253[0]) = 2049;
        *(void *)((char *)v253 + 12) = v86;
        WORD2(v253[1]) = 1026;
        *(_DWORD *)((char *)&v253[1] + 6) = v231;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHint,add particle,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", buf, 0x3Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v87 = *(void *)(a1 + 1136);
        uint64_t v88 = *v70;
        LODWORD(v248[0]) = 134350337;
        *(void *)((char *)v248 + 4) = v87;
        WORD2(v248[1]) = 2049;
        *(void *)((char *)&v248[1] + 6) = v75;
        HIWORD(v248[2]) = 2049;
        v248[3] = v76;
        LOWORD(v248[4]) = 2050;
        *(double *)((char *)&v248[4] + 2) = v73;
        WORD1(v248[5]) = 2049;
        *(void *)((char *)&v248[5] + 4) = v88;
        WORD2(v248[6]) = 1026;
        *(_DWORD *)((char *)&v248[6] + 6) = v231;
        double v89 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v89);
        if (v89 != buf) {
          free(v89);
        }
      }
      if (v71) {
        sub_1000DB0A0(v71);
      }
      uint64_t v69 = v225 + 56;
    }
    while (v225 + 56 != v223);
  }
  if (*(unsigned char *)(a1 + 2684))
  {
    uint64_t v235 = (uint64_t)&v235;
    long long v236 = &v235;
    uint64_t v237 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, double))(*(void *)v230 + 64))(v230, &v235, 40.0) & 1) == 0
      && *(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      double v90 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "CLMM,railway search,roadsWithinDistance returned false", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LOWORD(v248[0]) = 0;
        long long v214 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v214);
        if (v214 != buf) {
          free(v214);
        }
      }
    }
    if (!v237 || (uint64_t v91 = v236, v236 == &v235))
    {
      int v92 = 0;
    }
    else
    {
      int v92 = 0;
      uint64_t v93 = a1 + 880;
      do
      {
        if (*(unsigned char *)(v91[2] + 17))
        {
          memset(v248, 0, 20);
          WORD2(v248[2]) = 1;
          LODWORD(v248[3]) = 0;
          uint64_t v250 = 0;
          uint64_t v251 = 0;
          __int16 v249 = 0;
          memset(&v248[4], 0, 49);
          uint64_t v95 = v91[2];
          uint64_t v94 = v91[3];
          if (v94)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
            uint64_t v96 = (std::__shared_weak_count *)v248[1];
            v248[0] = v95;
            v248[1] = v94;
            if (v96) {
              sub_1000DB0A0(v96);
            }
          }
          else
          {
            v248[0] = v91[2];
            v248[1] = 0;
          }
          long long v97 = *((_OWORD *)v91 + 3);
          *(_OWORD *)&v248[2] = *((_OWORD *)v91 + 2);
          *(_OWORD *)&v248[4] = v97;
          v248[6] = v91[8];
          unint64_t v98 = *(void *)(a1 + 872);
          if (v98 >= *(void *)(a1 + 880))
          {
            unint64_t v99 = sub_1011E03D4(v233, (uint64_t)v248);
            uint64_t v100 = a1;
          }
          else
          {
            sub_1011E04FC(v93, *(void *)(a1 + 872), (uint64_t)v248);
            unint64_t v99 = v98 + 112;
            uint64_t v100 = a1;
            *(void *)(a1 + 872) = v99;
          }
          *(void *)(v100 + 872) = v99;
          if (v99 >= *(void *)(v100 + 880))
          {
            uint64_t v101 = sub_1011E03D4(v233, (uint64_t)v248);
            uint64_t v102 = a1;
          }
          else
          {
            sub_1011E04FC(v93, v99, (uint64_t)v248);
            uint64_t v101 = v99 + 112;
            uint64_t v102 = a1;
            *(void *)(a1 + 872) = v99 + 112;
          }
          *(void *)(v102 + 872) = v101;
          if (*(unsigned char *)(v102 + 96))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            uint64_t v103 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v104 = *(void *)(a1 + 1136);
              uint64_t v105 = *(void *)v91[2];
              *(_DWORD *)long long buf = 134350081;
              *(void *)&uint8_t buf[4] = v104;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&buf[14] = v248[4];
              *(_WORD *)&unsigned char buf[22] = 2049;
              *(void *)&unsigned char buf[24] = v248[5];
              LOWORD(v253[0]) = 2050;
              *(double *)((char *)v253 + 2) = *(float *)&v248[3];
              WORD5(v253[0]) = 2049;
              *(void *)((char *)v253 + 12) = v105;
              _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "CLMM,railwayParticle,timestamp,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.3lf,rseg,%{private}lld", buf, 0x34u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              uint64_t v106 = *(void *)(a1 + 1136);
              uint64_t v107 = *(void *)v91[2];
              int v238 = 134350081;
              uint64_t v239 = v106;
              __int16 v240 = 2049;
              uint64_t v241 = v248[4];
              __int16 v242 = 2049;
              uint64_t v243 = v248[5];
              __int16 v244 = 2050;
              double v245 = *(float *)&v248[3];
              __int16 v246 = 2049;
              uint64_t v247 = v107;
              uint64_t v108 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v108);
              if (v108 != buf) {
                free(v108);
              }
            }
          }
          if (v249)
          {
            uint64_t v250 = v249;
            operator delete(v249);
          }
          if (v248[1]) {
            sub_1000DB0A0((std::__shared_weak_count *)v248[1]);
          }
          v92 += 2;
        }
        uint64_t v91 = (uint64_t *)v91[1];
      }
      while (v91 != &v235);
    }
    sub_10017FF2C(&v235);
  }
  else
  {
    int v92 = 0;
  }
  if (*(unsigned char *)(a1 + 2512) && *(unsigned char *)(a1 + 2233))
  {
    uint64_t v109 = a1 + 2520;
    uint64_t v110 = (unint64_t *)(a1 + 880);
    unint64_t v111 = *(void *)(a1 + 872);
    int v112 = 4;
    do
    {
      if (v111 >= *v110)
      {
        unint64_t v111 = sub_1011E03D4(v233, v109);
        uint64_t v113 = a1;
      }
      else
      {
        sub_1011E04FC((uint64_t)v110, v111, v109);
        v111 += 112;
        uint64_t v113 = a1;
        *(void *)(a1 + 872) = v111;
      }
      *(void *)(v113 + 872) = v111;
      --v112;
    }
    while (v112);
    v229 += 4;
    int v114 = 4;
  }
  else
  {
    int v114 = 0;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    __int16 v115 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v116 = -1227133513 * ((*(void *)(a1 + 872) - *(void *)(a1 + 864)) >> 4);
      *(_DWORD *)long long buf = 67242240;
      *(_DWORD *)&uint8_t buf[4] = v116;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = -1227133513 * (v219 >> 4);
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&uint8_t buf[16] = v229;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&unsigned char buf[22] = v220;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&buf[28] = 0;
      LOWORD(v253[0]) = 1026;
      *(_DWORD *)((char *)v253 + 2) = v55;
      WORD3(v253[0]) = 1026;
      DWORD2(v253[0]) = v216;
      WORD6(v253[0]) = 1026;
      *(_DWORD *)((char *)v253 + 14) = v114;
      WORD1(v253[1]) = 1026;
      DWORD1(v253[1]) = v227;
      _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "CLMM,prediction,NrParticles,%{public}d,NrStandard,%{public}d,NrNew,%{public}d,NrPriorIntersectionParticles,%{public}d,NrNewAlternateCandidateNoiseParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewAmbiguous,%{public}d,NrNewRouteParticles,%{public}d", buf, 0x38u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      int v211 = -1227133513 * ((*(void *)(a1 + 872) - *(void *)(a1 + 864)) >> 4);
      LODWORD(v248[0]) = 67242240;
      HIDWORD(v248[0]) = v211;
      LOWORD(v248[1]) = 1026;
      *(_DWORD *)((char *)&v248[1] + 2) = -1227133513 * (v219 >> 4);
      HIWORD(v248[1]) = 1026;
      LODWORD(v248[2]) = v229;
      WORD2(v248[2]) = 1026;
      *(_DWORD *)((char *)&v248[2] + 6) = v220;
      WORD1(v248[3]) = 1026;
      HIDWORD(v248[3]) = 0;
      LOWORD(v248[4]) = 1026;
      *(_DWORD *)((char *)&v248[4] + 2) = v55;
      HIWORD(v248[4]) = 1026;
      LODWORD(v248[5]) = v216;
      WORD2(v248[5]) = 1026;
      *(_DWORD *)((char *)&v248[5] + 6) = v114;
      WORD1(v248[6]) = 1026;
      HIDWORD(v248[6]) = v227;
      long long v212 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v212);
      if (v212 != buf) {
        free(v212);
      }
    }
  }
  uint64_t v117 = *(void *)(a1 + 864);
  if (v117 == *(void *)(a1 + 872))
  {
    double v122 = 0.0;
LABEL_323:
    uint64_t v1 = v222;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      __int16 v179 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        *(double *)&uint8_t buf[4] = v122;
        _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_ERROR, "CLMM,totalScore<=0,%{public}.1lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LODWORD(v248[0]) = 134349056;
        *(double *)((char *)v248 + 4) = v122;
        long long v213 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v213);
        if (v213 != buf) {
          free(v213);
        }
        uint64_t v1 = v222;
      }
    }
    uint64_t v180 = *(void **)(a1 + 872);
    __int16 v181 = *(void **)(a1 + 864);
    while (v180 != v181)
    {
      v180 -= 14;
      sub_10082B8C8(a1 + 880, v180);
    }
    uint64_t v41 = 0;
    uint64_t v42 = a1;
    *(void *)(a1 + 872) = v181;
LABEL_84:
    ++*(_DWORD *)(v42 + 104);
    if (v1) {
      goto LABEL_85;
    }
    return v41;
  }
  int v118 = 0;
  int v119 = -1227133513 * (v219 >> 4);
  int v224 = v220 - 1227133513 * (v219 >> 4);
  int v221 = v55 + v224;
  int v218 = v216 + v55 + v224;
  int v120 = v227 + v218;
  if (v120 <= v92 + v120) {
    v120 += v92;
  }
  int v217 = v120;
  uint64_t v232 = a1 + 912;
  double v226 = v17;
  if (v17 + v33 + 0.0 <= 0.0) {
    double v121 = 0.1;
  }
  else {
    double v121 = v17 + v33 + 0.0;
  }
  double v122 = 0.0;
  long long v123 = (double *)(a1 + 1128);
  double v228 = v121;
  while (v118 < v119)
  {
    if (byte_102476978)
    {
      byte_102476978 = 0;
      float v124 = *(float *)&dword_10247697C;
    }
    else
    {
      do
      {
        float v125 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
        float v126 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
        float v127 = (float)(v126 * v126) + (float)(v125 * v125);
      }
      while (v127 >= 1.0);
      float v124 = 0.0;
      if (v127 != 0.0)
      {
        float v128 = sqrtf((float)(logf((float)(v126 * v126) + (float)(v125 * v125)) * -2.0) / v127);
        *(float *)&dword_10247697C = v126 * v128;
        byte_102476978 = 1;
        float v124 = v125 * v128;
      }
    }
    double v129 = *(double *)(a1 + 1832);
    double v130 = v129 * v124;
    if ((-1171354717 * v118) <= 0x1745D174 && v129 < 8.0)
    {
      double v130 = fabs(v130) / v129 * 8.0;
      double v121 = v228;
    }
    else
    {
      double v121 = v228;
      if ((-252645135 * v118) <= 0xF0F0F0F) {
        double v130 = fabs(v130) / v129 * 34.0;
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v230 + 88))(v230, v117, v232, v226 + v130) & 1) == 0)
    {
      uint64_t v1 = v222;
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_406;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v203 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,standard particles", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_406;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_434;
      }
LABEL_440:
      dispatch_once(&qword_102419430, &stru_102317A08);
      goto LABEL_434;
    }
LABEL_288:
    if (!*(void *)v117)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v1 = v222;
      uint64_t v182 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v182, OS_LOG_TYPE_ERROR, "CLMM,NULL road", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_338:
          LOWORD(v248[0]) = 0;
          int v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v26);
          goto LABEL_415;
        }
LABEL_438:
        dispatch_once(&qword_102419430, &stru_102317A08);
        goto LABEL_338;
      }
LABEL_83:
      uint64_t v41 = 0;
      uint64_t v42 = a1;
      goto LABEL_84;
    }
    if (*(double *)(v117 + 32) == 0.0 && *(double *)(v117 + 40) == 0.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v1 = v222;
      long long v202 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_ERROR, "CLMM,Unexpected particle with snapLat == snapLon == 0", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_338;
        }
        goto LABEL_438;
      }
      goto LABEL_83;
    }
    *(void *)(v117 + 56) = 0;
    *(void *)(v117 + 64) = 0;
    *(void *)(v117 + 72) = 0;
    __int16 v150 = (char **)(v117 + 88);
    *(void *)(v117 + 96) = *(void *)(v117 + 88);
    memset(buf, 0, 24);
    *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
    memset(v253, 0, sizeof(v253));
    LODWORD(v254) = 0;
    sub_1011BEBD8(a1, a1 + 656, v117, v123, (uint64_t)buf);
    unint64_t v151 = *(void *)(v117 + 104);
    uint64_t v152 = *(void *)&buf[16];
    *(void *)(v117 + 56) = *(void *)buf;
    *(void *)(v117 + 72) = v152;
    LODWORD(v254) = 1;
    *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
    unint64_t v153 = *(void *)(v117 + 96);
    if (v153 >= v151)
    {
      unint64_t v158 = 0x8E38E38E38E38E39 * ((uint64_t)(v153 - (void)*v150) >> 3);
      unint64_t v159 = v158 + 1;
      if (v158 + 1 > 0x38E38E38E38E38ELL) {
        sub_1001D7FD4();
      }
      unint64_t v160 = 0x8E38E38E38E38E39 * ((uint64_t)(v151 - (void)*v150) >> 3);
      if (2 * v160 > v159) {
        unint64_t v159 = 2 * v160;
      }
      if (v160 >= 0x1C71C71C71C71C7) {
        unint64_t v161 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v161 = v159;
      }
      if (v161) {
        __int16 v162 = (char *)sub_10021D4B8(v117 + 104, v161);
      }
      else {
        __int16 v162 = 0;
      }
      uint64_t v163 = &v162[72 * v158];
      *(_OWORD *)uint64_t v163 = *(_OWORD *)buf;
      long long v164 = *(_OWORD *)&buf[16];
      long long v165 = v253[0];
      long long v166 = v253[1];
      *((void *)v163 + 8) = v254;
      *((_OWORD *)v163 + 2) = v165;
      *((_OWORD *)v163 + 3) = v166;
      *((_OWORD *)v163 + 1) = v164;
      double v168 = *(char **)(v117 + 88);
      __int16 v167 = *(char **)(v117 + 96);
      __int16 v169 = v163;
      if (v167 != v168)
      {
        do
        {
          *(_OWORD *)(v169 - 72) = *(_OWORD *)(v167 - 72);
          long long v170 = *(_OWORD *)(v167 - 56);
          long long v171 = *(_OWORD *)(v167 - 40);
          long long v172 = *(_OWORD *)(v167 - 24);
          *((_DWORD *)v169 - 2) = *((_DWORD *)v167 - 2);
          *(_OWORD *)(v169 - 24) = v172;
          *(_OWORD *)(v169 - 40) = v171;
          *(_OWORD *)(v169 - 56) = v170;
          v169 -= 72;
          v167 -= 72;
        }
        while (v167 != v168);
        __int16 v167 = *v150;
      }
      int v157 = v163 + 72;
      *(void *)(v117 + 88) = v169;
      *(void *)(v117 + 96) = v163 + 72;
      *(void *)(v117 + 104) = &v162[72 * v161];
      if (v167) {
        operator delete(v167);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v153 = *(_OWORD *)buf;
      long long v154 = *(_OWORD *)&buf[16];
      long long v155 = v253[0];
      long long v156 = v253[1];
      *(void *)(v153 + 64) = v254;
      *(_OWORD *)(v153 + 32) = v155;
      *(_OWORD *)(v153 + 48) = v156;
      *(_OWORD *)(v153 + 16) = v154;
      int v157 = (char *)(v153 + 72);
    }
    ++v118;
    *(void *)(v117 + 96) = v157;
    double v122 = v122 + *(double *)(v117 + 56);
    v117 += 112;
    if (v117 == *(void *)(a1 + 872))
    {
      if (v122 > 0.0)
      {
        uint64_t v183 = *v233;
        if (*v233 == v117)
        {
          uint64_t v41 = 1;
LABEL_111:
          uint64_t v1 = v222;
          if (v222) {
            goto LABEL_85;
          }
          return v41;
        }
        uint64_t v184 = (void **)(a1 + 936);
        __int16 v185 = (void *)(a1 + 952);
        uint64_t v186 = *(float **)(a1 + 944);
        double v187 = 0.0;
        do
        {
          uint64_t v188 = v183;
          double v189 = *(double *)(v183 + 56) / v122;
          *(double *)(v183 + 64) = v189;
          double v187 = v187 + v189;
          float v190 = v187;
          if ((unint64_t)v186 >= *v185)
          {
            v192 = (float *)*v184;
            uint64_t v193 = ((char *)v186 - (unsigned char *)*v184) >> 2;
            unint64_t v194 = v193 + 1;
            if ((unint64_t)(v193 + 1) >> 62) {
              sub_1001D7FD4();
            }
            uint64_t v195 = *v185 - (void)v192;
            if (v195 >> 1 > v194) {
              unint64_t v194 = v195 >> 1;
            }
            if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v196 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v196 = v194;
            }
            if (v196)
            {
              long long v197 = (char *)sub_10017EA34((uint64_t)v185, v196);
              uint64_t v186 = *(float **)(a1 + 944);
              v192 = *(float **)(a1 + 936);
            }
            else
            {
              long long v197 = 0;
            }
            long long v198 = (float *)&v197[4 * v193];
            *long long v198 = v190;
            uint64_t v191 = v198 + 1;
            while (v186 != v192)
            {
              int v199 = *((_DWORD *)v186-- - 1);
              *((_DWORD *)v198-- - 1) = v199;
            }
            *(void *)(a1 + 936) = v198;
            *(void *)(a1 + 944) = v191;
            *(void *)(a1 + 952) = &v197[4 * v196];
            if (v192) {
              operator delete(v192);
            }
          }
          else
          {
            *uint64_t v186 = v190;
            uint64_t v191 = v186 + 1;
          }
          *(void *)(a1 + 944) = v191;
          uint64_t v183 = v188 + 112;
          uint64_t v186 = v191;
        }
        while (v188 + 112 != *(void *)(a1 + 872));
        uint64_t v1 = v222;
        if (v183 != *v233)
        {
          uint64_t v200 = *v233 - 112;
          double v201 = 0.0;
          do
          {
            double v201 = v201 + *(double *)(v200 + 176) * *(double *)(v200 + 176);
            v200 += 112;
          }
          while (v200 != v188);
          if (v201 > 0.0) {
            *(double *)(a1 + 1608) = 1.0 / v201;
          }
        }
LABEL_364:
        uint64_t v41 = 1;
        if (v1) {
          goto LABEL_85;
        }
        return v41;
      }
      goto LABEL_323;
    }
  }
  if (v118 < v224)
  {
    uint64_t v132 = *(void *)(v117 + 8);
    v248[0] = *(void *)v117;
    v248[1] = v132;
    if (v132) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 8), 1uLL, memory_order_relaxed);
    }
    long long v133 = *(_OWORD *)(v117 + 16);
    long long v134 = *(_OWORD *)(v117 + 32);
    v248[6] = *(void *)(v117 + 48);
    *(_OWORD *)&v248[2] = v133;
    *(_OWORD *)&v248[4] = v134;
    long long v135 = *(_OWORD *)(v117 + 65);
    *(_OWORD *)&v248[7] = *(_OWORD *)(v117 + 56);
    *(_OWORD *)((char *)&v248[8] + 1) = v135;
    uint64_t v250 = 0;
    uint64_t v251 = 0;
    __int16 v249 = 0;
    sub_101000368(&v249, *(const void **)(v117 + 88), *(void *)(v117 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v117 + 96) - *(void *)(v117 + 88)) >> 3));
    int v136 = 4;
    while (1)
    {
      char v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v230 + 88))(v230, v117, v232, v121);
      if ((v137 & 1) == 0) {
        break;
      }
      uint64_t v138 = v248[0];
      if (**(void **)v117 == *(void *)v248[0] && *(unsigned __int8 *)(v117 + 20) != BYTE4(v248[2]))
      {
        uint64_t v139 = v248[1];
        if (v248[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v248[1] + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v140 = *(std::__shared_weak_count **)(v117 + 8);
        *(void *)uint64_t v117 = v138;
        *(void *)(v117 + 8) = v139;
        if (v140) {
          sub_1000DB0A0(v140);
        }
        long long v141 = *(_OWORD *)&v248[2];
        long long v142 = *(_OWORD *)&v248[4];
        *(void *)(v117 + 48) = v248[6];
        *(_OWORD *)(v117 + 16) = v141;
        *(_OWORD *)(v117 + 32) = v142;
        long long v143 = *(_OWORD *)&v248[7];
        *(_OWORD *)(v117 + 65) = *(_OWORD *)((char *)&v248[8] + 1);
        *(_OWORD *)(v117 + 56) = v143;
        if ((void *)v117 != v248) {
          sub_1010003E4((char *)(v117 + 88), (char *)v249, (uint64_t)v250, 0x8E38E38E38E38E39 * ((v250 - (unsigned char *)v249) >> 3));
        }
        if (--v136) {
          continue;
        }
      }
      goto LABEL_283;
    }
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v149 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,prior intersection particles", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LOWORD(v238) = 0;
        uint64_t v178 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v178);
        if (v178 != buf) {
          free(v178);
        }
        double v121 = v228;
      }
    }
    ++*(_DWORD *)(a1 + 108);
LABEL_283:
    if (v249)
    {
      uint64_t v250 = v249;
      operator delete(v249);
    }
    long long v123 = (double *)(a1 + 1128);
    int v119 = -1227133513 * (v219 >> 4);
    if (v248[1]) {
      sub_1000DB0A0((std::__shared_weak_count *)v248[1]);
    }
    if ((v137 & 1) == 0)
    {
      uint64_t v41 = 0;
      goto LABEL_111;
    }
    goto LABEL_288;
  }
  if (v118 < v221)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v230 + 88))(v230, v117, v232, (double)((v118 - v224) % 6 + 1) * 3.5 + 0.0))goto LABEL_288; {
    uint64_t v1 = v222;
    }
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_406;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    long long v204 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,fwd intersection particles", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_406;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      goto LABEL_440;
    }
    goto LABEL_434;
  }
  if (v118 < v218)
  {
    if (byte_102476978)
    {
      byte_102476978 = 0;
      float v144 = *(float *)&dword_10247697C;
    }
    else
    {
      do
      {
        float v145 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
        float v146 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
        float v147 = (float)(v146 * v146) + (float)(v145 * v145);
      }
      while (v147 >= 1.0);
      float v144 = 0.0;
      if (v147 != 0.0)
      {
        float v148 = sqrtf((float)(logf((float)(v146 * v146) + (float)(v145 * v145)) * -2.0) / v147);
        *(float *)&dword_10247697C = v146 * v148;
        byte_102476978 = 1;
        float v144 = v145 * v148;
      }
    }
    double v121 = v228;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v230 + 88))(v230, v117, v232, *(double *)(a1 + 1832) * v144 + 0.0))goto LABEL_288; {
    uint64_t v1 = v222;
    }
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_406;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    long long v205 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,prior snap particles", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_406;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      goto LABEL_440;
    }
LABEL_434:
    LOWORD(v248[0]) = 0;
    long long v215 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "%s\n", v215);
    if (v215 != buf) {
      free(v215);
    }
    uint64_t v1 = v222;
    goto LABEL_406;
  }
  if (v118 < v217) {
    goto LABEL_288;
  }
  if (byte_102476978)
  {
    byte_102476978 = 0;
    float v173 = *(float *)&dword_10247697C;
  }
  else
  {
    do
    {
      float v174 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
      float v175 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
      float v176 = (float)(v175 * v175) + (float)(v174 * v174);
    }
    while (v176 >= 1.0);
    float v173 = 0.0;
    if (v176 != 0.0)
    {
      float v177 = sqrtf((float)(logf((float)(v175 * v175) + (float)(v174 * v174)) * -2.0) / v176);
      *(float *)&dword_10247697C = v175 * v177;
      byte_102476978 = 1;
      float v173 = v174 * v177;
    }
  }
  double v121 = v228;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v230 + 88))(v230, v117, v232, v226 + *(double *)(a1 + 1832) * v173))goto LABEL_288; {
  uint64_t v1 = v222;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    v206 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v206, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,alternate ambiguous particles", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_434;
      }
      goto LABEL_440;
    }
  }
LABEL_406:
  uint64_t v41 = 0;
  ++*(_DWORD *)(a1 + 108);
  if (!v1) {
    return v41;
  }
LABEL_85:
  sub_1000DB0A0(v1);
  return v41;
}

void sub_1011CCD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011CCED0(uint64_t a1)
{
  sub_1011DFF0C(a1 + 984, *(void **)(a1 + 992));
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 992) = 0;
  uint64_t v2 = *(void *)(a1 + 872);
  uint64_t v3 = *(void *)(a1 + 864);
  uint64_t v4 = v2 - v3;
  if (v2 == v3) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,resample", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      LOWORD(v40) = 0;
      int v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::resample()", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
  }
  if (*(double *)(a1 + 1224) == 0.0 || *(unsigned char *)(a1 + 1356))
  {
    unsigned int v6 = 48;
    int v7 = 5;
  }
  else
  {
    unsigned int v6 = 96;
    int v7 = 10;
  }
  uint64_t v40 = 0;
  unint64_t v41 = 0;
  unint64_t v8 = v6;
  v42[0] = 0;
  sub_1011CD4FC(&v40, v6);
  *(_DWORD *)long long buf = 0;
  sub_100D0C2C0(&__p, 0x6DB6DB6DB6DB6DB7 * (v4 >> 4), buf);
  if (*(unsigned char *)(a1 + 2232) && *(unsigned char *)(a1 + 2489) && *(void *)(a1 + 1856))
  {
    int v9 = v7;
    do
    {
      unint64_t v10 = v41;
      if (v41 >= v42[0])
      {
        uint64_t v11 = sub_1011E03D4(&v40, a1 + 1856);
      }
      else
      {
        sub_1011E04FC((uint64_t)v42, v41, a1 + 1856);
        uint64_t v11 = v10 + 112;
      }
      unint64_t v41 = v11;
      sub_1011C8000(a1);
      --v9;
    }
    while (v9);
  }
  else
  {
    int v7 = 0;
  }
  int v12 = 0;
  do
  {
    uint64_t v13 = random();
    uint64_t v14 = *(float **)(a1 + 936);
    uint64_t v15 = *(float **)(a1 + 944);
    if (v15 != v14)
    {
      unint64_t v16 = v15 - v14;
      uint64_t v15 = *(float **)(a1 + 936);
      do
      {
        unint64_t v17 = v16 >> 1;
        double v18 = &v15[v16 >> 1];
        float v20 = *v18;
        double v19 = v18 + 1;
        v16 += ~(v16 >> 1);
        if (v20 < (float)((float)v13 * 4.6566e-10)) {
          uint64_t v15 = v19;
        }
        else {
          unint64_t v16 = v17;
        }
      }
      while (v16);
    }
    ++*(_DWORD *)((char *)__p + (((char *)v15 - (char *)v14) << 30 >> 30));
    ++v12;
  }
  while (v12 != v8 - v7);
  uint64_t v21 = *(void *)(a1 + 864);
  unint64_t v22 = *(void *)(a1 + 872);
  if (v21 == v22)
  {
    unint64_t v22 = *(void *)(a1 + 864);
  }
  else
  {
    unint64_t v23 = 0;
    uint64_t v24 = __p;
    do
    {
      if (v23 >= (v39 - v24) >> 2) {
        break;
      }
      if (*(int *)&v24[4 * v23] >= 1)
      {
        int v25 = 0;
        do
        {
          unint64_t v26 = v41;
          if (v41 >= v42[0])
          {
            uint64_t v27 = sub_1011E03D4(&v40, v21);
          }
          else
          {
            sub_1011E04FC((uint64_t)v42, v41, v21);
            uint64_t v27 = v26 + 112;
          }
          unint64_t v41 = v27;
          sub_1011C8000(a1);
          ++v25;
          uint64_t v24 = __p;
        }
        while (v25 < *((_DWORD *)__p + v23));
        unint64_t v22 = *(void *)(a1 + 872);
      }
      v21 += 112;
      ++v23;
    }
    while (v21 != v22);
  }
  unint64_t v29 = v41;
  unint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v41 - v40) >> 4);
  BOOL v31 = v30 > v8;
  BOOL v28 = v30 <= v8;
  if (v31)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      int v34 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v30;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLMM,Unexpected number of particles after resampling,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        int v43 = 67240192;
        int v44 = v30;
        unint64_t v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::resample()", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
    }
  }
  else
  {
    uint64_t v32 = *(void *)(a1 + 864);
    *(void *)(a1 + 864) = v40;
    *(void *)(a1 + 872) = v29;
    uint64_t v40 = v32;
    unint64_t v41 = v22;
    uint64_t v33 = *(void *)(a1 + 880);
    *(void *)(a1 + 880) = v42[0];
    v42[0] = v33;
  }
  if (__p)
  {
    uint64_t v39 = __p;
    operator delete(__p);
  }
  *(void *)long long buf = &v40;
  sub_10082B830((void ***)buf);
  return v28;
}

void sub_1011CD49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21)
{
  if (__p) {
    operator delete(__p);
  }
  a21 = &a15;
  sub_10082B830((void ***)&a21);
  _Unwind_Resume(a1);
}

void **sub_1011CD4FC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  id result = (void **)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_100227C5C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 112 * v6;
    sub_1011E059C(a1, v7);
    return sub_1011E0770(v7);
  }
  return result;
}

void sub_1011CD5A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1011E0770((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011CD5BC(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 1656);
  if (*(void *)(a1 + 1656))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 1664);
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,extractSolution", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      __int16 v226 = 0;
      long long v165 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v165);
      if (v165 != &buf) {
        free(v165);
      }
    }
  }
  int v217 = v2;
  LOBYTE(v226) = 0;
  uint64_t v5 = (void *)(a1 + 984);
  long long v227 = 0u;
  uint64_t v6 = (void *)(a1 + 992);
  int v228 = 0;
  __int16 v229 = 1;
  int v230 = 0;
  long long v231 = 0u;
  long long v232 = 0u;
  long long v233 = 0u;
  char v234 = 0;
  long long v235 = 0u;
  long long v236 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v238 = _Q1;
  long long v239 = 0u;
  uint64_t v237 = 0;
  unint64_t v240 = 0xBFF0000000000000;
  uint64_t v252 = 0;
  int v253 = 0;
  __int16 v251 = 0;
  memset(&v250[32], 0, 32);
  long long v254 = 0u;
  long long v255 = 0u;
  long long v256 = 0u;
  memset(v257, 0, 27);
  memset(&v257[32], 0, 48);
  long long v241 = 0u;
  long long v242 = 0u;
  long long v243 = 0u;
  long long v244 = 0u;
  long long v245 = 0u;
  long long v246 = 0u;
  long long v247 = 0u;
  long long v248 = 0u;
  long long v249 = 0u;
  memset(v250, 0, 30);
  unint64_t v259 = 0xBFF0000000000000;
  uint64_t v258 = 0;
  char v260 = 0;
  long long v268 = 0u;
  int v269 = 0;
  long long v261 = 0u;
  long long v262 = 0u;
  long long v263 = 0u;
  long long v264 = 0u;
  memset(v265, 0, sizeof(v265));
  long long v266 = 0u;
  char v267 = 0;
  __int16 v270 = 1;
  int v271 = 0;
  char v275 = 0;
  long long v273 = 0u;
  long long v274 = 0u;
  long long v272 = 0u;
  memset(v279, 0, sizeof(v279));
  long long v278 = 0u;
  long long v277 = 0u;
  *(void *)&_Q1 = *(void *)(a1 + 1224);
  long long __p = 0u;
  if (*(double *)&_Q1 == 0.0 || *(unsigned char *)(a1 + 1356)) {
    *(void *)(a1 + 3144) = *(void *)(a1 + 1136);
  }
  uint64_t v11 = (void *)*v5;
  if ((void *)*v5 == v6) {
    goto LABEL_37;
  }
  int v12 = 0;
  int v218 = (double *)(a1 + 1128);
  uint64_t v13 = a1 + 992;
  do
  {
    if (!v11[7])
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      unint64_t v23 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_49;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_443;
      }
      goto LABEL_522;
    }
    if (*((unsigned char *)v11 + 200)) {
      uint64_t v14 = 216;
    }
    else {
      uint64_t v14 = 76;
    }
    int v15 = *(_DWORD *)((char *)v11 + v14);
    if (v15 > v12)
    {
      uint64_t v13 = (uint64_t)v11;
      int v12 = v15;
    }
    unint64_t v16 = (void *)v11[1];
    if (v16)
    {
      do
      {
        unint64_t v17 = v16;
        unint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        unint64_t v17 = (void *)v11[2];
        _ZF = *v17 == (void)v11;
        uint64_t v11 = v17;
      }
      while (!_ZF);
    }
    uint64_t v11 = v17;
  }
  while (v17 != v6);
  if (v12 <= 0)
  {
LABEL_37:
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    unint64_t v22 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLMM,Unexpected bestCount<=0", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_49;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_443;
    }
    goto LABEL_522;
  }
  if ((void *)v13 == v6)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    int v25 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMM,Unexpected no best candidate found", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_49;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_443;
    }
    goto LABEL_522;
  }
  *(_WORD *)(a1 + 1649) = 0;
  if (!*(unsigned char *)(v13 + 200) || !*(unsigned char *)(v13 + 192) || *(_DWORD *)(v13 + 212) <= *(_DWORD *)(v13 + 208)) {
    goto LABEL_142;
  }
  double v18 = sub_1011DFFFC(a1 + 984, v13 + 224);
  if (v6 == v18)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    unint64_t v26 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMM,Unexpected. There should be an outgoing road", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_49;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_443;
    }
LABEL_522:
    dispatch_once(&qword_102419430, &stru_102317A08);
LABEL_443:
    v283[0] = 0;
    long long v166 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v166);
    if (v166 != &buf) {
      free(v166);
    }
    goto LABEL_49;
  }
  memset(v288, 0, 20);
  *(_WORD *)&v288[20] = 1;
  LODWORD(v290) = 0;
  uint64_t v292 = 0;
  long long v291 = 0uLL;
  uint64_t v19 = v18[7];
  uint64_t v20 = v18[8];
  if (v20)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    *(void *)v288 = v19;
    *(void *)&v288[8] = v20;
  }
  else
  {
    *(void *)v288 = v18[7];
    *(void *)&v288[8] = 0;
  }
  if (!v19)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    BOOL v31 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "CLMM,Unexpected NULL outgoing road candidate", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      unint64_t v30 = (void *)(a1 + 984);
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_476;
      }
      goto LABEL_525;
    }
LABEL_93:
    int v32 = 0;
    goto LABEL_139;
  }
  *(_DWORD *)&v288[16] = 0;
  *(_WORD *)&v288[20] = *((unsigned __int8 *)v18 + 48);
  float v27 = *(double *)(v13 + 856);
  *(float *)&double v290 = v27;
  double v28 = *(double *)(v13 + 848);
  *(void *)&long long v291 = *(void *)(v13 + 840);
  *((double *)&v291 + 1) = v28;
  uint64_t v292 = *(void *)(v13 + 960);
  if (*(double *)&v291 == 0.0 && v28 == 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    unint64_t v29 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLMM,Unexpected outgoing snapLat==snapLon==0", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      unint64_t v30 = (void *)(a1 + 984);
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_476:
        v283[0] = 0;
        uint64_t v183 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v183);
        if (v183 != &buf) {
          free(v183);
        }
        int v32 = 0;
        uint64_t v5 = v30;
        goto LABEL_139;
      }
LABEL_525:
      dispatch_once(&qword_102419430, &stru_102317A08);
      goto LABEL_476;
    }
    goto LABEL_93;
  }
  *(void *)v280 = 0;
  uint64_t v224 = 0;
  double v225 = 0.0;
  uint64_t v222 = 0;
  uint64_t v223 = 0;
  uint64_t v221 = 0;
  sub_1011BEC0C(a1, a1 + 656, (uint64_t)v288, v218, v280, &v225, (double *)&v224, (double *)&v223, &v222, (double *)&v221, 0);
  uint64_t v33 = &qword_102419000;
  double v34 = sub_1011BBD04(*(double *)(v13 + 5136) - *(float *)&v290);
  double v35 = *(double *)(a1 + 1232);
  if (v35 >= 0.0)
  {
    double v163 = sub_1011BBD04(v35 - *(float *)&v290);
    BOOL v37 = 0;
    BOOL v36 = v163 < 25.0;
    BOOL v38 = v163 < 25.0 || *(double *)(v13 + 248) >= 7.5;
    if (v38 && v34 >= 45.0 && v163 >= 25.0)
    {
      if (*(double *)(a1 + 1320) >= 20.0)
      {
        BOOL v36 = 0;
        BOOL v37 = 0;
      }
      else
      {
        double v164 = sub_1011BBD04(*(double *)(v13 + 5136) - *(double *)(a1 + 1232));
        BOOL v36 = 0;
        BOOL v37 = v164 < 10.0;
        BOOL v38 = v164 >= 10.0;
      }
    }
  }
  else
  {
    BOOL v36 = 0;
    BOOL v37 = 0;
    BOOL v38 = 1;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v39 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v40 = *(void *)(a1 + 1136);
      std::string::size_type v41 = *(void *)(v13 + 5136);
      double v42 = *(double *)(a1 + 1232);
      uint64_t v43 = *(void *)(v13 + 248);
      uint64_t v44 = *(void *)(a1 + 1320);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134351360;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      double v294 = *(float *)&v290;
      __int16 v295 = 2050;
      double v296 = v42;
      __int16 v297 = 2050;
      uint64_t v298 = v43;
      __int16 v299 = 1026;
      BOOL v300 = v38;
      __int16 v301 = 2050;
      uint64_t v302 = v44;
      __int16 v303 = 1026;
      BOOL v304 = v34 >= 45.0;
      __int16 v305 = 1026;
      BOOL v306 = v36;
      __int16 v307 = 1026;
      BOOL v308 = v37;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCourseAligned,%{public}d, isMeanCandidateAlignedWithCourse,%{public}d", (uint8_t *)&buf, 0x56u);
    }
    uint64_t v33 = &qword_102419000;
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v189 = *(void *)(a1 + 1136);
      uint64_t v190 = *(void *)(v13 + 5136);
      uint64_t v191 = *(void *)(a1 + 1232);
      uint64_t v192 = *(void *)(v13 + 248);
      uint64_t v193 = *(void *)(a1 + 1320);
      *(_DWORD *)v283 = 134351360;
      *(void *)&v283[2] = v189;
      v283[6] = 2050;
      *(void *)&v283[7] = v190;
      v283[11] = 2050;
      *(double *)&v283[12] = *(float *)&v290;
      v283[16] = 2050;
      *(void *)&v283[17] = v191;
      v283[21] = 2050;
      *(void *)&v283[22] = v192;
      v283[26] = 1026;
      *(_DWORD *)&v283[27] = v38;
      v283[29] = 2050;
      *(void *)&v283[30] = v193;
      v283[34] = 1026;
      *(_DWORD *)&v283[35] = v34 >= 45.0;
      v283[37] = 1026;
      *(_DWORD *)&v283[38] = v36;
      v283[40] = 1026;
      BOOL v284 = v37;
      unint64_t v194 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v194);
      if (v194 != &buf) {
        free(v194);
      }
      uint64_t v33 = &qword_102419000;
    }
  }
  if (*(double *)(a1 + 1792) < 8.05555556 && (*(int *)(v13 + 196) > 1 || *(double *)(a1 + 1208) > 10.0))
  {
    double v45 = 15.0;
    if (*(double *)(a1 + 1224) > 0.0
      && !*(unsigned char *)(a1 + 1356)
      && vabdd_f64(*(double *)(a1 + 1136), *(double *)(a1 + 3144)) < 20.0)
    {
      double v45 = 7.5;
    }
    if (v34 >= 45.0 && v36) {
      double v46 = v45 * 0.6;
    }
    else {
      double v46 = v45;
    }
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      int v47 = v33[135];
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v48 = *(void *)(a1 + 1136);
        std::string::size_type v49 = *(void *)(v13 + 248);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v48;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v49;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
        double v294 = v46;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,exit distance check,distance,%{public}.2lf,exitDistance,%{public}.2lf", (uint8_t *)&buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v208 = *(void *)(a1 + 1136);
        uint64_t v209 = *(void *)(v13 + 248);
        *(_DWORD *)v283 = 134349568;
        *(void *)&v283[2] = v208;
        v283[6] = 2050;
        *(void *)&v283[7] = v209;
        v283[11] = 2050;
        *(double *)&v283[12] = v46;
        uint64_t v210 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v210);
        if (v210 != &buf) {
          free(v210);
        }
      }
    }
    if (v38) {
      BOOL v38 = *(double *)(v13 + 248) > v46;
    }
  }
  BOOL v50 = v34 >= 45.0 && v36;
  if (v50 && *(double *)(a1 + 1320) < 20.0)
  {
    if (!v38) {
      goto LABEL_131;
    }
LABEL_129:
    if (*(double *)(a1 + 1224) <= 0.0) {
      goto LABEL_131;
    }
    BOOL v51 = *(unsigned char *)(a1 + 1356) == 0;
  }
  else
  {
    if (v38 && *(int *)(v13 + 212) > 2 * *(int *)(v13 + 208)) {
      goto LABEL_129;
    }
LABEL_131:
    BOOL v51 = 0;
  }
  *(unsigned char *)(a1 + 1650) = v51;
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    unint64_t v52 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v53 = *(void *)(a1 + 1136);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v51;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,outgoing condition,%{public}d", (uint8_t *)&buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v195 = *(void *)(a1 + 1136);
      *(_DWORD *)v283 = 134349312;
      *(void *)&v283[2] = v195;
      v283[6] = 1026;
      *(_DWORD *)&v283[7] = v51;
      unint64_t v196 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v196);
      if (v196 != &buf) {
        free(v196);
      }
    }
  }
  int v32 = 1;
  *(unsigned char *)(a1 + 1649) = 1;
  uint64_t v5 = (void *)(a1 + 984);
LABEL_139:
  if (*(void *)&v288[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v288[8]);
  }
  if (!v32)
  {
LABEL_49:
    uint64_t v21 = 0;
    goto LABEL_50;
  }
LABEL_142:
  long long v215 = v5;
  memset(v283, 0, 20);
  v283[10] = 1;
  *(_DWORD *)&v283[12] = 0;
  uint64_t v287 = 0;
  __src = 0;
  v286 = 0;
  memset(&v283[16], 0, 49);
  double v54 = *(double *)(a1 + 1320);
  if (v54 < 19.0)
  {
    *(void *)(a1 + 1320) = 0x4033000000000000;
    sub_1011BD114(a1, (uint64_t)v218);
  }
  uint64_t v55 = *(void *)(a1 + 864);
  if (v55 != *(void *)(a1 + 872))
  {
    uint64_t v216 = v13 + 224;
    do
    {
      *(unsigned char *)(v55 + 80) = 0;
      sub_1011C9EF0((uint64_t *)v55, (uint64_t)&buf);
      if (sub_100FFD530((uint64_t)&buf, v13 + 32))
      {
        if (*(unsigned char *)(a1 + 1650) || !*(unsigned char *)(v13 + 200) || !*(unsigned char *)(v13 + 192)) {
          goto LABEL_148;
        }
        double v64 = *(double *)(v55 + 48);
        double v65 = *(double *)(v13 + 528);
        if (*(unsigned char *)(v13 + 48))
        {
          if (v64 <= v65) {
            goto LABEL_148;
          }
        }
        else if (v64 >= v65)
        {
          goto LABEL_148;
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + 1650))
        {
          if (*(unsigned char *)(v13 + 200))
          {
            if (*(unsigned char *)(v13 + 192))
            {
              sub_1011C9EF0((uint64_t *)v55, (uint64_t)&buf);
              if (sub_100FFD530((uint64_t)&buf, v216))
              {
                double v62 = *(double *)(v55 + 48);
                double v63 = *(double *)(v13 + 1120);
                if (*(unsigned char *)(v13 + 240))
                {
                  if (v62 >= v63) {
                    goto LABEL_148;
                  }
                }
                else if (v62 <= v63)
                {
                  goto LABEL_148;
                }
              }
            }
          }
        }
        if (*(unsigned char *)(v13 + 200))
        {
          if (!*(unsigned char *)(v13 + 192))
          {
            sub_1011C9EF0((uint64_t *)v55, (uint64_t)&buf);
            if (sub_100FFD530((uint64_t)&buf, v216))
            {
              double v66 = *(double *)(v55 + 48);
              double v67 = *(double *)(v13 + 1120);
              if (*(unsigned char *)(v13 + 240))
              {
                if (v66 >= v67) {
                  goto LABEL_179;
                }
              }
              else if (v66 <= v67)
              {
LABEL_179:
                *(unsigned char *)(v55 + 80) = 1;
LABEL_148:
                *(unsigned char *)(v55 + 80) = 1;
                sub_1011BEB6C(a1, a1 + 656, v55, v218, (void *)(v55 + 56), (void *)(v55 + 72));
                if (*(double *)(v55 + 56) > *(double *)&v283[28])
                {
                  uint64_t v57 = *(void *)v55;
                  uint64_t v56 = *(void *)(v55 + 8);
                  if (v56) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v58 = *(std::__shared_weak_count **)&v283[4];
                  *(void *)v283 = v57;
                  *(void *)&v283[4] = v56;
                  if (v58) {
                    sub_1000DB0A0(v58);
                  }
                  long long v59 = *(_OWORD *)(v55 + 16);
                  long long v60 = *(_OWORD *)(v55 + 32);
                  *(void *)&v283[24] = *(void *)(v55 + 48);
                  *(_OWORD *)&v283[8] = v59;
                  *(_OWORD *)&v283[16] = v60;
                  long long v61 = *(_OWORD *)(v55 + 56);
                  *(_OWORD *)((char *)&v283[32] + 1) = *(_OWORD *)(v55 + 65);
                  *(_OWORD *)&v283[28] = v61;
                  if ((_WORD *)v55 != v283) {
                    sub_1010003E4((char *)&__src, *(char **)(v55 + 88), *(void *)(v55 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v55 + 96) - *(void *)(v55 + 88)) >> 3));
                  }
                }
                goto LABEL_176;
              }
            }
          }
        }
      }
      *(unsigned char *)(v55 + 80) = 0;
LABEL_176:
      v55 += 112;
    }
    while (v55 != *(void *)(a1 + 872));
  }
  *(unsigned char *)(a1 + 1008) = 1;
  uint64_t v68 = *(void *)v283;
  uint64_t v69 = *(void *)&v283[4];
  if (*(void *)&v283[4]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v283[4] + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1016) = v68;
  uint64_t v70 = *(std::__shared_weak_count **)(a1 + 1024);
  *(void *)(a1 + 1024) = v69;
  if (v70) {
    sub_1000DB0A0(v70);
  }
  *(void *)(a1 + 1064) = *(void *)&v283[24];
  long long v71 = *(_OWORD *)&v283[16];
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)&v283[8];
  *(_OWORD *)(a1 + 1048) = v71;
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v283[28];
  *(_OWORD *)(a1 + 1081) = *(_OWORD *)((char *)&v283[32] + 1);
  if ((_WORD *)(a1 + 1016) != v283) {
    sub_1010003E4((char *)(a1 + 1104), (char *)__src, (uint64_t)v286, 0x8E38E38E38E38E39 * ((v286 - (unsigned char *)__src) >> 3));
  }
  if (*(unsigned char *)(a1 + 1650))
  {
    sub_1011C9EF0((uint64_t *)v283, (uint64_t)&buf);
    int v72 = (double *)(v13 + 224);
    if (sub_100FFD530(v13 + 224, (uint64_t)&buf))
    {
      long long v73 = *(_OWORD *)(v13 + 688);
      long long v74 = *(_OWORD *)(v13 + 704);
      long long v75 = *(_OWORD *)(v13 + 736);
      *(_OWORD *)(a1 + 1160) = *(_OWORD *)(v13 + 720);
      *(_OWORD *)(a1 + 1176) = v75;
      *(_OWORD *)int v218 = v73;
      *(_OWORD *)(a1 + 1144) = v74;
      long long v76 = *(_OWORD *)(v13 + 752);
      long long v77 = *(_OWORD *)(v13 + 768);
      long long v78 = *(_OWORD *)(v13 + 800);
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(v13 + 784);
      *(_OWORD *)(a1 + 1240) = v78;
      *(_OWORD *)(a1 + 1192) = v76;
      *(_OWORD *)(a1 + 1208) = v77;
      std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(v13 + 816));
      memcpy((void *)(a1 + 1280), (const void *)(v13 + 840), 0x118uLL);
      uint64_t v80 = *(void *)(v13 + 56);
      uint64_t v79 = *(void *)(v13 + 64);
      if (v79) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 1656) = v80;
      unint64_t v81 = *(std::__shared_weak_count **)(a1 + 1664);
      *(void *)(a1 + 1664) = v79;
      if (v81) {
        sub_1000DB0A0(v81);
      }
      if (*(unsigned char *)(a1 + 96) && *v217)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v82 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v83 = *(void *)(a1 + 1136);
          std::string::size_type v84 = **(void **)(a1 + 1656);
          double v85 = *v72;
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349569;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v83;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v84;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
          double v294 = v85;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", (uint8_t *)&buf, 0x20u);
        }
        uint64_t v5 = v215;
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v173 = *(void *)(a1 + 1136);
          uint64_t v174 = **(void **)(a1 + 1656);
          double v175 = *v72;
          *(_DWORD *)v288 = 134349569;
          *(void *)&v288[4] = v173;
          *(_WORD *)&v288[12] = 2049;
          *(void *)&v288[14] = v174;
          __int16 v289 = 2049;
          double v290 = v175;
          float v176 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v176);
          if (v176 != &buf) {
            free(v176);
          }
          uint64_t v5 = v215;
        }
      }
      if (v54 >= 19.0) {
        goto LABEL_220;
      }
LABEL_219:
      *(double *)(a1 + 1320) = v54;
      sub_1011BD114(a1, (uint64_t)v218);
      goto LABEL_220;
    }
  }
  if (*(unsigned char *)(v13 + 200))
  {
    if (!*(unsigned char *)(v13 + 192))
    {
      sub_1011C9EF0((uint64_t *)v283, (uint64_t)&buf);
      if (sub_100FFD530(v13 + 224, (uint64_t)&buf))
      {
        sub_100F0805C(v217, (uint64_t *)(v13 + 56));
        if (*(unsigned char *)(a1 + 96))
        {
          if (*v217)
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            uint64_t v86 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              std::string::size_type v87 = *(void *)(a1 + 1136);
              std::string::size_type v88 = **(void **)(a1 + 1656);
              double v89 = **(double **)v283;
              LODWORD(buf.__r_.__value_.__l.__data_) = 134349569;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v87;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v88;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
              double v294 = v89;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using particle on outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", (uint8_t *)&buf, 0x20u);
            }
            uint64_t v5 = v215;
            if (sub_10013D1A0(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              uint64_t v185 = *(void *)(a1 + 1136);
              uint64_t v186 = **(void **)(a1 + 1656);
              double v187 = **(double **)v283;
              *(_DWORD *)v288 = 134349569;
              *(void *)&v288[4] = v185;
              *(_WORD *)&v288[12] = 2049;
              *(void *)&v288[14] = v186;
              __int16 v289 = 2049;
              double v290 = v187;
              uint64_t v188 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v188);
              if (v188 != &buf) {
                free(v188);
              }
              uint64_t v5 = v215;
            }
          }
        }
      }
    }
  }
  long long v90 = *(_OWORD *)(v13 + 4968);
  long long v91 = *(_OWORD *)(v13 + 4984);
  long long v92 = *(_OWORD *)(v13 + 5016);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(v13 + 5000);
  *(_OWORD *)(a1 + 1176) = v92;
  *(_OWORD *)int v218 = v90;
  *(_OWORD *)(a1 + 1144) = v91;
  long long v93 = *(_OWORD *)(v13 + 5032);
  long long v94 = *(_OWORD *)(v13 + 5048);
  long long v95 = *(_OWORD *)(v13 + 5080);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(v13 + 5064);
  *(_OWORD *)(a1 + 1240) = v95;
  *(_OWORD *)(a1 + 1192) = v93;
  *(_OWORD *)(a1 + 1208) = v94;
  std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(v13 + 5096));
  memcpy((void *)(a1 + 1280), (const void *)(v13 + 5120), 0x118uLL);
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v96 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v97 = *(void *)(a1 + 1136);
      sub_1011C9EF0((uint64_t *)v283, (uint64_t)&buf);
      *(_DWORD *)v288 = 134349313;
      *(void *)&v288[4] = v97;
      *(_WORD *)&v288[12] = 2049;
      *(void *)&v288[14] = buf.__r_.__value_.__r.__words[0];
      _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,bestParticleRoadID,%{private}lld", v288, 0x16u);
    }
    uint64_t v5 = v215;
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v168 = *(void *)(a1 + 1136);
      sub_1011C9EF0((uint64_t *)v283, (uint64_t)v288);
      *(_DWORD *)v280 = 134349313;
      *(void *)&v280[4] = v168;
      __int16 v281 = 2049;
      uint64_t v282 = *(void *)v288;
      __int16 v169 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v169);
      if (v169 != &buf) {
        free(v169);
      }
      uint64_t v5 = v215;
    }
  }
  if (v54 < 19.0 && !*(unsigned char *)(a1 + 1649)) {
    goto LABEL_219;
  }
LABEL_220:
  if (*(unsigned char *)(a1 + 1490))
  {
    double v98 = 0.0;
    if (*(_DWORD *)(a1 + 1528) == 1) {
      goto LABEL_266;
    }
  }
  if (*(unsigned char *)(a1 + 1649) && !*(unsigned char *)(a1 + 1650) || (unint64_t v99 = (void *)*v5, (void *)*v5 == v6))
  {
    double v98 = 0.0;
    goto LABEL_266;
  }
  double v98 = 0.0;
  while (2)
  {
    if (v99 == (void *)v13 || *(unsigned char *)(v13 + 200) && sub_100FFD530((uint64_t)(v99 + 4), v13 + 224)) {
      goto LABEL_254;
    }
    double v100 = *((double *)v99 + 17);
    if (v100 == 0.0) {
      goto LABEL_254;
    }
    if (v100 > v98) {
      double v98 = *((double *)v99 + 17);
    }
    double v101 = *(double *)(v13 + 136) / v100;
    double v102 = v101 <= 1000000.0 ? v101 : 1000000.0;
    if (v102 > 3.0
      || (double v103 = sub_1011BBD04(*(double *)(v13 + 5136) - *((double *)v99 + 642)),
          *(void *)v280 = 0,
          double v225 = 0.0,
          sub_101172040((double *)(a1 + 608), (double *)v280, &v225, *(double *)(v13 + 5120), *(double *)(v13 + 5128), *(double *)(v13 + 5040), *(double *)(v13 + 5136), *((double *)v99 + 640), *((double *)v99 + 641)), v103 >= 35.0))
    {
LABEL_254:
      uint64_t v109 = (void *)v99[1];
      if (v109)
      {
        do
        {
          uint64_t v110 = v109;
          uint64_t v109 = (void *)*v109;
        }
        while (v109);
      }
      else
      {
        do
        {
          uint64_t v110 = (void *)v99[2];
          _ZF = *v110 == (void)v99;
          unint64_t v99 = v110;
        }
        while (!_ZF);
      }
      unint64_t v99 = v110;
      if (v110 == v6) {
        goto LABEL_266;
      }
      continue;
    }
    break;
  }
  if (*(unsigned char *)(a1 + 1848) && !*(unsigned char *)(a1 + 2233))
  {
    double v104 = fabs(v225);
    double v105 = fabs(*(double *)v280);
    _NF = v105 > 2.0 && v104 < 1.5;
    if (!_NF && v105 <= 10.0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v108 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349824;
          *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v103;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(void *)v280;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          double v294 = v102;
          __int16 v295 = 2050;
          double v296 = v225;
          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution not detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", (uint8_t *)&buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          *(_DWORD *)v288 = 134349824;
          *(double *)&v288[4] = v103;
          *(_WORD *)&v288[12] = 2050;
          *(void *)&v288[14] = *(void *)v280;
          __int16 v289 = 2050;
          double v290 = v102;
          LOWORD(v291) = 2050;
          *(double *)((char *)&v291 + 2) = v225;
          unint64_t v111 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v111);
          if (v111 != &buf) {
            free(v111);
          }
        }
      }
      if (*(unsigned char *)(a1 + 1393)) {
        goto LABEL_419;
      }
      goto LABEL_254;
    }
  }
  *(unsigned char *)(a1 + 1393) = 1;
LABEL_419:
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    __int16 v162 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349824;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v103;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(void *)v280;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      double v294 = v102;
      __int16 v295 = 2050;
      double v296 = v225;
      _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", (uint8_t *)&buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      *(_DWORD *)v288 = 134349824;
      *(double *)&v288[4] = v103;
      *(_WORD *)&v288[12] = 2050;
      *(void *)&v288[14] = *(void *)v280;
      __int16 v289 = 2050;
      double v290 = v102;
      LOWORD(v291) = 2050;
      *(double *)((char *)&v291 + 2) = v225;
      long long v197 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v197);
      if (v197 != &buf) {
        free(v197);
      }
    }
  }
  *(unsigned char *)(a1 + 1648) = 1;
  sub_1011C9F64(a1 + 1680, v99 + 10);
  *(unsigned char *)(a1 + 1672) = 1;
  if (*(unsigned char *)(a1 + 1848) && !*(unsigned char *)(a1 + 2233)) {
    *(void *)(a1 + 3152) = *(void *)(a1 + 1136);
  }
LABEL_266:
  if (*(unsigned char *)(a1 + 1393))
  {
    int v112 = *(uint64_t **)(a1 + 4048);
    uint64_t v113 = *(uint64_t **)(a1 + 4056);
    if (v112 != v113)
    {
      while (1)
      {
        sub_1011C9EF0((uint64_t *)(a1 + 1016), (uint64_t)&buf);
        uint64_t v219 = *v112;
        int v114 = (std::__shared_weak_count *)v112[1];
        int v220 = v114;
        if (v114) {
          atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_100FFD4D0(v288, &v219, *((unsigned __int8 *)v112 + 20));
        BOOL v115 = sub_100FFD530((uint64_t)&buf, (uint64_t)v288);
        if (v220) {
          sub_1000DB0A0(v220);
        }
        if (v115) {
          break;
        }
        v112 += 7;
        if (v112 == v113) {
          goto LABEL_280;
        }
      }
      *(unsigned char *)(a1 + 1393) = 0;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      int v116 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v117 = *(void *)(a1 + 1136);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v117;
        _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "%{public}.1lf,CLMM,ambiguity reverted using route-hints", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v171 = *(void *)(a1 + 1136);
        *(_DWORD *)v288 = 134349056;
        *(void *)&v288[4] = v171;
        long long v172 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v172);
        if (v172 != &buf) {
          free(v172);
        }
      }
    }
  }
LABEL_280:
  if (*(unsigned char *)(a1 + 1848)
    && *(unsigned char *)(a1 + 2233)
    && !*(unsigned char *)(a1 + 1393)
    && *(double *)(a1 + 1136) - *(double *)(a1 + 3152) < 3.1)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      int v118 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution hysteresis", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        *(_WORD *)v288 = 0;
        uint64_t v184 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v184);
        if (v184 != &buf) {
          free(v184);
        }
      }
    }
    *(unsigned char *)(a1 + 1393) = 1;
    *(unsigned char *)(a1 + 1648) = 1;
    *(unsigned char *)(a1 + 1672) = 0;
  }
  double v119 = *(double *)&v283[28];
  *(void *)(a1 + 1616) = *(void *)&v283[28];
  if (v98 <= 0.0)
  {
    double v120 = *(double *)(a1 + 1632);
  }
  else
  {
    double v120 = v119 / v98;
    *(double *)(a1 + 1632) = v120;
    if (v120 > 1000000.0)
    {
      *(void *)(a1 + 1632) = 0x412E848000000000;
      double v120 = 1000000.0;
    }
  }
  *(_DWORD *)(a1 + 1408) = 1;
  uint64_t v121 = *(void *)&v283[16];
  uint64_t v122 = *(void *)&v283[20];
  *(void *)(a1 + 1280) = *(void *)&v283[16];
  *(void *)(a1 + 1288) = v122;
  double v123 = *(float *)&v283[12];
  *(double *)(a1 + 1296) = *(float *)&v283[12];
  *(void *)(a1 + 1416) = v121;
  *(void *)(a1 + 1424) = v122;
  *(double *)(a1 + 1432) = v123;
  uint64_t v124 = *(void *)v283;
  *(void *)(a1 + 1248) = *(void *)(*(void *)v283 + 20);
  *(void *)(a1 + 1400) = *(void *)&v283[24];
  *(float *)(a1 + 1304) = (float)v12;
  float v125 = v120;
  *(float *)(a1 + 1308) = v125;
  if (*(char *)(v124 + 71) < 0) {
    sub_1000DC48C(&buf, *(void **)(v124 + 48), *(void *)(v124 + 56));
  }
  else {
    std::string buf = *(std::string *)(v124 + 48);
  }
  std::string::operator=((std::string *)(a1 + 1256), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 1240) = **(void **)v283;
  double v126 = *(double *)(a1 + 1232);
  double v127 = -1.0;
  if (v126 >= 0.0) {
    double v127 = sub_1011BBD04(v126 - *(double *)(a1 + 1296));
  }
  *(double *)(a1 + 1600) = v127;
  if (!*(unsigned char *)(a1 + 1357) && !*(unsigned char *)(a1 + 816))
  {
    double v134 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
    if (v134 >= 0.0 && v134 < 30.0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        long long v135 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          int v136 = *(unsigned __int8 *)(a1 + 1648);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v136;
          _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEBUG, "CLMM,dismounted recently,doNotSnapCourse,%{public}d", (uint8_t *)&buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          int v137 = *(unsigned __int8 *)(a1 + 1648);
          *(_DWORD *)v288 = 67240192;
          *(_DWORD *)&v288[4] = v137;
          uint64_t v138 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v138);
          if (v138 != &buf) {
            free(v138);
          }
        }
      }
      goto LABEL_411;
    }
  }
  double v128 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 2024), *(double *)(a1 + 2032), *(double *)(a1 + 1200));
  double v129 = sub_1011C7D80(a1, 35.0);
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v130 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v129;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v128;
      _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEBUG, "CLMM,distToNextMulti,%{public}.1lf, distFromPriorCrumb,%{public}.1lf", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      *(_DWORD *)v288 = 134349312;
      *(double *)&v288[4] = v129;
      *(_WORD *)&v288[12] = 2050;
      *(double *)&v288[14] = v128;
      __int16 v167 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v167);
      if (v167 != &buf) {
        free(v167);
      }
    }
  }
  double v131 = *(double *)(a1 + 1320);
  if (v131 <= 0.0 || v131 >= 45.0 || *(double *)(a1 + 1600) <= 30.0)
  {
    if (*(unsigned char *)(a1 + 776))
    {
      BOOL v132 = 0;
      double v133 = *(double *)(a1 + 800);
      if (v133 > 0.0 && v133 < 45.0) {
        BOOL v132 = *(double *)(a1 + 792) > 30.0;
      }
    }
    else
    {
      BOOL v132 = 0;
    }
  }
  else
  {
    BOOL v132 = 1;
  }
  if (*(unsigned char *)(a1 + 1648) || v129 < 0.0 || v129 >= 35.0 || !v132)
  {
LABEL_341:
    if (!*(unsigned char *)(a1 + 1648) && *(unsigned char *)(a1 + 1649) && v132)
    {
      if (*(unsigned char *)(v13 + 200))
      {
        if (*(unsigned char *)(v13 + 192))
        {
          if (sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(v13 + 408), *(double *)(v13 + 416), *(double *)(a1 + 1200)) < 35.0)
          {
            *(unsigned char *)(a1 + 1648) = 1;
            if (*(unsigned char *)(a1 + 96))
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              long long v141 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                std::string::size_type v142 = *(void *)(a1 + 1600);
                LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v142;
                _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,at intersection,fabsCourseDifference,%{public}.1lf", (uint8_t *)&buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_102317A08);
                }
                uint64_t v202 = *(void *)(a1 + 1600);
                *(_DWORD *)v288 = 134349056;
                *(void *)&v288[4] = v202;
                uint64_t v203 = (std::string *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v203);
                if (v203 != &buf) {
                  free(v203);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1648) = 1;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v139 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v129;
        _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,distanceToIntersection,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        *(_DWORD *)v288 = 134349056;
        *(double *)&v288[4] = v129;
        long long v170 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v170);
        if (v170 != &buf) {
          free(v170);
        }
      }
      goto LABEL_341;
    }
  }
  double v143 = *(double *)(a1 + 1320);
  if (v143 > 0.0 && v143 < 5.0 && *(unsigned char *)(a1 + 752) && *(double *)(a1 + 1600) > 45.0)
  {
    *(unsigned char *)(a1 + 1648) = 1;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      float v144 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v145 = *(void *)(a1 + 1600);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v145;
        _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,turning,fabsCourseDifference,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v181 = *(void *)(a1 + 1600);
        *(_DWORD *)v288 = 134349056;
        *(void *)&v288[4] = v181;
        uint64_t v182 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v182);
        if (v182 != &buf) {
          free(v182);
        }
      }
      goto LABEL_365;
    }
  }
  else
  {
LABEL_365:
    if (!*(unsigned char *)(a1 + 1648)) {
      goto LABEL_411;
    }
  }
  if ((*(double *)(a1 + 1224) < 0.2 || *(unsigned char *)(a1 + 1356))
    && v128 < 2.5
    && (*(double *)(a1 + 1600) > 135.0 || *(unsigned char *)(a1 + 776) && *(double *)(a1 + 792) > 30.0))
  {
    *(unsigned char *)(a1 + 1648) = 0;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      float v146 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v147 = *(void *)(a1 + 1136);
        std::string::size_type v148 = *(void *)(a1 + 1600);
        double v149 = *(double *)(a1 + 792);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v147;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v148;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
        double v294 = v149;
        _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,snapping course,reason,gps course not reliable,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", (uint8_t *)&buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v177 = *(void *)(a1 + 1136);
        uint64_t v178 = *(void *)(a1 + 1600);
        double v179 = *(double *)(a1 + 792);
        *(_DWORD *)v288 = 134349568;
        *(void *)&v288[4] = v177;
        *(_WORD *)&v288[12] = 2050;
        *(void *)&v288[14] = v178;
        __int16 v289 = 2050;
        double v290 = v179;
        uint64_t v180 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v180);
        if (v180 != &buf) {
          free(v180);
        }
      }
    }
    if (*(double *)(a1 + 1600) > 135.0 && !*(unsigned char *)(a1 + 776))
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        __int16 v150 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v151 = *(void *)(a1 + 1136);
          std::string::size_type v152 = *(void *)(a1 + 1232);
          double v153 = *(double *)(a1 + 1296);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v151;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v152;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          double v294 = v153;
          _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,overwriting unreliable GPS course,static case, priorCourse,%{public}.1lf,newCourse,%{public}.1lf", (uint8_t *)&buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v198 = *(void *)(a1 + 1136);
          uint64_t v199 = *(void *)(a1 + 1232);
          double v200 = *(double *)(a1 + 1296);
          *(_DWORD *)v288 = 134349568;
          *(void *)&v288[4] = v198;
          *(_WORD *)&v288[12] = 2050;
          *(void *)&v288[14] = v199;
          __int16 v289 = 2050;
          double v290 = v200;
          double v201 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v201);
          if (v201 != &buf) {
            free(v201);
          }
        }
      }
      *(void *)(a1 + 1232) = *(void *)(a1 + 1296);
      *(void *)(a1 + 1320) = 0x403DE66666666666;
      *(void *)(a1 + 1600) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 1648)
    && *(unsigned char *)(a1 + 384)
    && *(double *)(a1 + 1224) < 5.0
    && v128 < 5.0
    && fabs(*(double *)(a1 + 1640)) < 1.4
    && sub_1011BBD04(*(double *)(a1 + 1296) - *(double *)(a1 + 288)) < 10.0
    && (*(double *)(a1 + 1600) > 135.0 || *(unsigned char *)(a1 + 776) && *(double *)(a1 + 792) > 135.0))
  {
    *(unsigned char *)(a1 + 1648) = 0;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      long long v154 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v155 = *(void *)(a1 + 1136);
        std::string::size_type v156 = *(void *)(a1 + 1600);
        double v157 = *(double *)(a1 + 792);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v155;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v156;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
        double v294 = v157;
        _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,snapping course, reason,gps course flipping at low speeds,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", (uint8_t *)&buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v204 = *(void *)(a1 + 1136);
        uint64_t v205 = *(void *)(a1 + 1600);
        double v206 = *(double *)(a1 + 792);
        *(_DWORD *)v288 = 134349568;
        *(void *)&v288[4] = v204;
        *(_WORD *)&v288[12] = 2050;
        *(void *)&v288[14] = v205;
        __int16 v289 = 2050;
        double v290 = v206;
        uint64_t v207 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v207);
        if (v207 != &buf) {
          free(v207);
        }
      }
    }
    if (*(double *)(a1 + 1600) > 135.0 && !*(unsigned char *)(a1 + 776))
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        unint64_t v158 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v159 = *(void *)(a1 + 1136);
          std::string::size_type v160 = *(void *)(a1 + 1232);
          double v161 = *(double *)(a1 + 1296);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v159;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v160;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          double v294 = v161;
          _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,overwriting unreliable GPS course,low speed case,priorCourse,%{public}.1lf,newCourse,%{public}.1lf", (uint8_t *)&buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v211 = *(void *)(a1 + 1136);
          uint64_t v212 = *(void *)(a1 + 1232);
          double v213 = *(double *)(a1 + 1296);
          *(_DWORD *)v288 = 134349568;
          *(void *)&v288[4] = v211;
          *(_WORD *)&v288[12] = 2050;
          *(void *)&v288[14] = v212;
          __int16 v289 = 2050;
          double v290 = v213;
          long long v214 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "%s\n", (const char *)v214);
          if (v214 != &buf) {
            free(v214);
          }
        }
      }
      *(void *)(a1 + 1232) = *(void *)(a1 + 1296);
      *(void *)(a1 + 1320) = 0x403DE66666666666;
      *(void *)(a1 + 1600) = 0;
    }
  }
LABEL_411:
  if (*(unsigned char *)(a1 + 1648)) {
    *(void *)(a1 + 1296) = *(void *)(a1 + 1232);
  }
  sub_1011BEC0C(a1, a1 + 656, a1 + 1016, v218, (void *)(a1 + 1072), (void *)(a1 + 1088), (double *)(a1 + 1576), (double *)(a1 + 1584), (void *)(a1 + 1592), (double *)(a1 + 1568), *(unsigned char *)(a1 + 1393));
  *(void *)(a1 + 1616) = *(void *)(a1 + 1072);
  *(void *)(a1 + 1360) = *(void *)(a1 + 1088);
  if (__src)
  {
    v286 = __src;
    operator delete(__src);
  }
  if (*(void *)&v283[4]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v283[4]);
  }
  uint64_t v21 = 1;
LABEL_50:
  if ((void)__p) {
    operator delete((void *)__p);
  }
  if (*((void *)&v268 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v268 + 1));
  }
  if (*((void *)&v266 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v266 + 1));
  }
  if (SHIBYTE(v246) < 0) {
    operator delete(*((void **)&v245 + 1));
  }
  if ((void)v235) {
    operator delete((void *)v235);
  }
  if (*((void *)&v227 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v227 + 1));
  }
  return v21;
}

void sub_1011D0D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100FFFC10(&STACK[0x3F0]);
  sub_1011C75F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011D0E90(uint64_t a1)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    unint64_t v17 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v58 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWithAdustment,number of particles are 0", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v19 = *(void *)(a1 + 1136);
    int v51 = 134349056;
    uint64_t v52 = v19;
LABEL_41:
    unint64_t v23 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n");
LABEL_42:
    if (v23 != buf) {
      free(v23);
    }
    return;
  }
  *(void *)(a1 + 1448) = 0;
  *(void *)(a1 + 1440) = 0;
  if (!*(unsigned char *)(a1 + 1008))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v20 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v58 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v22 = *(void *)(a1 + 1136);
    int v51 = 134349056;
    uint64_t v52 = v22;
    goto LABEL_41;
  }
  if (!*(void *)(a1 + 1016))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v24 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v58 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,roadWithAdustment,road is nullptr", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v26 = *(void *)(a1 + 1136);
      int v51 = 134349056;
      uint64_t v52 = v26;
      unint64_t v23 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n");
      goto LABEL_42;
    }
    return;
  }
  uint64_t v49 = 0;
  double v50 = 0.0;
  sub_101172040((double *)(a1 + 608), &v50, (double *)&v49, *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200), *(double *)(a1 + 1432), *(double *)(a1 + 1184), *(double *)(a1 + 1192));
  uint64_t v2 = *(void *)(a1 + 1016);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(int *)(v2 + 20);
  if (v3 == 9 || ((v4 = *(_DWORD *)(v2 + 72), v4 != 255) ? (BOOL v5 = v4 == 6) : (BOOL v5 = 1), v5))
  {
    BOOL v6 = *(unsigned char *)(v2 + 16) == 0;
    int v7 = dbl_101DADDE0;
LABEL_12:
    double v8 = v7[v6];
    goto LABEL_13;
  }
  double v8 = *(double *)(v2 + 96);
  if (v8 < 0.000001)
  {
    int v35 = *(unsigned __int8 *)(v2 + 16);
    if ((v3 & 0xFFFFFFFE) == 8)
    {
      BOOL v6 = v35 == 0;
      int v7 = dbl_101D1C3C0;
      goto LABEL_12;
    }
    if (v35)
    {
      if (v3 < 8)
      {
        std::string::size_type v41 = (double *)&unk_101DADE08;
LABEL_90:
        double v8 = v41[v3];
        goto LABEL_13;
      }
      double v8 = 5.55000019;
    }
    else
    {
      if (v3 < 8)
      {
        std::string::size_type v41 = (double *)&unk_101DADE48;
        goto LABEL_90;
      }
      double v8 = 7.4000001;
    }
  }
LABEL_13:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  int v9 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 1136);
    uint64_t v11 = *(void *)(a1 + 1016);
    int v12 = *(_DWORD *)(v11 + 20);
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 16);
    *(_DWORD *)std::string buf = 134350080;
    uint64_t v58 = v10;
    __int16 v59 = 1026;
    *(_DWORD *)long long v60 = v12;
    *(_WORD *)&v60[4] = 1026;
    *(_DWORD *)&v60[6] = v11;
    *(_WORD *)long long v61 = 2050;
    *(double *)&v61[2] = v8;
    LOWORD(v62[0]) = 2050;
    *(double *)((char *)v62 + 2) = v50;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v42 = *(void *)(a1 + 1136);
    uint64_t v43 = *(void *)(a1 + 1016);
    int v44 = *(_DWORD *)(v43 + 20);
    LODWORD(v43) = *(unsigned __int8 *)(v43 + 16);
    int v51 = 134350080;
    uint64_t v52 = v42;
    __int16 v53 = 1026;
    *(_DWORD *)double v54 = v44;
    *(_WORD *)&v54[4] = 1026;
    *(_DWORD *)&v54[6] = v43;
    *(_WORD *)uint64_t v55 = 2050;
    *(double *)&v55[2] = v8;
    *(_WORD *)uint64_t v56 = 2050;
    *(double *)&v56[2] = v50;
    double v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  if (v8 >= 0.000001)
  {
    *(double *)(a1 + 1552) = v8;
    uint64_t v13 = *(void *)(a1 + 1280);
    uint64_t v47 = *(void *)(a1 + 1288);
    uint64_t v48 = v13;
    double v14 = *(double *)(a1 + 768);
    if (v14 <= 0.0 || vabdd_f64(*(double *)(a1 + 1136), v14) > 120.0)
    {
      *(_DWORD *)(a1 + 760) = sub_1012AD3B8(*(double *)(a1 + 1184), *(double *)(a1 + 1192));
      *(void *)(a1 + 768) = *(void *)(a1 + 1136);
    }
    double v15 = v8 * 0.5;
    if (*(unsigned char *)(*(void *)(a1 + 1016) + 16)) {
      goto LABEL_23;
    }
    int v27 = *(_DWORD *)(a1 + 760);
    double v28 = 0.0;
    switch(v27)
    {
      case 2:
        if (v50 <= 0.0)
        {
          if (v50 < 0.0) {
            double v28 = fabs(v50) + 1.85000002;
          }
          goto LABEL_61;
        }
        double v36 = fabs(v50);
        if (v36 < v15) {
          goto LABEL_24;
        }
        double v37 = v15 + -1.85000002;
        if (v15 <= 1.85000002) {
          double v37 = v15 * 0.85;
        }
        double v38 = v36 - v37;
        break;
      case 1:
        if (v50 < 0.0)
        {
          double v39 = fabs(v50);
          if (v39 < v15) {
            goto LABEL_24;
          }
          double v40 = v15 + -1.85000002;
          if (v15 <= 1.85000002) {
            double v40 = v15 * 0.85;
          }
          double v28 = v39 - v40;
          goto LABEL_61;
        }
        if (v50 <= 0.0)
        {
LABEL_61:
          sub_10005B780((double *)(a1 + 608), (double *)&v48, (double *)&v47, *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 1200), *(double *)(a1 + 1432), v28);
          *(double *)(a1 + 1568) = v28;
          *(_DWORD *)(a1 + 1408) = 2;
          uint64_t v32 = v47;
          uint64_t v31 = v48;
          *(void *)(a1 + 1280) = v48;
          *(void *)(a1 + 1288) = v32;
          *(void *)(a1 + 1440) = v31;
          *(void *)(a1 + 1448) = v32;
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v33 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v34 = *(void *)(a1 + 1136);
            *(_DWORD *)std::string buf = 134349824;
            uint64_t v58 = v34;
            __int16 v59 = 2050;
            *(double *)long long v60 = v50;
            *(_WORD *)&v60[8] = 2050;
            *(double *)long long v61 = v28;
            *(_WORD *)&v61[8] = 2050;
            v62[0] = v15;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWidthCorrection,acrossTrack,%{public}.2lf,correction,%{public}.2lf,halfRoadWidth,%{public}.2lf", buf, 0x2Au);
          }
          if (!sub_10013D1A0(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v46 = *(void *)(a1 + 1136);
          int v51 = 134349824;
          uint64_t v52 = v46;
          __int16 v53 = 2050;
          *(double *)double v54 = v50;
          *(_WORD *)&v54[8] = 2050;
          *(double *)uint64_t v55 = v28;
          *(_WORD *)&v55[8] = 2050;
          *(double *)uint64_t v56 = v15;
          goto LABEL_41;
        }
        double v38 = fabs(v50) + 1.85000002;
        break;
      case 0:
LABEL_23:
        double v16 = fabs(v50);
        if (v16 < v15)
        {
LABEL_24:
          *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
          return;
        }
        double v29 = v15 + -1.85000002;
        if (v15 <= 1.85000002) {
          double v29 = v15 * 0.85;
        }
        double v30 = v16 - v29;
        if (v50 >= 0.0) {
          double v28 = -v30;
        }
        else {
          double v28 = v30;
        }
        goto LABEL_61;
      default:
        goto LABEL_61;
    }
    double v28 = -v38;
    goto LABEL_61;
  }
}

void sub_1011D1868(uint64_t a1)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864) || !*(unsigned char *)(a1 + 1392)) {
    return;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,performPartialMatching", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  double v3 = *(double *)(a1 + 1280);
  double v4 = *(double *)(a1 + 1288);
  if (*(unsigned char *)(a1 + 1490) && *(_DWORD *)(a1 + 1528) == 1)
  {
    *(double *)(a1 + 1456) = v3;
    *(double *)(a1 + 1464) = v4;
    *(_DWORD *)(a1 + 2972) = 0;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    BOOL v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,skipping partial match as solution is inside tunnel", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (*(double *)(a1 + 2200) < 4.0) {
    *(_DWORD *)(a1 + 2972) = 0;
  }
  double v7 = *(double *)(a1 + 1600);
  double v8 = *(double *)(a1 + 1360);
  if (v7 >= 0.0 && v7 < 25.0)
  {
    int v11 = *(_DWORD *)(a1 + 2972);
    if (v8 > 10.0)
    {
LABEL_33:
      int v10 = v11 + 2;
      goto LABEL_38;
    }
LABEL_35:
    if (v11 <= 0) {
      int v10 = 0;
    }
    else {
      int v10 = v11 - 1;
    }
    goto LABEL_38;
  }
  if (v8 <= 6.0)
  {
    if (v7 > 45.0)
    {
      if (v8 <= 8.0)
      {
        int v15 = *(_DWORD *)(a1 + 2972);
        if (v8 <= 10.0) {
          int v10 = v15 + 4;
        }
        else {
          int v10 = v15 + 3;
        }
        goto LABEL_38;
      }
      int v11 = *(_DWORD *)(a1 + 2972);
      goto LABEL_33;
    }
    int v11 = *(_DWORD *)(a1 + 2972);
    goto LABEL_35;
  }
  int v10 = *(_DWORD *)(a1 + 2972) + 1;
LABEL_38:
  *(_DWORD *)(a1 + 2972) = v10;
  if (v10 >= 1)
  {
    if (v10 >= 0x1F)
    {
      int v10 = 30;
      *(_DWORD *)(a1 + 2972) = 30;
    }
    double v12 = (double)v10 / 40.0;
    double v3 = *(double *)(a1 + 1184) * v12 + (1.0 - v12) * v3;
    double v4 = v12 * *(double *)(a1 + 1192) + (1.0 - v12) * v4;
    if (v7 >= 0.0 && v7 > 20.0) {
      *(void *)(a1 + 1296) = *(void *)(a1 + 1232);
    }
    *(_DWORD *)(a1 + 1408) = 3;
    *(double *)(a1 + 1280) = v3;
    *(double *)(a1 + 1288) = v4;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v13 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        int v14 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)std::string buf = 67240704;
        int v19 = v14;
        __int16 v20 = 2050;
        double v21 = v12;
        __int16 v22 = 2050;
        double v23 = 1.0 - v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,partial snapping,poorVarFactorCount,%{public}d,weightGPS,%{public}.2lf,weightSnap,%{public}.2lf", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        unint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
  }
  *(double *)(a1 + 1456) = v3;
  *(double *)(a1 + 1464) = v4;
}

uint64_t sub_1011D1E34(uint64_t a1, double *a2, double *a3, unsigned char *a4)
{
  *a4 = 1;
  uint64_t v9 = *(void *)(a1 + 8);
  double v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v54 = (uint64_t)&v54;
  uint64_t v55 = &v54;
  uint64_t v56 = 0;
  long long v10 = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)&v47[16] = *(_OWORD *)(a1 + 1192);
  long long v48 = v10;
  long long v11 = *(_OWORD *)(a1 + 1240);
  long long v49 = *(_OWORD *)(a1 + 1224);
  long long v50 = v11;
  long long v12 = *(_OWORD *)(a1 + 1144);
  v46[0] = *(_OWORD *)(a1 + 1128);
  v46[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 1176);
  v46[2] = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)uint64_t v47 = v13;
  if (*(char *)(a1 + 1279) < 0)
  {
    sub_1000DC48C(&v51, *(void **)(a1 + 1256), *(void *)(a1 + 1264));
  }
  else
  {
    long long v51 = *(_OWORD *)(a1 + 1256);
    uint64_t v52 = *(void *)(a1 + 1272);
  }
  memcpy(v53, (const void *)(a1 + 1280), sizeof(v53));
  *(_OWORD *)&v47[8] = *(_OWORD *)&v53[17];
  *((void *)&v49 + 1) = v53[19];
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *, uint64_t, double))(*(void *)v9 + 64))(v9, &v54, v46, 1, *a2) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      int v35 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__s1[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMM,roadsWithinDistance returned false", (uint8_t *)__s1, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__s1, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LOWORD(__p[0]) = 0;
        std::string::size_type v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "%s\n", v41);
        if (v41 != (char *)__s1) {
          free(v41);
        }
      }
    }
    uint64_t v36 = 0;
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_85;
  }
  if (!v56)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      double v37 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__s1[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "CLMM,Unexpected roadsWithinDistance returned empty list", (uint8_t *)__s1, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__s1, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LOWORD(__p[0]) = 0;
        uint64_t v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "%s\n", v43);
        if (v43 != (char *)__s1) {
          free(v43);
        }
      }
    }
    uint64_t v36 = 0;
    goto LABEL_85;
  }
  int v14 = v55;
  if (v55 == &v54)
  {
LABEL_72:
    unsigned int v38 = *(unsigned __int8 *)(a1 + 96);
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      double v39 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        LOWORD(__s1[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "CLMM,Unexpected roadsWithinDistance returned only railways", (uint8_t *)__s1, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__s1, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LOWORD(__p[0]) = 0;
        uint64_t v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "%s\n", v42);
        if (v42 != (char *)__s1) {
          free(v42);
        }
      }
      unsigned int v38 = 0;
    }
    int v34 = 1;
    goto LABEL_82;
  }
  char v15 = 1;
  do
  {
    uint64_t v16 = v14[2];
    if (*(unsigned char *)(v16 + 17)) {
      goto LABEL_49;
    }
    unint64_t v17 = (std::__shared_weak_count *)v14[3];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a1 + 1016);
    if (*(void *)v18 == *(void *)v16) {
      goto LABEL_44;
    }
    float v19 = *((float *)v14 + 10);
    if (*(char *)(v18 + 71) < 0)
    {
      sub_1000DC48C(__s1, *(void **)(v18 + 48), *(void *)(v18 + 56));
    }
    else
    {
      *(_OWORD *)__s1 = *(_OWORD *)(v18 + 48);
      uint64_t v58 = *(void *)(v18 + 64);
    }
    if (*(char *)(v16 + 71) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v16 + 48), *(void *)(v16 + 56));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v16 + 48);
      uint64_t v45 = *(void *)(v16 + 64);
    }
    char v20 = HIBYTE(v58);
    if (v58 >= 0) {
      double v21 = (void *)HIBYTE(v58);
    }
    else {
      double v21 = __s1[1];
    }
    __int16 v22 = (void *)HIBYTE(v45);
    int v23 = SHIBYTE(v45);
    if (v45 < 0) {
      __int16 v22 = __p[1];
    }
    if (v21 != v22)
    {
      BOOL v33 = 0;
      if ((SHIBYTE(v45) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_52;
    }
    if (v45 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      uint64_t v24 = (void **)__p[0];
    }
    if (SHIBYTE(v58) < 0)
    {
      BOOL v33 = memcmp(__s1[0], v24, (size_t)__s1[1]) == 0;
      goto LABEL_41;
    }
    if (HIBYTE(v58))
    {
      uint64_t v25 = HIBYTE(v58) - 1;
      uint64_t v26 = __s1;
      do
      {
        int v28 = *(unsigned __int8 *)v26;
        uint64_t v26 = (void **)((char *)v26 + 1);
        int v27 = v28;
        int v30 = *(unsigned __int8 *)v24;
        uint64_t v24 = (void **)((char *)v24 + 1);
        int v29 = v30;
        BOOL v32 = v25-- != 0;
        BOOL v33 = v27 == v29;
      }
      while (v27 == v29 && v32);
LABEL_41:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_52;
    }
    BOOL v33 = 1;
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
LABEL_42:
      if ((v20 & 0x80) == 0) {
        goto LABEL_43;
      }
      goto LABEL_53;
    }
LABEL_52:
    operator delete(__p[0]);
    if ((v58 & 0x8000000000000000) == 0)
    {
LABEL_43:
      if (!v33) {
        goto LABEL_54;
      }
      goto LABEL_44;
    }
LABEL_53:
    operator delete(__s1[0]);
    if (!v33)
    {
LABEL_54:
      if (sub_1011BBD04(*(double *)(a1 + 1432) - v19) >= *a3)
      {
        int v34 = 0;
      }
      else
      {
        int v34 = 1;
        *a4 = 1;
      }
      goto LABEL_45;
    }
LABEL_44:
    int v34 = 16;
LABEL_45:
    if (v17) {
      sub_1000DB0A0(v17);
    }
    if ((v34 | 0x10) != 0x10) {
      goto LABEL_81;
    }
    char v15 = 0;
LABEL_49:
    int v14 = (uint64_t *)v14[1];
  }
  while (v14 != &v54);
  if (v15) {
    goto LABEL_72;
  }
  int v34 = 0;
  *a4 = 0;
LABEL_81:
  unsigned int v38 = 1;
LABEL_82:
  if (v34) {
    uint64_t v36 = v38;
  }
  else {
    uint64_t v36 = 1;
  }
LABEL_85:
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  sub_10017FF2C(&v54);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return v36;
}

void sub_1011D2588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_10017FF2C(&a72);
  if (v72) {
    sub_1000DB0A0(v72);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011D2600(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 872);
  uint64_t v3 = *(void *)(a1 + 864);
  if (v2 != v3 && *(unsigned char *)(a1 + 652)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    BOOL v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,prepareSeeding", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      LOWORD(v97) = 0;
      long long v78 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v78);
      if (v78 != (char *)&buf) {
        free(v78);
      }
    }
  }
  BOOL v6 = *(_DWORD **)(a1 + 8);
  double v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v84 = (double *)(a1 + 1128);
  double v8 = sub_1013E5B64((double *)(a1 + 1128)) * 4.0;
  double v9 = 75.0;
  if (v8 >= 75.0)
  {
    double v9 = v8;
    if (v8 > 249.9999) {
      double v9 = 249.9999;
    }
  }
  if (v2 != v3 && *(unsigned char *)(a1 + 1008))
  {
    double v10 = *(double *)(a1 + 1184);
    if (v10 == 0.0 && *(double *)(a1 + 1192) == 0.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      long long v11 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb lat==lon==0", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        unint64_t v81 = v7;
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_203;
        }
        goto LABEL_207;
      }
      goto LABEL_33;
    }
    double v12 = *(double *)(a1 + 1280);
    double v13 = *(double *)(a1 + 1288);
    if (v12 == 0.0 && v13 == 0.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      int v14 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb snapLat==snapLon==0", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        unint64_t v81 = v7;
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_203:
          LOWORD(v97) = 0;
          uint64_t v80 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v80);
          if (v80 != (char *)&buf) {
            free(v80);
          }
          double v7 = v81;
          goto LABEL_33;
        }
LABEL_207:
        dispatch_once(&qword_102419430, &stru_102317A08);
        goto LABEL_203;
      }
LABEL_33:
      uint64_t v4 = 0;
      ++*(_DWORD *)(a1 + 104);
      if (v7) {
        goto LABEL_191;
      }
      return v4;
    }
    double v15 = sub_1000F1648((double *)(a1 + 608), v10, *(double *)(a1 + 1192), v12, v13, *(double *)(a1 + 1200));
    if (v9 < v15) {
      double v9 = v15 + 10.0;
    }
  }
  double v16 = 249.9999 * 5.0;
  if (v9 <= 249.9999 * 5.0)
  {
    double v16 = v9;
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    unint64_t v17 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134349056;
      *(double *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLMM,Unexpected maxDistance,%{public}.1lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      LODWORD(v97) = 134349056;
      *(double *)((char *)&v97 + 4) = v9;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v18);
      if (v18 != (char *)&buf) {
        free(v18);
      }
    }
  }
  v6[9] = 0;
  uint64_t v94 = (uint64_t)&v94;
  long long v95 = &v94;
  uint64_t v96 = 0;
  if (((*(uint64_t (**)(_DWORD *, uint64_t *, double *, uint64_t, double))(*(void *)v6 + 64))(v6, &v94, v84, 1, v16) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      double v39 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMM,roadsWithinDistance returned false", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LOWORD(v97) = 0;
        uint64_t v79 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v79);
        if (v79 != (char *)&buf) {
          free(v79);
        }
      }
    }
    uint64_t v4 = 0;
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_190;
  }
  if (!v96)
  {
    uint64_t v4 = 0;
    ++*(_DWORD *)(a1 + 104);
    goto LABEL_190;
  }
  uint64_t v82 = (uint64_t *)(a1 + 888);
  float v19 = *(void **)(a1 + 896);
  char v20 = *(void **)(a1 + 888);
  while (v19 != v20)
  {
    v19 -= 14;
    sub_10082B8C8(a1 + 904, v19);
  }
  *(void *)(a1 + 896) = v20;
  sub_1011CD4FC(v82, 0x60uLL);
  *(void *)(a1 + 968) = *(void *)(a1 + 960);
  std::string::size_type v83 = (void **)(a1 + 960);
  sub_10031FC98((void **)(a1 + 960), 0x60uLL);
  long long v97 = 0uLL;
  LODWORD(v98) = 0;
  WORD2(v98) = 1;
  DWORD2(v98) = 0;
  double v102 = 0;
  uint64_t v103 = 0;
  double v101 = 0;
  long long v99 = 0u;
  memset(v100, 0, sizeof(v100));
  double v21 = v95;
  if (v95 == &v94)
  {
    double v22 = 0.0;
  }
  else
  {
    double v22 = 0.0;
    double v23 = 0.0;
    double v24 = 0.0;
    do
    {
      if (*(unsigned char *)(v21[2] + 17) && *(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v25 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,including railway", (uint8_t *)&buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          LOWORD(__s1[0]) = 0;
          double v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v37);
          if (v37 != (char *)&buf) {
            free(v37);
          }
        }
      }
      LODWORD(v88) = 0;
      __s1[0] = 0;
      __s1[1] = 0;
      WORD2(v88) = 1;
      DWORD2(v88) = 0;
      long long v92 = 0;
      uint64_t v93 = 0;
      long long __p = 0;
      long long v89 = 0u;
      memset(v90, 0, 33);
      int v27 = (void *)v21[2];
      uint64_t v26 = (atomic_ullong *)v21[3];
      if (v26)
      {
        atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
        int v28 = (std::__shared_weak_count *)__s1[1];
        __s1[0] = v27;
        __s1[1] = v26;
        if (v28)
        {
          sub_1000DB0A0(v28);
          int v27 = __s1[0];
        }
      }
      else
      {
        __s1[0] = (void *)v21[2];
        __s1[1] = 0;
      }
      long long v29 = *((_OWORD *)v21 + 3);
      long long v88 = *((_OWORD *)v21 + 2);
      long long v89 = v29;
      v90[0] = v21[8];
      if (v27)
      {
        sub_1011BEB6C(a1, a1 + 656, (uint64_t)(v21 + 2), v84, &v90[1], &v90[3]);
        if (*(double *)&v90[1] <= v24)
        {
          double v33 = v24;
          if (*(double *)&v90[1] > v23) {
            double v23 = *(double *)&v90[1];
          }
        }
        else
        {
          uint64_t v31 = __s1[0];
          int v30 = __s1[1];
          if (__s1[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)__s1[1] + 1, 1uLL, memory_order_relaxed);
          }
          BOOL v32 = (std::__shared_weak_count *)*((void *)&v97 + 1);
          *(void *)&long long v97 = v31;
          *((void *)&v97 + 1) = v30;
          if (v32) {
            sub_1000DB0A0(v32);
          }
          long long v98 = v88;
          long long v99 = v89;
          *(void *)double v100 = v90[0];
          *(_OWORD *)&v100[8] = *(_OWORD *)&v90[1];
          *(_OWORD *)&v100[17] = *(_OWORD *)((char *)&v90[2] + 1);
          sub_1010003E4((char *)&v101, (char *)__p, (uint64_t)v92, 0x8E38E38E38E38E39 * ((v92 - (unsigned char *)__p) >> 3));
          double v33 = *(double *)&v90[1];
          double v23 = v24;
        }
        unint64_t v35 = *(void *)(a1 + 896);
        if (v35 >= *(void *)(a1 + 904))
        {
          uint64_t v36 = sub_1011E03D4(v82, (uint64_t)__s1);
        }
        else
        {
          sub_1011E04FC(a1 + 904, *(void *)(a1 + 896), (uint64_t)__s1);
          uint64_t v36 = v35 + 112;
          *(void *)(a1 + 896) = v35 + 112;
        }
        *(void *)(a1 + 896) = v36;
        double v22 = v22 + *(double *)&v90[1];
        double v24 = v33;
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        int v34 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLMM,Unexpected NULL road", (uint8_t *)&buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          LOWORD(__dst[0]) = 0;
          unsigned int v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "%s\n", v38);
          if (v38 != (char *)&buf) {
            free(v38);
          }
        }
        ++*(_DWORD *)(a1 + 104);
      }
      if (__p)
      {
        long long v92 = __p;
        operator delete(__p);
      }
      if (__s1[1]) {
        sub_1000DB0A0((std::__shared_weak_count *)__s1[1]);
      }
      if (!v27)
      {
        uint64_t v4 = 0;
        goto LABEL_186;
      }
      double v21 = (uint64_t *)v21[1];
    }
    while (v21 != &v94);
  }
  uint64_t v40 = *(void *)(a1 + 888);
  if (v40 == *(void *)(a1 + 896))
  {
    uint64_t v4 = 0;
    ++*(_DWORD *)(a1 + 104);
    goto LABEL_186;
  }
  std::string::size_type v41 = (void *)(a1 + 976);
  uint64_t v42 = *(float **)(a1 + 968);
  double v43 = 0.0;
  do
  {
    double v44 = *(double *)(v40 + 56) / v22;
    *(double *)(v40 + 64) = v44;
    double v43 = v43 + v44;
    float v45 = v43;
    if ((unint64_t)v42 >= *v41)
    {
      uint64_t v47 = (float *)*v83;
      uint64_t v48 = ((char *)v42 - (unsigned char *)*v83) >> 2;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 62) {
        sub_1001D7FD4();
      }
      uint64_t v50 = *v41 - (void)v47;
      if (v50 >> 1 > v49) {
        unint64_t v49 = v50 >> 1;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        uint64_t v52 = (char *)sub_10017EA34(a1 + 976, v51);
        uint64_t v42 = *(float **)(a1 + 968);
        uint64_t v47 = *(float **)(a1 + 960);
      }
      else
      {
        uint64_t v52 = 0;
      }
      __int16 v53 = (float *)&v52[4 * v48];
      *__int16 v53 = v45;
      uint64_t v46 = v53 + 1;
      while (v42 != v47)
      {
        int v54 = *((_DWORD *)v42-- - 1);
        *((_DWORD *)v53-- - 1) = v54;
      }
      *(void *)(a1 + 960) = v53;
      *(void *)(a1 + 968) = v46;
      *(void *)(a1 + 976) = &v52[4 * v51];
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *uint64_t v42 = v45;
      uint64_t v46 = v42 + 1;
    }
    *(void *)(a1 + 968) = v46;
    v40 += 112;
    uint64_t v42 = v46;
  }
  while (v40 != *(void *)(a1 + 896));
  *(void *)(a1 + 1624) = 0;
  if (v2 == v3)
  {
LABEL_184:
    uint64_t v4 = 1;
    goto LABEL_186;
  }
  uint64_t v55 = v95;
  if (v95 == &v94)
  {
    *(void *)(a1 + 1632) = 0;
    goto LABEL_184;
  }
  do
  {
    LODWORD(v105) = 0;
    long long buf = 0uLL;
    WORD2(v105) = 1;
    DWORD2(v105) = 0;
    unint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v110 = 0;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    char v109 = 0;
    uint64_t v56 = v55[2];
    uint64_t v57 = v55[3];
    if (v57)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
      uint64_t v58 = (std::__shared_weak_count *)*((void *)&buf + 1);
      *(void *)&long long buf = v56;
      *((void *)&buf + 1) = v57;
      if (v58)
      {
        sub_1000DB0A0(v58);
        uint64_t v56 = buf;
      }
    }
    else
    {
      long long buf = (unint64_t)v55[2];
    }
    long long v59 = *((_OWORD *)v55 + 3);
    long long v105 = *((_OWORD *)v55 + 2);
    long long v106 = v59;
    *(void *)&long long v107 = v55[8];
    uint64_t v60 = *(void *)(a1 + 1016);
    if (v56 != v60)
    {
      if (*(char *)(v56 + 71) < 0)
      {
        sub_1000DC48C(__s1, *(void **)(v56 + 48), *(void *)(v56 + 56));
        uint64_t v60 = *(void *)(a1 + 1016);
      }
      else
      {
        *(_OWORD *)__s1 = *(_OWORD *)(v56 + 48);
        *(void *)&long long v88 = *(void *)(v56 + 64);
      }
      if (*(char *)(v60 + 71) < 0)
      {
        sub_1000DC48C(__dst, *(void **)(v60 + 48), *(void *)(v60 + 56));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(v60 + 48);
        uint64_t v86 = *(void *)(v60 + 64);
      }
      char v61 = BYTE7(v88);
      if ((SBYTE7(v88) & 0x80u) == 0) {
        double v62 = (void *)BYTE7(v88);
      }
      else {
        double v62 = __s1[1];
      }
      double v63 = (void *)HIBYTE(v86);
      int v64 = SHIBYTE(v86);
      if (v86 < 0) {
        double v63 = __dst[1];
      }
      if (v62 == v63)
      {
        if (v86 >= 0) {
          double v65 = __dst;
        }
        else {
          double v65 = (void **)__dst[0];
        }
        if (SBYTE7(v88) < 0)
        {
          BOOL v74 = memcmp(__s1[0], v65, (size_t)__s1[1]) == 0;
          if ((v64 & 0x80000000) == 0) {
            goto LABEL_159;
          }
        }
        else if (BYTE7(v88))
        {
          uint64_t v66 = BYTE7(v88) - 1;
          double v67 = __s1;
          do
          {
            int v69 = *(unsigned __int8 *)v67;
            double v67 = (void **)((char *)v67 + 1);
            int v68 = v69;
            int v71 = *(unsigned __int8 *)v65;
            double v65 = (void **)((char *)v65 + 1);
            int v70 = v71;
            BOOL v73 = v66-- != 0;
            BOOL v74 = v68 == v70;
          }
          while (v68 == v70 && v73);
          if ((SHIBYTE(v86) & 0x80000000) == 0)
          {
LABEL_159:
            if ((v61 & 0x80) == 0) {
              goto LABEL_160;
            }
            goto LABEL_164;
          }
        }
        else
        {
          BOOL v74 = 1;
          if ((SHIBYTE(v86) & 0x80000000) == 0) {
            goto LABEL_159;
          }
        }
      }
      else
      {
        BOOL v74 = 0;
        if ((SHIBYTE(v86) & 0x80000000) == 0) {
          goto LABEL_159;
        }
      }
      operator delete(__dst[0]);
      if ((BYTE7(v88) & 0x80) == 0)
      {
LABEL_160:
        if (v74) {
          goto LABEL_168;
        }
        goto LABEL_165;
      }
LABEL_164:
      operator delete(__s1[0]);
      if (v74) {
        goto LABEL_168;
      }
LABEL_165:
      if (*(void *)buf != **(void **)(a1 + 1016))
      {
        sub_1011BEB6C(a1, a1 + 656, (uint64_t)(v55 + 2), v84, (void *)&v107 + 1, (void *)&v108 + 1);
        if (*((double *)&v107 + 1) > *(double *)(a1 + 1624)) {
          *(void *)(a1 + 1624) = *((void *)&v107 + 1);
        }
      }
    }
LABEL_168:
    if (v110)
    {
      unint64_t v111 = v110;
      operator delete(v110);
    }
    if (*((void *)&buf + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
    }
    uint64_t v55 = (uint64_t *)v55[1];
  }
  while (v55 != &v94);
  double v75 = *(double *)(a1 + 1624);
  *(void *)(a1 + 1632) = 0;
  if (v75 > 0.0)
  {
    double v76 = *(double *)(a1 + 1616) / v75;
    *(double *)(a1 + 1632) = v76;
    if (v76 > 1000000.0) {
      *(void *)(a1 + 1632) = 0x412E848000000000;
    }
    goto LABEL_184;
  }
  uint64_t v4 = 1;
LABEL_186:
  if (v101)
  {
    double v102 = v101;
    operator delete(v101);
  }
  if (*((void *)&v97 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v97 + 1));
  }
LABEL_190:
  sub_10017FF2C(&v94);
  if (v7) {
LABEL_191:
  }
    sub_1000DB0A0(v7);
  return v4;
}

void sub_1011D3734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011D37EC(uint64_t a1, unsigned char *a2)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864))
  {
    uint64_t result = 1;
    *a2 = 1;
    return result;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,assessMatchAndNeedForReseed", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      LOWORD(v31.__r_.__value_.__l.__data_) = 0;
      uint64_t v26 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", (const char *)v26);
      if (v26 != buf) {
        free(v26);
      }
    }
  }
  *(void *)(a1 + 1360) = *(void *)(a1 + 1088);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a1 + 1576);
  float v5 = *(double *)(a1 + 1632);
  *(float *)(a1 + 1308) = v5;
  *(void *)(a1 + 1368) = *(void *)(a1 + 1592);
  uint64_t v6 = *(void *)(a1 + 1016);
  *(unsigned char *)(a1 + 1489) = *(unsigned char *)(v6 + 19);
  *(unsigned char *)(a1 + 1490) = *(unsigned char *)(v6 + 18);
  if (*(unsigned char *)(a1 + 1649)) {
    BOOL v7 = *(unsigned char *)(a1 + 1650) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  BOOL v9 = sub_1011BD384(a1, a1 + 1128, v7);
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      sub_1013E6A88(a1 + 1128, buf);
      long long v11 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? buf
          : (std::string *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v31.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,postEvaluateMatch,%{private}s", (uint8_t *)&v31, 0xCu);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      sub_1013E6A88(a1 + 1128, &v31);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v27 = &v31;
      }
      else {
        int v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      int v32 = 136380675;
      double v33 = v27;
      int v28 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", (const char *)v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
  *(unsigned char *)(a1 + 1392) = v9;
  if (*(unsigned char *)(a1 + 841)) {
    BOOL v12 = v9;
  }
  else {
    BOOL v12 = 0;
  }
  *(unsigned char *)(a1 + 1478) = v12;
  if (!*(unsigned char *)(a1 + 1488)) {
    sub_100FFFB20(a1 + 3832, (uint64_t *)(a1 + 1016), v9, *(double *)(a1 + 1136), *(double *)(a1 + 1208), *(double *)(a1 + 1200), *(double *)(a1 + 1216));
  }
  sub_100FFFC50(a1 + 3184, (long long *)(a1 + 1128));
  BOOL v13 = sub_100FFFEA8((uint64_t *)(a1 + 3184), *(unsigned __int8 *)(a1 + 96));
  if (!v13)
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 2968) = 0;
      *(_OWORD *)(a1 + 2832) = 0u;
      return !v13;
    }
    *(_DWORD *)(a1 + 1408) = 0;
    *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
    *(void *)(a1 + 1296) = *(void *)(a1 + 1232);
    if (*(double *)(a1 + 1088) > 70.0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        int v14 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v15 = *(void *)(a1 + 1088);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v15;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", (uint8_t *)buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          std::string::size_type v29 = *(void *)(a1 + 1088);
          LODWORD(v31.__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = v29;
          WORD2(v31.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000;
          int v30 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", (const char *)v30);
          if (v30 != buf) {
            free(v30);
          }
        }
      }
      *a2 = 1;
    }
    unsigned int v16 = *(_DWORD *)(a1 + 2968);
    if ((v16 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 2968) = v16 + 1, v16 < 0x1E))
    {
      if (*a2 || !*(unsigned char *)(a1 + 1848) || *(double *)(a1 + 1136) - *(double *)(a1 + 1976) >= 4.9) {
        return !v13;
      }
      if (*(double *)(a1 + 1088) <= 50.0
        || *(double *)(a1 + 1928) <= 50.0
        || (double v18 = *(double *)(a1 + 1608), v18 < 0.0)
        || (double v23 = *(double *)(a1 + 2448), v23 >= 2.5)
        || v18 >= 2.5
        || v23 < 0.0)
      {
        *(double *)(a1 + 2832) = *(double *)(a1 + 1800) + *(double *)(a1 + 2832);
        double v19 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 2120), *(double *)(a1 + 2128), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(a1 + 1200))+ *(double *)(a1 + 2840);
        *(double *)(a1 + 2840) = v19;
        double v20 = *(double *)(a1 + 2832);
        if (v20 > 80.0 && v20 / v19 > 5.0)
        {
          *a2 = 1;
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            double v21 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to stuck at dead-end while observations move away", (uint8_t *)buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              LOWORD(v31.__r_.__value_.__l.__data_) = 0;
              double v22 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", (const char *)v22);
              if (v22 != buf) {
                free(v22);
              }
            }
          }
        }
        return !v13;
      }
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_47;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      double v24 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to Neff", (uint8_t *)buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      LOWORD(v31.__r_.__value_.__l.__data_) = 0;
      uint64_t v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", (const char *)v25);
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_47;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      unint64_t v17 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        buf[0].__r_.__value_.__r.__words[0] = 0x1E04020100;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to badMatchCount,max,%{public}d", (uint8_t *)buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      v31.__r_.__value_.__r.__words[0] = 0x1E04020100;
      uint64_t v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "%s\n", (const char *)v25);
    }
    if (v25 != buf) {
      free(v25);
    }
LABEL_47:
    *a2 = 1;
    return !v13;
  }
  *(unsigned char *)(a1 + 1392) = 0;
  *(unsigned char *)(a1 + 1478) = 0;
  return !v13;
}

BOOL sub_1011D42AC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,reseed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      LOWORD(v38) = 0;
      int v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::reseed()", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1011D4954(a1);
  if (*(void *)(a1 + 888) == *(void *)(a1 + 896) && (sub_1011D2600(a1) & 1) == 0)
  {
    BOOL v29 = 0;
    if (!v3) {
      return v29;
    }
    goto LABEL_57;
  }
  long long v38 = 0uLL;
  v39[0] = 0;
  sub_1011CD4FC((uint64_t *)&v38, 0x60uLL);
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 896) - *(void *)(a1 + 888)) >> 4);
  *(_DWORD *)long long buf = 0;
  sub_100D0C2C0(&__p, v4, buf);
  sub_1011DFF0C(a1 + 984, *(void **)(a1 + 992));
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 992) = 0;
  uint64_t v5 = *(void *)(a1 + 896);
  uint64_t v6 = *(void *)(a1 + 888);
  if ((int)(-1227133513 * ((unint64_t)(v5 - v6) >> 4)) <= 95 && v6 != v5)
  {
    uint64_t v5 = *(void *)(a1 + 888);
    do
    {
      uint64_t v8 = *((void *)&v38 + 1);
      if (*((void *)&v38 + 1) >= v39[0])
      {
        uint64_t v9 = sub_1011E03D4((uint64_t *)&v38, v5);
      }
      else
      {
        sub_1011E04FC((uint64_t)v39, *((uint64_t *)&v38 + 1), v5);
        uint64_t v9 = v8 + 112;
      }
      *((void *)&v38 + 1) = v9;
      sub_1011C8000(a1);
      v5 += 112;
    }
    while (v5 != *(void *)(a1 + 896));
  }
  uint64_t v10 = *((void *)&v38 + 1);
  uint64_t v11 = v38;
  if (*((void *)&v38 + 1) - (void)v38 != 10752)
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = random();
      int v14 = *(float **)(a1 + 960);
      std::string::size_type v15 = *(float **)(a1 + 968);
      if (v15 == v14)
      {
        unint64_t v17 = *(float **)(a1 + 968);
      }
      else
      {
        unint64_t v16 = v15 - v14;
        unint64_t v17 = *(float **)(a1 + 960);
        do
        {
          unint64_t v18 = v16 >> 1;
          double v19 = &v17[v16 >> 1];
          float v21 = *v19;
          double v20 = v19 + 1;
          v16 += ~(v16 >> 1);
          if (v21 < (float)((float)v13 * 4.6566e-10)) {
            unint64_t v17 = v20;
          }
          else {
            unint64_t v16 = v18;
          }
        }
        while (v16);
      }
      if (v15 != v17) {
        ++*(_DWORD *)((char *)__p + (((char *)v17 - (char *)v14) << 30 >> 30));
      }
      ++v12;
      uint64_t v10 = *((void *)&v38 + 1);
      uint64_t v11 = v38;
    }
    while (96 - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v38 + 1) - v38) >> 4) > v12);
    uint64_t v5 = *(void *)(a1 + 896);
  }
  uint64_t v22 = *(void *)(a1 + 888);
  if (v22 != v5)
  {
    unint64_t v23 = 0;
    double v24 = __p;
    do
    {
      if (v23 >= (v37 - v24) >> 2) {
        break;
      }
      if (*(int *)&v24[4 * v23] >= 1)
      {
        int v25 = 0;
        do
        {
          uint64_t v26 = *((void *)&v38 + 1);
          if (*((void *)&v38 + 1) >= v39[0])
          {
            uint64_t v27 = sub_1011E03D4((uint64_t *)&v38, v22);
          }
          else
          {
            sub_1011E04FC((uint64_t)v39, *((uint64_t *)&v38 + 1), v22);
            uint64_t v27 = v26 + 112;
          }
          *((void *)&v38 + 1) = v27;
          sub_1011C8000(a1);
          ++v25;
          double v24 = __p;
        }
        while (v25 < *((_DWORD *)__p + v23));
        uint64_t v5 = *(void *)(a1 + 896);
      }
      v22 += 112;
      ++v23;
    }
    while (v22 != v5);
    uint64_t v10 = *((void *)&v38 + 1);
    uint64_t v11 = v38;
  }
  unint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v11) >> 4);
  BOOL v29 = v28 < 0x61;
  if (v28 >= 0x61)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    int v32 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "CLMM,Unexpected number of particles after resampling,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      int v40 = 67240192;
      int v41 = v28;
      unint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::reseed()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    ++*(_DWORD *)(a1 + 104);
  }
  else
  {
    long long v30 = *(_OWORD *)(a1 + 864);
    *(void *)(a1 + 864) = v11;
    *(void *)(a1 + 872) = v10;
    long long v38 = v30;
    uint64_t v31 = *(void *)(a1 + 880);
    *(void *)(a1 + 880) = v39[0];
    v39[0] = v31;
  }
  if (__p)
  {
    double v37 = __p;
    operator delete(__p);
  }
  *(void *)long long buf = &v38;
  sub_10082B830((void ***)buf);
  if (v3) {
LABEL_57:
  }
    sub_1000DB0A0(v3);
  return v29;
}

void sub_1011D48D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21)
{
  if (__p) {
    operator delete(__p);
  }
  a21 = &a15;
  sub_10082B830((void ***)&a21);
  if (v21) {
    sub_1000DB0A0(v21);
  }
  _Unwind_Resume(a1);
}

void sub_1011D4954(uint64_t a1)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  uint64_t v2 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 1136);
    uint64_t v4 = *(void *)(a1 + 1184);
    uint64_t v5 = *(void *)(a1 + 1192);
    *(_DWORD *)long long buf = 134349569;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = v4;
    *(_WORD *)&unsigned char buf[22] = 2049;
    *(void *)&long long v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,filterResetForReseed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v11 = *(void *)(a1 + 1136);
    uint64_t v12 = *(void *)(a1 + 1184);
    uint64_t v13 = *(void *)(a1 + 1192);
    int v15 = 134349569;
    *(void *)unint64_t v16 = v11;
    *(_WORD *)&v16[8] = 2049;
    *(void *)&v16[10] = v12;
    *(_WORD *)&v16[18] = 2049;
    *(void *)&long long v17 = v13;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLParticleMapMatcher::resetForReseed()", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
  sub_1011BB80C(a1);
  *(_DWORD *)(a1 + 2968) = -1;
  uint64_t v6 = *(void **)(a1 + 872);
  BOOL v7 = *(void **)(a1 + 864);
  while (v6 != v7)
  {
    v6 -= 14;
    sub_10082B8C8(a1 + 880, v6);
  }
  *(void *)(a1 + 872) = v7;
  sub_1011DFF0C(a1 + 984, *(void **)(a1 + 992));
  *(void *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 992) = 0u;
  *(unsigned char *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  sub_1003B2350((void *)(a1 + 912));
  buf[0] = 0;
  *(_OWORD *)&uint8_t buf[8] = 0u;
  long long v24 = 0u;
  LODWORD(v25) = 0;
  WORD2(v25) = 1;
  DWORD2(v25) = 0;
  long long v26 = 0u;
  memset(v27, 0, 33);
  BOOL v29 = 0;
  uint64_t v30 = 0;
  unint64_t v28 = 0;
  int v31 = 0;
  *(void *)(a1 + 2704) = 0;
  *(_OWORD *)(a1 + 2688) = *(_OWORD *)buf;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 2720);
  *(void *)(a1 + 2712) = 0;
  *(void *)(a1 + 2720) = 0;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  *(void *)(a1 + 2760) = v27[0];
  *(_OWORD *)(a1 + 2728) = v25;
  *(_OWORD *)(a1 + 2744) = v26;
  *(_OWORD *)(a1 + 2768) = *(_OWORD *)&v27[1];
  *(_OWORD *)(a1 + 2777) = *(_OWORD *)((char *)&v27[2] + 1);
  if ((unsigned char *)(a1 + 2688) == buf)
  {
    int v9 = 0;
  }
  else
  {
    sub_1010003E4((char *)(a1 + 2800), 0, 0, 0);
    int v9 = v31;
  }
  *(_DWORD *)(a1 + 2824) = v9;
  *(_DWORD *)(a1 + 2972) = 0;
  LOBYTE(v15) = 0;
  *(void *)&v16[4] = 0;
  *(void *)&v16[12] = 0;
  LODWORD(v17) = 0;
  WORD2(v17) = 1;
  DWORD2(v17) = 0;
  float v21 = 0;
  uint64_t v22 = 0;
  long long __p = 0;
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(unsigned char *)(a1 + 2848) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 2864);
  *(void *)(a1 + 2856) = 0;
  *(void *)(a1 + 2864) = 0;
  if (v10) {
    sub_1000DB0A0(v10);
  }
  *(void *)(a1 + 2904) = *(void *)v19;
  *(_OWORD *)(a1 + 2872) = v17;
  *(_OWORD *)(a1 + 2888) = v18;
  *(_OWORD *)(a1 + 2912) = *(_OWORD *)&v19[8];
  *(_OWORD *)(a1 + 2921) = *(_OWORD *)&v19[17];
  if ((int *)(a1 + 2848) != &v15) {
    sub_1010003E4((char *)(a1 + 2944), 0, 0, 0);
  }
  sub_1011D4D7C(a1 + 3832);
  *(_DWORD *)(a1 + 4040) = 0;
  if (__p)
  {
    float v21 = __p;
    operator delete(__p);
  }
  if (*(void *)&v16[12]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v16[12]);
  }
  if (v28)
  {
    BOOL v29 = v28;
    operator delete(v28);
  }
  if (*((void *)&v24 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v24 + 1));
  }
}

void sub_1011D4D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void sub_1011D4D7C(uint64_t a1)
{
  v13[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v13[8] = _Q0;
  long long v15 = 0uLL;
  uint64_t v14 = 0;
  long long v16 = _Q0;
  uint64_t v17 = 0;
  long long v18 = 0;
  LODWORD(v19) = 0;
  WORD2(v19) = 1;
  DWORD2(v19) = 0;
  long long __p = 0;
  unint64_t v23 = 0;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  uint64_t v24 = 0;
  unint64_t v25 = 0xBFF0000000000000;
  long long v7 = *(_OWORD *)v13;
  long long v8 = *(unint64_t *)&v13[16];
  long long v9 = v16;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = v20;
  *(_OWORD *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 96) = v11;
  *(void *)(a1 + 112) = *(void *)v21;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v21[8];
  *(_OWORD *)(a1 + 129) = *(_OWORD *)&v21[17];
  if (v13 == (unsigned char *)a1)
  {
    *(void *)(a1 + 176) = 0xBFF0000000000000;
  }
  else
  {
    sub_1010003E4((char *)(a1 + 152), 0, 0, 0);
    uint64_t v12 = __p;
    *(void *)(a1 + 176) = v25;
    if (v12)
    {
      unint64_t v23 = v12;
      operator delete(v12);
    }
  }
  if (v18) {
    sub_1000DB0A0(v18);
  }
}

void sub_1011D4E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1011C7530((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1011D4EA0(uint64_t *a1)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  uint64_t v2 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[142];
    uint64_t v4 = a1[148];
    uint64_t v5 = a1[149];
    *(_DWORD *)long long buf = 134349569;
    uint64_t v10 = v3;
    __int16 v11 = 2049;
    uint64_t v12 = v4;
    __int16 v13 = 2049;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,filterReset,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLParticleMapMatcher::reset()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_1011D4954((uint64_t)a1);
  uint64_t v6 = (void *)a1[112];
  long long v7 = (void *)a1[111];
  while (v6 != v7)
  {
    v6 -= 14;
    sub_10082B8C8((uint64_t)(a1 + 113), v6);
  }
  a1[112] = (uint64_t)v7;
  a1[121] = a1[120];
  sub_1011D5100((uint64_t)(a1 + 126));
  sub_1011D5100((uint64_t)(a1 + 231));
  sub_10017FF2C(a1 + 381);
  sub_10017FF2C(a1 + 384);
  sub_10017FF2C(a1 + 387);
  sub_10017FF2C(a1 + 390);
}

void sub_1011D5100(uint64_t a1)
{
  uint64_t v17 = 0;
  long long v18 = 0;
  LODWORD(v19) = 0;
  WORD2(v19) = 1;
  DWORD2(v19) = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  v2[1] = 0;
  if (v3) {
    sub_1000DB0A0(v3);
  }
  long long v4 = v20;
  *(_OWORD *)(a1 + 24) = v19;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = *(void *)v21;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v21[8];
  *(_OWORD *)(a1 + 73) = *(_OWORD *)&v21[17];
  if (v2 == &v17)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    sub_1010003E4((char *)(a1 + 96), 0, 0, 0);
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  *(void *)(a1 + 672) = v5;
  long long v7 = *(std::__shared_weak_count **)(a1 + 680);
  *(void *)(a1 + 680) = v6;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  long long v8 = v20;
  *(_OWORD *)(a1 + 688) = v19;
  *(_OWORD *)(a1 + 704) = v8;
  *(void *)(a1 + 720) = *(void *)v21;
  *(_OWORD *)(a1 + 728) = *(_OWORD *)&v21[8];
  *(_OWORD *)(a1 + 737) = *(_OWORD *)&v21[17];
  if ((uint64_t *)(a1 + 672) != &v17) {
    sub_1010003E4((char *)(a1 + 760), v22, (uint64_t)v23, 0x8E38E38E38E38E39 * ((v23 - v22) >> 3));
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(void *)uint64_t v14 = 0xBFF0000000000000;
  *(void *)&v16[120] = 0;
  *(_DWORD *)&v16[128] = 0;
  memset(&v16[80], 0, 34);
  memset(&v16[136], 0, 75);
  memset(&v16[216], 0, 56);
  memset(&v14[8], 0, 80);
  memset(v16, 0, 78);
  long long v15 = 0u;
  *(void *)&v16[272] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v14;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v14[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v14[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v14[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v14[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v14[80]);
  memcpy((void *)(a1 + 272), v16, 0x118uLL);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 639) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 830) = 0;
  if (SHIBYTE(v15) < 0) {
    operator delete(*(void **)&v14[80]);
  }
  if (v22)
  {
    unint64_t v23 = v22;
    operator delete(v22);
  }
  if (v18) {
    sub_1000DB0A0(v18);
  }
}

void sub_1011D5380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_100FFFC10((void *)(v30 - 160));
  _Unwind_Resume(a1);
}

BOOL sub_1011D53AC(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v6 = (unsigned __int8 *)(a1 + 3832);
  uint64_t v9 = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v7 = sub_100FFD5BC(v6, a2, &v9, *(unsigned __int8 *)(a1 + 96), a3);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  return v7;
}

void sub_1011D5410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011D5428(uint64_t a1)
{
}

uint64_t sub_1011D5430(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (double *)(a1 + 3832);
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  long long v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = sub_100FFE77C(v3, a2, &v7, *(unsigned __int8 *)(a1 + 96));
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return v5;
}

void sub_1011D5494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011D54AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v152 = v4;
  if (!v5)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v14 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_105;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v16 = *(void *)(a2 + 8);
    int v154 = 134349056;
    uint64_t v155 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v17);
LABEL_71:
    if (v17 != buf) {
      free(v17);
    }
    goto LABEL_105;
  }
  if (*(unsigned char *)(a1 + 96)) {
    sub_10118856C((uint64_t)v5);
  }
  uint64_t v6 = (unsigned char *)(a1 + 1008);
  sub_1011D7298(a1 + 1848, a1 + 1008);
  double v7 = *(double *)(a2 + 96);
  if (v7 >= 0.0)
  {
    *(void *)(a1 + 3880) = *(void *)(a2 + 8);
    *(double *)(a1 + 3840) = v7;
  }
  *(unsigned char *)(a1 + 3720) = 0;
  sub_1011BBD5C(a1, *(double *)(a2 + 104), *(double *)(a2 + 192));
  long long v8 = (long long *)(a1 + 1128);
  sub_1011BB994(a1, a1 + 1128);
  std::string::size_type v151 = (unsigned char *)(a1 + 1848);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 152) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a2 + 160) = v10;
  *(void *)(a2 + 168) = v11;
  *(void *)(a2 + 288) = v9;
  *(void *)(a2 + 296) = v10;
  *(void *)(a2 + 304) = v11;
  *(void *)(a2 + 312) = v9;
  *(void *)(a2 + 320) = v10;
  *(void *)(a2 + 328) = v9;
  *(void *)(a2 + 336) = v10;
  *(_DWORD *)(a2 + 280) = 0;
  if (*(double *)(a2 + 8) - *(double *)(a1 + 1976) > 6.0) {
    sub_1003A7544((void *)(a1 + 2976));
  }
  float v12 = *(double *)(a2 + 96);
  *(float *)long long buf = v12;
  sub_1001A44F4(a1 + 2976, (float *)buf);
  double v13 = *(double *)(a1 + 4032);
  if (v13 < 0.0)
  {
    if (*(double *)(a2 + 24) - *(double *)(a1 + 4016) >= 900.0) {
      double v13 = 5.55555556;
    }
    else {
      double v13 = 1.66666667;
    }
  }
  if (*(double *)(a2 + 96) <= v13 && !*(unsigned char *)(a1 + 2232))
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v22 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(void *)(a2 + 8);
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, not matching", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v97 = *(void *)(a2 + 8);
        int v154 = 134349056;
        uint64_t v155 = v97;
        long long v98 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v98);
        if (v98 != buf) {
          free(v98);
        }
      }
    }
    goto LABEL_41;
  }
  if (!*(unsigned char *)(a2 + 348)) {
    goto LABEL_32;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    long long v18 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,opportunistic tile download only, favorable GPS conditions", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      LOWORD(v154) = 0;
      unint64_t v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v51);
      if (v51 != buf) {
        free(v51);
      }
    }
  }
  unsigned int v19 = *(unsigned __int8 *)(a1 + 112);
  if (*(unsigned char *)(a1 + 112))
  {
LABEL_32:
    unint64_t v20 = *(void *)(a1 + 3040);
    if (v20 < *(void *)(a1 + 2984)
      || (!v20 ? (float v21 = 0.0) : (float v21 = *(float *)(a1 + 2992) / (float)v20), v21 <= 22.222))
    {
      unsigned int v19 = 1;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96))
      {
        uint64_t v26 = 0;
        goto LABEL_61;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      unint64_t v25 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,opportunistic tile download only, high speed threshold", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        LOWORD(v154) = 0;
        long long v99 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v99);
        if (v99 != buf) {
          free(v99);
        }
      }
      unsigned int v19 = 0;
    }
  }
  if (*(unsigned char *)(a1 + 113)) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v19;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v27 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v28;
      __int16 v161 = 1026;
      *(_DWORD *)__int16 v162 = v26;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMM,match,%{public}.1lf,allowsNetworkUsage,%{public}d", buf, 0x12u);
    }
    uint64_t v6 = (unsigned char *)(a1 + 1008);
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v49 = *(void *)(a2 + 8);
      int v154 = 134349312;
      uint64_t v155 = v49;
      __int16 v156 = 1026;
      *(_DWORD *)double v157 = v26;
      uint64_t v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v50);
      if (v50 != buf) {
        free(v50);
      }
      uint64_t v6 = (unsigned char *)(a1 + 1008);
    }
  }
LABEL_61:
  (*(void (**)(void *, uint64_t))(*v5 + 32))(v5, v26);
  (*(void (**)(void *, uint64_t, double))(*v5 + 48))(v5, a2, 450.0);
  v5[1] = *(void *)(a2 + 8);
  (*(void (**)(void *))(*v5 + 96))(v5);
  sub_1011DFF0C(a1 + 984, *(void **)(a1 + 992));
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 944) = *(void *)(a1 + 936);
  sub_10031FC98((void **)(a1 + 936), 0xC0uLL);
  sub_1011D5100((uint64_t)v6);
  long long v29 = *(_OWORD *)a2;
  long long v30 = *(_OWORD *)(a2 + 16);
  long long v31 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1176) = v31;
  *long long v8 = v29;
  *(_OWORD *)(a1 + 1144) = v30;
  long long v32 = *(_OWORD *)(a2 + 64);
  long long v33 = *(_OWORD *)(a2 + 80);
  long long v34 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1240) = v34;
  *(_OWORD *)(a1 + 1192) = v32;
  *(_OWORD *)(a1 + 1208) = v33;
  std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(a2 + 128));
  memcpy((void *)(a1 + 1280), (const void *)(a2 + 152), 0x118uLL);
  double v35 = *(double *)(a1 + 1976);
  double v36 = *(double *)(a1 + 1136) - v35;
  *(double *)(a1 + 1640) = v36;
  if (v36 == 0.0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_105;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v37 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "CLMM,Time difference between updates is zero,update ignored", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_105;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    LOWORD(v154) = 0;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v17);
    goto LABEL_71;
  }
  double v38 = 4.9;
  if (*(unsigned char *)(a1 + 1356) && *(unsigned char *)(a1 + 2232) && v36 > 4.9)
  {
    double v39 = *(double *)(a1 + 1480);
    if (v39 <= v35 + 1.2 && v39 > 0.0) {
      double v38 = 75.0;
    }
  }
  if (v36 < 0.0 || v36 > v38) {
    sub_1011D4954(a1);
  }
  if (*(void *)(a1 + 864) == *(void *)(a1 + 872)) {
    *(void *)(a1 + 1640) = 0;
  }
  sub_1011BBD68(a1, a1 + 1128);
  sub_1011BD114(a1, a1 + 1128);
  sub_1011D74A4(a1, a1 + 1128);
  ++*(_DWORD *)(a1 + 100);
  if (!sub_1011CA000(a1)) {
    goto LABEL_104;
  }
  *(unsigned char *)(a1 + 1845) = sub_1011D7584(a1);
  if (!sub_1011D7B08(a1)) {
    goto LABEL_104;
  }
  if (sub_1011CCED0(a1))
  {
    if (!sub_1011C8524(a1)) {
      goto LABEL_104;
    }
    if (sub_1011CD5BC(a1))
    {
      sub_1011D0E90(a1);
      if (sub_1011D2600(a1))
      {
        char v153 = 0;
        if ((sub_1011D37EC(a1, &v153) & 1) == 0) {
          goto LABEL_242;
        }
        if (!v153 || sub_1011D42AC(a1))
        {
          if (*(unsigned char *)(a1 + 1392)
            && (uint64_t v41 = *(void *)(a1 + 1016),
                *(unsigned char *)(a1 + 777) = *(unsigned char *)(v41 + 16),
                *(_DWORD *)(a1 + 780) = *(_DWORD *)(v41 + 20),
                *(unsigned char *)(a1 + 784) = *(unsigned char *)(a1 + 1649),
                *(unsigned char *)(a1 + 2232)))
          {
            if (*(void *)(a1 + 2080) != *(void *)(a1 + 1240)
              && sub_1011BBD04(*(double *)(a1 + 1432) - *(double *)(a1 + 2272)) > 45.0)
            {
              uint64_t v42 = *(void *)(a1 + 3080);
              if (v42 == a1 + 3072)
              {
                BOOL v46 = 1;
              }
              else
              {
                uint64_t v43 = *(void *)(a1 + 1240);
                do
                {
                  uint64_t v44 = **(void **)(v42 + 16);
                  BOOL v45 = v43 == v44;
                  BOOL v46 = v43 != v44;
                  if (v45) {
                    break;
                  }
                  uint64_t v42 = *(void *)(v42 + 8);
                }
                while (v42 != a1 + 3072);
              }
              uint64_t v52 = *(void *)(a1 + 3128);
              if (v52 == a1 + 3120)
              {
LABEL_129:
                if (v46)
                {
                  uint64_t v53 = *(void *)(a1 + 1016);
                  float v146 = *(std::__shared_weak_count **)(a1 + 1024);
                  if (v146) {
                    atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v54 = *(void *)(a1 + 1856);
                  std::string::size_type v148 = *(std::__shared_weak_count **)(a1 + 1864);
                  if (v148) {
                    atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v55 = *(double **)(v53 + 136);
                  double v56 = 0.0;
                  double v57 = 0.0;
                  double v58 = 0.0;
                  if (*(double **)(v53 + 144) != v55)
                  {
                    double v57 = *v55;
                    double v58 = v55[1];
                  }
                  long long v59 = *(double **)(v54 + 136);
                  double v60 = 0.0;
                  if (*(double **)(v54 + 144) != v59)
                  {
                    double v56 = *v59;
                    double v60 = v59[1];
                  }
                  if (sub_1004BABDC(v57, v58, v56, v60, 0.0000001)) {
                    goto LABEL_154;
                  }
                  char v61 = *(double **)(v53 + 136);
                  double v62 = 0.0;
                  double v63 = 0.0;
                  double v64 = 0.0;
                  if (*(double **)(v53 + 144) != v61)
                  {
                    double v63 = *v61;
                    double v64 = v61[1];
                  }
                  uint64_t v65 = *(void *)(v54 + 144);
                  double v66 = 0.0;
                  if (v65 != *(void *)(v54 + 136))
                  {
                    double v62 = *(double *)(v65 - 16);
                    double v66 = *(double *)(v65 - 8);
                  }
                  if (sub_1004BABDC(v63, v64, v62, v66, 0.0000001)) {
                    goto LABEL_154;
                  }
                  uint64_t v67 = *(void *)(v53 + 144);
                  double v68 = 0.0;
                  double v69 = 0.0;
                  double v70 = 0.0;
                  if (v67 != *(void *)(v53 + 136))
                  {
                    double v69 = *(double *)(v67 - 16);
                    double v70 = *(double *)(v67 - 8);
                  }
                  int v71 = *(double **)(v54 + 136);
                  double v72 = 0.0;
                  if (*(double **)(v54 + 144) != v71)
                  {
                    double v68 = *v71;
                    double v72 = v71[1];
                  }
                  if (sub_1004BABDC(v69, v70, v68, v72, 0.0000001)) {
                    goto LABEL_154;
                  }
                  uint64_t v73 = *(void *)(v53 + 144);
                  double v74 = 0.0;
                  double v75 = 0.0;
                  double v76 = 0.0;
                  if (v73 != *(void *)(v53 + 136))
                  {
                    double v75 = *(double *)(v73 - 16);
                    double v76 = *(double *)(v73 - 8);
                  }
                  uint64_t v77 = *(void *)(v54 + 144);
                  double v78 = 0.0;
                  if (v77 != *(void *)(v54 + 136))
                  {
                    double v74 = *(double *)(v77 - 16);
                    double v78 = *(double *)(v77 - 8);
                  }
                  if (sub_1004BABDC(v75, v76, v74, v78, 0.0000001)) {
LABEL_154:
                  }
                    int v144 = 1;
                  else {
                    int v144 = 0;
                  }
                  if (*(unsigned char *)(a1 + 96))
                  {
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_102317A08);
                    }
                    uint64_t v79 = qword_102419438;
                    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v80 = *(void *)(a1 + 1136);
                      uint64_t v81 = **(void **)(a1 + 1016);
                      uint64_t v82 = **(void **)(a1 + 1856);
                      *(_DWORD *)long long buf = 134349825;
                      *(void *)&uint8_t buf[4] = v80;
                      __int16 v161 = 1026;
                      *(_DWORD *)__int16 v162 = v144;
                      *(_WORD *)&v162[4] = 2049;
                      *(void *)&v162[6] = v81;
                      *(_WORD *)&v162[14] = 2049;
                      *(void *)&v162[16] = v82;
                      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping check,connecting roads,%{public}d,current road,%{private}lld,prior road,%{private}lld", buf, 0x26u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419430 != -1) {
                        dispatch_once(&qword_102419430, &stru_102317A08);
                      }
                      uint64_t v128 = *(void *)(a1 + 1136);
                      uint64_t v129 = **(void **)(a1 + 1016);
                      uint64_t v130 = **(void **)(a1 + 1856);
                      int v154 = 134349825;
                      uint64_t v155 = v128;
                      __int16 v156 = 1026;
                      *(_DWORD *)double v157 = v144;
                      *(_WORD *)&v157[4] = 2049;
                      *(void *)&v157[6] = v129;
                      *(_WORD *)&v157[14] = 2049;
                      *(void *)&v157[16] = v130;
                      double v131 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v131);
                      if (v131 != buf) {
                        free(v131);
                      }
                    }
                  }
                  if (v148) {
                    sub_1000DB0A0(v148);
                  }
                  if (v146) {
                    sub_1000DB0A0(v146);
                  }
                  if ((v144 & 1) == 0)
                  {
                    std::string::size_type v83 = *(void **)(a1 + 1656);
                    if (!v83 || !*v83) {
                      goto LABEL_187;
                    }
                    double v143 = *(uint64_t **)(a1 + 1016);
                    std::string::size_type v84 = *(std::__shared_weak_count **)(a1 + 1024);
                    if (v84) {
                      atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    std::string::size_type v147 = *(uint64_t **)(a1 + 1856);
                    double v149 = *(std::__shared_weak_count **)(a1 + 1864);
                    if (v149) {
                      atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    double v85 = *(double **)(*(void *)(a1 + 1656) + 136);
                    double v86 = 0.0;
                    double v87 = 0.0;
                    double v88 = 0.0;
                    if (*(double **)(*(void *)(a1 + 1656) + 144) != v85)
                    {
                      double v87 = *v85;
                      double v88 = v85[1];
                    }
                    uint64_t v89 = v147[18];
                    double v90 = 0.0;
                    if (v89 != v147[17])
                    {
                      double v86 = *(double *)(v89 - 16);
                      double v90 = *(double *)(v89 - 8);
                    }
                    BOOL v145 = sub_1004BABDC(v87, v88, v86, v90, 0.0000001);
                    if (*(unsigned char *)(a1 + 96))
                    {
                      if (qword_102419430 != -1) {
                        dispatch_once(&qword_102419430, &stru_102317A08);
                      }
                      long long v91 = qword_102419438;
                      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v92 = *(void *)(a1 + 1136);
                        uint64_t v93 = *v147;
                        uint64_t v94 = **(void **)(a1 + 1656);
                        uint64_t v95 = *v143;
                        *(_DWORD *)long long buf = 134349825;
                        *(void *)&uint8_t buf[4] = v92;
                        __int16 v161 = 2049;
                        *(void *)__int16 v162 = v93;
                        *(_WORD *)&v162[8] = 2049;
                        *(void *)&v162[10] = v94;
                        *(_WORD *)&v162[18] = 2049;
                        *(void *)&v162[20] = v95;
                        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping check,prior road,%{private}lld, connected to the incoming road,%{private}lld, of the current solution road,%{private}lld", buf, 0x2Au);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419430 != -1) {
                          dispatch_once(&qword_102419430, &stru_102317A08);
                        }
                        uint64_t v138 = *(void *)(a1 + 1136);
                        uint64_t v139 = *v147;
                        uint64_t v140 = **(void **)(a1 + 1656);
                        uint64_t v141 = *v143;
                        int v154 = 134349825;
                        uint64_t v155 = v138;
                        __int16 v156 = 2049;
                        *(void *)double v157 = v139;
                        *(_WORD *)&v157[8] = 2049;
                        *(void *)&v157[10] = v140;
                        *(_WORD *)&v157[18] = 2049;
                        *(void *)&v157[20] = v141;
                        std::string::size_type v142 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v142);
                        if (v142 != buf) {
                          free(v142);
                        }
                      }
                    }
                    if (v149) {
                      sub_1000DB0A0(v149);
                    }
                    if (v84) {
                      sub_1000DB0A0(v84);
                    }
                    if (!v145)
                    {
LABEL_187:
                      BOOL v96 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 2256), *(double *)(a1 + 2264), *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200)) > 35.0|| *(_DWORD *)(a1 + 2680) > 15;
                      if (*(unsigned char *)(a1 + 96))
                      {
                        if (qword_102419430 != -1) {
                          dispatch_once(&qword_102419430, &stru_102317A08);
                        }
                        double v100 = qword_102419438;
                        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v101 = *(void *)(a1 + 1136);
                          uint64_t v102 = *(void *)(a1 + 2272);
                          uint64_t v103 = *(void *)(a1 + 1432);
                          uint64_t v104 = **(void **)(a1 + 1016);
                          uint64_t v105 = **(void **)(a1 + 1856);
                          *(_DWORD *)long long buf = 134350337;
                          *(void *)&uint8_t buf[4] = v101;
                          __int16 v161 = 1026;
                          *(_DWORD *)__int16 v162 = v96;
                          *(_WORD *)&v162[4] = 2050;
                          *(void *)&v162[6] = v102;
                          *(_WORD *)&v162[14] = 2050;
                          *(void *)&v162[16] = v103;
                          *(_WORD *)&v162[24] = 2049;
                          *(void *)&v162[26] = v104;
                          __int16 v163 = 2049;
                          uint64_t v164 = v105;
                          _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping between roads detected,reset,%{public}d,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", buf, 0x3Au);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419430 != -1) {
                            dispatch_once(&qword_102419430, &stru_102317A08);
                          }
                          uint64_t v132 = *(void *)(a1 + 1136);
                          uint64_t v133 = *(void *)(a1 + 2272);
                          uint64_t v134 = *(void *)(a1 + 1432);
                          uint64_t v135 = **(void **)(a1 + 1016);
                          uint64_t v136 = **(void **)(a1 + 1856);
                          int v154 = 134350337;
                          uint64_t v155 = v132;
                          __int16 v156 = 1026;
                          *(_DWORD *)double v157 = v96;
                          *(_WORD *)&v157[4] = 2050;
                          *(void *)&v157[6] = v133;
                          *(_WORD *)&v157[14] = 2050;
                          *(void *)&v157[16] = v134;
                          *(_WORD *)&v157[24] = 2049;
                          *(void *)&v157[26] = v135;
                          __int16 v158 = 2049;
                          uint64_t v159 = v136;
                          int v137 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v137);
                          if (v137 != buf) {
                            free(v137);
                          }
                        }
                      }
                      if (v96) {
                        goto LABEL_242;
                      }
                    }
                  }
                }
              }
              else
              {
                while (*(void *)(a1 + 1240) != **(void **)(v52 + 16))
                {
                  uint64_t v52 = *(void *)(v52 + 8);
                  if (v52 == a1 + 3120) {
                    goto LABEL_129;
                  }
                }
              }
            }
            sub_1010B545C((uint64_t *)(a1 + 3072), *(void *)(a1 + 3056), a1 + 3048);
            sub_10017FF2C((uint64_t *)(a1 + 3048));
            uint64_t v48 = (uint64_t *)(a1 + 3096);
            sub_1010B545C((uint64_t *)(a1 + 3120), *(void *)(a1 + 3104), a1 + 3096);
          }
          else
          {
            sub_10017FF2C((uint64_t *)(a1 + 3072));
            uint64_t v48 = (uint64_t *)(a1 + 3120);
          }
          sub_10017FF2C(v48);
          if (*v6)
          {
            uint64_t v150 = **(void **)(a1 + 1016);
            int v106 = *(unsigned __int8 *)(a1 + 1036);
            uint64_t v107 = *(void *)(a1 + 928);
            if (v107)
            {
              uint64_t v108 = *(void *)(a1 + 920);
              if (v150 == *(void *)(v108 + 16) && v106 == *(unsigned __int8 *)(v108 + 24)) {
                goto LABEL_212;
              }
            }
            char v109 = operator new(0x20uLL);
            v109[24] = v106;
            uint64_t v110 = *(void **)(a1 + 920);
            *(void *)char v109 = a1 + 912;
            *((void *)v109 + 1) = v110;
            *((void *)v109 + 2) = v150;
            *uint64_t v110 = v109;
            *(void *)(a1 + 920) = v109;
            *(void *)(a1 + 928) = v107 + 1;
            if ((int)v107 + 1 < 51 || (sub_1011D7CE0((uint64_t **)(a1 + 912)), *v6))
            {
LABEL_212:
              int v111 = *v151;
              if (*v151)
              {
                if (v150 == **(void **)(a1 + 1856) && v106 == *(unsigned __int8 *)(a1 + 1876)) {
                  int v111 = *(_DWORD *)(a1 + 2680) + 1;
                }
                else {
                  int v111 = 0;
                }
              }
              *(_DWORD *)(a1 + 1840) = v111;
              if (*(unsigned char *)(a1 + 1848))
              {
                double v112 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 1888), *(double *)(a1 + 1896), *(double *)(a1 + 1048), *(double *)(a1 + 1056), *(double *)(a1 + 1200));
                sub_100FFFA78((uint64_t)buf, a1 + 1856);
                int v154 = 0;
                if (sub_1011C78CC(a1, (uint64_t)buf, &v154, v112))
                {
                  *(unsigned char *)(a1 + 2688) = 1;
                  *(_DWORD *)(a1 + 2824) = v154;
                  sub_1011C9F64(a1 + 2712, (uint64_t *)buf);
                  *(void *)(a1 + 2704) = *(void *)(a1 + 1976);
                }
                sub_100FFFC10(buf);
              }
            }
            else
            {
              *(_DWORD *)(a1 + 1840) = 0;
            }
          }
          if (*(unsigned char *)(a1 + 2688))
          {
            if (!*v6
              || (long double v113 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 2744), *(double *)(a1 + 2752), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(a1 + 1200)), *(long double *)(a1 + 2696) = v113, v113 > 450.0))
            {
              *(unsigned char *)(a1 + 2688) = 0;
            }
          }
          sub_1011D1868(a1);
          if (*(double *)(a1 + 1184) == 0.0 && *(double *)(a1 + 1192) == 0.0)
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            int v114 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb lat==lon==0", buf, 2u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_242;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            LOWORD(v154) = 0;
            double v126 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v126);
            if (v126 == buf) {
              goto LABEL_242;
            }
            goto LABEL_269;
          }
          if (*v6)
          {
            if (*(double *)(a1 + 1280) == 0.0 && *(double *)(a1 + 1288) == 0.0)
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              BOOL v115 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb snapLat==snapLon==0", buf, 2u);
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_242;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              LOWORD(v154) = 0;
              double v126 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v126);
              if (v126 == buf) {
                goto LABEL_242;
              }
LABEL_269:
              free(v126);
LABEL_242:
              (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
              goto LABEL_111;
            }
            uint64_t v116 = *(void *)(a1 + 1016);
            if (v116) {
              *(unsigned char *)(a1 + 1477) = *(unsigned char *)(v116 + 17);
            }
          }
          long long v117 = *v8;
          long long v118 = *(_OWORD *)(a1 + 1144);
          long long v119 = *(_OWORD *)(a1 + 1176);
          *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 1160);
          *(_OWORD *)(a2 + 48) = v119;
          *(_OWORD *)a2 = v117;
          *(_OWORD *)(a2 + 16) = v118;
          long long v120 = *(_OWORD *)(a1 + 1192);
          long long v121 = *(_OWORD *)(a1 + 1208);
          long long v122 = *(_OWORD *)(a1 + 1240);
          *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 1224);
          *(_OWORD *)(a2 + 112) = v122;
          *(_OWORD *)(a2 + 64) = v120;
          *(_OWORD *)(a2 + 80) = v121;
          std::string::operator=((std::string *)(a2 + 128), (const std::string *)(a1 + 1256));
          memcpy((void *)(a2 + 152), (const void *)(a1 + 1280), 0x118uLL);
          if (*(unsigned char *)(a1 + 1392))
          {
            *(void *)(a1 + 4016) = *(void *)(a1 + 1152);
            if (*(unsigned char *)(a1 + 776) && *(unsigned char *)(a1 + 1648))
            {
              if (*(unsigned char *)(a1 + 96))
              {
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_102317A08);
                }
                double v123 = qword_102419438;
                if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse engaged but not snapping course", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_102317A08);
                  }
                  LOWORD(v154) = 0;
                  double v127 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "%s\n", v127);
                  if (v127 != buf) {
                    free(v127);
                  }
                }
              }
              *(void *)(a2 + 168) = *(void *)(a1 + 848);
            }
            sub_1011D7D08(a1, a2);
            int v124 = *(unsigned __int8 *)(a1 + 1392);
            *(void *)long long buf = *(void *)(a2 + 192);
            if (v124 && (sub_1011BB9C4(a1, (uint64_t *)buf) & 1) != 0)
            {
              float v125 = buf;
LABEL_260:
              *(void *)(a2 + 192) = *v125;
LABEL_41:
              uint64_t v24 = 1;
              goto LABEL_106;
            }
          }
          else
          {
            *(void *)(a2 + 168) = *(void *)(a1 + 848);
            ++*(_DWORD *)(a1 + 104);
            *(void *)long long buf = *(void *)(a2 + 192);
          }
          float v125 = (void *)(a1 + 856);
          goto LABEL_260;
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
LABEL_105:
        uint64_t v24 = 0;
        goto LABEL_106;
      }
LABEL_104:
      (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      goto LABEL_105;
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
LABEL_111:
  uint64_t v24 = 0;
  ++*(_DWORD *)(a1 + 104);
LABEL_106:
  if (v152) {
    sub_1000DB0A0(v152);
  }
  return v24;
}

void sub_1011D71C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  if (v27) {
    sub_1000DB0A0(v27);
  }
  if (a17) {
    sub_1000DB0A0(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011D7298(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  long long v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 64) = v9;
  if (a1 != a2) {
    sub_1010003E4((char *)(a1 + 96), *(char **)(a2 + 96), *(void *)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
  }
  long long v10 = *(_OWORD *)(a2 + 120);
  long long v11 = *(_OWORD *)(a2 + 136);
  long long v12 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  long long v13 = *(_OWORD *)(a2 + 184);
  long long v14 = *(_OWORD *)(a2 + 200);
  long long v15 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v15;
  *(_OWORD *)(a1 + 200) = v14;
  *(_OWORD *)(a1 + 184) = v13;
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  memcpy((void *)(a1 + 272), (const void *)(a2 + 272), 0x118uLL);
  long long v16 = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 568) = v16;
  long long v17 = *(_OWORD *)(a2 + 584);
  long long v18 = *(_OWORD *)(a2 + 600);
  long long v19 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 627) = *(_OWORD *)(a2 + 627);
  *(_OWORD *)(a1 + 600) = v18;
  *(_OWORD *)(a1 + 616) = v19;
  *(_OWORD *)(a1 + 584) = v17;
  uint64_t v20 = *(void *)(a2 + 648);
  uint64_t v21 = *(void *)(a2 + 656);
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 648) = v20;
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 656);
  *(void *)(a1 + 656) = v21;
  if (v22) {
    sub_1000DB0A0(v22);
  }
  *(unsigned char *)(a1 + 664) = *(unsigned char *)(a2 + 664);
  uint64_t v23 = *(void *)(a2 + 672);
  uint64_t v24 = *(void *)(a2 + 680);
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 672) = v23;
  unint64_t v25 = *(std::__shared_weak_count **)(a1 + 680);
  *(void *)(a1 + 680) = v24;
  if (v25) {
    sub_1000DB0A0(v25);
  }
  long long v26 = *(_OWORD *)(a2 + 688);
  long long v27 = *(_OWORD *)(a2 + 704);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(_OWORD *)(a1 + 688) = v26;
  *(_OWORD *)(a1 + 704) = v27;
  long long v28 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 737) = *(_OWORD *)(a2 + 737);
  *(_OWORD *)(a1 + 728) = v28;
  if (a1 != a2) {
    sub_1010003E4((char *)(a1 + 760), *(char **)(a2 + 760), *(void *)(a2 + 768), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 768) - *(void *)(a2 + 760)) >> 3));
  }
  long long v29 = *(_OWORD *)(a2 + 784);
  long long v30 = *(_OWORD *)(a2 + 800);
  long long v31 = *(_OWORD *)(a2 + 816);
  *(void *)(a1 + 830) = *(void *)(a2 + 830);
  *(_OWORD *)(a1 + 800) = v30;
  *(_OWORD *)(a1 + 816) = v31;
  *(_OWORD *)(a1 + 784) = v29;
  return a1;
}

BOOL sub_1011D74A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 4048);
  sub_10082B7E4((uint64_t *)(a1 + 4048));
  if (!*(unsigned char *)(a1 + 114)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v10 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    long long v10 = 0;
  }
  uint64_t v9 = v5;
  BOOL v7 = sub_1011DAFF0(a2, &v9, (double *)(a1 + 608), (void *)(a1 + 48), v4, 1, 200.0);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v7;
}

void sub_1011D7560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011D7584(uint64_t a1)
{
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864) || !*(unsigned char *)(a1 + 114)) {
    return 0;
  }
  if ((sub_1011DCAF0(a1) & 1) == 0)
  {
    sub_10082B744((uint64_t *)(a1 + 4072));
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 4072);
  uint64_t v40 = *(void *)(a1 + 4080);
  if (v2 == v40) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(v2 + 184);
  double v4 = vabdd_f64(*(double *)(v2 + 184), *(double *)(a1 + 1152));
  BOOL v39 = v4 <= 0.01;
  if (v4 > 0.01)
  {
LABEL_41:
    sub_10082B744((uint64_t *)(a1 + 4072));
    return v39;
  }
  else
  {
    while (1)
    {
      uint64_t v61 = 0;
      int v62 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      __int16 v60 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      memset(v66, 0, 27);
      memset(&v66[32], 0, 48);
      *(_OWORD *)&v57[14] = 0u;
      long long v56 = 0u;
      *(_OWORD *)double v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      unint64_t v68 = 0xBFF0000000000000;
      uint64_t v67 = 0;
      long long v47 = *(_OWORD *)(v2 + 80);
      uint64_t v5 = *(void *)(v2 + 104);
      uint64_t v6 = *(void *)(v2 + 112);
      uint64_t v7 = *(void *)(v2 + 120);
      uint64_t v48 = *(void *)(v2 + 96);
      uint64_t v49 = v6;
      *((void *)&v56 + 1) = v7;
      *(_OWORD *)double v57 = *(_OWORD *)(v2 + 160);
      *(void *)&v57[16] = *(void *)(v2 + 176);
      uint64_t v8 = *(void *)(v2 + 144);
      *((void *)&v50 + 1) = *(void *)(v2 + 136);
      *(void *)&long long v51 = v5;
      uint64_t v41 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      unint64_t v46 = 0xBFF0000000000000;
      *(void *)&long long v56 = v8;
      v57[28] = *(unsigned char *)(v2 + 152);
      uint64_t v43 = *v3;
      int8x16_t v42 = vextq_s8(*(int8x16_t *)(v2 + 192), *(int8x16_t *)(v2 + 192), 8uLL);
      uint64_t v9 = *(void *)(a1 + 864);
      uint64_t v10 = *(void *)(a1 + 872);
      while (v9 != v10)
      {
        memset(buf, 0, sizeof(buf));
        *(void *)&long long v72 = 0;
        *((void *)&v72 + 1) = 0x3FF0000000000000;
        long long v73 = 0u;
        long long v74 = 0u;
        LODWORD(v75) = 0;
        sub_1011BEBD8(a1, v2, v9, (double *)&v41, (uint64_t)buf);
        LODWORD(v75) = 2;
        *((void *)&v72 + 1) = *(void *)(v2 + 128);
        unint64_t v11 = *(void *)(v9 + 104);
        unint64_t v12 = *(void *)(v9 + 96);
        if (v12 >= v11)
        {
          uint64_t v17 = *(void *)(v9 + 88);
          unint64_t v18 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - v17) >> 3);
          unint64_t v19 = v18 + 1;
          if (v18 + 1 > 0x38E38E38E38E38ELL) {
            sub_1001D7FD4();
          }
          unint64_t v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 - v17) >> 3);
          if (2 * v20 > v19) {
            unint64_t v19 = 2 * v20;
          }
          if (v20 >= 0x1C71C71C71C71C7) {
            unint64_t v21 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            uint64_t v22 = (char *)sub_10021D4B8(v9 + 104, v21);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[72 * v18];
          *(_OWORD *)uint64_t v23 = *(_OWORD *)buf;
          long long v24 = v72;
          long long v25 = v73;
          long long v26 = v74;
          *((void *)v23 + 8) = v75;
          *((_OWORD *)v23 + 2) = v25;
          *((_OWORD *)v23 + 3) = v26;
          *((_OWORD *)v23 + 1) = v24;
          long long v28 = *(char **)(v9 + 88);
          long long v27 = *(char **)(v9 + 96);
          long long v29 = v23;
          if (v27 != v28)
          {
            do
            {
              *(_OWORD *)(v29 - 72) = *(_OWORD *)(v27 - 72);
              long long v30 = *(_OWORD *)(v27 - 56);
              long long v31 = *(_OWORD *)(v27 - 40);
              long long v32 = *(_OWORD *)(v27 - 24);
              *((_DWORD *)v29 - 2) = *((_DWORD *)v27 - 2);
              *(_OWORD *)(v29 - 24) = v32;
              *(_OWORD *)(v29 - 40) = v31;
              *(_OWORD *)(v29 - 56) = v30;
              v29 -= 72;
              v27 -= 72;
            }
            while (v27 != v28);
            long long v27 = *(char **)(v9 + 88);
          }
          long long v16 = v23 + 72;
          *(void *)(v9 + 88) = v29;
          *(void *)(v9 + 96) = v23 + 72;
          *(void *)(v9 + 104) = &v22[72 * v21];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v12 = *(_OWORD *)buf;
          long long v13 = v72;
          long long v14 = v73;
          long long v15 = v74;
          *(void *)(v12 + 64) = v75;
          *(_OWORD *)(v12 + 32) = v14;
          *(_OWORD *)(v12 + 48) = v15;
          *(_OWORD *)(v12 + 16) = v13;
          long long v16 = (char *)(v12 + 72);
        }
        *(void *)(v9 + 96) = v16;
        sub_1011DECAC((double *)v9);
        v9 += 112;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      long long v33 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v34 = *(void *)(a1 + 1136);
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,used route-hint", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v36 = *(void *)(a1 + 1136);
        int v69 = 134349056;
        uint64_t v70 = v36;
        double v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::integrateRouteHint()", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
      if (SHIBYTE(v53) < 0) {
        operator delete(*((void **)&v52 + 1));
      }
      if (v2 + 264 == v40) {
        return 1;
      }
      uint64_t v3 = (uint64_t *)(v2 + 448);
      double v35 = vabdd_f64(*(double *)(v2 + 448), *(double *)(a1 + 1152));
      v2 += 264;
      if (v35 > 0.01) {
        goto LABEL_41;
      }
    }
  }
}

void sub_1011D7AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011D7B08(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 872);
  uint64_t v2 = *(void *)(a1 + 864);
  if (v1 == (void *)v2) {
    return 1;
  }
  double v4 = 0.0;
  uint64_t v5 = *(void *)(a1 + 864);
  do
  {
    double v4 = v4 + *(double *)(v5 + 56);
    v5 += 112;
  }
  while ((void *)v5 != v1);
  if (v4 > 0.0)
  {
    uint64_t v6 = (void **)(a1 + 936);
    uint64_t v7 = *(float **)(a1 + 936);
    *(void *)(a1 + 944) = v7;
    uint64_t v8 = (void *)(a1 + 952);
    double v9 = 0.0;
    do
    {
      uint64_t v10 = v2;
      double v11 = *(double *)(v2 + 56) / v4;
      *(double *)(v2 + 64) = v11;
      double v9 = v9 + v11;
      float v12 = v9;
      if ((unint64_t)v7 >= *v8)
      {
        long long v14 = (float *)*v6;
        uint64_t v15 = ((char *)v7 - (unsigned char *)*v6) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v17 = *v8 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          unint64_t v19 = (char *)sub_10017EA34(a1 + 952, v18);
          uint64_t v7 = *(float **)(a1 + 944);
          long long v14 = *(float **)(a1 + 936);
        }
        else
        {
          unint64_t v19 = 0;
        }
        unint64_t v20 = (float *)&v19[4 * v15];
        *unint64_t v20 = v12;
        long long v13 = v20 + 1;
        while (v7 != v14)
        {
          int v21 = *((_DWORD *)v7-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(void *)(a1 + 936) = v20;
        *(void *)(a1 + 944) = v13;
        *(void *)(a1 + 952) = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v7 = v12;
        long long v13 = v7 + 1;
      }
      *(void *)(a1 + 944) = v13;
      uint64_t v2 = v10 + 112;
      uint64_t v7 = v13;
    }
    while (v10 + 112 != *(void *)(a1 + 872));
    uint64_t v22 = *(void *)(a1 + 864);
    if (v2 != v22)
    {
      uint64_t v23 = v22 - 112;
      double v24 = 0.0;
      do
      {
        double v24 = v24 + *(double *)(v23 + 176) * *(double *)(v23 + 176);
        v23 += 112;
      }
      while (v23 != v10);
      if (v24 > 0.0) {
        *(double *)(a1 + 1608) = 1.0 / v24;
      }
    }
    return 1;
  }
  do
  {
    v1 -= 14;
    sub_10082B8C8(a1 + 880, v1);
  }
  while (v1 != (void *)v2);
  uint64_t result = 0;
  *(void *)(a1 + 872) = v2;
  return result;
}

void sub_1011D7CE0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)(v2 + 8) = (*a1)[1];
  *(void *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  operator delete(v1);
}

uint64_t sub_1011D7D08(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 264)) {
    BOOL v2 = *(unsigned char *)(a2 + 265) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  double v6 = *(double *)(a2 + 80);
  if (v6 < 400.0 && v6 > 0.0)
  {
    if (*(unsigned char *)(a1 + 1649) && !*(unsigned char *)(a1 + 1650))
    {
      double v7 = *(double *)(a1 + 4024);
      double v8 = vabdd_f64(*(double *)(a2 + 8), v7);
      if (v7 < 0.0 || v8 > 2.0) {
        return 0;
      }
    }
    double v10 = sub_1000F1648((double *)(a1 + 608), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 152), *(double *)(a2 + 160), 0.0);
    double v11 = v10 / *(double *)(a2 + 80);
    if (v11 > 1.5)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        float v12 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = *(void *)(a2 + 8);
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = *(void *)(a2 + 64);
          uint64_t v16 = *(void *)(a2 + 104);
          uint64_t v17 = *(void *)(a2 + 152);
          uint64_t v18 = *(void *)(a2 + 160);
          uint64_t v19 = *(void *)(a2 + 168);
          uint64_t v20 = *(void *)(a2 + 72);
          uint64_t v21 = *(void *)(a2 + 80);
          *(_DWORD *)long long buf = 134351617;
          uint64_t v25 = v13;
          __int16 v26 = 2049;
          uint64_t v27 = v14;
          __int16 v28 = 2049;
          uint64_t v29 = v15;
          __int16 v30 = 2050;
          uint64_t v31 = v20;
          __int16 v32 = 2050;
          uint64_t v33 = v16;
          __int16 v34 = 2049;
          uint64_t v35 = v17;
          __int16 v36 = 2049;
          uint64_t v37 = v18;
          __int16 v38 = 2050;
          uint64_t v39 = v19;
          __int16 v40 = 2050;
          double v41 = v10;
          __int16 v42 = 2050;
          uint64_t v43 = v21;
          __int16 v44 = 2050;
          double v45 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", buf, 0x70u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::modifyHorizontalUncertainty(CLMapCrumb &)", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
      }
      double v22 = v10 * 1.05;
      if (v10 * 1.05 > 400.0) {
        double v22 = 400.0;
      }
      *(double *)(a2 + 80) = v22;
      *(void *)(a1 + 4024) = *(void *)(a2 + 8);
    }
    return 1;
  }
  return result;
}

BOOL sub_1011D806C(uint64_t a1, double *a2, double a3, double a4, double a5)
{
  double v9 = sub_1011BBD04(*(double *)(a1 + 1432) - a5);
  if (v9 <= 8.0)
  {
    if (v9 > *a2) {
      *a2 = v9;
    }
    double v15 = 0.0;
    v16[0] = 0.0;
    sub_101172040((double *)(a1 + 608), v16, &v15, *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200), *(double *)(a1 + 1432), a3, a4);
    if (fabs(v16[0]) <= 5.0)
    {
      if (fabs(v15) <= 45.0) {
        return 1;
      }
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v13 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,along track too large, not suitable DOT assistance", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_30:
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::runDirectionOfTravelHelper(double, double, double, double &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
        return 0;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      float v12 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLMM,across track too large, not suitable DOT assistance", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_30;
      }
    }
    dispatch_once(&qword_102419430, &stru_102317A08);
    goto LABEL_30;
  }
  if (!*(unsigned char *)(a1 + 96)) {
    return 0;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  double v10 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,no DOT, course is not aligned", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    LOWORD(v16[0]) = 0;
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_1011D8454(uint64_t a1, double *a2)
{
  bzero(a2, 0x68uLL);
  double v4 = *(double *)(a1 + 3728);
  if (v4 > 0.0 && vabdd_f64(*(double *)(a1 + 1136), v4 + -1.0) < 0.9)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,feedback interval check", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_164;
    }
LABEL_219:
    dispatch_once(&qword_102419430, &stru_102317A08);
LABEL_164:
    *(_WORD *)long long v117 = 0;
    float v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v12);
LABEL_165:
    if (v12 != buf) {
      free(v12);
    }
    return 0;
  }
  if (!*(_DWORD *)(a1 + 1248) && sub_10073C750() && (sub_10073DD54() & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,frc,0", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_164;
    }
    goto LABEL_219;
  }
  if (!*(unsigned char *)(a1 + 2232)
    || !*(unsigned char *)(a1 + 1392)
    || *(unsigned char *)(a1 + 2233)
    || *(unsigned char *)(a1 + 1393)
    || *(double *)(a1 + 1136) - *(double *)(a1 + 1976) > 1.5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 2688) && *(double *)(a1 + 2696) < 36.0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to prior intersection", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_164;
    }
    goto LABEL_219;
  }
  if (sub_1011BBD04(*(double *)(a1 + 1296) - *(double *)(a1 + 1432)) > 1.0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,course not aligned to full snap", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_164;
    }
    goto LABEL_219;
  }
  double v116 = -1.0;
  if (!sub_1011D806C(a1, &v116, *(double *)(a1 + 2256), *(double *)(a1 + 2264), *(double *)(a1 + 2272))) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 1490) || *(_DWORD *)(a1 + 1528) != 1)
  {
    *(void *)long long v117 = 0x4044000000000000;
    LOBYTE(v107[0]) = 1;
    *(void *)long long buf = 0x4046800000000000;
    if ((sub_1011D1E34(a1, (double *)v117, (double *)buf, v107) & 1) == 0)
    {
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v19 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,assessParallelRoadsWithinDist returned false,unexpected", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_58;
      }
      goto LABEL_239;
    }
    if (LOBYTE(v107[0]))
    {
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      double v11 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to a road with similar course", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_58;
      }
LABEL_239:
      dispatch_once(&qword_102419430, &stru_102317A08);
LABEL_58:
      LOWORD(v112[0]) = 0;
      float v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v12);
      goto LABEL_165;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v15 = 70.0;
  double v16 = sub_1011C7D80(a1, 70.0);
  double v17 = *(double *)(a1 + 1224);
  if (v16 >= 0.0)
  {
    if (v16 - v17 >= 18.0)
    {
      double v15 = v16 + -1.0;
      if (v17 >= 5.0 || !*(unsigned char *)(a1 + 3168)) {
        goto LABEL_110;
      }
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_108;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v21 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too slow when nearing intersection", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_108;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_99:
        *(_WORD *)long long v117 = 0;
        double v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
        goto LABEL_108;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_108;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v20 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to next intersection", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_108;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_99;
      }
    }
    dispatch_once(&qword_102419430, &stru_102317A08);
    goto LABEL_99;
  }
  if (v17 < 5.0)
  {
    sub_100FFFA78((uint64_t)v117, a1 + 1016);
    if (((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, double))(*(void *)v14 + 88))(v14, v117, a1 + 912, *(double *)(a1 + 3176)) & 1) == 0)
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_107;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v23 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_107;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_217;
      }
      goto LABEL_243;
    }
    if (sub_1011BBD04(*(float *)&v121 - *(double *)(a1 + 1232)) > 8.0)
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_107;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v18 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close large road direction change", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_107;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_217:
        LOWORD(v112[0]) = 0;
        uint64_t v79 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v79);
        if (v79 != buf) {
          free(v79);
        }
LABEL_107:
        sub_100FFFC10(v117);
LABEL_108:
        uint64_t v8 = 0;
        goto LABEL_132;
      }
LABEL_243:
      dispatch_once(&qword_102419430, &stru_102317A08);
      goto LABEL_217;
    }
    sub_100FFFC10(v117);
  }
LABEL_110:
  sub_100FFFA78((uint64_t)v112, a1 + 1016);
  if (((*(uint64_t (**)(uint64_t, void *, uint64_t, double))(*(void *)v14 + 88))(v14, v112, a1 + 912, -15.0) & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_130;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v27 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_130;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_214;
    }
    goto LABEL_241;
  }
  if (sub_1011D806C(a1, &v116, v114, v115, v113))
  {
    sub_100134750(__p, "Start");
    uint64_t v99 = a1 + 912;
    BOOL v24 = sub_1013E7730(a1 + 1128, (double *)(a1 + 608), (uint64_t *)__p, a2 + 1, a2 + 2, v114, v115);
    if (v111 < 0) {
      operator delete(__p[0]);
    }
    if (v24)
    {
      double v25 = sub_1000F1648((double *)(a1 + 608), *(double *)(a1 + 1048), *(double *)(a1 + 1056), v114, v115, *(double *)(a1 + 1200));
      sub_100FFFA78((uint64_t)v107, a1 + 1016);
      if (v15 - *(double *)(a1 + 1224) < 18.0)
      {
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_173;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        __int16 v26 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,predicted point is too close to intersection", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_173;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_221;
        }
LABEL_246:
        dispatch_once(&qword_102419430, &stru_102317A08);
LABEL_221:
        *(_WORD *)long long v117 = 0;
        uint64_t v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v67);
LABEL_222:
        if (v67 != buf) {
          free(v67);
        }
        goto LABEL_173;
      }
      if (((*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v14 + 88))(v14, v107, v99) & 1) == 0)
      {
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_173;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        long long v65 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_173;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_221;
        }
        goto LABEL_246;
      }
      if (!sub_1011D806C(a1, &v116, v109[0], v109[1], v108))
      {
LABEL_173:
        uint64_t v8 = 0;
LABEL_174:
        sub_100FFFC10(v107);
        goto LABEL_131;
      }
      *(_OWORD *)(a2 + 3) = *(_OWORD *)v109;
      double v29 = sub_1011BD0C4(a1, *(_DWORD *)(*(void *)(a1 + 1016) + 20), *(unsigned __int8 *)(*(void *)(a1 + 1016) + 16));
      a2[8] = v29;
      if (!*(unsigned char *)(*(void *)(a1 + 1016) + 16))
      {
        int v68 = *(_DWORD *)(a1 + 760);
        if (v68)
        {
          double v69 = v29 * 0.5;
          a2[8] = v69;
          double v70 = v69 * 0.5;
          double v71 = -(v69 * 0.5);
          if (v68 == 1) {
            double v72 = v71;
          }
          else {
            double v72 = v70;
          }
          *(void *)long long v117 = 0;
          v102[0] = 0.0;
          if (sub_10005B780((double *)(a1 + 608), (double *)v117, v102, v109[0], v109[1], *(double *)(a1 + 1200), v108, v72))
          {
            double v73 = v102[0];
            a2[3] = *(double *)v117;
            a2[4] = v73;
            double v29 = a2[8];
          }
          else
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            uint64_t v75 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "CLMM,Unexpected calculateNewPosUsingAcrossTrack fail", buf, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              __int16 v106 = 0;
              uint64_t v80 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v80);
              if (v80 != buf) {
                free(v80);
              }
            }
            double v29 = a2[8] + a2[8];
            a2[8] = v29;
          }
        }
      }
      double v30 = fmax(v29, 15.0);
      if (v15 <= v30 + 1.0)
      {
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_173;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        double v66 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,current particle within the stopDistanceFromIntersection", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_173;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        *(_WORD *)long long v117 = 0;
        uint64_t v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v67);
        goto LABEL_222;
      }
      sub_100FFFA78((uint64_t)v102, a1 + 1016);
      if (v15 - v30 >= (*(double *)(a1 + 1224) + 15.0) * 1.5) {
        double v31 = (*(double *)(a1 + 1224) + 15.0) * 1.5;
      }
      else {
        double v31 = v15 - v30;
      }
      if ((*(uint64_t (**)(uint64_t, double *, uint64_t, double))(*(void *)v14 + 88))(v14, v102, v99, v31))
      {
        if (!sub_1011D806C(a1, &v116, v104, v105, v103)) {
          goto LABEL_196;
        }
        double v32 = fmin(v25, 15.0);
        a2[5] = v32 + v31;
        double v33 = v116;
        if (v116 < 3.0) {
          double v33 = 3.0;
        }
        a2[7] = v33;
        sub_100134750(v100, "Predicted");
        BOOL v34 = sub_1013E7730(a1 + 1128, (double *)(a1 + 608), (uint64_t *)v100, a2 + 3, a2 + 4, a2[3], a2[4]);
        if (v101 < 0) {
          operator delete(v100[0]);
        }
        if (v34)
        {
          a2[6] = v108;
          *a2 = *(double *)(a1 + 1136) + 1.0;
          __asm { FMOV            V1.2D, #1.0 }
          float64x2_t v40 = vaddq_f64(*(float64x2_t *)(a1 + 1144), _Q1);
          *(float64x2_t *)(a2 + 11) = v40;
          LODWORD(v40.f64[0]) = *(_DWORD *)(v107[0] + 16);
          int16x8_t v41 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v40.f64[0]);
          *(int16x4_t *)v41.i8 = vuzp2_s16((int16x4_t)vext_s8(*(int8x8_t *)v41.i8, *(int8x8_t *)v41.i8, 2uLL), *(int16x4_t *)v41.i8);
          *((_DWORD *)a2 + 18) = vmovn_s16(v41).u32[0];
          *((unsigned char *)a2 + 76) = *(_DWORD *)(a1 + 1248) == 0;
          uint64_t v8 = 1;
          *((_DWORD *)a2 + 20) = 1;
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            __int16 v42 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v43 = *((void *)a2 + 6);
              uint64_t v44 = *((void *)a2 + 7);
              uint64_t v45 = *((void *)a2 + 8);
              double v46 = *a2;
              uint64_t v47 = *((void *)a2 + 1);
              uint64_t v49 = *((void *)a2 + 2);
              uint64_t v48 = *((void *)a2 + 3);
              uint64_t v50 = *((void *)a2 + 4);
              uint64_t v51 = *((void *)a2 + 5);
              uint64_t v52 = *(void *)(a1 + 1224);
              int v53 = *((unsigned __int8 *)a2 + 73);
              int v54 = *((unsigned __int8 *)a2 + 74);
              int v55 = *((unsigned __int8 *)a2 + 72);
              int v56 = *((unsigned __int8 *)a2 + 75);
              int v57 = *((unsigned __int8 *)a2 + 76);
              uint64_t v58 = *((void *)a2 + 12);
              int v59 = *((_DWORD *)a2 + 20);
              *(_DWORD *)long long buf = 134353665;
              *(double *)&uint8_t buf[4] = v46;
              __int16 v155 = 2049;
              uint64_t v156 = v48;
              __int16 v157 = 2049;
              uint64_t v158 = v50;
              __int16 v159 = 2050;
              uint64_t v160 = v43;
              __int16 v161 = 2050;
              uint64_t v162 = v44;
              __int16 v163 = 2050;
              uint64_t v164 = v45;
              __int16 v165 = 2049;
              uint64_t v166 = v47;
              __int16 v167 = 2049;
              uint64_t v168 = v49;
              __int16 v169 = 2050;
              uint64_t v170 = v51;
              __int16 v171 = 2050;
              uint64_t v172 = v52;
              __int16 v173 = 1026;
              int v174 = v53;
              __int16 v175 = 1026;
              int v176 = v54;
              __int16 v177 = 1026;
              int v178 = v55;
              __int16 v179 = 1026;
              int v180 = v56;
              __int16 v181 = 2050;
              double v182 = v30;
              __int16 v183 = 1026;
              int v184 = v57;
              __int16 v185 = 2050;
              uint64_t v186 = v58;
              __int16 v187 = 2050;
              double v188 = v32;
              __int16 v189 = 1026;
              int v190 = v59;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMM,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContinuousTime,%{public}.3lf,lookBehindDistance,%{public}.2lf,type,%{public}d", buf, 0xA8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              uint64_t v81 = *((void *)a2 + 6);
              uint64_t v82 = *((void *)a2 + 7);
              uint64_t v83 = *((void *)a2 + 8);
              double v84 = *a2;
              uint64_t v85 = *((void *)a2 + 1);
              uint64_t v87 = *((void *)a2 + 2);
              uint64_t v86 = *((void *)a2 + 3);
              uint64_t v88 = *((void *)a2 + 4);
              uint64_t v89 = *((void *)a2 + 5);
              uint64_t v90 = *(void *)(a1 + 1224);
              int v91 = *((unsigned __int8 *)a2 + 73);
              int v92 = *((unsigned __int8 *)a2 + 74);
              int v93 = *((unsigned __int8 *)a2 + 72);
              int v94 = *((unsigned __int8 *)a2 + 75);
              int v95 = *((unsigned __int8 *)a2 + 76);
              uint64_t v96 = *((void *)a2 + 12);
              int v97 = *((_DWORD *)a2 + 20);
              *(_DWORD *)long long v117 = 134353665;
              *(double *)&v117[4] = v84;
              __int16 v118 = 2049;
              uint64_t v119 = v86;
              __int16 v120 = 2049;
              uint64_t v121 = v88;
              __int16 v122 = 2050;
              uint64_t v123 = v81;
              __int16 v124 = 2050;
              uint64_t v125 = v82;
              __int16 v126 = 2050;
              uint64_t v127 = v83;
              __int16 v128 = 2049;
              uint64_t v129 = v85;
              __int16 v130 = 2049;
              uint64_t v131 = v87;
              __int16 v132 = 2050;
              uint64_t v133 = v89;
              __int16 v134 = 2050;
              uint64_t v135 = v90;
              __int16 v136 = 1026;
              int v137 = v91;
              __int16 v138 = 1026;
              int v139 = v92;
              __int16 v140 = 1026;
              int v141 = v93;
              __int16 v142 = 1026;
              int v143 = v94;
              __int16 v144 = 2050;
              double v145 = v30;
              __int16 v146 = 1026;
              int v147 = v95;
              __int16 v148 = 2050;
              uint64_t v149 = v96;
              __int16 v150 = 2050;
              double v151 = v32;
              __int16 v152 = 1026;
              int v153 = v97;
              long long v98 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v98);
              if (v98 != buf) {
                free(v98);
              }
            }
          }
          *(unsigned char *)(a1 + 3720) = 1;
          long long v60 = *(_OWORD *)a2;
          long long v61 = *((_OWORD *)a2 + 2);
          *(_OWORD *)(a1 + 3744) = *((_OWORD *)a2 + 1);
          *(_OWORD *)(a1 + 3760) = v61;
          *(_OWORD *)(a1 + 3728) = v60;
          long long v62 = *((_OWORD *)a2 + 3);
          long long v63 = *((_OWORD *)a2 + 4);
          long long v64 = *((_OWORD *)a2 + 5);
          *(double *)(a1 + 3824) = a2[12];
          *(_OWORD *)(a1 + 3792) = v63;
          *(_OWORD *)(a1 + 3808) = v64;
          *(_OWORD *)(a1 + 3776) = v62;
          goto LABEL_197;
        }
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_196;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        double v76 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates predicted returned false", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2))
        {
LABEL_196:
          uint64_t v8 = 0;
LABEL_197:
          sub_100FFFC10(v102);
          goto LABEL_174;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        *(_WORD *)long long v117 = 0;
        uint64_t v77 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v77);
      }
      else
      {
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_196;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        long long v74 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_196;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        *(_WORD *)long long v117 = 0;
        uint64_t v77 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v77);
      }
      if (v77 != buf) {
        free(v77);
      }
      goto LABEL_196;
    }
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      __int16 v28 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_214:
          *(_WORD *)long long v117 = 0;
          double v78 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "%s\n", v78);
          if (v78 != buf) {
            free(v78);
          }
          goto LABEL_130;
        }
LABEL_241:
        dispatch_once(&qword_102419430, &stru_102317A08);
        goto LABEL_214;
      }
    }
  }
LABEL_130:
  uint64_t v8 = 0;
LABEL_131:
  sub_100FFFC10(v112);
LABEL_132:
  if (v13) {
    sub_1000DB0A0(v13);
  }
  return v8;
}

void sub_1011DA300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  sub_100FFFC10(&a15);
  sub_100FFFC10(&a30);
  sub_100FFFC10(&a47);
  if (v47) {
    sub_1000DB0A0(v47);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011DA3DC(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 3720) || *(double *)(a1 + 1224) >= 22.222 || *(int *)(a1 + 1248) < 2) {
    return 0;
  }
  uint64_t v24 = 0x4056800000000000;
  double v4 = *(double *)(a1 + 1208);
  uint64_t v5 = 0x4049000000000000;
  if (v4 <= 10.0) {
    goto LABEL_7;
  }
  if (v4 < 50.0)
  {
    uint64_t v5 = 0x4052C00000000000;
LABEL_7:
    uint64_t v24 = v5;
  }
  char v23 = 1;
  *(void *)long long buf = 0x4024000000000000;
  if (!sub_1011D1E34(a1, (double *)&v24, (double *)buf, &v23) || v23) {
    return 0;
  }
  *a2 = *(void *)(a1 + 3728);
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a1 + 3752);
  a2[3] = 0x4059000000000000;
  a2[4] = *(void *)(a1 + 3792);
  a2[5] = *(void *)(a1 + 3776);
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v9 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      uint64_t v12 = a2[5];
      uint64_t v13 = *(void *)(a1 + 1432);
      *(_DWORD *)long long buf = 134350593;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v40 = 2049;
      uint64_t v41 = v8;
      __int16 v42 = 2049;
      uint64_t v43 = v9;
      __int16 v44 = 2050;
      uint64_t v45 = v10;
      __int16 v46 = 2050;
      uint64_t v47 = v11;
      __int16 v48 = 2050;
      uint64_t v49 = v12;
      __int16 v50 = 2050;
      uint64_t v51 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,MMPA,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,a,%{public}.2lf,b,%{public}.2lf,az,%{public}.3lf,course,%{public}.3lf", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v15 = *a2;
      uint64_t v16 = a2[1];
      uint64_t v17 = a2[2];
      uint64_t v18 = a2[3];
      uint64_t v19 = a2[4];
      uint64_t v20 = a2[5];
      uint64_t v21 = *(void *)(a1 + 1432);
      int v25 = 134350593;
      uint64_t v26 = v15;
      __int16 v27 = 2049;
      uint64_t v28 = v16;
      __int16 v29 = 2049;
      uint64_t v30 = v17;
      __int16 v31 = 2050;
      uint64_t v32 = v18;
      __int16 v33 = 2050;
      uint64_t v34 = v19;
      __int16 v35 = 2050;
      uint64_t v36 = v20;
      __int16 v37 = 2050;
      uint64_t v38 = v21;
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getPosAssistanceForGps(CLGpsAssistant_Type::MapMatchedPositionAssistance &)", "%s\n", v22);
      if (v22 != buf) {
        free(v22);
      }
    }
  }
  return 1;
}

uint64_t sub_1011DA6F0(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 8);
  if (v2 < 0.0 || *(double *)a2 < 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    double v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,TBA,Invalid time", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_59;
    }
    goto LABEL_69;
  }
  if (vabdd_f64(*(double *)(a1 + 1136), v2) < 5.0)
  {
    if (*(unsigned char *)(a1 + 1392))
    {
      if (!*(unsigned char *)(a1 + 1393))
      {
        int v34 = *(unsigned __int8 *)(a1 + 1489);
        *(unsigned char *)(a2 + 43) = v34;
        int v35 = *(unsigned __int8 *)(a1 + 1490);
        *(unsigned char *)(a2 + 42) = v35;
        if (v35 | v34)
        {
          *(unsigned char *)(a2 + 40) = v35;
          *(unsigned char *)(a2 + 41) = v34;
          return 1;
        }
      }
    }
  }
  if (!sub_1000EF668(*(double *)(a2 + 16), *(double *)(a2 + 24)))
  {
    uint64_t v74 = (uint64_t)&v74;
    uint64_t v75 = &v74;
    uint64_t v76 = 0;
    double v8 = *(double *)(a1 + 3160);
    double v9 = *(double *)a2;
    if (v8 > 0.0 && vabdd_f64(v8, v9) < *(double *)(a2 + 32) / 38.0)
    {
      uint64_t v7 = 0;
LABEL_54:
      sub_10017FF2C(&v74);
      return v7;
    }
    *(double *)(a1 + 3160) = v9;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void))(*(void *)v11 + 32))(v11, 0);
    v50[0] = 0;
    v50[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v51 = _Q0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    unint64_t v54 = 0xBFF0000000000000;
    uint64_t v66 = 0;
    int v67 = 0;
    memset(&v64[32], 0, 32);
    __int16 v65 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v71, 0, 27);
    memset(&v71[32], 0, 48);
    memset(v64, 0, 30);
    long long v63 = 0u;
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v58 = 0u;
    long long v57 = 0u;
    long long v56 = 0u;
    uint64_t v72 = 0;
    unint64_t v73 = 0xBFF0000000000000;
    long long v55 = *(_OWORD *)(a2 + 16);
    if ((*(uint64_t (**)(uint64_t, uint64_t *, void *, uint64_t, double))(*(void *)v11 + 64))(v11, &v74, v50, 1, *(double *)(a2 + 32)))
    {
      if (v76)
      {
        uint64_t v17 = v75;
        if (v75 != &v74)
        {
          char v18 = 0;
          do
          {
            while (1)
            {
              uint64_t v19 = v17[2];
              if (!v19) {
                break;
              }
              if (*(unsigned char *)(v19 + 18))
              {
                char v18 = 1;
                *(unsigned char *)(a2 + 40) = 1;
              }
              if (!*(unsigned char *)(v19 + 19)) {
                break;
              }
              char v18 = 1;
              *(unsigned char *)(a2 + 41) = 1;
              uint64_t v17 = (uint64_t *)v17[1];
              if (v17 == &v74) {
                goto LABEL_37;
              }
            }
            uint64_t v17 = (uint64_t *)v17[1];
          }
          while (v17 != &v74);
          if ((v18 & 1) == 0) {
            goto LABEL_49;
          }
LABEL_37:
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v20 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = *(void *)(a2 + 16);
            uint64_t v22 = *(void *)(a2 + 24);
            uint64_t v23 = *(void *)(a1 + 1208);
            uint64_t v24 = *(void *)(a2 + 32);
            int v25 = *(unsigned __int8 *)(a2 + 40);
            int v26 = *(unsigned __int8 *)(a2 + 41);
            int v27 = *(unsigned __int8 *)(a2 + 42);
            int v28 = *(unsigned __int8 *)(a2 + 43);
            *(_DWORD *)long long buf = 134285313;
            uint64_t v94 = v21;
            __int16 v95 = 2049;
            uint64_t v96 = v22;
            __int16 v97 = 2050;
            uint64_t v98 = v23;
            __int16 v99 = 2050;
            uint64_t v100 = v24;
            __int16 v101 = 1026;
            int v102 = v25;
            __int16 v103 = 1026;
            int v104 = v26;
            __int16 v105 = 1026;
            int v106 = v27;
            __int16 v107 = 1026;
            int v108 = v28;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMM, TBA,lat,%{private}.8lf,lon,%{private}.8lf,unc,%{public}.2lf,searchRadius,%{public}.1lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d", buf, 0x42u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            uint64_t v41 = *(void *)(a2 + 16);
            uint64_t v42 = *(void *)(a2 + 24);
            uint64_t v43 = *(void *)(a1 + 1208);
            uint64_t v44 = *(void *)(a2 + 32);
            int v45 = *(unsigned __int8 *)(a2 + 40);
            int v46 = *(unsigned __int8 *)(a2 + 41);
            int v47 = *(unsigned __int8 *)(a2 + 42);
            int v48 = *(unsigned __int8 *)(a2 + 43);
            int v77 = 134285313;
            uint64_t v78 = v41;
            __int16 v79 = 2049;
            uint64_t v80 = v42;
            __int16 v81 = 2050;
            uint64_t v82 = v43;
            __int16 v83 = 2050;
            uint64_t v84 = v44;
            __int16 v85 = 1026;
            int v86 = v45;
            __int16 v87 = 1026;
            int v88 = v46;
            __int16 v89 = 1026;
            int v90 = v47;
            __int16 v91 = 1026;
            int v92 = v48;
            uint64_t v49 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "%s\n", v49);
            if (v49 != (char *)buf) {
              free(v49);
            }
          }
          uint64_t v7 = 1;
          goto LABEL_50;
        }
      }
    }
    else if (*(unsigned char *)(a1 + 96))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      __int16 v29 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v30 = *(void *)(a1 + 1184);
        uint64_t v31 = *(void *)(a1 + 1192);
        uint64_t v32 = *(void *)(a2 + 32);
        *(_DWORD *)long long buf = 134284033;
        uint64_t v94 = v30;
        __int16 v95 = 2049;
        uint64_t v96 = v31;
        __int16 v97 = 2050;
        uint64_t v98 = v32;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMM,TBA,roadsWithinDistance returns query failed,lat,%{private}.8lf,lon,%{private}.8lf,searchRadius,%{public}.1lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v37 = *(void *)(a1 + 1184);
        uint64_t v38 = *(void *)(a1 + 1192);
        uint64_t v39 = *(void *)(a2 + 32);
        int v77 = 134284033;
        uint64_t v78 = v37;
        __int16 v79 = 2049;
        uint64_t v80 = v38;
        __int16 v81 = 2050;
        uint64_t v82 = v39;
        __int16 v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
    }
LABEL_49:
    uint64_t v7 = 0;
LABEL_50:
    if (SHIBYTE(v60) < 0) {
      operator delete(__p[1]);
    }
    if (v10) {
      sub_1000DB0A0(v10);
    }
    goto LABEL_54;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  uint64_t v5 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,TBA,NULL Island", buf, 2u);
  }
  if (!sub_10013D1A0(115, 2)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419430 != -1) {
LABEL_69:
  }
    dispatch_once(&qword_102419430, &stru_102317A08);
LABEL_59:
  LOWORD(v50[0]) = 0;
  uint64_t v36 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "%s\n", v36);
  if (v36 != (char *)buf) {
    free(v36);
  }
  return 0;
}

void sub_1011DAFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v69) {
    sub_1000DB0A0(v69);
  }
  sub_10017FF2C(&a69);
  _Unwind_Resume(a1);
}

BOOL sub_1011DAFF0(uint64_t a1, void *a2, double *a3, void *a4, uint64_t *a5, int a6, double a7)
{
  sub_10082B7E4(a5);
  if (a4[2] == a4[1] || sub_100178D5C((uint64_t)a4, *(double *)(a1 + 24), 6.0))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v14 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v196 = 2050;
      unint64_t v197 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routehint timed out or empty, segments,%{public}lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v137 = *(void *)(a1 + 8);
      unint64_t v138 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      int v185 = 134349312;
      uint64_t v186 = v137;
      __int16 v187 = 2050;
      unint64_t v188 = v138;
      int v139 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v139);
      if (v139 != buf) {
        free(v139);
      }
    }
    BOOL v17 = 0;
    a4[2] = a4[1];
    return v17;
  }
  if (!*a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v21 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, determineRouteHintRoadVectors", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v23 = *(void *)(a1 + 8);
    int v185 = 134349056;
    uint64_t v186 = v23;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v24);
    goto LABEL_204;
  }
  if (a6)
  {
    if (!sub_101374E9C(a4))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      char v18 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *(void *)(a1 + 8);
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
        *(_DWORD *)long long buf = 134349312;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v196 = 2050;
        unint64_t v197 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHint road search,isConnectivityGood,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_203;
      }
LABEL_219:
      dispatch_once(&qword_102419430, &stru_102317A08);
LABEL_203:
      uint64_t v140 = *(void *)(a1 + 8);
      unint64_t v141 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      int v185 = 134349312;
      uint64_t v186 = v140;
      __int16 v187 = 2050;
      unint64_t v188 = v141;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v24);
LABEL_204:
      if (v24 != buf) {
        free(v24);
      }
      return 0;
    }
  }
  else if ((sub_10137511C(a4) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    long long v117 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v118 = *(void *)(a1 + 8);
      unint64_t v119 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v118;
      __int16 v196 = 2050;
      unint64_t v197 = v119;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHint road search,getConnectedRouteSegments,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_203;
    }
    goto LABEL_219;
  }
  uint64_t v175 = (uint64_t)&v175;
  int v176 = &v175;
  unint64_t v177 = 0;
  if (((*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t, double))(*(void *)*a2 + 64))(*a2, &v175, a1, 1, a7) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    __int16 v120 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v121 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v121;
      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,search, roadsWithinDistance returned false", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_177;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v122 = *(void *)(a1 + 8);
    int v185 = 134349056;
    uint64_t v186 = v122;
    uint64_t v123 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v123);
    goto LABEL_209;
  }
  if (!v177)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    __int16 v124 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v125 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v125;
      _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected, empty road list", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_177;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v142 = *(void *)(a1 + 8);
    int v185 = 134349056;
    uint64_t v186 = v142;
    uint64_t v123 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v123);
LABEL_209:
    if (v123 != buf) {
      free(v123);
    }
LABEL_177:
    BOOL v17 = 0;
    goto LABEL_196;
  }
  uint64_t v153 = a1;
  v174[0] = 0;
  v174[1] = 0;
  __int16 v173 = (uint64_t *)v174;
  int v25 = (double *)a4[1];
  __int16 v152 = (double *)a4[2];
  if (v25 == v152) {
    goto LABEL_194;
  }
  do
  {
    uint64_t v170 = (__n128 *)&v170;
    __int16 v171 = &v170;
    uint64_t v172 = 0;
    __int16 v167 = (__n128 *)&v167;
    uint64_t v168 = &v167;
    uint64_t v169 = 0;
    int v26 = v176;
    if (v176 == &v175) {
      goto LABEL_151;
    }
    char v27 = 0;
    do
    {
      __int16 v29 = (unint64_t **)(v26 + 2);
      int v28 = (void *)v26[2];
      if (*(void *)v25 == *v28)
      {
        *(void *)int v178 = 0;
        uint64_t v165 = 0;
        double v166 = 0.0;
        double v30 = v25[1];
        double v31 = v25[2];
        uint64_t v32 = (std::__shared_weak_count *)v26[3];
        uint64_t v162 = v28;
        __int16 v163 = v32;
        uint64_t v164 = 0;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v33 = sub_1011DF548(a3, (uint64_t *)&v162, (double *)&v165, (double *)v178, v30, v31);
        if (v163) {
          sub_1000DB0A0(v163);
        }
        double v34 = v25[3];
        double v35 = v25[4];
        uint64_t v36 = (std::__shared_weak_count *)v26[3];
        uint64_t v160 = v26[2];
        __int16 v161 = v36;
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v37 = sub_1011DF548(a3, &v160, (double *)&v164, &v166, v34, v35);
        if (v161) {
          sub_1000DB0A0(v161);
        }
        if (v33) {
          sub_1010AFE78(&v170, (__n128 *)v26 + 1);
        }
        if (v37)
        {
          sub_1010AFE78(&v167, (__n128 *)v26 + 1);
          if (v33)
          {
            if (vabdd_f64(*(double *)v178, v166) < 0.0001)
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              __int16 v126 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
              {
                uint64_t v127 = *(void *)(v153 + 8);
                unint64_t v128 = *((void *)v25 + 1);
                unint64_t v129 = *((void *)v25 + 2);
                double v130 = v25[3];
                unint64_t v131 = *((void *)v25 + 4);
                *(_DWORD *)long long buf = 134350081;
                *(void *)&uint8_t buf[4] = v127;
                __int16 v196 = 2049;
                unint64_t v197 = v128;
                __int16 v198 = 2049;
                unint64_t v199 = v129;
                __int16 v200 = 2049;
                double v201 = v130;
                __int16 v202 = 2049;
                unint64_t v203 = v131;
                _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHints,road search, invalid data encountered, same start and end route coords, not using routehints,sLat,%{private}.7lf,sLon,%{private}.7lf,eLat,%{private}.7lf,eLon,%{private}.7lf", buf, 0x34u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_102317A08);
                }
                uint64_t v143 = *(void *)(v153 + 8);
                unint64_t v144 = *((void *)v25 + 1);
                unint64_t v145 = *((void *)v25 + 2);
                double v146 = v25[3];
                unint64_t v147 = *((void *)v25 + 4);
                int v185 = 134350081;
                uint64_t v186 = v143;
                __int16 v187 = 2049;
                unint64_t v188 = v144;
                __int16 v189 = 2049;
                unint64_t v190 = v145;
                __int16 v191 = 2049;
                double v192 = v146;
                __int16 v193 = 2049;
                unint64_t v194 = v147;
                __int16 v148 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v148);
                if (v148 != buf) {
                  free(v148);
                }
              }
              sub_10082B7E4(a5);
              sub_10017FF2C((uint64_t *)&v167);
              sub_10017FF2C((uint64_t *)&v170);
              BOOL v17 = 0;
              goto LABEL_195;
            }
            if (*(double *)v178 >= v166)
            {
              float v38 = *((float *)v26 + 10) + 180.0;
              *((float *)v26 + 10) = v38;
              sub_100142F58(v38);
              *(float *)&double v39 = v39;
              *((_DWORD *)v26 + 10) = LODWORD(v39);
              *((unsigned char *)v26 + 36) ^= 1u;
            }
            __int16 v40 = (std::__shared_weak_count *)v26[3];
            uint64_t v158 = v26[2];
            __int16 v159 = v40;
            if (v40) {
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_100FFD4D0(&v181, &v158, *((unsigned __int8 *)v26 + 36));
            if (v159) {
              sub_1000DB0A0(v159);
            }
            if (!sub_1011DFA10((uint64_t)&v173, (uint64_t)&v181))
            {
              *(void *)long long buf = &v181;
              *((unsigned char *)sub_1011DFA7C(&v173, (uint64_t)&v181, (uint64_t)&unk_101D0B290, (_OWORD **)buf) + 56) = 1;
              unint64_t v102 = a5[1];
              if (v102 >= a5[2])
              {
                uint64_t v106 = sub_1011DFBA4(a5, (uint64_t)(v26 + 2));
              }
              else
              {
                *(void *)unint64_t v102 = v26[2];
                uint64_t v103 = v26[3];
                *(void *)(v102 + 8) = v103;
                if (v103) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
                }
                long long v104 = *((_OWORD *)v26 + 2);
                long long v105 = *((_OWORD *)v26 + 3);
                *(void *)(v102 + 48) = v26[8];
                *(_OWORD *)(v102 + 16) = v104;
                *(_OWORD *)(v102 + 32) = v105;
                uint64_t v106 = v102 + 56;
              }
              a5[1] = v106;
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              __int16 v107 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v108 = *(void *)(v153 + 8);
                unint64_t v109 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
                double v110 = *v25;
                unint64_t v111 = **v29;
                *(_DWORD *)long long buf = 134350081;
                *(void *)&uint8_t buf[4] = v108;
                __int16 v196 = 2050;
                unint64_t v197 = v177;
                __int16 v198 = 2050;
                unint64_t v199 = v109;
                __int16 v200 = 2049;
                double v201 = v110;
                __int16 v202 = 2049;
                unint64_t v203 = v111;
                _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,roadList,%{public}lu,routeRoads,%{public}lu,routeID,%{private}lld,matched,%{private}lld", buf, 0x34u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_102317A08);
                }
                uint64_t v112 = *(void *)(v153 + 8);
                unint64_t v113 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
                double v114 = *v25;
                unint64_t v115 = **v29;
                int v185 = 134350081;
                uint64_t v186 = v112;
                __int16 v187 = 2050;
                unint64_t v188 = v177;
                __int16 v189 = 2050;
                unint64_t v190 = v113;
                __int16 v191 = 2049;
                double v192 = v114;
                __int16 v193 = 2049;
                unint64_t v194 = v115;
                double v116 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v116);
                if (v116 != buf) {
                  free(v116);
                }
              }
              goto LABEL_151;
            }
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            uint64_t v41 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v42 = *(void *)(v153 + 8);
              unint64_t v43 = **v29;
              *(_DWORD *)long long buf = 134349313;
              *(void *)&uint8_t buf[4] = v42;
              __int16 v196 = 2049;
              unint64_t v197 = v43;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,%{private}lld", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              uint64_t v44 = *(void *)(v153 + 8);
              unint64_t v45 = **v29;
              int v185 = 134349313;
              uint64_t v186 = v44;
              __int16 v187 = 2049;
              unint64_t v188 = v45;
              int v46 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v46);
              if (v46 != buf) {
                free(v46);
              }
            }
            char v27 = 1;
          }
        }
      }
      int v26 = (uint64_t *)v26[1];
    }
    while (v26 != &v175);
    int v47 = v171;
    if (v27 & 1 | (v171 == &v170)) {
      goto LABEL_151;
    }
    do
    {
      int v48 = v168;
      if (v168 == &v167) {
        goto LABEL_133;
      }
      char v49 = 0;
      __int16 v50 = (unint64_t **)(v47 + 2);
      do
      {
        long long v51 = (unint64_t **)(v48 + 2);
        if (v49) {
          goto LABEL_84;
        }
        unint64_t v52 = (*v50)[18];
        double v53 = 0.0;
        double v54 = 0.0;
        double v55 = 0.0;
        if (v52 != (*v50)[17])
        {
          double v54 = *(double *)(v52 - 16);
          double v55 = *(double *)(v52 - 8);
        }
        long long v56 = (double *)(*v51)[17];
        double v57 = 0.0;
        if ((double *)(*v51)[18] != v56)
        {
          double v53 = *v56;
          double v57 = v56[1];
        }
        if (sub_1004BABDC(v54, v55, v53, v57, 0.0000001))
        {
          char v58 = 1;
          goto LABEL_76;
        }
        unint64_t v60 = (*v50)[18];
        double v61 = 0.0;
        double v62 = 0.0;
        double v63 = 0.0;
        if (v60 != (*v50)[17])
        {
          double v62 = *(double *)(v60 - 16);
          double v63 = *(double *)(v60 - 8);
        }
        unint64_t v64 = (*v51)[18];
        double v65 = 0.0;
        if (v64 != (*v51)[17])
        {
          double v61 = *(double *)(v64 - 16);
          double v65 = *(double *)(v64 - 8);
        }
        if (sub_1004BABDC(v62, v63, v61, v65, 0.0000001))
        {
          char v59 = 0;
          char v58 = 1;
          goto LABEL_83;
        }
        uint64_t v82 = (double *)(*v50)[17];
        double v83 = 0.0;
        double v84 = 0.0;
        double v85 = 0.0;
        if ((double *)(*v50)[18] != v82)
        {
          double v84 = *v82;
          double v85 = v82[1];
        }
        int v86 = (double *)(*v51)[17];
        double v87 = 0.0;
        if ((double *)(*v51)[18] != v86)
        {
          double v83 = *v86;
          double v87 = v86[1];
        }
        if (sub_1004BABDC(v84, v85, v83, v87, 0.0000001))
        {
          char v58 = 0;
LABEL_76:
          char v59 = 1;
LABEL_83:
          *((unsigned char *)v47 + 36) = v58;
          *((unsigned char *)v48 + 36) = v59;
LABEL_84:
          uint64_t v66 = (std::__shared_weak_count *)v47[3];
          uint64_t v156 = v47[2];
          __int16 v157 = v66;
          if (v66) {
            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_100FFD4D0(&v185, &v156, *((unsigned __int8 *)v47 + 36));
          if (v157) {
            sub_1000DB0A0(v157);
          }
          if (sub_1011DFA10((uint64_t)&v173, (uint64_t)&v185))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            int v67 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v68 = *(void *)(v153 + 8);
              unint64_t v69 = **v50;
              *(_DWORD *)long long buf = 134349313;
              *(void *)&uint8_t buf[4] = v68;
              __int16 v196 = 2049;
              unint64_t v197 = v69;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,start,%{private}lld", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              uint64_t v70 = *(void *)(v153 + 8);
              unint64_t v71 = **v50;
              int v181 = 134349313;
              uint64_t v182 = v70;
              __int16 v183 = 2049;
              unint64_t v184 = v71;
              uint64_t v72 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v72);
              goto LABEL_130;
            }
          }
          else
          {
            *(void *)long long buf = &v185;
            *((unsigned char *)sub_1011DFA7C(&v173, (uint64_t)&v185, (uint64_t)&unk_101D0B290, (_OWORD **)buf) + 56) = 1;
            unint64_t v73 = a5[1];
            if (v73 >= a5[2])
            {
              uint64_t v77 = sub_1011DFBA4(a5, (uint64_t)(v47 + 2));
            }
            else
            {
              *(void *)unint64_t v73 = v47[2];
              uint64_t v74 = v47[3];
              *(void *)(v73 + 8) = v74;
              if (v74) {
                atomic_fetch_add_explicit(&v74->n128_i64[1], 1uLL, memory_order_relaxed);
              }
              long long v75 = *((_OWORD *)v47 + 2);
              long long v76 = *((_OWORD *)v47 + 3);
              *(void *)(v73 + 48) = v47[8];
              *(_OWORD *)(v73 + 16) = v75;
              *(_OWORD *)(v73 + 32) = v76;
              uint64_t v77 = v73 + 56;
            }
            a5[1] = v77;
            uint64_t v78 = (std::__shared_weak_count *)v48[3];
            int v154 = v48[2];
            __int16 v155 = v78;
            if (v78) {
              atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_100FFD4D0(&v181, &v154, *((unsigned __int8 *)v48 + 36));
            if (v155) {
              sub_1000DB0A0(v155);
            }
            if (!sub_1011DFA10((uint64_t)&v173, (uint64_t)&v181))
            {
              *(void *)long long buf = &v181;
              *((unsigned char *)sub_1011DFA7C(&v173, (uint64_t)&v181, (uint64_t)&unk_101D0B290, (_OWORD **)buf) + 56) = 1;
              unint64_t v97 = a5[1];
              if (v97 >= a5[2])
              {
                uint64_t v101 = sub_1011DFBA4(a5, (uint64_t)(v48 + 2));
              }
              else
              {
                *(void *)unint64_t v97 = v48[2];
                uint64_t v98 = v48[3];
                *(void *)(v97 + 8) = v98;
                if (v98) {
                  atomic_fetch_add_explicit(&v98->n128_i64[1], 1uLL, memory_order_relaxed);
                }
                long long v99 = *((_OWORD *)v48 + 2);
                long long v100 = *((_OWORD *)v48 + 3);
                *(void *)(v97 + 48) = v48[8];
                *(_OWORD *)(v97 + 16) = v99;
                *(_OWORD *)(v97 + 32) = v100;
                uint64_t v101 = v97 + 56;
              }
              a5[1] = v101;
              goto LABEL_151;
            }
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317A08);
            }
            __int16 v79 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v80 = *(void *)(v153 + 8);
              unint64_t v81 = **v51;
              *(_DWORD *)long long buf = 134349313;
              *(void *)&uint8_t buf[4] = v80;
              __int16 v196 = 2049;
              unint64_t v197 = v81;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,stop,%{private}lld", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              uint64_t v95 = *(void *)(v153 + 8);
              unint64_t v96 = **v51;
              *(_DWORD *)int v178 = 134349313;
              *(void *)&v178[4] = v95;
              __int16 v179 = 2049;
              unint64_t v180 = v96;
              uint64_t v72 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v72);
LABEL_130:
              if (v72 != buf) {
                free(v72);
              }
            }
          }
          char v49 = 1;
          goto LABEL_113;
        }
        int v88 = (double *)(*v50)[17];
        double v89 = 0.0;
        double v90 = 0.0;
        double v91 = 0.0;
        if ((double *)(*v50)[18] != v88)
        {
          double v90 = *v88;
          double v91 = v88[1];
        }
        unint64_t v92 = (*v51)[18];
        double v93 = 0.0;
        if (v92 != (*v51)[17])
        {
          double v89 = *(double *)(v92 - 16);
          double v93 = *(double *)(v92 - 8);
        }
        BOOL v94 = sub_1004BABDC(v90, v91, v89, v93, 0.0000001);
        char v58 = 0;
        char v59 = 0;
        char v49 = 0;
        if (v94) {
          goto LABEL_83;
        }
LABEL_113:
        int v48 = (__n128 **)v48[1];
      }
      while (v48 != &v167);
      if (v49) {
        break;
      }
LABEL_133:
      int v47 = (__n128 **)v47[1];
    }
    while (v47 != &v170);
LABEL_151:
    sub_10017FF2C((uint64_t *)&v167);
    sub_10017FF2C((uint64_t *)&v170);
    v25 += 5;
  }
  while (v25 != v152);
  BOOL v132 = a4[2] == a4[1] || v177 == 0;
  if (!v132 && a5[1] == *a5)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v133 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v134 = *(void *)(v153 + 8);
      unint64_t v135 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      *(_DWORD *)long long buf = 134349568;
      *(void *)&uint8_t buf[4] = v134;
      __int16 v196 = 2050;
      unint64_t v197 = v135;
      __int16 v198 = 2050;
      unint64_t v199 = v177;
      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEBUG, "#Warning,CLMM,%{public}.1lf,routeHints,unable to find routeHints road,segments,%{public}lu,roadList,%{public}lu", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v149 = *(void *)(v153 + 8);
      unint64_t v150 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[2] - a4[1]) >> 3);
      int v185 = 134349568;
      uint64_t v186 = v149;
      __int16 v187 = 2050;
      unint64_t v188 = v150;
      __int16 v189 = 2050;
      unint64_t v190 = v177;
      double v151 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "%s\n", v151);
      if (v151 != buf) {
        free(v151);
      }
    }
  }
LABEL_194:
  BOOL v17 = a5[1] != *a5;
LABEL_195:
  sub_1000F5BB0((uint64_t)&v173, v174[0]);
LABEL_196:
  sub_10017FF2C(&v175);
  return v17;
}

void sub_1011DCA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,void *a38,uint64_t a39,uint64_t a40)
{
}

uint64_t sub_1011DCAF0(uint64_t a1)
{
  uint64_t v1 = a1;
  double v2 = (double *)(a1 + 4120);
  sub_1010002FC((double *)(a1 + 4120), *(double *)(a1 + 88));
  uint64_t v3 = *(void *)(v1 + 4080);
  uint64_t v4 = *(void *)(v1 + 4072);
  if (v3 != v4) {
    sub_1011E07EC((uint64_t *)(v1 + 4096), v4, v3, 0xF83E0F83E0F83E1 * ((v3 - v4) >> 3));
  }
  sub_10082B744((uint64_t *)(v1 + 4072));
  if (!*(unsigned char *)(v1 + 114)) {
    return 0;
  }
  if (*(void *)(v1 + 4048) == *(void *)(v1 + 4056)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v1 + 1136);
  if (sub_100178D5C(v1 + 48, *(double *)(v1 + 1152), 2.5) || !sub_1010002E8(v2, *(double *)(v1 + 88), 60.0)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    unint64_t v141 = (uint64_t *)(v1 + 4072);
    __int16 v152 = 0;
    uint64_t v153 = 0;
    unint64_t v154 = 0;
    uint64_t v143 = v1;
    int v139 = v7;
    if (!*(unsigned char *)(v1 + 2232)) {
      goto LABEL_18;
    }
    sub_1011C9EF0((uint64_t *)(v1 + 1856), (uint64_t)v151);
    double v8 = *(__n128 **)(v1 + 4048);
    if (v8 == *(__n128 **)(v1 + 4056)) {
      goto LABEL_18;
    }
    while (1)
    {
      unint64_t v149 = v8->n128_u64[0];
      double v9 = (std::__shared_weak_count *)v8->n128_u64[1];
      unint64_t v150 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100FFD4D0(buf, &v149, v8[1].n128_u8[4]);
      BOOL v10 = sub_100FFD530((uint64_t)v151, (uint64_t)buf);
      if (v150) {
        sub_1000DB0A0(v150);
      }
      if (v10) {
        break;
      }
      double v8 = (__n128 *)((char *)v8 + 56);
      if (v8 == *(__n128 **)(v1 + 4056)) {
        goto LABEL_18;
      }
    }
    double v59 = *(double *)(v1 + 1152);
    double v60 = -1.0;
    if (v59 >= 0.0)
    {
      double v61 = *(double *)(v1 + 1992);
      double v62 = vabdd_f64(v59, v61);
      if (v61 >= 0.0) {
        double v60 = v62;
      }
      else {
        double v60 = -1.0;
      }
    }
    double v63 = fmax(*(double *)(v1 + 1800), 0.0) + (float)((float)random() * 4.6566e-10) * 0.25;
    if (v63 <= v60 * 72.0) {
      double v64 = v63;
    }
    else {
      double v64 = v60 * 72.0;
    }
    sub_100FFFA78((uint64_t)v183, v1 + 1856);
    double v146 = (__n128 *)&v146;
    unint64_t v147 = &v146;
    for (i = 0; v8 != *(__n128 **)(v1 + 4056); double v8 = (__n128 *)((char *)v8 + 56))
      sub_1010AFE78(&v146, v8);
    int v145 = 0;
    if (((*(uint64_t (**)(uint64_t, unsigned char *, __n128 **, int *, double, double))(*(void *)v6 + 56))(v6, v183, &v146, &v145, *(double *)&v184[16], v64) & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      unint64_t v115 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_189;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      *(_DWORD *)uint64_t v169 = 134349056;
      *(void *)&v169[4] = v5;
      double v116 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v116);
      goto LABEL_242;
    }
    if (i <= v145)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      long long v117 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349568;
        *(void *)&uint8_t buf[4] = v5;
        __int16 v190 = 1026;
        *(_DWORD *)__int16 v191 = v145;
        *(_WORD *)&v191[4] = 2050;
        *(void *)&v191[6] = i;
        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", buf, 0x1Cu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_189;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      *(_DWORD *)uint64_t v169 = 134349568;
      *(void *)&v169[4] = v5;
      *(_WORD *)&v169[12] = 1026;
      *(_DWORD *)&v169[14] = v145;
      *(_WORD *)&v169[18] = 2050;
      *(void *)&v169[20] = i;
      double v116 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v116);
      goto LABEL_242;
    }
    double v65 = *(float *)&v183[24];
    double v66 = 5.0;
    if (*(double *)&v184[16] <= 0.97 && *(double *)&v184[16] >= 0.03)
    {
      if (*(double *)(v1 + 1320) <= 0.0 || (double v67 = *(double *)(v1 + 1232), v67 < 0.0))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v68 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349312;
          *(void *)&uint8_t buf[4] = v5;
          __int16 v190 = 2050;
          *(void *)__int16 v191 = 0x403E000000000000;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", buf, 0x16u);
        }
        double v66 = 30.0;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          *(_DWORD *)uint64_t v169 = 134349312;
          *(void *)&v169[4] = v5;
          *(_WORD *)&v169[12] = 2050;
          *(void *)&v169[14] = 0x403E000000000000;
          unint64_t v138 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v138);
          if (v138 != buf) {
            free(v138);
          }
        }
        goto LABEL_100;
      }
      double v118 = fmod(v67 - v65, 360.0);
      if (v118 < 0.0) {
        double v118 = v118 + 360.0;
      }
      if (v118 > 180.0) {
        double v118 = v118 + -360.0;
      }
      double v119 = fabs(v118);
      int v120 = *(_DWORD *)(v1 + 4040);
      if (v119 >= 135.0)
      {
        *(_DWORD *)(v1 + 4040) = v120 + 1;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        __int16 v126 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v127 = *(void *)(v1 + 1232);
          int v128 = *(_DWORD *)(v1 + 4040);
          *(_DWORD *)long long buf = 134349824;
          *(void *)&uint8_t buf[4] = v5;
          __int16 v190 = 2050;
          *(double *)__int16 v191 = v65;
          *(_WORD *)&v191[8] = 2050;
          *(void *)&v191[10] = v127;
          __int16 v192 = 1026;
          LODWORD(v193) = v128;
          _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_189;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_220;
        }
        goto LABEL_255;
      }
      if (v119 > 60.0 && v120 >= 1)
      {
        *(_DWORD *)(v1 + 4040) = v120 + 1;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        unint64_t v131 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v132 = *(void *)(v1 + 1232);
          int v133 = *(_DWORD *)(v1 + 4040);
          *(_DWORD *)long long buf = 134349824;
          *(void *)&uint8_t buf[4] = v5;
          __int16 v190 = 2050;
          *(double *)__int16 v191 = v65;
          *(_WORD *)&v191[8] = 2050;
          *(void *)&v191[10] = v132;
          __int16 v192 = 1026;
          LODWORD(v193) = v133;
          _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_189;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_220;
        }
LABEL_255:
        dispatch_once(&qword_102419430, &stru_102317A08);
LABEL_220:
        uint64_t v129 = *(void *)(v1 + 1232);
        int v130 = *(_DWORD *)(v1 + 4040);
        *(_DWORD *)uint64_t v169 = 134349824;
        *(void *)&v169[4] = v5;
        *(_WORD *)&v169[12] = 2050;
        *(double *)&v169[14] = v65;
        *(_WORD *)&v169[22] = 2050;
        *(void *)&v169[24] = v129;
        *(_WORD *)&v169[32] = 1026;
        *(_DWORD *)&v169[34] = v130;
        double v116 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v116);
LABEL_242:
        if (v116 != buf) {
          free(v116);
        }
LABEL_189:
        sub_10017FF2C((uint64_t *)&v146);
        sub_100FFFC10(v183);
        goto LABEL_190;
      }
      if (v119 > 80.0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v122 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v123 = *(void *)(v1 + 1232);
          *(_DWORD *)long long buf = 134349568;
          *(void *)&uint8_t buf[4] = v5;
          __int16 v190 = 2050;
          *(double *)__int16 v191 = v65;
          *(_WORD *)&v191[8] = 2050;
          *(void *)&v191[10] = v123;
          _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317A08);
          }
          uint64_t v124 = *(void *)(v1 + 1232);
          *(_DWORD *)uint64_t v169 = 134349568;
          *(void *)&v169[4] = v5;
          *(_WORD *)&v169[12] = 2050;
          *(double *)&v169[14] = v65;
          *(_WORD *)&v169[22] = 2050;
          *(void *)&v169[24] = v124;
          uint64_t v125 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v125);
          if (v125 != buf) {
            free(v125);
          }
        }
        goto LABEL_120;
      }
    }
LABEL_100:
    uint64_t v69 = *(void *)v184;
    uint64_t v70 = *(void *)&v184[8];
    unint64_t v71 = v147;
    uint64_t v72 = v145;
    if (v145 < 0)
    {
      do
        unint64_t v71 = (__n128 **)*v71;
      while (!__CFADD__(v72++, 1));
    }
    else if (v145)
    {
      unint64_t v73 = v145 + 1;
      do
      {
        unint64_t v71 = (__n128 **)v71[1];
        --v73;
      }
      while (v73 > 1);
    }
    double v74 = sub_1000F1648((double *)(v1 + 608), *(double *)v184, *(double *)&v184[8], *((double *)v71 + 6), *((double *)v71 + 7), 0.0);
    memset(v169, 0, 24);
    *(_OWORD *)&v169[24] = xmmword_101D1C320;
    v169[40] = 0;
    long long v170 = 0u;
    long long v171 = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
    long long v176 = _Q1;
    *(void *)&v177[0] = 0xBFF0000000000000;
    double v178 = 0.0;
    __int16 v179 = 0;
    LODWORD(v180) = 0;
    WORD2(v180) = 1;
    DWORD2(v180) = 0;
    uint64_t v182 = 0;
    long long v181 = 0uLL;
    *(void *)&long long v172 = v69;
    *((void *)&v172 + 1) = v70;
    *(void *)&long long v173 = *(void *)(v1 + 1200);
    *((double *)&v173 + 1) = v65;
    if (v74 < 8.0) {
      double v74 = 8.0;
    }
    *(double *)int v174 = v74;
    *((double *)v174 + 1) = v66;
    *(void *)&v174[1] = 0x3FF0000000000000;
    uint64_t v76 = *(void *)(v1 + 1312);
    *((void *)&v174[1] + 1) = *(void *)(v1 + 1224);
    *(void *)&long long v175 = v76;
    BYTE8(v175) = *(unsigned char *)(v1 + 1356);
    *(int8x16_t *)((char *)v177 + 8) = vextq_s8(*(int8x16_t *)(v1 + 1144), *(int8x16_t *)(v1 + 1144), 8uLL);
    *((void *)&v177[1] + 1) = *(void *)(v1 + 1136);
    sub_1011DEAFC((uint64_t)v169, 0);
    double v78 = *(double *)v183;
    uint64_t v77 = *(std::__shared_weak_count **)&v183[8];
    if (*(void *)&v183[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v183[8] + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v79 = v179;
    double v178 = v78;
    __int16 v179 = v77;
    if (v79) {
      sub_1000DB0A0(v79);
    }
    long long v180 = *(_OWORD *)&v183[16];
    long long v181 = *(_OWORD *)v184;
    uint64_t v182 = *(void *)&v184[16];
    sub_1011DEC0C((uint64_t *)&v152, (uint64_t)v169);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    uint64_t v80 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v81 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v1 + 4080) - *(void *)(v1 + 4072)) >> 3);
      *(_DWORD *)long long buf = 134350593;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v190 = 2049;
      *(void *)__int16 v191 = v172;
      *(_WORD *)&v191[8] = 2049;
      *(void *)&v191[10] = *((void *)&v172 + 1);
      __int16 v192 = 2050;
      uint64_t v193 = *((void *)&v173 + 1);
      __int16 v194 = 2050;
      uint64_t v195 = *(void *)&v174[0];
      __int16 v196 = 2050;
      uint64_t v197 = *((void *)&v174[0] + 1);
      __int16 v198 = 2050;
      uint64_t v199 = v81;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317A08);
      }
      uint64_t v136 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v1 + 4080) - *(void *)(v1 + 4072)) >> 3);
      int v155 = 134350593;
      uint64_t v156 = v5;
      __int16 v157 = 2049;
      uint64_t v158 = v172;
      __int16 v159 = 2049;
      uint64_t v160 = *((void *)&v172 + 1);
      __int16 v161 = 2050;
      uint64_t v162 = *((void *)&v173 + 1);
      __int16 v163 = 2050;
      uint64_t v164 = *(void *)&v174[0];
      __int16 v165 = 2050;
      uint64_t v166 = *((void *)&v174[0] + 1);
      __int16 v167 = 2050;
      uint64_t v168 = v136;
      uint64_t v137 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v137);
      if (v137 != buf) {
        free(v137);
      }
    }
    if (v179) {
      sub_1000DB0A0(v179);
    }
LABEL_120:
    sub_10017FF2C((uint64_t *)&v146);
    sub_100FFFC10(v183);
LABEL_18:
    uint64_t v12 = (uint64_t)v152;
    uint64_t v11 = v153;
    if (v153 != v152) {
      goto LABEL_126;
    }
    uint64_t v13 = *(double **)(v1 + 4048);
    unint64_t v144 = *(uint64_t **)(v1 + 4056);
    if (v13 == (double *)v144) {
      goto LABEL_125;
    }
    int v14 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v140 = _Q0;
    while (1)
    {
      double v19 = sub_1000F1648((double *)(v1 + 608), v13[4], v13[5], *(double *)(v1 + 1160), *(double *)(v1 + 1168), 0.0);
      memset(v169, 0, 24);
      *(_OWORD *)&v169[24] = xmmword_101D1C320;
      v169[40] = 0;
      long long v170 = 0u;
      long long v171 = 0u;
      long long v176 = v140;
      *(void *)&v177[0] = 0xBFF0000000000000;
      LODWORD(v180) = 0;
      double v178 = 0.0;
      __int16 v179 = 0;
      WORD2(v180) = 1;
      DWORD2(v180) = 0;
      uint64_t v182 = 0;
      long long v181 = 0uLL;
      long long v172 = *((_OWORD *)v13 + 2);
      *(void *)&long long v173 = *(void *)(v1 + 1200);
      if (v19 < 8.0) {
        double v19 = 8.0;
      }
      *((double *)&v173 + 1) = *((float *)v13 + 6);
      *(double *)int v174 = v19;
      *(_OWORD *)((char *)v174 + 8) = xmmword_101D234D0;
      uint64_t v20 = *(void *)(v1 + 1312);
      *((void *)&v174[1] + 1) = *(void *)(v1 + 1224);
      *(void *)&long long v175 = v20;
      BYTE8(v175) = *(unsigned char *)(v1 + 1356);
      *(int8x16_t *)((char *)v177 + 8) = vextq_s8(*(int8x16_t *)(v1 + 1144), *(int8x16_t *)(v1 + 1144), 8uLL);
      *((void *)&v177[1] + 1) = *(void *)(v1 + 1136);
      sub_1011DEAFC((uint64_t)v169, 0);
      *(double *)&v174[1] = 1.0 / *((double *)v174 + 1);
      double v22 = *v13;
      uint64_t v21 = (std::__shared_weak_count *)*((void *)v13 + 1);
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = v179;
      double v178 = v22;
      __int16 v179 = v21;
      if (v23) {
        sub_1000DB0A0(v23);
      }
      long long v24 = *((_OWORD *)v13 + 1);
      long long v25 = *((_OWORD *)v13 + 2);
      uint64_t v182 = *((void *)v13 + 6);
      long long v180 = v24;
      long long v181 = v25;
      if (*(double *)(v1 + 1320) <= 0.0 || (double v26 = *(double *)(v1 + 1232), v26 < 0.0))
      {
        if (!*(unsigned char *)(v1 + 1848)) {
          goto LABEL_40;
        }
        double v26 = *(double *)(v1 + 2136);
        if (v26 < 0.0) {
          goto LABEL_40;
        }
      }
      double v27 = fmod(v26 - *((double *)&v173 + 1), 360.0);
      if (v27 < 0.0) {
        double v27 = v27 + 360.0;
      }
      double v28 = v27 + -360.0;
      if (v27 <= 180.0) {
        double v28 = v27;
      }
      if ((double v29 = fabs(v28), v29 < 135.0)
        && (v29 <= 60.0 || *(int *)(v1 + 4040) <= 0)
        && (v29 <= 80.0
         || (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v1 + 4056) - *(void *)(v1 + 4048)) >> 3)) < 2))
      {
        if (v28 == 0.0) {
          double v34 = *(double *)&v174[1];
        }
        else {
          double v34 = 1.0 / v29;
        }
        *(double *)&v174[1] = v34;
        sub_1011DEAFC((uint64_t)v169, 0);
        double v35 = (double *)v153;
        if ((unint64_t)v153 >= v154)
        {
          uint64_t v48 = sub_1011E0C88((uint64_t *)&v152, (uint64_t)v169);
        }
        else
        {
          *uint64_t v153 = *(_OWORD *)v169;
          long long v36 = *(_OWORD *)&v169[16];
          long long v37 = *(_OWORD *)&v169[32];
          long long v38 = v171;
          *((_OWORD *)v35 + 3) = v170;
          *((_OWORD *)v35 + 4) = v38;
          *((_OWORD *)v35 + 1) = v36;
          *((_OWORD *)v35 + 2) = v37;
          long long v39 = v172;
          long long v40 = v173;
          long long v41 = v174[1];
          *((_OWORD *)v35 + 7) = v174[0];
          *((_OWORD *)v35 + 8) = v41;
          *((_OWORD *)v35 + 5) = v39;
          *((_OWORD *)v35 + 6) = v40;
          long long v42 = v175;
          long long v43 = v176;
          long long v44 = v177[1];
          *((_OWORD *)v35 + 11) = v177[0];
          *((_OWORD *)v35 + 12) = v44;
          *((_OWORD *)v35 + 9) = v42;
          *((_OWORD *)v35 + 10) = v43;
          v35[26] = v178;
          unint64_t v45 = v179;
          *((void *)v35 + 27) = v179;
          if (v45) {
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v46 = v180;
          long long v47 = v181;
          *((void *)v35 + 32) = v182;
          *((_OWORD *)v35 + 14) = v46;
          *((_OWORD *)v35 + 15) = v47;
          uint64_t v48 = (uint64_t)(v35 + 33);
        }
        uint64_t v153 = (_OWORD *)v48;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        char v49 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v50 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v1 + 4080) - *(void *)(v1 + 4072)) >> 3);
          *(_DWORD *)long long buf = 134350849;
          *(void *)&uint8_t buf[4] = v5;
          __int16 v190 = 2049;
          *(void *)__int16 v191 = v172;
          *(_WORD *)&v191[8] = 2049;
          *(void *)&v191[10] = *((void *)&v172 + 1);
          __int16 v192 = 2050;
          uint64_t v193 = *((void *)&v173 + 1);
          __int16 v194 = 2050;
          uint64_t v195 = *(void *)&v174[0];
          __int16 v196 = 2050;
          uint64_t v197 = *((void *)&v174[0] + 1);
          __int16 v198 = 2050;
          uint64_t v199 = v50;
          __int16 v200 = 2050;
          uint64_t v201 = *(void *)&v174[1];
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", buf, 0x52u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_45;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        uint64_t v51 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v1 + 4080) - *(void *)(v1 + 4072)) >> 3);
        *(_DWORD *)__int16 v183 = 134350849;
        *(void *)&v183[4] = v5;
        *(_WORD *)&v183[12] = 2049;
        *(void *)&v183[14] = v172;
        *(_WORD *)&v183[22] = 2049;
        *(void *)&v183[24] = *((void *)&v172 + 1);
        *(_WORD *)unint64_t v184 = 2050;
        *(void *)&v184[2] = *((void *)&v173 + 1);
        *(_WORD *)&v184[10] = 2050;
        *(void *)&v184[12] = *(void *)&v174[0];
        *(_WORD *)&v184[20] = 2050;
        *(void *)&v184[22] = *((void *)&v174[0] + 1);
        __int16 v185 = 2050;
        uint64_t v186 = v51;
        __int16 v187 = 2050;
        uint64_t v188 = *(void *)&v174[1];
        unint64_t v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v52);
      }
      else
      {
LABEL_40:
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        double v30 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          double v31 = *((float *)v13 + 6);
          uint64_t v32 = *(void *)(v1 + 1232);
          int v33 = *(_DWORD *)(v1 + 4040);
          *(_DWORD *)long long buf = 134349824;
          *(void *)&uint8_t buf[4] = v5;
          __int16 v190 = 2050;
          *(double *)__int16 v191 = v31;
          *(_WORD *)&v191[8] = 2050;
          *(void *)&v191[10] = v32;
          __int16 v192 = 1026;
          LODWORD(v193) = v33;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
        }
        ++v14;
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_45;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317A08);
        }
        double v53 = *((float *)v13 + 6);
        uint64_t v54 = *(void *)(v1 + 1232);
        int v55 = *(_DWORD *)(v1 + 4040);
        *(_DWORD *)__int16 v183 = 134349824;
        *(void *)&v183[4] = v5;
        *(_WORD *)&v183[12] = 2050;
        *(double *)&v183[14] = v53;
        *(_WORD *)&v183[22] = 2050;
        *(void *)&v183[24] = v54;
        *(_WORD *)unint64_t v184 = 1026;
        *(_DWORD *)&v184[2] = v55;
        unint64_t v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v52);
      }
      if (v52 != buf) {
        free(v52);
      }
LABEL_45:
      if (v179) {
        sub_1000DB0A0(v179);
      }
      v13 += 7;
      if (v13 == (double *)v144)
      {
        if (v14 > 0)
        {
          uint64_t v12 = (uint64_t)v152;
          uint64_t v11 = v153;
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v1 + 4056) - *(void *)(v1 + 4048)) >> 3) == v14
            && v153 == v152)
          {
            uint64_t v56 = 0;
            ++*(_DWORD *)(v1 + 4040);
            goto LABEL_191;
          }
LABEL_126:
          if (v11 == (_OWORD *)v12)
          {
LABEL_190:
            uint64_t v56 = 0;
          }
          else
          {
            uint64_t v82 = (double *)(v1 + 608);
            *(_DWORD *)(v1 + 4040) = 0;
            double v83 = -1.0;
            double v84 = 0.0;
            double v85 = -1.0;
            uint64_t v142 = v11;
            do
            {
              int v86 = *(double **)(v1 + 4096);
              double v87 = *(double **)(v1 + 4104);
              if (v86 == v87) {
                goto LABEL_153;
              }
              BOOL v88 = 1;
              do
              {
                double v89 = vabdd_f64(v86[23], *(double *)(v12 + 184));
                if (v83 < 0.0) {
                  double v83 = v89;
                }
                double v90 = sub_1000F1648(v82, *(double *)(v12 + 80), *(double *)(v12 + 88), v86[10], v86[11], 0.0);
                if (v90 < v85 || v85 < 0.0) {
                  double v85 = v90;
                }
                if (v90 < 0.001)
                {
                  BOOL v92 = *(double *)(v12 + 256) >= 0.2;
                  *(void *)__int16 v183 = v183;
                  *(void *)&v183[8] = v183;
                  *(void *)&v183[16] = 0;
                  if ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t, BOOL, void))(*(void *)v6 + 72))(v6, v183, v12 + 208, v92, 0))
                  {
                    unint64_t v93 = *(void *)&v183[16];
                    BOOL v88 = *(void *)&v183[16] > 1uLL;
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_102317A08);
                    }
                    BOOL v94 = qword_102419438;
                    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)long long buf = 134349568;
                      *(void *)&uint8_t buf[4] = v5;
                      __int16 v190 = 1026;
                      *(_DWORD *)__int16 v191 = v93 > 1;
                      *(_WORD *)&v191[4] = 2050;
                      *(void *)&v191[6] = *(void *)&v183[16];
                      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", buf, 0x1Cu);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419430 != -1) {
                        dispatch_once(&qword_102419430, &stru_102317A08);
                      }
                      *(_DWORD *)uint64_t v169 = 134349568;
                      *(void *)&v169[4] = v5;
                      *(_WORD *)&v169[12] = 1026;
                      *(_DWORD *)&v169[14] = v93 > 1;
                      *(_WORD *)&v169[18] = 2050;
                      *(void *)&v169[20] = *(void *)&v183[16];
                      uint64_t v95 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v95);
                      if (v95 != buf) {
                        free(v95);
                      }
                    }
                  }
                  sub_1011BF5D0((uint64_t *)v183);
                }
                v86 += 33;
              }
              while (v86 != v87);
              uint64_t v1 = v143;
              if (v88)
              {
LABEL_153:
                double v96 = *(double *)(v12 + 128);
                unint64_t v97 = *(void *)(v1 + 4080);
                if (v97 >= *(void *)(v1 + 4088))
                {
                  uint64_t v110 = sub_1011E0C88(v141, v12);
                }
                else
                {
                  *(_OWORD *)unint64_t v97 = *(_OWORD *)v12;
                  long long v98 = *(_OWORD *)(v12 + 16);
                  long long v99 = *(_OWORD *)(v12 + 32);
                  long long v100 = *(_OWORD *)(v12 + 64);
                  *(_OWORD *)(v97 + 48) = *(_OWORD *)(v12 + 48);
                  *(_OWORD *)(v97 + 64) = v100;
                  *(_OWORD *)(v97 + 16) = v98;
                  *(_OWORD *)(v97 + 32) = v99;
                  long long v101 = *(_OWORD *)(v12 + 80);
                  long long v102 = *(_OWORD *)(v12 + 96);
                  long long v103 = *(_OWORD *)(v12 + 128);
                  *(_OWORD *)(v97 + 112) = *(_OWORD *)(v12 + 112);
                  *(_OWORD *)(v97 + 128) = v103;
                  *(_OWORD *)(v97 + 80) = v101;
                  *(_OWORD *)(v97 + 96) = v102;
                  long long v104 = *(_OWORD *)(v12 + 144);
                  long long v105 = *(_OWORD *)(v12 + 160);
                  long long v106 = *(_OWORD *)(v12 + 192);
                  *(_OWORD *)(v97 + 176) = *(_OWORD *)(v12 + 176);
                  *(_OWORD *)(v97 + 192) = v106;
                  *(_OWORD *)(v97 + 144) = v104;
                  *(_OWORD *)(v97 + 160) = v105;
                  *(void *)(v97 + 208) = *(void *)(v12 + 208);
                  uint64_t v107 = *(void *)(v12 + 216);
                  *(void *)(v97 + 216) = v107;
                  if (v107) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
                  }
                  long long v108 = *(_OWORD *)(v12 + 224);
                  long long v109 = *(_OWORD *)(v12 + 240);
                  *(void *)(v97 + 256) = *(void *)(v12 + 256);
                  *(_OWORD *)(v97 + 224) = v108;
                  *(_OWORD *)(v97 + 240) = v109;
                  uint64_t v110 = v97 + 264;
                }
                unint64_t v111 = v142;
                double v84 = v84 + v96;
                *(void *)(v1 + 4080) = v110;
              }
              else
              {
                unint64_t v111 = v142;
              }
              v12 += 264;
            }
            while ((_OWORD *)v12 != v111);
            if (v85 >= 0.0 && v83 > 0.0 && v83 < 5.0 && v85 > v83 * 50.0)
            {
              uint64_t v7 = v139;
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317A08);
              }
              uint64_t v112 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 134349312;
                *(void *)&uint8_t buf[4] = v5;
                __int16 v190 = 2050;
                *(double *)__int16 v191 = v85;
                _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", buf, 0x16u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_102317A08);
                }
                *(_DWORD *)uint64_t v169 = 134349312;
                *(void *)&v169[4] = v5;
                *(_WORD *)&v169[12] = 2050;
                *(double *)&v169[14] = v85;
                unint64_t v135 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v135);
                if (v135 != buf) {
                  free(v135);
                }
                uint64_t v7 = v139;
              }
              sub_10082B744(v141);
              goto LABEL_190;
            }
            uint64_t v7 = v139;
            if (v84 > 0.0)
            {
              uint64_t v113 = *(void *)(v1 + 4072);
              uint64_t v114 = *(void *)(v1 + 4080);
              while (v113 != v114)
              {
                *(double *)(v113 + 128) = *(double *)(v113 + 128) / v84;
                v113 += 264;
              }
            }
            uint64_t v56 = 1;
          }
LABEL_191:
          *(void *)long long buf = &v152;
          sub_10082B6F0((void ***)buf);
          if (v7) {
LABEL_192:
          }
            sub_1000DB0A0(v7);
          return v56;
        }
LABEL_125:
        uint64_t v12 = (uint64_t)v152;
        uint64_t v11 = v153;
        goto LABEL_126;
      }
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  char v58 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "CLMM,Unexpected,invalid geometry pointer,generateRouteHint", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    *(_WORD *)uint64_t v169 = 0;
    uint64_t v134 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "%s\n", v134);
    if (v134 != buf) {
      free(v134);
    }
    uint64_t v56 = 0;
    if (v7) {
      goto LABEL_192;
    }
  }
  else
  {
    uint64_t v56 = 0;
    if (v7) {
      goto LABEL_192;
    }
  }
  return v56;
}

void sub_1011DEA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  STACK[0x2D0] = (unint64_t)&a38;
  sub_10082B6F0((void ***)&STACK[0x2D0]);
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1011DEAFC(uint64_t a1, int a2)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  memset(v32, 0, 27);
  memset(&v32[32], 0, 48);
  *(_OWORD *)&v23[14] = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v13 = *(_OWORD *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 96);
  uint64_t v15 = v3;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 184);
  *(void *)&v23[16] = *(void *)(a1 + 176);
  uint64_t v6 = *(void *)(a1 + 144);
  *((void *)&v16 + 1) = *(void *)(a1 + 136);
  *(void *)&long long v17 = v2;
  *(void *)&long long v22 = v6;
  *((void *)&v22 + 1) = v4;
  uint64_t v7 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = 0xBFF0000000000000;
  uint64_t v27 = 0;
  int v28 = 0;
  __int16 v26 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0xBFF0000000000000;
  v23[28] = *(unsigned char *)(a1 + 152);
  uint64_t v9 = v5;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL);
  sub_10053A610(a1, (uint64_t)&v7, a2);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[1]);
  }
}

void sub_1011DEBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011DEC0C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_1011E0C88(a1, a2);
  }
  else
  {
    *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
    long long v4 = *(_OWORD *)(a2 + 16);
    long long v5 = *(_OWORD *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v3 + 64) = v6;
    *(_OWORD *)(v3 + 16) = v4;
    *(_OWORD *)(v3 + 32) = v5;
    long long v7 = *(_OWORD *)(a2 + 80);
    long long v8 = *(_OWORD *)(a2 + 96);
    long long v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v3 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v3 + 128) = v9;
    *(_OWORD *)(v3 + 80) = v7;
    *(_OWORD *)(v3 + 96) = v8;
    long long v10 = *(_OWORD *)(a2 + 144);
    long long v11 = *(_OWORD *)(a2 + 160);
    long long v12 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v3 + 192) = v12;
    *(_OWORD *)(v3 + 144) = v10;
    *(_OWORD *)(v3 + 160) = v11;
    uint64_t v13 = *(void *)(a2 + 216);
    *(void *)(v3 + 208) = *(void *)(a2 + 208);
    *(void *)(v3 + 216) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    long long v14 = *(_OWORD *)(a2 + 224);
    long long v15 = *(_OWORD *)(a2 + 240);
    *(void *)(v3 + 256) = *(void *)(a2 + 256);
    *(_OWORD *)(v3 + 224) = v14;
    *(_OWORD *)(v3 + 240) = v15;
    uint64_t result = v3 + 264;
  }
  a1[1] = result;
  return result;
}

void sub_1011DECAC(double *a1)
{
  a1[7] = 0.0;
  a1[8] = 0.0;
  a1[9] = 0.0;
  uint64_t v1 = *((void *)a1 + 11);
  uint64_t v2 = *((void *)a1 + 12);
  if (v1 != v2)
  {
    double v4 = 0.0;
    double v5 = 0.0;
    uint64_t v6 = *((void *)a1 + 11);
    do
    {
      if (*(_DWORD *)(v6 + 64) == 2)
      {
        double v7 = *(double *)(v6 + 24);
        double v4 = v4 + *(double *)v6 * v7;
        double v5 = v5 + *(double *)(v6 + 16) * v7;
      }
      v6 += 72;
    }
    while (v6 != v2);
    a1[7] = v4;
    double v8 = v5 + 0.0;
    a1[9] = v5 + 0.0;
    while (v1 != v2)
    {
      if (*(_DWORD *)(v1 + 64) != 2)
      {
        double v9 = *(double *)(v1 + 24);
        double v10 = *(double *)v1 * v9;
        if (v4 > 0.0)
        {
          double v11 = log(v4);
          long double v12 = log(v10);
          double v10 = exp(v11 + v12);
        }
        a1[7] = v10;
        double v8 = v8 + *(double *)(v1 + 16) * v9;
        a1[9] = v8;
        double v4 = v10;
      }
      v1 += 72;
    }
  }
}

uint64_t sub_1011DED9C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 1024);
  *a2 = *(void *)(result + 1016);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1011DEDBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1036);
}

double sub_1011DEDC4(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(void *)(a1 + 544) = 0xBFF0000000000000;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 639) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_WORD *)(a1 + 692) = 1;
  *(_DWORD *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 822) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  return result;
}

uint64_t sub_1011DEEB4(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0xBFF0000000000000;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 411) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 278) = 0u;
  *(void *)(a1 + 488) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 484) = 0;
  sub_101171D90(a1 + 496);
  return a1;
}

void sub_1011DEF78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 215) < 0) {
    operator delete(*(void **)(v1 + 192));
  }
  _Unwind_Resume(exception_object);
}

void sub_1011DEF94(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_1011DEFC4(uint64_t a1)
{
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  sub_1011DF140(a1 + 152);
  *(_OWORD *)(a1 + 4912) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 4928) = _Q0;
  *(_OWORD *)(a1 + 4944) = 0u;
  *(void *)(a1 + 4960) = 0xBFF0000000000000;
  *(void *)(a1 + 5184) = 0;
  *(_DWORD *)(a1 + 5192) = 0;
  *(_WORD *)(a1 + 5176) = 0;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(_OWORD *)(a1 + 5216) = 0u;
  *(_OWORD *)(a1 + 5232) = 0u;
  *(_OWORD *)(a1 + 5248) = 0u;
  *(_OWORD *)(a1 + 5259) = 0u;
  *(_OWORD *)(a1 + 5280) = 0u;
  *(_OWORD *)(a1 + 5296) = 0u;
  *(_OWORD *)(a1 + 5312) = 0u;
  *(_OWORD *)(a1 + 5126) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5064) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(void *)(a1 + 5336) = 0xBFF0000000000000;
  *(void *)(a1 + 5328) = 0;
  *(void *)(a1 + 5360) = 0;
  *(_OWORD *)(a1 + 5344) = 0u;
  *(void *)(a1 + 5368) = 0x3FF0000000000000;
  bzero((void *)(a1 + 1072), 0xC00uLL);
  return a1;
}

void sub_1011DF0DC(_Unwind_Exception *a1)
{
  sub_100FFFC10((void *)(v1 + 24));
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011DF0FC(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  return a1;
}

double sub_1011DF140(uint64_t a1)
{
  double result = 0.0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 64) = _Q1;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 827) = 0u;
  *(void *)(a1 + 472) = 0xBFF0000000000000;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = _Q1;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0xBFF0000000000000;
  *(void *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 760) = 0;
  *(_WORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(void *)(a1 + 904) = 0xBFF0000000000000;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 395) = 0u;
  *(_OWORD *)(a1 + 262) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 694) = 0u;
  return result;
}

uint64_t sub_1011DF25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 89);
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 89) = v9;
  *(_OWORD *)(a1 + 80) = v8;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  sub_101000368((void *)(a1 + 112), *(const void **)(a2 + 112), *(void *)(a2 + 120), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3));
  uint64_t v10 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v10;
  long long v11 = *(_OWORD *)(a2 + 152);
  long long v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  long long v13 = *(_OWORD *)(a2 + 312);
  long long v15 = *(_OWORD *)(a2 + 264);
  long long v14 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v13;
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 280) = v14;
  long long v16 = *(_OWORD *)(a2 + 200);
  long long v17 = *(_OWORD *)(a2 + 216);
  long long v18 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v18;
  *(_OWORD *)(a1 + 216) = v17;
  *(_OWORD *)(a1 + 200) = v16;
  if (*(char *)(a2 + 351) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 328), *(void **)(a2 + 328), *(void *)(a2 + 336));
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 328);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = v19;
  }
  memcpy((void *)(a1 + 352), (const void *)(a2 + 352), 0x118uLL);
  long long v20 = *(_OWORD *)(a2 + 632);
  long long v21 = *(_OWORD *)(a2 + 648);
  long long v22 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 680) = v22;
  *(_OWORD *)(a1 + 632) = v20;
  *(_OWORD *)(a1 + 648) = v21;
  long long v23 = *(_OWORD *)(a2 + 696);
  long long v24 = *(_OWORD *)(a2 + 712);
  long long v25 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 744) = v25;
  *(_OWORD *)(a1 + 696) = v23;
  *(_OWORD *)(a1 + 712) = v24;
  __int16 v26 = (unsigned char *)(a1 + 760);
  if (*(char *)(a2 + 783) < 0)
  {
    sub_1000DC48C(v26, *(void **)(a2 + 760), *(void *)(a2 + 768));
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 760);
    *(void *)(a1 + 776) = *(void *)(a2 + 776);
    *(_OWORD *)__int16 v26 = v27;
  }
  memcpy((void *)(a1 + 784), (const void *)(a2 + 784), 0x120uLL);
  memcpy((void *)(a1 + 1072), (const void *)(a2 + 1072), 0xF00uLL);
  long long v28 = *(_OWORD *)(a2 + 4912);
  long long v29 = *(_OWORD *)(a2 + 4928);
  long long v30 = *(_OWORD *)(a2 + 4944);
  *(_OWORD *)(a1 + 4960) = *(_OWORD *)(a2 + 4960);
  *(_OWORD *)(a1 + 4944) = v30;
  *(_OWORD *)(a1 + 4928) = v29;
  *(_OWORD *)(a1 + 4912) = v28;
  long long v31 = *(_OWORD *)(a2 + 4976);
  long long v32 = *(_OWORD *)(a2 + 4992);
  long long v33 = *(_OWORD *)(a2 + 5008);
  *(_OWORD *)(a1 + 5024) = *(_OWORD *)(a2 + 5024);
  *(_OWORD *)(a1 + 5008) = v33;
  *(_OWORD *)(a1 + 4992) = v32;
  *(_OWORD *)(a1 + 4976) = v31;
  unint64_t v34 = (unsigned char *)(a1 + 5040);
  if (*(char *)(a2 + 5063) < 0)
  {
    sub_1000DC48C(v34, *(void **)(a2 + 5040), *(void *)(a2 + 5048));
  }
  else
  {
    long long v35 = *(_OWORD *)(a2 + 5040);
    *(void *)(a1 + 5056) = *(void *)(a2 + 5056);
    *(_OWORD *)unint64_t v34 = v35;
  }
  memcpy((void *)(a1 + 5064), (const void *)(a2 + 5064), 0x118uLL);
  long long v36 = *(_OWORD *)(a2 + 5360);
  *(_OWORD *)(a1 + 5344) = *(_OWORD *)(a2 + 5344);
  *(_OWORD *)(a1 + 5360) = v36;
  return a1;
}

void sub_1011DF4EC(_Unwind_Exception *a1)
{
  sub_1011DF0FC(v3);
  sub_100FFFC10(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1011DF548(double *a1, uint64_t *a2, double *a3, double *a4, double a5, double a6)
{
  uint64_t v6 = *a2;
  long long v7 = *(double **)(*a2 + 136);
  unint64_t v8 = *(void *)(*a2 + 144) - (void)v7;
  *a3 = -1.0;
  *a4 = -1.0;
  if ((int)(v8 >> 4) > 1)
  {
    double v14 = *v7;
    double v15 = v7[1];
    *(double *)long long buf = 0.0;
    v44[0] = 0.0;
    double v40 = 0.0;
    sub_1000F17A8(a1, (double *)buf, v44, &v40, a5, a6, 0.0, v14, v15, 0.0);
    uint64_t v16 = 0;
    uint64_t v17 = (v8 >> 4) - 1;
    double v18 = 0.0;
    double v19 = 0.0;
    while (1)
    {
      uint64_t v20 = *(void *)(v6 + 136) + v16;
      double v21 = *(double *)(v20 + 16);
      double v22 = *(double *)(v20 + 24);
      double v40 = 0.0;
      v41[0] = 0.0;
      uint64_t v42 = 0;
      sub_1000F17A8(a1, &v40, v41, (double *)&v42, a5, a6, 0.0, v21, v22, 0.0);
      double v24 = v40;
      double v23 = v41[0];
      double v25 = (*(double *)buf - v40) * (*(double *)buf - v40) + (v44[0] - v41[0]) * (v44[0] - v41[0]);
      double v26 = 0.0 - *(double *)buf;
      if (v25 >= 0.001)
      {
        double v28 = ((0.0 - v44[0]) * (v41[0] - v44[0]) + v26 * (v40 - *(double *)buf)) / v25;
        if (v28 < 0.0)
        {
          double v30 = v26 * v26 + (0.0 - v44[0]) * (0.0 - v44[0]);
          double v28 = 0.0;
          goto LABEL_11;
        }
        if (v28 > 1.0)
        {
          double v30 = (0.0 - v40) * (0.0 - v40) + (0.0 - v41[0]) * (0.0 - v41[0]);
          double v28 = 1.0;
          goto LABEL_11;
        }
        double v27 = (0.0 - (*(double *)buf + (v40 - *(double *)buf) * v28))
            * (0.0 - (*(double *)buf + (v40 - *(double *)buf) * v28));
        double v29 = 0.0 - (v44[0] + (v41[0] - v44[0]) * v28);
      }
      else
      {
        double v27 = v26 * v26;
        double v28 = 0.0;
        double v29 = 0.0 - v44[0];
      }
      double v30 = v27 + v29 * v29;
LABEL_11:
      double v31 = sqrt(v25);
      double v32 = sqrt(v30);
      if (*a3 < 0.0 || v32 < *a3)
      {
        *a3 = v32;
        double v18 = v19 + v31 * v28;
      }
      double v19 = v19 + v31;
      *(double *)long long buf = v24;
      v44[0] = v23;
      v16 += 16;
      if (!--v17)
      {
        double v33 = v18 / v19;
        if (v19 < 0.001) {
          double v33 = 0.0;
        }
        *a4 = v33;
        return *a3 < 0.03;
      }
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  long long v35 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    LOWORD(v40) = 0;
    long long v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317A08);
  }
  long long v36 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#Warning CLMM, findClosestPointOnRoad returned false", buf, 2u);
  }
  BOOL v37 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v37)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317A08);
    }
    LOWORD(v40) = 0;
    long long v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::isCoordinateOnRoadVector(CLDistanceCalc &, const double, const double, CLMapRoadPtr, double &, double &)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1011DFA10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if (!sub_100FFD56C(a2, (uint64_t)(v2 + 4)))
      {
        if (!sub_100FFD56C((uint64_t)(v2 + 4), a2)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

_OWORD *sub_1011DFA7C(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_1011DFB10((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    long long v7 = operator new(0x40uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v9;
    *((unsigned char *)v7 + 56) = 0;
    sub_1000EDF90(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_1011DFB10(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!sub_100FFD56C(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_100FFD56C(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    long long v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_1011DFBA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  v18[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10017EA6C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v18[0] = v10;
  v18[1] = v11;
  uint64_t v18[3] = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  *((void *)v11 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  long long v13 = &v10[56 * v4];
  long long v14 = *(_OWORD *)(a2 + 16);
  long long v15 = *(_OWORD *)(a2 + 32);
  *((void *)v13 + 6) = *(void *)(a2 + 48);
  *((_OWORD *)v13 + 1) = v14;
  *((_OWORD *)v13 + 2) = v15;
  v18[2] = v11 + 56;
  sub_1011DFCEC(a1, v18);
  uint64_t v16 = a1[1];
  sub_1011DFE84(v18);
  return v16;
}

void sub_1011DFCD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1011DFE84((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011DFCEC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1011DFD64((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1011DFD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 56;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v11 = *(_OWORD *)(a3 + 16);
      long long v10 = *(_OWORD *)(a3 + 32);
      *(void *)(v8 + 48) = *(void *)(a3 + 48);
      *(_OWORD *)(v8 + 16) = v11;
      *(_OWORD *)(v8 + 32) = v10;
      *((void *)&v17 + 1) = v8;
      v8 -= 56;
      v7 -= 56;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_1011DFE08((uint64_t)v14);
  return v12;
}

uint64_t sub_1011DFE08(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1011DFE40(a1);
  }
  return a1;
}

void sub_1011DFE40(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v1 += 56;
  }
}

void **sub_1011DFE84(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1011DFEB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 56;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 48);
    if (v4)
    {
      sub_1000DB0A0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 56;
    }
  }
}

void sub_1011DFF0C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1011DFF0C(a1, *a2);
    sub_1011DFF0C(a1, a2[1]);
    sub_1011DFF68((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1011DFF68(uint64_t a1)
{
  if (*(char *)(a1 + 5087) < 0) {
    operator delete(*(void **)(a1 + 5064));
  }
  if (*(char *)(a1 + 807) < 0) {
    operator delete(*(void **)(a1 + 784));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    sub_1000DB0A0(v4);
  }
}

void *sub_1011DFFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_100FFD56C((uint64_t)(v3 + 4), a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_100FFD56C(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

uint64_t *sub_1011E0078(uint64_t **a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)sub_1011DFB10((uint64_t)a1, &v11, a2);
  BOOL v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    BOOL v6 = (uint64_t *)operator new(0x1538uLL);
    v9[1] = a1 + 1;
    sub_1011E0128((uint64_t)(v6 + 4), a3);
    char v10 = 1;
    sub_1000EDF90(a1, v11, v7, v6);
    v9[0] = 0;
    sub_1011E037C((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_1011E0128(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  uint64_t v4 = (uint64_t)a2 + 24;
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  uint64_t v5 = (_OWORD *)(a1 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 48) = a2[3];
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  long long v6 = a2[4];
  long long v7 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  long long v8 = *(long long *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 113) = *(long long *)((char *)a2 + 113);
  *(_OWORD *)(a1 + 104) = v8;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  uint64_t v9 = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 160) = v9;
  long long v10 = a2[11];
  long long v11 = a2[13];
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 176) = v10;
  long long v12 = a2[19];
  long long v13 = a2[21];
  long long v14 = a2[18];
  *(_OWORD *)(a1 + 320) = a2[20];
  *(_OWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 288) = v14;
  *(_OWORD *)(a1 + 304) = v12;
  long long v15 = a2[14];
  long long v16 = a2[15];
  long long v17 = a2[17];
  *(_OWORD *)(a1 + 256) = a2[16];
  *(_OWORD *)(a1 + 272) = v17;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v16;
  long long v18 = a2[22];
  *(void *)(a1 + 368) = *((void *)a2 + 46);
  *(_OWORD *)(a1 + 352) = v18;
  *((void *)a2 + 44) = 0;
  *((void *)a2 + 45) = 0;
  *((void *)a2 + 46) = 0;
  memcpy((void *)(a1 + 376), (char *)a2 + 376, 0x118uLL);
  long long v19 = *(_OWORD *)(v4 + 648);
  long long v20 = *(_OWORD *)(v4 + 680);
  long long v21 = *(_OWORD *)(v4 + 632);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(v4 + 664);
  *(_OWORD *)(a1 + 704) = v20;
  *(_OWORD *)(a1 + 656) = v21;
  *(_OWORD *)(a1 + 672) = v19;
  long long v22 = *(_OWORD *)(v4 + 712);
  long long v23 = *(_OWORD *)(v4 + 744);
  long long v24 = *(_OWORD *)(v4 + 696);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(v4 + 728);
  *(_OWORD *)(a1 + 768) = v23;
  *(_OWORD *)(a1 + 720) = v24;
  *(_OWORD *)(a1 + 736) = v22;
  long long v25 = *(_OWORD *)(v4 + 760);
  *(void *)(a1 + 800) = *(void *)(v4 + 776);
  *(_OWORD *)(a1 + 784) = v25;
  *(void *)(v4 + 760) = 0;
  *(void *)(v4 + 776) = 0;
  *(void *)(v4 + 768) = 0;
  memcpy((void *)(a1 + 808), (const void *)(v4 + 784), 0x120uLL);
  memcpy((void *)(a1 + 1096), (const void *)(v4 + 1072), 0xF00uLL);
  long long v26 = *(_OWORD *)(v4 + 4928);
  long long v27 = *(_OWORD *)(v4 + 4944);
  long long v28 = *(_OWORD *)(v4 + 4960);
  v5[307] = *(_OWORD *)(v4 + 4912);
  v5[310] = v28;
  v5[309] = v27;
  v5[308] = v26;
  long long v29 = *(_OWORD *)(v4 + 4992);
  long long v30 = *(_OWORD *)(v4 + 5008);
  long long v31 = *(_OWORD *)(v4 + 5024);
  v5[311] = *(_OWORD *)(v4 + 4976);
  v5[314] = v31;
  v5[313] = v30;
  v5[312] = v29;
  long long v32 = *(_OWORD *)(v4 + 5040);
  *(void *)(a1 + 5080) = *(void *)(v4 + 5056);
  v5[315] = v32;
  *(void *)(v4 + 5040) = 0;
  *(void *)(v4 + 5056) = 0;
  *(void *)(v4 + 5048) = 0;
  memcpy((void *)(a1 + 5088), (const void *)(v4 + 5064), 0x118uLL);
  long long v33 = *(_OWORD *)(v4 + 5360);
  v5[334] = *(_OWORD *)(v4 + 5344);
  v5[335] = v33;
  return a1;
}

void sub_1011E037C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1011DFF68((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_1011E03D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    sub_1001D7FD4();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_100227C5C((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  long long v10 = v7;
  long long v11 = &v7[112 * v3];
  long long v13 = &v7[112 * v6];
  sub_1011E04FC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 112;
  sub_1011E059C(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1011E0770(&v10);
  return v8;
}

void sub_1011E04E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1011E0770((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1011E04FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  long long v6 = *(_OWORD *)(a3 + 56);
  long long v7 = *(_OWORD *)(a3 + 65);
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 65) = v7;
  *(_OWORD *)(a2 + 56) = v6;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  return sub_101000368((void *)(a2 + 88), *(const void **)(a3 + 88), *(void *)(a3 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a3 + 96) - *(void *)(a3 + 88)) >> 3));
}

void sub_1011E0584(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011E059C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1011E0614((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1011E0614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 112);
      a3 -= 112;
      *(_OWORD *)(v7 - 112) = v8;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v9 = *(_OWORD *)(a3 + 16);
      long long v10 = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 64) = *(void *)(a3 + 48);
      *(_OWORD *)(v7 - 96) = v9;
      *(_OWORD *)(v7 - 80) = v10;
      long long v11 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(v7 - 47) = *(_OWORD *)(a3 + 65);
      *(_OWORD *)(v7 - 56) = v11;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 88);
      *(void *)(v7 - 8) = *(void *)(a3 + 104);
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 104) = 0;
      uint64_t v7 = *((void *)&v17 + 1) - 112;
      *((void *)&v17 + 1) -= 112;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_1011E06E4((uint64_t)v14);
  return v12;
}

uint64_t sub_1011E06E4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1011E071C((uint64_t *)a1);
  }
  return a1;
}

void sub_1011E071C(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10082B8C8(v3, v1);
      v1 += 14;
    }
    while (v1 != v2);
  }
}

void **sub_1011E0770(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1011E07A4(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 112;
    sub_10082B8C8(v4, (void *)(i - 112));
  }
}

void sub_1011E07EC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xF83E0F83E0F83E1 * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_1011E0990(a1);
    if (a4 > 0xF83E0F83E0F83ELL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x1F07C1F07C1F07C2 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0xF83E0F83E0F83E1 * ((a1[2] - *a1) >> 3)) >= 0x7C1F07C1F07C1FLL) {
      unint64_t v11 = 0xF83E0F83E0F83ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1011E09CC(a1, v11);
    uint64_t v12 = sub_1011E0A24(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xF83E0F83E0F83E1 * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    sub_1011E0B78((uint64_t)&v18, a2, v13, v9);
    uint64_t v12 = sub_1011E0A24(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_1011E0B78((uint64_t)&v19, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      long long v17 = *(std::__shared_weak_count **)(v16 - 48);
      if (v17) {
        sub_1000DB0A0(v17);
      }
      v16 -= 264;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1011E0980(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1011E0988(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1011E0990(uint64_t *a1)
{
  if (*a1)
  {
    sub_10082B744(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1011E09CC(void *a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_1011E0C3C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[264 * v4];
  return result;
}

uint64_t sub_1011E0A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v21 = a4;
  uint64_t v20 = a4;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 64) = v7;
      *(_OWORD *)(v4 + 16) = v5;
      *(_OWORD *)(v4 + 32) = v6;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(v4 + 128) = v10;
      *(_OWORD *)(v4 + 80) = v8;
      *(_OWORD *)(v4 + 96) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v12 = *(_OWORD *)(a2 + 160);
      long long v13 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(v4 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(v4 + 192) = v13;
      *(_OWORD *)(v4 + 144) = v11;
      *(_OWORD *)(v4 + 160) = v12;
      *(void *)(v4 + 208) = *(void *)(a2 + 208);
      uint64_t v14 = *(void *)(a2 + 216);
      *(void *)(v4 + 216) = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a2 + 224);
      long long v16 = *(_OWORD *)(a2 + 240);
      *(void *)(v4 + 256) = *(void *)(a2 + 256);
      *(_OWORD *)(v4 + 224) = v15;
      *(_OWORD *)(v4 + 240) = v16;
      v4 += 264;
      a2 += 264;
    }
    while (a2 != a3);
    uint64_t v21 = v4;
  }
  char v19 = 1;
  sub_1011E0AFC((uint64_t)v18);
  return v4;
}

uint64_t sub_1011E0AFC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1011E0B34(a1);
  }
  return a1;
}

void sub_1011E0B34(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 48);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v1 -= 264;
  }
}

uint64_t sub_1011E0B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    long long v8 = *(_OWORD *)(v5 + 32);
    long long v9 = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a4 + 64) = v9;
    *(_OWORD *)(a4 + 16) = v7;
    *(_OWORD *)(a4 + 32) = v8;
    long long v10 = *(_OWORD *)(v5 + 80);
    long long v11 = *(_OWORD *)(v5 + 96);
    long long v12 = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a4 + 128) = v12;
    *(_OWORD *)(a4 + 80) = v10;
    *(_OWORD *)(a4 + 96) = v11;
    long long v13 = *(_OWORD *)(v5 + 144);
    long long v14 = *(_OWORD *)(v5 + 160);
    long long v15 = *(_OWORD *)(v5 + 192);
    *(_OWORD *)(a4 + 176) = *(_OWORD *)(v5 + 176);
    *(_OWORD *)(a4 + 192) = v15;
    *(_OWORD *)(a4 + 144) = v13;
    *(_OWORD *)(a4 + 160) = v14;
    uint64_t v17 = *(void *)(v5 + 208);
    uint64_t v16 = *(void *)(v5 + 216);
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    char v18 = *(std::__shared_weak_count **)(a4 + 216);
    *(void *)(a4 + 208) = v17;
    *(void *)(a4 + 216) = v16;
    if (v18) {
      sub_1000DB0A0(v18);
    }
    long long v19 = *(_OWORD *)(v5 + 224);
    long long v20 = *(_OWORD *)(v5 + 240);
    *(void *)(a4 + 256) = *(void *)(v5 + 256);
    *(_OWORD *)(a4 + 224) = v19;
    *(_OWORD *)(a4 + 240) = v20;
    a4 += 264;
    v5 += 264;
  }
  while (v5 != v6);
  return v6;
}

void *sub_1011E0C3C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL) {
    sub_1001D7FA0();
  }
  return operator new(264 * a2);
}

uint64_t sub_1011E0C88(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0xF83E0F83E0F83E1 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xF83E0F83E0F83ELL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF83E0F83E0F83E1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x7C1F07C1F07C1FLL) {
    unint64_t v9 = 0xF83E0F83E0F83ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  v27[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1011E0C3C(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[264 * v4];
  v27[0] = v10;
  v27[1] = v11;
  v27[3] = &v10[264 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 4) = v14;
  *((_OWORD *)v11 + 2) = v13;
  long long v15 = *(_OWORD *)(a2 + 128);
  long long v17 = *(_OWORD *)(a2 + 80);
  long long v16 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v11 + 8) = v15;
  *((_OWORD *)v11 + 5) = v17;
  *((_OWORD *)v11 + 6) = v16;
  long long v18 = *(_OWORD *)(a2 + 192);
  long long v20 = *(_OWORD *)(a2 + 144);
  long long v19 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v11 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v11 + 12) = v18;
  *((_OWORD *)v11 + 9) = v20;
  *((_OWORD *)v11 + 10) = v19;
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 26) = *(void *)(a2 + 208);
  uint64_t v21 = *(void *)(a2 + 216);
  *((void *)v11 + 27) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  long long v22 = &v10[264 * v4];
  long long v23 = *(_OWORD *)(a2 + 224);
  long long v24 = *(_OWORD *)(a2 + 240);
  *((void *)v22 + 32) = *(void *)(a2 + 256);
  *((_OWORD *)v22 + 14) = v23;
  *((_OWORD *)v22 + 15) = v24;
  v27[2] = v11 + 264;
  sub_1011E0E08(a1, v27);
  uint64_t v25 = a1[1];
  sub_1011E0FE4(v27);
  return v25;
}

void sub_1011E0DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1011E0FE4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E0E08(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1011E0E80((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1011E0E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v27 = a6;
  *((void *)&v27 + 1) = a7;
  long long v26 = v27;
  v24[0] = a1;
  v24[1] = &v26;
  v24[2] = &v27;
  if (a3 == a5)
  {
    uint64_t v22 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 56;
    uint64_t v9 = a7 - 264;
    do
    {
      uint64_t v10 = v8 - 208;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(v8 - 208);
      long long v11 = *(_OWORD *)(v8 - 192);
      long long v12 = *(_OWORD *)(v8 - 176);
      long long v13 = *(_OWORD *)(v8 - 144);
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(v8 - 160);
      *(_OWORD *)(v9 + 64) = v13;
      *(_OWORD *)(v9 + 16) = v11;
      *(_OWORD *)(v9 + 32) = v12;
      long long v14 = *(_OWORD *)(v8 - 128);
      long long v15 = *(_OWORD *)(v8 - 112);
      long long v16 = *(_OWORD *)(v8 - 80);
      *(_OWORD *)(v9 + 112) = *(_OWORD *)(v8 - 96);
      *(_OWORD *)(v9 + 128) = v16;
      *(_OWORD *)(v9 + 80) = v14;
      *(_OWORD *)(v9 + 96) = v15;
      long long v17 = *(_OWORD *)(v8 - 64);
      long long v18 = *(_OWORD *)(v8 - 48);
      long long v19 = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(v9 + 176) = *(_OWORD *)(v8 - 32);
      *(_OWORD *)(v9 + 192) = v19;
      *(_OWORD *)(v9 + 144) = v17;
      *(_OWORD *)(v9 + 160) = v18;
      *(_OWORD *)(v9 + 208) = *(_OWORD *)v8;
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      long long v21 = *(_OWORD *)(v8 + 16);
      long long v20 = *(_OWORD *)(v8 + 32);
      *(void *)(v9 + 256) = *(void *)(v8 + 48);
      *(_OWORD *)(v9 + 224) = v21;
      *(_OWORD *)(v9 + 240) = v20;
      *((void *)&v27 + 1) = v9;
      v8 -= 264;
      v9 -= 264;
      v7 -= 264;
    }
    while (v10 != a5);
    uint64_t v22 = v27;
  }
  char v25 = 1;
  sub_1011E0F68((uint64_t)v24);
  return v22;
}

uint64_t sub_1011E0F68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1011E0FA0(a1);
  }
  return a1;
}

void sub_1011E0FA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 216);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v1 += 264;
  }
}

void **sub_1011E0FE4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1011E1018(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 264;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 48);
    if (v4)
    {
      sub_1000DB0A0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 264;
    }
  }
}

void sub_1011E106C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  if (qword_102419290 != -1) {
    dispatch_once(&qword_102419290, &stru_102317A28);
  }
  uint64_t v1 = qword_102419298;
  if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "GaitEventsModel: Tried to use GaitEvents CoreML Model without matching CoreMotionModels framework", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_102317A28);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLGaitEvents::ModelOutput CLGaitEvents::CLGaitEventsClassifier::getPredictions() const", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

__n128 sub_1011E1200@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  return result;
}

void sub_1011E121C(id a1)
{
  qword_102419298 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

uint64_t sub_1011E124C()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011E12DC;
  block[3] = &unk_1022BBE00;
  char v2 = 0;
  if (qword_102485F30 != -1) {
    dispatch_once(&qword_102485F30, block);
  }
  return qword_10248B380;
}

void sub_1011E12DC()
{
}

void sub_1011E1328()
{
}

uint64_t sub_1011E134C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1009F8920();
  sub_1006527E4(v4 + 320, a2);
  sub_10150219C(a1 + 776, a2);
  sub_1012B9F7C(a1 + 1200, a2);
  sub_100B9D7D8(a1 + 1696, a2);
  return a1;
}

void sub_1011E13C4(_Unwind_Exception *a1)
{
  sub_1012B9F80(v4);
  sub_1015021A0(v3);
  sub_1006527E8(v2);
  sub_1009F8924(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E1408(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485F50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102485F50))
  {
    uint64_t v4 = 0;
    long long v3 = xmmword_101DADE88;
    sub_1011C4B34(qword_102485F38, &v3, 1uLL);
    __cxa_atexit((void (*)(void *))sub_1011C4BC0, qword_102485F38, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102485F50);
  }
  sub_1009F89A4(a1, (uint64_t)qword_102485F38);
  sub_1006528AC(a1 + 320, (uint64_t)qword_102485F38);
  sub_101502220(a1 + 776, (uint64_t)qword_102485F38);
  return sub_1012BA000(a1 + 1200, (uint64_t)qword_102485F38);
}

void sub_1011E1518(_Unwind_Exception *a1)
{
}

uint64_t sub_1011E1538(void *a1)
{
  sub_1011F9E28(a1 + 9);
  sub_1011F9E28(a1 + 49);
  sub_1011F9E28(a1 + 106);

  return sub_1011F9E28(a1 + 159);
}

uint64_t sub_1011E1584(uint64_t a1, uint64_t a2)
{
  return sub_1011E158C(a1 + 320, a2);
}

uint64_t sub_1011E158C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *(double *)(a2 + 24);
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      long long v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 368))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_10017D440(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102317A68);
        }
        long long v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102317A68);
          }
          long long v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102317A88);
      }
      long long v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102317A88);
        }
        long long v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<VO2MaxOutput, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = VO2MaxOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_1011E2E10(v12, a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102317A68);
    }
    uint64_t v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)long long buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      long long v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      long long v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317A68);
      }
    }
    uint64_t v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      long long v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        long long v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      long long v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      long long v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_1011E1AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E1AFC(uint64_t a1, void *a2)
{
  return sub_100652A18(a1 + 320, a2);
}

uint64_t sub_1011E1B04(uint64_t a1, void *a2, int a3)
{
  return sub_10065304C(a1 + 320, a2, a3);
}

BOOL sub_1011E1B0C(uint64_t a1, const unsigned __int8 *a2, _OWORD *a3)
{
  unint64_t v13 = 0;
  long long v14 = 0;
  uint64_t v15 = 0;
  sub_10065348C(a1 + 320, a2, &v13);
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  if (v13 != v14)
  {
    *a3 = *v13;
    long long v6 = v4[1];
    long long v7 = v4[2];
    long long v8 = v4[4];
    a3[3] = v4[3];
    a3[4] = v8;
    a3[1] = v6;
    a3[2] = v7;
    long long v9 = v4[5];
    long long v10 = v4[6];
    long long v11 = v4[8];
    a3[7] = v4[7];
    a3[8] = v11;
    a3[5] = v9;
    a3[6] = v10;
LABEL_4:
    long long v14 = v4;
    operator delete(v4);
    return v4 != v5;
  }
  if (v13) {
    goto LABEL_4;
  }
  return v4 != v5;
}

void sub_1011E1BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011E1BBC(uint64_t a1, _OWORD *a2)
{
  unint64_t v13 = 0;
  long long v14 = 0;
  uint64_t v15 = 0;
  BOOL v4 = sub_10065304C(a1 + 320, &v13, 1) == 100;
  long long v3 = v13;
  BOOL v4 = !v4 || v13 == v14;
  uint64_t v5 = !v4;
  if (v4)
  {
    if (!v13) {
      return 0;
    }
  }
  else
  {
    *a2 = *v13;
    long long v6 = v3[1];
    long long v7 = v3[2];
    long long v8 = v3[4];
    a2[3] = v3[3];
    a2[4] = v8;
    a2[1] = v6;
    a2[2] = v7;
    long long v9 = v3[5];
    long long v10 = v3[6];
    long long v11 = v3[8];
    a2[7] = v3[7];
    a2[8] = v11;
    a2[5] = v9;
    a2[6] = v10;
  }
  long long v14 = v3;
  operator delete(v3);
  return v5;
}

void sub_1011E1C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011E1C78(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 776;
  sub_101502AF4(a1 + 776, (const unsigned __int8 *)(a2 + 16), (char **)&__p);
  if (__p == v5) {
    sub_1015028DC(v3, a2);
  }
  else {
    sub_101502904(v3, a2, *(void *)__p);
  }
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_1011E1CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011E1D14(uint64_t a1)
{
  return sub_101502E9C(a1 + 776);
}

BOOL sub_1011E1D1C(uint64_t a1, const unsigned __int8 *a2, _OWORD *a3)
{
  long long v10 = 0;
  long long v11 = 0;
  uint64_t v12 = 0;
  sub_101502AF4(a1 + 776, a2, &v10);
  BOOL v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    *a3 = *(_OWORD *)v10;
    long long v6 = *((_OWORD *)v4 + 1);
    long long v7 = *((_OWORD *)v4 + 2);
    long long v8 = *((_OWORD *)v4 + 4);
    a3[3] = *((_OWORD *)v4 + 3);
    a3[4] = v8;
    a3[1] = v6;
    a3[2] = v7;
LABEL_4:
    long long v11 = v4;
    operator delete(v4);
    return v4 != v5;
  }
  if (v10) {
    goto LABEL_4;
  }
  return v4 != v5;
}

void sub_1011E1DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1011E1DBC(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  return *(void *)a3 != *(void *)(a3 + 8);
}

uint64_t sub_1011E1DF0(uint64_t a1, void *a2)
{
  return sub_101502F9C(a1 + 776, a2);
}

uint64_t sub_1011E1DF8(uint64_t a1, void *a2)
{
  return sub_101503350(a1 + 776, a2);
}

uint64_t sub_1011E1E00(uint64_t a1, uint64_t a2)
{
  return sub_1011E1E0C((void *)(a1 + 1200), a2, 0);
}

uint64_t sub_1011E1E0C(void *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_1011E1ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E1EEC(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_1012BBA00(a1 + 1200, a2);
}

BOOL sub_1011E1EF4(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  a3[1] = *a3;
  return sub_1012BB568(a1 + 1200, a2, a3) != 109;
}

uint64_t sub_1011E1F20(uint64_t a1, void *a2)
{
  return sub_1012BA7BC(a1 + 1200, a2);
}

uint64_t sub_1011E1F28(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1012BAC38(a1 + 1200, a2, a3);
}

BOOL sub_1011E1F30(uint64_t a1, void *a2)
{
  return sub_1012BB0D0(a1 + 1200, a2) != 109;
}

void sub_1011E1F54(uint64_t a1, uint64_t a2)
{
  sqlite3_int64 v6 = 0;
  int64x2_t v7 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v8 = 0;
  uint64_t v3 = a1 + 1696;
  if (sub_1011E2140((void *)(a1 + 1696), (uint64_t)&v6))
  {
    *(void *)(a2 + 8) = v7.i64[0];
    if (sub_100B9D978(v3, a2, v6)) {
      return;
    }
  }
  else if (sub_100B9D85C(v3))
  {
    return;
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_102317A48);
  }
  BOOL v4 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unexpected failure attempting to save VO2MaxCloudKitSyncEngineMetadata record", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_102317A48);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLVO2MaxOutputStore::addCloudKitSyncEngineMetadata(VO2MaxCloudKitSyncEngineMetadata &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

BOOL sub_1011E2138(uint64_t a1, uint64_t a2)
{
  return sub_1011E2140((void *)(a1 + 1696), a2);
}

BOOL sub_1011E2140(void *a1, uint64_t a2)
{
  BOOL v4 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  LODWORD(a2) = (*(uint64_t (**)(void *, uint64_t))(*a1 + 104))(a1, a2);
  (*(void (**)(void *))(*v4 + 24))(v4);
  return a2 == 0;
}

void sub_1011E2210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E2224(uint64_t a1)
{
  return sub_1011F9E28((void *)(a1 + 1768));
}

BOOL sub_1011E222C(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2];
  [a3 setSessionId:[v6 UUIDString]];

  long long v21 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v7 = sub_101502AF4(a1 + 776, a2, (char **)&v21);
  if (v7 == 109)
  {
    BOOL v8 = 0;
    goto LABEL_18;
  }
  if (v21 != v22) {
    [a3 setSessionAttributes:sub_1011E23F4(v7, (uint64_t)v21)];
  }
  long long v18 = 0;
  long long v19 = 0;
  uint64_t v20 = 0;
  id v9 = (id)sub_1012BB568(a1 + 1200, a2, &v18);
  if (v9 != 109)
  {
    long long v10 = (char *)v18;
    long long v11 = v19;
    while (v10 != v11)
    {
      id v9 = [a3 addSummaries:sub_1011E2470((uint64_t)v9, (uint64_t)v10)];
      v10 += 184;
    }
    long long __p = 0;
    long long v16 = 0;
    uint64_t v17 = 0;
    int v12 = sub_10065348C(a1 + 320, a2, &__p);
    BOOL v8 = v12 != 109;
    if (v12 != 109)
    {
      unint64_t v13 = __p;
      if (__p == v16) {
        goto LABEL_14;
      }
      [a3 setEstimate:sub_1011E25A0((uint64_t)__p, (uint64_t)__p)];
    }
    unint64_t v13 = __p;
LABEL_14:
    if (v13)
    {
      long long v16 = v13;
      operator delete(v13);
    }
    goto LABEL_16;
  }
  BOOL v8 = 0;
LABEL_16:
  if (v18)
  {
    long long v19 = (char *)v18;
    operator delete(v18);
  }
LABEL_18:
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }
  return v8;
}

void sub_1011E23A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

CLCKVO2MaxSessionAttributes *sub_1011E23F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_alloc_init(CLCKVO2MaxSessionAttributes);
  [(CLCKVO2MaxSessionAttributes *)v3 setStartTime:*(double *)(a2 + 8)];
  [(CLCKVO2MaxSessionAttributes *)v3 setMeanMaxMets:*(double *)(a2 + 32)];
  [(CLCKVO2MaxSessionAttributes *)v3 setPrior:*(double *)(a2 + 40)];
  [(CLCKVO2MaxSessionAttributes *)v3 setHardwareType:*(unsigned int *)(a2 + 48)];
  [(CLCKVO2MaxSessionAttributes *)v3 setBetaBlockerUse:*(unsigned __int8 *)(a2 + 52)];
  [(CLCKVO2MaxSessionAttributes *)v3 setAlgorithmVersion:*(unsigned int *)(a2 + 56)];
  return v3;
}

CLCKVO2MaxSummary *sub_1011E2470(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_alloc_init(CLCKVO2MaxSummary);
  [(CLCKVO2MaxSummary *)v3 setStartTime:*(double *)(a2 + 8)];
  [(CLCKVO2MaxSummary *)v3 setWorkoutType:*(unsigned int *)(a2 + 16)];
  [(CLCKVO2MaxSummary *)v3 setDurationInSeconds:*(double *)(a2 + 40)];
  [(CLCKVO2MaxSummary *)v3 setPointCount:*(void *)(a2 + 48)];
  [(CLCKVO2MaxSummary *)v3 setHrMax:*(double *)(a2 + 64)];
  [(CLCKVO2MaxSummary *)v3 setHrMin:*(double *)(a2 + 56)];
  [(CLCKVO2MaxSummary *)v3 setHrMean:*(double *)(a2 + 72)];
  [(CLCKVO2MaxSummary *)v3 setHrConfidenceMean:*(double *)(a2 + 80)];
  [(CLCKVO2MaxSummary *)v3 setHrCadenceAgreementMean:*(double *)(a2 + 88)];
  [(CLCKVO2MaxSummary *)v3 setVo2Mean:*(double *)(a2 + 96)];
  [(CLCKVO2MaxSummary *)v3 setSpeedMean:*(double *)(a2 + 104)];
  [(CLCKVO2MaxSummary *)v3 setGradeMean:*(double *)(a2 + 112)];
  [(CLCKVO2MaxSummary *)v3 setCadenceMean:*(double *)(a2 + 120)];
  [(CLCKVO2MaxSummary *)v3 setHrVariance:*(double *)(a2 + 128)];
  [(CLCKVO2MaxSummary *)v3 setHrConfidenceVariance:*(double *)(a2 + 136)];
  [(CLCKVO2MaxSummary *)v3 setHrCadenceAgreementVariance:*(double *)(a2 + 144)];
  [(CLCKVO2MaxSummary *)v3 setVo2Variance:*(double *)(a2 + 152)];
  [(CLCKVO2MaxSummary *)v3 setSpeedVariance:*(double *)(a2 + 160)];
  [(CLCKVO2MaxSummary *)v3 setGradeVariance:*(double *)(a2 + 168)];
  [(CLCKVO2MaxSummary *)v3 setVo2MaxModelSource:*(unsigned int *)(a2 + 176)];
  [(CLCKVO2MaxSummary *)v3 setSessionType:*(unsigned int *)(a2 + 180)];
  return v3;
}

CLCKVO2MaxEstimate *sub_1011E25A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_alloc_init(CLCKVO2MaxEstimate);
  [(CLCKVO2MaxEstimate *)v3 setStartTime:*(double *)(a2 + 24)];
  [(CLCKVO2MaxEstimate *)v3 setEstimatedVo2Max:*(double *)(a2 + 32)];
  [(CLCKVO2MaxEstimate *)v3 setWorkoutType:*(unsigned int *)(a2 + 40)];
  [(CLCKVO2MaxEstimate *)v3 setDurationInSeconds:*(double *)(a2 + 48)];
  [(CLCKVO2MaxEstimate *)v3 setHrMax:*(double *)(a2 + 56)];
  [(CLCKVO2MaxEstimate *)v3 setHrMin:*(double *)(a2 + 64)];
  [(CLCKVO2MaxEstimate *)v3 setVariance:*(double *)(a2 + 88)];
  [(CLCKVO2MaxEstimate *)v3 setFilteredVo2Max:*(double *)(a2 + 96)];
  [(CLCKVO2MaxEstimate *)v3 setSessionType:*(unsigned int *)(a2 + 104)];
  [(CLCKVO2MaxEstimate *)v3 setEligibleForHealthKit:*(unsigned __int8 *)(a2 + 108)];
  [(CLCKVO2MaxEstimate *)v3 setEligibleForCalorimetry:*(unsigned __int8 *)(a2 + 109)];
  [(CLCKVO2MaxEstimate *)v3 setNumWorkoutsContrToEstimate:*(unsigned int *)(a2 + 112)];
  [(CLCKVO2MaxEstimate *)v3 setEstimatedHRResponseParam:*(double *)(a2 + 120)];
  [(CLCKVO2MaxEstimate *)v3 setEstimatedHRRecoveryParam:*(double *)(a2 + 128)];
  [(CLCKVO2MaxEstimate *)v3 setSessionVo2Max:*(double *)(a2 + 136)];
  return v3;
}

uint64_t sub_1011E2688(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [objc_alloc((Class)NSUUID) initWithUUIDString:[a2 sessionId]];
  v27[0] = 0;
  v27[1] = 0;
  [v6 getUUIDBytes:v27];

  *((void *)&v26 + 1) = 0;
  id v8 = sub_1011E27EC(v7, a2, (uint64_t)v25);
  *(void *)&long long v26 = a3;
  long long __p = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  id v9 = sub_1011E287C((uint64_t)v8, a2, &__p);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  sub_1011E2CAC((uint64_t)v9, a2, (uint64_t)v20);
  long long v17 = v25[2];
  long long v18 = v25[3];
  long long v19 = v26;
  long long v15 = v25[0];
  long long v16 = v25[1];
  uint64_t v10 = sub_101503720(a1 + 776, (const unsigned __int8 *)v27);
  if (__p)
  {
    unint64_t v13 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1011E27C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1011E27EC(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [a2 hasSessionAttributes];
  if (result)
  {
    [objc_msgSend(a2, "sessionAttributes") startTime];
    *(void *)(a3 + 8) = v6;
    [objc_msgSend(a2, "sessionAttributes") meanMaxMets];
    *(void *)(a3 + 32) = v7;
    [objc_msgSend(a2, "sessionAttributes") prior];
    *(void *)(a3 + 40) = v8;
    *(_DWORD *)(a3 + 48) = [objc_msgSend(objc_msgSend(a2, "sessionAttributes"), "hardwareType")];
    *(unsigned char *)(a3 + 52) = [objc_msgSend(objc_msgSend(a2, "sessionAttributes"), "betaBlockerUse")];
    id result = [a2 sessionAttributes].algorithmVersion;
    *(_DWORD *)(a3 + 56) = result;
  }
  return result;
}

id sub_1011E287C(uint64_t a1, void *a2, void **a3)
{
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  id v4 = [a2 summaries];
  id result = [v4 countByEnumeratingWithState:&v71 objects:v75 count:16];
  id v6 = result;
  if (result)
  {
    uint64_t v7 = *(void *)v72;
    uint64_t v61 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v72 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v71 + 1) + 8 * (void)v8);
        [v9 startTime:v61];
        uint64_t v70 = v10;
        signed int v11 = [v9 workoutType];
        [v9 durationInSeconds];
        uint64_t v69 = v12;
        id v13 = [v9 pointCount];
        [v9 hrMax];
        uint64_t v68 = v14;
        [v9 hrMin];
        uint64_t v67 = v15;
        [v9 hrMean];
        uint64_t v66 = v16;
        [v9 hrConfidenceMean];
        uint64_t v65 = v17;
        [v9 hrCadenceAgreementMean];
        uint64_t v64 = v18;
        [v9 vo2Mean];
        uint64_t v63 = v19;
        [v9 speedMean];
        uint64_t v62 = v20;
        [v9 gradeMean];
        uint64_t v22 = v21;
        [v9 cadenceMean];
        uint64_t v24 = v23;
        [v9 hrVariance];
        uint64_t v26 = v25;
        [v9 hrConfidenceVariance];
        uint64_t v28 = v27;
        [v9 hrCadenceAgreementVariance];
        uint64_t v30 = v29;
        [v9 vo2Variance];
        uint64_t v32 = v31;
        [v9 speedVariance];
        uint64_t v34 = v33;
        [v9 gradeVariance];
        uint64_t v36 = v35;
        unsigned int v37 = [v9 vo2MaxModelSource];
        unsigned int v38 = [v9 sessionType];
        unsigned int v39 = v38;
        double v40 = (char *)a3[1];
        long long v41 = (char *)a3[2];
        if (v40 >= v41)
        {
          unint64_t v43 = 0xD37A6F4DE9BD37A7 * ((v40 - (unsigned char *)*a3) >> 3);
          unint64_t v44 = v43 + 1;
          if (v43 + 1 > 0x1642C8590B21642) {
            sub_1001D7FD4();
          }
          unint64_t v45 = 0xD37A6F4DE9BD37A7 * ((v41 - (unsigned char *)*a3) >> 3);
          if (2 * v45 > v44) {
            unint64_t v44 = 2 * v45;
          }
          if (v45 >= 0xB21642C8590B21) {
            unint64_t v46 = 0x1642C8590B21642;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v46) {
            long long v47 = (char *)sub_10050F820(v61, v46);
          }
          else {
            long long v47 = 0;
          }
          uint64_t v48 = &v47[184 * v43];
          *(void *)uint64_t v48 = 0;
          *((void *)v48 + 1) = v70;
          *((void *)v48 + 2) = v11;
          *((void *)v48 + 5) = v69;
          *((void *)v48 + 6) = v13;
          *((void *)v48 + 7) = v67;
          *((void *)v48 + 8) = v68;
          *((void *)v48 + 9) = v66;
          *((void *)v48 + 10) = v65;
          *((void *)v48 + 11) = v64;
          *((void *)v48 + 12) = v63;
          *((void *)v48 + 13) = v62;
          *((void *)v48 + 14) = v22;
          *((void *)v48 + 15) = v24;
          *((void *)v48 + 16) = v26;
          *((void *)v48 + 17) = v28;
          *((void *)v48 + 18) = v30;
          *((void *)v48 + 19) = v32;
          *((void *)v48 + 20) = v34;
          *((void *)v48 + 21) = v36;
          *((_DWORD *)v48 + 44) = v37;
          *((_DWORD *)v48 + 45) = v39;
          uint64_t v50 = (char *)*a3;
          char v49 = (char *)a3[1];
          uint64_t v51 = v48;
          if (v49 != *a3)
          {
            do
            {
              long long v52 = *(_OWORD *)(v49 - 184);
              long long v53 = *(_OWORD *)(v49 - 168);
              long long v54 = *(_OWORD *)(v49 - 152);
              *(_OWORD *)(v51 - 136) = *(_OWORD *)(v49 - 136);
              *(_OWORD *)(v51 - 152) = v54;
              *(_OWORD *)(v51 - 168) = v53;
              *(_OWORD *)(v51 - 184) = v52;
              long long v55 = *(_OWORD *)(v49 - 120);
              long long v56 = *(_OWORD *)(v49 - 104);
              long long v57 = *(_OWORD *)(v49 - 88);
              *(_OWORD *)(v51 - 72) = *(_OWORD *)(v49 - 72);
              *(_OWORD *)(v51 - 88) = v57;
              *(_OWORD *)(v51 - 104) = v56;
              *(_OWORD *)(v51 - 120) = v55;
              long long v58 = *(_OWORD *)(v49 - 56);
              long long v59 = *(_OWORD *)(v49 - 40);
              long long v60 = *(_OWORD *)(v49 - 24);
              *((void *)v51 - 1) = *((void *)v49 - 1);
              *(_OWORD *)(v51 - 24) = v60;
              *(_OWORD *)(v51 - 40) = v59;
              *(_OWORD *)(v51 - 56) = v58;
              v51 -= 184;
              v49 -= 184;
            }
            while (v49 != v50);
            char v49 = (char *)*a3;
          }
          uint64_t v42 = v48 + 184;
          *a3 = v51;
          a3[1] = v48 + 184;
          a3[2] = &v47[184 * v46];
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(void *)double v40 = 0;
          *((void *)v40 + 1) = v70;
          *((void *)v40 + 2) = v11;
          *((void *)v40 + 5) = v69;
          *((void *)v40 + 6) = v13;
          *((void *)v40 + 7) = v67;
          *((void *)v40 + 8) = v68;
          *((void *)v40 + 9) = v66;
          *((void *)v40 + 10) = v65;
          *((void *)v40 + 11) = v64;
          *((void *)v40 + 12) = v63;
          *((void *)v40 + 13) = v62;
          *((void *)v40 + 14) = v22;
          *((void *)v40 + 15) = v24;
          *((void *)v40 + 16) = v26;
          *((void *)v40 + 17) = v28;
          *((void *)v40 + 18) = v30;
          *((void *)v40 + 19) = v32;
          *((void *)v40 + 20) = v34;
          *((void *)v40 + 21) = v36;
          uint64_t v42 = v40 + 184;
          *((_DWORD *)v40 + 44) = v37;
          *((_DWORD *)v40 + 45) = v38;
        }
        a3[1] = v42;
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v8 != v6);
      id result = [v4 countByEnumeratingWithState:&v71 objects:v75 count:16];
      id v6 = result;
    }
    while (result);
  }
  return result;
}

id sub_1011E2CAC(uint64_t a1, void *a2, uint64_t a3)
{
  id result = [a2 hasEstimate];
  if (result)
  {
    [objc_msgSend(a2, "estimate") startTime];
    *(void *)(a3 + 24) = v6;
    [objc_msgSend(a2, "estimate") estimatedVo2Max];
    *(void *)(a3 + 32) = v7;
    *(void *)(a3 + 40) = (int)[objc_msgSend(objc_msgSend(a2, "estimate"), "workoutType")];
    [objc_msgSend(a2, "estimate") durationInSeconds];
    *(void *)(a3 + 48) = v8;
    [objc_msgSend(a2, "estimate") hrMax];
    *(void *)(a3 + 56) = v9;
    [objc_msgSend(a2, "estimate") hrMin];
    *(void *)(a3 + 64) = v10;
    [objc_msgSend(a2, "estimate") variance];
    *(void *)(a3 + 88) = v11;
    [objc_msgSend(a2, "estimate") filteredVo2Max];
    *(void *)(a3 + 96) = v12;
    *(_DWORD *)(a3 + 104) = [objc_msgSend(objc_msgSend(a2, "estimate"), "sessionType")];
    *(unsigned char *)(a3 + 108) = [objc_msgSend(objc_msgSend(a2, "estimate"), "eligibleForHealthKit")];
    *(unsigned char *)(a3 + 109) = [objc_msgSend(objc_msgSend(a2, "estimate"), "eligibleForCalorimetry")];
    *(_DWORD *)(a3 + 112) = [objc_msgSend(objc_msgSend(a2, "estimate"), "numWorkoutsContrToEstimate")];
    [objc_msgSend(a2, "estimate") estimatedHRResponseParam];
    *(void *)(a3 + 120) = v13;
    [objc_msgSend(a2, "estimate") estimatedHRRecoveryParam];
    *(void *)(a3 + 128) = v14;
    id result = [objc_msgSend(a2, "estimate") sessionVo2Max];
    *(void *)(a3 + 136) = v15;
  }
  return result;
}

uint64_t sub_1011E2DD0(uint64_t a1)
{
  return sub_101507124(a1 + 776);
}

double sub_1011E2DD8(uint64_t a1)
{
  return sub_100655C24(a1 + 320);
}

void sub_1011E2DE0(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

__n128 sub_1011E2E10(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 28 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1011E2F44(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x1C)) + 144 * (v7 % 0x1C);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 128) = v14;
  *(__n128 *)(v8 + 80) = result;
  *(_OWORD *)(v8 + 96) = v13;
  ++a1[5];
  return result;
}

void sub_1011E2EE4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1011E2F14(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1011E2F44(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1C;
  unint64_t v4 = v2 - 28;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unsigned int v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unsigned int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1011E3210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1011E330C(id a1)
{
  qword_102485F58 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPencilStateSilo"];
}

uint64_t sub_1011E33CC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011E37B4;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_102485F78 != -1) {
    dispatch_once(&qword_102485F78, block);
  }
  return qword_10248B388;
}

void sub_1011E3630(id a1)
{
  byte_102485F68 = sub_1001B7C64();
}

void sub_1011E37B4()
{
}

void sub_1011E3800()
{
}

uint64_t sub_1011E3824(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1011E3A88(a1, "CLPencilState", a2);
  *(void *)uint64_t v3 = off_102317AF8;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  *(_WORD *)(v3 + 128) = 0;
  Class v4 = off_102476AA0();
  if (v4)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_102317C90);
    }
    uint64_t v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ACCBLEPairingProvider is available.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102317C90);
      }
      __int16 v10 = 0;
      unint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLPencilState::CLPencilState(id<CLIntersiloUniverse>)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(void *)(a1 + 120) = [[CLPencilStateAdapter alloc] initWithPencilState:a1];
    uint64_t v6 = *(void **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1011E3B34;
    v9[3] = &unk_1022A56E0;
    v9[4] = v4;
    v9[5] = a1;
    [v6 async:v9];
  }
  return a1;
}

void sub_1011E3A70(_Unwind_Exception *a1)
{
  sub_1011E3C28(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E3A88(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102317CC0;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1011E3B18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1011E3B34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1011E3B88(v2);
  *(void *)(v2 + 112) = [objc_alloc(*(Class *)(a1 + 32)) initWithDelegate:*(void *)(v2 + 120)];

  return sub_1011E3BD8((unsigned char *)v2);
}

uint64_t sub_1011E3B88(uint64_t a1)
{
  BOOL v4 = 0;
  uint64_t v2 = sub_1000A6958();
  uint64_t result = sub_1000D29FC(v2, @"CMPencilStateAttachmentKey", &v4);
  if (result) {
    *(unsigned char *)(a1 + 128) = v4;
  }
  return result;
}

unsigned char *sub_1011E3BD8(unsigned char *result)
{
  uint64_t v1 = result;
  char v2 = result[128];
  if (v2)
  {
    if (result[129])
    {
      char v2 = 1;
    }
    else
    {
      uint64_t result = sub_1011E3D74(result, 0, 1);
      char v2 = v1[128];
    }
  }
  v1[129] = v2;
  return result;
}

uint64_t sub_1011E3C28(uint64_t a1)
{
  *(void *)a1 = off_102317CC0;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1011E3CAC(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
}

void *sub_1011E3CE4@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

unsigned char *sub_1011E3D60(uint64_t a1)
{
  return sub_1011E3D74(*(unsigned char **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 0);
}

unsigned char *sub_1011E3D74(unsigned char *result, int a2, int a3)
{
  if (result[129] != a2 || a3 != 0)
  {
    uint64_t v4 = (uint64_t)result;
    result[129] = a2;
    char v6 = a2;
    int v5 = 0;
    (*(void (**)(unsigned char *, int *, char *, uint64_t, uint64_t, void))(*(void *)result + 152))(result, &v5, &v6, 1, 0xFFFFFFFFLL, 0);
    return (unsigned char *)sub_1011E3DF8(v4);
  }
  return result;
}

uint64_t sub_1011E3DF8(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 129)];
  sub_1004D258C(v2);
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)sub_1000A6958() + 944);

  return v3();
}

void sub_1011E3E8C()
{
}

void sub_1011E3F48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1011E3F84(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_102317E10;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_1011E406C(uint64_t a1)
{
  sub_1011E3C28(a1);

  operator delete();
}

void sub_1011E40A4(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102317C50);
      }
      __int16 v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102317C50);
        }
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1011E4334(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1011E43E8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1011E4430(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1011E4478(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1011E44C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102476AA8);
}

uint64_t sub_1011E44EC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1011E6DA8();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102476AA9;
        int v39 = v17;
        *(void *)long long buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        long long v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102317C50);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102317C50);
    }
    unsigned int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unsigned int v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    unsigned int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1011E4990(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102317C50);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102317C50);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1011E4C14(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102317C50);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102317C50);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                unsigned int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1011E4FE8(uint64_t a1, int *a2, unsigned char *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *((unsigned char *)v6 + 24) = *a3;
  *uint64_t v6 = off_102317DA0;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_1011E509C(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E50B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1011E5104(uint64_t a1, unsigned int *a2, unsigned char *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102317C50);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)long long buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v29 = v30;
    memset(v30, 0, sizeof(v30));
    long long v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    void *v18 = off_102317DA0;
    *((unsigned char *)v18 + 24) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_1011E5E68();
  }
  os_activity_scope_leave(&state);
}

void sub_1011E56E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1011E5734(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102317C50);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102317C50);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::listClients() [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102317C50);
    }
    char v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102317C50);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::listClients() [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102317C50);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102317C50);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::listClients() [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1011E5CE4(uint64_t a1)
{
  sub_1011E6D38(a1);

  operator delete();
}

id sub_1011E5D1C(uint64_t a1, int a2, void *a3)
{
  id result = sub_1011E6498(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1011E5D6C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_1011E5D9C()
{
  if (qword_102485F88 != -1) {
    dispatch_once(&qword_102485F88, &stru_102317C70);
  }
  Class result = objc_getClass("ACCBLEPairingProvider");
  qword_102485F80 = (uint64_t)result;
  off_102476AA0 = sub_1011E5E00;
  return result;
}

uint64_t sub_1011E5E00()
{
  return qword_102485F80;
}

void sub_1011E5E0C(id a1)
{
  qword_102485F90 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AccessoryBLEPairing.framework/AccessoryBLEPairing", 2);
}

void sub_1011E5E38(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_1011E5E68()
{
}

void sub_1011E5F14(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    char v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1011E6498(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_1011E6304(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102317C50);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102317C50);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLPencilState_Type::Notification, CLPencilState_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLPencilState_Type::Notification, NotificationData_T = CLPencilState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1011E6304(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1011E6498(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    Class result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_1011E63FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102317DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011E641C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102317DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1011E6478(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1011E6498(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1011E6534(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1011E68C0(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1011E6534(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1011E6C80((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102317DE0);
    }
    char v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DADFC8 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_102317DE0);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DADFC8 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_102317DE0);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DADFC8 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPencilState_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1011E68C0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102317DE0);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DADFC8 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPencilState_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102317DE0);
      }
      char v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DADFC8 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102317DE0);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1011E6C80(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102394340))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1) {
      sub_101AA5BA8();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1011E6D08(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1011E6D38(uint64_t a1)
{
  *(void *)a1 = off_102317E10;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1011E6DA8()
{
}

uint64_t sub_1011E6E54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1011E6E74(uint64_t a1, char *a2, uint64_t a3, char *a4)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  sub_100134750((void *)(a1 + 16), a2);
  *(void *)(a1 + 40) = a3;
  sub_100134750((void *)(a1 + 48), a4);
  sub_1011E6F0C(a1);
  return a1;
}

void sub_1011E6ED8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011E6F0C(uint64_t a1)
{
  if (sub_1011E77B0())
  {
    if (*(unsigned char *)a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      id v2 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        int v3 = (void *)(a1 + 16);
        if (*(char *)(a1 + 39) < 0) {
          int v3 = (void *)*v3;
        }
        *(_DWORD *)long long buf = 136315138;
        BOOL v41 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s is already enabled ", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102317E88);
        }
        uint64_t v4 = (void *)(a1 + 16);
        if (*(char *)(a1 + 39) < 0) {
          uint64_t v4 = (void *)*v4;
        }
        LODWORD(v38[0]) = 136315138;
        *(void **)((char *)v38 + 4) = v4;
        char v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
    else
    {
      sub_1011E7778(a1);
      if (*(char *)(a1 + 39) >= 0) {
        size_t v8 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        size_t v8 = *(void *)(a1 + 24);
      }
      __int16 v9 = v38;
      sub_1001110E4((uint64_t)v38, v8 + 10);
      uint64_t v10 = (void *)(a1 + 16);
      if (v39 < 0) {
        __int16 v9 = (void **)v38[0];
      }
      if (v8)
      {
        if (*(char *)(a1 + 39) >= 0) {
          __int16 v11 = (const void *)(a1 + 16);
        }
        else {
          __int16 v11 = *(const void **)(a1 + 16);
        }
        memmove(v9, v11, v8);
      }
      strcpy((char *)v9 + v8, "LastDumped");
      int v12 = sub_1011E7E50("MotionMetricsExportInterval");
      int v13 = sub_1011E7E50("MotionMetricsExportTimerInterval");
      if (v12 <= 0)
      {
        uint64_t v14 = sub_1000A6958();
        if (v39 >= 0) {
          id v15 = v38;
        }
        else {
          id v15 = (void **)v38[0];
        }
        sub_1004CF7DC(v14, (const char *)v15, 0xFFFFFFFFLL);
        int v12 = 864000;
      }
      if (v13 <= 0)
      {
        uint64_t v16 = sub_1000A6958();
        if (v39 >= 0) {
          uint64_t v17 = v38;
        }
        else {
          uint64_t v17 = (void **)v38[0];
        }
        sub_1004CF7DC(v16, (const char *)v17, 0xFFFFFFFFLL);
        int v13 = 864000;
      }
      *(unsigned char *)a1 = 1;
      if (v13 <= 300) {
        int v18 = 300;
      }
      else {
        int v18 = v13;
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      unint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        int v20 = (void *)(a1 + 16);
        if (*(char *)(a1 + 39) < 0) {
          int v20 = (void *)*v10;
        }
        *(_DWORD *)long long buf = 136315650;
        BOOL v41 = v20;
        __int16 v42 = 1024;
        int v43 = v18;
        __int16 v44 = 1024;
        int v45 = v12;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s: MotionMetricsExportTimerInterval = %d, MotionMetricsExportInterval = %d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102317E88);
        }
        if (*(char *)(a1 + 39) < 0) {
          uint64_t v10 = (void *)*v10;
        }
        int v32 = 136315650;
        uint64_t v33 = v10;
        __int16 v34 = 1024;
        int v35 = v18;
        __int16 v36 = 1024;
        int v37 = v12;
        __int16 v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      BOOL v21 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 40));
      *(void *)(a1 + 8) = v21;
      dispatch_source_set_timer(v21, 0, 0x45D964B800uLL, 0xDF8475800uLL);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3321888768;
      handler[2] = sub_1011E80BC;
      handler[3] = &unk_102317E58;
      handler[4] = a1;
      if (SHIBYTE(v39) < 0)
      {
        sub_1000DC48C(&__p, v38[0], (unint64_t)v38[1]);
      }
      else
      {
        long long __p = *(_OWORD *)v38;
        uint64_t v29 = v39;
      }
      int v30 = v12;
      int v31 = v18;
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      int v22 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting timer enabled ", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102317E88);
        }
        LOWORD(v32) = 0;
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      dispatch_source_set_event_handler(*(dispatch_source_t *)(a1 + 8), handler);
      dispatch_resume(*(dispatch_object_t *)(a1 + 8));
      if (SHIBYTE(v29) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v39) < 0) {
        operator delete(v38[0]);
      }
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102317E88);
    }
    int v6 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      char v7 = (void *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        char v7 = (void *)*v7;
      }
      *(_DWORD *)long long buf = 136315138;
      BOOL v41 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s is disabled ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      int v23 = (void *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        int v23 = (void *)*v23;
      }
      LODWORD(v38[0]) = 136315138;
      *(void **)((char *)v38 + 4) = v23;
      BOOL v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    sub_1011E7778(a1);
    *(unsigned char *)a1 = 0;
  }
}

void sub_1011E7724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011E7778(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 8));
    *(void *)(a1 + 8) = 0;
  }
}

BOOL sub_1011E77B0()
{
  sub_100103240();
  if (sub_10073E30C())
  {
    BOOL v16 = 0;
    sub_1000E9354(v15);
    if (sub_1004CEA84((uint64_t)v15, (uint64_t)"/Library/Managed Preferences/mobile/com.apple.nanolifestyle.plist")
      && sub_1000D29FC((uint64_t)v15, @"AppleInternalDataCollectionEnabled", &v16))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      uint64_t v0 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        BOOL v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "CLActivityLogger managed should enable data collection setting is %{public}d.", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_37:
        int v17 = 67240192;
        BOOL v18 = v16;
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLActivityDbExportAdapter::checkExportEnabled()", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
LABEL_34:
        BOOL v1 = v16;
        sub_10013F3C4(v15);
        return v1;
      }
    }
    else
    {
      CFBooleanRef v2 = (const __CFBoolean *)CFPreferencesCopyValue(@"AppleInternalDataCollectionEnabled", @"com.apple.nanolifestyle", @"mobile", kCFPreferencesAnyHost);
      CFBooleanRef v3 = v2;
      if (v2)
      {
        BOOL v16 = CFBooleanGetValue(v2) != 0;
        CFRelease(v3);
      }
      else
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102317E88);
        }
        uint64_t v4 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLActivityLogger Failed to get data collections enabled setting. It may not have been set yet.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102317E88);
          }
          LOWORD(v17) = 0;
          int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLActivityDbExportAdapter::checkExportEnabled()", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        int v5 = sub_1011E7E50("MotionMetricsExportInterval");
        int v6 = sub_1011E7E50("MotionMetricsExportTimerInterval");
        int v7 = v6;
        if (v5 < 1 || v6 <= 0)
        {
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102317E88);
          }
          __int16 v9 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 67109376;
            BOOL v22 = v5;
            __int16 v23 = 1024;
            int v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting is disabled MotionMetricsExportInterval, %d, MotionMetricsExportTimerInterval, %d", buf, 0xEu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102317E88);
            }
            int v17 = 67109376;
            BOOL v18 = v5;
            __int16 v19 = 1024;
            int v20 = v7;
            uint64_t v14 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLActivityDbExportAdapter::checkExportEnabled()", "%s\n", v14);
            if (v14 != (char *)buf) {
              free(v14);
            }
          }
          BOOL v8 = 0;
        }
        else
        {
          BOOL v8 = 1;
        }
        BOOL v16 = v8;
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        BOOL v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLActivityLogger should enable data collection is %{public}d.", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_37;
      }
    }
    dispatch_once(&qword_102418FD0, &stru_102317E88);
    goto LABEL_37;
  }
  return 0;
}

void sub_1011E7E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E7E50(const char *a1)
{
  v11[0] = 0;
  CFTypeRef cf = 0;
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, buf);
  int v3 = sub_10006EF84(*(uint64_t *)&buf[0], a1, v11);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v3) {
    return v11[0];
  }
  uint64_t v5 = sub_1000D3E78();
  sub_10006B564(v5, buf);
  int v6 = sub_1004D0164(*(uint64_t *)&buf[0], a1, &cf);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v6)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID()) {
      return CFStringGetIntValue((CFStringRef)cf);
    }
    return 0;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102317E88);
  }
  BOOL v8 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLActivityLogger read %s as CFStringRef failed", (uint8_t *)buf, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102317E88);
    }
    v11[1] = 136315138;
    int v12 = a1;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int readIntValueForMotionPreferenceKey(const char *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
    return 0;
  }
  return result;
}

void sub_1011E8098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011E80BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v27 = 0.0;
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v4 = sub_1000A6958();
  uint64_t v5 = (const char **)(a1 + 40);
  int v6 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    int v6 = *v5;
  }
  if ((sub_1000A699C(v4, v6, &v27) & 1) == 0) {
    double v27 = Current - (double)*(int *)(a1 + 64);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102317E88);
  }
  CFTypeID v7 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v8 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      BOOL v8 = *v5;
    }
    double v9 = v27 + (double)*(int *)(a1 + 68);
    uint64_t v10 = "Dumping";
    if (Current < v9) {
      uint64_t v10 = "Skipping";
    }
    *(_DWORD *)long long buf = 136316162;
    uint64_t v39 = v8;
    __int16 v40 = 2048;
    double v41 = v27;
    __int16 v42 = 2048;
    double v43 = Current;
    __int16 v44 = 2048;
    double v45 = v9;
    __int16 v46 = 2080;
    int v47 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s is %f, currentTime is %f, next dumping time is %f, %s", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102317E88);
    }
    BOOL v16 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      BOOL v16 = *v5;
    }
    double v17 = v27 + (double)*(int *)(a1 + 68);
    BOOL v18 = "Dumping";
    if (Current < v17) {
      BOOL v18 = "Skipping";
    }
    int v28 = 136316162;
    uint64_t v29 = v16;
    __int16 v30 = 2048;
    double v31 = v27;
    __int16 v32 = 2048;
    double v33 = Current;
    __int16 v34 = 2048;
    double v35 = v17;
    __int16 v36 = 2080;
    int v37 = v18;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (Current >= v27 + (double)*(int *)(a1 + 68))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102317E88);
    }
    __int16 v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        int v12 = *(const char **)v12;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v39 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLActivityLogger exporting %s metrics with OSAWriteLogForSubmission", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      int v20 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        int v20 = *(const char **)v20;
      }
      int v28 = 136315138;
      uint64_t v29 = v20;
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    uint64_t v13 = off_102476DD0();
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3321888768;
    v23[2] = sub_1011E8828;
    v23[3] = &unk_102317E28;
    v23[4] = v2;
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1000DC48C(&__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      long long __p = *(_OWORD *)v5;
      uint64_t v25 = *(void *)(a1 + 56);
    }
    double v26 = Current;
    if (off_102476DD8(v13, @"CMActivityLog", 0, 0, (uint64_t)v23))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      uint64_t v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLActivityLogger successfully submit iOS data analysis with type kOSAProblemTypeMotionState", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_38;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_56:
        LOWORD(v28) = 0;
        BOOL v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
LABEL_38:
        if (SHIBYTE(v25) < 0) {
          operator delete((void *)__p);
        }
        return;
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      id v15 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning CLActivityLogger failed to submit iOS data analysis with type kOSAProblemTypeMotionState", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_38;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_56;
      }
    }
    dispatch_once(&qword_102418FD0, &stru_102317E88);
    goto LABEL_56;
  }
}

void sub_1011E87F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011E8828(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (const char **)(v4 + 48);
  int v6 = (const char *)(v4 + 48);
  if (*(char *)(v4 + 71) < 0) {
    int v6 = *v5;
  }
  CFTypeID v7 = +[NSFileHandle fileHandleForReadingAtPath:](NSFileHandle, "fileHandleForReadingAtPath:", +[NSString stringWithUTF8String:v6]);
  if (v7)
  {
    BOOL v8 = v7;
    double v9 = [(NSFileHandle *)v7 readDataOfLength:1000];
    if (v9)
    {
      uint64_t v10 = v9;
      do
      {
        if (![(NSData *)v10 length]) {
          break;
        }
        [a2 writeData:v10];
        uint64_t v10 = [(NSFileHandle *)v8 readDataOfLength:1000];
      }
      while (v10);
    }
    [(NSFileHandle *)v8 closeFile];
    __int16 v11 = (const char *)(v4 + 48);
    if (*(char *)(v4 + 71) < 0) {
      __int16 v11 = *v5;
    }
    if (unlink(v11))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      int v12 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v13 = (const char *)(v4 + 48);
        if (*(char *)(v4 + 71) < 0) {
          uint64_t v13 = *v5;
        }
        *(_DWORD *)long long buf = 136446210;
        int v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "CLActivityLogger cannot unlink file %{public}s ", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102317E88);
        }
        uint64_t v14 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n");
LABEL_37:
        if (v14 != buf) {
          free(v14);
        }
      }
    }
    else
    {
      uint64_t v17 = sub_1000A6958();
      BOOL v18 = (const char *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        BOOL v18 = *(const char **)v18;
      }
      sub_10016332C(v17, v18, (const void *)(a1 + 64));
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102317E88);
    }
    id v15 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      BOOL v16 = (const char *)(v4 + 48);
      if (*(char *)(v4 + 71) < 0) {
        BOOL v16 = *v5;
      }
      *(_DWORD *)long long buf = 136446210;
      int v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLActivityLogger cannot open source file %{public}s ", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102317E88);
      }
      uint64_t v14 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke", "%s\n");
      goto LABEL_37;
    }
  }
}

void *sub_1011E8C44(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  long long v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_1011E8C74(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t sub_1011E8C88(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1011E8CD4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1011E8D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_102485F98 != -1) {
    dispatch_once(&qword_102485F98, &stru_102317EA8);
  }
  uint64_t v10 = (uint64_t (*)())dlsym((void *)qword_102485FA0, "OSAWriteLogForSubmission");
  off_102476DD8 = v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

void sub_1011E8DB0(id a1)
{
  qword_102485FA0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 2);
}

uint64_t sub_1011E8DDC()
{
  if (qword_102485F98 != -1) {
    dispatch_once(&qword_102485F98, &stru_102317EA8);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_102485FA0, "kOSAProblemTypeMotionState");
  if (v0)
  {
    uint64_t result = *v0;
    qword_102485FA8 = result;
  }
  else
  {
    uint64_t result = qword_102485FA8;
  }
  off_102476DD0 = sub_1011E8E5C;
  return result;
}

uint64_t sub_1011E8E5C()
{
  return qword_102485FA8;
}

uint64_t sub_1011E8E68(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0x80000000;
  *(void *)(a1 + 168) = a2;
  *(void *)(a1 + 176) = 0xBFF0000000000000;
  sub_100B856B0(a1 + 184);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 11936) = _Q0;
  *(_DWORD *)(a1 + 11952) = 0;
  *(_WORD *)(a1 + 11956) = 0;
  *(void *)(a1 + 11960) = 0xBFF0000000000000;
  return a1;
}

__n128 sub_1011E8F10(uint64_t a1, uint64_t a2)
{
  if (sub_100B85A74(a1 + 184))
  {
    __n128 result = *(__n128 *)(a1 + 11856);
    long long v5 = *(_OWORD *)(a1 + 11872);
    long long v6 = *(_OWORD *)(a1 + 11888);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 11904);
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
    *(__n128 *)a2 = result;
  }
  return result;
}

uint64_t sub_1011E8F5C(uint64_t result, uint64_t a2)
{
  if (*(int *)(result + 11952) >= 4 && !*(_DWORD *)(a2 + 124)) {
    *(_DWORD *)(a2 + 124) = 6;
  }
  if (*(unsigned char *)(result + 11956))
  {
    if (!*(_DWORD *)(a2 + 100)) {
      *(_DWORD *)(a2 + 100) = 6;
    }
  }
  return result;
}

float sub_1011E8F9C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  float v3 = 0.0;
  float v4 = 0.0;
  if (v2) {
    float v4 = *(float *)a2 / (float)v2;
  }
  *(float *)BOOL v21 = v4;
  unint64_t v5 = *(void *)(a2 + 24);
  if (v5) {
    float v3 = *(float *)(a2 + 16) / (float)v5;
  }
  *(float *)&v21[1] = v3;
  unint64_t v6 = *(void *)(a2 + 40);
  float v7 = 0.0;
  float v8 = 0.0;
  if (v6) {
    float v8 = *(float *)(a2 + 32) / (float)v6;
  }
  *(float *)&v21[2] = v8;
  unint64_t v9 = *(void *)(a2 + 88);
  if (v9) {
    float v7 = *(float *)(a2 + 80) / (float)v9;
  }
  *(float *)&v21[3] = v7;
  unint64_t v10 = *(void *)(a2 + 104);
  float v11 = 0.0;
  float v12 = 0.0;
  if (v10) {
    float v12 = *(float *)(a2 + 96) / (float)v10;
  }
  *(float *)&v21[4] = v12;
  unint64_t v13 = *(void *)(a2 + 120);
  if (v13) {
    float v11 = *(float *)(a2 + 112) / (float)v13;
  }
  float v14 = (float)*(int *)(a2 + 160);
  *(float *)&v21[5] = v11;
  *(float *)&v21[6] = v14;
  unint64_t v15 = *(void *)(a2 + 152);
  if (v15) {
    float v16 = *(float *)(a2 + 144) / (float)v15;
  }
  else {
    float v16 = 0.0;
  }
  *(float *)&v21[7] = v16;
  v18[0] = xmmword_101DAE028;
  v18[1] = unk_101DAE038;
  int v19 = 1037899651;
  sub_100081994((uint64_t)v21, v20, (int *)v18, 2, 8);
  return v20[1];
}

void sub_1011E90EC(uint64_t a1@<X0>, double **a2@<X8>, double a3@<D0>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 128))(*(void *)(a1 + 168));
  uint64_t v7 = (*(uint64_t (**)(void, double))(**(void **)(a1 + 168) + 128))(*(void *)(a1 + 168), *(double *)(a1 + 176));
  int v8 = v6 - v7;
  double v9 = a3 - *(double *)(a1 + 176);
  float v10 = sub_1011E8F9C(v7, a1);
  BOOL v11 = 0;
  BOOL v13 = v8 <= 5 && v9 > 15.0 && v9 < 240.0;
  if (v13 && v10 > 0.275) {
    BOOL v11 = *(float *)(a1 + 80) > 5.0;
  }
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_102317EC8);
  }
  float v14 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v15 = *(void *)(a1 + 8);
    float v16 = 0.0;
    float v17 = 0.0;
    if (v15) {
      float v17 = *(float *)a1 / (float)v15;
    }
    unint64_t v18 = *(void *)(a1 + 24);
    if (v18) {
      float v16 = *(float *)(a1 + 16) / (float)v18;
    }
    unint64_t v19 = *(void *)(a1 + 40);
    float v20 = 0.0;
    float v21 = 0.0;
    if (v19) {
      float v21 = *(float *)(a1 + 32) / (float)v19;
    }
    unint64_t v22 = *(void *)(a1 + 56);
    if (v22) {
      float v20 = *(float *)(a1 + 48) / (float)v22;
    }
    unint64_t v23 = *(void *)(a1 + 72);
    float v24 = 0.0;
    float v25 = 0.0;
    if (v23) {
      float v25 = *(float *)(a1 + 64) / (float)v23;
    }
    unint64_t v26 = *(void *)(a1 + 88);
    float v27 = *(float *)(a1 + 80);
    if (v26) {
      float v24 = v27 / (float)v26;
    }
    unint64_t v28 = *(void *)(a1 + 104);
    float v29 = 0.0;
    float v30 = 0.0;
    if (v28) {
      float v30 = *(float *)(a1 + 96) / (float)v28;
    }
    unint64_t v31 = *(void *)(a1 + 120);
    if (v31) {
      float v29 = *(float *)(a1 + 112) / (float)v31;
    }
    unint64_t v32 = *(void *)(a1 + 136);
    float v33 = 0.0;
    float v34 = 0.0;
    if (v32) {
      float v34 = *(float *)(a1 + 128) / (float)v32;
    }
    uint64_t v35 = *(void *)(a1 + 11936);
    uint64_t v36 = *(void *)(a1 + 11944);
    int v37 = *(_DWORD *)(a1 + 160);
    unint64_t v38 = *(void *)(a1 + 152);
    if (v38) {
      float v33 = *(float *)(a1 + 144) / (float)v38;
    }
    *(_DWORD *)long long buf = 134222592;
    double v54 = a3;
    __int16 v55 = 1024;
    BOOL v56 = v11;
    __int16 v57 = 2048;
    double v58 = v10;
    __int16 v59 = 1024;
    int v60 = v8;
    __int16 v61 = 2048;
    double v62 = v9;
    __int16 v63 = 2048;
    double v64 = v17;
    __int16 v65 = 2048;
    double v66 = v16;
    __int16 v67 = 2048;
    double v68 = v21;
    __int16 v69 = 2048;
    double v70 = v20;
    __int16 v71 = 2048;
    double v72 = v25;
    __int16 v73 = 2048;
    double v74 = v24;
    __int16 v75 = 2048;
    double v76 = v27;
    __int16 v77 = 2048;
    double v78 = v30;
    __int16 v79 = 2048;
    double v80 = v29;
    __int16 v81 = 2048;
    double v82 = v34;
    __int16 v83 = 2048;
    uint64_t v84 = v35;
    __int16 v85 = 2048;
    uint64_t v86 = v36;
    __int16 v87 = 1024;
    int v88 = v37;
    __int16 v89 = 2048;
    double v90 = v33;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Kicking,turnTime,%f,isKicking,%d,prob,%f,strokes,%d,deltaT,%f,accelXY,%f,accelZ,%f,ratio,%f,peakAccel,%f,yaw,%f,meanEpoch,%f,totalEpoch,%f,vertToHoriz,%f,medianCross,%f,accelToGyroHF,%f,startTime,%f,endTime,%f,maxKicks,%d,trimmedYaw,%f", buf, 0xB4u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_102317EC8);
    }
    __int16 v52 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLMotionTypeTimestamp> CLSwimKickingDetector::addTurn(CLMotionTypeTimestamp)", "%s\n", v52);
    if (v52 != (char *)buf) {
      free(v52);
    }
  }
  if (v11)
  {
    double v39 = (*(float (**)(void))(**(void **)(a1 + 168) + 168))(*(void *)(a1 + 168));
    double v40 = *(double *)(a1 + 176) + v39;
    if (v40 < a3)
    {
      double v41 = a2 + 2;
      __int16 v42 = a2[1];
      do
      {
        if ((unint64_t)v42 >= *v41)
        {
          __int16 v44 = *a2;
          uint64_t v45 = v42 - *a2;
          unint64_t v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v47 = *v41 - (void)v44;
          if (v47 >> 2 > v46) {
            unint64_t v46 = v47 >> 2;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v46;
          }
          if (v48)
          {
            uint64_t v49 = (char *)sub_1000DA54C((uint64_t)(a2 + 2), v48);
            __int16 v44 = *a2;
            __int16 v42 = a2[1];
          }
          else
          {
            uint64_t v49 = 0;
          }
          int v50 = (double *)&v49[8 * v45];
          *int v50 = v40;
          double v43 = v50 + 1;
          while (v42 != v44)
          {
            uint64_t v51 = *((void *)v42-- - 1);
            *((void *)v50-- - 1) = v51;
          }
          *a2 = v50;
          a2[1] = v43;
          a2[2] = (double *)&v49[8 * v48];
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          *__int16 v42 = v40;
          double v43 = v42 + 1;
        }
        a2[1] = v43;
        double v40 = v40 + v39;
        __int16 v42 = v43;
      }
      while (v40 < a3);
    }
  }
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0x80000000;
  *(double *)(a1 + 176) = a3;
  *(void *)(a1 + 11936) = *(void *)(a1 + 11944);
  *(_DWORD *)(a1 + 11952) = 0;
}

void sub_1011E9880(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011E98B0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = (char *)(a1 + 11904);
  if (sub_100B856B4(a1 + 184, (float *)a2, a3, a4))
  {
    float v8 = *(float *)(a1 + 11868);
    float v9 = *(float *)(a1 + 11876);
    float v10 = *(float *)(a1 + 11884);
    float v11 = *(float *)(a1 + 11888);
    float v12 = *(float *)(a1 + 11896);
    float v13 = *(float *)(a1 + 11900);
    char v14 = *v7;
    *(float *)a1 = *(float *)(a1 + 11872) + *(float *)a1;
    ++*(void *)(a1 + 8);
    *(float *)(a1 + 16) = v9 + *(float *)(a1 + 16);
    ++*(void *)(a1 + 24);
    *(float *)(a1 + 32) = v10 + *(float *)(a1 + 32);
    int v15 = *(_DWORD *)(a1 + 11892);
    ++*(void *)(a1 + 40);
    *(float *)(a1 + 48) = v11 + *(float *)(a1 + 48);
    ++*(void *)(a1 + 56);
    *(float *)(a1 + 64) = v8 + *(float *)(a1 + 64);
    ++*(void *)(a1 + 72);
    float v16 = 1.0;
    if ((v14 & 1) == 0) {
      float v16 = 0.0;
    }
    *(float *)(a1 + 80) = v16 + *(float *)(a1 + 80);
    ++*(void *)(a1 + 88);
    *(float *)(a1 + 96) = v12 + *(float *)(a1 + 96);
    ++*(void *)(a1 + 104);
    *(float *)(a1 + 112) = *(float *)(a1 + 112) + (float)v15;
    ++*(void *)(a1 + 120);
    *(float *)(a1 + 128) = v13 + *(float *)(a1 + 128);
    ++*(void *)(a1 + 136);
    v7[53] = v14 & 1;
    if (v14)
    {
      int v17 = *(_DWORD *)(a1 + 11952) + 1;
      *(_DWORD *)(a1 + 11952) = v17;
      *(float *)(a1 + 144) = v8 + *(float *)(a1 + 144);
      ++*(void *)(a1 + 152);
      *(double *)(a1 + 11960) = a3;
    }
    else
    {
      int v17 = 0;
      *(_DWORD *)(a1 + 11952) = 0;
    }
    if (*(_DWORD *)(a1 + 160) < v17) {
      *(_DWORD *)(a1 + 160) = v17;
    }
  }
  else
  {
    int v17 = *(_DWORD *)(a1 + 11952);
  }
  *(double *)(a1 + 11944) = a3;
  if (v17 <= 5)
  {
    if (vabdd_f64(a3, *(double *)(a1 + 11960)) <= 10.0) {
      goto LABEL_15;
    }
    char v18 = 0;
  }
  else
  {
    char v18 = 1;
  }
  v7[52] = v18;
LABEL_15:
  if (*(double *)(a1 + 176) == -1.0)
  {
    *(void *)(a1 + 176) = *(void *)(a2 + 56);
    *(double *)(a1 + 11936) = a3;
  }
  return 0;
}

void sub_1011E9AB0(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t *sub_1011E9AE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:19 registrationInfo:0];
  return a1;
}

uint64_t sub_1011E9B1C(uint64_t a1)
{
  if (*(void *)a1) {
    [*(id *)(*(void *)a1 + 16) unregister:*(void *)(*(void *)a1 + 8) forNotification:19];
  }
  return a1;
}

uint64_t *sub_1011E9B5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  uint64_t v6 = v4;
  sub_1011E9B1C((uint64_t)&v6);
  return a1;
}

uint64_t sub_1011E9BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_102317EF8;
  sub_100513074(a1 + 8, a2, 1, 1);
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(unsigned char *)(a1 + 288) = 0;
  double v5 = sub_101171D90(a1 + 304);
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 356) = 0;
  *(void *)(a1 + 360) = 0;
  [*(id *)(a1 + 24) silo:v5];
  CLMotionActivity::init((CLMotionActivity *)(a1 + 40));
  *(void *)(a1 + 344) = objc_alloc_init((Class)GEOLocationShifter);
  *(_DWORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  sub_1000C7F88(&v10);
  char v6 = *(unsigned char *)(a1 + 356);
  char v12 = 0;
  int v7 = sub_1000D2988(v10, "EnableLaneEstimation", (BOOL *)&v12);
  char v8 = v12;
  if (!v7) {
    char v8 = v6;
  }
  *(unsigned char *)(a1 + 356) = v8;
  if (v11)
  {
    sub_1000DB0A0(v11);
    char v8 = *(unsigned char *)(a1 + 356);
  }
  sub_1011E9D44(a1, v8 != 0);
  return a1;
}

void sub_1011E9CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  uint64_t v14 = v12[45];
  v12[45] = 0;
  if (v14) {
    sub_1011F15D0((uint64_t)(v12 + 45), v14);
  }
  uint64_t v15 = v12[37];
  v12[37] = 0;
  if (v15) {
    sub_10045F2A8((uint64_t)(v12 + 37), v15);
  }
  float v16 = (std::__shared_weak_count *)v12[35];
  if (v16) {
    sub_1000DB0A0(v16);
  }
  int v17 = (std::__shared_weak_count *)v12[33];
  if (v17) {
    sub_1000DB0A0(v17);
  }
  char v18 = (std::__shared_weak_count *)v12[31];
  if (v18) {
    sub_1000DB0A0(v18);
  }
  sub_10051310C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E9D44(uint64_t result, int a2)
{
  *(unsigned char *)(result + 356) = a2;
  if (a2) {
    operator new();
  }
  return result;
}

uint64_t sub_1011E9E68(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  if (CLMotionActivity::isStatic((CLMotionActivity *)a3)
    && (CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 40)) & 1) == 0)
  {
    *(void *)(a1 + 176) = *a2;
  }
  *(void *)(a1 + 32) = *a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a3;
  long long v7 = *(_OWORD *)(a3 + 16);
  long long v8 = *(_OWORD *)(a3 + 32);
  long long v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  long long v10 = *(_OWORD *)(a3 + 80);
  long long v11 = *(_OWORD *)(a3 + 96);
  long long v12 = *(_OWORD *)(a3 + 112);
  *(void *)(a1 + 168) = *(void *)(a3 + 128);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  int v13 = *(_DWORD *)(a1 + 352);
  if (v13)
  {
    *(_DWORD *)(a1 + 40) = v13;
    *(_DWORD *)(a1 + 44) = 2;
    *(_DWORD *)(a1 + 52) = 0;
    *(void *)(a1 + 176) = 0xBFF0000000000000;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return 1;
}

void sub_1011E9F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011E9F9C(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v5 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  *(void *)(v5 + 176) = *a3;
  *(_DWORD *)(v5 + 184) = *a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

uint64_t sub_1011EA030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 256);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 144))(v4, a2, a3);
  }
  uint64_t result = *(void *)(a1 + 272);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 144);
    return v6();
  }
  return result;
}

uint64_t sub_1011EA0E4(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  uint64_t v2 = v1[31];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  return (*(uint64_t (**)(void *))(*v1 + 24))(v1);
}

void sub_1011EA194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EA1AC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  uint64_t v2 = v1[31];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  return (*(uint64_t (**)(void *))(*v1 + 24))(v1);
}

void sub_1011EA25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EA274(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  uint64_t v2 = v1[31];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  return (*(uint64_t (**)(void *))(*v1 + 24))(v1);
}

void sub_1011EA324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EA33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 248);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 104))(v5, a2);
  }
  *(unsigned char *)(a1 + 288) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 24))(v4);
}

void sub_1011EA404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EA41C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v18 = a1 + 8;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 8);
  __int16 v19 = 256;
  *(void *)(v5 + 188) = a2;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
  uint64_t v6 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a1 + 196);
    long long v8 = (v7 - 1) > 5 ? "Unavailable" : (&off_102318010)[v7 - 1];
    sub_100134750(&v26, v8);
    long long v9 = v30 >= 0 ? (void **)&v26 : v26;
    int v10 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)long long buf = 67240706;
    int v21 = v7;
    __int16 v22 = 2082;
    unint64_t v23 = v9;
    __int16 v24 = 1026;
    int v25 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,signalEnvironment,%{public}d,name,%{public}s,fidelity,%{public}d", buf, 0x18u);
    if (SHIBYTE(v30) < 0) {
      operator delete(v26);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v12 = *(_DWORD *)(a1 + 196);
    sub_100DC0794(v12, __p);
    if (v17 >= 0) {
      int v13 = __p;
    }
    else {
      int v13 = (void **)__p[0];
    }
    int v14 = *(_DWORD *)(a1 + 200);
    LODWORD(v26) = 67240706;
    HIDWORD(v26) = v12;
    __int16 v27 = 2082;
    unint64_t v28 = v13;
    __int16 v29 = 1026;
    int v30 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngineBase::setSignalEnvironment(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_1011EA6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EA72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  int v5 = *(_DWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 196) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 212) = v6;
  *(_DWORD *)(v4 + 228) = v5;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
  int v7 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(_DWORD *)(a1 + 212);
    int v9 = *(_DWORD *)(a1 + 216);
    *(_DWORD *)long long buf = 67240448;
    int v13 = v8;
    __int16 v14 = 1026;
    int v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,fitnessSession,%{public}d,predicted,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngineBase::setFitnessActivity(const CLWorkoutUpdate)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1011EA970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011EA998(CLMotionActivity *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 4);
  *(void *)(a4 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 12);
  *(void *)(a4 + 40) = v9;
  *(void *)(a4 + 56) = v8;
  *(void *)(a4 + 64) = v9;
  unsigned int v10 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a4 + 404) = v10;
  *(void *)(a4 + 408) = *(void *)(a2 + 88);
  *(unsigned char *)(a4 + 351) = *(_DWORD *)(a2 + 132) == 2;
  *(void *)(a4 + 104) = *(void *)(a2 + 60);
  *(void *)(a4 + 192) = *(void *)(a2 + 68);
  *(void *)(a4 + 72) = *(void *)(a2 + 28);
  if (v10 > 9 || ((1 << v10) & 0x20A) == 0 || (double v11 = *(double *)(a3 + 24), v11 == 0.0)) {
    double v11 = *(double *)(a2 + 76);
  }
  *(double *)(a4 + 8) = v11;
  *(void *)(a4 + 80) = *(void *)(a2 + 20);
  *(_OWORD *)(a4 + 88) = *(_OWORD *)(a2 + 36);
  *(void *)(a4 + 184) = *(void *)(a2 + 52);
  *(_DWORD *)(a4 + 224) = LODWORD(this->timestamp);
  *(_DWORD *)(a4 + 344) = HIDWORD(this->timestamp);
  *(unsigned char *)(a4 + 228) = CLMotionActivity::isStatic((CLMotionActivity *)&this->timestamp);
  *(void *)(a4 + 352) = *(void *)&this[2].mountedConfidence;
  *(unsigned char *)(a4 + 229) = CLMotionActivity::isMounted((CLMotionActivity *)&this->timestamp);
  *(unsigned char *)(a4 + 360) = *(unsigned char *)(a3 + 356);
  if (*(_DWORD *)&this[2].isStanding == 2 && *(double *)(a2 + 76) - this[2].conservativeMountedProbability < 60.0) {
    *(unsigned char *)(a4 + 348) = 1;
  }
  float v12 = *(float *)(a3 + 40);
  if (v12 > 0.0)
  {
    float v13 = *(float *)(a3 + 44);
    if (v13 > 0.0)
    {
      float v14 = *(float *)(a3 + 48);
      if (v14 >= 0.0)
      {
        *(double *)(a4 + 200) = v12;
        *(double *)(a4 + 208) = v13;
        *(double *)(a4 + 216) = v14;
      }
    }
  }
  *(_OWORD *)(a4 + 368) = *(_OWORD *)(a2 + 4);
  double v15 = *(double *)(a3 + 32);
  *(double *)(a4 + 16) = v15;
  double v16 = *(double *)(a3 + 344);
  *(double *)(a4 + 24) = v16;
  double v17 = *(double *)(a4 + 8);
  if (v17 > 0.0)
  {
    if (v15 <= 0.0)
    {
      uint64_t v18 = *(void *)&this[3].estExitTime;
      if (!v18) {
        operator new();
      }
      *(void *)long long buf = 0xBFF0000000000000;
      *(double *)__int16 v27 = v17;
      sub_100B0198C(v18, (double *)v27, (double *)buf);
      double v15 = *(double *)buf;
      *(void *)(a4 + 16) = *(void *)buf;
      double v16 = *(double *)(a4 + 24);
    }
    if (v16 <= 0.0)
    {
      uint64_t v19 = *(void *)&this[3].estExitTime;
      if (!v19) {
        operator new();
      }
      *(void *)long long buf = 0xBFF0000000000000;
      *(double *)__int16 v27 = v15;
      sub_100B01398(v19, (double *)v27, (double *)buf);
      *(void *)(a4 + 24) = *(void *)buf;
    }
  }
  *(_DWORD *)(a4 + 400) = *(_DWORD *)(a3 + 536);
  *(void *)(a4 + 416) = *(void *)&this[2].tilt;
  uint64_t v20 = sub_1011EADD8((uint64_t)this, a4, &v26);
  if ((v20 & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v21 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(void *)(a4 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,applyChinaShift() returned false", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      uint64_t v24 = *(void *)(a4 + 8);
      *(_DWORD *)__int16 v27 = 134349056;
      *(void *)&v27[4] = v24;
      int v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatchingEngineBase::fillCrumb(const CLDaemonLocation &, const CLDaemonLocationPrivate &, CLMapCrumb &) const", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
  }
  return v20;
}

uint64_t sub_1011EADD8(uint64_t a1, uint64_t a2, char *a3)
{
  *a3 = 0;
  if (!sub_1003BFEDC(*(double *)(a2 + 56), *(double *)(a2 + 64))) {
    return 1;
  }
  if (*(unsigned char *)(a2 + 351))
  {
    uint64_t result = 1;
    *a3 = 1;
    return result;
  }
  double v7 = *(double *)(a2 + 56);
  double v8 = *(double *)(a2 + 64);
  if ((+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", v7, v8) & 1) == 0)
  {
    *a3 = 0;
    return 1;
  }
  long long v12 = 0uLL;
  double v9 = *(double *)(a2 + 80);
  uint64_t v11 = 0;
  uint64_t result = (uint64_t)[*(id *)(a1 + 344) shiftCoordinate:&v12 accuracy:&v11 shiftedCoordinate:v7 shiftedAccuracy:v8];
  if (result)
  {
    *(_OWORD *)(a2 + 56) = v12;
    *(void *)(a2 + 80) = v11;
    char v10 = 1;
    *(unsigned char *)(a2 + 351) = 1;
  }
  else
  {
    char v10 = 0;
  }
  *a3 = v10;
  return result;
}

uint64_t sub_1011EAEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 256);
  if (!v3) {
    return 0;
  }
  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
  {
    int isStatic = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 40));
    uint64_t v3 = *(void *)(a1 + 256);
    if (isStatic)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      return 0;
    }
  }
  long long v6 = *(uint64_t (**)(void))(*(void *)v3 + 16);

  return v6();
}

double sub_1011EAF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1013E7488(a2, (double *)(a1 + 304));
  if (!*(unsigned char *)(a2 + 265))
  {
    *(_OWORD *)(a3 + 4) = *(_OWORD *)(a2 + 368);
    *(void *)(a3 + 60) = *(void *)(a2 + 168);
    *(void *)(a3 + 116) = *(void *)(a2 + 104);
    *(void *)(a3 + 20) = *(void *)(a2 + 80);
  }
  double result = *(double *)(a2 + 192);
  *(double *)(a3 + 68) = result;
  *(unsigned char *)(a4 + 52) = *(unsigned char *)(a2 + 350);
  return result;
}

uint64_t sub_1011EAFDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v9 = a1 + 1;
  uint64_t v8 = a1[1];
  __int16 v65 = a1 + 1;
  (*(void (**)(void *))(v8 + 16))(a1 + 1);
  __int16 v66 = 256;
  uint64_t v10 = v9[31];
  if (v10 && a1[30])
  {
    long long v11 = *(_OWORD *)(a4 + 80);
    long long v85 = *(_OWORD *)(a4 + 64);
    long long v86 = v11;
    long long v12 = *(_OWORD *)(a4 + 112);
    long long v87 = *(_OWORD *)(a4 + 96);
    long long v88 = v12;
    long long v13 = *(_OWORD *)(a4 + 16);
    long long v81 = *(_OWORD *)a4;
    long long v82 = v13;
    long long v14 = *(_OWORD *)(a4 + 48);
    long long v83 = *(_OWORD *)(a4 + 32);
    long long v84 = v14;
    if (*(char *)(a4 + 151) < 0)
    {
      sub_1000DC48C(&v89, *(void **)(a4 + 128), *(void *)(a4 + 136));
      uint64_t v10 = a1[32];
    }
    else
    {
      std::string v89 = *(std::string *)(a4 + 128);
    }
    memcpy(v90, (const void *)(a4 + 152), sizeof(v90));
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a4) & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      __int16 v42 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v43 = *(void *)(a4 + 8);
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,match() returned false", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        uint64_t v48 = *(void *)(a4 + 8);
        int v67 = 134349056;
        uint64_t v68 = v48;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v49);
        if (v49 != buf) {
          free(v49);
        }
      }
      uint64_t v17 = 0;
      goto LABEL_60;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[32] + 160))(&v63);
    int v18 = (*(uint64_t (**)(void))(*(void *)a1[32] + 168))(a1[32]);
    sub_100134750(__p, "NoRouteHintCrumb");
    sub_1013E65F8(a4, (uint64_t *)__p);
    if (v62 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v19 = a1[34];
    if (v19 && (*(unsigned int (**)(uint64_t, double))(*(void *)v19 + 88))(v19, *(double *)(a4 + 24)))
    {
      if (((*(uint64_t (**)(void, long long *))(*(void *)a1[34] + 32))(a1[34], &v81) & 1) == 0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        __int16 v44 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349056;
          *(void *)&uint8_t buf[4] = *((void *)&v81 + 1);
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,matchRouteHints() returned false", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317FF0);
          }
          int v67 = 134349056;
          uint64_t v68 = *((void *)&v81 + 1);
          int v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v50);
          if (v50 != buf) {
            free(v50);
          }
        }
        uint64_t v17 = 0;
        goto LABEL_58;
      }
      sub_100134750(v59, "RouteHintCrumb");
      sub_1013E65F8((uint64_t)&v81, (uint64_t *)v59);
      if (v60 < 0) {
        operator delete(v59[0]);
      }
      if (v90[112])
      {
        long long v20 = v86;
        *(_OWORD *)(a4 + 64) = v85;
        *(_OWORD *)(a4 + 80) = v20;
        long long v21 = v88;
        *(_OWORD *)(a4 + 96) = v87;
        *(_OWORD *)(a4 + 112) = v21;
        long long v22 = v82;
        *(_OWORD *)a4 = v81;
        *(_OWORD *)(a4 + 16) = v22;
        long long v23 = v84;
        *(_OWORD *)(a4 + 32) = v83;
        *(_OWORD *)(a4 + 48) = v23;
        std::string::operator=((std::string *)(a4 + 128), &v89);
        memcpy((void *)(a4 + 152), v90, 0x118uLL);
        (*(void (**)(unsigned char *__return_ptr))(*(void *)a1[34] + 160))(buf);
        uint64_t v24 = *(void *)buf;
        int v25 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        char v26 = v64;
        uint64_t v63 = v24;
        double v64 = v25;
        if (v26) {
          sub_1000DB0A0(v26);
        }
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
        int v18 = (*(uint64_t (**)(void))(*(void *)a1[32] + 168))(a1[32]);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        __int16 v27 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349056;
          *(void *)&uint8_t buf[4] = *((void *)&v81 + 1);
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using solution with route hints", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317FF0);
          }
          int v67 = 134349056;
          uint64_t v68 = *((void *)&v81 + 1);
          double v58 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v58);
          if (v58 != buf) {
            free(v58);
          }
        }
      }
    }
    sub_1011EAF68((uint64_t)a1, a4, a2, a3);
    uint64_t v28 = a1[45];
    if (v28)
    {
      *(_DWORD *)(a3 + 124) = -1;
      *(void *)(a3 + 128) = 0xBFF0000000000000;
      *(void *)(a3 + 136) = -1;
      *(void *)(a3 + 144) = 0;
      *(void *)(a3 + 152) = 0;
      *(void *)(a3 + 160) = 0xBFF0000000000000;
      uint64_t v17 = 1;
      if (!*(unsigned char *)(a4 + 264) || *(unsigned char *)(a4 + 265) || !sub_100718E38(v28, &v63, v18, a4))
      {
LABEL_58:
        if (v64) {
          sub_1000DB0A0(v64);
        }
LABEL_60:
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        goto LABEL_62;
      }
      uint64_t v29 = a1[45];
      int v30 = *(std::__shared_weak_count **)(v29 + 16);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *(void *)(v29 + 40);
      uint64_t v32 = *(void *)(v29 + 64);
      double v33 = (double)(int)*(double *)(v29 + 32);
      long long v34 = *(_OWORD *)(v29 + 48);
      *(_DWORD *)(a3 + 124) = *(_DWORD *)(v29 + 24);
      *(double *)(a3 + 128) = v33;
      *(void *)(a3 + 136) = v31;
      *(_OWORD *)(a3 + 144) = v34;
      *(void *)(a3 + 160) = v32;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      uint64_t v35 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        int v36 = *(_DWORD *)(a3 + 124);
        uint64_t v37 = *(void *)(a3 + 128);
        uint64_t v38 = *(void *)(a3 + 136);
        uint64_t v39 = *(void *)(a3 + 144);
        uint64_t v40 = *(void *)(a3 + 152);
        uint64_t v41 = *(void *)(a3 + 160);
        *(_DWORD *)long long buf = 134350593;
        *(void *)&uint8_t buf[4] = *((void *)&v81 + 1);
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v36;
        __int16 v92 = 2050;
        uint64_t v93 = v37;
        __int16 v94 = 2049;
        uint64_t v95 = v38;
        __int16 v96 = 2050;
        uint64_t v97 = v39;
        __int16 v98 = 2050;
        uint64_t v99 = v40;
        __int16 v100 = 2050;
        uint64_t v101 = v41;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLMMLE,%{public}.1lf,estimatedLane,%{public}d,laneProbability,%{public}.2lf,featureId,%{private}lld,LL,%{public}.7lf,%{public}.7lf,course,%{public}.1lf", buf, 0x44u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        int v51 = *(_DWORD *)(a3 + 124);
        uint64_t v52 = *(void *)(a3 + 128);
        uint64_t v53 = *(void *)(a3 + 136);
        uint64_t v54 = *(void *)(a3 + 144);
        uint64_t v55 = *(void *)(a3 + 152);
        uint64_t v56 = *(void *)(a3 + 160);
        int v67 = 134350593;
        uint64_t v68 = *((void *)&v81 + 1);
        __int16 v69 = 1026;
        int v70 = v51;
        __int16 v71 = 2050;
        uint64_t v72 = v52;
        __int16 v73 = 2049;
        uint64_t v74 = v53;
        __int16 v75 = 2050;
        uint64_t v76 = v54;
        __int16 v77 = 2050;
        uint64_t v78 = v55;
        __int16 v79 = 2050;
        uint64_t v80 = v56;
        __int16 v57 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v57);
        if (v57 != buf) {
          free(v57);
        }
      }
      if (v30) {
        sub_1000DB0A0(v30);
      }
    }
    uint64_t v17 = 1;
    goto LABEL_58;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
  double v15 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = *(void *)(a2 + 76);
    *(_DWORD *)long long buf = 134349056;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,null pointers for matcher and geometry", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    uint64_t v46 = *(void *)(a2 + 76);
    LODWORD(v81) = 134349056;
    *(void *)((char *)&v81 + 4) = v46;
    uint64_t v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)", "%s\n", v47);
    if (v47 != buf) {
      free(v47);
    }
  }
  uint64_t v17 = 0;
LABEL_62:
  (*(void (**)(void *))(*v9 + 24))(v9);
  return v17;
}

void sub_1011EBB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a25) {
    sub_1000DB0A0(a25);
  }
  if (a60 < 0) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1011EBC2C(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x1011EBC24);
}

uint64_t sub_1011EBC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 369;
  uint64_t v6 = sub_1011E9BA4(a1, (uint64_t)"MapMatchingEngine", a2);
  *(void *)uint64_t v6 = off_102317F68;
  *(unsigned char *)(v6 + 368) = 1;
  *(void *)uint64_t v5 = 0;
  *(void *)(a1 + 384) = [(*(id *)(v6 + 24)) vendor proxyForService:@"CLGpsAssistant"];
  *(void *)(a1 + 392) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 400) = 1;
  *(_OWORD *)(a1 + 440) = xmmword_101DAE090;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 456) = unk_101DAE0A0;
  *(void *)(a1 + 472) = 0x600000006;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0xBFF0000000000000;
  *(void *)(a1 + 512) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = a1 + 536;
  *(void *)(a1 + 552) = 0x4014000000000000;
  *(_WORD *)(a1 + 560) = 257;
  *(_OWORD *)(v5 + 195) = xmmword_101DAE050;
  *(_DWORD *)(a1 + 580) = 125;
  *(void *)(a1 + 584) = 0x4059000000000000;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 656) = _Q1;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 688) = 0xBFF0000000000000;
  *(void *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_WORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 987) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 854) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 1064) = 0xBFF0000000000000;
  *(void *)(a1 + 1056) = 0;
  [*(id *)(a1 + 24) silo];
  sub_100E7D964(__p);
  long long v11 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  long long v12 = *(std::__shared_weak_count **)(a1 + 248);
  *(_OWORD *)(a1 + 240) = v11;
  if (v12)
  {
    sub_1000DB0A0(v12);
    if (__p[1]) {
      sub_1000DB0A0((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v13 = *(void *)(a1 + 240);
    if (v13)
    {
LABEL_5:
      uint64_t v14 = *(void *)(a1 + 248);
      v52[0] = v13;
      v52[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      sub_100134750(__p, "particle");
      sub_101195B5C((uint64_t)v52, (uint64_t *)__p);
    }
  }
  else
  {
    uint64_t v13 = v11;
    if ((void)v11) {
      goto LABEL_5;
    }
  }
  sub_101AA61AC(__p);
  abort_report_np();
  __break(1u);
  dispatch_once(&qword_102419430, &stru_102317FF0);
  double v15 = *(NSObject **)(v3 + 1080);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 10);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMMPED,CyclingDirectionOfTravel,%d", (uint8_t *)__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (*(void *)(v2 + 1072) != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v45 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 10);
    LODWORD(v55[0]) = 67109120;
    HIDWORD(v55[0]) = v45;
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v46);
    if (v46 != (char *)__p) {
      free(v46);
    }
  }
  BOOL v51 = 0;
  sub_1000C7F88(__p);
  int v17 = sub_1000D2988((uint64_t)__p[0], "EnableCyclingDirectionOfTravel", &v51);
  if (__p[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p[1]);
  }
  if (v17)
  {
    *(unsigned char *)(*(void *)(a1 + 632) + 10) = v51;
    if (*(void *)(v2 + 1072) != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v18 = *(NSObject **)(v3 + 1080);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 10);
      LODWORD(__p[0]) = 67240192;
      HIDWORD(__p[0]) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,Overwrite,EnableCyclingDirectionOfTravel,%{public}d", (uint8_t *)__p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (*(void *)(v2 + 1072) != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      int v47 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 10);
      LODWORD(v55[0]) = 67240192;
      HIDWORD(v55[0]) = v47;
      uint64_t v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v48);
      if (v48 != (char *)__p) {
        free(v48);
      }
    }
  }
  BOOL v51 = 0;
  *(unsigned char *)(*(void *)(a1 + 632) + 11) = 1;
  sub_1000C7F88(__p);
  int v20 = sub_1000D2988((uint64_t)__p[0], "EnableActivityBasedCyclingDirectionOfTravel", &v51);
  if (__p[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p[1]);
  }
  if (v20)
  {
    *(unsigned char *)(*(void *)(a1 + 632) + 11) = v51;
    if (*(void *)(v2 + 1072) != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    long long v21 = *(NSObject **)(v3 + 1080);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0]) = 67240192;
      HIDWORD(__p[0]) = v51;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMMPED,Overwrite,EnableActivityBasedCyclingDirectionOfTravel,%{public}d", (uint8_t *)__p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (*(void *)(v2 + 1072) != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      LODWORD(v55[0]) = 67240192;
      HIDWORD(v55[0]) = v51;
      uint64_t v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v49);
      if (v49 != (char *)__p) {
        free(v49);
      }
    }
  }
  *(unsigned char *)(a1 + 435) = 1;
  *(unsigned char *)(a1 + 433) = 1;
  sub_1000C7F88(__p);
  int v22 = sub_1000D2988((uint64_t)__p[0], "IntegrateRouteHintsInMapMatcher", &v51);
  if (__p[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p[1]);
  }
  if (v22)
  {
    BOOL v23 = v51;
    BOOL v24 = v51;
    uint64_t v25 = *(void *)(a1 + 608);
    if (v25) {
      *(unsigned char *)(v25 + 9) = v51;
    }
    uint64_t v26 = *(void *)(a1 + 632);
    if (v26) {
      *(unsigned char *)(v26 + 9) = v23;
    }
    uint64_t v27 = *(void *)(a1 + 272);
    if (v27) {
      *(unsigned char *)(v27 + 114) = v23;
    }
  }
  else
  {
    BOOL v24 = 1;
  }
  *(unsigned char *)(*(void *)(a1 + 256) + 114) = 0;
  if (*(void *)(v2 + 1072) != -1) {
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
  uint64_t v28 = *(NSObject **)(v3 + 1080);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = v24;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLMM,IntegrateRouteHintsInMapMatcher,%{public}d", (uint8_t *)__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (*(void *)(v2 + 1072) != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    LODWORD(v55[0]) = 67240192;
    HIDWORD(v55[0]) = v24;
    __int16 v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v42);
    if (v42 != (char *)__p) {
      free(v42);
    }
  }
  *(unsigned char *)(a1 + 376) = sub_10073DD54();
  *(_DWORD *)(a1 + 352) = 0;
  sub_1000C7F88(&v53);
  memset(&v50, 0, sizeof(v50));
  sub_1005B66DC(v53, "ForceUserActivity", &v50, (uint64_t)__p);
  *(_OWORD *)uint64_t v55 = *(_OWORD *)__p;
  uint64_t v56 = v58;
  HIBYTE(v58) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (v54) {
    sub_1000DB0A0(v54);
  }
  char v29 = HIBYTE(v56);
  if ((v56 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v56) != 7) {
      goto LABEL_78;
    }
    if (LODWORD(v55[0]) != 1802264919 || *(_DWORD *)((char *)v55 + 3) != 1735289195)
    {
      if (LODWORD(v55[0]) != 1818458435 || *(_DWORD *)((char *)v55 + 3) != 1735289196)
      {
        uint64_t v32 = v55;
        goto LABEL_69;
      }
LABEL_76:
      int v38 = 6;
      goto LABEL_77;
    }
LABEL_75:
    int v38 = 4;
    goto LABEL_77;
  }
  if (v55[1] != (void *)7) {
    goto LABEL_78;
  }
  if (*(_DWORD *)v55[0] == 1802264919 && *(_DWORD *)((char *)v55[0] + 3) == 1735289195) {
    goto LABEL_75;
  }
  if (*(_DWORD *)v55[0] == 1818458435 && *(_DWORD *)((char *)v55[0] + 3) == 1735289196) {
    goto LABEL_76;
  }
  uint64_t v32 = (void **)v55[0];
LABEL_69:
  int v35 = *(_DWORD *)v32;
  int v36 = *(_DWORD *)((char *)v32 + 3);
  if (v35 == 1986622020 && v36 == 1735289206)
  {
    int v38 = 5;
LABEL_77:
    *(_DWORD *)(a1 + 352) = v38;
  }
LABEL_78:
  if (*(void *)(v2 + 1072) != -1) {
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
  uint64_t v39 = *(NSObject **)(v3 + 1080);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
  {
    int v40 = *(_DWORD *)(a1 + 352);
    LODWORD(__p[0]) = 67240192;
    HIDWORD(__p[0]) = v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMM,ForceActivity,Activity,%{public}d", (uint8_t *)__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (*(void *)(v2 + 1072) != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v43 = *(_DWORD *)(a1 + 352);
    LODWORD(v53) = 67240192;
    HIDWORD(v53) = v43;
    __int16 v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMapMatchingEngine::CLMapMatchingEngine(id<CLIntersiloUniverse>, const std::string &)", "%s\n", v44);
    if (v44 != (char *)__p) {
      free(v44);
    }
  }
  if (v29 < 0) {
    operator delete(v55[0]);
  }
  return a1;
}

void sub_1011ED5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 + 791) < 0) {
    operator delete(*(void **)(v35 + 768));
  }
  uint64_t v39 = *(void *)(v35 + 632);
  *(void *)(v35 + 632) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  int v40 = *(std::__shared_weak_count **)(v35 + 624);
  if (v40) {
    sub_1000DB0A0(v40);
  }
  uint64_t v41 = *(void *)(v35 + 608);
  *(void *)(v35 + 608) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  __int16 v42 = *(std::__shared_weak_count **)(v35 + 600);
  if (v42) {
    sub_1000DB0A0(v42);
  }
  sub_1011ED7F0(v36);
  if (*(char *)(v35 + 431) < 0) {
    operator delete(*v37);
  }
  sub_1011ED830(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_1011ED7F0(uint64_t a1)
{
  sub_10075FBA0(a1 + 96, *(void **)(a1 + 104));
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1011ED830(uint64_t a1)
{
  *(void *)a1 = off_102317EF8;

  uint64_t v2 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v2) {
    sub_1011F15D0(a1 + 360, v2);
  }
  uint64_t v3 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v3) {
    sub_10045F2A8(a1 + 296, v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 280);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 264);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_10051310C(a1 + 8);
  return a1;
}

uint64_t sub_1011ED8D4(uint64_t a1)
{
  *(void *)a1 = off_102317F68;

  *(void *)(a1 + 384) = 0;
  if (*(char *)(a1 + 791) < 0) {
    operator delete(*(void **)(a1 + 768));
  }
  uint64_t v2 = *(void *)(a1 + 632);
  *(void *)(a1 + 632) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 624);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 600);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  sub_10075FBA0(a1 + 528, *(void **)(a1 + 536));
  uint64_t v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }

  return sub_1011ED830(a1);
}

void sub_1011ED9EC(uint64_t a1)
{
  sub_1011ED8D4(a1);

  operator delete();
}

void sub_1011EDA24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)(a1 + 528);
  sub_10075AC38(a1 + 528, a2);
  sub_1011EDDC0(a1);
  uint64_t v4 = *(void *)(a1 + 608);
  if (v4) {
    *(void *)(v4 + 16) = *(void *)(a1 + 552);
  }
  uint64_t v5 = *(void *)(a1 + 632);
  if (v5) {
    *(void *)(v5 + 16) = *(void *)(a1 + 552);
  }
  unsigned __int8 v6 = *(unsigned char *)(a1 + 560);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 561);
  sub_1000C7F88(buf);
  LOBYTE(v26[0]) = 0;
  if (sub_1000D2988(*(uint64_t *)buf, "UseMapDataBuffer", (BOOL *)v26)) {
    unsigned __int8 v6 = v26[0];
  }
  if (v46) {
    sub_1000DB0A0(v46);
  }
  sub_1000C7F88(buf);
  LOBYTE(v26[0]) = 0;
  if (sub_1000D2988(*(uint64_t *)buf, "UseXPCServiceForMapDataQuery", (BOOL *)v26)) {
    unsigned __int8 v7 = v26[0];
  }
  if (v46) {
    sub_1000DB0A0(v46);
  }
  sub_1011EEBE8((void *)a1, v6 != 0, v7 != 0, v3);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
  uint64_t v8 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(unsigned __int8 *)(a1 + 435);
    int v10 = *(unsigned __int8 *)(a1 + 433);
    uint64_t v11 = *(void *)(a1 + 552);
    int v12 = *(_DWORD *)(a1 + 564);
    int v13 = *(_DWORD *)(a1 + 568);
    int v14 = *(_DWORD *)(a1 + 572);
    int v15 = *(_DWORD *)(a1 + 576);
    int v16 = *(_DWORD *)(a1 + 580);
    *(_DWORD *)long long buf = 67242496;
    *(_DWORD *)&uint8_t buf[4] = v9;
    LOWORD(v46) = 1026;
    *(_DWORD *)((char *)&v46 + 2) = v10;
    HIWORD(v46) = 2050;
    uint64_t v47 = v11;
    __int16 v48 = 1026;
    int v49 = v6;
    __int16 v50 = 1026;
    int v51 = v7;
    __int16 v52 = 1026;
    int v53 = v12;
    __int16 v54 = 1026;
    int v55 = v13;
    __int16 v56 = 1026;
    int v57 = v14;
    __int16 v58 = 1026;
    int v59 = v15;
    __int16 v60 = 1026;
    int v61 = v16;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLMM,MA-OTA,FinalSettings,activityBasedPedMM,%{public}d,activityBasedCyclingMM,%{public}d,roadWidthBuffer,%{public}.1lf,useMapDataBuffer,%{public}d,useXPCForMapDataQueries,%{public}d,vehicleRadius,%{public}d,pedRadius,%{public}d,cyclingRadius,%{public}d,pedBldgRadius,%{public}d,cyclingBldgRadius,%{public}d", buf, 0x42u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v17 = *(unsigned __int8 *)(a1 + 435);
    int v18 = *(unsigned __int8 *)(a1 + 433);
    uint64_t v19 = *(void *)(a1 + 552);
    int v20 = *(_DWORD *)(a1 + 564);
    int v21 = *(_DWORD *)(a1 + 568);
    int v22 = *(_DWORD *)(a1 + 572);
    int v23 = *(_DWORD *)(a1 + 576);
    int v24 = *(_DWORD *)(a1 + 580);
    v26[0] = 67242496;
    v26[1] = v17;
    __int16 v27 = 1026;
    int v28 = v18;
    __int16 v29 = 2050;
    uint64_t v30 = v19;
    __int16 v31 = 1026;
    int v32 = v6;
    __int16 v33 = 1026;
    int v34 = v7;
    __int16 v35 = 1026;
    int v36 = v20;
    __int16 v37 = 1026;
    int v38 = v21;
    __int16 v39 = 1026;
    int v40 = v22;
    __int16 v41 = 1026;
    int v42 = v23;
    __int16 v43 = 1026;
    int v44 = v24;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::setMapMatcherSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
}

void sub_1011EDD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011EDDC0(uint64_t a1)
{
  BOOL v44 = 0;
  sub_1000C7F88(buf);
  int v2 = sub_1000D2988((uint64_t)buf[0].__r_.__value_.__l.__data_, "EnableActivityBasedPedestrianMapMatching", &v44);
  if (buf[0].__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_);
  }
  if (v2)
  {
    *(unsigned char *)(a1 + 435) = v44;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    uint64_t v3 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(unsigned __int8 *)(a1 + 435);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,Overwrote ActivityBasedPedestrianMapMatching setting,%{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      int v36 = *(unsigned __int8 *)(a1 + 435);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v36;
      __int16 v37 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", (const char *)v37);
      if (v37 != buf) {
        free(v37);
      }
    }
  }
  sub_1000C7F88(buf);
  int v5 = sub_1000D2988((uint64_t)buf[0].__r_.__value_.__l.__data_, "EnableActivityBasedCyclingMapMatching", &v44);
  if (buf[0].__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_);
  }
  if (v5)
  {
    *(unsigned char *)(a1 + 433) = v44;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    unsigned __int8 v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(unsigned __int8 *)(a1 + 433);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLMM,Overwrote ActivityBasedCyclingMapMatching setting,%{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      int v38 = *(unsigned __int8 *)(a1 + 433);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v38;
      __int16 v39 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", (const char *)v39);
      if (v39 != buf) {
        free(v39);
      }
    }
  }
  memset(&__p, 0, sizeof(__p));
  sub_1000C7F88(&v48);
  uint64_t v8 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  sub_1005B66DC(v8, "EnablePedestrianMMForCountryInSE", &__dst, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = buf[0];
  *((unsigned char *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v48.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v48.__r_.__value_.__l.__size_);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v10 = sub_100756EF8(a1 + 432, 2, (uint64_t)&__p);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    uint64_t v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLMM,EnablePedestrianMMForCountryInSE,%{public}s,success,%{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      int v28 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(v48.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
      WORD2(v48.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = v10;
      __int16 v29 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", (const char *)v29);
      if (v29 != buf) {
        free(v29);
      }
    }
  }
  memset(&v48, 0, sizeof(v48));
  sub_1000C7F88(&v47);
  uint64_t v13 = v47.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&v42, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  }
  else {
    std::string v42 = v48;
  }
  sub_1005B66DC(v13, "EnableCyclingMMForCountryInSE", &v42, (uint64_t)buf);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::string v48 = buf[0];
  *((unsigned char *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v47.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v47.__r_.__value_.__l.__size_);
  }
  std::string::size_type v14 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = v48.__r_.__value_.__l.__size_;
  }
  if (v14)
  {
    int v15 = sub_100756EF8(a1 + 432, 3, (uint64_t)&v48);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v16 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v17 = &v48;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v17 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMM,EnableCyclingMMForCountryInSE,%{public}s,success,%{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      uint64_t v30 = &v48;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v30 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      LODWORD(v47.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
      WORD2(v47.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v47.__r_.__value_.__r.__words[1] + 6) = v15;
      __int16 v31 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", (const char *)v31);
      if (v31 != buf) {
        free(v31);
      }
    }
  }
  memset(&v47, 0, sizeof(v47));
  sub_1000C7F88(&v46);
  uint64_t v18 = v46.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&v41, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = v47;
  }
  sub_1005B66DC(v18, "EnablePedestrianMMForCountryInPolygon", &v41, (uint64_t)buf);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::string v47 = buf[0];
  *((unsigned char *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (v46.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v46.__r_.__value_.__l.__size_);
  }
  std::string::size_type v19 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v19 = v47.__r_.__value_.__l.__size_;
  }
  if (v19)
  {
    int v20 = sub_100757A70(a1 + 432, 2, (uint64_t)&v47);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v21 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v22 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v22 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,EnablePedestrianMMForCountryInPolygon,%{public}s,success,%{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      int v32 = &v47;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      LODWORD(v46.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v46.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      WORD2(v46.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v46.__r_.__value_.__r.__words[1] + 6) = v20;
      __int16 v33 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", (const char *)v33);
      if (v33 != buf) {
        free(v33);
      }
    }
  }
  memset(&v46, 0, sizeof(v46));
  sub_1000C7F88(v45);
  uint64_t v23 = *(void *)v45;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&v40, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  }
  else {
    std::string v40 = v46;
  }
  sub_1005B66DC(v23, "EnableCyclingMMForCountryInPolygon", &v40, (uint64_t)buf);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  std::string v46 = buf[0];
  *((unsigned char *)&buf[0].__r_.__value_.__s + 23) = 0;
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (*(void *)&v45[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v45[8]);
  }
  std::string::size_type v24 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v24 = v46.__r_.__value_.__l.__size_;
  }
  if (v24)
  {
    int v25 = sub_100757A70(a1 + 432, 3, (uint64_t)&v46);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    uint64_t v26 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      __int16 v27 = &v46;
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v25;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,EnableCyclingMMForCountryInPolygon,%{public}s,success,%{public}d", (uint8_t *)buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      int v34 = &v46;
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v34 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v45 = 136446466;
      *(void *)&v45[4] = v34;
      *(_WORD *)&v45[12] = 1026;
      *(_DWORD *)&v45[14] = v25;
      __int16 v35 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::setActivityBasedMapMatcherSettingsFromDefaultsWrite()", "%s\n", (const char *)v35);
      if (v35 != buf) {
        free(v35);
      }
    }
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1011EEA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011EEBE8(void *a1, int a2, int a3, int *a4)
{
  uint64_t v8 = a1[30];
  if (v8) {
    sub_101188110(v8, a2, a3, a4[9]);
  }
  uint64_t v9 = a1[74];
  if (v9) {
    sub_101188110(v9, a2, a3, a4[10]);
  }
  uint64_t v10 = a1[76];
  if (v10) {
    sub_1013589B8(v10, a2, a3, a4[12]);
  }
  uint64_t v11 = a1[77];
  if (v11) {
    sub_101188110(v11, a2, a3, a4[11]);
  }
  uint64_t result = a1[79];
  if (result)
  {
    int v13 = a4[13];
    sub_1013589B8(result, a2, a3, v13);
  }
  return result;
}

uint64_t sub_1011EECB0(uint64_t a1)
{
  double v2 = sub_10016C458();
  if (*(double *)a1 < 0.0 || v2 - *(double *)a1 > 1800.0)
  {
    *(double *)a1 = v2;
    id v3 = +[GEOCountryConfiguration sharedConfiguration];
    *(unsigned char *)(a1 + 8) = 1;
    if (v3)
    {
      int v4 = v3;
      id v5 = [v3 countryCode];
      if (v5)
      {
        unsigned __int8 v6 = v5;
        *(unsigned char *)(a1 + 8) = [v4 currentCountrySupportsFeature:1];
        sub_100134750(buf, (char *)[v6 UTF8String]);
        int v7 = (void **)(a1 + 16);
        if (*(char *)(a1 + 39) < 0) {
          operator delete(*v7);
        }
        *(_OWORD *)int v7 = *(_OWORD *)buf;
        *(void *)(a1 + 32) = *(void *)&buf[16];
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        uint64_t v8 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = (void *)(a1 + 16);
          if (*(char *)(a1 + 39) < 0) {
            uint64_t v9 = *v7;
          }
          int v10 = *(unsigned __int8 *)(a1 + 8);
          *(_DWORD *)long long buf = 136380931;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,Country,%{private}s,supportsTBTFeature,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317FF0);
          }
          int v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatchingEngine::CountryChecker::isDirectionsSupported()", "%s\n", v12);
          if (v12 != buf) {
            free(v12);
          }
        }
      }
    }
  }
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_1011EEF38(void *a1, double *a2, int a3)
{
  if (a2[1] < 0.0 || sub_1000EF668(a2[7], a2[8]))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    unsigned __int8 v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *((void *)a2 + 1);
      uint64_t v8 = *((void *)a2 + 7);
      uint64_t v9 = *((void *)a2 + 8);
      *(_DWORD *)long long buf = 134349569;
      uint64_t v18 = v7;
      __int16 v19 = 2049;
      uint64_t v20 = v8;
      __int16 v21 = 2049;
      uint64_t v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,bufferMapData,invalid time or location,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
LABEL_28:
      }
        dispatch_once(&qword_102419430, &stru_102317FF0);
LABEL_26:
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMapMatchingEngine::bufferMapData(const CLMapCrumb &, const CLMapMatcherOperatingPolicy::MatcherOperatingDynamicsEnum)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  else
  {
    switch(a3)
    {
      case 0:
      case 4:
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        int v10 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = *((void *)a2 + 1);
          *(_DWORD *)long long buf = 134349312;
          uint64_t v18 = v11;
          __int16 v19 = 1026;
          LODWORD(v20) = a3;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,bufferMapData,Unknown dynamics,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            goto LABEL_28;
          }
          goto LABEL_26;
        }
        break;
      case 1:
        uint64_t v12 = a1[30];
        if (v12) {
          goto LABEL_22;
        }
        break;
      case 2:
        uint64_t v12 = a1[74];
        if (v12) {
          goto LABEL_22;
        }
        break;
      case 3:
        uint64_t v12 = a1[77];
        if (v12)
        {
LABEL_22:
          double v13 = a2[1];
          CLLocationDegrees v14 = a2[7];
          CLLocationDegrees v15 = a2[8];
          sub_101188CD4(v12, v13, v14, v15);
        }
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1011EF2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v78 = a1 + 8;
  (*(void (**)(void))(v6 + 16))();
  __int16 v80 = 256;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
  uint64_t v7 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(a1 + 400);
    int v9 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)long long buf = 67240448;
    *(_DWORD *)uint64_t v97 = v8;
    *(_WORD *)&v97[4] = 1026;
    *(_DWORD *)&v97[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,match,nav,%{public}d,forceActivity,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    int v62 = *(unsigned __int8 *)(a1 + 400);
    int v63 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)double v91 = 67240448;
    *(_DWORD *)&v91[4] = v62;
    *(_WORD *)&v91[8] = 1026;
    *(_DWORD *)&v91[10] = v63;
    double v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v64);
    if (v64 != (char *)buf) {
      free(v64);
    }
  }
  if (!sub_1011EECB0(a1 + 392)) {
    goto LABEL_17;
  }
  *(_OWORD *)(a3 + 104) = *(_OWORD *)(a2 + 60);
  int v10 = (int *)(a1 + 40);
  uint64_t v11 = (int *)(a1 + 212);
  sub_10075535C(a1 + 432, a2, a3, (CLMotionActivity *)(a1 + 40), (int *)(a1 + 212), (char *)(a1 + 408), *(_DWORD *)(a1 + 196), (int8x16_t *)(a2 + 4));
  if ((*(_DWORD *)(a1 + 436) & 0xFFFFFFFE) == 2 && !*(unsigned char *)(a1 + 520))
  {
    if (*(_DWORD *)(a3 + 276))
    {
      double v12 = *(double *)(a3 + 280);
      if (v12 >= 0.0 && v12 < *(double *)(a1 + 584))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        double v13 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = *(void *)(a2 + 76);
          uint64_t v15 = *(void *)(a3 + 280);
          *(_DWORD *)long long buf = 134349312;
          *(void *)uint64_t v97 = v14;
          *(_WORD *)&v97[8] = 2050;
          *(void *)__int16 v98 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,near a running track,no matching,distanceToTrack,%{public}.2lf", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317FF0);
          }
          uint64_t v71 = *(void *)(a2 + 76);
          uint64_t v72 = *(void *)(a3 + 280);
          *(_DWORD *)double v91 = 134349312;
          *(void *)&v91[4] = v71;
          *(_WORD *)&v91[12] = 2050;
          *(void *)&v91[14] = v72;
          __int16 v73 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v73);
          if (v73 != (char *)buf) {
            free(v73);
          }
        }
LABEL_17:
        uint64_t v16 = 0;
        goto LABEL_38;
      }
    }
  }
  *(void *)double v91 = 0;
  *(void *)&v91[8] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v91[16] = _Q0;
  long long v92 = 0uLL;
  *(void *)uint64_t v93 = 0xBFF0000000000000;
  v95[15] = 0;
  LODWORD(v95[16]) = 0;
  memset(&v95[10], 0, 34);
  memset(&v95[17], 0, 75);
  memset(&v95[27], 0, 56);
  memset(v95, 0, 78);
  long long v94 = 0u;
  memset(&v93[8], 0, 80);
  v95[34] = 0xBFF0000000000000;
  double v22 = sub_10016C458();
  if (sub_1011EA998((CLMotionActivity *)a1, a2, a3, (uint64_t)v91))
  {
    sub_100134750(__p, "aPriori");
    sub_1013E5C18((uint64_t *)v91, (uint64_t *)__p, -1.0);
    if (v77 < 0) {
      operator delete(__p[0]);
    }
    switch(*(_DWORD *)(a1 + 436))
    {
      case 0:
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        uint64_t v23 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = *(void *)(a2 + 76);
          int v25 = *v10;
          int v26 = *v11;
          *(_DWORD *)long long buf = 134349568;
          *(void *)uint64_t v97 = v24;
          *(_WORD *)&v97[8] = 1026;
          *(_DWORD *)__int16 v98 = v25;
          *(_WORD *)&v98[4] = 1026;
          *(_DWORD *)&v98[6] = v26;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Unknown dynamics,no matching,activity,%{public}d,fitness,%{public}d", buf, 0x18u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_35;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        uint64_t v27 = *(void *)(a2 + 76);
        int v28 = *v10;
        int v29 = *v11;
        int v81 = 134349568;
        uint64_t v82 = v27;
        __int16 v83 = 1026;
        *(_DWORD *)long long v84 = v28;
        *(_WORD *)&v84[4] = 1026;
        *(_DWORD *)&v84[6] = v29;
        uint64_t v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v30);
        break;
      case 1:
        if (*(_DWORD *)(a2 + 96) == 11)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317FF0);
          }
          __int16 v52 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
          {
            uint64_t v53 = *(void *)(a2 + 76);
            *(_DWORD *)long long buf = 134349056;
            *(void *)uint64_t v97 = v53;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "CLMM,%{public}.1lf,vehicle dynamics,wifi2 fix ignored", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317FF0);
            }
            uint64_t v54 = *(void *)(a2 + 76);
            int v81 = 134349056;
            uint64_t v82 = v54;
            uint64_t v30 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v30);
            break;
          }
          goto LABEL_35;
        }
        if (*(void *)(a1 + 240) && *(void *)(a1 + 256))
        {
          char v35 = sub_1011EAFDC((void *)a1, a2, a3, (uint64_t)v91);
          goto LABEL_49;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        int v59 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          uint64_t v60 = *(void *)(a2 + 76);
          *(_DWORD *)long long buf = 134349056;
          *(void *)uint64_t v97 = v60;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,null pointers for matcher or geometry", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_35;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          goto LABEL_142;
        }
        goto LABEL_120;
      case 2:
        int v34 = *(uint64_t ***)(a1 + 608);
        if (v34)
        {
          if ((sub_101358E6C(v34, (uint64_t)v91) & 1) == 0) {
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        int v55 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = *(void *)(a2 + 76);
          *(_DWORD *)long long buf = 134349056;
          *(void *)uint64_t v97 = v56;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,null pointers for pedestrian matcher", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_35;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          goto LABEL_142;
        }
        goto LABEL_120;
      case 3:
        int v36 = *(uint64_t ***)(a1 + 632);
        if (v36)
        {
          if (sub_101358E6C(v36, (uint64_t)v91))
          {
LABEL_45:
            sub_1011EAF68(a1, (uint64_t)v91, a2, a3);
            char v35 = 1;
          }
          else
          {
LABEL_48:
            char v35 = 0;
          }
LABEL_49:
          double v37 = sub_10016C458();
          sub_100134750(v74, "aPosteriori");
          double v38 = (v37 - v22) * 1000.0;
          sub_1013E5C18((uint64_t *)v91, (uint64_t *)v74, v38);
          if (v75 < 0) {
            operator delete(v74[0]);
          }
          *(_WORD *)(a3 + 120) = WORD2(v95[9]);
          *(unsigned char *)(a3 + 610) = *(unsigned char *)(a1 + 520);
          *(unsigned char *)(a3 + 609) = 0;
          if ((*(_DWORD *)(a1 + 436) - 1) < 3) {
            *(unsigned char *)(a3 + 609) = *(unsigned char *)(a1 + 436);
          }
          if (v35)
          {
            if (!BYTE1(v95[14]) && (*(unsigned char *)(a1 + 369) || *(unsigned char *)(a1 + 370)) && LOBYTE(v95[14])) {
              *(_OWORD *)(a2 + 4) = *(_OWORD *)&v95[29];
            }
            sub_1011F0678((void *)a1, a2, a3);
            if (*(unsigned char *)(a1 + 368)
              && LOBYTE(v95[14])
              && !BYTE1(v95[14])
              && (*(double *)&v93[48] < 18.0
               || sub_100119A30()
               || (sub_10073C674() & 1) != 0
               || sub_10073C6AC()))
            {
              sub_1011F0978(a1, a2);
              sub_1011F0D3C((void *)a1, a2);
            }
            if (*(unsigned char *)(a1 + 376) && !*(unsigned char *)(a3 + 356)) {
              sub_1011F0DDC((void *)a1, a2, 1);
            }
            if (LOBYTE(v95[14]) && !BYTE5(v95[24]))
            {
              *(_OWORD *)(a3 + 64) = *(_OWORD *)&v95[17];
              uint64_t v39 = v95[19];
              if (BYTE1(v95[14])) {
                int v40 = 3;
              }
              else {
                int v40 = 2;
              }
              *(_DWORD *)(a3 + 56) = v40;
              int32x2_t v41 = vrev64_s32(*(int32x2_t *)&v93[72]);
              *(void *)(a3 + 80) = v39;
              *(int32x2_t *)(a3 + 88) = v41;
              *(unsigned char *)(a3 + 96) = HIBYTE(v95[24]);
            }
            sub_1011EEF38((void *)a1, (double *)v91, *(_DWORD *)(a1 + 436));
            long long v42 = *(_OWORD *)&v93[32];
            *(_OWORD *)(a1 + 704) = *(_OWORD *)&v93[16];
            *(_OWORD *)(a1 + 720) = v42;
            long long v43 = *(_OWORD *)&v93[64];
            *(_OWORD *)(a1 + 736) = *(_OWORD *)&v93[48];
            *(_OWORD *)(a1 + 752) = v43;
            long long v44 = *(_OWORD *)&v91[16];
            *(_OWORD *)(a1 + 640) = *(_OWORD *)v91;
            *(_OWORD *)(a1 + 656) = v44;
            long long v45 = *(_OWORD *)v93;
            *(_OWORD *)(a1 + 672) = v92;
            *(_OWORD *)(a1 + 688) = v45;
            std::string::operator=((std::string *)(a1 + 768), (const std::string *)&v93[80]);
            memcpy((void *)(a1 + 792), v95, 0x118uLL);
            double v46 = sub_10016C458();
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317FF0);
            }
            std::string v47 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
            {
              int v48 = *(unsigned __int8 *)(a3 + 609);
              *(_DWORD *)long long buf = 134350336;
              *(void *)uint64_t v97 = *(void *)&v91[8];
              *(_WORD *)&v97[8] = 2050;
              *(double *)__int16 v98 = (v46 - v22) * 1000.0;
              *(_WORD *)&char v98[8] = 2050;
              *(double *)uint64_t v99 = v38;
              *(_WORD *)&v99[8] = 1026;
              int v100 = v48;
              __int16 v101 = 1026;
              int v102 = LOBYTE(v95[14]);
              __int16 v103 = 1026;
              int v104 = BYTE1(v95[14]);
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "CLMM,%{public}.3lf,Match,latency,%{public}.2lf,filterLatency,%{public}.2lf,mmType,%{public}d,usable,%{public}d,amb,%{public}d", buf, 0x32u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317FF0);
              }
              int v69 = *(unsigned __int8 *)(a3 + 609);
              int v81 = 134350336;
              uint64_t v82 = *(void *)&v91[8];
              __int16 v83 = 2050;
              *(double *)long long v84 = (v46 - v22) * 1000.0;
              *(_WORD *)&v84[8] = 2050;
              *(double *)long long v85 = v38;
              *(_WORD *)&v85[8] = 1026;
              int v86 = v69;
              __int16 v87 = 1026;
              int v88 = LOBYTE(v95[14]);
              __int16 v89 = 1026;
              int v90 = BYTE1(v95[14]);
              int v70 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v70);
              if (v70 != (char *)buf) {
                free(v70);
              }
            }
            uint64_t v16 = 1;
            goto LABEL_36;
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102317FF0);
          }
          int v49 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            int v50 = *(unsigned __int8 *)(a3 + 610);
            int v51 = *(unsigned __int8 *)(a3 + 609);
            *(_DWORD *)long long buf = 134349824;
            *(void *)uint64_t v97 = *(void *)&v91[8];
            *(_WORD *)&v97[8] = 2050;
            *(double *)__int16 v98 = v38;
            *(_WORD *)&char v98[8] = 1026;
            *(_DWORD *)uint64_t v99 = v50;
            *(_WORD *)&v99[4] = 1026;
            *(_DWORD *)&v99[6] = v51;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,MMFilter,latency,%{public}.3lf,triggeredByRouteHints,%{public}d,mmtype,%{public}d", buf, 0x22u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317FF0);
            }
            int v66 = *(unsigned __int8 *)(a3 + 610);
            int v67 = *(unsigned __int8 *)(a3 + 609);
            int v81 = 134349824;
            uint64_t v82 = *(void *)&v91[8];
            __int16 v83 = 2050;
            *(double *)long long v84 = v38;
            *(_WORD *)&v84[8] = 1026;
            *(_DWORD *)long long v85 = v66;
            *(_WORD *)&v85[4] = 1026;
            *(_DWORD *)&v85[6] = v67;
            uint64_t v68 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v68);
            if (v68 != (char *)buf) {
              free(v68);
            }
          }
          sub_1011EEF38((void *)a1, (double *)v91, *(_DWORD *)(a1 + 436));
          goto LABEL_35;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102317FF0);
        }
        int v57 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          uint64_t v58 = *(void *)(a2 + 76);
          *(_DWORD *)long long buf = 134349056;
          *(void *)uint64_t v97 = v58;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,null pointers for cycling matcher", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_35;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
LABEL_142:
        }
          dispatch_once(&qword_102419430, &stru_102317FF0);
LABEL_120:
        uint64_t v61 = *(void *)(a2 + 76);
        int v81 = 134349056;
        uint64_t v82 = v61;
        uint64_t v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v30);
        break;
      default:
        goto LABEL_48;
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    __int16 v31 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v32 = *(void *)(a2 + 76);
      *(_DWORD *)long long buf = 134349056;
      *(void *)uint64_t v97 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Unable to fill crumb,no matching", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    uint64_t v65 = *(void *)(a2 + 76);
    int v81 = 134349056;
    uint64_t v82 = v65;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMapMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v30);
  }
  if (v30 != (char *)buf) {
    free(v30);
  }
LABEL_35:
  uint64_t v16 = 0;
LABEL_36:
  if (SHIBYTE(v94) < 0) {
    operator delete(*(void **)&v93[80]);
  }
LABEL_38:
  if (HIBYTE(v80))
  {
    if ((_BYTE)v80) {
      pthread_mutex_unlock(v79);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v78 + 24))(v78);
    }
  }
  return v16;
}

void sub_1011F05CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void *sub_1011F0678(void *result, uint64_t a2, uint64_t a3)
{
  if ((*((_DWORD *)result + 109) & 0xFFFFFFFE) != 2)
  {
    unsigned int v3 = *(_DWORD *)(a2 + 96);
    BOOL v4 = v3 > 9;
    int v5 = (1 << v3) & 0x20A;
    if (!v4 && v5 != 0)
    {
      uint64_t v7 = result;
      if (*((unsigned char *)result + 374))
      {
        DWORD2(v16) = 0;
        uint64_t v8 = *(void *)(a2 + 76);
        *(void *)&long long v14 = *(void *)(a3 + 344);
        *((void *)&v14 + 1) = v8;
        long long v15 = *(_OWORD *)(a2 + 4);
        double v9 = *(double *)(a2 + 20);
        if (v9 > 100.0) {
          double v9 = 100.0;
        }
        if (v9 < 50.0) {
          double v9 = 50.0;
        }
        *(double *)&long long v16 = v9;
        uint64_t result = (void *)result[32];
        if (result)
        {
          uint64_t result = (void *)(*(uint64_t (**)(void *, long long *))(*result + 128))(result, &v14);
          if (result)
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102317FF0);
            }
            int v10 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 134284801;
              uint64_t v30 = v15;
              __int16 v31 = 2049;
              uint64_t v32 = *((void *)&v15 + 1);
              __int16 v33 = 1026;
              int v34 = BYTE8(v16);
              __int16 v35 = 1026;
              int v36 = BYTE9(v16);
              __int16 v37 = 1026;
              int v38 = BYTE10(v16);
              __int16 v39 = 1026;
              int v40 = BYTE11(v16);
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,TBA,setTunnelBridgeAssistance,lat,%{private}.8lf,lon,%{private}.8lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d", buf, 0x2Eu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_102317FF0);
              }
              int v17 = 134284801;
              uint64_t v18 = v15;
              __int16 v19 = 2049;
              uint64_t v20 = *((void *)&v15 + 1);
              __int16 v21 = 1026;
              int v22 = BYTE8(v16);
              __int16 v23 = 1026;
              int v24 = BYTE9(v16);
              __int16 v25 = 1026;
              int v26 = BYTE10(v16);
              __int16 v27 = 1026;
              int v28 = BYTE11(v16);
              double v12 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::provideTunnelBridgeAssistance(const CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v12);
              if (v12 != (char *)buf) {
                free(v12);
              }
            }
            uint64_t v11 = (void *)v7[48];
            v13[0] = v14;
            v13[1] = v15;
            v13[2] = v16;
            return [v11 setTunnelBridgeAssistance:v13];
          }
        }
      }
    }
  }
  return result;
}

void sub_1011F0978(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 371) || *(unsigned char *)(a1 + 375))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    BOOL v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 371);
      int v6 = *(unsigned __int8 *)(a1 + 375);
      int v7 = *(_DWORD *)(a1 + 436);
      BOOL v8 = v7 == 2;
      BOOL v9 = v7 == 1;
      int v10 = sub_10073C750();
      BOOL v11 = sub_100119A30();
      int v12 = *(_DWORD *)(a2 + 96);
      BOOL v13 = *(_DWORD *)(a1 + 436) == 3;
      *(_DWORD *)long long buf = 67241984;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v6;
      *(_WORD *)&buf[14] = 1026;
      LODWORD(v48) = v8;
      WORD2(v48) = 1026;
      *(_DWORD *)((char *)&v48 + 6) = v9;
      WORD5(v48) = 1026;
      HIDWORD(v48) = v10;
      *(_WORD *)int v49 = 1026;
      *(_DWORD *)&v49[2] = v11;
      *(_WORD *)&v49[6] = 1026;
      *(_DWORD *)&v49[8] = v12;
      *(_WORD *)&v49[12] = 1026;
      *(_DWORD *)&v49[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,wantDot,%{public}d,forceDot,%{public}d,isPedestrian,%{public}d,isVehicle,%{public}d,isEurekaGnss,%{public}d,isFire,%{public}d,type,%{public}d,isCycling,%{public}d", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102317FF0);
      }
      int v19 = *(unsigned __int8 *)(a1 + 371);
      int v20 = *(unsigned __int8 *)(a1 + 375);
      int v21 = *(_DWORD *)(a1 + 436);
      BOOL v22 = v21 == 2;
      BOOL v23 = v21 == 1;
      int v24 = sub_10073C750();
      BOOL v25 = sub_100119A30();
      int v26 = *(_DWORD *)(a2 + 96);
      BOOL v27 = *(_DWORD *)(a1 + 436) == 3;
      int v31 = 67241984;
      int v32 = v19;
      __int16 v33 = 1026;
      int v34 = v20;
      __int16 v35 = 1026;
      BOOL v36 = v22;
      __int16 v37 = 1026;
      BOOL v38 = v23;
      __int16 v39 = 1026;
      int v40 = v24;
      __int16 v41 = 1026;
      BOOL v42 = v25;
      __int16 v43 = 1026;
      int v44 = v26;
      __int16 v45 = 1026;
      BOOL v46 = v27;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::provideDirectionOfTravelAssistance(const CLDaemonLocation &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    int v14 = *(_DWORD *)(a1 + 436);
    switch(v14)
    {
      case 1:
        uint64_t v17 = *(void *)(a1 + 256);
        if (v17
          && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1
          && (*(unsigned int (**)(uint64_t, uint8_t *))(*(void *)v17 + 112))(v17, buf))
        {
LABEL_22:
          if (vabdd_f64(*(double *)(a2 + 76), *(double *)buf) <= 1.2)
          {
            uint64_t v18 = *(void **)(a1 + 384);
            v29[4] = v50;
            v29[5] = v51;
            uint64_t v30 = v52;
            v29[0] = *(_OWORD *)buf;
            v29[1] = v48;
            v29[2] = *(_OWORD *)v49;
            v29[3] = *(_OWORD *)&v49[16];
            [v18 setDirectionOfTravelAssistance:v29];
          }
        }
        break;
      case 3:
        uint64_t v15 = *(void *)(a1 + 632);
        if (v15 && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
        {
LABEL_21:
          if ((sub_101361304(v15, (uint64_t)buf) & 1) == 0) {
            return;
          }
          goto LABEL_22;
        }
        break;
      case 2:
        uint64_t v15 = *(void *)(a1 + 608);
        if (!v15) {
          return;
        }
        unsigned int v16 = *(_DWORD *)(a2 + 96);
        if (v16 > 0xB || ((1 << v16) & 0xA02) == 0) {
          return;
        }
        goto LABEL_21;
      default:
        return;
    }
  }
}

void *sub_1011F0D3C(void *result, uint64_t a2)
{
  if ((*((_DWORD *)result + 109) & 0xFFFFFFFE) != 2 && (*(_DWORD *)(a2 + 96) | 8) == 9)
  {
    double v2 = result;
    if (*((unsigned char *)result + 372))
    {
      uint64_t result = (void *)result[32];
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, _OWORD *))(*result + 120))(result, v5);
        if (result)
        {
          unsigned int v3 = (void *)v2[48];
          v4[0] = v5[0];
          v4[1] = v5[1];
          void v4[2] = v5[2];
          return [v3 setMapMatchedPositionAssistance:v4];
        }
      }
    }
  }
  return result;
}

void *sub_1011F0DDC(void *result, uint64_t a2, char a3)
{
  if ((*((_DWORD *)result + 109) & 0xFFFFFFFE) != 2 && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
  {
    BOOL v4 = result;
    if (*((unsigned char *)result + 373))
    {
      uint64_t result = (void *)result[32];
      if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, _OWORD *, double))(*result + 136))(result, v9, *(double *)(a2 + 76));
        if (result)
        {
          HIDWORD(v10) = *(_DWORD *)(a2 + 132);
          LOBYTE(v11) = a3;
          v7[5] = v11;
          void v7[6] = v12;
          v7[0] = v9[0];
          v7[1] = v9[1];
          _DWORD v7[2] = v9[2];
          v7[3] = v9[3];
          int v6 = (void *)v4[48];
          uint64_t v8 = v13;
          v7[4] = v10;
          return [v6 setTunnelEndPointPositionAssistance:v7];
        }
      }
    }
  }
  return result;
}

uint64_t sub_1011F0EB8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a1 + 436) & 0xFFFFFFFE) == 2) {
    return 0;
  }
  uint64_t result = sub_1011EAEB0(a1, a2);
  if (result)
  {
    sub_1011F0DDC((void *)a1, a2, 0);
    return 1;
  }
  return result;
}

uint64_t sub_1011F0F10(uint64_t a1, _DWORD *a2, char a3)
{
  uint64_t v6 = a1 + 8;
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  switch(*a2)
  {
    case 0:
      *(unsigned char *)(a1 + 371) = a3;
      break;
    case 1:
      *(unsigned char *)(a1 + 372) = a3;
      break;
    case 4:
      *(unsigned char *)(a1 + 374) = a3;
      break;
    case 5:
      *(unsigned char *)(a1 + 373) = a3;
      break;
    default:
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

uint64_t sub_1011F0FF8(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (void *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  uint64_t v5 = v4[33];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
  }
  uint64_t v6 = *(void *)(a1 + 608);
  if (v6) {
    sub_1013614EC(v6, a2);
  }
  uint64_t v7 = *(void *)(a1 + 632);
  if (v7) {
    sub_1013614EC(v7, a2);
  }
  __n128 v8 = sub_1011F1110(a1 + 432, a2);
  if (*(unsigned char *)(a1 + 288)) {
    sub_1013748E8(a2);
  }
  return (*(uint64_t (**)(void *, __n128))(*v4 + 24))(v4, v8);
}

void sub_1011F10FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1011F1110(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)a2;
  if (a1 + 40 != a2) {
    sub_1008A9A00((char *)(a1 + 48), *(char **)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t sub_1011F1170(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  uint64_t v4 = v3[31];
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 96))(v4, a2);
  }
  return (*(uint64_t (**)(void *))(*v3 + 24))(v3);
}

void sub_1011F1228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F1240(uint64_t a1, int a2)
{
  unsigned int v3 = (unsigned char *)(a1 + 8);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
  v3[362] = a2;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102317FF0);
  }
  uint64_t v4 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,FullSnapEnabled,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102317FF0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatchingEngine::setFullSnapEnabled(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 24))(v3);
}

void sub_1011F1450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F1478(void *a1)
{
  double v2 = a1 + 1;
  (*(void (**)(void *))(a1[1] + 16))(a1 + 1);
  sub_1011EA0E4((uint64_t)a1);
  uint64_t v4 = a1[32];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = a1[34];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = a1[76];
  if (v6) {
    v3.n128_f64[0] = sub_101358650(v6);
  }
  uint64_t v7 = a1[79];
  if (v7) {
    v3.n128_f64[0] = sub_101358650(v7);
  }
  return (*(uint64_t (**)(void *, __n128))(*v2 + 24))(v2, v3);
}

void sub_1011F157C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1011F1590(uint64_t a1)
{
  return *(_DWORD *)(a1 + 436) == 1;
}

void sub_1011F15A0(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_1011F15D0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10054E0C0(a2 + 128, *(void **)(a2 + 136));
    __n128 v3 = *(std::__shared_weak_count **)(a2 + 16);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    operator delete();
  }
}

BOOL sub_1011F1640()
{
  uint64_t v1 = qword_102419438;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_1011F1660()
{
  double v2 = *(NSObject **)(v0 + 1080);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_1011F167C()
{
  double v2 = *(NSObject **)(v0 + 1080);
  return os_signpost_enabled(v2);
}

uint64_t sub_1011F1694()
{
  sub_100134750(qword_102485FB0, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485FB0, (void *)&_mh_execute_header);
  sub_100134750(qword_102485FC8, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485FC8, (void *)&_mh_execute_header);
  sub_100134750(qword_102485FE0, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485FE0, (void *)&_mh_execute_header);
  sub_100134750(qword_102485FF8, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485FF8, (void *)&_mh_execute_header);
  sub_100134750(qword_102486010, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486010, (void *)&_mh_execute_header);
  sub_100134750(qword_102486028, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486028, (void *)&_mh_execute_header);
  sub_100134750(qword_102486040, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486040, (void *)&_mh_execute_header);
  sub_100134750(qword_102486058, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486058, (void *)&_mh_execute_header);
  sub_100134750(qword_102486070, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486070, (void *)&_mh_execute_header);
  sub_100134750(qword_102486088, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486088, (void *)&_mh_execute_header);
  sub_100134750(qword_1024860A0, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024860A0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024860B8, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024860B8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024860D0, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024860D0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024860E8, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024860E8, (void *)&_mh_execute_header);
  sub_100134750(qword_102486100, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486100, (void *)&_mh_execute_header);
  sub_100134750(qword_102486118, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486118, (void *)&_mh_execute_header);
  sub_100134750(qword_102486130, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486130, (void *)&_mh_execute_header);
  sub_100134750(qword_102486148, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486148, (void *)&_mh_execute_header);
  sub_100134750(qword_102486160, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486160, (void *)&_mh_execute_header);
  sub_100134750(qword_102486178, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486178, (void *)&_mh_execute_header);
  sub_100134750(qword_102486190, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486190, (void *)&_mh_execute_header);
  sub_100134750(qword_1024861A8, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024861A8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024861C0, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024861C0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024861D8, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024861D8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024861F0, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024861F0, (void *)&_mh_execute_header);
  sub_100134750(qword_102486208, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486208, (void *)&_mh_execute_header);
  sub_100134750(qword_102486220, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486220, (void *)&_mh_execute_header);
  sub_100134750(qword_102486238, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486238, (void *)&_mh_execute_header);
  sub_100134750(qword_102486250, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486250, (void *)&_mh_execute_header);
  sub_100134750(qword_102486268, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486268, (void *)&_mh_execute_header);
  sub_100134750(qword_102486280, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486280, (void *)&_mh_execute_header);
  sub_100134750(qword_102486298, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486298, (void *)&_mh_execute_header);
  sub_100134750(qword_1024862B0, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024862B0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024862C8, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024862C8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024862E0, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024862E0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024862F8, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024862F8, (void *)&_mh_execute_header);
  sub_100134750(qword_102486310, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486310, (void *)&_mh_execute_header);
  sub_100134750(qword_102486328, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486328, (void *)&_mh_execute_header);
  sub_100134750(qword_102486340, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486340, (void *)&_mh_execute_header);
  sub_100134750(qword_102486358, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486358, (void *)&_mh_execute_header);
  sub_100134750(qword_102486370, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486370, (void *)&_mh_execute_header);
  sub_100134750(qword_102486388, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486388, (void *)&_mh_execute_header);
  sub_100134750(qword_1024863A0, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024863A0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024863B8, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024863B8, (void *)&_mh_execute_header);
  sub_100134750(qword_1024863D0, "NumDaysLookbackForWorkouts");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024863D0, (void *)&_mh_execute_header);
}

void sub_1011F1DE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DE9B8((_DWORD *)a2, a1);
  sub_1011F20CC(a1, (uint64_t *)(a1 + 6280), 1, buf);
  sub_1000DA970((void ***)(a2 + 6280));
  *(_OWORD *)(a2 + 6280) = *(_OWORD *)buf;
  *(void *)(a2 + 6296) = *(void *)&buf[16];
  memset(buf, 0, sizeof(buf));
  sub_1000E2E9C(a2 + 6304, v18);
  *(_OWORD *)(a2 + 6344) = v19;
  *(void *)(a2 + 6360) = v20;
  sub_1000D7D80((uint64_t)v18);
  *(void *)long long v12 = buf;
  sub_1000D7F04((void ***)v12);
  if (*(_DWORD *)(a1 + 6348) == 2 && *(double *)(a2 + 6360) > 0.0)
  {
    *(_DWORD *)(a2 + 6348) = 0;
    *(void *)(a2 + 6360) = 0;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  uint64_t v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 6288) - *(void *)(a2 + 6280)) >> 3);
    uint64_t v6 = *(void *)(a2 + 6328);
    int v7 = *(_DWORD *)(a1 + 6348);
    *(_DWORD *)long long buf = 134349568;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 1026;
    LODWORD(v18[0]) = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@WsbReproc, remain, groups, %{public}lu, unknownAPs, %{public}lu, pass, %{public}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 6288) - *(void *)(a2 + 6280)) >> 3);
    uint64_t v9 = *(void *)(a2 + 6328);
    int v10 = *(_DWORD *)(a1 + 6348);
    *(_DWORD *)long long v12 = 134349568;
    *(void *)&v12[4] = v8;
    __int16 v13 = 2050;
    uint64_t v14 = v9;
    __int16 v15 = 1026;
    int v16 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_1011F20B0(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1011F20CC(uint64_t a1@<X0>, uint64_t *a2@<X1>, int i@<W2>, void *a4@<X8>)
{
  int v7 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1000E208C(a4, *(uint64_t **)(a1 + 6280), *(uint64_t **)(a1 + 6288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 6288) - *(void *)(a1 + 6280)) >> 3));
  uint64_t v8 = (uint64_t)(v7 + 3);
  sub_1000E346C((uint64_t)(v7 + 3), a1 + 6304);
  v7[10] = *(void *)(a1 + 6360);
  *((_OWORD *)v7 + 4) = *(_OWORD *)(a1 + 6344);
  if (i)
  {
    sub_1000E2F40(v7 + 3);
    uint64_t v9 = *v7;
    uint64_t v10 = v7[1];
    while (v10 != v9)
    {
      v10 -= 24;
      *(void *)long long buf = v10;
      sub_1000D7F78((void ***)buf);
    }
    v7[1] = v9;
  }
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  uint64_t v11 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v12 = 0;
    int v63 = 0;
    int v64 = 0;
    unsigned int v13 = 0;
    int v66 = v7;
    int v65 = i;
    do
    {
      uint64_t v14 = *(void *)(a1 + 1632);
      uint64_t v15 = *(void *)(a1 + 1640) - v14;
      if (!v15) {
        goto LABEL_11;
      }
      if (0xD37A6F4DE9BD37A7 * (v15 >> 3) <= v12) {
        sub_100273D6C();
      }
      if (*(double *)(v14 + 184 * v12 + 20) < 0.0)
      {
LABEL_11:
        int v16 = (uint64_t *)(v11 + 24 * v12);
        uint64_t v17 = *v16;
        if (i && *(_DWORD *)(a1 + 6348) == 2 && *(double *)(v17 + 56) <= *(double *)(a1 + 6360))
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_102318040);
          }
          uint64_t v30 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = *(void *)(*v16 + 56);
            uint64_t v32 = (*(void *)(v11 + 24 * v12 + 8) - *v16) >> 3;
            *(_DWORD *)long long buf = 134349312;
            *(void *)&uint8_t buf[4] = v31;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = 0x2E8BA2E8BA2E8BA3 * v32;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, unknown, %{public}.1f, aps, %{public}ld", buf, 0x16u);
          }
          int v7 = v66;
          uint64_t i = v65;
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_102318040);
            }
            uint64_t v42 = *(void *)(*v16 + 56);
            uint64_t v43 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v11 + 24 * v12 + 8) - *v16) >> 3);
            int v70 = 134349312;
            *(void *)uint64_t v71 = v42;
            *(_WORD *)&v71[8] = 2050;
            *(void *)&v71[10] = v43;
            int v44 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v44);
            if (v44 != buf) {
              free(v44);
            }
          }
          ++v63;
        }
        else
        {
          uint64_t v18 = v11 + 24 * v12;
          uint64_t v20 = *(void *)(v18 + 8);
          long long v19 = (uint64_t *)(v18 + 8);
          if (v7[6] + 0x2E8BA2E8BA2E8BA3 * ((v20 - v17) >> 3) <= (unint64_t)dword_1024863E8)
          {
            uint64_t v25 = *v7;
            uint64_t v24 = v7[1];
            uint64_t v26 = v67;
            BOOL v27 = v68;
            if (0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3) - 0x5555555555555555 * (((uint64_t)v27 - v26) >> 3) >= *((int *)sub_101413060() + 2))
            {
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_102318040);
              }
              __int16 v33 = qword_1024193B8;
              if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
              {
                int v34 = *((_DWORD *)sub_101413060() + 2);
                uint64_t v35 = *(void *)(*v16 + 56);
                uint64_t v36 = 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3);
                *(_DWORD *)long long buf = 67240704;
                *(_DWORD *)&uint8_t buf[4] = v34;
                *(_WORD *)&uint8_t buf[8] = 2050;
                *(void *)&buf[10] = v35;
                *(_WORD *)&unsigned char buf[18] = 2050;
                *(void *)&buf[20] = v36;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, max %{public}d WSB gropus reached, %{public}.1f, aps, %{public}ld", buf, 0x1Cu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                int v7 = v66;
                if (qword_1024193B0 != -1) {
                  dispatch_once(&qword_1024193B0, &stru_102318040);
                }
                int v45 = *((_DWORD *)sub_101413060() + 2);
                uint64_t v46 = *(void *)(*v16 + 56);
                uint64_t v47 = 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3);
                int v70 = 67240704;
                *(_DWORD *)uint64_t v71 = v45;
                *(_WORD *)&v71[4] = 2050;
                *(void *)&v71[6] = v46;
                *(_WORD *)&v71[14] = 2050;
                *(void *)&v71[16] = v47;
                long long v48 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v48);
                uint64_t i = v65;
                if (v48 != buf) {
                  free(v48);
                }
              }
              else
              {
                int v7 = v66;
                uint64_t i = v65;
              }
            }
            else
            {
              int v28 = v68;
              if ((unint64_t)v68 >= v69)
              {
                uint64_t v29 = sub_100E471E8(&v67, v16);
                int v7 = v66;
              }
              else
              {
                *uint64_t v68 = 0;
                v28[1] = 0;
                v28[2] = 0;
                int v7 = v66;
                sub_1000DA6E8(v28, *v16, *v19, 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3));
                uint64_t v29 = (uint64_t)(v28 + 3);
              }
              uint64_t v68 = (void *)v29;
              __int16 v37 = (void *)*v16;
              uint64_t v38 = *v19;
              for (uint64_t i = v65; v37 != (void *)v38; v37 += 11)
              {
                *(void *)long long buf = *v37;
                sub_1000E34E4(v8, buf, buf);
              }
            }
          }
          else
          {
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_102318040);
            }
            int v21 = qword_1024193B8;
            if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v22 = *(void *)(*v16 + 56);
              uint64_t v23 = 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3);
              *(_DWORD *)long long buf = 134349312;
              *(void *)&uint8_t buf[4] = v22;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(void *)&buf[14] = v23;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, alsmax, %{public}.1f, aps, %{public}ld", buf, 0x16u);
            }
            int v7 = v66;
            uint64_t i = v65;
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_102318040);
              }
              uint64_t v39 = *(void *)(*v16 + 56);
              uint64_t v40 = 0x2E8BA2E8BA2E8BA3 * ((*v19 - *v16) >> 3);
              int v70 = 134349312;
              *(void *)uint64_t v71 = v39;
              *(_WORD *)&v71[8] = 2050;
              *(void *)&v71[10] = v40;
              __int16 v41 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v41);
              if (v41 != buf) {
                free(v41);
              }
            }
            ++v64;
          }
        }
      }
      uint64_t v11 = *a2;
      unint64_t v12 = ++v13;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v13);
    if (v63 > 0)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      int v49 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v63;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, unknownaps, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        int v70 = 67240192;
        *(_DWORD *)uint64_t v71 = v63;
        uint64_t v61 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v61);
        if (v61 != buf) {
          free(v61);
        }
      }
      AnalyticsSendEventLazy();
    }
    if (v64 >= 1)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      long long v50 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v64;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, alsmax, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        int v70 = 67240192;
        *(_DWORD *)uint64_t v71 = v64;
        int v62 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v62);
        if (v62 != buf) {
          free(v62);
        }
      }
      AnalyticsSendEventLazy();
      goto LABEL_68;
    }
    if (v63 >= 1) {
LABEL_68:
    }
      AnalyticsSendEventLazy();
  }
  sub_1011F64E8(v7, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3) - 0x5555555555555555 * (((uint64_t)v68 - v67) >> 3));
  uint64_t v51 = v67;
  uint64_t v52 = v68;
  while ((void *)v51 != v52)
  {
    sub_1011F8040(v7, v51);
    v51 += 24;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  uint64_t v53 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3);
    uint64_t v55 = v7[6];
    uint64_t v56 = *(void *)(a1 + 6360);
    *(_DWORD *)long long buf = 134349568;
    *(void *)&uint8_t buf[4] = v54;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v55;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(void *)&uint8_t buf[24] = v56;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "@WsbReproc, update, groups, %{public}lu, unknownAPs, %{public}lu, deleteTo, %{public}0.1f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3);
    uint64_t v58 = v7[6];
    uint64_t v59 = *(void *)(a1 + 6360);
    int v70 = 134349568;
    *(void *)uint64_t v71 = v57;
    *(_WORD *)&v71[8] = 2050;
    *(void *)&v71[10] = v58;
    *(_WORD *)&v71[18] = 2050;
    *(void *)&v71[20] = v59;
    uint64_t v60 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static Types::Wsb CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateScanBuffer(const Input &, const CLWifiService_Type::AccessPointGroups &, BOOL)", "%s\n", v60);
    if (v60 != buf) {
      free(v60);
    }
  }
  *(void *)long long buf = &v67;
  sub_1000D7F04((void ***)buf);
}

void sub_1011F2F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  a43 = (void **)&a36;
  sub_1000D7F04(&a43);
  sub_10050FE8C(v43);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F2FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (unsigned char *)(a1 + 6376);
  uint64_t result = (uint64_t)sub_1000DE9B8((_DWORD *)a2, a1);
  if (*v4 && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) > 0))
  {
    sub_1011F31A4((long long *)(a1 + 6168), a1 + 5968, *(_DWORD *)(a1 + 6156), a1 + 1408, v4[46], (uint64_t)&v28, *(_DWORD **)(a1 + 6384));
    uint64_t v25 = a2 + 6168;
    uint64_t v26 = a2 + 5968;
    uint64_t v27 = a2 + 6156;
    sub_1011F7D48((uint64_t)&v25, &v28);
    if (v39 < 0) {
      operator delete(__p);
    }
    if (v37 < 0) {
      operator delete(v36);
    }
    uint64_t result = sub_1000E6DB4(a1 + 1408);
    if (result)
    {
      long long v6 = *(_OWORD *)(a1 + 1552);
      *(_OWORD *)(a2 + 5072) = *(_OWORD *)(a1 + 1536);
      *(_OWORD *)(a2 + 5088) = v6;
      *(_OWORD *)(a2 + 5104) = *(_OWORD *)(a1 + 1568);
      long long v7 = *(_OWORD *)(a1 + 1488);
      *(_OWORD *)(a2 + 5008) = *(_OWORD *)(a1 + 1472);
      *(_OWORD *)(a2 + 5024) = v7;
      long long v8 = *(_OWORD *)(a1 + 1520);
      *(_OWORD *)(a2 + 5040) = *(_OWORD *)(a1 + 1504);
      *(_OWORD *)(a2 + 5056) = v8;
      long long v9 = *(_OWORD *)(a1 + 1424);
      *(_OWORD *)(a2 + 4944) = *(_OWORD *)(a1 + 1408);
      *(_OWORD *)(a2 + 4960) = v9;
      long long v10 = *(_OWORD *)(a1 + 1456);
      *(_OWORD *)(a2 + 4976) = *(_OWORD *)(a1 + 1440);
      *(void *)(a2 + 5120) = *(void *)(a1 + 1584);
      *(_OWORD *)(a2 + 4992) = v10;
    }
    if (*(unsigned char *)(a1 + 1400))
    {
      uint64_t v11 = (uint64_t *)(a1 + 1304);
      *(void *)&long long v28 = sub_1000D8908(a2 + 3208);
      uint64_t v25 = *v11;
      BOOL v12 = sub_100B39178(&v28, &v25);
      if (v12)
      {
        char v20 = sub_10106EB0C((uint64_t)v11);
        return sub_100F91E90(a2 + 3208, v20);
      }
      else
      {
        sub_101AA6850(v12, v13, v14, v15, v16, v17, v18, v19, v21, v22, v23, v24, v25, v26, v27, v28, *((uint64_t *)&v28 + 1), v29, v30,
          v31,
          v32,
          v33,
          v34,
          v35);
        uint64_t result = abort_report_np();
        __break(1u);
      }
    }
  }
  return result;
}

void sub_1011F3184(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1011F31A4(long long *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, _DWORD *a7@<D0>)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  uint64_t v14 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *(_DWORD *)a1;
    *(_DWORD *)long long buf = 67240192;
    *(_DWORD *)int v81 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "@EmerCheck, top, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    int v49 = *(_DWORD *)a1;
    LODWORD(v70) = 67240192;
    HIDWORD(v70) = v49;
    long long v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v50);
    if (v50 != (char *)buf) {
      free(v50);
    }
  }
  int v16 = *(_DWORD *)a1;
  BOOL v17 = sub_1006D30F0((_DWORD *)a2);
  if (v16 <= 1 || !v17)
  {
    long long v22 = a1[5];
    *(_OWORD *)(a6 + 64) = a1[4];
    *(_OWORD *)(a6 + 80) = v22;
    *(_OWORD *)(a6 + 96) = a1[6];
    long long v23 = a1[1];
    *(_OWORD *)a6 = *a1;
    *(_OWORD *)(a6 + 16) = v23;
    long long v24 = a1[3];
    *(_OWORD *)(a6 + 32) = a1[2];
    *(_OWORD *)(a6 + 48) = v24;
    sub_100689E94(a6 + 112, (uint64_t *)a2);
    *(_DWORD *)(a6 + 256) = 0;
    return;
  }
  long long v19 = a1[5];
  long long v64 = a1[4];
  long long v65 = v19;
  long long v66 = a1[6];
  long long v20 = a1[1];
  long long v60 = *a1;
  long long v61 = v20;
  long long v21 = a1[3];
  long long v62 = a1[2];
  long long v63 = v21;
  uint64_t v70 = *(void *)a2;
  char v71 = *(unsigned char *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000DC48C(&v72, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v72 = *(_OWORD *)(a2 + 16);
    uint64_t v73 = *(void *)(a2 + 32);
  }
  long long v75 = *(_OWORD *)(a2 + 56);
  long long v76 = *(_OWORD *)(a2 + 72);
  v77[0] = *(_OWORD *)(a2 + 88);
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)(a2 + 100);
  long long v74 = *(_OWORD *)(a2 + 40);
  if (*(char *)(a2 + 143) < 0)
  {
    sub_1000DC48C(&v78, *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v78 = *(_OWORD *)(a2 + 120);
    uint64_t v79 = *(void *)(a2 + 136);
  }
  int v59 = a3;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  uint64_t v25 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *(_DWORD *)a1;
    *(_DWORD *)long long buf = 67240192;
    *(_DWORD *)int v81 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "@EmerCheck, current, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    int v51 = *(_DWORD *)a1;
    LODWORD(v69[0]) = 67240192;
    HIDWORD(v69[0]) = v51;
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v52);
    if (v52 != (char *)buf) {
      free(v52);
    }
  }
  v69[0] = &v60;
  v69[1] = &v59;
  v69[2] = a7;
  switch(*(_DWORD *)a1)
  {
    case 2:
      if (!a5)
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        uint64_t v35 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 67240192;
          *(_DWORD *)int v81 = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "@EmerCheck, support 5GHz, %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_102318040);
          }
          int v67 = 67240192;
          LODWORD(v68[0]) = 0;
          uint64_t v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v33);
          goto LABEL_154;
        }
        goto LABEL_77;
      }
      if (*(_DWORD *)(a4 + 84) >= 0x45u && !*sub_10141229C())
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        uint64_t v46 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          int v47 = *(_DWORD *)(a4 + 84);
          *(_DWORD *)long long buf = 67240192;
          *(_DWORD *)int v81 = v47;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "@EmerCheck, confidence, %{public}d, above threshold", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_102318040);
          }
          int v48 = *(_DWORD *)(a4 + 84);
          int v67 = 67240192;
          LODWORD(v68[0]) = v48;
          uint64_t v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v33);
          goto LABEL_154;
        }
        goto LABEL_77;
      }
      LODWORD(v60) = 3;
      if (*(double *)&v63 < *((double *)&v60 + 1))
      {
        *(void *)&long long v63 = a7;
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        uint64_t v27 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134349056;
          *(double *)int v81 = *(double *)&v63 - *((double *)&v60 + 1);
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@EmerTick, scanrequest5ghzwithals, %{public}.1f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_102318040);
          }
          int v67 = 134349056;
          v68[0] = *(double *)&v63 - *((double *)&v60 + 1);
          uint64_t v58 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v58);
          if (v58 != (char *)buf) {
            free(v58);
          }
        }
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      long long v28 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        *(_DWORD *)int v81 = v59;
        *(_WORD *)&v81[4] = 2050;
        *(double *)&v81[6] = *(double *)&v63 - *((double *)&v60 + 1);
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanRequest5GHzWithPendingAls, queryType, %{public}d, tte, %{public}.1f", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        int v67 = 67240448;
        LODWORD(v68[0]) = v59;
        WORD2(v68[0]) = 2050;
        *(double *)((char *)v68 + 6) = *(double *)&v63 - *((double *)&v60 + 1);
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v29);
        break;
      }
      goto LABEL_78;
    case 4:
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      uint64_t v31 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanRequest5GHzWithAlsReply, waiting for 5GHz scan result", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          goto LABEL_160;
        }
        goto LABEL_69;
      }
      goto LABEL_78;
    case 5:
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      uint64_t v32 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "@EmerWarn, ScanReply5GHzWithPendingAls, abort waiting for the preliminary ALS response", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        LOWORD(v67) = 0;
        uint64_t v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v33);
LABEL_154:
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      goto LABEL_77;
    case 6:
LABEL_77:
      sub_1011F659C(v69);
      goto LABEL_78;
    case 8:
      LODWORD(v60) = 9;
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      uint64_t v34 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "@EmerFlow, Done, alsreply", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_78;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
LABEL_160:
      }
        dispatch_once(&qword_1024193B0, &stru_102318040);
LABEL_69:
      LOWORD(v67) = 0;
      uint64_t v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v29);
      break;
    default:
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      uint64_t v30 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        *(_DWORD *)int v81 = v60;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "@EmerWarn, unexpected state, processScanResult, %{public}d, #CloneMe", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_78;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      int v67 = 67240192;
      LODWORD(v68[0]) = v60;
      uint64_t v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v29);
      break;
  }
  if (v29 != (char *)buf) {
    free(v29);
  }
LABEL_78:
  if (*(double *)(a4 + 20) > 0.0 && *((double *)&v65 + 1) < *((double *)&v60 + 1))
  {
    *((void *)&v65 + 1) = a7;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    uint64_t v36 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)int v81 = *((double *)&v65 + 1) - *((double *)&v60 + 1);
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "@EmerTick, anyfix, %{public}.1f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      int v67 = 134349056;
      v68[0] = *((double *)&v65 + 1) - *((double *)&v60 + 1);
      unint64_t v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v57);
      if (v57 != (char *)buf) {
        free(v57);
      }
    }
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  char v37 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    int v38 = *(_DWORD *)(a4 + 156);
    *(_DWORD *)long long buf = 67240448;
    *(_DWORD *)int v81 = v60;
    *(_WORD *)&v81[4] = 1026;
    *(_DWORD *)&v81[6] = v38;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "@EmerCheck, switched, %{public}d, aps, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    int v53 = *(_DWORD *)(a4 + 156);
    int v67 = 67240448;
    LODWORD(v68[0]) = v60;
    WORD2(v68[0]) = 1026;
    *(_DWORD *)((char *)v68 + 6) = v53;
    unint64_t v54 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v54);
    if (v54 != (char *)buf) {
      free(v54);
    }
  }
  if (*(_DWORD *)(a4 + 156) >= 9u)
  {
    if (*(double *)&v66 < *((double *)&v60 + 1))
    {
      *(void *)&long long v66 = a7;
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      char v39 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134349056;
        *(double *)int v81 = *(double *)&v66 - *((double *)&v60 + 1);
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "@EmerTick, sufficientfix, %{public}.1f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        int v67 = 134349056;
        v68[0] = *(double *)&v66 - *((double *)&v60 + 1);
        uint64_t v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
    }
    goto LABEL_102;
  }
  if (v60 == 9)
  {
LABEL_102:
    sub_1006D3144((int *)&v70);
    if (v60 != 9)
    {
      LODWORD(v60) = 9;
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      __int16 v41 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@EmerFlow, Done, conditions", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        LOWORD(v67) = 0;
        uint64_t v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v56);
        if (v56 != (char *)buf) {
          free(v56);
        }
      }
    }
    int v59 = 0;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  uint64_t v42 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67240192;
    *(_DWORD *)int v81 = v60;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "@EmerCheck, returned, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    int v67 = 67240192;
    LODWORD(v68[0]) = v60;
    uint64_t v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::tuple<Types::Emergency, CLWifiLocationUpdateRequest, Types::AlsQueryType> CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)", "%s\n", v55);
    if (v55 != (char *)buf) {
      free(v55);
    }
  }
  long long v43 = v65;
  *(_OWORD *)(a6 + 64) = v64;
  *(_OWORD *)(a6 + 80) = v43;
  *(_OWORD *)(a6 + 96) = v66;
  long long v44 = v61;
  *(_OWORD *)a6 = v60;
  *(_OWORD *)(a6 + 16) = v44;
  long long v45 = v63;
  *(_OWORD *)(a6 + 32) = v62;
  *(_OWORD *)(a6 + 48) = v45;
  sub_100689E94(a6 + 112, &v70);
  *(_DWORD *)(a6 + 256) = v59;
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)v78);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
}

void sub_1011F4774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1011F4804(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DE9B8((_DWORD *)a3, a1);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  long long v6 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 6288) - *(void *)(a1 + 6280)) >> 3);
    int v8 = *a2;
    int v9 = *(_DWORD *)(a1 + 6344);
    *(_DWORD *)long long buf = 134349568;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WsbAls, unknown, groups, %{public}ld, tags, %{public}d, %{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 6288) - *(void *)(a1 + 6280)) >> 3);
    int v15 = *a2;
    int v16 = *(_DWORD *)(a1 + 6344);
    *(_DWORD *)long long v22 = 134349568;
    *(void *)&v22[4] = v14;
    __int16 v23 = 1026;
    *(_DWORD *)long long v24 = v15;
    *(_WORD *)&v24[4] = 1026;
    *(_DWORD *)&v24[6] = v16;
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsAllUnknown &) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (*(void *)(a1 + 6288) != *(void *)(a1 + 6280) && *(_DWORD *)(a1 + 6344) == *a2)
  {
    sub_1011F20CC(a1, (uint64_t *)(a1 + 6280), 1, buf);
    sub_1000DA970((void ***)(a3 + 6280));
    *(_OWORD *)(a3 + 6280) = *(_OWORD *)buf;
    *(void *)(a3 + 6296) = *(void *)&buf[16];
    memset(buf, 0, sizeof(buf));
    sub_1000E2E9C(a3 + 6304, v27);
    *(_OWORD *)(a3 + 6344) = v28;
    *(void *)(a3 + 6360) = v29;
    sub_1000D7D80((uint64_t)v27);
    *(void *)long long v22 = buf;
    sub_1000D7F04((void ***)v22);
    if (*(_DWORD *)(a1 + 6348) == 2 && *(double *)(a3 + 6360) > 0.0)
    {
      *(_DWORD *)(a3 + 6348) = 0;
      *(void *)(a3 + 6360) = 0;
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    long long v10 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 6288) - *(void *)(a3 + 6280)) >> 3);
      uint64_t v12 = *(void *)(a3 + 6328);
      int v13 = *(_DWORD *)(a1 + 6348);
      *(_DWORD *)long long buf = 134349568;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v12;
      *(_WORD *)&unsigned char buf[22] = 1026;
      LODWORD(v27[0]) = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@WsbReproc, remain, groups, %{public}lu, unknownAPs, %{public}lu, pass, %{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 6288) - *(void *)(a3 + 6280)) >> 3);
      uint64_t v19 = *(void *)(a3 + 6328);
      int v20 = *(_DWORD *)(a1 + 6348);
      *(_DWORD *)long long v22 = 134349568;
      *(void *)&v22[4] = v18;
      __int16 v23 = 2050;
      *(void *)long long v24 = v19;
      *(_WORD *)&v24[8] = 1026;
      int v25 = v20;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsAllUnknown &) const", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

void sub_1011F4CAC(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1011F4CCC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = sub_1000DE9B8((_DWORD *)a2, a1);
  if (!*(unsigned char *)(a1 + 6376)) {
    return;
  }
  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 1640) - *(void *)(a1 + 1632)) >> 3) != 0xAAAAAAAAAAAAAAABLL
                                                                                                 * ((uint64_t)(*(void *)(a1 + 1080) - *(void *)(a1 + 1072)) >> 3))
  {
    sub_101AA69A8((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v24, v25, v26, v27, (uint64_t)v28, v29, *((uint64_t *)&v29 + 1), v30, *(uint64_t *)buf, *(uint64_t *)&buf[8], *(uint64_t *)&buf[16],
      v32[0],
      v32[1],
      v32[2],
      v32[3],
      v32[4]);
    abort_report_np();
    __break(1u);
    goto LABEL_17;
  }
  sub_1011F20CC(a1, (uint64_t *)(a1 + 1072), 0, buf);
  sub_1000DA970((void ***)(a2 + 6280));
  *(_OWORD *)(a2 + 6280) = *(_OWORD *)buf;
  *(void *)(a2 + 6296) = *(void *)&buf[16];
  memset(buf, 0, sizeof(buf));
  sub_1000E2E9C(a2 + 6304, v32);
  *(_OWORD *)(a2 + 6344) = v33;
  *(void *)(a2 + 6360) = v34;
  sub_1000D7D80((uint64_t)v32);
  long long v28 = buf;
  sub_1000D7F04((void ***)&v28);
  if (!*(void *)(a2 + 6328)) {
    return;
  }
  if (*(unsigned char *)(a1 + 1096))
  {
    if (!sub_100F91E80(a1 + 3208))
    {
      uint64_t v13 = 0x40C5180000000000;
      goto LABEL_10;
    }
    if (*(unsigned char *)(a1 + 1096)) {
      goto LABEL_11;
    }
  }
  if (!sub_100F91E80(a1 + 3208)) {
    goto LABEL_11;
  }
  uint64_t v13 = 0x402E000000000000;
LABEL_10:
  *(unsigned char *)(a2 + 1656) = 1;
  *(void *)(a2 + 6352) = v13;
LABEL_11:
  double v2 = &qword_102419000;
  if (qword_1024193B0 != -1) {
LABEL_17:
  }
    dispatch_once(&qword_1024193B0, &stru_102318040);
  unint64_t v14 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *(unsigned __int8 *)(a2 + 1656);
    uint64_t v16 = *(void *)(a2 + 6328);
    int v17 = *(unsigned __int8 *)(a1 + 1096);
    int v18 = (int)*(double *)(a2 + 6352);
    *(_DWORD *)long long buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = v15;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v16;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v17;
    LOWORD(v32[0]) = 1026;
    *(_DWORD *)((char *)v32 + 2) = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WsbTimer, set, %{public}d, unknown, %{public}ld, wasempty, %{public}d, delay, %{public}d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[118] != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    int v19 = *(unsigned __int8 *)(a2 + 1656);
    uint64_t v20 = *(void *)(a2 + 6328);
    int v21 = *(unsigned __int8 *)(a1 + 1096);
    int v22 = (int)*(double *)(a2 + 6352);
    LODWORD(v28) = 67240960;
    HIDWORD(v28) = v19;
    LOWORD(v29) = 2050;
    *(void *)((char *)&v29 + 2) = v20;
    WORD5(v29) = 1026;
    HIDWORD(v29) = v21;
    LOWORD(v30) = 1026;
    *(_DWORD *)((char *)&v30 + 2) = v22;
    __int16 v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
}

void sub_1011F5034(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1011F5058(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = (unsigned char *)(a1 + 6152);
  sub_1000DE9B8((_DWORD *)a3, a1);
  if (!v9[227] || !v9[224]) {
    return;
  }
  double v10 = *(double *)(a1 + 6384);
  double v11 = v10;
  if (*(unsigned char *)(a1 + 1400))
  {
    unsigned int v12 = a1 + 1304;
    *(void *)long long buf = sub_1000D8908(a3 + 3208);
    *(void *)uint64_t v124 = *(void *)(a1 + 1304);
    BOOL v13 = sub_100B39178(buf, v124);
    if (!v13)
    {
      sub_101AA6850(v13, v14, v15, v16, v17, v18, v19, v20, v79, v80, v81, v82, v83, (uint64_t)v84, (uint64_t)v85, v86, v87, v88, *((uint64_t *)&v88 + 1),
        v89,
        v90,
        (uint64_t)v91,
        (uint64_t)v92,
        v93);
      abort_report_np();
      __break(1u);
      goto LABEL_129;
    }
    char v21 = sub_10106EB0C(a1 + 1304);
    sub_100F91E90(a3 + 3208, v21);
    double v11 = *(double *)(a1 + 6384);
  }
  double v22 = *(double *)(a1 + 6120);
  uint64_t v114 = *(void *)(a1 + 816);
  char v115 = *(unsigned char *)(a1 + 824);
  if (*(char *)(a1 + 855) < 0)
  {
    sub_1000DC48C(&v116, *(void **)(a1 + 832), *(void *)(a1 + 840));
  }
  else
  {
    long long v116 = *(_OWORD *)(a1 + 832);
    uint64_t v117 = *(void *)(a1 + 848);
  }
  __n128 v3 = &v114;
  long long v23 = *(_OWORD *)(a1 + 856);
  long long v119 = *(_OWORD *)(a1 + 872);
  long long v24 = *(_OWORD *)(a1 + 904);
  long long v120 = *(_OWORD *)(a1 + 888);
  v121[0] = v24;
  *(_OWORD *)((char *)v121 + 12) = *(_OWORD *)(a1 + 916);
  long long v118 = v23;
  if (*(char *)(a1 + 959) < 0)
  {
    sub_1000DC48C(&v122, *(void **)(a1 + 936), *(void *)(a1 + 944));
  }
  else
  {
    long long v122 = *(_OWORD *)(a1 + 936);
    uint64_t v123 = *(void *)(a1 + 952);
  }
  uint64_t v104 = *(void *)a2;
  char v105 = *(unsigned char *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000DC48C(&v106, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v106 = *(_OWORD *)(a2 + 16);
    uint64_t v107 = *(void *)(a2 + 32);
  }
  uint64_t v4 = &v97;
  long long v25 = *(_OWORD *)(a2 + 56);
  long long v26 = *(_OWORD *)(a2 + 88);
  long long v110 = *(_OWORD *)(a2 + 72);
  v111[0] = v26;
  *(_OWORD *)((char *)v111 + 12) = *(_OWORD *)(a2 + 100);
  long long v108 = *(_OWORD *)(a2 + 40);
  long long v109 = v25;
  if (*(char *)(a2 + 143) < 0)
  {
    sub_1000DC48C(&v112, *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v112 = *(_OWORD *)(a2 + 120);
    uint64_t v113 = *(void *)(a2 + 136);
  }
  if (*(void *)(a1 + 1128)) {
    *(unsigned char *)(a3 + 6076) = 0;
  }
  if (v9[268] && !sub_1006D30F0(&v104))
  {
    *(_DWORD *)long long buf = 2;
    sub_1006D40A4(&v104, buf);
  }
  if (v9[20])
  {
    *(_DWORD *)long long buf = 6;
    sub_1006D40A4(&v104, buf);
  }
  BOOL v27 = sub_100054BBC(&v114);
  double v11 = vabdd_f64(v11, v22);
  if (v11 >= 5.0 && v27) {
    sub_1006D3144((int *)&v114);
  }
  if (sub_100054BBC(&v114)
    && (int v29 = sub_1006D40B0((unsigned int *)&v104), v29 <= (int)sub_1006D40B0((unsigned int *)&v114)))
  {
    if (sub_1006D40C4((uint64_t)&v114)) {
      unsigned int v12 = (v11 >= 5.0) & ~sub_1006D40C4((uint64_t)&v104);
    }
    else {
      unsigned int v12 = 0;
    }
  }
  else
  {
    unsigned int v12 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 811) != v12)
  {
    unint64_t v5 = &qword_102419000;
    if (qword_1024193B0 == -1)
    {
LABEL_35:
      uint64_t v30 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
      {
        int v31 = *(unsigned __int8 *)(a1 + 811);
        *(_DWORD *)long long buf = 67174913;
        *(_DWORD *)&uint8_t buf[4] = v31;
        *(_WORD *)&uint8_t buf[8] = 1025;
        *(_DWORD *)&buf[10] = v12;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "@WifiFlow, scanreq inconsistent, pre, %{private}d, post, %{private}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v5[118] != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        int v71 = *(unsigned __int8 *)(a1 + 811);
        *(_DWORD *)uint64_t v124 = 67174913;
        *(_DWORD *)&v124[4] = v71;
        LOWORD(v125[0]) = 1025;
        *(_DWORD *)((char *)v3 + 162) = v12;
        long long v72 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v72);
        if (v72 != buf) {
          free(v72);
        }
      }
      goto LABEL_38;
    }
LABEL_129:
    dispatch_once(&qword_1024193B0, &stru_102318040);
    goto LABEL_35;
  }
LABEL_38:
  long long v32 = *(_OWORD *)(a1 + 6248);
  long long v101 = *(_OWORD *)(a1 + 6232);
  long long v102 = v32;
  long long v103 = *(_OWORD *)(a1 + 6264);
  long long v33 = *(_OWORD *)(a1 + 6184);
  long long v97 = *(_OWORD *)(a1 + 6168);
  long long v98 = v33;
  long long v34 = *(_OWORD *)(a1 + 6216);
  long long v99 = *(_OWORD *)(a1 + 6200);
  long long v100 = v34;
  if (((sub_1006D3100(&v104) | v12 ^ 1) & 1) == 0)
  {
    sub_1011F31A4(&v97, a3 + 5968, *(_DWORD *)(a1 + 6156), a1 + 1408, v9[270], (uint64_t)buf, *(_DWORD **)(a1 + 6384));
    *(void *)uint64_t v124 = &v97;
    v125[0] = a3 + 5968;
    v125[1] = a3 + 6156;
    sub_1011F7D48((uint64_t)v124, (long long *)buf);
    if (v139 < 0) {
      operator delete(__p);
    }
    if (v137 < 0) {
      operator delete(v136);
    }
  }
  if (!sub_1006D30F0(&v104) && *(unsigned char *)(a1 + 1624))
  {
    sub_1006D3144((int *)(a3 + 5968));
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    uint64_t v35 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = sub_1011F7E4C((uint64_t)&buf[8], (uint64_t *)a2);
      uint64_t v36 = sub_1000E0EF0((int *)buf);
      *(_DWORD *)uint64_t v124 = 136446210;
      *(uint64_t *)((char *)v3 + 156) = (uint64_t)v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreq, false, reason, good fix, event, %{public}s", v124, 0xCu);
      sub_1000D7B80((uint64_t)buf);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      *(_DWORD *)uint64_t v124 = sub_1011F7E4C((uint64_t)v125, (uint64_t *)a2);
      uint64_t v73 = sub_1000E0EF0((int *)v124);
      int v126 = 136446210;
      uint64_t v127 = v73;
      long long v74 = (char *)_os_log_send_and_compose_impl();
      sub_1000D7B80((uint64_t)v124);
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v74);
      if (v74 != buf) {
        free(v74);
      }
    }
    unsigned int v12 = 0;
  }
  if (((sub_1006D30F0(&v104) | v12 ^ 1) & 1) == 0 && v11 < 5.0 && *v9)
  {
    *(unsigned char *)(a3 + 1657) = 1;
    sub_1006D331C(a3 + 5968, 5, 0xAu, v10);
    sub_1006D3144((int *)(a3 + 5968));
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    char v37 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = (int)v11;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreq, suppressed, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      *(_DWORD *)uint64_t v124 = 67240192;
      *(_DWORD *)&v124[4] = (int)v11;
      int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    goto LABEL_116;
  }
  if (v12)
  {
    int v39 = v9[296];
    if (sub_1006D30F0(&v104)) {
      int v40 = 10;
    }
    else {
      int v40 = v39;
    }
    if (sub_1006D30F0(&v104))
    {
      LODWORD(v97) = 1;
      *(_DWORD *)(a3 + 6156) = 1;
      if (*(double *)&v99 < *((double *)&v97 + 1))
      {
        *(void *)&long long v99 = *(void *)(a1 + 6384);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        __int16 v41 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134349056;
          *(double *)&uint8_t buf[4] = *(double *)&v99 - *((double *)&v97 + 1);
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@EmerTick, scanrequest, %{public}.1f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_102318040);
          }
          *(_DWORD *)uint64_t v124 = 134349056;
          *(double *)((char *)v3 + 156) = *(double *)&v99 - *((double *)&v97 + 1);
          long long v78 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v78);
          if (v78 != buf) {
            free(v78);
          }
        }
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      uint64_t v42 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        long long v43 = sub_100D54EB0((char)v40);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v43;
        *(_WORD *)&unsigned char buf[12] = 2050;
        double v129 = *(double *)&v99 - *((double *)&v97 + 1);
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanRequest, type, %{public}s, tte, %{public}.1f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        long long v75 = sub_100D54EB0((char)v40);
        double v76 = *(double *)&v99 - *((double *)&v97 + 1);
        *(_DWORD *)uint64_t v124 = 136446466;
        *(uint64_t *)((char *)v3 + 156) = (uint64_t)v75;
        WORD2(v125[0]) = 2050;
        *(double *)((char *)v3 + 166) = v76;
        char v77 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v77);
        if (v77 != buf) {
          free(v77);
        }
      }
    }
    if (sub_1006D3114(&v104))
    {
      double v44 = *(double *)(a1 + 6384);
      int v45 = sub_1006D40C4(a3 + 5968);
      char v46 = sub_1006D30F0(&v104);
      sub_1006D3DD4((char *)a2, (uint64_t)&v95);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 6472) + 16))(&v90);
      sub_1011F7CA8((uint64_t)buf, 7, v45, v46, &v95, (uint64_t)&v90, v44);
      sub_1011F6230(a3 + 1664, (uint64_t)buf);
      if (v135 && v133)
      {
        uint64_t v134 = v133;
        operator delete(v133);
      }
      if (v132 < 0) {
        operator delete(v131);
      }
      if (v94 && v91)
      {
        long long v92 = v91;
        operator delete(v91);
      }
      if ((v96 & 0x80000000) == 0) {
        goto LABEL_103;
      }
      int v47 = (void *)v95;
    }
    else
    {
      double v48 = *(double *)(a1 + 6384);
      int v49 = sub_1006D40C4(a3 + 5968);
      char v50 = sub_1006D30F0(&v104);
      sub_1006D3DD4((char *)a2, (uint64_t)&v88);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 6472) + 16))(&v83);
      sub_1011F7CA8((uint64_t)buf, v40, v49, v50, &v88, (uint64_t)&v83, v48);
      sub_1011F6230(a3 + 1664, (uint64_t)buf);
      if (v135 && v133)
      {
        uint64_t v134 = v133;
        operator delete(v133);
      }
      if (v132 < 0) {
        operator delete(v131);
      }
      if ((_BYTE)v87 && v84)
      {
        long long v85 = v84;
        operator delete(v84);
      }
      if ((SHIBYTE(v89) & 0x80000000) == 0) {
        goto LABEL_103;
      }
      int v47 = (void *)v88;
    }
    operator delete(v47);
LABEL_103:
    if (v40 == 10) {
      int v51 = 3;
    }
    else {
      int v51 = 2;
    }
    sub_1006D331C(a3 + 5968, v51, 0, v10);
    uint64_t v52 = (uint64_t **)(*(void *)(a3 + 6424) + 56);
    *(void *)long long buf = a3 + 1688;
    int v53 = sub_100510C30(v52, (const void **)(a3 + 1688), (uint64_t)&unk_101D0B290, (long long **)buf);
    ++*((_DWORD *)v53 + 14);
    uint64_t v54 = *(void *)(a3 + 6424);
    sub_100134750(buf, "total");
    *(void *)uint64_t v124 = buf;
    uint64_t v55 = sub_100510D70((uint64_t **)(v54 + 56), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v124);
    ++*((_DWORD *)v55 + 14);
    if (v130 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v56 = *(void *)(a3 + 6424);
    if (*(unsigned char *)(a3 + 1744)) {
      __int16 v57 = *(unsigned __int8 *)(a3 + 1712) | 0x100;
    }
    else {
      __int16 v57 = 0;
    }
    sub_10050CAF0(*(char *)(a3 + 1664), v57);
    *(void *)uint64_t v124 = buf;
    uint64_t v58 = sub_100510D70((uint64_t **)(v56 + 80), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v124);
    ++*((_DWORD *)v58 + 14);
    if (v130 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v59 = *(void *)(a3 + 6424);
    sub_100134750(buf, "total");
    *(void *)uint64_t v124 = buf;
    long long v60 = sub_100510D70((uint64_t **)(v59 + 80), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v124);
    ++*((_DWORD *)v60 + 14);
    if (v130 < 0) {
      operator delete(*(void **)buf);
    }
    *(void *)(a3 + 6120) = *(void *)(a1 + 6384);
    sub_1006D40E4(a3 + 5968);
  }
LABEL_116:
  if (sub_1000E6DB4(a1 + 1408))
  {
    long long v61 = *(_OWORD *)(a1 + 1552);
    *(_OWORD *)(a3 + 5072) = *(_OWORD *)(a1 + 1536);
    *(_OWORD *)(a3 + 5088) = v61;
    *(_OWORD *)(a3 + 5104) = *(_OWORD *)(a1 + 1568);
    long long v62 = *(_OWORD *)(a1 + 1488);
    *(_OWORD *)(a3 + 5008) = *(_OWORD *)(a1 + 1472);
    *(_OWORD *)(a3 + 5024) = v62;
    long long v63 = *(_OWORD *)(a1 + 1520);
    *(_OWORD *)(a3 + 5040) = *(_OWORD *)(a1 + 1504);
    *(_OWORD *)(a3 + 5056) = v63;
    long long v64 = *(_OWORD *)(a1 + 1424);
    *(_OWORD *)(a3 + 4944) = *(_OWORD *)(a1 + 1408);
    *(_OWORD *)(a3 + 4960) = v64;
    long long v65 = *(_OWORD *)(a1 + 1456);
    *(_OWORD *)(a3 + 4976) = *(_OWORD *)(a1 + 1440);
    *(void *)(a3 + 5120) = *(void *)(a1 + 1584);
    *(_OWORD *)(a3 + 4992) = v65;
  }
  *(void *)(a3 + 816) = *(void *)(a1 + 5968);
  *(unsigned char *)(a3 + 824) = *(unsigned char *)(a1 + 5976);
  std::string::operator=((std::string *)(a3 + 832), (const std::string *)(a1 + 5984));
  long long v66 = *(_OWORD *)(a1 + 6024);
  long long v67 = *(_OWORD *)(a1 + 6056);
  *(_OWORD *)(a3 + 888) = *(_OWORD *)(a1 + 6040);
  *(_OWORD *)(a3 + 904) = v67;
  *(_OWORD *)(a3 + 916) = *(_OWORD *)(a1 + 6068);
  *(_OWORD *)(a3 + 856) = *(_OWORD *)(a1 + 6008);
  *(_OWORD *)(a3 + 872) = v66;
  std::string::operator=((std::string *)(a3 + 936), (const std::string *)(a1 + 6088));
  long long v68 = v99;
  *(_OWORD *)(a3 + 6216) = v100;
  long long v69 = v102;
  *(_OWORD *)(a3 + 6232) = v101;
  *(_OWORD *)(a3 + 6248) = v69;
  long long v70 = v98;
  *(_OWORD *)(a3 + 6168) = v97;
  *(_OWORD *)(a3 + 6184) = v70;
  *(_OWORD *)(a3 + 6200) = v68;
  *(_OWORD *)(a3 + 6257) = *(long long *)((char *)v4 + 89);
  if (SHIBYTE(v113) < 0) {
    operator delete((void *)v112);
  }
  if (SHIBYTE(v107) < 0) {
    operator delete((void *)v106);
  }
  if (SHIBYTE(v123) < 0) {
    operator delete((void *)v122);
  }
  if (SHIBYTE(v117) < 0) {
    operator delete((void *)v116);
  }
}

void sub_1011F60A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  sub_10050EC2C((uint64_t)&a44);
  sub_10050EC2C((uint64_t)&a62);
  sub_10050BAA0(v62);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F6230(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    long long v4 = *(_OWORD *)a2;
    *(void *)(a1 + 13) = *(void *)(a2 + 13);
    *(_OWORD *)a1 = v4;
    unint64_t v5 = (void **)(a1 + 24);
    uint64_t v6 = (long long *)(a2 + 24);
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*v5);
    }
    long long v7 = *v6;
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)unint64_t v5 = v7;
    *(unsigned char *)(a2 + 47) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    sub_1011F7F2C(a1 + 48, (char *)(a2 + 48));
  }
  else
  {
    sub_1011F7FD4(a1, (long long *)a2);
    *(unsigned char *)(a1 + 88) = 1;
  }
  return a1;
}

uint64_t sub_1011F62D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    double v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

NSDictionary *sub_1011F631C(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard:unknownaps";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_1011F63B4(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard:alsmax";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_1011F644C(uint64_t a1)
{
  v2[0] = @"groupResult";
  v2[1] = @"numInGroup";
  v3[0] = @"discard";
  v3[1] = +[NSNumber numberWithInt:(*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32))];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

void **sub_1011F64E8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1000DA5D8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    sub_10093D088(a1, v7);
    return sub_10093D228(v7);
  }
  return result;
}

void sub_1011F6588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10093D228((void **)va);
  _Unwind_Resume(a1);
}

void sub_1011F659C(_DWORD **a1)
{
  if (*((double *)*a1 + 9) < *((double *)*a1 + 1))
  {
    *((void *)*a1 + 9) = a1[2];
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    double v2 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      double v3 = *((double *)*a1 + 9) - *((double *)*a1 + 1);
      *(_DWORD *)long long buf = 134349056;
      *(double *)double v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@EmerTick, alsreq, %{public}.1f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)::(anonymous class)::operator()() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  **a1 = 7;
  *a1[1] = 1;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  uint64_t v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a1[1];
    double v6 = *((double *)*a1 + 9) - *((double *)*a1 + 1);
    *(_DWORD *)long long buf = 67240448;
    LODWORD(v10[0]) = v5;
    WORD2(v10[0]) = 2050;
    *(double *)((char *)v10 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@EmerFlow, AlsRequest, queryType, %{public}d, tte, %{public}.1f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::updateEmergencyStateCurrentLocationUpdateRequestAndApQueryType(const Types::Emergency &, const CLWifiLocationUpdateRequest &, Types::AlsQueryType, const Types::ComputedLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, BOOL)::(anonymous class)::operator()() const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1011F691C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t *)a1;
  double v6 = (unsigned char *)(a1 + 6376);
  sub_1000DE9B8((_DWORD *)a3, a1);
  if (!*v6) {
    return;
  }
  int v7 = *(unsigned __int8 *)(a2 + 48);
  double v8 = *((double *)v4 + 798);
  if (sub_1000E6DB4((uint64_t)(v4 + 176)))
  {
    long long v9 = *((_OWORD *)v4 + 97);
    *(_OWORD *)(a3 + 5072) = *((_OWORD *)v4 + 96);
    *(_OWORD *)(a3 + 5088) = v9;
    *(_OWORD *)(a3 + 5104) = *((_OWORD *)v4 + 98);
    long long v10 = *((_OWORD *)v4 + 93);
    *(_OWORD *)(a3 + 5008) = *((_OWORD *)v4 + 92);
    *(_OWORD *)(a3 + 5024) = v10;
    long long v11 = *((_OWORD *)v4 + 95);
    *(_OWORD *)(a3 + 5040) = *((_OWORD *)v4 + 94);
    *(_OWORD *)(a3 + 5056) = v11;
    long long v12 = *((_OWORD *)v4 + 89);
    *(_OWORD *)(a3 + 4944) = *((_OWORD *)v4 + 88);
    *(_OWORD *)(a3 + 4960) = v12;
    long long v13 = *((_OWORD *)v4 + 91);
    *(_OWORD *)(a3 + 4976) = *((_OWORD *)v4 + 90);
    *(void *)(a3 + 5120) = v4[198];
    *(_OWORD *)(a3 + 4992) = v13;
  }
  if (*((unsigned char *)v4 + 1400))
  {
    *(void *)long long buf = sub_1000D8908(a3 + 3208);
    *(void *)uint64_t v90 = v4[163];
    BOOL v14 = sub_100B39178(buf, v90);
    if (!v14)
    {
      sub_101AA6850(v14, v15, v16, v17, v18, v19, v20, v21, v73, v74, v75, v76, (uint64_t)v77, (uint64_t)v78, v79, v80, v81, *((uint64_t *)&v81 + 1), v82,
        v83,
        (uint64_t)v84,
        (uint64_t)v85,
        v86,
        v87);
      abort_report_np();
      __break(1u);
LABEL_132:
      dispatch_once(&qword_1024193B0, &stru_102318040);
LABEL_58:
      int v40 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#post-wifi-position-calculation-state-update, location update not in progress, will not issue scan", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v4[118] == -1) {
          goto LABEL_135;
        }
        goto LABEL_134;
      }
      return;
    }
    char v22 = sub_10106EB0C((uint64_t)(v4 + 163));
    sub_100F91E90(a3 + 3208, v22);
  }
  if (v4[141]) {
    *(unsigned char *)(a3 + 6076) = 0;
  }
  if (sub_1006D4090(a3 + 5968) && !sub_1006D30F0((_DWORD *)(a3 + 5968)))
  {
    if (v7 == v6[72] && *(unsigned char *)(a3 + 1624)) {
      sub_1006D331C(a3 + 5968, 5, 5u, v8);
    }
    if (v7 == 10 || v7 == v6[73])
    {
      if (*(unsigned char *)(a3 + 1624)) {
        unsigned int v23 = 6;
      }
      else {
        unsigned int v23 = 11;
      }
      sub_1006D331C(a3 + 5968, 5, v23, v8);
    }
  }
  if (!sub_100054BBC((_DWORD *)v4 + 1492))
  {
    uint64_t v4 = &qword_102419000;
    if (qword_1024193B0 == -1) {
      goto LABEL_58;
    }
    goto LABEL_132;
  }
  if (sub_1006D30F0((_DWORD *)v4 + 1492))
  {
    sub_1011F31A4((long long *)(v4 + 771), a3 + 5968, *((_DWORD *)v4 + 1539), (uint64_t)(v4 + 176), v6[46], (uint64_t)buf, (_DWORD *)v4[798]);
    *(void *)uint64_t v90 = a3 + 6168;
    *(void *)&v90[8] = a3 + 5968;
    *(void *)&v90[16] = a3 + 6156;
    sub_1011F7D48((uint64_t)v90, (long long *)buf);
    if (v102 < 0) {
      operator delete(__p);
    }
    if (v100 < 0) {
      operator delete(v99);
    }
    if (*(_DWORD *)(a3 + 6168) == 3)
    {
      if (*(double *)(a3 + 6216) < *(double *)(a3 + 6176))
      {
        *(void *)(a3 + 6216) = v4[798];
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        long long v24 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          double v25 = *(double *)(a3 + 6216) - *(double *)(a3 + 6176);
          *(_DWORD *)long long buf = 134349056;
          *(double *)&uint8_t buf[4] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@EmerTick, scanrequest5ghzwithals, %{public}.1f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_102318040);
          }
          double v71 = *(double *)(a3 + 6216) - *(double *)(a3 + 6176);
          *(_DWORD *)uint64_t v90 = 134349056;
          *(double *)&v90[4] = v71;
          long long v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v72);
          if (v72 != buf) {
            free(v72);
          }
        }
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      long long v26 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v27 = sub_100D54EB0(0xCu);
        double v28 = *(double *)(a3 + 6216) - *(double *)(a3 + 6176);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&unsigned char buf[14] = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanRequest5GHzWithPendingAls, type, %{public}s, tte, %{public}.1f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        long long v66 = sub_100D54EB0(0xCu);
        double v67 = *(double *)(a3 + 6216) - *(double *)(a3 + 6176);
        *(_DWORD *)uint64_t v90 = 136446466;
        *(void *)&v90[4] = v66;
        *(_WORD *)&v90[12] = 2050;
        *(double *)&v90[14] = v67;
        long long v68 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v68);
        if (v68 != buf) {
          free(v68);
        }
      }
      double v29 = *((double *)v4 + 798);
      int v30 = sub_1006D40C4(a3 + 5968);
      sub_1006D3DD4((char *)(a3 + 5968), (uint64_t)v88);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v4[809] + 16))(&v83);
      sub_1011F7CA8((uint64_t)buf, 12, v30, 1, (long long *)v88, (uint64_t)&v83, v29);
      sub_1011F6230(a3 + 1664, (uint64_t)buf);
      if (v98 && v96)
      {
        long long v97 = v96;
        operator delete(v96);
      }
      if (v95 < 0) {
        operator delete(v94);
      }
      if ((_BYTE)v87 && v84)
      {
        long long v85 = v84;
        operator delete(v84);
      }
      if (v89 < 0) {
        operator delete(v88[0]);
      }
      int v31 = (uint64_t **)(*(void *)(a3 + 6424) + 56);
      *(void *)long long buf = a3 + 1688;
      long long v32 = sub_100510C30(v31, (const void **)(a3 + 1688), (uint64_t)&unk_101D0B290, (long long **)buf);
      ++*((_DWORD *)v32 + 14);
      uint64_t v33 = *(void *)(a3 + 6424);
      sub_100134750(buf, "total");
      *(void *)uint64_t v90 = buf;
      long long v34 = sub_100510D70((uint64_t **)(v33 + 56), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v90);
      ++*((_DWORD *)v34 + 14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v35 = *(void *)(a3 + 6424);
      if (*(unsigned char *)(a3 + 1744)) {
        __int16 v36 = *(unsigned __int8 *)(a3 + 1712) | 0x100;
      }
      else {
        __int16 v36 = 0;
      }
      sub_10050CAF0(*(char *)(a3 + 1664), v36);
      *(void *)uint64_t v90 = buf;
      char v37 = sub_100510D70((uint64_t **)(v35 + 80), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v90);
      ++*((_DWORD *)v37 + 14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v38 = *(void *)(a3 + 6424);
      sub_100134750(buf, "total");
      *(void *)uint64_t v90 = buf;
      int v39 = sub_100510D70((uint64_t **)(v38 + 80), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v90);
      ++*((_DWORD *)v39 + 14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      return;
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318040);
    }
    long long v43 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#post-wifi-position-calculation-state-update, #emergency location update in progress, skipping state transition logic", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 == -1) {
        goto LABEL_135;
      }
      goto LABEL_134;
    }
    return;
  }
  if (*((unsigned char *)v4 + 808))
  {
    if (*((unsigned char *)v4 + 1624))
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      __int16 v41 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = sub_100E47060((uint64_t)&buf[8], a2);
        uint64_t v42 = sub_1000E0EF0((int *)buf);
        *(_DWORD *)uint64_t v90 = 136446210;
        *(void *)&v90[4] = v42;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreq, false, reason, good fix, event, %{public}s", v90, 0xCu);
        sub_1000D7B80((uint64_t)buf);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        *(_DWORD *)uint64_t v90 = sub_100E47060((uint64_t)&v90[8], a2);
        long long v69 = sub_1000E0EF0((int *)v90);
        int v91 = 136446210;
        long long v92 = v69;
        long long v70 = (char *)_os_log_send_and_compose_impl();
        sub_1000D7B80((uint64_t)v90);
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v70);
        if (v70 != buf) {
          free(v70);
        }
      }
      sub_1006D3144((int *)(a3 + 5968));
      return;
    }
    if (sub_100170AF8(a3 + 5968) == 1 && *(char *)(a2 + 48) >= 7)
    {
      if (sub_1006D40B0((unsigned int *)(a3 + 5968)) == 4)
      {
        int v45 = v6[73];
        if (v45 != 255) {
          goto LABEL_88;
        }
      }
      else
      {
        if (v6[44] && sub_1006D40B0((unsigned int *)(a3 + 5968)) == 2 && !v6[2])
        {
          LOBYTE(v45) = 10;
LABEL_88:
          sub_1006D4120(2u);
          double v46 = *((double *)v4 + 798);
          int v47 = sub_1006D40C4(a3 + 5968);
          char v48 = sub_1006D30F0((_DWORD *)(a3 + 5968));
          sub_1006D3DD4((char *)(a3 + 5968), (uint64_t)&v81);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v4[809] + 16))(&v76);
          sub_1011F7CA8((uint64_t)buf, v45, v47, v48, &v81, (uint64_t)&v76, v46);
          sub_1011F6230(a3 + 1664, (uint64_t)buf);
          sub_1011F62D0((uint64_t)buf);
          if ((_BYTE)v80 && v77)
          {
            long long v78 = v77;
            operator delete(v77);
          }
          if (SHIBYTE(v82) < 0) {
            operator delete((void *)v81);
          }
          int v49 = (uint64_t **)(*(void *)(a3 + 6424) + 56);
          *(void *)long long buf = a3 + 1688;
          char v50 = sub_100510C30(v49, (const void **)(a3 + 1688), (uint64_t)&unk_101D0B290, (long long **)buf);
          ++*((_DWORD *)v50 + 14);
          uint64_t v51 = *(void *)(a3 + 6424);
          sub_100134750(buf, "total");
          *(void *)uint64_t v90 = buf;
          uint64_t v52 = sub_100510D70((uint64_t **)(v51 + 56), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v90);
          ++*((_DWORD *)v52 + 14);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v53 = *(void *)(a3 + 6424);
          if (*(unsigned char *)(a3 + 1744)) {
            __int16 v54 = *(unsigned __int8 *)(a3 + 1712) | 0x100;
          }
          else {
            __int16 v54 = 0;
          }
          sub_10050CAF0(*(char *)(a3 + 1664), v54);
          *(void *)uint64_t v90 = buf;
          uint64_t v55 = sub_100510D70((uint64_t **)(v53 + 80), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v90);
          ++*((_DWORD *)v55 + 14);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v56 = *(void *)(a3 + 6424);
          sub_100134750(buf, "total");
          *(void *)uint64_t v90 = buf;
          __int16 v57 = sub_100510D70((uint64_t **)(v56 + 80), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v90);
          ++*((_DWORD *)v57 + 14);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          sub_1006D40E4(a3 + 5968);
          goto LABEL_116;
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_102318040);
        }
        uint64_t v58 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#post-wifi-position-calculation-state-update, dont issue a scan\"}", buf, 0x12u);
        }
        sub_1006D331C(a3 + 5968, 5, 4u, v8);
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      uint64_t v59 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#post-wifi-position-calculation-state-update, stop after fast scan\"}", buf, 0x12u);
      }
      sub_1006D3144((int *)(a3 + 5968));
    }
LABEL_116:
    if ((int)sub_100170AF8(a3 + 5968) >= 2)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318040);
      }
      long long v60 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        int v61 = sub_100170AF8(a3 + 5968);
        *(_DWORD *)long long buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 1026;
        *(_DWORD *)&buf[20] = v61;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#post-wifi-position-calculation-state-update, failed to achieve an accurate wifi location\", \"number_of_requested_scans\":%{public}d}", buf, 0x18u);
      }
      sub_1006D3144((int *)(a3 + 5968));
    }
    if (sub_100054BBC((_DWORD *)v4 + 204) && !sub_100054BBC((_DWORD *)(a3 + 5968))) {
      sub_1006D4120(5u);
    }
    int v62 = *(_DWORD *)(a3 + 6024);
    if (v62 == 2)
    {
      unsigned int v63 = 0;
      int v64 = 3;
    }
    else
    {
      if (v62 != 3) {
        return;
      }
      unsigned int v63 = 11;
      int v64 = 5;
    }
    sub_1006D331C(a3 + 5968, v64, v63, v8);
    return;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318040);
  }
  double v44 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#post-wifi-position-calculation-state-update, previous decision made to skip using wifi scan, skipping state transition logic", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1)
    {
LABEL_135:
      *(_WORD *)uint64_t v90 = 0;
      long long v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v65);
      if (v65 != buf) {
        free(v65);
      }
      return;
    }
LABEL_134:
    dispatch_once(&qword_1024193B0, &stru_102318040);
    goto LABEL_135;
  }
}

void sub_1011F7A98(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1011F7BEC(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 6376))
  {
    if (sub_1006D4090((uint64_t)(a2 + 1492))) {
      sub_1006D331C((uint64_t)(a2 + 1492), 5, 7u, *(double *)(a1 + 6384));
    }
    sub_1006D4120(3u);
  }
}

void sub_1011F7C60(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1011F7C78(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_1011F7CA8(uint64_t a1, char a2, int a3, char a4, long long *a5, uint64_t a6, double a7)
{
  *(unsigned char *)a1 = a2;
  *(double *)(a1 + 8) = a7;
  *(_DWORD *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 20) = a4;
  uint64_t v9 = a1 + 24;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)v9, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(v9 + 16) = *((void *)a5 + 2);
    *(_OWORD *)uint64_t v9 = v10;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a6 + 32))
  {
    *(unsigned char *)(a1 + 48) = *(unsigned char *)a6;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 8);
    *(void *)(a1 + 72) = *(void *)(a6 + 24);
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    *(void *)(a6 + 24) = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  return a1;
}

__n128 sub_1011F7D48(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(_OWORD **)a1;
  long long v5 = *a2;
  long long v6 = a2[2];
  v4[1] = a2[1];
  void v4[2] = v6;
  *uint64_t v4 = v5;
  long long v7 = a2[3];
  long long v8 = a2[4];
  long long v9 = a2[5];
  *(_OWORD *)((char *)v4 + 89) = *(long long *)((char *)a2 + 89);
  void v4[4] = v8;
  v4[5] = v9;
  _OWORD v4[3] = v7;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *((void *)a2 + 14);
  *(unsigned char *)(v10 + 8) = *((unsigned char *)a2 + 120);
  *(void *)uint64_t v10 = v11;
  long long v12 = (void **)(v10 + 16);
  long long v13 = a2 + 8;
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v12);
  }
  long long v14 = *v13;
  *(void *)(v10 + 32) = *((void *)v13 + 2);
  *(_OWORD *)long long v12 = v14;
  *((unsigned char *)a2 + 151) = 0;
  *((unsigned char *)a2 + 128) = 0;
  long long v15 = *(long long *)((char *)a2 + 212);
  long long v16 = *(long long *)((char *)a2 + 200);
  long long v17 = *(long long *)((char *)a2 + 184);
  *(_OWORD *)(v10 + 56) = *(long long *)((char *)a2 + 168);
  *(_OWORD *)(v10 + 72) = v17;
  *(_OWORD *)(v10 + 88) = v16;
  *(_OWORD *)(v10 + 100) = v15;
  *(_OWORD *)(v10 + 40) = *(long long *)((char *)a2 + 152);
  uint64_t v18 = (void **)(v10 + 120);
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*v18);
  }
  __n128 result = *(__n128 *)((char *)a2 + 232);
  *(void *)(v10 + 136) = *((void *)a2 + 31);
  *(__n128 *)uint64_t v18 = result;
  *((unsigned char *)a2 + 255) = 0;
  *((unsigned char *)a2 + 232) = 0;
  **(_DWORD **)(a1 + 16) = *((_DWORD *)a2 + 64);
  return result;
}

uint64_t sub_1011F7E4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  long long v6 = *(_OWORD *)(a2 + 7);
  long long v7 = *(_OWORD *)(a2 + 9);
  long long v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  long long v9 = (unsigned char *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    sub_1000DC48C(v9, (void *)a2[15], a2[16]);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 15);
    *(void *)(a1 + 136) = a2[17];
    *(_OWORD *)long long v9 = v10;
  }
  return 24;
}

void sub_1011F7F10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1011F7F2C(uint64_t a1, char *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == a2[32])
  {
    if (*(unsigned char *)(a1 + 32))
    {
      char v4 = *a2;
      double v3 = (__n128 *)(a2 + 8);
      *(unsigned char *)a1 = v4;
      uint64_t v5 = a1 + 8;
      result.n128_u64[0] = sub_1000F4EBC(v5, v3).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    long long v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(void *)(a1 + 16) = v7;
      operator delete(v7);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(unsigned char *)a1 = *a2;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    __n128 result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

__n128 sub_1011F7FD4(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 13) = *(void *)((char *)a2 + 13);
  *(_OWORD *)a1 = v2;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(__n128 *)(a1 + 24) = result;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 56) = 0;
    __n128 result = *(__n128 *)((char *)a2 + 56);
    *(__n128 *)(a1 + 56) = result;
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 9) = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  return result;
}

void **sub_1011F8040(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    long long v13 = (char *)sub_1000DA5D8((uint64_t)result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    double v16[2] = v14 + 24;
    sub_10093D088(a1, v16);
    long long v8 = (void *)a1[1];
    __n128 result = sub_10093D228(v16);
  }
  else
  {
    *long long v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = 0;
    *(_OWORD *)long long v7 = *(_OWORD *)a2;
    _DWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1011F816C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10093D228((void **)va);
  _Unwind_Resume(a1);
}

void sub_1011F8248()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1011F8300(_Unwind_Exception *a1)
{
}

void sub_1011F8318()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1011F83C0(_Unwind_Exception *a1)
{
}

void sub_1011F83D8()
{
  dword_1024863E8 = 450;
}

uint64_t sub_1011F8748(uint64_t a1, char *a2, int a3, uint64_t a4, float a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)a1 = off_102318070;
  *(void *)(a1 + 8) = 0;
  sub_100134750((void *)(a1 + 16), a2);
  sub_100513074(a1 + 40, a2, 0, 1);
  *(unsigned char *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(float *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 68) = a7;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a4;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a8;
  uint64_t v22 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  __int16 v23 = 256;
  if (a3)
  {
    sub_100134750(&__p, "");
    __int16 v19 = 0;
    uint64_t v18 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1000DC48C(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v21 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v20 = __p;
      uint64_t v21 = 0;
    }
    std::string::assign(&v20, ":memory:");
    operator new();
  }
  uint64_t v15 = *(void (****)(void, uint64_t, void *))(a1 + 80);
  v24[0] = off_1022B2D08;
  v24[1] = sub_1011F8AB0;
  void v24[3] = v24;
  (**v15)(v15, a1, v24);
  sub_1003BE174(v24);
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 24))(a1 + 40);
  return a1;
}

void sub_1011F89D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a25);
  sub_10051310C(v30);
  if (*(char *)(v28 + 39) < 0) {
    operator delete(*v29);
  }
  uint64_t v32 = *(void *)(v28 + 8);
  *(void *)(v28 + 8) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011F8AB0(uint64_t a1, int a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
  }
  else {
    return 0;
  }
}

uint64_t sub_1011F8AE0(uint64_t a1)
{
  *(void *)a1 = off_102318070;
  uint64_t v2 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  double v3 = *(void **)(a1 + 72);
  if (v3)
  {

    *(void *)(a1 + 72) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  sub_10051310C(v2);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

BOOL sub_1011F8BDC(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  BOOL v3 = sub_100081E3C(a1);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

void sub_1011F8C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F8C8C(uint64_t a1)
{
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 40);
  __p[3] = (void *)(a1 + 40);
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 40);
  __int16 v8 = 256;
  if (!sub_100081E3C(a1))
  {
    sub_100134750(__p, "");
    sub_1011F8FF8(a1);
  }
  if (*(void *)(a1 + 72)) {
    __assert_rtn("setDatabaseAccessible", "CLActivityRecorderBaseDb.mm", 90, "fInMemoryTransaction == nil");
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1023180C0);
  }
  uint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      unint64_t v5 = (void *)*v5;
    }
    *(_DWORD *)long long buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    unint64_t v12 = "";
    __int16 v13 = 2082;
    long long v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return 1;
}

void sub_1011F8FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_1011F8FF8(uint64_t a1)
{
  if (*(void *)(a1 + 72)) {
    goto LABEL_18;
  }
  LODWORD(v2) = *(char *)(a1 + 39);
  if ((v2 & 0x80000000) != 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 16), *(void *)(a1 + 24));
    LODWORD(v2) = *(char *)(a1 + 39);
    if ((v2 & 0x80000000) != 0)
    {
      unint64_t v2 = *(void *)(a1 + 24);
      goto LABEL_6;
    }
  }
  else
  {
    std::string __p = *(std::string *)(a1 + 16);
  }
  unint64_t v2 = v2;
LABEL_6:
  if (v2 >= 0x1A)
  {
    std::string::basic_string(&v8, (const std::string *)(a1 + 16), 0, 0x1AuLL, (std::allocator<char> *)v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v8;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023180C0);
    }
    uint64_t v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "DB name length exceeds allowed size of OS transaction name. Truncating", (uint8_t *)&v8, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&v8, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023180C0);
      }
      v6[0] = 0;
      unint64_t v5 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityRecorderBaseDb::initDb(std::string)", "%s\n", (const char *)v5);
      if (v5 != &v8) {
        free(v5);
      }
    }
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  snprintf(__str, 0x2FuLL, "%s.InMemoryTransaction", (const char *)p_p);
  *(void *)(a1 + 72) = [[CLOSTransaction alloc] initWithDescription:__str];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_18:
  operator new();
}

void sub_1011F94A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1011F9520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005F7C38(*(char **)(a1 + 8), a2);
}

void sub_1011F9528(uint64_t a1, const char *a2, uint64_t *a3, void *a4)
{
}

void sub_1011F9530(uint64_t a1, const char *a2, uint64_t *a3)
{
}

BOOL sub_1011F9538(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, char *a5, double a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  return v6 && (uint64_t v7 = *(void *)(a2 + 8)) != 0 && sub_1005F83BC(v6, v7, a3, a4, a5, a6);
}

uint64_t sub_1011F9554(uint64_t *a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(*a1 + 32))(&__p);
  if ((char)v16 < 0)
  {
    uint64_t v10 = v15;
    operator delete(__p);
    if (v10) {
      goto LABEL_3;
    }
LABEL_19:
    sub_101AA6C64();
  }
  if (!v16) {
    goto LABEL_19;
  }
LABEL_3:
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100081E3C((uint64_t)a1))
  {
    sub_10002B640(a1[1]);
    CFAbsoluteTimeGetCurrent();
    sub_10010F274((uint64_t)&v12);
    uint64_t v4 = sub_100132EFC(&v13, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 32))(&__p, a1);
    if ((v16 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v6 = v16;
    }
    else {
      uint64_t v6 = v15;
    }
    uint64_t v7 = sub_100132EFC(v4, (uint64_t)p_p, v6);
    sub_100132EFC(v7, (uint64_t)" WHERE startTime < ?", 20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    uint64_t v8 = a1[1];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      unint64_t v9 = &__p;
    }
    else {
      unint64_t v9 = __p;
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return -1;
}

void sub_1011F9A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1011F9AE0(void *a1)
{
  (*(void (**)(void **__return_ptr))(*a1 + 32))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AA6DE4();
  }
  uint64_t v8 = v11[1];
  operator delete(v11[0]);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100081E3C((uint64_t)a1))
  {
    sub_10010F274((uint64_t)v11);
    unint64_t v2 = sub_100132EFC(&v12, (uint64_t)"SELECT COUNT(*) FROM ", 21);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 32))(__p, a1);
    if ((v10 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v4 = v10;
    }
    else {
      uint64_t v4 = (uint64_t)__p[1];
    }
    sub_100132EFC(v2, (uint64_t)v3, v4);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = a1[1];
    std::stringbuf::str();
    if ((v10 & 0x80u) == 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    sub_10014D518(v5, (uint64_t)v6);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1011F9E28(void *a1)
{
  unint64_t v2 = a1 + 5;
  (*(void (**)(void *))(a1[5] + 16))(a1 + 5);
  (*(void (**)(void *))(*a1 + 56))(a1);
  return (*(uint64_t (**)(void *))(*v2 + 24))(v2);
}

void sub_1011F9EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1011F9EF0(void *a1)
{
  (*(void (**)(void **__return_ptr))(*a1 + 32))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AA6F64();
  }
  uint64_t v8 = v11[1];
  operator delete(v11[0]);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_3:
  BOOL result = sub_100081E3C((uint64_t)a1);
  if (result)
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 32))(__p, a1);
    if ((v10 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v5 = v10;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    sub_100132EFC(v3, (uint64_t)v4, v5);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = a1[1];
    std::stringbuf::str();
    if ((v10 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    sub_10014D518(v6, (uint64_t)v7);
  }
  return result;
}

uint64_t sub_1011FA200(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

void sub_1011FA208(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_1011FA238(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  sub_100103240();
  if ((sub_10016CCBC() & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#CLEFUM,not supported for this device", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return a1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyFollowUpManager::CLEmergencyFollowUpManager(id<CLIntersiloUniverse>)", "%s\n");
LABEL_27:
    if (v8 != buf) {
      free(v8);
    }
    return a1;
  }
  if (objc_opt_class() && objc_opt_class())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1011FA758, SOSSettingsResetFollowUpStateChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    id v4 = +[SOSUtilities getSettingsResetFollowUpState];
    unsigned int v5 = +[SOSUtilities isCallWithSideButtonPressesEnabled];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67240448;
      BOOL v13 = (int)v4;
      __int16 v14 = 1026;
      BOOL v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLEFUM,on construction,followUpState,%{public}d,multipressEnabled,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      __int16 v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyFollowUpManager::CLEmergencyFollowUpManager(id<CLIntersiloUniverse>)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_1011FA760((uint64_t)a1, (uint64_t)v4);
    return a1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102318120);
  }
  unint64_t v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67240448;
    BOOL v13 = objc_opt_class() == 0;
    __int16 v14 = 1026;
    BOOL v15 = objc_opt_class() == 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLEFUM,not linked to required libraries,SOS,%{public}d,CFU,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    objc_opt_class();
    objc_opt_class();
    uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyFollowUpManager::CLEmergencyFollowUpManager(id<CLIntersiloUniverse>)", "%s\n");
    goto LABEL_27;
  }
  return a1;
}

void sub_1011FA758(uint64_t a1, id *a2)
{
}

void sub_1011FA760(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102318120);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v5;
    LOWORD(v16) = 1026;
    *(_DWORD *)((char *)&v16 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLEFUM,handleFollowUpStateChange,state changed from,%{public}d,to,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    uint64_t v10 = *(void *)(a1 + 8);
    v12[0] = 67240448;
    v12[1] = v10;
    __int16 v13 = 1026;
    int v14 = a2;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::handleFollowUpStateChange(const SOSSettingsResetFollowUpState)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(void *)(a1 + 8) = a2;
  switch(a2)
  {
    case 0:
    case 4:
      return;
    case 1:
      sub_1011FAE00();
      break;
    case 2:
      sub_1000C7F88(buf);
      LOBYTE(v12[0]) = 0;
      char v8 = sub_1000D29FC(*(uint64_t *)buf, @"SOSCFULocalized", (BOOL *)v12);
      if (LOBYTE(v12[0])) {
        char v9 = v8;
      }
      else {
        char v9 = 0;
      }
      if (v16) {
        sub_1000DB0A0(v16);
      }
      if ((v9 & 1) == 0) {
        sub_1011FAE00();
      }
      break;
    case 3:
      sub_1011FB644();
      break;
    default:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#CLEFUM,handleFollowUpStateChange,unexpected FollowUp state", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102318120);
        }
        LOWORD(v12[0]) = 0;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::handleFollowUpStateChange(const SOSSettingsResetFollowUpState)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      break;
  }
}

void sub_1011FAAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

const void *sub_1011FAB24(const void *a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, SOSSettingsResetFollowUpStateChangedNotification, 0);
  return a1;
}

void sub_1011FAB6C(id *a1)
{
  unint64_t v2 = [*a1 silo].queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011FABF0;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v2, block);
}

void sub_1011FABF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[SOSUtilities getSettingsResetFollowUpState];
  if (v2 == *(id *)(v1 + 8))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67240192;
      int v6 = (int)v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#CLEFUM,handleFollowUpStateChange,state has not changed,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::handleFollowUpStateChange()_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    sub_1011FA760(v1, (uint64_t)v2);
  }
}

void sub_1011FAE00()
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102318120);
  }
  uint64_t v0 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#CLEFUM,postFollowUp,posting FollowUp", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  CFBundleRef v1 = sub_1011FB814();
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = sub_1001BA55C();
    CFStringRef v4 = sub_10005FB58(v3, v2);
    if (!v4)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      unsigned __int8 v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#CLEFUM,postFollowUp,unable to get preferred language", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102318120);
        }
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      long long v17 = v2;
      goto LABEL_43;
    }
    CFStringRef v5 = v4;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    int v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      CFStringRef v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLEFUM,postFollowUp,preferred localization language,%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      std::string v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v7 = (const void *)CFBundleCopyLocalizedStringForLocalization();
    char v8 = (const void *)CFBundleCopyLocalizedStringForLocalization();
    uint64_t v9 = CFBundleCopyLocalizedStringForLocalization();
    CFRelease(v2);
    CFRelease(v5);
    if (v7 && v8 && v9)
    {
      id v10 = objc_alloc_init((Class)FLFollowUpItem);
      [v10 setUniqueIdentifier:@"com.apple.SOS.settingsReset"];
      [v10 setGroupIdentifier:FLGroupIdentifierDevice];
      [v10 setDisplayStyle:2];
      [v10 setTitle:v7];
      [v10 setInformativeText:v8];
      id v11 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v12 = (void *)SOSSettingsURLBaseString;
      id v13 = [SOSSettingsURLSourceKey UTF8String];
      [v11 addObject:[FLFollowUpAction actionWithLabel:url:](FLFollowUpAction, "actionWithLabel:url:", v9, [NSURL URLWithString:](NSURL, "URLWithString:", [v12 stringByAppendingFormat:](NSString, "stringByAppendingFormat:", @"&%s=%s", v13, [SOSSettingsURLSourceSettingsResetFollowUp UTF8String])));
      [v10 setActions:v11];
      [objc_msgSend(objc_alloc((Class)FLFollowUpController), "initWithClientIdentifier:", @"com.apple.locationd.emergency") postFollowUpItem:v10 completion:&stru_1023180E0];
      CFRelease(v7);
      CFRelease(v8);
LABEL_42:
      long long v17 = (const void *)v9;
LABEL_43:
      CFRelease(v17);
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    uint64_t v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#CLEFUM,postFollowUp,failed to retrieve localized strings", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v9) {
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    int v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#CLEFUM,postFollowUp,failed to create SOS bundle", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::postFollowUp()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
}

id sub_1011FB644()
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102318120);
  }
  uint64_t v0 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#CLEFUM,clearFollowUp,clearing FollowUp", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    id v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::clearFollowUp()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return [[objc_alloc((Class)FLFollowUpController) initWithClientIdentifier:@"com.apple.locationd.emergency"] clearPendingFollowUpItemsWithUniqueIdentifiers:[+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", @"com.apple.SOS.settingsReset")] completion:&stru_102318100];
}

CFBundleRef sub_1011FB814()
{
  uint64_t v0 = +[NSBundle bundleForClass:objc_opt_class()];
  if (!v0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    CFStringRef v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLEFUM,createSOSBundle,unable to retrieve SOS bundle", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_18;
    }
LABEL_20:
    dispatch_once(&qword_1024193E0, &stru_102318120);
LABEL_18:
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CFBundleRef CLEmergencyFollowUpManager::createSOSBundle()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  CFURLRef v1 = CFURLCreateWithString(kCFAllocatorDefault, (CFStringRef)[(NSURL *)[(NSBundle *)v0 bundleURL] absoluteString], 0);
  if (v1)
  {
    CFURLRef v2 = v1;
    CFBundleRef v3 = CFBundleCreate(kCFAllocatorDefault, v1);
    CFRelease(v2);
    return v3;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102318120);
  }
  int v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#CLEFUM,createSOSBundle,failed to create SOS bundle URL", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  return 0;
}

void sub_1011FBAFC(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    CFBundleRef v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLEFUM,postFollowUp,posted FollowUp successfully", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      LOWORD(v8) = 0;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::postFollowUp()_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    +[SOSUtilities setSettingsResetFollowUpState:2];
    sub_1000C7F88(buf);
    LOBYTE(v8) = 1;
    sub_1000EA52C(*(uint64_t *)&buf[0], @"SOSCFULocalized", &v8);
    if (*((void *)&buf[0] + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    CFStringRef v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 138543362;
      *(void *)((char *)buf + 4) = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLEFUM,postFollowUp,failed to post FollowUp,error,%{public}@", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      int v8 = 138543362;
      uint64_t v9 = a3;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::postFollowUp()_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_1011FBE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011FBE38(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    CFBundleRef v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLEFUM,clearFollowUp,cleared FollowUp successfully", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyFollowUpManager::clearFollowUp()_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    +[SOSUtilities setSettingsResetFollowUpState:4];
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102318120);
    }
    CFStringRef v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v9 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLEFUM,clearFollowUp,failed to clear FollowUp,error,%{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102318120);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyFollowUpManager::clearFollowUp()_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_1011FC124(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_1011FC154(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  id v3 = [[[a2 silo] newTimer];
  *(_OWORD *)(a1 + 24) = xmmword_101DAE170;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 40) = unk_101DAE180;
  *(_OWORD *)(a1 + 56) = xmmword_101DAE190;
  *(_OWORD *)(a1 + 68) = *(long long *)((char *)&xmmword_101DAE190 + 12);
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if (objc_opt_class() && +[HKHealthStore isHealthDataAvailable]) {
    *(void *)(a1 + 16) = objc_alloc_init((Class)HKHealthStore);
  }
  sub_1011FC24C((id *)a1, 0);
  return a1;
}

void sub_1011FC220(_Unwind_Exception *a1)
{
  CFStringRef v5 = *(void **)(v1 + 184);
  if (v5)
  {
    *(void *)(v1 + 192) = v5;
    operator delete(v5);
  }
  sub_101AA70E4(v3, v2, v1);
  _Unwind_Resume(a1);
}

id *sub_1011FC24C(id *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    CFURLRef v2 = result;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023181C8);
    }
    id v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Starting PAL update timer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023181C8);
      }
      LOWORD(v8) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCaloriePalEstimator::setupPalUpdateTimer(BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1011FC5A8;
    v9[3] = &unk_1022A3020;
    _OWORD v9[4] = v2;
    [v2[1] setHandler:v9];
    uint64_t v8 = 0;
    uint64_t v4 = sub_1000D3E78();
    sub_10006B564(v4, buf);
    int v5 = sub_1000A699C(*(uint64_t *)buf, "PalEstimationInterval", &v8);
    if (v11) {
      sub_1000DB0A0(v11);
    }
    if (v5)
    {
      double v6 = *(double *)&v8;
    }
    else
    {
      uint64_t v8 = 0x40F5180000000000;
      double v6 = 86400.0;
    }
    return (id *)[v2[1] setNextFireDelay:120.0 interval:v6];
  }
  return result;
}

void sub_1011FC4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011FC4C4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1011FC53C(a1);
  CFURLRef v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(void *)(a1 + 168) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1011FC53C(uint64_t a1)
{
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 168) = *(void *)(a1 + 160);
  *(void *)(a1 + 192) = *(void *)(a1 + 184);

  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;

  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = 0;
}

void sub_1011FC5A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 88)) {
    sub_1011FC53C(*(void *)(a1 + 32));
  }
  *(_DWORD *)(v1 + 88) = 1;

  sub_1011FC5F4(v1);
}

void sub_1011FC5F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 84)
    && *(_DWORD *)(a1 + 88)
    && +[HKHealthStore isHealthDataAvailable]
    && *(void *)(a1 + 16))
  {
    [*(id *)(a1 + 96) timeIntervalSinceNow];
    if (v2 <= -43200.0)
    {
      sub_1011FC53C(a1);
      *(_DWORD *)(a1 + 88) = 1;
    }
    else if (*(_DWORD *)(a1 + 88) != 1)
    {
      return;
    }
    sub_1011FC6D0(a1);
  }
}

void sub_1011FC690(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 84) = a2;
  sub_1011FC5F4(a1);
}

id *sub_1011FC698(id *result, int a2)
{
  if (*((unsigned __int8 *)result + 85) != a2)
  {
    char v2 = a2;
    id v3 = result;
    BOOL result = sub_1011FC24C(result, a2);
    *((unsigned char *)v3 + 85) = v2;
  }
  return result;
}

void sub_1011FC6D0(uint64_t a1)
{
  char v2 = +[NSDate date];
  *(void *)(a1 + 96) = v2;
  id v3 = +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", +[NSDate dateWithTimeInterval:v2 sinceDate:-604800.0], *(void *)(a1 + 96), 3);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1011FC7E8;
  _OWORD v5[3] = &unk_102318140;
  v5[4] = a1;
  id v4 = [objc_alloc((Class)HKSourceQuery) initWithSampleType:+[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierStepCount) samplePredicate:v3 completionHandler:v5];
  [*(id *)(a1 + 16) executeQuery:v4];
  *(_DWORD *)(a1 + 88) = 2;
}

id sub_1011FC7E8(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  double v6 = *(id **)(a1 + 32);
  id v7 = [*v6 silo];
  if (a4)
  {
    uint64_t v8 = (void ***)v13;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    uint64_t v9 = sub_1011FC8B8;
  }
  else
  {
    uint64_t v8 = &v11;
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    uint64_t v9 = sub_1011FCA68;
    a4 = a3;
  }
  v8[2] = (void **)v9;
  v8[3] = (void **)&unk_1022A56E0;
  v8[4] = a4;
  v8[5] = v6;
  return [v7 async:v11, v12];
}

void sub_1011FC8B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023181C8);
    }
    id v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      id v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023181C8);
      }
    }
    int v5 = qword_102418FF8;
    if (os_signpost_enabled((os_log_t)qword_102418FF8))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      id v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PAL,", "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  sub_1011FC53C(v2);
}

void sub_1011FCA68(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(v2 + 104) = objc_alloc_init((Class)NSMutableSet);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = *(void **)(v1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (!v4) {
    goto LABEL_41;
  }
  id v5 = v4;
  uint64_t v20 = v1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)v26;
  do
  {
    for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v26 != v8) {
        objc_enumerationMutation(v3);
      }
      id v10 = *(void **)(*((void *)&v25 + 1) + 8 * i);
      if (objc_msgSend(objc_msgSend(v10, "_productType"), "hasPrefix:", @"iPhone")) {
        ++v7;
      }
      else {
        v6 += [objc_msgSend(objc_msgSend(v10, "_productType"), "hasPrefix:", @"Watch")];
      }
    }
    id v5 = [v3 countByEnumeratingWithState:&v25 objects:v31 count:16];
  }
  while (v5);
  BOOL v11 = !v6 || v7 == 0;
  uint64_t v1 = v20;
  if (v11)
  {
LABEL_41:
    if (*(void *)(v1 + 32)) {
      [*(id *)(v2 + 104) setSet:];
    }
  }
  else
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v12 = *(void **)(v20 + 32);
    id v13 = [v12 countByEnumeratingWithState:&v21 objects:v30 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v22;
      do
      {
        for (uint64_t j = 0; j != v14; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v22 != v15) {
            objc_enumerationMutation(v12);
          }
          long long v17 = *(void **)(*((void *)&v21 + 1) + 8 * (void)j);
          if (objc_msgSend(objc_msgSend(v17, "_productType"), "hasPrefix:", @"Watch")) {
            [*(id *)(v2 + 104) addObject:v17];
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v21 objects:v30 count:16];
      }
      while (v14);
    }
  }
  if ([*(id *)(v2 + 104) count])
  {
    sub_1011FCDD8(v2);
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023181C8);
    }
    uint64_t v18 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PAL, No step count / workouts from first party sources.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023181C8);
      }
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCaloriePalEstimator::querySources()_block_invoke", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    sub_1011FC53C(v2);
  }
}

void sub_1011FCDD8(uint64_t a1)
{
  v4[0] = +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", +[NSDate dateWithTimeInterval:*(void *)(a1 + 96) sinceDate:-604800.0], *(void *)(a1 + 96), 3);
  v4[1] = +[HKQuery _predicateForObjectsFromAppleWatches];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1011FCF38;
  v3[3] = &unk_102318160;
  void v3[4] = a1;
  id v2 = [objc_alloc((Class)HKSampleQuery) initWithSampleType:+[HKSampleType workoutType](HKSampleType, "workoutType") predicate:+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 2)) limit:0 sortDescriptors:0 resultsHandler:v3];
  [*(id *)(a1 + 16) executeQuery:v2];
}

id sub_1011FCF38(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6 = *(id **)(a1 + 32);
  id v7 = [*v6 silo];
  if (a4)
  {
    uint64_t v8 = (void ***)v13;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    __int16 v9 = sub_1011FD008;
  }
  else
  {
    uint64_t v8 = &v11;
    BOOL v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    __int16 v9 = sub_1011FD1B8;
    a4 = a3;
  }
  v8[2] = (void **)v9;
  v8[3] = (void **)&unk_1022A56E0;
  v8[4] = a4;
  v8[5] = v6;
  return [v7 async:v11, v12];
}

void sub_1011FD008(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023181C8);
    }
    id v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      id v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023181C8);
      }
    }
    id v5 = qword_102418FF8;
    if (os_signpost_enabled((os_log_t)qword_102418FF8))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      id v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PAL,", "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  sub_1011FC53C(v2);
}

void sub_1011FD1B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(id *)(a1 + 32);
  *(void *)(v1 + 112) = v2;
  int v3 = [v2 count];
  *(_DWORD *)(v1 + 152) = v3;
  if (v3 < 1)
  {
    *(_DWORD *)(v1 + 120) = 7;
    sub_1011FD2E8(v1);
  }
  else
  {
    sub_1011FD22C(v1);
  }
}

void sub_1011FD22C(uint64_t a1)
{
  id v2 = [[*(id *)(a1 + 112) objectAtIndex:((char *)objc_msgSend(*(id *)(a1 + 112), "count") - *(int *)(a1 + 152))]
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1011FD4F4;
  v3[3] = &unk_102318180;
  void v3[4] = a1;
  sub_1011FD3D0(a1, [v2 startDate], [v2 endDate], v3);
}

void sub_1011FD2E8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSDate) initWithTimeInterval:*(void *)(a1 + 96) sinceDate:(double)(-86400 * *(_DWORD *)(a1 + 120))];
  id v3 = [objc_alloc((Class)NSDate) initWithTimeInterval:*(void *)(a1 + 96) sinceDate:(double)(86400 - 86400 * *(_DWORD *)(a1 + 120))];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1011FD62C;
  _OWORD v4[3] = &unk_102318180;
  void v4[4] = a1;
  sub_1011FD3D0(a1, (uint64_t)v2, (uint64_t)v3, (uint64_t)v4);
}

void sub_1011FD3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", +[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", a2, a3, 3), +[HKQuery predicateForObjectsFromSources:*(void *)(a1 + 104)], 0));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1011FE0EC;
  v8[3] = &unk_1023181A8;
  v8[4] = a4;
  v8[5] = a1;
  id v7 = [objc_alloc((Class)HKStatisticsQuery) initWithQuantityType:+[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierStepCount) quantitySamplePredicate:v6 options:17 completionHandler:v8];
  [*(id *)(a1 + 16) executeQuery:v7];
}

void sub_1011FD4F4(uint64_t a1, double a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(double **)(v3 + 168);
  unint64_t v5 = *(void *)(v3 + 176);
  if ((unint64_t)v4 >= v5)
  {
    id v7 = *(double **)(v3 + 160);
    uint64_t v8 = v4 - v7;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_1001D7FD4();
    }
    unint64_t v9 = v5 - (void)v7;
    unint64_t v10 = (uint64_t)(v5 - (void)v7) >> 2;
    if (v10 <= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = (char *)sub_1000DA54C(v3 + 176, v11);
      id v7 = *(double **)(v3 + 160);
      uint64_t v4 = *(double **)(v3 + 168);
    }
    else
    {
      uint64_t v12 = 0;
    }
    id v13 = (double *)&v12[8 * v8];
    id v14 = &v12[8 * v11];
    *id v13 = a2;
    uint64_t v6 = v13 + 1;
    while (v4 != v7)
    {
      uint64_t v15 = *((void *)v4-- - 1);
      *((void *)v13-- - 1) = v15;
    }
    *(void *)(v3 + 160) = v13;
    *(void *)(v3 + 168) = v6;
    *(void *)(v3 + 176) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v4 = a2;
    uint64_t v6 = v4 + 1;
  }
  *(void *)(v3 + 168) = v6;
  int v16 = *(_DWORD *)(v3 + 152);
  *(_DWORD *)(v3 + 152) = v16 - 1;
  if (v16 < 2)
  {
    *(_DWORD *)(v3 + 120) = 7;
    sub_1011FD2E8(v3);
  }
  else
  {
    sub_1011FD22C(v3);
  }
}

void sub_1011FD62C(uint64_t a1, double a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(double **)(v3 + 136);
  unint64_t v5 = *(void *)(v3 + 144);
  if ((unint64_t)v4 >= v5)
  {
    id v7 = *(double **)(v3 + 128);
    uint64_t v8 = v4 - v7;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_1001D7FD4();
    }
    unint64_t v9 = v5 - (void)v7;
    unint64_t v10 = (uint64_t)(v5 - (void)v7) >> 2;
    if (v10 <= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = (char *)sub_1000DA54C(v3 + 144, v11);
      id v7 = *(double **)(v3 + 128);
      uint64_t v4 = *(double **)(v3 + 136);
    }
    else
    {
      uint64_t v12 = 0;
    }
    id v13 = (double *)&v12[8 * v8];
    id v14 = &v12[8 * v11];
    *id v13 = a2;
    uint64_t v6 = v13 + 1;
    while (v4 != v7)
    {
      uint64_t v15 = *((void *)v4-- - 1);
      *((void *)v13-- - 1) = v15;
    }
    *(void *)(v3 + 128) = v13;
    *(void *)(v3 + 136) = v6;
    *(void *)(v3 + 144) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v4 = a2;
    uint64_t v6 = v4 + 1;
  }
  *(void *)(v3 + 136) = v6;
  int v16 = *(_DWORD *)(v3 + 120);
  *(_DWORD *)(v3 + 120) = v16 - 1;
  if (v16 < 2)
  {
    sub_1011FD758(v3);
  }
  else
  {
    sub_1011FD2E8(v3);
  }
}

void sub_1011FD758(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  if ([*(id *)(a1 + 112) count] == (id)((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3))
  {
    id v2 = (double *)v1[16];
    int v61 = (double *)v1[17];
    if (v2 != v61)
    {
      double v63 = 0.0;
      uint64_t v59 = (uint64_t)(v1 + 25);
      long long v60 = (void **)(v1 + 23);
      while (1)
      {
        int v62 = v2;
        double v3 = *v2;
        uint64_t v4 = (void *)v1[14];
        if (!v4) {
          goto LABEL_41;
        }
        uint64_t v1 = (void *)a1;
        if (![v4 count]) {
          goto LABEL_41;
        }
        unint64_t v5 = +[NSDate dateWithTimeInterval:*(void *)(a1 + 96) sinceDate:(double)(-86400 * LODWORD(v63))];
        uint64_t v6 = +[NSDate dateWithTimeInterval:*(void *)(a1 + 96) sinceDate:(double)(-86400 * LODWORD(v63) + 86400)];
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        id v7 = *(void **)(a1 + 112);
        id v8 = [v7 countByEnumeratingWithState:&v66 objects:v84 count:16];
        if (!v8) {
          break;
        }
        unint64_t v9 = 0;
        uint64_t v10 = *(void *)v67;
        double v11 = 0.0;
        do
        {
          uint64_t v12 = 0;
          int v64 = v9;
          uint64_t v13 = (void)v9 << 32;
          do
          {
            if (*(void *)v67 != v10) {
              objc_enumerationMutation(v7);
            }
            id v14 = *(void **)(*((void *)&v66 + 1) + 8 * (void)v12);
            if (-[NSDate compare:](v5, "compare:", [v14 startDate]) == NSOrderedAscending
              && (id)-[NSDate compare:](v6, "compare:", [v14 endDate]) == (id)1)
            {
              [objc_msgSend(v14, "totalEnergyBurned") doubleValueForUnit:+[HKUnit largeCalorieUnit](HKUnit, "largeCalorieUnit")];
              double v16 = v15;
              float v17 = *(float *)(a1 + 36);
              [v14 duration];
              double v19 = v18;
              [v14 duration];
              double v21 = v20;
              double v22 = v16 * 3600.0 / (v19 * (float)(v17 * 1000.0));
              if (v22 >= 5.0)
              {
                if (v22 >= 8.0)
                {
                  double v24 = 6.6667;
                  double v23 = 106.6667;
                }
                else
                {
                  double v24 = 12.8678;
                  double v23 = 57.0578;
                }
              }
              else
              {
                double v24 = 6.6833;
                double v23 = 87.98;
              }
              double v25 = v23 + v22 * v24;
              double v26 = *(double *)(*(void *)(a1 + 160) + (v13 >> 29));
              id v27 = [v14 workoutActivityType];
              double v28 = (double)(int)(v21 * v25 / 60.0);
              if (v27 == (id)37 || v27 == (id)52)
              {
                [v14 duration];
                if (v29 > 300.0 && v26 < v28)
                {
                  double v3 = v3 - v26;
                  double v11 = v11 + v28;
                }
              }
              else
              {
                double v3 = v3 - v26;
                double v11 = v11 + v28;
              }
              if (qword_102418FF0 != -1) {
                dispatch_once(&qword_102418FF0, &stru_1023181C8);
              }
              uint64_t v30 = qword_102418FF8;
              if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
              {
                double v31 = COERCE_DOUBLE([v14 workoutActivityType]);
                [objc_msgSend(v14, "startDate") timeIntervalSinceReferenceDate];
                uint64_t v33 = v32;
                [v14 duration];
                *(_DWORD *)long long buf = 134219520;
                double v86 = v3;
                __int16 v87 = 2048;
                double v88 = v31;
                __int16 v89 = 2048;
                uint64_t v90 = v33;
                __int16 v91 = 2048;
                uint64_t v92 = v34;
                __int16 v93 = 2048;
                double v94 = v22;
                __int16 v95 = 2048;
                double v96 = v26;
                __int16 v97 = 2048;
                double v98 = v28;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "PAL,Daily steps,%f,Session type,%lu,startTime,%f,duration,%f,mean mets,%f,in-system steps,%f,met-converted steps,%f", buf, 0x48u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102418FF0 != -1) {
                  dispatch_once(&qword_102418FF0, &stru_1023181C8);
                }
                double v35 = COERCE_DOUBLE([v14 workoutActivityType]);
                [objc_msgSend(v14, "startDate") timeIntervalSinceReferenceDate];
                uint64_t v37 = v36;
                [v14 duration];
                int v70 = 134219520;
                double v71 = v3;
                __int16 v72 = 2048;
                double v73 = v35;
                __int16 v74 = 2048;
                uint64_t v75 = v37;
                __int16 v76 = 2048;
                uint64_t v77 = v38;
                __int16 v78 = 2048;
                double v79 = v22;
                __int16 v80 = 2048;
                double v81 = v26;
                __int16 v82 = 2048;
                double v83 = v28;
                int v39 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLCaloriePalEstimator::estimateDailyStepCount()", "%s\n", v39);
                if (v39 != (char *)buf) {
                  free(v39);
                }
              }
            }
            uint64_t v12 = (char *)v12 + 1;
            v13 += (uint64_t)&_mh_execute_header;
          }
          while (v8 != v12);
          id v40 = [v7 countByEnumeratingWithState:&v66 objects:v84 count:16];
          id v8 = v40;
          unint64_t v9 = (char *)v12 + (void)v64;
        }
        while (v40);
        if (v11 <= 0.0) {
          break;
        }
        double v41 = 5299.0;
        if (v3 >= 5299.0) {
          double v41 = v3;
        }
        double v3 = v11 + v41;
        uint64_t v1 = (void *)a1;
LABEL_44:
        long long v43 = (double *)v1[24];
        unint64_t v42 = v1[25];
        if ((unint64_t)v43 >= v42)
        {
          int v45 = (double *)*v60;
          uint64_t v46 = ((char *)v43 - (unsigned char *)*v60) >> 3;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v48 = v42 - (void)v45;
          if (v48 >> 2 > v47) {
            unint64_t v47 = v48 >> 2;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            char v50 = (char *)sub_1000DA54C(v59, v49);
            uint64_t v1 = (void *)a1;
            int v45 = *(double **)(a1 + 184);
            long long v43 = *(double **)(a1 + 192);
          }
          else
          {
            char v50 = 0;
          }
          uint64_t v51 = (double *)&v50[8 * v46];
          *uint64_t v51 = v3;
          double v44 = v51 + 1;
          while (v43 != v45)
          {
            uint64_t v52 = *((void *)v43-- - 1);
            *((void *)v51-- - 1) = v52;
          }
          v1[23] = v51;
          v1[24] = v44;
          v1[25] = &v50[8 * v49];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *long long v43 = v3;
          double v44 = v43 + 1;
        }
        v1[24] = v44;
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1023181C8);
        }
        uint64_t v53 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134218240;
          double v86 = v63;
          __int16 v87 = 2048;
          double v88 = v3;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "PAL,Day index,%zu,stepCount,%f", buf, 0x16u);
        }
        uint64_t v1 = (void *)a1;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_1023181C8);
          }
          int v70 = 134218240;
          double v71 = v63;
          __int16 v72 = 2048;
          double v73 = v3;
          __int16 v54 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCaloriePalEstimator::estimateDailyStepCount()", "%s\n", v54);
          if (v54 != (char *)buf) {
            free(v54);
          }
          uint64_t v1 = (void *)a1;
        }
        ++*(void *)&v63;
        id v2 = v62 + 1;
        if (v62 + 1 == v61) {
          goto LABEL_78;
        }
      }
      uint64_t v1 = (void *)a1;
LABEL_41:
      if (v3 >= 1000.0 && v3 < 5299.0) {
        double v3 = 5299.0;
      }
      goto LABEL_44;
    }
LABEL_78:
    sub_1011FE3D8((uint64_t)v1);
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023181C8);
    }
    uint64_t v55 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "PAL,Containers out-of-sync,aborting", buf, 2u);
    }
    BOOL v56 = sub_10013D1A0(115, 0);
    uint64_t v57 = a1;
    if (v56)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023181C8);
      }
      LOWORD(v70) = 0;
      uint64_t v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCaloriePalEstimator::estimateDailyStepCount()", "%s\n", v58);
      if (v58 != (char *)buf) {
        free(v58);
      }
      uint64_t v57 = a1;
    }
    sub_1011FC53C(v57);
  }
}

id sub_1011FE0EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(id **)(a1 + 40);
  if (a4)
  {
    id v6 = [*v4 silo];
    double v18 = _NSConcreteStackBlock;
    uint64_t v19 = 3221225472;
    double v20 = sub_1011FE210;
    double v21 = &unk_1022A56E0;
    uint64_t v22 = a4;
    double v23 = v4;
    id v7 = &v18;
  }
  else
  {
    [objc_msgSend(a3, "sumQuantity") doubleValueForUnit:[HKUnit countUnit]];
    uint64_t v10 = v9;
    id v6 = [*v4 silo];
    uint64_t v12 = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472;
    id v14 = sub_1011FE3C0;
    double v15 = &unk_1022ACE00;
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = v10;
    id v7 = &v12;
  }
  return [v6 async:v7, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23];
}

void sub_1011FE210(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ([*(id *)(a1 + 32) code] != (id)6)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023181C8);
    }
    double v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023181C8);
      }
    }
    unint64_t v5 = qword_102418FF8;
    if (os_signpost_enabled((os_log_t)qword_102418FF8))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "PAL,", "{\"msg%{public}.0s\":\"PAL,\", \"error,\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  sub_1011FC53C(v2);
}

uint64_t sub_1011FE3C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, double))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_1011FE3D8(uint64_t a1)
{
  uint64_t v2 = *(double **)(a1 + 184);
  double v3 = *(double **)(a1 + 192);
  if (v2 == v3)
  {
    int v4 = 0;
    int v12 = 4;
    double v5 = 0.0;
LABEL_16:
    double v9 = 0.0;
    goto LABEL_24;
  }
  int v4 = 0;
  double v5 = 0.0;
  do
  {
    double v6 = *v2++;
    double v7 = v6;
    BOOL v8 = v6 < 1000.0;
    if (v6 < 1000.0) {
      double v7 = -0.0;
    }
    double v5 = v5 + v7;
    if (!v8) {
      ++v4;
    }
  }
  while (v2 != v3);
  if (v4 < 5)
  {
    int v12 = 4;
    goto LABEL_16;
  }
  double v9 = v5 / (double)v4;
  uint64_t v10 = 4;
  while (v9 >= (double)dword_101DAE1AC[v10])
  {
    if (++v10 == 12)
    {
      float v11 = *(float *)(a1 + 60);
      if (v11 <= 12.0) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }
  float v11 = *(float *)(a1 + 60);
  if (v11 > (float)(int)v10)
  {
LABEL_18:
    LODWORD(v10) = (int)(float)(v11 + -1.0);
    goto LABEL_21;
  }
  if (v10 > 0xB)
  {
LABEL_20:
    int v12 = 11;
    goto LABEL_24;
  }
LABEL_21:
  if ((int)v10 <= 4) {
    int v12 = 4;
  }
  else {
    int v12 = v10;
  }
LABEL_24:
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1023181C8);
  }
  uint64_t v13 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = (int)*(float *)(a1 + 60);
    int v15 = (int)v5;
    [+[NSDate date] timeIntervalSinceReferenceDate];
    double v17 = v16;
    [*(id *)(a1 + 96) timeIntervalSinceReferenceDate];
    v19[0] = 68290563;
    v19[1] = 0;
    __int16 v20 = 2082;
    double v21 = "";
    __int16 v22 = 1025;
    int v23 = v12;
    __int16 v24 = 1025;
    int v25 = v14;
    __int16 v26 = 1025;
    int v27 = v15;
    __int16 v28 = 1025;
    int v29 = v4;
    __int16 v30 = 1025;
    int v31 = (int)v9;
    __int16 v32 = 2049;
    double v33 = v17 - v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"PAL,\", \"estimated\":%{private}d, \"current\":%{private}d, \"total steps\":%{private}d, \"valid days\":%{private}d, \"avg steps\":%{private}d, \"timeToEstimate\":\"%{private}.3f\"}", (uint8_t *)v19, 0x3Au);
  }
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "updatePAL:", (double)v12];
  sub_1011FC53C(a1);
}

void sub_1011FE644(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1011FE674()
{
  sub_100134750(qword_1024863F0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024863F0, (void *)&_mh_execute_header);
}

uint64_t sub_1011FE6D4(uint64_t a1)
{
  uint64_t v2 = a1 + 428;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0xFFFF;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v9 = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_OWORD *)(a1 + 84) = _Q0;
  *(_DWORD *)(a1 + 100) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 132) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  sub_101171D90(a1 + 176);
  *(_WORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = 1;
  *(_WORD *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0xFFFF;
  *(void *)(a1 + 412) = 0;
  *(void *)(a1 + 420) = 0;
  *(_OWORD *)uint64_t v2 = xmmword_101D1C320;
  *(_OWORD *)(v2 + 16) = v9;
  *(_OWORD *)(v2 + 32) = v9;
  *(_OWORD *)(v2 + 48) = v9;
  *(_DWORD *)(a1 + 492) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 496) = 0xBFF0000000000000;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(v2 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 532) = 0x7FFFFFFF;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = a1 + 576;
  *(void *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(double *)a1 = sub_10016C458();
  sub_1011FE884(a1 + 344, 2uLL);
  return a1;
}

void sub_1011FE858(_Unwind_Exception *a1)
{
  double v5 = v4;
  sub_1000F5BB0(v3, *v5);
  double v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 352) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_1011FE884(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1012020E4((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

__n128 sub_1011FE8C4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 384) = sub_1000E6DB4(a2);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 424) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 488) = v6;
  *(_OWORD *)(a1 + 472) = v5;
  *(_OWORD *)(a1 + 456) = v7;
  long long v9 = *(_OWORD *)(a2 + 112);
  __n128 result = *(__n128 *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 548) = v10;
  *(__n128 *)(a1 + 536) = result;
  *(_OWORD *)(a1 + 520) = v9;
  return result;
}

void sub_1011FE938(uint64_t a1, _DWORD *a2, float *a3, float *a4)
{
  sub_1000C7F88(&v8);
  float v10 = 0.0;
  if (sub_1004D11B0(v8, "homeVisitErrOverUncThr", &v10)) {
    float v7 = v10;
  }
  else {
    float v7 = 1.0;
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (*a4 > v7)
  {
    if (*a3 >= 100.0)
    {
      if (*a3 >= 200.0) {
        ++a2[14];
      }
      else {
        ++a2[13];
      }
    }
    else
    {
      ++a2[12];
    }
  }
}

void sub_1011FEA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011FEA2C(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 216) == a2) {
    return;
  }
  *(unsigned char *)(a1 + 216) = a2;
  double v4 = sub_10016C458();
  double v5 = v4;
  if (a2)
  {
    *(double *)(a1 + 8) = v4;
    sub_1011FF004(a1 + 232, v4);
    if (*(unsigned char *)(a1 + 217))
    {
      double v6 = *(double *)(a1 + 8);
      *(double *)(a1 + 224) = v6;
      sub_1011FF004(a1 + 288, v6);
    }
    goto LABEL_26;
  }
  sub_1011FF358(a1 + 232, v4);
  double v8 = v7;
  double v9 = *(double *)(a1 + 8);
  BOOL v10 = v5 <= v9;
  double v11 = v5 - v9;
  if (v10 || v11 < v8)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    uint64_t v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 134349569;
      *(double *)__int16 v28 = v5;
      *(_WORD *)&v28[8] = 2049;
      *(void *)&v28[10] = v14;
      __int16 v29 = 2049;
      double v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#LCStats,outvisit,end,error,time,%{public}0.1f,outVisitStart,%{private}0.1f,durThr,%{private}0.1f", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_25;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    int v15 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationControllerCAStats::feedVisit(const BOOL)", "%s\n");
  }
  else
  {
    *(double *)(a1 + 592) = v11 + *(double *)(a1 + 592);
    *(double *)(a1 + 600) = v8 + *(double *)(a1 + 600);
    if (*(unsigned char *)(a1 + 217)) {
      sub_1011FF534((double *)a1);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    double v16 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      double v17 = *(double *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 592);
      uint64_t v19 = *(void *)(a1 + 600);
      *(_DWORD *)long long buf = 134350081;
      *(double *)__int16 v28 = v5;
      *(_WORD *)&v28[8] = 2049;
      *(double *)&v28[10] = v17;
      __int16 v29 = 2049;
      double v30 = v5 - v17;
      __int16 v31 = 2049;
      uint64_t v32 = v18;
      __int16 v33 = 2049;
      uint64_t v34 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#LCStats,outvisit,end,time,%{public}0.1f,outVisitStart,%{private}0.1f,dur,%{private}0.1f,accDur,%{private}0.1f,accDurThr,%{private}0.1f", buf, 0x34u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_25;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    int v15 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedVisit(const BOOL)", "%s\n");
  }
  if (v15 != buf) {
    free(v15);
  }
LABEL_25:
  *(_DWORD *)(a1 + 16) = 0xFFFF;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_OWORD *)(a1 + 84) = _Q0;
  *(_DWORD *)(a1 + 100) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 132) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  sub_1011FF8A0(a1);
LABEL_26:
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102318208);
  }
  __int16 v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(void *)(a1 + 8);
    *(_DWORD *)long long buf = 67174913;
    *(_DWORD *)__int16 v28 = a2;
    *(_WORD *)&v28[4] = 2049;
    *(void *)&void v28[6] = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#LCStats,outvisit,%{private}d,outVisitStart,%{private}0.1f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedVisit(const BOOL)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
}

void sub_1011FF004(uint64_t a1, double a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102318208);
  }
  double v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,outvisit,start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::outsideVisitStart(const CFTimeInterval)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 40) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)a1 && *(double *)(a1 + 8) >= *(double *)(a1 + 24))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      double v5 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = *(void *)(a1 + 24);
        *(_DWORD *)long long buf = 134349569;
        uint64_t v11 = v6;
        __int16 v12 = 2050;
        uint64_t v13 = v7;
        __int16 v14 = 2049;
        double v15 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#LCStats,outvisit,device is not static since last loc update,staticTime,%{public}0.1f,posThrTime,%{public}0.1f,outVisitTime,%{private}0.1f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102318208);
        }
        double v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::outsideVisitStart(const CFTimeInterval)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      *(double *)(a1 + 8) = a2;
    }
    *(double *)(a1 + 24) = a2;
  }
}

void sub_1011FF358(uint64_t a1, double a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102318208);
  }
  double v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)long long buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,outvisit,stop,posUncThr,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLLocationControllerCAStats::ThresholdPosUncMetric::outsideVisitStop(const CFTimeInterval)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(unsigned char *)(a1 + 16)) {
    sub_100042BD4(a1, a2);
  }
  *(unsigned char *)(a1 + 48) = 0;
}

void sub_1011FF534(double *a1)
{
  double v2 = sub_10016C458();
  double v3 = a1[28];
  if (v2 >= v3)
  {
    a1[76] = v2 - v3 + a1[76];
    sub_1011FF358((uint64_t)(a1 + 36), v2);
    a1[77] = v7 + a1[77];
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    int v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      double v9 = a1[76];
      uint64_t v10 = *((void *)a1 + 77);
      *(_DWORD *)long long buf = 134283777;
      double v12 = v9;
      __int16 v13 = 2049;
      uint64_t v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#LCStats,updateNonChargingMetrics,DailyAccumulatedOutsideVisitNonChargingTimeSec,%{private}0.1fDailyAccumulatedOutsideVisitNonChargingTimeWithThresholdPosUncSec,%{private}0.1f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::updateNonChargingMetrics(const CFTimeInterval)", "%s\n");
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    double v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *((void *)a1 + 28);
      *(_DWORD *)long long buf = 134283777;
      double v12 = v2;
      __int16 v13 = 2049;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#LCStats,updateNonChargingMetrics,current time lags previous timestamp,%{private}0.1f,%{private}0.1f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationControllerCAStats::updateNonChargingMetrics(const CFTimeInterval)", "%s\n");
LABEL_19:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
}

void sub_1011FF8A0(uint64_t a1)
{
  double v2 = sub_10016C458();
  if (v2 >= *(double *)a1)
  {
    sub_1000C7F88(buf);
    v8[0] = 0.0;
    if (sub_1000A699C(*(uint64_t *)buf, "LCStatsSubmitMetricsThrSec", v8)) {
      double v4 = v8[0];
    }
    else {
      double v4 = 86400.0;
    }
    if (v10) {
      sub_1000DB0A0(v10);
    }
    if (v2 - *(double *)a1 >= v4)
    {
      sub_1012016D8((void *)(a1 + 384));
      sub_101200320(a1);
      sub_101201670(a1);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      uint64_t v5 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#LCStats,submitMetrics,less than threshold time to submit metrics", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102318208);
        }
        LOWORD(v8[0]) = 0;
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetrics()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    double v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#LCStats,submitMetrics,CurrentMCT < CA baseline time", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      LOWORD(v8[0]) = 0;
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationControllerCAStats::submitMetrics()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_101201670(a1);
  }
}

void sub_1011FFBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011FFC18(uint64_t a1, _OWORD *a2)
{
  double v4 = (_OWORD *)(a1 + 16);
  if (sub_1000E6DB4(a1 + 16))
  {
    sub_1000F1268((double *)(a1 + 176), (uint64_t)v4, (uint64_t)a2);
    double v6 = v5;
    if (v5 > *(double *)(a1 + 656))
    {
      *(double *)(a1 + 656) = v5;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      double v7 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 656);
        *(_DWORD *)long long buf = 134349056;
        uint64_t v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#LCStats,update,maxdist,%{public}0.1f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102318208);
        }
        double v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::updateDistanceBetweenQualityPositionDistribution(const CLDaemonLocation &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
    if (v6 >= 20.0)
    {
      if (v6 >= 50.0)
      {
        if (v6 >= 100.0)
        {
          if (v6 >= 500.0)
          {
            if (v6 >= 1000.0)
            {
              if (v6 >= 5000.0)
              {
                if (v6 >= 20000.0)
                {
                  if (v6 >= 50000.0) {
                    goto LABEL_26;
                  }
                  double v9 = (_DWORD *)(a1 + 652);
                }
                else
                {
                  double v9 = (_DWORD *)(a1 + 648);
                }
              }
              else
              {
                double v9 = (_DWORD *)(a1 + 644);
              }
            }
            else
            {
              double v9 = (_DWORD *)(a1 + 640);
            }
          }
          else
          {
            double v9 = (_DWORD *)(a1 + 636);
          }
        }
        else
        {
          double v9 = (_DWORD *)(a1 + 632);
        }
      }
      else
      {
        double v9 = (_DWORD *)(a1 + 628);
      }
    }
    else
    {
      double v9 = (_DWORD *)(a1 + 624);
    }
    if (*v9 != -1) {
      ++*v9;
    }
  }
LABEL_26:
  long long v10 = a2[1];
  *double v4 = *a2;
  v4[1] = v10;
  long long v11 = a2[2];
  long long v12 = a2[3];
  long long v13 = a2[5];
  void v4[4] = a2[4];
  void v4[5] = v13;
  void v4[2] = v11;
  _OWORD v4[3] = v12;
  long long v14 = a2[6];
  long long v15 = a2[7];
  long long v16 = a2[8];
  *(_OWORD *)((char *)v4 + 140) = *(_OWORD *)((char *)a2 + 140);
  v4[7] = v15;
  v4[8] = v16;
  void v4[6] = v14;
}

void sub_1011FFF10(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if ((*a2 - 1) <= 1)
  {
    unsigned int v4 = *a3 - 1;
    int v5 = v4 < 2;
    sub_101200134((double *)(a1 + 232), v5);
    sub_101200134((double *)(a1 + 288), v5);
    if (*(unsigned __int8 *)(a1 + 385) != v5)
    {
      *(unsigned char *)(a1 + 385) = v5;
      if (v4 <= 1)
      {
        if (*(unsigned char *)(a1 + 384))
        {
          *(double *)(a1 + 400) = sub_10016C458();
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102318208);
          }
          double v6 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            float v7 = *(double *)(a1 + 400);
            *(_DWORD *)long long buf = 134349056;
            double v10 = v7;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#LCStats,homeVisit,device static from %{public}0.1f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102318208);
            }
            uint64_t v8 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v8);
            if (v8 != (char *)buf) {
              free(v8);
            }
          }
        }
      }
    }
  }
}

void sub_101200134(double *a1, int a2)
{
  if (*(unsigned __int8 *)a1 != a2)
  {
    *(unsigned char *)a1 = a2;
    a1[1] = sub_10016C458();
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    double v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(unsigned __int8 *)a1;
      uint64_t v5 = *((void *)a1 + 1);
      *(_DWORD *)long long buf = 67240448;
      int v8 = v4;
      __int16 v9 = 2050;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,static,%{public}d,time,%{public}0.1f", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::motionStateStatic(const BOOL)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_101200320(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 344);
  unsigned int v3 = *(_DWORD *)(v2 + 48 * *(void *)(a1 + 368) + 40)
     + *(_DWORD *)(v2 + 48 * *(void *)(a1 + 368) + 36)
     + *(_DWORD *)(v2 + 48 * *(void *)(a1 + 368) + 44);
  int v4 = *(_DWORD *)(v2 + 48 * *(void *)(a1 + 376) + 40)
     + *(_DWORD *)(v2 + 48 * *(void *)(a1 + 376) + 36)
     + *(_DWORD *)(v2 + 48 * *(void *)(a1 + 376) + 44);
  double v5 = *(double *)(a1 + 592);
  if (v5 >= 1.0 || v3 != 0 || v4 != 0)
  {
    double v8 = 0.0;
    if (v5 > 0.0) {
      double v8 = *(double *)(a1 + 600) / v5;
    }
    double v9 = *(double *)(a1 + 608);
    if (v9 <= 1.0) {
      unsigned int v10 = 0;
    }
    else {
      unsigned int v10 = (*(double *)(a1 + 616) / v9 * 100.0);
    }
    double v15 = v8 * 100.0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    long long v16 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = *(double *)(a1 + 592);
      unsigned int v18 = *(double *)(a1 + 656);
      unsigned int v19 = *(double *)(a1 + 608);
      __int32 v20 = *(_DWORD *)(a1 + 624);
      unsigned int v21 = *(_DWORD *)(a1 + 628);
      unsigned int v22 = *(_DWORD *)(a1 + 632);
      unsigned int v23 = *(_DWORD *)(a1 + 636);
      __int32 v24 = *(_DWORD *)(a1 + 640);
      __int32 v25 = *(_DWORD *)(a1 + 644);
      __int32 v26 = *(_DWORD *)(a1 + 648);
      __int32 v27 = *(_DWORD *)(a1 + 652);
      *(_DWORD *)long long buf = 67177729;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v15;
      *(_WORD *)int v126 = 1026;
      *(_DWORD *)&v126[2] = v18;
      *(_WORD *)uint64_t v127 = 1025;
      *(_DWORD *)&v127[2] = v19;
      __int16 v128 = 1026;
      unsigned int v129 = v10;
      __int16 v130 = 1026;
      __int32 v131 = v20;
      __int16 v132 = 1026;
      unsigned int v133 = v21;
      __int16 v134 = 1026;
      unsigned int v135 = v22;
      __int16 v136 = 1026;
      unsigned int v137 = v23;
      __int16 v138 = 1026;
      __int32 v139 = v24;
      __int16 v140 = 1026;
      __int32 v141 = v25;
      __int16 v142 = 1026;
      __int32 v143 = v26;
      __int16 v144 = 1026;
      __int32 v145 = v27;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#LCStats,LocationControllerMetrics,Submit to CA,totalDailyOutsideVisitTimeSeconds,%{private}d,totalDailyOutsideVisitTimePercentPosBetterThresholdUnc,%{public}d,maxDailyDistanceBetweenQualityPosOutsideVisitMeters,%{public}d,totalDailyOutsideVisitNonChargingTimeSeconds,%{private}d,totalDailyOutsideVisitNonChargingTimePercentPosBetterThresholdUnc,%{public}d,countPos<20m,%{public}d,countPos<50m,%{public}d,countPos<100m,%{public}d,countPos<500m,%{public}d,countPos<1000m,%{public}d,countPos<5000m,%{public}d,countPos<20000m,%{public}d,countPos<50000m,%{public}d,", buf, 0x50u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      unsigned int v68 = *(double *)(a1 + 592);
      unsigned int v69 = *(double *)(a1 + 656);
      unsigned int v70 = *(double *)(a1 + 608);
      __int32 v71 = *(_DWORD *)(a1 + 624);
      unsigned int v72 = *(_DWORD *)(a1 + 628);
      unsigned int v73 = *(_DWORD *)(a1 + 632);
      unsigned int v74 = *(_DWORD *)(a1 + 636);
      __int32 v75 = *(_DWORD *)(a1 + 640);
      __int32 v76 = *(_DWORD *)(a1 + 644);
      __int32 v77 = *(_DWORD *)(a1 + 648);
      __int32 v78 = *(_DWORD *)(a1 + 652);
      *(_DWORD *)double v94 = 67177729;
      *(_DWORD *)&v94[4] = v68;
      *(_WORD *)&v94[8] = 1026;
      *(_DWORD *)&v94[10] = v15;
      *(_WORD *)__int16 v95 = 1026;
      *(_DWORD *)&v95[2] = v69;
      *(_WORD *)double v96 = 1025;
      *(_DWORD *)&v96[2] = v70;
      __int16 v97 = 1026;
      unsigned int v98 = v10;
      __int16 v99 = 1026;
      __int32 v100 = v71;
      __int16 v101 = 1026;
      unsigned int v102 = v72;
      __int16 v103 = 1026;
      unsigned int v104 = v73;
      __int16 v105 = 1026;
      unsigned int v106 = v74;
      __int16 v107 = 1026;
      __int32 v108 = v75;
      __int16 v109 = 1026;
      __int32 v110 = v76;
      __int16 v111 = 1026;
      __int32 v112 = v77;
      __int16 v113 = 1026;
      __int32 v114 = v78;
      double v79 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetricsForOutSideVisitAndFuserSessionStart()", "%s\n", v79);
      if (v79 != buf) {
        free(v79);
      }
    }
    uint64_t v29 = *(void *)(a1 + 368);
    uint64_t v30 = *(void *)(a1 + 344);
    __int16 v31 = (_DWORD *)(v30 + 48 * v29);
    unsigned int v32 = v31[9];
    if (v32)
    {
      LODWORD(v28) = *v31;
      double v28 = (double)*(unint64_t *)&v28 * 100.0 / (double)v32;
      unsigned int v93 = v28;
    }
    else
    {
      unsigned int v93 = 0;
    }
    unsigned int v33 = *(_DWORD *)(v30 + 48 * v29 + 40);
    if (v33)
    {
      LODWORD(v28) = *(_DWORD *)(v30 + 48 * v29 + 4);
      double v28 = (double)*(unint64_t *)&v28 * 100.0 / (double)v33;
      unsigned int v34 = v28;
    }
    else
    {
      unsigned int v34 = 0;
    }
    unsigned int v35 = *(_DWORD *)(v30 + 48 * v29 + 44);
    if (v35)
    {
      LODWORD(v28) = *(_DWORD *)(v30 + 48 * v29 + 8);
      unsigned int v36 = ((double)*(unint64_t *)&v28 * 100.0 / (double)v35);
      if (v3)
      {
LABEL_35:
        uint64_t v37 = v30 + 48 * v29;
        long long v38 = *(_OWORD *)(v37 + 12);
        v39.i64[0] = v38;
        v39.i64[1] = DWORD1(v38);
        float64x2_t v40 = vcvtq_f64_u64(v39);
        v39.i64[0] = DWORD2(v38);
        v39.i64[1] = HIDWORD(v38);
        float64x2_t v41 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        float64x2_t v42 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v3), 0);
        int32x4_t v92 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v40, v41), v42)), (int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v39), v41), v42)));
        *(void *)&long long v38 = *(void *)(v37 + 28);
        v39.i64[0] = v38;
        v39.i64[1] = DWORD1(v38);
        int32x2_t v43 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v39), v41), v42)));
LABEL_38:
        int32x2_t v91 = v43;
        uint64_t v44 = *(void *)(a1 + 376);
        unsigned int v45 = *(_DWORD *)(v30 + 48 * v44 + 36) + v32;
        if (v45) {
          unsigned int v46 = ((double)(*(_DWORD *)(v30 + 48 * v44) + *v31) * 100.0 / (double)v45);
        }
        else {
          unsigned int v46 = 0;
        }
        unsigned int v47 = *(_DWORD *)(v30 + 48 * v44 + 40) + v33;
        if (v47) {
          unsigned int v48 = ((double)(*(_DWORD *)(v30 + 48 * v44 + 4) + *(_DWORD *)(v30 + 48 * v29 + 4))
        }
                             * 100.0
                             / (double)v47);
        else {
          unsigned int v48 = 0;
        }
        unsigned int v49 = *(_DWORD *)(v30 + 48 * v44 + 44) + v35;
        if (v49) {
          unsigned int v50 = ((double)(*(_DWORD *)(v30 + 48 * v44 + 8) + *(_DWORD *)(v30 + 48 * v29 + 8))
        }
                             * 100.0
                             / (double)v49);
        else {
          unsigned int v50 = 0;
        }
        if (v4 + v3)
        {
          uint64_t v51 = v30 + 48 * v29;
          uint64_t v52 = v30 + 48 * v44;
          int32x4_t v53 = vaddq_s32(*(int32x4_t *)(v52 + 12), *(int32x4_t *)(v51 + 12));
          v54.i64[0] = v53.u32[0];
          v54.i64[1] = v53.u32[1];
          float64x2_t v55 = vcvtq_f64_u64(v54);
          v54.i64[0] = v53.u32[2];
          v54.i64[1] = v53.u32[3];
          float64x2_t v56 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
          float64x2_t v57 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(v4 + v3)), 0);
          int32x4_t v90 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v55, v56), v57)), (int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v54), v56), v57)));
          *(int32x2_t *)v53.i8 = vadd_s32(*(int32x2_t *)(v52 + 28), *(int32x2_t *)(v51 + 28));
          v54.i64[0] = v53.u32[0];
          v54.i64[1] = v53.u32[1];
          int32x2_t v58 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v54), v56), v57)));
        }
        else
        {
          int32x2_t v58 = 0;
          int32x4_t v90 = 0u;
        }
        int32x2_t v89 = v58;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102318208);
        }
        uint64_t v59 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v60) = 67244544;
          HIDWORD(v60) = v90.i32[0];
          *(void *)long long buf = v60;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)((unint64_t)buf | 0xA) = v90.i32[1];
          *(_WORD *)int v126 = 1026;
          *(_DWORD *)&v126[2] = v90.i32[2];
          *(_WORD *)uint64_t v127 = 1026;
          *(_DWORD *)&v127[2] = v90.i32[3];
          __int16 v128 = 1026;
          unsigned int v129 = v89.i32[0];
          __int16 v130 = 1026;
          __int32 v131 = v89.i32[1];
          __int16 v132 = 1026;
          unsigned int v133 = v46;
          __int16 v134 = 1026;
          unsigned int v135 = v48;
          __int16 v136 = 1026;
          unsigned int v137 = v50;
          __int16 v138 = 1026;
          __int32 v139 = v92.i32[0];
          __int16 v140 = 1026;
          __int32 v141 = v92.i32[1];
          __int16 v142 = 1026;
          __int32 v143 = v92.i32[2];
          __int16 v144 = 1026;
          __int32 v145 = v92.i32[3];
          __int16 v146 = 1026;
          __int32 v147 = v91.i32[0];
          __int16 v148 = 1026;
          __int32 v149 = v91.i32[1];
          __int16 v150 = 1026;
          unsigned int v151 = v93;
          __int16 v152 = 1026;
          unsigned int v153 = v34;
          __int16 v154 = 1026;
          unsigned int v155 = v36;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#LCStats,#LCFuser,Percentage,LocationControllerMetrics,Submit to CA,pctSessionStartFuserHuncLT25m,%{public}d,pctSessionStartFuserHuncLT50m,%{public}d,pctSessionStartFuserHuncLT100m,%{public}d,pctSessionStartFuserHuncLT200m,%{public}d,pctSessionStartFuserHuncLT500m,%{public}d,pctSessionStartFuserHuncGT500m,%{public}d,pctBestSessionStartFuserHuncLT50m,%{public}d,pctFineSessionStartFuserHuncLT100m,%{public}d,pctCoarseSessionStartFuserHuncLT1000m,%{public}d,pctSessionStartHomeVisitFuserHuncLT25m,%{public}d,pctSessionStartHomeVisitFuserHuncLT50m,%{public}d,pctSessionStartHomeVisitFuserHuncLT100m,%{public}d,pctSessionStartHomeVisitFuserHuncLT200m,%{public}d,pctSessionStartHomeVisitFuserHuncLT500m,%{public}d,pctSessionStartHomeVisitFuserHuncGT500m,%{public}d,pctBestSessionStartHomeVisitFuserHuncLT50m,%{public}d,pctFineSessionStartHomeVisitFuserHuncLT100m,%{public}d,pctCoarseSessionStartHomeVisitFuserHuncLT1000m,%{public}d,", buf, 0x6Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102318208);
          }
          LODWORD(v80) = 67244544;
          HIDWORD(v80) = v90.i32[0];
          *(void *)double v94 = v80;
          *(_WORD *)&v94[8] = 1026;
          *(_DWORD *)((unint64_t)v94 | 0xA) = v90.i32[1];
          *(_WORD *)__int16 v95 = 1026;
          *(_DWORD *)&v95[2] = v90.i32[2];
          *(_WORD *)double v96 = 1026;
          *(_DWORD *)&v96[2] = v90.i32[3];
          __int16 v97 = 1026;
          unsigned int v98 = v89.i32[0];
          __int16 v99 = 1026;
          __int32 v100 = v89.i32[1];
          __int16 v101 = 1026;
          unsigned int v102 = v46;
          __int16 v103 = 1026;
          unsigned int v104 = v48;
          __int16 v105 = 1026;
          unsigned int v106 = v50;
          __int16 v107 = 1026;
          __int32 v108 = v92.i32[0];
          __int16 v109 = 1026;
          __int32 v110 = v92.i32[1];
          __int16 v111 = 1026;
          __int32 v112 = v92.i32[2];
          __int16 v113 = 1026;
          __int32 v114 = v92.i32[3];
          __int16 v115 = 1026;
          __int32 v116 = v91.i32[0];
          __int16 v117 = 1026;
          __int32 v118 = v91.i32[1];
          __int16 v119 = 1026;
          unsigned int v120 = v93;
          __int16 v121 = 1026;
          unsigned int v122 = v34;
          __int16 v123 = 1026;
          unsigned int v124 = v36;
          double v81 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetricsForOutSideVisitAndFuserSessionStart()", "%s\n", v81);
          if (v81 != buf) {
            free(v81);
          }
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102318208);
        }
        int v61 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v62 = *(void *)(a1 + 344);
          double v63 = (unsigned int *)(v62 + 48 * *(void *)(a1 + 368));
          unsigned int v64 = v63[4];
          LODWORD(v62) = *(_DWORD *)(v62 + 48 * *(void *)(a1 + 376) + 16);
          unsigned int v65 = *v63;
          __int32 v66 = v63[1];
          unsigned int v67 = v63[9];
          LODWORD(v63) = v63[10];
          *(_DWORD *)long long buf = 67241984;
          *(_DWORD *)&uint8_t buf[4] = v3;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v4;
          *(_WORD *)int v126 = 1026;
          *(_DWORD *)&v126[2] = v64;
          *(_WORD *)uint64_t v127 = 1026;
          *(_DWORD *)&v127[2] = v62;
          __int16 v128 = 1026;
          unsigned int v129 = v65;
          __int16 v130 = 1026;
          __int32 v131 = v66;
          __int16 v132 = 1026;
          unsigned int v133 = v67;
          __int16 v134 = 1026;
          unsigned int v135 = v63;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#LCStats,#LCFuser,Count,LocationControllerMetrics,totalDailySessionStartHomeVisit,%{public}d,totalDailySessionStartNotHomeVisit,%{public}d,dailyCountSessionStartHomeVisitFuserHuncLT50m,%{public}d,dailyCountSessionStartNotHomeVisitFuserHuncLT50m,%{public}d,dailyCountBestSessionStartHomeVisitFuserHuncLT50m,%{public}d,dailyCountFineSessionStartHomeVisitFuserHuncLT100m,%{public}d,dailyCountBestSessionStartHomeVisit,%{public}d,dailyCountFineSessionStartHomeVisit,%{public}d,", buf, 0x32u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102318208);
          }
          uint64_t v82 = *(void *)(a1 + 344);
          double v83 = (unsigned int *)(v82 + 48 * *(void *)(a1 + 368));
          unsigned int v84 = v83[4];
          LODWORD(v82) = *(_DWORD *)(v82 + 48 * *(void *)(a1 + 376) + 16);
          unsigned int v85 = *v83;
          __int32 v86 = v83[1];
          unsigned int v87 = v83[9];
          LODWORD(v83) = v83[10];
          *(_DWORD *)double v94 = 67241984;
          *(_DWORD *)&v94[4] = v3;
          *(_WORD *)&v94[8] = 1026;
          *(_DWORD *)&v94[10] = v4;
          *(_WORD *)__int16 v95 = 1026;
          *(_DWORD *)&v95[2] = v84;
          *(_WORD *)double v96 = 1026;
          *(_DWORD *)&v96[2] = v82;
          __int16 v97 = 1026;
          unsigned int v98 = v85;
          __int16 v99 = 1026;
          __int32 v100 = v86;
          __int16 v101 = 1026;
          unsigned int v102 = v87;
          __int16 v103 = 1026;
          unsigned int v104 = v83;
          double v88 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetricsForOutSideVisitAndFuserSessionStart()", "%s\n", v88);
          if (v88 != buf) {
            free(v88);
          }
        }
        AnalyticsSendEventLazy();
        return;
      }
    }
    else
    {
      unsigned int v36 = 0;
      if (v3) {
        goto LABEL_35;
      }
    }
    int32x2_t v43 = 0;
    int32x4_t v92 = 0u;
    goto LABEL_38;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102318208);
  }
  long long v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 592);
    *(_DWORD *)long long buf = 134284033;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)int v126 = 0;
    *(_WORD *)&v126[4] = 1026;
    *(_DWORD *)uint64_t v127 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#LCStats,ForOutSideVisitAndFuserSessionStart,skip submission,outsideVisitSec,%{private}0.1f,inHomeVisitSessionCnt,%{public}d,inNonHomeVisitSessionCnt,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    uint64_t v13 = *(void *)(a1 + 592);
    *(_DWORD *)double v94 = 134284033;
    *(void *)&v94[4] = v13;
    *(_WORD *)&v94[12] = 1026;
    *(_DWORD *)__int16 v95 = 0;
    *(_WORD *)&v95[4] = 1026;
    *(_DWORD *)double v96 = 0;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::submitMetricsForOutSideVisitAndFuserSessionStart()", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
}

NSDictionary *sub_101201084(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"totalDailyOutsideVisitTimeSeconds";
  v5[0] = +[NSNumber numberWithUnsignedInt:*(double *)(v2 + 592)];
  v4[1] = @"totalDailyOutsideVisitTimePercentPosBetterThresholdUnc";
  v5[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  void v4[2] = @"maxDailyDistanceBetweenQualityPosOutsideVisitMeters";
  void v5[2] = +[NSNumber numberWithUnsignedInt:*(double *)(v2 + 656)];
  _OWORD v4[3] = @"totalDailyOutsideVisitNonChargingTimeSeconds";
  _OWORD v5[3] = +[NSNumber numberWithUnsignedInt:*(double *)(v2 + 608)];
  void v4[4] = @"totalDailyOutsideVisitNonChargingTimePercentPosBetterThresholdUnc";
  v5[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
  void v4[5] = @"DailyCountOutsideVisitDistanceBetweenQualityPositionLess20m";
  void v5[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 624)];
  void v4[6] = @"DailyCountOutsideVisitDistanceBetweenQualityPositionLess50m";
  void v5[6] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 628)];
  v4[7] = @"DailyCountOutsideVisitDistanceBetweenQualityPositionLess100m";
  v5[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 632)];
  v4[8] = @"DailyCountOutsideVisitDistanceBetweenQualityPositionLess500m";
  v5[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 636)];
  v4[9] = @"DailyCountOutsideVisitDistanceBetweenQualityPositionLess1000m";
  v5[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 640)];
  v4[10] = @"DailyCountOutsideVisitDistanceBetweenQualityPositionLess5000m";
  v5[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 644)];
  v4[11] = @"DailyCountOutsideVisitDistanceBetweenQualityPositionLess20000m";
  v5[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 648)];
  v4[12] = @"DailyCountOutsideVisitDistanceBetweenQualityPositionLess50000m";
  v5[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 652)];
  v4[13] = @"DailyPercentCoarseSessionStartFuserHuncLT1000m";
  v5[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  v4[14] = @"DailyPercentFineSessionStartFuserHuncLT100m";
  v5[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 52)];
  v4[15] = @"DailyPercentBestSessionStartFuserHuncLT50m";
  v5[15] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)];
  v4[16] = @"DailyPercentSessionStartFuserHuncLT25m";
  v5[16] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 60)];
  v4[17] = @"DailyPercentSessionStartFuserHuncLT50m";
  v5[17] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
  v4[18] = @"DailyPercentSessionStartFuserHuncLT100m";
  v5[18] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 68)];
  v4[19] = @"DailyPercentSessionStartFuserHuncLT200m";
  v5[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  v4[20] = @"DailyPercentSessionStartFuserHuncLT500m";
  v5[20] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 76)];
  v4[21] = @"DailyPercentSessionStartFuserHuncGT500m";
  v5[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
  v4[22] = @"DailyPercentSessionStartHomeVisitFuserHuncLT25m";
  v5[22] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 84)];
  v4[23] = @"DailyPercentSessionStartHomeVisitFuserHuncLT50m";
  v5[23] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
  v4[24] = @"DailyPercentSessionStartHomeVisitFuserHuncLT100m";
  v5[24] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 92)];
  v4[25] = @"DailyPercentSessionStartHomeVisitFuserHuncLT200m";
  v5[25] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)];
  v4[26] = @"DailyPercentSessionStartHomeVisitFuserHuncLT500m";
  v5[26] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 100)];
  v4[27] = @"DailyPercentSessionStartHomeVisitFuserHuncGT500m";
  v5[27] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 104)];
  v4[28] = @"DailyPercentBestSessionStartHomeVisitFuserHuncLT50m";
  v5[28] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 108)];
  v4[29] = @"DailyPercentCoarseSessionStartHomeVisitFuserHuncLT1000m";
  v5[29] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 112)];
  v4[30] = @"DailyPercentFineSessionStartHomeVisitFuserHuncLT100m";
  v5[30] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 116)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:31];
}

void sub_101201470(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 217) != a2)
  {
    *(unsigned char *)(a1 + 217) = a2;
    if (*(unsigned char *)(a1 + 216))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      unsigned int v3 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v4 = *(unsigned char *)(a1 + 217) == 0;
        *(_DWORD *)long long buf = 67240192;
        BOOL v8 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#LCStats,outvisit,battery,charging,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102318208);
        }
        double v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerCAStats::feedBatteryChargingStatus(BOOL)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      double v5 = sub_10016C458();
      if (*(unsigned char *)(a1 + 217))
      {
        *(double *)(a1 + 224) = v5;
        sub_1011FF004(a1 + 288, v5);
      }
      else
      {
        sub_1011FF534((double *)a1);
      }
    }
  }
}

void sub_101201670(uint64_t a1)
{
  *(void *)(a1 + 568) = a1 + 576;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 352) = *(void *)(a1 + 344);
  sub_1011FE884(a1 + 344, 2uLL);
  *(double *)a1 = sub_10016C458();
}

void sub_1012016D8(void *a1)
{
  if (a1[25])
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    BOOL v4 = (void *)a1[23];
    float64x2_t v56 = a1 + 24;
    if (v4 != a1 + 24)
    {
      LODWORD(v5) = 0;
      LODWORD(v6) = 0;
      LODWORD(v7) = 0;
      LODWORD(v8) = 0;
      LODWORD(v9) = 0;
      float v10 = 0.0;
      float v11 = 0.0;
      float v12 = 0.0;
      float v13 = 0.0;
      while (1)
      {
        double v14 = *((double *)v4 + 5);
        double v15 = *((double *)v4 + 6);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102318208);
        }
        float v16 = v14;
        float v17 = v15;
        unsigned int v18 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *((_DWORD *)v4 + 8);
          int v21 = *((_DWORD *)v4 + 14);
          int v20 = *((_DWORD *)v4 + 15);
          int v22 = *((_DWORD *)v4 + 16);
          int v23 = *((_DWORD *)v4 + 17);
          int v24 = *((_DWORD *)v4 + 18);
          int v25 = *((_DWORD *)v4 + 19);
          int v26 = *((_DWORD *)v4 + 20);
          int v27 = *((_DWORD *)v4 + 21);
          int v29 = *((_DWORD *)v4 + 22);
          int v28 = *((_DWORD *)v4 + 23);
          int v30 = *((_DWORD *)v4 + 24);
          *(_DWORD *)long long buf = 67243520;
          int v58 = v19;
          __int16 v59 = 1026;
          int v60 = v20;
          __int16 v61 = 2050;
          double v62 = v16;
          __int16 v63 = 2050;
          double v64 = v17;
          __int16 v65 = 1026;
          int v66 = v21;
          __int16 v67 = 1026;
          int v68 = v22;
          __int16 v69 = 1026;
          int v70 = v23;
          __int16 v71 = 1026;
          int v72 = v24;
          __int16 v73 = 1026;
          int v74 = v25;
          __int16 v75 = 1026;
          int v76 = v26;
          __int16 v77 = 1026;
          int v78 = v27;
          __int16 v79 = 1026;
          int v80 = v29;
          __int16 v81 = 1026;
          int v82 = v28;
          __int16 v83 = 1026;
          int v84 = v30;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#LCStats,homeVisit,metrics,posType,%{public}d,countOfPosType,%{public}d,maxPosError,%{public}0.1f,uncAtMaxError,%{public}0.1f,sigEnv,%{public}d,countOfPosErrLT100,%{public}d,countOfPosErr100To200,%{public}d,countOfPosErrGE200,%{public}d,countOfPosErrOverUncLTOne,%{public}d,countOfPosErrOverUncOneToThree,%{public}d,countOfPosErrOverUncGEThree,%{public}d,countOfPosErrorLT100UncGTOne,%{public}d,countOfPosError100To200UncGTOne,%{public}d,countOfPosErrorGE200UncGTOne,%{public}d", buf, 0x5Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102318208);
          }
          unsigned int v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void HomeVisitInfo::submitMetricsHomeVisit()", "%s\n", v50);
          if (v50 != (char *)buf) {
            free(v50);
          }
        }
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 14))] forKey:@"SigEnv"];
        int v31 = *((_DWORD *)v4 + 8);
        if (v31 <= 5) {
          break;
        }
        if (v31 == 6)
        {
          [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 15))] forKey:@"numCellFix"];
          *(float *)&double v39 = v16;
          [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v39)] forKey:@"maxCellError"];
          *(float *)&double v40 = v17;
          unsigned int v34 = +[NSNumber numberWithFloat:v40];
          unsigned int v35 = v2;
          CFStringRef v36 = @"uncAtMaxCellError";
          goto LABEL_18;
        }
        if (v31 == 11) {
          goto LABEL_15;
        }
LABEL_19:
        float v41 = v16 / v17;
        if (v17 <= 0.0) {
          float v41 = 0.0;
        }
        if (v41 < 1.0 && v12 < v16) {
          float v12 = v16;
        }
        if (v13 < v16) {
          float v13 = v16;
        }
        if (v11 < v16 && v41 > 1.0)
        {
          float v11 = v16;
          float v10 = v17;
          uint64_t v5 = *((unsigned int *)v4 + 8);
        }
        else
        {
          uint64_t v5 = v5;
        }
        int v44 = *((_DWORD *)v4 + 23);
        int v43 = *((_DWORD *)v4 + 24);
        int v45 = *((_DWORD *)v4 + 21);
        int v46 = *((_DWORD *)v4 + 22);
        unsigned int v47 = (void *)v4[1];
        if (v47)
        {
          do
          {
            unsigned int v48 = v47;
            unsigned int v47 = (void *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            unsigned int v48 = (void *)v4[2];
            BOOL v49 = *v48 == (void)v4;
            BOOL v4 = v48;
          }
          while (!v49);
        }
        uint64_t v9 = (v46 + v9);
        uint64_t v8 = (v44 + v8);
        uint64_t v7 = (v43 + v7);
        uint64_t v6 = (v45 + v6);
        BOOL v4 = v48;
        if (v48 == v56) {
          goto LABEL_52;
        }
      }
      if (v31 == 1)
      {
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 15))] forKey:@"numGPSFix"];
        *(float *)&double v37 = v16;
        [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v37)] forKey:@"maxGpsError"];
        *(float *)&double v38 = v17;
        [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v38)] forKey:@"uncAtMaxGpsError"];
        [v2 setObject:[NSNumber numberWithUnsignedInt:*((unsigned int *)v4 + 16)] forKey:@"countGpsErrorLessThan100"];
        [v2 setObject:[NSNumber numberWithUnsignedInt:*((unsigned int *)v4 + 17)] forKey:@"countGpsError100to200"];
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 18))] forKey:@"countGpsErrorMoreThan200"];
        [v2 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 19)) forKey:@"countGpsErrorByUncLessThan1"];
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 20))] forKey:@"countGpsErrorByUnc1to3"];
        unsigned int v34 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v4 + 21)];
        unsigned int v35 = v2;
        CFStringRef v36 = @"countGpsErrorByUncMoreThan3";
      }
      else
      {
        if (v31 != 4) {
          goto LABEL_19;
        }
LABEL_15:
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 15))] forKey:@"numWiFiFix"];
        *(float *)&double v32 = v16;
        [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v32)] forKey:@"maxWiFiError"];
        *(float *)&double v33 = v17;
        [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v33)] forKey:@"uncAtMaxWiFiError"];
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 16))] forKey:@"countWiFiErrorLessThan100"];
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 17))] forKey:@"countWiFiError100to200"];
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 18))] forKey:@"countWiFiErrorMoreThan200"];
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 19))] forKey:@"countWiFiErrorByUncLessThan1"];
        [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v4 + 20))] forKey:@"countWiFiErrorByUnc1to3"];
        unsigned int v34 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v4 + 21)];
        unsigned int v35 = v2;
        CFStringRef v36 = @"countWiFiErrorByUncMoreThan3";
      }
LABEL_18:
      [v35 setObject:v34 forKey:v36];
      goto LABEL_19;
    }
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    float v13 = 0.0;
    float v12 = 0.0;
    float v11 = 0.0;
    float v10 = 0.0;
LABEL_52:
    *(float *)&double v3 = v13;
    [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v3)] forKey:@"maxPosError"];
    *(float *)&double v53 = v10;
    [v2 setObject:[NSNumber numberWithFloat:v53] forKey:@"uncAtMaxPosErrorUncMoreThan1"];
    *(float *)&double v54 = v12;
    [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v54)] forKey:@"maxPosErrorUncLessThan1"];
    *(float *)&double v55 = v11;
    [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v55)] forKey:@"maxPosErrorUncMoreThan1"];
    [v2 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v9) forKey:@"countPosErrorLessThan100UncMoreThan1"];
    [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8)] forKey:@"countPosError100to200UncMoreThan1"];
    [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7)] forKey:@"countPosErrorMoreThan200UncMoreThan1"];
    [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v6)] forKey:@"countPosErrorByUncMoreThan3"];
    [v2 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v5)] forKey:@"posTypeAtMaxPosError"];
    AnalyticsSendEventLazy();
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102318208);
    }
    uint64_t v51 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#LCStats,homeVisit,metrics,no home visit in last 24 hours", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102318208);
      }
      uint64_t v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void HomeVisitInfo::submitMetricsHomeVisit()", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
    }
  }
}

uint64_t sub_1012020AC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1012020B4(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1012020E4(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      float v12 = (char *)sub_10014F86C(v4, v11);
    }
    else {
      float v12 = 0;
    }
    double v14 = &v12[48 * v8];
    double v15 = &v12[48 * v11];
    size_t v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    float v17 = &v14[v16];
    int v19 = (char *)*a1;
    unsigned int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 3);
        long long v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t **sub_101202278(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (char *)operator new(0x68uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

id sub_10120234C(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v11 = 0;
    id v2 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:a1 allowPlaceholder:0 error:&v11];
    if (v11)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      double v3 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        id v4 = [v1 UTF8String];
        *(_DWORD *)long long buf = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        double v15 = "";
        __int16 v16 = 2082;
        id v17 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LSApplicationRecord returned error for bundleId\", \"bundleIdentifier\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
    }
    else
    {
      id v1 = [v2 URL];
      if (!v1) {
        return v1;
      }
      uint64_t Unique = _CFBundleCreateUnique();
      if (Unique)
      {
        uint64_t v6 = (const void *)Unique;
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        void v10[2] = sub_101202648;
        v10[3] = &unk_1022B2F50;
        v10[4] = Unique;
        id v1 = (id)sub_100028BB4(2, (uint64_t)v10);
        CFRelease(v6);
        return v1;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      int v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        double v15 = "";
        __int16 v16 = 2114;
        id v17 = v1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to create bundle for URL\", \"url\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
      }
      unint64_t v9 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        *(_DWORD *)long long buf = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        double v15 = "";
        __int16 v16 = 2114;
        id v17 = v1;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to create bundle for URL", "{\"msg%{public}.0s\":\"Failed to create bundle for URL\", \"url\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    return 0;
  }
  return v1;
}

BOOL sub_101202648(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = sub_1001BA55C();
  CFStringRef v5 = sub_100041DC4(v4, *(__CFBundle **)(a1 + 32), a2, 0);
  CFStringRef v6 = v5;
  if (v5) {
    CFRelease(v5);
  }
  return v6 != 0;
}

void sub_101202748(id a1)
{
  qword_102486408 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLAppMonitorSilo"];
}

uint64_t sub_101202808(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101206C94;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_102486418 != -1) {
    dispatch_once(&qword_102486418, block);
  }
  return qword_10248B390;
}

BOOL sub_1012029F0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 120);
  std::string::operator=((std::string *)(a2 + 8), (const std::string *)(a1 + 128));
  std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 152));
  std::string::operator=((std::string *)(a2 + 56), (const std::string *)(a1 + 176));
  std::string::operator=((std::string *)(a2 + 80), (const std::string *)(a1 + 200));
  *(_WORD *)(a2 + 104) = *(_WORD *)(a1 + 224);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  return v4 != 0;
}

BOOL sub_101202AA8(void *a1)
{
  uint64_t v12 = 0;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102318608);
  }
  id v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2114;
    id v18 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ClearClient isApplicationInstalledLocally determining if app is installed via LSApplicationWorkspace & LSApplicationExtensionRecord\", \"bundleID\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "applicationIsInstalled:", a1) & 1) != 0|| objc_msgSend(objc_alloc((Class)LSApplicationExtensionRecord), "initWithBundleIdentifier:error:", a1, &v12))
  {
    BOOL v3 = 1;
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    int v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2114;
      id v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ClearClient isApplicationInstalledLocally determining if app is installed via LSApplicationRecord\", \"bundleID\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    id v9 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:a1 allowPlaceholder:0 error:&v12];
    id v10 = [v9 localizedName];
    BOOL v3 = v10 != 0;
    if (!v10)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      uint64_t v11 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68289282;
        int v14 = 0;
        __int16 v15 = 2082;
        __int16 v16 = "";
        __int16 v17 = 2114;
        id v18 = a1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient isApplicationInstalledLocally LSApplicationRecord is not considered installed\", \"bundleID\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102318608);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289538;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2114;
    id v18 = a1;
    __int16 v19 = 1026;
    LODWORD(v20) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ClearClient isApplicationInstalledLocally\", \"bundleID\":%{public, location:escape_only}@, \"isAppInstalled?\":%{public}hhd}", buf, 0x22u);
  }
  if (v12)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    CFStringRef v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      id v6 = [a1 UTF8String];
      *(_DWORD *)long long buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      id v18 = v6;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LaunchServices did not find app in its database\", \"bundleId\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
  }
  return v3;
}

id sub_101202EB4(uint64_t a1, void *a2, uint64_t a3)
{
  if (sub_101202AA8(a2))
  {
    id v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
    return (id)v6(a3, 1);
  }
  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    double v8[2] = sub_10120924C;
    v8[3] = &unk_1023184F0;
    v8[4] = a3;
    return sub_101209180(a1, a2, (uint64_t)v8);
  }
}

uint64_t sub_101202FBC(void *a1)
{
  id v2 = [[objc_msgSend(sub_10001C058(a1), "compatibilityObject") applicationType];
  if (v2)
  {
    BOOL v3 = v2;
    if (CFEqual(v2, @"System"))
    {
      return 1;
    }
    else if (CFEqual(v3, @"User"))
    {
      return 2;
    }
    else if (CFEqual(v3, @"Internal"))
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102318648);
    }
    CFStringRef v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v8 = [a1 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning no app type available for %s", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102318648);
      }
      [a1 UTF8String];
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static CLAppMonitor_Type::AppType CLAppMonitor::getAppType(CFStringRef)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  return result;
}

void sub_101203254(uint64_t a1, void *a2)
{
  int v16 = -1;
  *(_OWORD *)__int16 v17 = 0u;
  *(_OWORD *)id v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  __int16 v23 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = [a2 countByEnumeratingWithState:&v12 objects:v30 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v13;
    *(void *)&long long v4 = 68289282;
    long long v10 = v4;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(a2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v6);
        if (objc_msgSend(v7, "bundleIdentifier", v10))
        {
          std::string::assign((std::string *)v17, (const std::string::value_type *)[objc_msgSend(objc_msgSend(v7, "bundleIdentifier"), "UTF8String") UTF8String]);
          std::string::operator=((std::string *)&v18[1], (const std::string *)v17);
          std::string::assign((std::string *)v20, (const std::string::value_type *)[objc_msgSend(objc_msgSend(objc_msgSend(v7, "bundleURL"), "path"), "UTF8String"));
          std::string::assign((std::string *)((char *)&v21 + 8), (const std::string::value_type *)[([[v7 correspondingApplicationRecord] executableURL] path] UTF8String]);
          *(_DWORD *)long long buf = 10;
          (*(void (**)(uint64_t, uint8_t *, int *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v16, 0, 0xFFFFFFFFLL, 0);
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102318608);
          }
          id v8 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = v10;
            int v25 = 0;
            __int16 v26 = 2082;
            int v27 = "";
            __int16 v28 = 2114;
            int v29 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"AppMonitor apps installed, but cannot get bundle info from appProxy\", \"AppProxy\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_102318608);
            }
          }
          id v9 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            *(_DWORD *)long long buf = v10;
            int v25 = 0;
            __int16 v26 = 2082;
            int v27 = "";
            __int16 v28 = 2114;
            int v29 = v7;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AppMonitor apps installed, but cannot get bundle info from appProxy", "{\"msg%{public}.0s\":\"AppMonitor apps installed, but cannot get bundle info from appProxy\", \"AppProxy\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        id v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      id v3 = [a2 countByEnumeratingWithState:&v12 objects:v30 count:16];
    }
    while (v3);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(*((void **)&v21 + 1));
  }
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
}

void sub_1012035C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_100783674((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10120361C(uint64_t a1, void *a2)
{
  int v16 = -1;
  *(_OWORD *)__int16 v17 = 0u;
  *(_OWORD *)id v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  __int16 v23 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = [a2 countByEnumeratingWithState:&v12 objects:v30 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v13;
    *(void *)&long long v5 = 68289282;
    long long v11 = v5;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(a2);
        }
        id v8 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v7);
        if (objc_msgSend(v8, "bundleIdentifier", v11))
        {
          std::string::assign((std::string *)v17, (const std::string::value_type *)[objc_msgSend(objc_msgSend(v8, "bundleIdentifier"), "UTF8String") UTF8String]);
          *(_DWORD *)long long buf = 11;
          (*(void (**)(uint64_t, uint8_t *, int *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v16, 0, 0xFFFFFFFFLL, 0);
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102318608);
          }
          id v9 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = v11;
            int v25 = 0;
            __int16 v26 = 2082;
            int v27 = "";
            __int16 v28 = 2114;
            int v29 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"AppMonitor apps uninstalled, but cannot get bundle info from appProxy\", \"AppProxy\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_102318608);
            }
          }
          long long v10 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            *(_DWORD *)long long buf = v11;
            int v25 = 0;
            __int16 v26 = 2082;
            int v27 = "";
            __int16 v28 = 2114;
            int v29 = v8;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AppMonitor apps uninstalled, but cannot get bundle info from appProxy", "{\"msg%{public}.0s\":\"AppMonitor apps uninstalled, but cannot get bundle info from appProxy\", \"AppProxy\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      id v4 = [a2 countByEnumeratingWithState:&v12 objects:v30 count:16];
    }
    while (v4);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(*((void **)&v21 + 1));
  }
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
}

void sub_101203930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_100783674((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_101203988(void *a1, void *a2)
{
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id result = [a2 countByEnumeratingWithState:&v26 objects:v40 count:16];
  id v6 = result;
  if (result)
  {
    uint64_t v7 = *(void *)v27;
    *(void *)&long long v5 = 68289794;
    long long v17 = v5;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v27 != v7) {
          objc_enumerationMutation(a2);
        }
        id v9 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v8);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          int v18 = -1;
          long long v19 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          __int16 v25 = 0;
          std::string::assign((std::string *)&v19, (const std::string::value_type *)[objc_msgSend(objc_msgSend(v9, "bundleIdentifier"), "UTF8String") UTF8String]);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102318608);
          }
          long long v10 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            id v11 = [[[v9 bundleIdentifier] UTF8String];
            unsigned int v12 = [v9 isHidden];
            unsigned int v13 = [v9 isLocked];
            *(_DWORD *)long long buf = v17;
            int v31 = 0;
            __int16 v32 = 2082;
            double v33 = "";
            __int16 v34 = 2082;
            id v35 = v11;
            __int16 v36 = 1026;
            unsigned int v37 = v12;
            __int16 v38 = 1026;
            unsigned int v39 = v13;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"AppProtection status changed\", \"subject\":%{public, location:escape_only}s, \"isHidden\":%{public}hhd, \"isLocked\":%{public}hhd}", buf, 0x28u);
          }
          unsigned int v14 = [v9 isHidden:v17];
          long long v15 = (void *)a1[40];
          if (v14)
          {
            [v15 addObject:[v9 bundleIdentifier]];
            char v16 = 1;
          }
          else
          {
            [v15 removeObject:[v9 bundleIdentifier]];
            char v16 = 0;
          }
          HIBYTE(v25) = v16;
          *(_DWORD *)long long buf = 12;
          (*(void (**)(void *, uint8_t *, int *, void, uint64_t, void))(*a1 + 152))(a1, buf, &v18, 0, 0xFFFFFFFFLL, 0);
          if (SHIBYTE(v24) < 0) {
            operator delete(*((void **)&v23 + 1));
          }
          if (SBYTE7(v23) < 0) {
            operator delete((void *)v22);
          }
          if (SHIBYTE(v21) < 0) {
            operator delete(*((void **)&v20 + 1));
          }
          if (SBYTE7(v20) < 0) {
            operator delete((void *)v19);
          }
        }
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id result = [a2 countByEnumeratingWithState:&v26 objects:v40 count:16];
      id v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_101203C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100783674((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101203CDC(uint64_t a1, void *a2, uint64_t a3)
{
  if ([a2 count])
  {
    uint64_t v19 = a3;
    id v20 = +[NSMutableArray array];
    id v6 = +[NSMutableArray array];
    id v7 = +[NSMutableArray array];
    id v8 = dispatch_group_create();
    id v9 = [*(id *)(a1 + 32) silo];
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v10 = [a2 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v12) {
            objc_enumerationMutation(a2);
          }
          unsigned int v14 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          dispatch_group_enter(v8);
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          v22[2] = sub_1012096B4;
          v22[3] = &unk_102318518;
          v22[4] = v9;
          v22[5] = v7;
          v22[6] = v14;
          void v22[7] = v6;
          v22[8] = v20;
          v22[9] = v8;
          sub_101209180(a1, v14, (uint64_t)v22);
        }
        id v11 = [a2 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v11);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101209890;
    block[3] = &unk_102318540;
    block[7] = v7;
    block[8] = v19;
    void block[4] = v8;
    void block[5] = v20;
    block[6] = v6;
    dispatch_group_notify(v8, (dispatch_queue_t)[v9 queue], block);
  }
  else
  {
    long long v15 = +[NSArray array];
    char v16 = +[NSArray array];
    long long v17 = +[NSArray array];
    int v18 = *(void (**)(uint64_t, NSArray *, NSArray *, NSArray *))(a3 + 16);
    v18(a3, v15, v16, v17);
  }
}

void sub_10120460C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak((id *)(v31 - 128));
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_101204658(uint64_t a1, void *a2)
{
  if ([objc_loadWeak((id *)(a1 + 40)) valid])
  {
    id v4 = [a2 userInfo];
    id v5 = [v4 objectForKeyedSubscript:NRPairedDeviceRegistryDevice];
    if (v5)
    {
      id v6 = *(void **)(a1 + 32);
      id v7 = [v5 pairingID];
      _[v6 handleUnpairFromDeviceWithPairingID:v7];
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      id v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        int v10 = 68289026;
        int v11 = 0;
        __int16 v12 = 2082;
        unsigned int v13 = "";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SuperRobin Got an unpair notification without an associated device\"}", (uint8_t *)&v10, 0x12u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
      }
      id v9 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        int v10 = 68289026;
        int v11 = 0;
        __int16 v12 = 2082;
        unsigned int v13 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SuperRobin Got an unpair notification without an associated device", "{\"msg%{public}.0s\":\"#SuperRobin Got an unpair notification without an associated device\"}", (uint8_t *)&v10, 0x12u);
      }
    }
  }
}

void sub_101204848(uint64_t a1, void *a2)
{
  if ([objc_loadWeak((id *)(a1 + 40)) valid])
  {
    id v4 = [a2 userInfo];
    id v5 = [v4 objectForKeyedSubscript:NRPairedDeviceRegistryDevice];
    if (v5)
    {
      id v6 = *(void **)(a1 + 32);
      id v7 = [v5 pairingID];
      [v6 handlePairToDeviceWithPairingID:v7];
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      id v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        int v10 = 68289026;
        int v11 = 0;
        __int16 v12 = 2082;
        unsigned int v13 = "";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SuperRobin Got a pair notification without an associated device\"}", (uint8_t *)&v10, 0x12u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
      }
      id v9 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        int v10 = 68289026;
        int v11 = 0;
        __int16 v12 = 2082;
        unsigned int v13 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SuperRobin Got a pair notification without an associated device", "{\"msg%{public}.0s\":\"#SuperRobin Got a pair notification without an associated device\"}", (uint8_t *)&v10, 0x12u);
      }
    }
  }
}

id sub_101204A38(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_101204AAC;
  _OWORD v4[3] = &unk_10229FEB0;
  id v2 = *(void **)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  void v4[5] = a2;
  return [v2 async:v4];
}

void sub_101204AAC(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 8))
  {
    id v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Got initial device list", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    id v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 40) count];
      uint64_t buf = 68289538;
      __int16 v16 = 2082;
      long long v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = "activity";
      __int16 v20 = 2050;
      id v21 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Got initial device list\", \"event\":%{public, location:escape_only}s, \"deviceCount\":%{public}ld}", (uint8_t *)&buf, 0x26u);
    }
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v5 = *(void **)(a1 + 40);
    id v6 = [v5 countByEnumeratingWithState:&v9 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v10;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v5);
          }
          [*(id *)(a1 + 32) handlePairToDeviceWithPairingID:[*(id *)(*((void *)&v9 + 1) + 8 * i) pairingID]];
        }
        id v6 = [v5 countByEnumeratingWithState:&v9 objects:v14 count:16];
      }
      while (v6);
    }
    os_activity_scope_leave(&state);
  }
}

void sub_101204CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_101205080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1012052AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_10120554C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,os_activity_scope_state_s state)
{
}

BOOL sub_10120556C(uint64_t a1, void *a2)
{
  if (objc_msgSend(objc_msgSend(a2, "domain"), "isEqualToString:", NSCocoaErrorDomain)
    && [a2 code] == (id)4097
    || (id v4 = [a2 domain], objc_msgSend(v4, "isEqualToString:", ACXErrorDomain))
    && [a2 code] == (id)43)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [*(id *)(a1 + 32) UTF8String];
      *(_DWORD *)uint64_t buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      long long v17 = "";
      __int16 v18 = 2082;
      id v19 = v6;
      __int16 v20 = 2114;
      id v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin AppCoundit failed to answer installation state in a retryable way\", \"clientKey\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_101205864;
    _OWORD v13[3] = &unk_1022F5FB0;
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 56);
    v13[4] = *(void *)(a1 + 48);
    v13[5] = v8;
    void v13[6] = v9;
    [v7 afterInterval:v13 async:10.0];
    return 1;
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    long long v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      long long v17 = "";
      __int16 v18 = 2114;
      id v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SuperRobin Got unexpected error from AppConduit\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
    }
    long long v12 = qword_102419538;
    BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
    if (result)
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      long long v17 = "";
      __int16 v18 = 2114;
      id v19 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SuperRobin Got unexpected error from AppConduit", "{\"msg%{public}.0s\":\"#SuperRobin Got unexpected error from AppConduit\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

void sub_101205864(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 8))
  {
    id v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Retrying installation state check after retryable failure", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &v5);

    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    id v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 40) UTF8String];
      *(_DWORD *)uint64_t buf = 68289538;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      __int16 v10 = 2082;
      long long v11 = "activity";
      __int16 v12 = 2082;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Retrying installation state check after retryable failure\", \"event\":%{public, location:escape_only}s, \"clientKey\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    [*(id *)(a1 + 32) isAppInstalled:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
    os_activity_scope_leave(&v5);
  }
}

void sub_1012059B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

id sub_1012059C8(uint64_t a1, char a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_101205A5C;
  _OWORD v5[3] = &unk_102318318;
  long long v6 = *(_OWORD *)(a1 + 40);
  uint64_t v7 = a3;
  char v11 = a2;
  long long v10 = *(_OWORD *)(a1 + 72);
  long long v8 = *(_OWORD *)(a1 + 56);
  uint64_t v9 = v3;
  return [v3 async:v5];
}

void sub_101205A5C(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 8))
  {
    os_activity_scope_enter(*(os_activity_t *)(a1 + 40), &state);
    if (!*(void *)(a1 + 48) || ((*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16))() & 1) == 0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
      }
      else
      {
        id v2 = *(void **)(a1 + 56);
        uint64_t v3 = *(void *)(a1 + 64);
        v5[0] = _NSConcreteStackBlock;
        v5[1] = 3221225472;
        void v5[2] = sub_101205B58;
        _OWORD v5[3] = &unk_1023182F0;
        void v5[4] = *(void *)(a1 + 72);
        long long v4 = *(_OWORD *)(a1 + 80);
        long long v6 = *(_OWORD *)(a1 + 32);
        long long v7 = v4;
        [v2 applicationIsInstalledOnAnyPairedDeviceWithCompanionBundleID:v3 completion:v5];
      }
    }
    os_activity_scope_leave(&state);
  }
}

void sub_101205B44(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 32));
  _Unwind_Resume(a1);
}

id sub_101205B58(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_101205BE0;
  _OWORD v5[3] = &unk_1023182C8;
  long long v6 = *(_OWORD *)(a1 + 40);
  uint64_t v7 = a3;
  long long v8 = *(_OWORD *)(a1 + 56);
  char v9 = a2;
  return [v3 async:v5];
}

void sub_101205BE0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 8))
  {
    os_activity_scope_enter(*(os_activity_t *)(a1 + 40), &v2);
    if (!*(void *)(a1 + 48) || ((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))() & 1) == 0) {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    os_activity_scope_leave(&v2);
  }
}

void sub_101205C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

BOOL sub_101206060(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) objectForKeyedSubscript:a2] != 0;
}

void sub_101206128(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 8))
  {
    os_activity_scope_state_s v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Apps uninstalled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &v6);

    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = [*(id *)(a1 + 48) count];
      *(_DWORD *)uint64_t buf = 68289794;
      int v8 = 0;
      __int16 v9 = 2082;
      long long v10 = "";
      __int16 v11 = 2082;
      __int16 v12 = "activity";
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      __int16 v15 = 2050;
      id v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Apps uninstalled\", \"event\":%{public, location:escape_only}s, \"pairingID\":%{public, location:escape_only}@, \"appCount\":%{public}ld}", buf, 0x30u);
    }
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "vendor"), "proxyForService:", @"CLClientManager"), "checkAppInstallationStatus");
    os_activity_scope_leave(&v6);
  }
}

void sub_10120629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_101206358(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 8))
  {
    os_activity_scope_state_s v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Apps updated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = [*(id *)(a1 + 48) count];
      uint64_t buf = 68289794;
      __int16 v17 = 2082;
      __int16 v18 = "";
      __int16 v19 = 2082;
      __int16 v20 = "activity";
      __int16 v21 = 2114;
      uint64_t v22 = v4;
      __int16 v23 = 2050;
      id v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Apps updated\", \"event\":%{public, location:escape_only}s, \"pairingID\":%{public, location:escape_only}@, \"appCount\":%{public}ld}", (uint8_t *)&buf, 0x30u);
    }
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    os_activity_scope_state_s v6 = *(void **)(a1 + 48);
    id v7 = [v6 countByEnumeratingWithState:&v10 objects:v15 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v6);
          }
          [*(id *)(a1 + 32) computeAllowableAuthorizationMaskForApplication:*(void *)(*((void *)&v10 + 1) + 8 * i) pairingID:*(void *)(a1 + 40)];
        }
        id v7 = [v6 countByEnumeratingWithState:&v10 objects:v15 count:16];
      }
      while (v7);
    }
    os_activity_scope_leave(&state);
  }
}

void sub_101206544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void sub_101206608(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 8))
  {
    os_activity_scope_state_s v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SuperRobin Apps installed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = [*(id *)(a1 + 48) count];
      uint64_t buf = 68289794;
      __int16 v29 = 2082;
      int v30 = "";
      __int16 v31 = 2082;
      __int16 v32 = "activity";
      __int16 v33 = 2114;
      uint64_t v34 = v4;
      __int16 v35 = 2050;
      id v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SuperRobin Apps installed\", \"event\":%{public, location:escape_only}s, \"pairingID\":%{public, location:escape_only}@, \"appCount\":%{public}ld}", (uint8_t *)&buf, 0x30u);
    }
    id v6 = +[NSMutableArray array];
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v7 = *(void **)(a1 + 48);
    id v8 = [v7 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v22;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v9) {
            objc_enumerationMutation(v7);
          }
          long long v11 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          id v12 = [v11 companionAppBundleID];
          if (!v12) {
            id v12 = [v11 bundleIdentifier];
          }
          [v6 addObject:v12];
        }
        id v8 = [v7 countByEnumeratingWithState:&v21 objects:v27 count:16];
      }
      while (v8);
    }
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "vendor"), "proxyForService:", @"CLClientManager"), "appsWithClientKeysAreInstalledOnAPairedDevice:", v6);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v13 = *(void **)(a1 + 48);
    id v14 = [v13 countByEnumeratingWithState:&v17 objects:v26 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v18;
      do
      {
        for (uint64_t j = 0; j != v14; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v18 != v15) {
            objc_enumerationMutation(v13);
          }
          [*(id *)(a1 + 32) computeAllowableAuthorizationMaskForApplication:*(void *)(*((void *)&v17 + 1) + 8 * (void)j) pairingID:*(void *)(a1 + 40)];
        }
        id v14 = [v13 countByEnumeratingWithState:&v17 objects:v26 count:16];
      }
      while (v14);
    }
    os_activity_scope_leave(&state);
  }
}

void sub_1012068D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state)
{
}

void sub_101206C94()
{
}

void sub_101206CE0()
{
}

void sub_101206D04(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_101207310(a1, "CLAppMonitor", a2);
  *(void *)uint64_t v2 = off_102318370;
  *(void *)(v2 + 112) = 0;
  *(_DWORD *)(v2 + 120) = -1;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_WORD *)(v2 + 224) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_DWORD *)(v2 + 264) = 1065353216;
  *(void *)(v2 + 320) = 0;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(void *)(v2 + 304) = 0;
  sub_10060F068();
}

void sub_1012072A4(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 296);
  *(void *)(v1 + 296) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_10120BFDC(v3);
  sub_100783674(v2);
  sub_101207A64(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101207310(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102318678;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1012073A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012073BC(uint64_t a1, _DWORD *a2, uint64_t a3, CLPairedDeviceAppMonitor *a4)
{
  CLProfilingIdentify();
  [a4->_deviceConnection silo].silo.assertInside;
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318628);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    id v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAppMonitor::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318628);
    }
    id v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      id v14 = "";
      __int16 v15 = 2082;
      id v16 = "activity";
      __int16 v17 = 2050;
      long long v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAppMonitor::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_101207C38(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_101207570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101207590(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102318648);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 9;
    uint64_t v3 = sub_1000A7F94(&v12);
    int v4 = *(_DWORD *)(v1 + 120);
    uint64_t v5 = (void *)(v1 + 128);
    if (*(char *)(v1 + 151) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    *(_DWORD *)uint64_t buf = 134219010;
    uint64_t v23 = 0x4014000000000000;
    __int16 v24 = 2080;
    long long v25 = v3;
    __int16 v26 = 1024;
    int v27 = 9;
    __int16 v28 = 1024;
    int v29 = v4;
    __int16 v30 = 2080;
    __int16 v31 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "App foregrounded for %.2fs.  Post %s (%d), pid, %d, bundleId, %s", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102318648);
    }
    int v11 = 9;
    id v7 = sub_1000A7F94(&v11);
    int v8 = *(_DWORD *)(v1 + 120);
    uint64_t v9 = (void *)(v1 + 128);
    if (*(char *)(v1 + 151) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    int v12 = 134219010;
    uint64_t v13 = 0x4014000000000000;
    __int16 v14 = 2080;
    __int16 v15 = v7;
    __int16 v16 = 1024;
    int v17 = 9;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 2080;
    long long v21 = v9;
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAppMonitor::CLAppMonitor(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(_DWORD *)uint64_t buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, void, uint64_t, void))(*(void *)v1 + 152))(v1, buf, v1 + 120, 0, 0xFFFFFFFFLL, 0);
}

id sub_101207824(uint64_t a1, void *a2)
{
  id v8 = objc_alloc_init(NSClassFromString(@"RBSProcessEverythingPredicate"));
  [a2 setPredicates:[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1)];
  [a2 setServiceClass:25];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100067788;
  v6[3] = &unk_102318448;
  uint64_t v6[4] = *(void *)(a1 + 32);
  [a2 setUpdateHandler:v6];
  id v4 = +[RBSProcessStateDescriptor descriptor];
  CFStringRef v7 = @"com.apple.frontboard.visibility";
  [v4 setEndowmentNamespaces:[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1)];
  return [a2 setStateDescriptor:v4];
}

id sub_101207964(uint64_t a1, uint64_t a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102318608);
  }
  id v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    id v8 = "";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invoking applicationStateChange handler\", \"StateChangeData\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x1Cu);
  }
  return [*(id *)(a1 + 32) onApplicationStateChange:a2];
}

uint64_t sub_101207A64(uint64_t a1)
{
  *(void *)a1 = off_102318678;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_101207AE8(uint64_t a1)
{
  *(void *)a1 = off_102318370;
  sub_101207D78(a1);
  uint64_t v2 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10120BFDC(a1 + 232);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }

  return sub_101207A64(a1);
}

void sub_101207BBC(uint64_t a1)
{
  sub_101207AE8(a1);

  operator delete();
}

CLPairedDeviceAppMonitor *sub_101207BF4(CLPairedDeviceAppMonitor *result)
{
  if (!result[4].super.isa)
  {
    uint64_t v1 = result;
    BOOL result = [[CLPairedDeviceAppMonitor alloc] initWithAppMonitor:v1 inUniverse:v1->_deviceConnection];
    v1[4].super.isa = (Class)result;
  }
  return result;
}

CLPairedDeviceAppMonitor *sub_101207C38(CLPairedDeviceAppMonitor *result, uint64_t a2, _DWORD *a3)
{
  if (!result[4].super.isa && (*a3 == 17 || *a3 == 11))
  {
    uint64_t v5 = result;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v7 = *a3 == 17;
      v8[0] = 68289282;
      v8[1] = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 1026;
      BOOL v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AppMonitor Init paired device AppMonitor\", \"isAfterUncleanShutDown\":%{public}hhd}", (uint8_t *)v8, 0x18u);
    }
    sub_101207BF4(v5);
    [*(id *)(*(void *)&v5[4]._valid + 16) unregister:*(void *)(*(void *)&v5[4]._valid + 8) forNotification:11];
    return (CLPairedDeviceAppMonitor *)[*(id *)(*(void *)&v5[4]._valid + 16) unregister:*(void *)(*(void *)&v5[4]._valid + 8) forNotification:17];
  }
  return result;
}

uint64_t sub_101207D78(uint64_t a1)
{
  *(unsigned char *)(a1 + 108) = 1;
  [*(id *)(a1 + 280) invalidate];

  *(void *)(a1 + 280) = 0;
  [*(id *)(a1 + 272) invalidate];

  *(void *)(a1 + 272) = 0;
  [*(id *)(a1 + 112) invalidate];

  *(void *)(a1 + 112) = 0;
  [*(id *)(a1 + 304) invalidate];

  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 320) = 0;
  [+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace") removeObserver:*(void *)(a1 + 312)];

  *(void *)(a1 + 312) = 0;
  [*(id *)(a1 + 288) invalidate];

  uint64_t result = *(void *)(a1 + 296);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v3();
  }
  return result;
}

void *sub_101207E74@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101207EF0(void *a1, uint64_t a2, int *a3)
{
  unsigned int v14 = (*(uint64_t (**)(void *, uint64_t, int *, void *))(*a1 + 96))(a1, a2, a3, &unk_102476FC0);
  int v6 = *a3;
  if (*a3 == 4)
  {
    BOOL v7 = (long long *)a1[31];
    if (!v7) {
      return v14;
    }
    do
    {
      sub_10120BF44(&__dst, v7 + 1);
      sub_1000A8C10((uint64_t)&v20, (uint64_t)&v31);
      int v19 = 4;
      (*(void (**)(void *, int *, int *, void, uint64_t, void))(*a1 + 152))(a1, &v19, &v20, 0, a2, 0);
      if (v28 < 0) {
        operator delete(__p);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      if (v24 < 0) {
        operator delete(v23);
      }
      if (v22 < 0) {
        operator delete(v21);
      }
      if (v37 < 0) {
        operator delete(v36);
      }
      if (SHIBYTE(v35) < 0) {
        operator delete(*((void **)&v34 + 1));
      }
      if (SBYTE7(v34) < 0) {
        operator delete((void *)v33);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(*((void **)&v31 + 1));
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(__dst);
      }
      BOOL v7 = *(long long **)v7;
    }
    while (v7);
    int v6 = *a3;
  }
  if (v6 == 12)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v8 = (void *)a1[40];
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v38 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v8);
          }
          BOOL v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          LODWORD(__dst) = -1;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          LOWORD(v36) = 0;
          std::string::assign((std::string *)&v30, (const std::string::value_type *)[v12 UTF8String]);
          BYTE1(v36) = 1;
          int v20 = 12;
          (*(void (**)(void *, int *, void **, void, uint64_t, void))(*a1 + 152))(a1, &v20, &__dst, 0, a2, 0);
          if (SHIBYTE(v35) < 0) {
            operator delete(*((void **)&v34 + 1));
          }
          if (SBYTE7(v34) < 0) {
            operator delete((void *)v33);
          }
          if (SHIBYTE(v32) < 0) {
            operator delete(*((void **)&v31 + 1));
          }
          if (SBYTE7(v31) < 0) {
            operator delete((void *)v30);
          }
        }
        id v9 = [v8 countByEnumeratingWithState:&v15 objects:v38 count:16];
      }
      while (v9);
    }
  }
  return v14;
}

void sub_1012081FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t sub_10120823C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102476FC0);
}

uint64_t sub_101208268(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1012082DC(void *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 7:
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      CFStringRef v4 = @"com.apple.LaunchServices.applicationRegistered";
      uint64_t v5 = (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_1012083B4;
      goto LABEL_5;
    case 8:
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      CFStringRef v4 = @"com.apple.LaunchServices.applicationUnregistered";
      uint64_t v5 = (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_1012085F0;
LABEL_5:
      CFNotificationCenterAddObserver(DistributedCenter, a1, v5, v4, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      break;
    case 0xA:
    case 0xB:
      [+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace") addObserver:a1[39]];
      break;
    case 0xC:
      sub_10120882C(a1);
      break;
    default:
      return 1;
  }
  return 1;
}

void sub_1012083B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318628);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAppMonitor::onApplicationRegistered", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318628);
    }
    __int16 v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      long long v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAppMonitor::onApplicationRegistered\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10120BFBC;
  _OWORD v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  void v13[6] = a3;
  void v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1012085D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012085F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318628);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAppMonitor::onApplicationUnregistered", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318628);
    }
    __int16 v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      long long v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAppMonitor::onApplicationUnregistered\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10120BFCC;
  _OWORD v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  void v13[6] = a3;
  void v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10120880C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10120882C(void *result)
{
  if (!result[38])
  {
    uint64_t v1 = result;
    result[40] = objc_alloc_init((Class)NSMutableSet);
    uint64_t result = [[+[APSubject subjectMonitorRegistry](APSubject, "subjectMonitorRegistry") addMonitor:v1[39]];
    v1[38] = result;
  }
  return result;
}

uint64_t sub_101208880(void *a1, int *a2)
{
  int v3 = *a2;
  if ((*a2 - 10) < 2)
  {
    [+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace") removeObserver:a1[39]];
  }
  else
  {
    if (v3 == 7)
    {
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      CFStringRef v5 = @"com.apple.LaunchServices.applicationRegistered";
      goto LABEL_7;
    }
    if (v3 == 8)
    {
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      CFStringRef v5 = @"com.apple.LaunchServices.applicationUnregistered";
LABEL_7:
      CFNotificationCenterRemoveObserver(DistributedCenter, a1, v5, 0);
    }
  }
  return 1;
}

uint64_t sub_101208904(uint64_t result)
{
  *(_DWORD *)uint64_t result = -1;
  if (*(char *)(result + 31) < 0)
  {
    **(unsigned char **)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
    *(unsigned char *)(result + 31) = 0;
  }
  if (*(char *)(result + 55) < 0)
  {
    **(unsigned char **)(result + 32) = 0;
    *(void *)(result + 40) = 0;
  }
  else
  {
    *(unsigned char *)(result + 32) = 0;
    *(unsigned char *)(result + 55) = 0;
  }
  *(_WORD *)(result + 104) = 0;
  return result;
}

void sub_101208954(uint64_t a1, int a2, int a3, int a4, CFDictionaryRef theDict)
{
  int v12 = -1;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)unsigned int v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)long long v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v18 = 0u;
  __int16 v19 = 0;
  sub_10013FA80((int)v11, theDict);
  int v6 = sub_1004D5E1C((uint64_t)v11);
  BOOL v10 = 0;
  sub_1000D29FC((uint64_t)v11, @"isPlaceholder", &v10);
  HIBYTE(v19) = v10;
  if (v6 >= 1)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (sub_1000A7CF8((uint64_t)v11, @"bundleIDs", (std::string *)v13))
      {
        buf[0] = 7;
        (*(void (**)(uint64_t, _DWORD *, int *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v12, 0, 0xFFFFFFFFLL, 0);
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102318648);
        }
        id v8 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          buf[0] = 67240192;
          buf[1] = i;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "cannot find bundle ID for %{public}d", (uint8_t *)buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102318648);
          }
          int v20 = 67240192;
          int v21 = i;
          id v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationRegistered(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v9);
          if (v9 != (char *)buf) {
            free(v9);
          }
        }
      }
    }
  }
  sub_10013F3C4(v11);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v14[0]) < 0) {
    operator delete(v13[0]);
  }
}

void sub_101208C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_10013F3C4((uint64_t *)va);
  sub_100783674((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_101208C8C(uint64_t a1, int a2, int a3, int a4, CFDictionaryRef theDict)
{
  sub_10013FA80((int)v17, theDict);
  int v6 = sub_1004D5E1C((uint64_t)v17);
  if (v6 >= 1)
  {
    for (int i = 0; i != v6; ++i)
    {
      memset(&v16, 0, sizeof(v16));
      if (sub_1000A7CF8((uint64_t)v17, @"bundleIDs", &v16))
      {
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v8 = &v16;
        }
        else {
          uint64_t v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
        }
        id v9 = +[NSString stringWithUTF8String:v8];
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3321888768;
        int v14[2] = sub_10120900C;
        void v14[3] = &unk_1023184B8;
        v14[4] = a1;
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000DC48C(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v16;
        }
        sub_101202EB4(a1, v9, (uint64_t)v14);
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v12 = &v16;
        }
        else {
          int v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
        }
        [*(id *)(a1 + 320) removeObject:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102318648);
        }
        uint64_t v10 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 67240192;
          int v21 = i;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "cannot find bundle ID for %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102318648);
          }
          int v18 = 67240192;
          int v19 = i;
          __int16 v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLAppMonitor::onApplicationUnregistered(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
  }
  return sub_10013F3C4(v17);
}

void sub_101208FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a31);
  _Unwind_Resume(a1);
}

void sub_10120900C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    int v4 = -1;
    *(_OWORD *)CFStringRef v5 = 0u;
    *(_OWORD *)int v6 = 0u;
    long long v7 = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v10 = 0u;
    __int16 v11 = 0;
    std::string::operator=((std::string *)v5, (const std::string *)(a1 + 40));
    int v3 = 8;
    (*(void (**)(uint64_t, int *, int *, void, uint64_t, void))(*(void *)v2 + 152))(v2, &v3, &v4, 0, 0xFFFFFFFFLL, 0);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v8[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(v6[1]);
    }
    if (SHIBYTE(v6[0]) < 0) {
      operator delete(v5[0]);
    }
  }
}

void sub_1012090F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100783674((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef sub_101209110(void *a1, const __CFString *a2)
{
  CFURLRef v3 = (const __CFURL *)sub_1001BEA24(a1);
  if (!v3) {
    return 0;
  }
  int v4 = CFBundleCreate(kCFAllocatorDefault, v3);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(v4, a2);
  CFTypeRef v7 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey) {
    CFRetain(ValueForInfoDictionaryKey);
  }
  CFRelease(v5);
  return v7;
}

id sub_101209180(uint64_t a1, void *a2, uint64_t a3)
{
  int v4 = *(void **)(a1 + 288);
  if (v4)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_101209264;
    v10[3] = &unk_1022B7C48;
    v10[4] = a2;
    void v10[5] = a3;
    return [v4 isAppInstalled:a2 completion:v10];
  }
  else
  {
    BOOL v6 = sub_101202AA8(a2);
    CFTypeRef v7 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
    if (v6)
    {
      uint64_t v8 = a3;
      uint64_t v9 = 2;
    }
    else
    {
      uint64_t v8 = a3;
      uint64_t v9 = 1;
    }
    return (id)v7(v8, v9);
  }
}

uint64_t sub_10120924C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_101209264(uint64_t a1, int a2)
{
  BOOL v4 = sub_101202AA8(*(void **)(a1 + 32));
  CFStringRef v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 16);
  uint64_t v6 = 4;
  if (!a2) {
    uint64_t v6 = 1;
  }
  uint64_t v7 = 2;
  if (a2) {
    uint64_t v7 = 6;
  }
  if (v4) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v9 = *(void *)(a1 + 40);

  return v5(v9, v8);
}

BOOL sub_1012092D0(uint64_t a1)
{
  return [objc_alloc((Class)LSApplicationExtensionRecord) initWithBundleIdentifier:a1 error:0] != 0;
}

id sub_101209314(void *a1)
{
  id result = [a1 length];
  if (result)
  {
    id v3 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:a1 allowPlaceholder:0 error:0];
    return _[v3 isWebApp];
  }
  return result;
}

id sub_101209378(void *a1)
{
  id result = sub_1001BEA24(a1);
  if (result)
  {
    return [result path];
  }
  return result;
}

__CFBundle *sub_1012093AC(void *a1)
{
  id result = sub_101209404(a1);
  if (result)
  {
    uint64_t v2 = result;
    CFURLRef v3 = CFBundleCopyBundleURL(result);
    CFRelease(v2);
    return (__CFBundle *)CFAutorelease(v3);
  }
  return result;
}

CFBundleRef sub_101209404(void *a1)
{
  sub_100103240();
  if ((sub_10010145C() & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    CFStringRef v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      unsigned int v14 = "";
      __int16 v15 = 2082;
      id v16 = [a1 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Attempted to locate companion placeholder bundle on a non-watch device\", \"bundleId\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
    }
    uint64_t v6 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      id v7 = [a1 UTF8String];
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      unsigned int v14 = "";
      __int16 v15 = 2082;
      id v16 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempted to locate companion placeholder bundle on a non-watch device", "{\"msg%{public}.0s\":\"Attempted to locate companion placeholder bundle on a non-watch device\", \"bundleId\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    return 0;
  }
  uint64_t v10 = 0;
  id v2 = [objc_alloc((Class)LSApplicationExtensionRecord) initWithBundleIdentifier:a1 error:&v10];
  if (v10)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    CFURLRef v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      id v4 = [a1 UTF8String];
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      unsigned int v14 = "";
      __int16 v15 = 2082;
      id v16 = v4;
      __int16 v17 = 2114;
      uint64_t v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LSApplicationExtensionRecord returned an error for bundleId\", \"bundleId\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    return 0;
  }
  if (v2) {
    id v9 = [v2 containingBundleRecord];
  }
  else {
    id v9 = sub_10001C058(a1);
  }
  return CFBundleCreate(kCFAllocatorDefault, (CFURLRef)[(NSURL *)[v9 bundleContainerURL] URLByAppendingPathComponent:@"com.apple.mobileinstallation.companion_placeholder"]);
}

void sub_1012096B4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) assertInside];
  if (a2 == 4)
  {
    id v4 = *(void **)(a1 + 40);
LABEL_7:
    [v4 addObject:*(void *)(a1 + 48)];
    goto LABEL_8;
  }
  if ((a2 & 6) != 0)
  {
    id v4 = *(void **)(a1 + 56);
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    id v4 = *(void **)(a1 + 64);
    goto LABEL_7;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102318608);
  }
  CFStringRef v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    int v9 = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2114;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AppMonitor got invalid installation status while checking applications\", \"app\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
  }
  id v7 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    int v9 = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2114;
    uint64_t v14 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AppMonitor got invalid installation status while checking applications", "{\"msg%{public}.0s\":\"#AppMonitor got invalid installation status while checking applications\", \"app\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
  }
LABEL_8:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

uint64_t sub_101209890(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[8] + 16))(a1[8], a1[5], a1[6], a1[7]);
}

BOOL sub_1012098A8(uint64_t **a1)
{
  sub_100103240();
  if (!sub_10010145C()) {
    goto LABEL_11;
  }
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_11:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102318608);
      }
      uint64_t v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Either not a watch platform or bundleId is empty", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
        id v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLAppMonitor::isStandAloneWatchApp(const std::string &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      return 0;
    }
    id v2 = *a1;
  }
  else
  {
    id v2 = (uint64_t *)a1;
    if (!*((unsigned char *)a1 + 23)) {
      goto LABEL_11;
    }
  }
  CFURLRef v3 = +[NSString stringWithUTF8String:v2];
  CFTypeRef v4 = sub_101209110(v3, @"WKWatchOnly");
  CFTypeRef v5 = sub_101209110(v3, @"WKRunsIndependentlyOfCompanionApp");
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      BOOL v7 = CFBooleanGetValue((CFBooleanRef)v4) != 0;
      if (!v5) {
        goto LABEL_22;
      }
LABEL_19:
      CFTypeID v11 = CFGetTypeID(v5);
      if (v11 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v5)) {
        BOOL v7 = 1;
      }
      goto LABEL_22;
    }
  }
  BOOL v7 = 0;
  if (v5) {
    goto LABEL_19;
  }
LABEL_22:
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v7)
  {
    BOOL v9 = 1;
  }
  else
  {
    id v12 = objc_alloc((Class)LSApplicationExtensionRecord);
    if (*((char *)a1 + 23) >= 0) {
      __int16 v13 = (uint64_t *)a1;
    }
    else {
      __int16 v13 = *a1;
    }
    BOOL v9 = [[[v12 initWithBundleIdentifier:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13) error:0] containingBundleRecord] developerType] == 1;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102318608);
  }
  uint64_t v14 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0) {
      __int16 v15 = (uint64_t *)a1;
    }
    else {
      __int16 v15 = *a1;
    }
    *(_DWORD *)uint64_t buf = 68289538;
    int v18 = 0;
    __int16 v19 = 2082;
    int v20 = "";
    __int16 v21 = 2082;
    __int16 v22 = v15;
    __int16 v23 = 1026;
    BOOL v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"stand alone watch app\", \"bundleId\":%{public, location:escape_only}s, \"status\":%{public}hhd}", buf, 0x22u);
  }
  return v9;
}

CFTypeRef sub_101209C38(void *a1)
{
  id v2 = sub_1001BEA24(a1);
  if (!v2 || (CFStringRef v3 = (const __CFString *)[v2 path]) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102318608);
    }
    BOOL v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 68289282;
      v10[1] = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning CLAppMonitor bundlePath from bundleId is nil\", \"BundleId\":%{public, location:escape_only}@}", (uint8_t *)v10, 0x1Cu);
    }
    return 0;
  }
  CFURLRef v4 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v3, kCFURLPOSIXPathStyle, 0);
  if (!v4) {
    return 0;
  }
  CFURLRef v5 = v4;
  uint64_t Unique = _CFBundleCreateUnique();
  if (!Unique) {
    sub_101AA7884();
  }
  BOOL v7 = (const void *)Unique;
  CFRelease(v5);

  return CFAutorelease(v7);
}

__CFBundle *sub_101209DBC(void *a1)
{
  id result = (__CFBundle *)sub_101209C38(a1);
  if (result)
  {
    return sub_101209DF0(result);
  }
  return result;
}

CFBooleanRef sub_101209DF0(__CFBundle *a1)
{
  CFBooleanRef ValueForInfoDictionaryKey = (const __CFBoolean *)CFBundleGetValueForInfoDictionaryKey(a1, @"NSLocationDefaultAccuracyReduced");
  CFBooleanRef v3 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey)
  {
    CFTypeID v4 = CFGetTypeID(ValueForInfoDictionaryKey);
    if (v4 == CFBooleanGetTypeID()) {
      CFBooleanRef v3 = (const __CFBoolean *)(CFBooleanGetValue(v3) != 0);
    }
    else {
      CFBooleanRef v3 = 0;
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102318608);
  }
  CFURLRef v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289538;
    v7[1] = 0;
    __int16 v8 = 2082;
    BOOL v9 = "";
    __int16 v10 = 2114;
    __int16 v11 = a1;
    __int16 v12 = 1026;
    int v13 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DefaultAccuracyReduced key from Info.plist\", \"For Bundle\":%{public, location:escape_only}@, \"Value\":%{public}hhd}", (uint8_t *)v7, 0x22u);
  }
  return v3;
}

id sub_101209F38(__CFBundle *a1, void *a2)
{
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  id v4 = +[NSMutableDictionary dictionary];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (int i = 0; i != v6; int i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(a2);
        }
        uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        if ([(__CFDictionary *)InfoDictionary objectForKeyedSubscript:v9]) {
          [v4 setObject:v10 forKeyedSubscript:v9];
        }
      }
      id v6 = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
  return v4;
}

void sub_10120A068(id a1)
{
  qword_102486420 = (uint64_t)[objc_alloc((Class)NSMutableSet) initWithObjects:@"NSLocationAlwaysAndWhenInUseUsageDescription", @"NSLocationWhenInUseUsageDescription", @"NSLocationAuthorizationPurposeDescriptionDictionary", @"NSLocationAlwaysUsageDescription", 0];
}

CFBundleRef sub_10120A0D4(uint64_t a1)
{
  sub_100103240();
  if (!sub_10010145C() || (sub_1000A84C8(a1), !*(unsigned char *)(a1 + 177)))
  {
    sub_1000A84C8(a1);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 127);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a1 + 112);
    }
    if (!v6)
    {
      long long v12 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
      {
        if (!*(void *)(a1 + 56)) {
          return 0;
        }
        long long v12 = (void *)*v12;
      }
      else if (!*(unsigned char *)(a1 + 71))
      {
        return 0;
      }
      CFStringRef v11 = +[NSString stringWithUTF8String:v12];
      goto LABEL_23;
    }
    sub_1000A84C8(a1);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v8 = a1 + 104;
    uint64_t v7 = v9;
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v7;
    }
    id v4 = +[NSString stringWithUTF8String:v10];
    goto LABEL_15;
  }
  sub_1000A84C8(a1);
  BOOL v2 = sub_1012098A8((uint64_t **)(a1 + 128));
  sub_1000A84C8(a1);
  if (*(char *)(a1 + 151) >= 0) {
    uint64_t v3 = a1 + 128;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 128);
  }
  id v4 = +[NSString stringWithUTF8String:v3];
  if (v2)
  {
LABEL_15:
    id v5 = sub_1001BEA24(v4);
    if (!v5) {
      return 0;
    }
    goto LABEL_16;
  }
  id v5 = sub_1012093AC(v4);
LABEL_16:
  CFStringRef v11 = (const __CFString *)[v5 path];
LABEL_23:
  if (v11)
  {
    CFURLRef v13 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v11, kCFURLPOSIXPathStyle, 0);
    if (v13)
    {
      CFURLRef v14 = v13;
      CFBundleRef v15 = CFBundleCreate(kCFAllocatorDefault, v13);
      CFRelease(v14);
      return v15;
    }
  }
  return 0;
}

uint64_t sub_10120A238(void *a1, void *a2, const __CFString *a3, void *a4)
{
  sub_100103240();
  int v8 = sub_10010145C();
  if (a4 && v8)
  {
    sub_100134750(&__p, (char *)[a4 UTF8String]);
    BOOL v9 = sub_1012098A8((uint64_t **)&__p);
    BOOL v10 = v9;
    if (SBYTE3(v24) < 0)
    {
      operator delete(__p);
      if (v10)
      {
LABEL_5:
        id v11 = sub_1001BEA24(a4);
        if (v11)
        {
          CFStringRef v12 = (const __CFString *)[v11 path];
          goto LABEL_15;
        }
LABEL_18:
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102318608);
        }
        __int16 v17 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          std::string __p = (void *)68290050;
          __int16 v21 = 2082;
          __int16 v22 = "";
          __int16 v23 = 2114;
          BOOL v24 = a1;
          __int16 v25 = 2114;
          char v26 = a2;
          __int16 v27 = 2114;
          CFStringRef v28 = a3;
          __int16 v29 = 2114;
          long long v30 = a4;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The given client components did not resolve to a bundle\", \"platformSpecificBundleId\":%{public, location:escape_only}@, \"bundleId\":%{public, location:escape_only}@, \"bundlePath\":%{public, location:escape_only}@, \"pluginBundleId\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x3Au);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102318608);
          }
        }
        int v18 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          std::string __p = (void *)68290050;
          __int16 v21 = 2082;
          __int16 v22 = "";
          __int16 v23 = 2114;
          BOOL v24 = a1;
          __int16 v25 = 2114;
          char v26 = a2;
          __int16 v27 = 2114;
          CFStringRef v28 = a3;
          __int16 v29 = 2114;
          long long v30 = a4;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The given client components did not resolve to a bundle", "{\"msg%{public}.0s\":\"The given client components did not resolve to a bundle\", \"platformSpecificBundleId\":%{public, location:escape_only}@, \"bundleId\":%{public, location:escape_only}@, \"bundlePath\":%{public, location:escape_only}@, \"pluginBundleId\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x3Au);
        }
        return 0;
      }
    }
    else if (v9)
    {
      goto LABEL_5;
    }
    CFStringRef v12 = (const __CFString *)[(__CFBundle *)sub_1012093AC(a4) path];
  }
  else
  {
    if (a1)
    {
      CFURLRef v13 = a1;
    }
    else
    {
      CFStringRef v12 = a3;
      if (!a2) {
        goto LABEL_15;
      }
      CFURLRef v13 = a2;
    }
    id v14 = sub_1001BEA24(v13);
    if (!v14) {
      goto LABEL_18;
    }
    CFStringRef v12 = (const __CFString *)[v14 path];
  }
LABEL_15:
  if (!v12) {
    goto LABEL_18;
  }
  CFURLRef v15 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v12, kCFURLPOSIXPathStyle, 0);
  if (!v15) {
    return 0;
  }
  uint64_t Unique = _CFBundleCreateUnique();
  CFRelease(v15);
  return Unique;
}

void sub_10120A4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120A518()
{
}

void sub_10120A5D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10120A610(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1023187C8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    CFStringRef v12 = a3;
  }
  else {
    CFStringRef v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_10120A6F4(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        BOOL v9 = (uint64_t *)v4;
      }
      else {
        BOOL v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102318628);
      }
      BOOL v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        id v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102318628);
        }
        CFStringRef v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          CFStringRef v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        CFURLRef v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::removeClient(int) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10120A984(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10120AA38(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10120AA80(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10120AAC8(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

BOOL sub_10120AB10(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          __int16 v23 = (uint64_t *)v17;
        }
        else {
          __int16 v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          CFStringRef v28 = (uint64_t *)v24;
        }
        else {
          CFStringRef v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)float v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        *(_DWORD *)uint64_t buf = -1;
        *(_OWORD *)&uint8_t buf[8] = 0u;
        *(_OWORD *)int v45 = 0u;
        long long v46 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        __int16 v50 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_10120C2CC();
        }
        if (SHIBYTE(v49) < 0) {
          operator delete(*((void **)&v48 + 1));
        }
        if (SBYTE7(v48) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v46) < 0) {
          operator delete(v45[1]);
        }
        if (SHIBYTE(v45[0]) < 0) {
          operator delete(*(void **)&buf[8]);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)float v41 = a1 + 64;
        char v29 = byte_102476FC1;
        int v38 = v16;
        *(void *)uint64_t buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        long long v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        long long v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318628);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    CFURLRef v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      CFURLRef v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318628);
    }
    id v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      id v36 = (void *)*v36;
    }
    *(_DWORD *)float v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = v40;
    char v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_10120B020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100783674((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10120B040(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318628);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102318628);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10120B2C4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102318628);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  CFStringRef v28 = __p;
                }
                else {
                  CFStringRef v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102318628);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  long long v30 = buf;
                }
                else {
                  long long v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10120B698(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  *(_DWORD *)a3 = *(_DWORD *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v12 + 56));
  std::string::operator=((std::string *)(a3 + 80), (const std::string *)(v12 + 80));
  *(_WORD *)(a3 + 104) = *(_WORD *)(v12 + 104);
  return 1;
}

uint64_t sub_10120B74C(uint64_t a1, int *a2, uint64_t a3)
{
  sub_10120C05C(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_10120B7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120B7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = -1;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  __int16 v11 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  if (SHIBYTE(v6[0]) < 0) {
    operator delete(v5[0]);
  }
}

void sub_10120B8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10120B8CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318628);
    }
    BOOL v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102318628);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::listClients() [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318628);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102318628);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::listClients() [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102318628);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              __int16 v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                __int16 v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102318628);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData>::listClients() [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_10120BE7C(uint64_t a1)
{
  sub_10120C25C(a1);

  operator delete();
}

void sub_10120BEB4(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10120BEE4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10120BF14(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_10120BF44(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_1000A8C10((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10120BFA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120BFBC(uint64_t a1, int a2, int a3, int a4)
{
}

uint64_t sub_10120BFCC(uint64_t a1, int a2, int a3, int a4)
{
  return sub_101208C8C(*(void *)(a1 + 32), a2, a3, a4, *(CFDictionaryRef *)(a1 + 64));
}

uint64_t sub_10120BFDC(uint64_t a1)
{
  sub_10120C018(a1, *(void **)(a1 + 16));
  BOOL v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10120C018(uint64_t a1, void *a2)
{
  if (a2)
  {
    BOOL v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10017FC38((uint64_t)(v2 + 2));
      operator delete(v2);
      BOOL v2 = v3;
    }
    while (v3);
  }
}

void *sub_10120C05C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x88uLL);
  BOOL result = sub_10120C0B8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10120C0A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10120C0B8(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102318758;
  sub_1000A8C10((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10120C100(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10120C114(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102318758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10120C134(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102318758;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10120C188(uint64_t a1)
{
  sub_10120C1B4((uint64_t)&v1, a1 + 24);
}

void sub_10120C1B4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void sub_10120C22C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_10120C25C(uint64_t a1)
{
  *(void *)a1 = off_1023187C8;
  BOOL v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *BOOL v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_10120C2CC()
{
}

void sub_10120C37C()
{
}

uint64_t sub_10120C3A0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 103) < 0) {
      operator delete(*(void **)(v1 + 80));
    }
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void *sub_10120C434(void *result, uint64_t a2)
{
  *BOOL result = 26;
  result[1] = a2;
  result[6] = 0;
  result[7] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = result + 6;
  return result;
}

uint64_t sub_10120C454(uint64_t a1)
{
  sub_10120C49C(a1);
  BOOL v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    _Block_release(v2);
    *(void *)(a1 + 16) = 0;
  }
  sub_1000F5BB0(a1 + 40, *(void **)(a1 + 48));
  return a1;
}

void sub_10120C49C(uint64_t a1)
{
  BOOL v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 32));
    *(void *)(a1 + 32) = 0;
  }
}

void sub_10120C4D8(uint64_t a1, void *aBlock, double a3)
{
  *(double *)(a1 + 24) = a3;
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5) {
    _Block_release(v5);
  }
  *(void *)(a1 + 16) = _Block_copy(aBlock);
  sub_10120C49C(a1);
  uint64_t v7 = *(void **)(a1 + 48);
  long long v6 = (void *)(a1 + 48);
  sub_1000F5BB0((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *long long v6 = 0;
  v6[1] = 0;
}

void sub_10120C534(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v18 = a3;
  unint64_t v19 = a2;
  uint64_t v5 = *(void **)(a1 + 48);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = a1 + 48;
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      int v9 = v5;
    }
    else {
      int v9 = v5 + 1;
    }
    if (v8) {
      uint64_t v6 = (uint64_t)v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 != a1 + 48 && *(void *)(v6 + 32) <= a2)
  {
    uint64_t v17 = v6 + 40;
    sub_10109B6D4(v6 + 40, &v18);
    *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
    sub_10109B6C8(v17, (double *)buf);
  }
  else
  {
LABEL_12:
    if (a3)
    {
      int v12 = (uint64_t **)(a1 + 40);
      *(void *)uint64_t buf = &v19;
      int v13 = sub_10120D398((uint64_t **)(a1 + 40), &v19, (uint64_t)&unk_101D0B290, (uint64_t **)buf) + 5;
      *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
      sub_10109B6BC((uint64_t)v13, (double *)buf);
      *(void *)uint64_t buf = &v19;
      uint64_t v14 = sub_10120D398(v12, &v19, (uint64_t)&unk_101D0B290, (uint64_t **)buf) + 5;
      *(void *)uint64_t buf = CFAbsoluteTimeGetCurrent();
      sub_10109B6C8((uint64_t)v14, (double *)buf);
      *(void *)uint64_t buf = &v19;
      int v15 = sub_10120D398(v12, &v19, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
      sub_10109B6D4((uint64_t)(v15 + 5), &v18);
      *(void *)uint64_t buf = &v19;
      BOOL v16 = sub_10120D398(v12, &v19, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
      sub_10109B6F4((uint64_t)(v16 + 5), *(void *)a1);
    }
    else
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102318840);
      }
      long long v10 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(void *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to log impact due to cancel reason not containing kImpactStart 0x%llu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_102318840);
        }
        int v20 = 134217984;
        uint64_t v21 = v18;
        __int16 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallImpactEventTracker::trackCancelReason(uint64_t, CMSPUFall_Types::FallCancelReason)", "%s\n", v11);
        if (v11 != buf) {
          free(v11);
        }
      }
    }
  }
  sub_10120C828(a1);
}

void sub_10120C828(uint64_t a1)
{
  sub_10120C49C(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  if (v3 != (uint64_t *)(a1 + 48))
  {
    do
    {
      if (Current <= sub_100C8D894((uint64_t)(v3 + 5)) + *(double *)(a1 + 24))
      {
        uint64_t v6 = (uint64_t *)v3[1];
        if (v6)
        {
          do
          {
            uint64_t v5 = v6;
            uint64_t v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v5 = (uint64_t *)v3[2];
            BOOL v7 = *v5 == (void)v3;
            uint64_t v3 = v5;
          }
          while (!v7);
        }
      }
      else
      {
        uint64_t v4 = *(void *)(a1 + 16);
        if (v4) {
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(v4 + 16))(v4, v3[4], v3 + 5);
        }
        uint64_t v5 = sub_1000F0A30((uint64_t **)(a1 + 40), v3);
        operator delete(v3);
      }
      uint64_t v3 = v5;
    }
    while (v5 != (uint64_t *)(a1 + 48));
  }

  sub_10120D090(a1, Current);
}

void sub_10120C924(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 19);
  uint64_t v5 = *(void **)(a1 + 48);
  uint64_t v3 = (void *)(a1 + 48);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  BOOL v7 = v3;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= v2;
    if (v8 >= v2) {
      long long v10 = v4;
    }
    else {
      long long v10 = v4 + 1;
    }
    if (v9) {
      BOOL v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v3 && v2 >= v7[4])
  {
    uint64_t v12 = (uint64_t)(v7 + 5);
    float v13 = sub_100A51C78((float *)(a2 + 27));
    sub_10109B6FC(v12, v13);
    float v14 = *(float *)(a2 + 31);
    if (v14 >= 0.0) {
      float v15 = *(float *)(a2 + 31);
    }
    else {
      float v15 = -v14;
    }
    float v16 = *(float *)(a2 + 27);
    if (v16 >= 0.0) {
      float v17 = *(float *)(a2 + 27);
    }
    else {
      float v17 = -v16;
    }
    if (v15 <= v17)
    {
      if (v16 < 0.0) {
        float v14 = -v16;
      }
      else {
        float v14 = *(float *)(a2 + 27);
      }
    }
    else if (v14 < 0.0)
    {
      float v14 = -v14;
    }
    sub_10109B784(v12, v14);
    float v18 = *(float *)(a2 + 39);
    if (v18 >= 0.0) {
      float v19 = *(float *)(a2 + 39);
    }
    else {
      float v19 = -v18;
    }
    float v20 = *(float *)(a2 + 35);
    if (v20 >= 0.0) {
      float v21 = *(float *)(a2 + 35);
    }
    else {
      float v21 = -v20;
    }
    if (v19 <= v21)
    {
      if (v20 < 0.0) {
        float v18 = -v20;
      }
      else {
        float v18 = *(float *)(a2 + 35);
      }
    }
    else if (v18 < 0.0)
    {
      float v18 = -v18;
    }
    sub_10109B7B4(v12, v18);
    float v22 = *(float *)(a2 + 47);
    if (v22 >= 0.0) {
      float v23 = *(float *)(a2 + 47);
    }
    else {
      float v23 = -v22;
    }
    float v24 = *(float *)(a2 + 43);
    if (v24 >= 0.0) {
      float v25 = *(float *)(a2 + 43);
    }
    else {
      float v25 = -v24;
    }
    if (v23 <= v25)
    {
      if (v24 < 0.0) {
        float v22 = -v24;
      }
      else {
        float v22 = *(float *)(a2 + 43);
      }
    }
    else if (v22 < 0.0)
    {
      float v22 = -v22;
    }
    sub_10109B7E4(v12, v22);
    float v26 = *(float *)(a2 + 51);
    sub_10109B740(v12, v26);
  }
  else
  {
LABEL_12:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_102318840);
    }
    __int16 v11 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      unint64_t v29 = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Could not find impact at time %llu, unable to set impact features", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102318840);
      }
      BOOL v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallImpactEventTracker::updateImpactFeatures(const CLFall_Types::ImpactEvent &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
}

void sub_10120CC38(uint64_t a1, unint64_t a2, char a3)
{
  char v13 = a3;
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v4 = (void *)(a1 + 48);
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  BOOL v7 = v4;
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      long long v10 = v5;
    }
    else {
      long long v10 = v5 + 1;
    }
    if (v9) {
      BOOL v7 = v5;
    }
    uint64_t v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v4 && v7[4] <= a2)
  {
    sub_10109B6E8((uint64_t)(v7 + 5), &v13);
  }
  else
  {
LABEL_12:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_102318840);
    }
    __int16 v11 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      unint64_t v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Could not find impact at time %llu, unable to set user response", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102318840);
      }
      int v14 = 134217984;
      unint64_t v15 = a2;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallImpactEventTracker::updateUserResponse(const uint64_t, const CMSPUFall_Types::FallResponse)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_10120CE34(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 48);
  uint64_t v3 = (void *)(a1 + 48);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  BOOL v7 = v3;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= v2;
    if (v8 >= v2) {
      long long v10 = v4;
    }
    else {
      long long v10 = v4 + 1;
    }
    if (v9) {
      BOOL v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 != v3 && v2 >= v7[4])
  {
    uint64_t v12 = (uint64_t)(v7 + 5);
    sub_10109B814((uint64_t)(v7 + 5), *(float *)(a2 + 52));
    sub_10109B81C(v12, *(void *)(a2 + 16));
    sub_10109B824(v12, *(void *)(a2 + 36));
    uint64_t v13 = *(void *)(a2 + 44);
    sub_10109B82C(v12, v13);
  }
  else
  {
LABEL_12:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_102318840);
    }
    __int16 v11 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      unint64_t v16 = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Could not find impact at time %llu, unable to set fall distance", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102318840);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallImpactEventTracker::updateFallDistance(const CLFall_Types::FallDistance &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_10120D090(uint64_t a1, double a2)
{
  if (*(void *)(a1 + 56) && *(double *)(a1 + 24) > 0.0)
  {
    uint64_t v3 = (void *)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 48);
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        uint64_t v4 = (void *)v4[1];
      }
      while (v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (void *)v3[2];
        BOOL v6 = *v5 == (void)v3;
        uint64_t v3 = v5;
      }
      while (v6);
    }
    double v7 = sub_100C8D894((uint64_t)(v5 + 5)) + *(double *)(a1 + 24) - a2;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_102318840);
    }
    double v8 = fmax(v7, 1.0);
    BOOL v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Rescheduling impact reporting in %.2lf seconds", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_102318840);
      }
      int v15 = 134217984;
      double v16 = v8;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactEventTracker::rescheduleFlushTimer(CFAbsoluteTime)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    long long v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 2uLL, 0, (dispatch_queue_t)[objc_msgSend(*(id *)(a1 + 8), "silo") queue]);
    *(void *)(a1 + 32) = v10;
    dispatch_time_t v11 = dispatch_time(0x8000000000000000, (unint64_t)(v8 * 1000000000.0));
    dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0);
    uint64_t v12 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10120D360;
    handler[3] = &unk_1022A3020;
    handler[4] = a1;
    dispatch_source_set_event_handler(v12, handler);
    dispatch_resume(*(dispatch_object_t *)(a1 + 32));
  }
}

uint64_t sub_10120D360(uint64_t a1)
{
  return sub_10120C828(*(void *)(a1 + 32));
}

void sub_10120D368(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t **sub_10120D398(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  double v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        double v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        double v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    dispatch_time_t v11 = (char *)operator new(0x88uLL);
    uint64_t v12 = **a4;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *((void *)v11 + 13) = 0;
    *((void *)v11 + 14) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 8) = 0;
    *((void *)v11 + 4) = v12;
    *((void *)v11 + 5) = off_10230E1E8;
    *((void *)v11 + 6) = 0;
    v11[72] = 0;
    *(void *)&long long v13 = 0x8000000080000000;
    *((void *)&v13 + 1) = 0x8000000080000000;
    *(_OWORD *)(v11 + 76) = v13;
    *((_DWORD *)v11 + 23) = 0x7FFFFFFF;
    *((void *)v11 + 12) = 26;
    *((_DWORD *)v11 + 26) = 2139095039;
    *((void *)v11 + 15) = 0;
    *((void *)v11 + 16) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_10120D4B4()
{
  sub_100134750(qword_102486430, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486430, (void *)&_mh_execute_header);
}

void sub_10120D514(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = a3;
  sub_1001AE6FC();
}

void sub_10120D5EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120D62C(uint64_t a1, int *a2, unsigned char *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318860);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTransitWsbClient::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318860);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      float v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTransitWsbClient::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10120DC14((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10120D7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10120D80C(uint64_t a1)
{
  sub_10120D878(a1);
  [*(id *)(*(void *)(a1 + 8) + 16) unregister:*(void *)(*(void *)(a1 + 8) + 8) forNotification:1];
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

id sub_10120D878(uint64_t a1)
{
  id result = [*(id *)a1 silo];
  if (*(unsigned char *)(a1 + 17))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102318880);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Stop active dynamic Wsb", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102318880);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTransitWsbClient::stopWsb()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    id result = [*(id *)(*(void *)(a1 + 8) + 16) unregister:*(void *)(*(void *)(a1 + 8) + 8) forNotification:12];
    *(unsigned char *)(a1 + 17) = 0;
  }
  return result;
}

id sub_10120DA34(uint64_t a1)
{
  id result = [*(id *)a1 silo];
  if (!*(unsigned char *)(a1 + 17))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102318880);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Start active dynamic Wsb", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102318880);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTransitWsbClient::startWsb()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    __int16 v6 = 1;
    *(_DWORD *)uint64_t buf = *(_DWORD *)(a1 + 20);
    uint64_t v7 = "transit";
    sub_1005E05AC();
  }
  return result;
}

void sub_10120DC14(uint64_t a1, uint64_t a2, int *a3, unsigned char *a4)
{
  [*(id *)a1 silo];
  if (*a3 == 12)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102318880);
    }
    BOOL v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Received kNotificationScanCache", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_16:
        unint64_t v10 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTransitWsbClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n");
LABEL_26:
        if (v10 != buf) {
          free(v10);
        }
        return;
      }
LABEL_28:
      dispatch_once(&qword_102419630, &stru_102318880);
      goto LABEL_16;
    }
  }
  else if (*a3 == 1)
  {
    *(unsigned char *)(a1 + 16) = *a4;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102318880);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 16);
      *(_DWORD *)uint64_t buf = 67109120;
      int v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received kNotificationPower, isWifiPowered, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_16;
      }
      goto LABEL_28;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102318880);
    }
    char v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v12 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      int v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unknown notification received, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102318880);
      }
      unint64_t v10 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTransitWsbClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n");
      goto LABEL_26;
    }
  }
}

void sub_10120E004(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10120E034(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10120E064()
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  unsigned int v0 = sub_1000D2988(v3, "EnablePositionProtoOsLog", &v5);
  BOOL v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_10120E0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10120E0E0(uint64_t a1, long long *a2)
{
  *(void *)a1 = &off_1023188B0;
  uint64_t v3 = (void *)(a1 + 8);
  sub_101213C04((char *)(a1 + 8), a2);
  *(void *)(a1 + 136) = v5;
  *(void *)(a1 + 136 + *(void *)(v5 - 24)) = v4;
  __int16 v6 = (std::ios_base *)(a1 + 136 + *(void *)(*(void *)(a1 + 136) - 24));
  std::ios_base::init(v6, (void *)(a1 + 144));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  uint64_t v7 = (char *)operator new(3uLL);
  *(void *)(a1 + 712) = v7;
  *(void *)(a1 + 728) = v7 + 3;
  *(_WORD *)uint64_t v7 = 32126;
  _DWORD v7[2] = 1;
  *(void *)(a1 + 720) = v7 + 3;
  *(unsigned char *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 740) = 0;
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102318920);
  }
  int v8 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_INFO))
  {
    BOOL v9 = v3;
    if (*(char *)(a1 + 31) < 0) {
      BOOL v9 = (void *)*v3;
    }
    int v10 = *(unsigned __int8 *)(a1 + 126);
    int v11 = *(unsigned __int8 *)(a1 + 124);
    uint64_t v12 = *(void *)(a1 + 104);
    uint64_t v13 = *(void *)(a1 + 112);
    int v14 = *(unsigned __int8 *)(a1 + 127);
    int v15 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)uint64_t buf = 136447747;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v46 = 1026;
    int v47 = v10;
    __int16 v48 = 1026;
    int v49 = v11;
    __int16 v50 = 2049;
    uint64_t v51 = v12;
    __int16 v52 = 2049;
    uint64_t v53 = v13;
    __int16 v54 = 1026;
    int v55 = v14;
    __int16 v56 = 1026;
    int v57 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ProtobufSerializer,created instance,%{public}s,disk_enable,%{public}d,compress,%{public}d,retention_sec,%{private}.1f,dir_size_bytes,%{private}lld,localTime,%{public}d,prune,%{public}d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    float v22 = v3;
    if (*(char *)(a1 + 31) < 0) {
      float v22 = (void *)*v3;
    }
    int v23 = *(unsigned __int8 *)(a1 + 126);
    int v24 = *(unsigned __int8 *)(a1 + 124);
    uint64_t v25 = *(void *)(a1 + 104);
    uint64_t v26 = *(void *)(a1 + 112);
    int v27 = *(unsigned __int8 *)(a1 + 127);
    int v28 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)std::string __p = 136447747;
    *(void *)&__p[4] = v22;
    __int16 v33 = 1026;
    int v34 = v23;
    __int16 v35 = 1026;
    int v36 = v24;
    __int16 v37 = 2049;
    uint64_t v38 = v25;
    __int16 v39 = 2049;
    uint64_t v40 = v26;
    __int16 v41 = 1026;
    int v42 = v27;
    __int16 v43 = 1026;
    int v44 = v28;
    unint64_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLProtobufSerializer::CLProtobufSerializer(Config &&)", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  id v16 = [(objc_class *)off_102476FC8() defaultManager];
  if (v16)
  {
    std::operator+<char>();
    sub_10120E6B0(a1, (uint64_t)__p);
    if (v36 >= 0) {
      unint64_t v17 = __p;
    }
    else {
      unint64_t v17 = *(unsigned char **)__p;
    }
    __int16 v18 = +[NSString stringWithUTF8String:v17];
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)__p);
    }
    id v31 = [(objc_class *)off_102476FD0() pathInfoWithURL:+[NSURL fileURLWithPath:v18]];
    float v19 = +[NSArray arrayWithObjects:&v31 count:1];
    if (v49 >= 0) {
      float v20 = buf;
    }
    else {
      float v20 = *(unsigned char **)buf;
    }
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10120E820;
    v30[3] = &unk_1022B8750;
    v30[4] = v18;
    [v16 registerPaths:v19 forBundleID:[NSString stringWithUTF8String:v20] completionHandler:v30];
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)buf);
    }
  }
  return a1;
}

void sub_10120E60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  __int16 v37 = (void *)v34[89];
  if (v37)
  {
    v34[90] = (uint64_t)v37;
    operator delete(v37);
  }
  sub_101211774(v34 + 88, 0);
  sub_100822A04(v35);
  sub_1004284E0(v33);
  _Unwind_Resume(a1);
}

void sub_10120E6B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 103) < 0)
  {
    if (*(void *)(a1 + 88)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 103))
  {
LABEL_3:
    if (*(char *)(a1 + 79) >= 0) {
      size_t v4 = *(unsigned __int8 *)(a1 + 79);
    }
    else {
      size_t v4 = *(void *)(a1 + 64);
    }
    p_p = &__p;
    sub_1001110E4((uint64_t)&__p, v4 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v4)
    {
      if (*(char *)(a1 + 79) >= 0) {
        __int16 v6 = (const void *)(a1 + 56);
      }
      else {
        __int16 v6 = *(const void **)(a1 + 56);
      }
      memmove(p_p, v6, v4);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 47;
    int v7 = *(char *)(a1 + 103);
    if (v7 >= 0) {
      int v8 = (const std::string::value_type *)(a1 + 80);
    }
    else {
      int v8 = *(const std::string::value_type **)(a1 + 80);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      std::string::size_type v9 = *(void *)(a1 + 88);
    }
    int v10 = std::string::append(&__p, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)(a2 + 16) = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v12 = *(void **)(a1 + 56);
    unint64_t v13 = *(void *)(a1 + 64);
    sub_1000DC48C((unsigned char *)a2, v12, v13);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
    *(void *)(a2 + 16) = *(void *)(a1 + 72);
  }
}

void sub_10120E804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10120E820(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    size_t v4 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ProtobufSerializer,failed to set space attribution for %@. Error: %@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      __int16 v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLProtobufSerializer::CLProtobufSerializer(Config &&)_block_invoke", "%s\n");
LABEL_19:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    int v7 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "ProtobufSerializer,set space attribution for %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      __int16 v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLProtobufSerializer::CLProtobufSerializer(Config &&)_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

uint64_t sub_10120EB2C(uint64_t a1)
{
  *(void *)a1 = &off_1023188B0;
  if (qword_10248B398)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10120ECE0;
    block[3] = &unk_1022A3020;
    void block[4] = a1;
    dispatch_sync((dispatch_queue_t)qword_10248B398, block);
  }
  uint64_t v2 = *(void **)(a1 + 712);
  if (v2)
  {
    *(void *)(a1 + 720) = v2;
    operator delete(v2);
  }
  sub_101211774((uint64_t *)(a1 + 704), 0);
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10120ECE0(uint64_t a1)
{
}

void sub_10120ECE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 736))
  {
    *(unsigned char *)(a1 + 736) = 0;
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    uint64_t v2 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      int v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,%{public}s,closing", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::closeInternal()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    uint64_t v4 = *(void *)(a1 + 704);
    if (v4)
    {
      sub_101210FCC(v4, (void *)(a1 + 136));
      sub_101211774((uint64_t *)(a1 + 704), 0);
    }
    std::ostream::flush();
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)(a1 + 136 + *(void *)(*(void *)(a1 + 136) - 24)), *(_DWORD *)(a1 + 136 + *(void *)(*(void *)(a1 + 136) - 24) + 32) | 4);
    }
    if (*(unsigned char *)(a1 + 129)) {
      sub_1012117C4(a1);
    }
  }
}

void sub_10120EF30(uint64_t a1)
{
  sub_10120EB2C(a1);

  operator delete();
}

void sub_10120EF68(id a1)
{
  BOOL v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  qword_10248B398 = (uint64_t)dispatch_queue_create("com.apple.locationd.proto_serialize", v1);
}

void sub_10120EFA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 125))
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    uint64_t v2 = (void *)(a1 + 8);
    uint64_t v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v4 = (void *)*v2;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#p%{public}s,#open", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v2 = (void *)*v2;
      }
      int v7 = 136446210;
      uint64_t v8 = v2;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::open()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(_DWORD *)(a1 + 740) = 0;
  }
  if (*(unsigned char *)(a1 + 126))
  {
    if (qword_102486448 != -1) {
      dispatch_once(&qword_102486448, &stru_1023188C0);
    }
    if (qword_10248B398)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10120F208;
      block[3] = &unk_1022A3020;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)qword_10248B398, block);
    }
  }
}

void sub_10120F208(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 736))
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    uint64_t v2 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = (void *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,%{public}s,#Warning,previous file was not closed", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      id v16 = (void *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0) {
        id v16 = (void *)*v16;
      }
      int v26 = 136446210;
      int v27 = v16;
      unint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::open()_block_invoke", "%s\n", v17);
      if (v17 != buf) {
        free(v17);
      }
    }
    sub_10120ECE8(v1);
  }
  if (sub_10120F8B8((char *)(v1 + 56)))
  {
    if (*(char *)(v1 + 103) < 0)
    {
      if (!*(void *)(v1 + 88))
      {
LABEL_19:
        if (*(unsigned char *)(v1 + 124)) {
          operator new();
        }
        sub_101210378(v1, &__p);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        __int16 v6 = (uint64_t *)(v1 + 8);
        int v7 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = (void *)(v1 + 8);
          if (*(char *)(v1 + 31) < 0) {
            uint64_t v8 = (void *)*v6;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t buf = 136446466;
          *(void *)&uint8_t buf[4] = v8;
          __int16 v33 = 2082;
          int v34 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,%{public}s,opening,%{public}s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102318920);
          }
          uint64_t v18 = v1 + 8;
          if (*(char *)(v1 + 31) < 0) {
            uint64_t v18 = *v6;
          }
          float v19 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            float v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v26 = 136446466;
          int v27 = (void *)v18;
          __int16 v28 = 2082;
          unint64_t v29 = v19;
          float v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::open()_block_invoke", "%s\n", v20);
          if (v20 != buf) {
            free(v20);
          }
        }
        std::ofstream::open();
        if (*(void *)(v1 + 264))
        {
          *(unsigned char *)(v1 + 736) = 1;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v10 = &__p;
          }
          else {
            uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          sub_1004BB1FC((const char *)v10);
        }
        else
        {
          *(unsigned char *)(v1 + 736) = 0;
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102318920);
          }
          __int16 v11 = qword_1024194C8;
          if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v12 = v1 + 8;
            if (*(char *)(v1 + 31) < 0) {
              uint64_t v12 = *v6;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v13 = &__p;
            }
            else {
              unint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            int v14 = __error();
            int v15 = strerror(*v14);
            *(_DWORD *)uint64_t buf = 136446722;
            *(void *)&uint8_t buf[4] = v12;
            __int16 v33 = 2082;
            int v34 = v13;
            __int16 v35 = 2082;
            int v36 = v15;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "ProtobufSerializer,%{public}s,failed to open,%{public}s,error,%{public}s", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102318920);
            }
            if (*(char *)(v1 + 31) < 0) {
              __int16 v6 = (uint64_t *)*v6;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v21 = &__p;
            }
            else {
              float v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            float v22 = __error();
            int v23 = strerror(*v22);
            int v26 = 136446722;
            int v27 = v6;
            __int16 v28 = 2082;
            unint64_t v29 = v21;
            __int16 v30 = 2082;
            id v31 = v23;
            int v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::open()_block_invoke", "%s\n", v24);
            if (v24 != buf) {
              free(v24);
            }
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    else if (!*(unsigned char *)(v1 + 103))
    {
      goto LABEL_19;
    }
    sub_10120E6B0(v1, (uint64_t)buf);
    BOOL v4 = sub_10120F8B8(buf);
    BOOL v5 = v4;
    if (SHIBYTE(v35) < 0)
    {
      operator delete(*(void **)buf);
      if (!v5) {
        return;
      }
    }
    else if (!v4)
    {
      return;
    }
    goto LABEL_19;
  }
}

void sub_10120F850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10120F8B8(char *a1)
{
  uint64_t v1 = a1;
  sub_101213E80(&v37.__pn_, a1);
  std::__fs::filesystem::__status(&v37, 0);
  if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__pn_.__r_.__value_.__l.__data_);
  }
  if (buf.__r_.__value_.__s.__data_[0] && buf.__r_.__value_.__s.__data_[0] != 255)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    __int16 v11 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
    {
      if (v1[23] >= 0) {
        std::string::size_type v12 = (std::string::size_type)v1;
      }
      else {
        std::string::size_type v12 = *(void *)v1;
      }
      LODWORD(v37.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v37.__pn_.__r_.__value_.__r.__words + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,directory exists,%s", (uint8_t *)&v37, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(&v37, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    if (v1[23] >= 0) {
      std::string::size_type v29 = (std::string::size_type)v1;
    }
    else {
      std::string::size_type v29 = *(void *)v1;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v29;
    int v26 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v26);
    goto LABEL_108;
  }
  v31.__val_ = 0;
  v31.__cat_ = std::system_category();
  sub_101213E80(&v37.__pn_, v1);
  BOOL v2 = std::__fs::filesystem::__create_directories(&v37, &v31);
  if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__pn_.__r_.__value_.__l.__data_);
  }
  if (v2)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    uint64_t v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_INFO))
    {
      if (v1[23] >= 0) {
        std::string::size_type v4 = (std::string::size_type)v1;
      }
      else {
        std::string::size_type v4 = *(void *)v1;
      }
      LODWORD(v37.__pn_.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v37.__pn_.__r_.__value_.__r.__words + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ProtobufSerializer,created directory,%{private}s", (uint8_t *)&v37, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v37, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      if (v1[23] >= 0) {
        std::string::size_type v27 = (std::string::size_type)v1;
      }
      else {
        std::string::size_type v27 = *(void *)v1;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v27;
      __int16 v28 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v28);
      if (v28 != &v37) {
        free(v28);
      }
    }
    sub_101213E80(&v37.__pn_, v1);
    std::__fs::filesystem::__permissions(&v37, group_all|owner_all, add, &v31);
    if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__pn_.__r_.__value_.__l.__data_);
    }
    if (v31.__val_)
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      BOOL v5 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v6 = v1[23] >= 0 ? (std::string::size_type)v1 : *(void *)v1;
        std::error_code::message(&v37.__pn_, &v31);
        int v7 = (v37.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v37
           : (std::__fs::filesystem::path *)v37.__pn_.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ProtobufSerializer,failed to set directory permissions,%{private}s,error,%{public}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__pn_.__r_.__value_.__l.__data_);
        }
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(&v37, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        if (v1[23] < 0) {
          uint64_t v1 = *(char **)v1;
        }
        std::error_code::message(&buf, &v31);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        int v33 = 136380931;
        int v34 = v1;
        __int16 v35 = 2082;
        int v36 = p_buf;
        uint64_t v10 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        goto LABEL_119;
      }
      return result;
    }
    if (v1[23] >= 0) {
      id v16 = v1;
    }
    else {
      id v16 = *(const char **)v1;
    }
    if (sub_1004BB1FC(v16))
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      unint64_t v17 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        if (v1[23] >= 0) {
          std::string::size_type v18 = (std::string::size_type)v1;
        }
        else {
          std::string::size_type v18 = *(void *)v1;
        }
        float v19 = __error();
        float v20 = strerror(*v19);
        LODWORD(v37.__pn_.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v37.__pn_.__r_.__value_.__r.__words + 4) = v18;
        WORD2(v37.__pn_.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v37.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "ProtobufSerializer,chown failed,%{public}s,error,%{public}s", (uint8_t *)&v37, 0x16u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(&v37, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        if (v1[23] < 0) {
          uint64_t v1 = *(char **)v1;
        }
        float v21 = __error();
        float v22 = strerror(*v21);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v1;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
        uint64_t v10 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v10);
        if (v10 == &v37) {
          return 0;
        }
        goto LABEL_120;
      }
      return result;
    }
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    int v23 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
    {
      if (v1[23] >= 0) {
        std::string::size_type v24 = (std::string::size_type)v1;
      }
      else {
        std::string::size_type v24 = *(void *)v1;
      }
      LODWORD(v37.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v37.__pn_.__r_.__value_.__r.__words + 4) = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,chown succeeded,%s", (uint8_t *)&v37, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(&v37, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    if (v1[23] >= 0) {
      std::string::size_type v25 = (std::string::size_type)v1;
    }
    else {
      std::string::size_type v25 = *(void *)v1;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v25;
    int v26 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v26);
LABEL_108:
    if (v26 != &v37) {
      free(v26);
    }
    return 1;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102318920);
  }
  unint64_t v13 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v14 = v1[23] >= 0 ? (std::string::size_type)v1 : *(void *)v1;
    std::error_code::message(&v37.__pn_, &v31);
    int v15 = (v37.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v37
        : (std::__fs::filesystem::path *)v37.__pn_.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v14;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "ProtobufSerializer,failed to create directory,%{private}s,error,%{public}s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__pn_.__r_.__value_.__l.__data_);
    }
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(&v37, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    if (v1[23] < 0) {
      uint64_t v1 = *(char **)v1;
    }
    std::error_code::message(&buf, &v31);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v30 = &buf;
    }
    else {
      __int16 v30 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v33 = 136380931;
    int v34 = v1;
    __int16 v35 = 2082;
    int v36 = v30;
    uint64_t v10 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
LABEL_119:
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL (anonymous namespace)::ensureDirectoryExistsAndHasLoggingOwnership(const std::string &)", "%s\n", (const char *)v10);
    if (v10 == &v37) {
      return 0;
    }
LABEL_120:
    free(v10);
    return 0;
  }
  return result;
}

void sub_10121034C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101210378(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = *(int **)(a1 + 704);
  if (v4) {
    sub_101213188(v4, v57);
  }
  else {
    sub_100134750(v57, "");
  }
  if (*(unsigned char *)(a1 + 128))
  {
    int v5 = *(unsigned __int8 *)(a1 + 127);
    memset(&v60, 0, sizeof(v60));
    uint64_t v6 = sub_100103240();
    if (!sub_10073D2E4(v6, &v60))
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      int v7 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "ProtobufSerializer,could not read device serial number", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        LOWORD(v62.__r_.__value_.__l.__data_) = 0;
        int v55 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string (anonymous namespace)::createUniquePortionOfLogFileName(BOOL)", "%s\n", (const char *)v55);
        if (v55 != &buf) {
          free(v55);
        }
      }
    }
    memset(&v59, 0, sizeof(v59));
    time_t v67 = time(0);
    if (v5) {
      uint64_t v8 = localtime(&v67);
    }
    else {
      uint64_t v8 = gmtime(&v67);
    }
    std::string::size_type v9 = v8;
    if (v8)
    {
      sub_10010F274((uint64_t)&v62);
      buf.__r_.__value_.__s.__data_[0] = 48;
      sub_10006E19C(&v62.__r_.__value_.__r.__words[2], (char *)&buf);
      *(void *)&v64[*(void *)(v62.__r_.__value_.__r.__words[2] - 24)] = 4;
      uint64_t v10 = (void *)std::ostream::operator<<();
      sub_100132EFC(v10, (uint64_t)"-", 1);
      *(void *)&v64[*(void *)(v62.__r_.__value_.__r.__words[2] - 24)] = 2;
      __int16 v11 = (void *)std::ostream::operator<<();
      sub_100132EFC(v11, (uint64_t)"-", 1);
      *(void *)&v64[*(void *)(v62.__r_.__value_.__r.__words[2] - 24)] = 2;
      std::string::size_type v12 = (void *)std::ostream::operator<<();
      if (v5) {
        sub_100132EFC(v12, (uint64_t)"_T", 2);
      }
      else {
        sub_100132EFC(v12, (uint64_t)"-", 1);
      }
      *(void *)&v64[*(void *)(v62.__r_.__value_.__r.__words[2] - 24)] = 2;
      int v15 = (void *)std::ostream::operator<<();
      sub_100132EFC(v15, (uint64_t)"-", 1);
      *(void *)&v64[*(void *)(v62.__r_.__value_.__r.__words[2] - 24)] = 2;
      id v16 = (void *)std::ostream::operator<<();
      sub_100132EFC(v16, (uint64_t)"-", 1);
      *(void *)&v64[*(void *)(v62.__r_.__value_.__r.__words[2] - 24)] = 2;
      std::ostream::operator<<();
      if (v5)
      {
        sub_10010F274((uint64_t)&buf);
        if (v9->tm_gmtoff >= 0) {
          unint64_t v17 = "+";
        }
        else {
          unint64_t v17 = "-";
        }
        sub_100134750(&__p, v17);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        float v20 = sub_100132EFC(&buf.__r_.__value_.__r.__words[2], (uint64_t)p_p, size);
        char v68 = 48;
        float v21 = sub_10006E19C(v20, &v68);
        *(void *)((char *)v21 + *(void *)(*v21 - 24) + 24) = 4;
        std::ostream::operator<<();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::stringbuf::str();
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words
        buf.__r_.__value_.__r.__words[2] = v22;
        if (v73 < 0) {
          operator delete(v72);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v23 = &v61;
        }
        else {
          int v23 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v24 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v24 = v61.__r_.__value_.__l.__size_;
        }
        sub_100132EFC(&v62.__r_.__value_.__r.__words[2], (uint64_t)v23, v24);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
      }
      std::stringbuf::str();
      std::string v59 = buf;
      *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words
      v62.__r_.__value_.__r.__words[2] = v25;
      if (v66 < 0) {
        operator delete(v65);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      std::ios::~ios();
    }
    else
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      unint64_t v13 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "ProtobufSerializer,could not obtain UTC time", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        LOWORD(v62.__r_.__value_.__l.__data_) = 0;
        std::string::size_type v14 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string (anonymous namespace)::createUniquePortionOfLogFileName(BOOL)", "%s\n", (const char *)v14);
        if (v14 != &buf) {
          free(v14);
        }
      }
    }
    memset(&v56, 0, sizeof(v56));
    std::string::size_type v26 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v26 = v60.__r_.__value_.__l.__size_;
    }
    if (v26)
    {
      std::operator+<char>();
      std::string::size_type v27 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      std::string::size_type v28 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(buf.__r_.__value_.__r.__words[2])
          : buf.__r_.__value_.__l.__size_;
      std::string::append(&v56, (const std::string::value_type *)v27, v28);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v29 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    char v30 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v29 = v59.__r_.__value_.__l.__size_;
    }
    if (v29)
    {
      std::operator+<char>();
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = buf.__r_.__value_.__l.__size_;
      }
      std::string::append(&v56, (const std::string::value_type *)p_buf, v32);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      char v30 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    }
    if (v30 < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_100134750(&v56, "");
  }
  sub_10120E6B0(a1, (uint64_t)&v60);
  int v33 = std::string::append(&v60, "/");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  int v35 = *(char *)(a1 + 31);
  if (v35 >= 0) {
    int v36 = (const std::string::value_type *)(a1 + 8);
  }
  else {
    int v36 = *(const std::string::value_type **)(a1 + 8);
  }
  if (v35 >= 0) {
    std::string::size_type v37 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    std::string::size_type v37 = *(void *)(a1 + 16);
  }
  uint64_t v38 = std::string::append(&v61, v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &v56;
  }
  else {
    uint64_t v40 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v56.__r_.__value_.__l.__size_;
  }
  int v42 = std::string::append(&__p, (const std::string::value_type *)v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  __int16 v46 = *(const std::string::value_type **)(a1 + 32);
  uint64_t v45 = a1 + 32;
  int v44 = v46;
  int v47 = *(char *)(v45 + 23);
  if (v47 >= 0) {
    __int16 v48 = (const std::string::value_type *)v45;
  }
  else {
    __int16 v48 = v44;
  }
  if (v47 >= 0) {
    std::string::size_type v49 = *(unsigned __int8 *)(v45 + 23);
  }
  else {
    std::string::size_type v49 = *(void *)(v45 + 8);
  }
  __int16 v50 = std::string::append(&v62, v48, v49);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if ((v58 & 0x80u) == 0) {
    __int16 v52 = v57;
  }
  else {
    __int16 v52 = (void **)v57[0];
  }
  if ((v58 & 0x80u) == 0) {
    std::string::size_type v53 = v58;
  }
  else {
    std::string::size_type v53 = (std::string::size_type)v57[1];
  }
  __int16 v54 = std::string::append(&buf, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if ((char)v58 < 0) {
    operator delete(v57[0]);
  }
}

void sub_101210E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void sub_101210FCC(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = (compression_stream *)(a1 + 32);
    uint64_t v40 = a2 + 4;
    std::string::size_type v4 = (mach_header_64 *)&_mh_execute_header;
    while (1)
    {
      char v42 = 0;
      *(void *)(a1 + 48) = &v42;
      *(void *)(a1 + 56) = 0;
      uint64_t v5 = *(void *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 16) - v5;
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v6;
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      int v7 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        uint64_t v9 = *(void *)(a1 + 56);
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = *(void *)(a1 + 40);
        *(_DWORD *)std::string buf = 134218752;
        uint64_t v54 = v8;
        __int16 v55 = 2048;
        uint64_t v56 = v9;
        __int16 v57 = 2048;
        uint64_t v58 = v10;
        __int16 v59 = 2048;
        uint64_t v60 = v11;
        _os_log_impl(v4, v7, OS_LOG_TYPE_DEBUG, "ProtobufCompressor,flush,before,%p,%zu,%p,%zu", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        uint64_t v29 = *(void *)(a1 + 48);
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = *(void *)(a1 + 32);
        uint64_t v32 = *(void *)(a1 + 40);
        int v43 = 134218752;
        uint64_t v44 = v29;
        __int16 v45 = 2048;
        uint64_t v46 = v30;
        __int16 v47 = 2048;
        uint64_t v48 = v31;
        __int16 v49 = 2048;
        uint64_t v50 = v32;
        int v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      compression_status v12 = compression_stream_process(v3, 1);
      if (v12 > COMPRESSION_STATUS_END) {
        break;
      }
      unint64_t v13 = v3;
      std::string::size_type v14 = v4;
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v17 = *(void *)(a1 + 40);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      uint64_t v18 = v15 - v16;
      float v19 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v54 = v18 - v17;
        _os_log_impl(v14, v19, OS_LOG_TYPE_DEBUG, "ProtobufCompressor,flush,flushed bytes,%zu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        int v43 = 134217984;
        uint64_t v44 = v18 - v17;
        long long v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
      BOOL v20 = v18 == v17;
      std::string::size_type v4 = v14;
      uint64_t v3 = v13;
      if (v20) {
        goto LABEL_29;
      }
      if ((*((unsigned char *)v40 + *(void *)(*a2 - 24)) & 5) != 0)
      {
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        float v21 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(v4, v21, OS_LOG_TYPE_DEFAULT, "#Warning,ProtobufCompressor,flush,bad stream", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_29;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        LOWORD(v43) = 0;
        std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v22);
        goto LABEL_52;
      }
      std::ostream::write();
LABEL_29:
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      std::string::size_type v24 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v25 = *(void *)(a1 + 48);
        uint64_t v26 = *(void *)(a1 + 56);
        uint64_t v27 = *(void *)(a1 + 32);
        uint64_t v28 = *(void *)(a1 + 40);
        *(_DWORD *)std::string buf = 134219008;
        uint64_t v54 = v25;
        __int16 v55 = 2048;
        uint64_t v56 = v26;
        __int16 v57 = 2048;
        uint64_t v58 = v27;
        __int16 v59 = 2048;
        uint64_t v60 = v28;
        __int16 v61 = 1024;
        compression_status v62 = v12;
        _os_log_impl(v4, v24, OS_LOG_TYPE_DEBUG, "ProtobufCompressor,flush,after,%p,%zu,%p,%zu,status,%d", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        uint64_t v34 = *(void *)(a1 + 48);
        uint64_t v35 = *(void *)(a1 + 56);
        uint64_t v36 = *(void *)(a1 + 32);
        uint64_t v37 = *(void *)(a1 + 40);
        int v43 = 134219008;
        uint64_t v44 = v34;
        __int16 v45 = 2048;
        uint64_t v46 = v35;
        __int16 v47 = 2048;
        uint64_t v48 = v36;
        __int16 v49 = 2048;
        uint64_t v50 = v37;
        __int16 v51 = 1024;
        compression_status v52 = v12;
        uint64_t v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
      if (v12)
      {
        sub_101213A64(a1);
        return;
      }
    }
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    int v23 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(v4, v23, OS_LOG_TYPE_ERROR, "ProtobufCompressor,flush,failed to finalize stream", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    LOWORD(v43) = 0;
    std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v22);
LABEL_52:
    if (v22 != (char *)buf) {
      free(v22);
    }
    goto LABEL_29;
  }
}

uint64_t sub_101211774(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101213A28(result);
    operator delete();
  }
  return result;
}

void sub_1012117C4(uint64_t a1)
{
  if (clock_gettime(_CLOCK_REALTIME, &__tp))
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    BOOL v2 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      int v3 = *__error();
      LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "ProtobufSerializer,pruneLogFiles,clock_gettime failed,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      int v4 = *__error();
      v105.st_dev = 67240192;
      *(_DWORD *)&v105.st_mode = v4;
      uint64_t v5 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v5);
LABEL_10:
      if (v5 != &buf) {
        free(v5);
      }
      return;
    }
    return;
  }
  double v6 = *(double *)(a1 + 104);
  if (v6 >= (double)__tp.tv_sec)
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    int v7 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = __tp.tv_sec;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "ProtobufSerializer,pruneLogFiles,timespecNow too small to use,%{public}ld", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      v105.st_dev = 134349056;
      *(void *)&v105.st_mode = __tp.tv_sec;
      __int16 v83 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v83);
      if (v83 != &buf) {
        free(v83);
      }
    }
    uint64_t v84 = 0;
  }
  else
  {
    uint64_t v84 = (uint64_t)((double)__tp.tv_sec - v6);
  }
  sub_10120E6B0(a1, (uint64_t)&buf);
  uint64_t v8 = (std::string::size_type *)(a1 + 8);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (size)
    {
LABEL_22:
      uint64_t v88 = 0;
      int32x2_t v89 = 0;
      unint64_t v90 = 0;
      sub_10120E6B0(a1, (uint64_t)v86);
      uint64_t v9 = +[NSFileManager defaultManager];
      if (v87 >= 0) {
        uint64_t v10 = v86;
      }
      else {
        uint64_t v10 = (void **)v86[0];
      }
      uint64_t v11 = [(NSFileManager *)v9 contentsOfDirectoryAtPath:+[NSString stringWithUTF8String:v10] error:0];
      compression_status v12 = (char *)v88;
      for (int i = v89; i != v12; i -= 24)
      {
        if (*(i - 1) < 0) {
          operator delete(*((void **)i - 3));
        }
      }
      int32x2_t v89 = v12;
      *(_OWORD *)double v94 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      std::string::size_type v14 = [(NSArray *)v11 reverseObjectEnumerator];
      uint64_t v15 = (char *)[(NSEnumerator *)v14 countByEnumeratingWithState:v94 objects:&v105 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v95;
        do
        {
          uint64_t v17 = 0;
          do
          {
            if (*(void *)v95 != v16) {
              objc_enumerationMutation(v14);
            }
            uint64_t v18 = (char *)[*((id *)v94[1] + (void)v17) UTF8String];
            if (v18)
            {
              sub_100134750(v98, v18);
              int v19 = *(char *)(a1 + 31);
              if (v19 >= 0) {
                unint64_t v20 = *(unsigned __int8 *)(a1 + 31);
              }
              else {
                unint64_t v20 = *(void *)(a1 + 16);
              }
              unsigned __int8 v21 = v99;
              if ((char)v99 < 0)
              {
                if (v20 == -1) {
LABEL_218:
                }
                  sub_1002E93D4();
                int v23 = *(unsigned char **)v98;
                if (*(void *)&v98[8] >= v20) {
                  size_t v22 = v20;
                }
                else {
                  size_t v22 = *(void *)&v98[8];
                }
              }
              else
              {
                if (v20 == -1) {
                  goto LABEL_218;
                }
                if (v99 >= v20) {
                  size_t v22 = v20;
                }
                else {
                  size_t v22 = v99;
                }
                int v23 = v98;
              }
              if (v19 >= 0) {
                uint64_t v26 = (const void *)(a1 + 8);
              }
              else {
                uint64_t v26 = *(const void **)(a1 + 8);
              }
              if (!memcmp(v23, v26, v22) && v22 == v20)
              {
                sub_100134750(__p, v18);
                uint64_t v28 = v89;
                if ((unint64_t)v89 >= v90)
                {
                  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v89[-v88] >> 3);
                  unint64_t v31 = v30 + 1;
                  if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_1001D7FD4();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v90 - v88) >> 3) > v31) {
                    unint64_t v31 = 0x5555555555555556 * ((uint64_t)(v90 - v88) >> 3);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - v88) >> 3) >= 0x555555555555555) {
                    unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v32 = v31;
                  }
                  *(void *)unsigned int v102 = &v90;
                  if (v32) {
                    int v33 = (char *)sub_1000DA5D8((uint64_t)&v90, v32);
                  }
                  else {
                    int v33 = 0;
                  }
                  std::string::size_type v34 = (std::string::size_type)&v33[24 * v30];
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
                  buf.__r_.__value_.__l.__size_ = v34;
                  __int16 v101 = &v33[24 * v32];
                  long long v35 = *(_OWORD *)__p;
                  *(void *)(v34 + 16) = v93;
                  *(_OWORD *)std::string::size_type v34 = v35;
                  __p[1] = 0;
                  uint64_t v93 = 0;
                  __p[0] = 0;
                  buf.__r_.__value_.__r.__words[2] = v34 + 24;
                  sub_1001D7FEC(&v88, &buf);
                  uint64_t v36 = v89;
                  sub_1001D8184((uint64_t)&buf);
                  int32x2_t v89 = v36;
                  if (SHIBYTE(v93) < 0) {
                    operator delete(__p[0]);
                  }
                }
                else
                {
                  long long v29 = *(_OWORD *)__p;
                  *((void *)v89 + 2) = v93;
                  *(_OWORD *)uint64_t v28 = v29;
                  int32x2_t v89 = v28 + 24;
                }
                unsigned __int8 v21 = v99;
              }
              if ((v21 & 0x80) != 0) {
                operator delete(*(void **)v98);
              }
            }
            else
            {
              if (qword_1024194C0 != -1) {
                dispatch_once(&qword_1024194C0, &stru_102318920);
              }
              std::string::size_type v24 = qword_1024194C8;
              if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "ProtobufSerializer,pruneLogFiles,null filename from reverseEnumerateFiles", (uint8_t *)&buf, 2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1024194C0 != -1) {
                  dispatch_once(&qword_1024194C0, &stru_102318920);
                }
                *(_WORD *)unsigned int v98 = 0;
                uint64_t v25 = (std::string *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void (anonymous namespace)::enumerateFiles(const std::string &, const std::string &, std::vector<std::string> &)", "%s\n", (const char *)v25);
                if (v25 != &buf) {
                  free(v25);
                }
              }
            }
            ++v17;
          }
          while (v15 != v17);
          uint64_t v15 = (char *)[(NSEnumerator *)v14 countByEnumeratingWithState:v94 objects:&v105 count:16];
        }
        while (v15);
      }
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      unint64_t v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v89[-v88] >> 3));
      if (v89 == (char *)v88) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = v37;
      }
      sub_101214060(v88, v89, (uint64_t)&buf, v38, 1);
      uint64_t v40 = v88;
      long long v39 = v89;
      if ((char *)v88 == v89)
      {
LABEL_204:
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        sub_1000A7B4C((void ***)&buf);
        return;
      }
      int v41 = 0;
      uint64_t v85 = 0;
      while (1)
      {
        sub_10120E6B0(a1, (uint64_t)&v105);
        char v42 = std::string::append((std::string *)&v105, "/");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        int v44 = *(char *)(v40 + 23);
        if (v44 >= 0) {
          __int16 v45 = (const std::string::value_type *)v40;
        }
        else {
          __int16 v45 = *(const std::string::value_type **)v40;
        }
        if (v44 >= 0) {
          std::string::size_type v46 = *(unsigned __int8 *)(v40 + 23);
        }
        else {
          std::string::size_type v46 = *(void *)(v40 + 8);
        }
        __int16 v47 = std::string::append(&buf, v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        *(void *)&long long v95 = *((void *)&v47->__r_.__value_.__l + 2);
        *(_OWORD *)double v94 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v105.st_gid) < 0) {
          operator delete(*(void **)&v105.st_dev);
        }
        if ((SBYTE7(v95) & 0x80u) == 0) {
          __int16 v49 = v94;
        }
        else {
          __int16 v49 = (void **)v94[0];
        }
        if (stat((const char *)v49, &v105))
        {
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102318920);
          }
          uint64_t v50 = qword_1024194C8;
          if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
          {
            int v51 = SBYTE7(v95);
            compression_status v52 = (void **)v94[0];
            int v53 = *__error();
            if (v51 >= 0) {
              uint64_t v54 = v94;
            }
            else {
              uint64_t v54 = v52;
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v54;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v53;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "ProtobufSerializer,getFileModificationTime could not stat,%{public}s,%{public}d", (uint8_t *)&buf, 0x12u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102318920);
            }
            int v55 = SBYTE7(v95);
            uint64_t v56 = (void **)v94[0];
            int v57 = *__error();
            if (v55 >= 0) {
              uint64_t v58 = v94;
            }
            else {
              uint64_t v58 = v56;
            }
            *(_DWORD *)unsigned int v98 = 136446466;
            *(void *)&v98[4] = v58;
            *(_WORD *)&v98[12] = 1026;
            *(_DWORD *)&v98[14] = v57;
            __int16 v59 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL (anonymous namespace)::getFileModificationTimeAndSize(const std::string &, timespec &, int64_t &)", "%s\n", (const char *)v59);
            if (v59 != &buf) {
              free(v59);
            }
          }
          goto LABEL_178;
        }
        __darwin_time_t tv_sec = v105.st_mtimespec.tv_sec;
        st_std::string::size_type size = v105.st_size;
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        compression_status v62 = qword_1024194C8;
        if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
        {
          if ((SBYTE7(v95) & 0x80u) == 0) {
            __int16 v63 = v94;
          }
          else {
            __int16 v63 = (void **)v94[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = tv_sec;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          __int16 v101 = (char *)v84;
          *(_WORD *)unsigned int v102 = 2048;
          *(void *)&v102[2] = st_size;
          __int16 v103 = 2048;
          off_t v104 = st_size + v85;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,looking at,%s,modTime,%ld,floorTime,%ld,size,%lld,new total,%lld", (uint8_t *)&buf, 0x34u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102318920);
          }
          if ((SBYTE7(v95) & 0x80u) == 0) {
            __int16 v75 = v94;
          }
          else {
            __int16 v75 = (void **)v94[0];
          }
          v105.st_dev = 136316162;
          *(void *)&v105.st_mode = v75;
          WORD2(v105.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&v105.st_ino + 6) = tv_sec;
          HIWORD(v105.st_gid) = 2048;
          *(void *)&v105.st_rdev = v84;
          LOWORD(v105.st_atimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&v105.st_atimespec.tv_sec + 2) = st_size;
          WORD1(v105.st_atimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&v105.st_atimespec.tv_nsec + 4) = st_size + v85;
          int v76 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v76);
          if (v76 != &buf) {
            free(v76);
          }
        }
        if (tv_sec >= v84)
        {
          if (v41 >= *(_DWORD *)(a1 + 120))
          {
            sub_101212EE4((char *)v94);
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102318920);
            }
            int v70 = qword_1024194C8;
            if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
            {
              if ((SBYTE7(v95) & 0x80u) == 0) {
                __int16 v71 = v94;
              }
              else {
                __int16 v71 = (void **)v94[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41 + 1;
              _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,deleted due to num files,%s,num files,%d", (uint8_t *)&buf, 0x12u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_177;
            }
            bzero(&buf, 0x65CuLL);
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102318920);
            }
            if ((SBYTE7(v95) & 0x80u) == 0) {
              int v72 = v94;
            }
            else {
              int v72 = (void **)v94[0];
            }
            v105.st_dev = 136315394;
            *(void *)&v105.st_mode = v72;
            WORD2(v105.st_ino) = 1024;
            *(_DWORD *)((char *)&v105.st_ino + 6) = v41 + 1;
            time_t v67 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v67);
          }
          else
          {
            if (st_size)
            {
              if (st_size + v85 > *(void *)(a1 + 112))
              {
                sub_101212EE4((char *)v94);
                if (qword_1024194C0 != -1) {
                  dispatch_once(&qword_1024194C0, &stru_102318920);
                }
                char v68 = qword_1024194C8;
                if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
                {
                  if ((SBYTE7(v95) & 0x80u) == 0) {
                    __int16 v69 = v94;
                  }
                  else {
                    __int16 v69 = (void **)v94[0];
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
                  _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,deleted due to size,%s", (uint8_t *)&buf, 0xCu);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1024194C0 != -1) {
                    dispatch_once(&qword_1024194C0, &stru_102318920);
                  }
                  if ((SBYTE7(v95) & 0x80u) == 0) {
                    int v78 = v94;
                  }
                  else {
                    int v78 = (void **)v94[0];
                  }
                  v105.st_dev = 136315138;
                  *(void *)&v105.st_mode = v78;
                  __int16 v79 = (std::string *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v79);
                  if (v79 != &buf) {
                    free(v79);
                  }
                }
              }
              v85 += st_size;
              goto LABEL_177;
            }
            sub_101212EE4((char *)v94);
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102318920);
            }
            char v73 = qword_1024194C8;
            if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
            {
              if ((SBYTE7(v95) & 0x80u) == 0) {
                int v74 = v94;
              }
              else {
                int v74 = (void **)v94[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
              _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,deleted due to zero size,%s", (uint8_t *)&buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_177;
            }
            bzero(&buf, 0x65CuLL);
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102318920);
            }
            if ((SBYTE7(v95) & 0x80u) == 0) {
              __int16 v77 = v94;
            }
            else {
              __int16 v77 = (void **)v94[0];
            }
            v105.st_dev = 136315138;
            *(void *)&v105.st_mode = v77;
            time_t v67 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v67);
          }
        }
        else
        {
          sub_101212EE4((char *)v94);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102318920);
          }
          double v64 = qword_1024194C8;
          if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_DEBUG))
          {
            if ((SBYTE7(v95) & 0x80u) == 0) {
              __int16 v65 = v94;
            }
            else {
              __int16 v65 = (void **)v94[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = tv_sec;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
            __int16 v101 = (char *)v84;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,deleted due to age,%s,fileTime,%ld,targetTime,%ld", (uint8_t *)&buf, 0x20u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_177;
          }
          bzero(&buf, 0x65CuLL);
          if (qword_1024194C0 != -1) {
            dispatch_once(&qword_1024194C0, &stru_102318920);
          }
          if ((SBYTE7(v95) & 0x80u) == 0) {
            char v66 = v94;
          }
          else {
            char v66 = (void **)v94[0];
          }
          v105.st_dev = 136315650;
          *(void *)&v105.st_mode = v66;
          WORD2(v105.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&v105.st_ino + 6) = tv_sec;
          HIWORD(v105.st_gid) = 2048;
          *(void *)&v105.st_rdev = v84;
          time_t v67 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v67);
        }
        if (v67 != &buf) {
          free(v67);
        }
LABEL_177:
        ++v41;
LABEL_178:
        if (SBYTE7(v95) < 0) {
          operator delete(v94[0]);
        }
        v40 += 24;
        if ((char *)v40 == v39) {
          goto LABEL_204;
        }
      }
    }
  }
  else if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
  {
    goto LABEL_22;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102318920);
  }
  __int16 v81 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v82 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v82 = *v8;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v82;
    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_ERROR, "ProtobufSerializer,%{public}s,pruneLogFiles,null path", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v8 = (std::string::size_type *)*v8;
    }
    v105.st_dev = 136446210;
    *(void *)&v105.st_mode = v8;
    uint64_t v5 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v5);
    goto LABEL_10;
  }
}

void sub_101212BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  a32 = &a27;
  sub_1000A7B4C((void ***)&a32);
  _Unwind_Resume(a1);
}

void sub_101212CAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 125))
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    BOOL v2 = (void *)(a1 + 8);
    int v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_INFO))
    {
      int v4 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v4 = (void *)*v2;
      }
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#p%{public}s,#close,", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      if (*(char *)(a1 + 31) < 0) {
        BOOL v2 = (void *)*v2;
      }
      int v7 = 136446210;
      uint64_t v8 = v2;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::close()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  if (qword_10248B398)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101212EDC;
    block[3] = &unk_1022A3020;
    void block[4] = a1;
    dispatch_async((dispatch_queue_t)qword_10248B398, block);
  }
}

void sub_101212EDC(uint64_t a1)
{
}

void sub_101212EE4(char *a1)
{
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  sub_101213E80(&v15.__pn_, a1);
  BOOL v2 = std::__fs::filesystem::__remove(&v15, &__ec);
  BOOL v3 = v2;
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
    if (v3) {
      return;
    }
  }
  else if (v2)
  {
    return;
  }
  if (qword_1024194C0 != -1) {
    dispatch_once(&qword_1024194C0, &stru_102318920);
  }
  int v4 = qword_1024194C8;
  if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v5 = a1[23] >= 0 ? (std::string::size_type)a1 : *(void *)a1;
    std::error_code::message(&v15.__pn_, &__ec);
    double v6 = (v15.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v15
       : (std::__fs::filesystem::path *)v15.__pn_.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ProtobufSerializer,deleteFile could not remove,%{private}s,error,%{public}s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__pn_.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&v15, 0x65CuLL);
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    if (a1[23] < 0) {
      a1 = *(char **)a1;
    }
    std::error_code::message(&buf, &__ec);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v11 = 136380931;
    compression_status v12 = a1;
    __int16 v13 = 2082;
    std::string::size_type v14 = p_buf;
    uint64_t v8 = (std::__fs::filesystem::path *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL (anonymous namespace)::deleteFile(const std::string &)", "%s\n", (const char *)v8);
    if (v8 != &v15) {
      free(v8);
    }
  }
}

void sub_10121317C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_101213188@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  int v4 = *a1;
  if (*a1 > 773)
  {
    if (v4 == 774)
    {
      std::string::size_type v5 = ".lzma";
      return sub_100134750(a2, v5);
    }
    if (v4 == 2049)
    {
      std::string::size_type v5 = ".lzfse";
      return sub_100134750(a2, v5);
    }
LABEL_9:
    std::string::size_type v5 = ".unk";
    return sub_100134750(a2, v5);
  }
  if (v4 == 256)
  {
    std::string::size_type v5 = ".lz4";
    return sub_100134750(a2, v5);
  }
  if (v4 != 517) {
    goto LABEL_9;
  }
  std::string::size_type v5 = ".zlib";
  return sub_100134750(a2, v5);
}

void sub_1012131F8(uint64_t *a1, std::string *this)
{
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  std::string::resize(this, 2 * v4, 32);
  BOOL v5 = *((char *)a1 + 23) < 0;
  uint64_t v6 = *((unsigned __int8 *)a1 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a1[1];
  }
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      if (v5) {
        uint64_t v9 = (uint64_t *)*a1;
      }
      else {
        uint64_t v9 = a1;
      }
      std::string::value_type v10 = byte_101DAE340[(unint64_t)*((unsigned __int8 *)v9 + v8) >> 4];
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = this;
      }
      else {
        int v11 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      v11->__r_.__value_.__s.__data_[v7] = v10;
      if (*((char *)a1 + 23) >= 0) {
        compression_status v12 = a1;
      }
      else {
        compression_status v12 = (uint64_t *)*a1;
      }
      std::string::value_type v13 = byte_101DAE340[*((unsigned char *)v12 + v8) & 0xF];
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = this;
      }
      else {
        std::string::size_type v14 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      v14->__r_.__value_.__s.__data_[v7 + 1] = v13;
      ++v8;
      BOOL v5 = *((char *)a1 + 23) < 0;
      unint64_t v15 = *((unsigned __int8 *)a1 + 23);
      if ((v15 & 0x80u) != 0) {
        unint64_t v15 = a1[1];
      }
      v7 += 2;
    }
    while (v8 < v15);
  }
}

void sub_1012132F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 32) = v6;
    uint64_t v7 = (compression_stream *)(a1 + 32);
    *(void *)(a1 + 48) = a2;
    *(void *)(a1 + 56) = a3;
    *(void *)(a1 + 40) = *(void *)(a1 + 16) - v6;
    compression_status v8 = compression_stream_process((compression_stream *)(a1 + 32), 0);
    if (v8 == COMPRESSION_STATUS_OK)
    {
      do
      {
        unint64_t v9 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
        unint64_t v10 = *(void *)(a1 + 40);
        unint64_t v11 = v9 - v10;
        if (v9 == v10)
        {
          if (!*(void *)(a1 + 56)) {
            return;
          }
        }
        else
        {
          if (v9 < v10)
          {
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102318920);
            }
            compression_status v12 = qword_1024194C8;
            if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
            {
              uint64_t v13 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
              *(_DWORD *)std::string buf = 134349312;
              *(void *)int v23 = v11;
              *(_WORD *)&char v23[8] = 2050;
              uint64_t v24 = v13;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "ProtobufCompressor,excessive bytes_to_print,%{public}zu,limit,%{public}zu", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194C0 != -1) {
                dispatch_once(&qword_1024194C0, &stru_102318920);
              }
              int v19 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::StreamingCompressor::write(const uint8_t *const, const size_t, std::ofstream &)", "%s\n", v19);
              if (v19 != (char *)buf) {
                free(v19);
              }
            }
          }
          if ((*((unsigned char *)a4 + *(void *)(*a4 - 24) + 32) & 5) != 0)
          {
            if (qword_1024194C0 != -1) {
              dispatch_once(&qword_1024194C0, &stru_102318920);
            }
            std::string::size_type v14 = qword_1024194C8;
            if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "ProtobufCompressor,write,bad stream", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024194C0 != -1) {
                dispatch_once(&qword_1024194C0, &stru_102318920);
              }
              unint64_t v15 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::write(const uint8_t *const, const size_t, std::ofstream &)", "%s\n", v15);
              if (v15 != (char *)buf) {
                free(v15);
              }
            }
          }
          else
          {
            std::ostream::write();
          }
          uint64_t v16 = *(void *)(a1 + 8);
          uint64_t v17 = *(void *)(a1 + 16) - v16;
          *(void *)(a1 + 32) = v16;
          *(void *)(a1 + 40) = v17;
        }
        compression_status v18 = compression_stream_process(v7, 0);
      }
      while (v18 == COMPRESSION_STATUS_OK);
      compression_status v8 = v18;
    }
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    unint64_t v20 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)int v23 = v8 == COMPRESSION_STATUS_END;
      *(_WORD *)&v23[4] = 1026;
      *(_DWORD *)&v23[6] = v8 == COMPRESSION_STATUS_ERROR;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "ProtobufCompressor,write,unexpected status,isEND,%{public}d,isERROR,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      unsigned __int8 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::StreamingCompressor::write(const uint8_t *const, const size_t, std::ofstream &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

uint64_t sub_101213834(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  sub_1004BFB3C((unint64_t *)(a1 + 8), 0x8000uLL);
  if (compression_stream_init((compression_stream *)(a1 + 32), COMPRESSION_STREAM_ENCODE, *(compression_algorithm *)a1))
  {
    if (qword_1024194C0 != -1) {
      dispatch_once(&qword_1024194C0, &stru_102318920);
    }
    BOOL v3 = qword_1024194C8;
    if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ProtobufCompressor,ctor,Could not init stream", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLProtobufSerializer::StreamingCompressor::StreamingCompressor(compression_algorithm)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_101213A08(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101213A28(uint64_t a1)
{
  sub_101213A64(a1);
  BOOL v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101213A64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    *(unsigned char *)(a1 + 72) = 0;
    if (compression_stream_destroy((compression_stream *)(a1 + 32)))
    {
      if (qword_1024194C0 != -1) {
        dispatch_once(&qword_1024194C0, &stru_102318920);
      }
      uint64_t v1 = qword_1024194C8;
      if (os_log_type_enabled((os_log_t)qword_1024194C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "ProtobufCompressor,failed to destroy stream", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024194C0 != -1) {
          dispatch_once(&qword_1024194C0, &stru_102318920);
        }
        BOOL v2 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLProtobufSerializer::StreamingCompressor::destroyStream()", "%s\n", v2);
        if (v2 != (char *)buf) {
          free(v2);
        }
      }
    }
  }
}

char *sub_101213C04(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000DC48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  uint64_t v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_1000DC48C(v7, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)uint64_t v7 = v8;
  }
  long long v9 = a2[6];
  *(_OWORD *)(__dst + 106) = *(long long *)((char *)a2 + 106);
  *((_OWORD *)__dst + 6) = v9;
  return __dst;
}

void sub_101213CF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101213D44(id a1)
{
  qword_1024194C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "PositionProto");
}

Class sub_101213D74()
{
  if (qword_102486458 != -1) {
    dispatch_once(&qword_102486458, &stru_102318940);
  }
  Class result = objc_getClass("SAPathManager");
  qword_102486450 = (uint64_t)result;
  off_102476FC8 = sub_101213DD8;
  return result;
}

uint64_t sub_101213DD8()
{
  return qword_102486450;
}

void sub_101213DE4(id a1)
{
  qword_102486460 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpaceAttribution.framework/SpaceAttribution", 2);
}

Class sub_101213E10()
{
  if (qword_102486458 != -1) {
    dispatch_once(&qword_102486458, &stru_102318940);
  }
  Class result = objc_getClass("SAPathInfo");
  qword_102486468 = (uint64_t)result;
  off_102476FD0 = sub_101213E74;
  return result;
}

uint64_t sub_101213E74()
{
  return qword_102486468;
}

std::string *sub_101213E80(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  sub_101213EE8(a1, a2, &a2[v3]);
  return a1;
}

void sub_101213ECC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_101213EE8(std::string *this, char *a2, char *a3)
{
  BOOL v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    std::string::size_type v14 = this;
    if ((v6 & 0x80) != 0) {
      std::string::size_type v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (int i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *int i = v16;
    }
    *int i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_1016FC410(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      compression_status v12 = __p;
    }
    else {
      compression_status v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_101214044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101214060(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL sub_101214488(uint64_t a1, void *a2, const void **a3)
{
  int v3 = *((char *)a2 + 23);
  int v4 = *((char *)a3 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v5 = (size_t)a3[1];
  }
  if (v4 >= 0) {
    char v6 = a3;
  }
  else {
    char v6 = *a3;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = a2[1];
  }
  if (v3 < 0) {
    a2 = (void *)*a2;
  }
  if (v7 >= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = v7;
  }
  int v9 = memcmp(v6, a2, v8);
  if (v9) {
    return v9 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_1012144F4(uint64_t a1, void *a2, uint64_t a3)
{
  if ((void *)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    size_t v7 = (void *)(a1 + 24);
    if ((void *)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      unint64_t v10 = (void *)a1;
      do
      {
        unint64_t v11 = (const void **)v10;
        unint64_t v10 = v7;
        if (sub_101214488(a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0;
          _DWORD v10[2] = 0;
          void *v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_101214488(a3, &v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        size_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_10121461C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    size_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        unint64_t v10 = (const void **)v6;
        char v6 = v7;
        if (sub_101214488(a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = (void *)v6[2];
          v6[1] = 0;
          _DWORD v6[2] = 0;
          *char v6 = 0;
          unint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = sub_101214488(a3, &v16, (const void **)v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = (void **)(v11 + 6);
          if (v14 < 0) {
            operator delete(*v15);
          }
          *(_OWORD *)int v15 = v16;
          void v15[2] = v17;
        }
        size_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_101214728(const void **a1, const void **a2, void *a3, uint64_t a4)
{
  BOOL v8 = sub_101214488(a4, a2, a1);
  uint64_t result = sub_101214488(a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_101214488(a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    unsigned __int8 v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_101214488(a4, a3, a2)) {
      return 1;
    }
    size_t v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    uint64_t v24 = (const void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  unint64_t v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = (const void *)a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_101214874(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_101214488(a3, &v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!sub_101214488(a3, &v16, v6));
  }
  else
  {
    size_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = sub_101214488(a3, &v16, v7);
      size_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_101214488(a3, &v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    _DWORD v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_101214488(a3, &v16, v6));
    do
      v4 -= 24;
    while (sub_101214488(a3, &v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

void *sub_101214A08(long long *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (sub_101214488(a3, (long long *)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!sub_101214488(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_101214488(a3, a2, (const void **)&v17));
  }
  BOOL v8 = (void *)((char *)a1 + v6);
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      uint64_t v20 = v8[2];
      uint64_t v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)BOOL v8 = *(_OWORD *)v9;
      _DWORD v8[2] = v12;
      void v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 3;
      while (sub_101214488(a3, v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_101214488(a3, v9, (const void **)&v17));
    }
    while (v8 < v9);
  }
  long long v13 = (void **)(v8 - 3);
  if (v8 - 3 == (void *)a1)
  {
    if (*((char *)v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(v8 - 1);
    *a1 = v14;
    *((unsigned char *)v8 - 1) = 0;
    *((unsigned char *)v8 - 24) = 0;
  }
  long long v15 = v17;
  *(v8 - 1) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 3;
}

BOOL sub_101214B98(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v8 = a2 - 3;
      if (sub_101214488(a3, a2 - 3, (const void **)a1))
      {
        long long v9 = *(const void **)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = v8[2];
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)BOOL v8 = v10;
        _DWORD v8[2] = v9;
      }
      return 1;
    case 3uLL:
      sub_101214728((const void **)a1, (const void **)(a1 + 24), a2 - 3, a3);
      return 1;
    case 4uLL:
      sub_101214DEC(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_101214ED8(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (const void **)(a1 + 72), a2 - 3, a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_101214728((const void **)a1, (const void **)(a1 + 24), (void *)(a1 + 48), a3);
      long long v13 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_101214488(a3, v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      long long v23 = v13[2];
      v13[1] = 0;
      v13[2] = 0;
      *long long v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = sub_101214488(a3, &v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 3 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 24;
    v13 += 3;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_101214DEC(uint64_t a1, const void **a2, const void **a3, void *a4, uint64_t a5)
{
  sub_101214728((const void **)a1, a2, a3, a5);
  if (sub_101214488(a5, a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    long long v13 = (const void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v13;
    *(_OWORD *)a4 = v12;
    a4[2] = v11;
    if (sub_101214488(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_101214488(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_101214ED8(uint64_t a1, const void **a2, const void **a3, const void **a4, void *a5, uint64_t a6)
{
  sub_101214DEC(a1, a2, a3, a4, a6);
  if (sub_101214488(a6, a5, a4))
  {
    long long v13 = a4[2];
    long long v14 = *(_OWORD *)a4;
    long long v15 = (const void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v15;
    *(_OWORD *)a5 = v14;
    a5[2] = v13;
    if (sub_101214488(a6, a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v18;
      *(_OWORD *)a4 = v17;
      a4[2] = v16;
      if (sub_101214488(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_101214488(a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          long long v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

void *sub_101214FFC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if ((void *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_101215248(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (sub_101214488(a4, v14, (const void **)a1))
        {
          uint64_t v15 = v14[2];
          long long v16 = *(_OWORD *)v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *(_OWORD *)long long v14 = *(_OWORD *)a1;
          int v14[2] = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_101215248(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = a2 - 3;
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = sub_1012153E4(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (void *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *(_OWORD *)v19;
          *(void *)(v23 + 16) = v19[2];
          *(_OWORD *)uint64_t v23 = v25;
          void *v19 = v20;
          v19[1] = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          sub_1012154C0(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_101215230(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_101215248(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_101214488(a2, (void *)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!sub_101214488(a2, (void *)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_101214488(a2, (void *)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_101214488(a2, (void *)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *long long v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1012153E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_101214488(a2, (void *)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_1012154C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (sub_101214488(a3, v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        long long *v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_101214488(a3, v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      *long long v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t sub_1012155C4(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_101215904(a1, "CMStrideCalRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_1023189F0;
  *(void *)(a1 + 72) = off_102318AA8;
  sub_100F03BA0((void *)(a1 + 424), 0, 0);
  sub_100F03BA0((void *)(a1 + 440), 0, 0);
  sub_100F03BA0((void *)(a1 + 456), 0, 0);
  sub_100F03BA0((void *)(a1 + 472), 0, 0);
  sub_100F03BA0((void *)(a1 + 488), 0, 0);
  sub_100F03BA0((void *)(a1 + 504), 0, 0);
  sub_100F03BA0((void *)(a1 + 520), 0, 0);
  sub_100F03BA0((void *)(a1 + 536), 0, 0);
  sub_100F03BA0((void *)(a1 + 552), 0, 0);
  sub_100F03BA0((void *)(a1 + 568), 0, 0);
  *(_OWORD *)(a1 + 584) = 0u;
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102318B38);
  }
  uint64_t v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CMStrideCalRecorderDb init", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102318B38);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMStrideCalRecorderDb::CMStrideCalRecorderDb(BOOL)", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  *(void *)(a1 + 160) = [[CMStrideCalRecorderCloudKitDelegate alloc] initWithStrideCalRecorderDb:a1];
  return a1;
}

void sub_1012158CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_101215DB0(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_101215904(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  long long v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *long long v12 = &off_1022B2C68;
  *(void *)a1 = off_102318B68;
  *(void *)(a1 + 72) = off_102318C10;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102318B68;
  *(void *)(a1 + 72) = off_102318C10;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 344) = 12000;
  *(void *)(a1 + 352) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 360));
  *(void *)(a1 + 360) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_101215D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *long long v27 = v30;
  sub_1003BE1F8(v31);
  sub_10080DB1C(v29);
  sub_1011F8AE0(v28);
  *long long v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_101215DA8()
{
}

void *sub_101215DB0(void *a1)
{
  *a1 = off_102318B68;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102318C10;
  a1[44] = off_1022B2C20;
  sub_1003BE1F8(a1 + 45);
  sub_10080DB1C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_101215E70(void *a1)
{
  *a1 = off_1023189F0;
  a1[9] = off_102318AA8;
  uint64_t v2 = (void *)a1[73];
  if (v2)
  {

    a1[73] = 0;
  }
  uint64_t v3 = (const void *)a1[74];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (void *)a1[20];
  if (v4)
  {

    a1[20] = 0;
  }

  return sub_101215DB0(a1);
}

void *sub_101215F14(uint64_t a1)
{
  return sub_101215E70((void *)(a1 - 72));
}

void sub_101215F1C(void *a1)
{
  sub_101215E70(a1);

  operator delete();
}

void sub_101215F54(uint64_t a1)
{
  sub_101215E70((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_101215F90()
{
  return -1;
}

uint64_t sub_101215F98()
{
  return -1;
}

uint64_t sub_101215FA0(uint64_t a1, void **a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v59[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v60 = 256;
  if (sub_100082064(v6))
  {
    uint64_t v42 = v5;
    sub_100082068((void *)(a1 + 440), v59);
    while (!sub_1012162D8(v59, (uint64_t)&v44))
    {
      int v7 = v44;
      uint64_t v8 = v45;
      int v9 = v46;
      uint64_t v10 = v47;
      uint64_t v11 = v48;
      uint64_t v13 = v49;
      uint64_t v12 = v50;
      uint64_t v14 = v51;
      int v15 = v52;
      int v16 = v53;
      uint64_t v18 = v54;
      uint64_t v17 = v55;
      int v19 = v56;
      uint64_t v20 = v57;
      int v21 = v58;
      uint64_t v22 = (char *)a2[1];
      uint64_t v23 = (char *)a2[2];
      if (v22 >= v23)
      {
        uint64_t v43 = v45;
        unint64_t v25 = 0xEEEEEEEEEEEEEEEFLL * ((v22 - (unsigned char *)*a2) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x222222222222222) {
          sub_1001D7FD4();
        }
        unint64_t v27 = 0xEEEEEEEEEEEEEEEFLL * ((v23 - (unsigned char *)*a2) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x111111111111111) {
          unint64_t v28 = 0x222222222222222;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          long long v29 = (char *)sub_10029BE4C((uint64_t)(a2 + 2), v28);
        }
        else {
          long long v29 = 0;
        }
        uint64_t v30 = &v29[120 * v25];
        *(_DWORD *)uint64_t v30 = v7;
        *((void *)v30 + 1) = v43;
        *((_DWORD *)v30 + 4) = v9;
        *((void *)v30 + 3) = v10;
        *((void *)v30 + 4) = v11;
        *((void *)v30 + 5) = v13;
        *((void *)v30 + 6) = v12;
        *((void *)v30 + 7) = v14;
        *((_DWORD *)v30 + 16) = v15;
        *((_DWORD *)v30 + 17) = v16;
        *((void *)v30 + 9) = v18;
        *((void *)v30 + 10) = v17;
        *((_DWORD *)v30 + 22) = v19;
        *((void *)v30 + 13) = v20;
        *((_DWORD *)v30 + 28) = v21;
        unint64_t v32 = (char *)*a2;
        unint64_t v31 = (char *)a2[1];
        int v33 = v30;
        if (v31 != *a2)
        {
          do
          {
            long long v34 = *(_OWORD *)(v31 - 120);
            long long v35 = *(_OWORD *)(v31 - 104);
            long long v36 = *(_OWORD *)(v31 - 88);
            *(_OWORD *)(v33 - 72) = *(_OWORD *)(v31 - 72);
            *(_OWORD *)(v33 - 88) = v36;
            *(_OWORD *)(v33 - 104) = v35;
            *(_OWORD *)(v33 - 120) = v34;
            long long v37 = *(_OWORD *)(v31 - 56);
            long long v38 = *(_OWORD *)(v31 - 40);
            long long v39 = *(_OWORD *)(v31 - 24);
            *((void *)v33 - 1) = *((void *)v31 - 1);
            *(_OWORD *)(v33 - 24) = v39;
            *(_OWORD *)(v33 - 40) = v38;
            *(_OWORD *)(v33 - 56) = v37;
            v33 -= 120;
            v31 -= 120;
          }
          while (v31 != v32);
          unint64_t v31 = (char *)*a2;
        }
        int v24 = v30 + 120;
        *a2 = v33;
        a2[1] = v30 + 120;
        a2[2] = &v29[120 * v28];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v22 = v44;
        *((void *)v22 + 1) = v8;
        *((_DWORD *)v22 + 4) = v9;
        *((void *)v22 + 3) = v10;
        *((void *)v22 + 4) = v11;
        *((void *)v22 + 5) = v13;
        *((void *)v22 + 6) = v12;
        *((void *)v22 + 7) = v14;
        *((_DWORD *)v22 + 16) = v15;
        *((_DWORD *)v22 + 17) = v16;
        *((void *)v22 + 9) = v18;
        *((void *)v22 + 10) = v17;
        *((_DWORD *)v22 + 22) = v19;
        *((void *)v22 + 13) = v20;
        int v24 = v22 + 120;
        *((_DWORD *)v22 + 28) = v21;
      }
      a2[1] = v24;
    }
    uint64_t v40 = v59[0];
    v59[0] = 0;
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
    uint64_t v5 = v42;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_101216280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1012162D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_101218EB0(a1, a2);
  return 0;
}

uint64_t sub_101216338(uint64_t a1)
{
  if (!sub_100082064(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 424), &v8);
  uint64_t v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    int v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_1012163E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101216424(uint64_t a1)
{
  return sub_101216338(a1 - 72);
}

void *sub_10121642C(uint64_t a1, void *a2, const void *a3)
{
  if (a3)
  {

    *(void *)(a1 + 584) = a2;
    uint64_t v6 = *(const void **)(a1 + 592);
    if (v6) {
      _Block_release(v6);
    }
    double result = _Block_copy(a3);
    *(void *)(a1 + 592) = result;
  }
  else
  {
    uint64_t v8 = sub_101AA7A58();
    return (void *)sub_10121648C(v8, v9);
  }
  return result;
}

uint64_t sub_10121648C(uint64_t a1, double a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v16[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v17 = 256;
  if (sub_100082064(v6))
  {
    sub_100082068((void *)(a1 + 488), v16);
    int v7 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
    if (sub_100055D58(v7, 1, a2))
    {
      uint64_t v8 = *(void *)(a1 + 80);
      double v9 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
      sub_10001FEB0(v8, v9);
      uint64_t v10 = *(void *)(a1 + 80);
      if (*(uint64_t *)(v10 + 88) <= 0) {
        uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v11 = *(void *)(v10 + 88);
      }
      sub_10003CC68(v10, v11);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102318B38);
      }
      uint64_t v12 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102318B38);
        }
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CMStrideCalRecorderDb::deleteRecordsBefore(CFTimeInterval)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    uint64_t v13 = v16[0];
    v16[0] = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_101216750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 8))(a6);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1012167B4(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  if (!a3) {
    return 0;
  }
  id v6 = objc_alloc_init((Class)NSMutableArray);
  int v7 = sub_101216A54(a1, a2, (uint64_t)v16);
  if (!v7)
  {
    do
    {
      uint64_t v15 = 0;
      uint64_t v8 = [[CLSerializableStrideCalEntry alloc] initWithStrideCalEntry:v16];
      double v9 = +[NSKeyedArchiver archivedDataWithRootObject:v8 requiringSecureCoding:1 error:&v15];
      if (v15)
      {
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102318B38);
        }
        uint64_t v10 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 138412290;
          uint64_t v20 = v15;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to serialize stride cal entry: %@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102318B38);
          }
          int v17 = 138412290;
          uint64_t v18 = v15;
          uint64_t v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CMStrideCalRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      else
      {
        [v6 addObject:v9];
      }

      int v12 = sub_101216A54(a1, a2, (uint64_t)v16);
    }
    while (!v12);
    int v7 = v12;
  }
  uint64_t v14 = (NSArray *)[v6 count];
  if (v14) {
    uint64_t v14 = +[NSArray arrayWithArray:v6];
  }
  *a3 = v14;

  return v7 == 1;
}

uint64_t sub_101216A54(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

BOOL sub_101216AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  id v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:a2 error:&v9];
  uint64_t v5 = v9;
  if (v9)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102318B38);
    }
    id v6 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize stride cal entry: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102318B38);
      }
      int v10 = 138412290;
      uint64_t v11 = v9;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CMStrideCalRecorderDb::dataBlobToEntry(NSData *, CLStrideCalEntry &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    [v4 getStrideCalEntry:a3];
  }
  return v5 == 0;
}

void sub_101216CE0(uint64_t a1)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_101216FAC(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "StrideCalHistory", (const char **)&qword_102486470, (const std::string::value_type **)&qword_102486770, 0);
    *(void *)(a1 + 424) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM StrideCalHistory");
    *(void *)(a1 + 432) = v2;
    *(void *)(a1 + 440) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StrideCalHistory ORDER BY startTime ASC");
    *(void *)(a1 + 448) = v3;
    *(void *)(a1 + 456) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StrideCalHistory WHERE pacebin == ? ORDER BY startTime DESC");
    *(void *)(a1 + 464) = v4;
    *(void *)(a1 + 472) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StrideCalHistory WHERE speed > ? AND speed <= ? ORDER BY startTime DESC");
    *(void *)(a1 + 480) = v5;
    *(void *)(a1 + 488) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM StrideCalHistory WHERE startTime < ?");
    *(void *)(a1 + 496) = v6;
    *(void *)(a1 + 504) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM StrideCalHistory WHERE startTime > ?");
    *(void *)(a1 + 512) = v7;
    *(void *)(a1 + 520) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM StrideCalHistory");
    *(void *)(a1 + 528) = v8;
    *(void *)(a1 + 536) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"INSERT INTO StrideCalHistory (startTime, pacebin, kvalue, kvalueTrack, score, endTime, distance, steps, session, speed, percentGrade, gpsSource, runningFormStrideLength, runningFormStrideLengthMetrics)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 544) = v9;
    *(void *)(a1 + 568) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StrideCalHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 576) = v10;
    *(void *)(a1 + 552) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"UPDATE StrideCalHistory SET startTime = startTime + ?");
    *(void *)(a1 + 560) = v11;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102318B38);
    }
    int v12 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102318B38);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CMStrideCalRecorderDb::prepareSQLStatements()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_101216FAC(uint64_t a1)
{
  if (sub_1005F93E4(*(void *)(a1 + 80), "StrideCalHistory"))
  {
    uint64_t v4 = "endTime";
    int v5 = 5;
    __int16 v6 = 0;
    char v7 = 0;
    char v8 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "StrideCalHistory", (uint64_t)"endTime", (uint64_t)&v4);
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102318B38);
  }
  uint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "StrideCalHistory table doesn't even exist", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102318B38);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CMStrideCalRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_1012176D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a28);
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  sub_101A129A8((uint64_t)&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_101217780(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 520), &v5);
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(v5);
    sub_10001FEB0(v3, v4);
    *(_DWORD *)(a1 + 132) = 0;
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_10121780C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101217828(uint64_t a1)
{
  return sub_101217780(a1 - 72);
}

uint64_t sub_101217830(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
    sub_100082068((void *)(a1 + 504), &v10);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v10);
    if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      char v7 = (sqlite3_stmt *)sub_10014D19C(v10);
      sub_10001FEB0(v6, v7);
      *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102318B38);
      }
      char v8 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102318B38);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CMStrideCalRecorderDb::deleteRecordsAfterInsertUL(const CLStrideCalEntry &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_101217A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101217AE0(uint64_t a1, double a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 552), &v10);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v10);
    if (sub_100055D58(v5, 1, a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      char v7 = (sqlite3_stmt *)sub_10014D19C(v10);
      sub_10001FEB0(v6, v7);
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102318B38);
      }
      char v8 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to shift records", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102318B38);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CMStrideCalRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_101217CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101217D3C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102318B38);
    }
    uint64_t v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      int v7 = *(_DWORD *)(a2 + 16);
      uint64_t v8 = *(void *)(a2 + 24);
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *(void *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 48);
      uint64_t v12 = *(void *)(a2 + 56);
      int v13 = *(_DWORD *)(a2 + 64);
      int v14 = *(_DWORD *)(a2 + 68);
      uint64_t v16 = *(void *)(a2 + 72);
      uint64_t v15 = *(void *)(a2 + 80);
      int v17 = *(_DWORD *)(a2 + 88);
      uint64_t v18 = *(void *)(a2 + 104);
      int v19 = *(_DWORD *)(a2 + 112);
      *(_DWORD *)std::string buf = 134352384;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v7;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v8;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v9;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = v10;
      *(_WORD *)int32x4_t v92 = 2050;
      *(void *)&v92[2] = v11;
      *(_WORD *)&v92[10] = 2048;
      *(void *)&v92[12] = v12;
      *(_WORD *)&v92[20] = 1024;
      *(_DWORD *)&unsigned char v92[22] = v13;
      *(_WORD *)&v92[26] = 1024;
      *(_DWORD *)&v92[28] = v14;
      *(_WORD *)uint64_t v93 = 2048;
      *(void *)&v93[2] = v16;
      *(_WORD *)&v93[10] = 2048;
      *(void *)&v93[12] = v15;
      *(_WORD *)&v93[20] = 1024;
      *(_DWORD *)&v93[22] = v17;
      *(_WORD *)&v93[26] = 2048;
      *(void *)&v93[28] = v18;
      *(_WORD *)&v93[36] = 1024;
      *(_DWORD *)&v93[38] = v19;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "StrideCalDb (%{public}f,%d,%f,%f,%f,%{public}f,%f,%d,%d,%f,%f,%d,%.2f,%d).", buf, 0x7Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102318B38);
      }
      uint64_t v40 = *(void *)(a2 + 8);
      int v41 = *(_DWORD *)(a2 + 16);
      uint64_t v42 = *(void *)(a2 + 24);
      uint64_t v43 = *(void *)(a2 + 32);
      uint64_t v44 = *(void *)(a2 + 40);
      uint64_t v45 = *(void *)(a2 + 48);
      uint64_t v46 = *(void *)(a2 + 56);
      int v47 = *(_DWORD *)(a2 + 64);
      int v48 = *(_DWORD *)(a2 + 68);
      uint64_t v50 = *(void *)(a2 + 72);
      uint64_t v49 = *(void *)(a2 + 80);
      int v51 = *(_DWORD *)(a2 + 88);
      uint64_t v52 = *(void *)(a2 + 104);
      int v53 = *(_DWORD *)(a2 + 112);
      *(_DWORD *)double v64 = 134352384;
      *(void *)&v64[4] = v40;
      __int16 v65 = 1024;
      int v66 = v41;
      __int16 v67 = 2048;
      uint64_t v68 = v42;
      __int16 v69 = 2048;
      uint64_t v70 = v43;
      __int16 v71 = 2048;
      uint64_t v72 = v44;
      __int16 v73 = 2050;
      uint64_t v74 = v45;
      __int16 v75 = 2048;
      uint64_t v76 = v46;
      __int16 v77 = 1024;
      int v78 = v47;
      __int16 v79 = 1024;
      int v80 = v48;
      __int16 v81 = 2048;
      uint64_t v82 = v50;
      __int16 v83 = 2048;
      uint64_t v84 = v49;
      __int16 v85 = 1024;
      int v86 = v51;
      __int16 v87 = 2048;
      uint64_t v88 = v52;
      __int16 v89 = 1024;
      int v90 = v53;
      uint64_t v54 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CMStrideCalRecorderDb::insertRecordUL(const CLStrideCalEntry &, BOOL)", "%s\n", v54);
      if (v54 != buf) {
        free(v54);
      }
    }
    long long v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)&v92[16] = *(_OWORD *)(a2 + 64);
    *(_OWORD *)uint64_t v93 = v20;
    *(_OWORD *)&v93[16] = *(_OWORD *)(a2 + 96);
    *(void *)&v93[32] = *(void *)(a2 + 112);
    long long v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)std::string buf = *(_OWORD *)a2;
    *(_OWORD *)&uint8_t buf[16] = v21;
    long long v22 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&unsigned char buf[32] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)int32x4_t v92 = v22;
    sub_100082068((void *)(a1 + 536), v64);
    uint64_t v23 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
    if (sub_100055D58(v23, 1, *(double *)(a2 + 8)))
    {
      int v24 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
      if (sub_100055B20(v24, 2, *(_DWORD *)(a2 + 16)))
      {
        unint64_t v25 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
        if (sub_100055D58(v25, 3, *(double *)(a2 + 24)))
        {
          unint64_t v26 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
          if (sub_100055D58(v26, 4, *(double *)(a2 + 32)))
          {
            unint64_t v27 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
            if (sub_100055D58(v27, 5, *(double *)(a2 + 40)))
            {
              unint64_t v28 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
              if (sub_100055D58(v28, 6, *(double *)(a2 + 48)))
              {
                long long v29 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                if (sub_100055D58(v29, 7, *(double *)(a2 + 56)))
                {
                  uint64_t v30 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                  if (sub_10014D1A4(v30, 8, *(_DWORD *)(a2 + 64)))
                  {
                    unint64_t v31 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                    if (sub_10014D1A4(v31, 9, *(_DWORD *)(a2 + 68)))
                    {
                      unint64_t v32 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                      if (sub_100055D58(v32, 10, *(double *)(a2 + 72)))
                      {
                        int v33 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                        if (sub_100055D58(v33, 11, *(double *)(a2 + 80)))
                        {
                          long long v34 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                          if (sub_10014D1A4(v34, 12, *(_DWORD *)(a2 + 88)))
                          {
                            long long v35 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                            if (sub_100055D58(v35, 13, *(double *)(a2 + 104)))
                            {
                              long long v36 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                              if (sub_10014D1A4(v36, 14, *(_DWORD *)(a2 + 112)))
                              {
                                uint64_t v37 = *(void *)(a1 + 80);
                                long long v38 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)v64);
                                sub_10001FEB0(v37, v38);
                                ++*(_DWORD *)(a1 + 132);
                                long long v39 = *(void **)(a1 + 584);
                                if (v39)
                                {
                                  if (*(void *)(a1 + 592))
                                  {
                                    v55[0] = _NSConcreteStackBlock;
                                    v55[1] = 3221225472;
                                    long long v60 = *(_OWORD *)&v92[16];
                                    long long v61 = *(_OWORD *)v93;
                                    long long v62 = *(_OWORD *)&v93[16];
                                    long long v56 = *(_OWORD *)buf;
                                    long long v57 = *(_OWORD *)&buf[16];
                                    long long v58 = *(_OWORD *)&buf[32];
                                    v55[2] = sub_1012182D0;
                                    v55[3] = &unk_102315CB0;
                                    v55[4] = a1;
                                    uint64_t v63 = *(void *)&v93[32];
                                    long long v59 = *(_OWORD *)v92;
                                    [v39 async:v55];
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = *(void *)v64;
    *(void *)double v64 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1012182AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1012182D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 592);
  long long v2 = *(_OWORD *)(a1 + 120);
  uint64_t v6[4] = *(_OWORD *)(a1 + 104);
  void v6[5] = v2;
  v6[6] = *(_OWORD *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  long long v3 = *(_OWORD *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 88);
  _DWORD v6[2] = *(_OWORD *)(a1 + 72);
  v6[3] = v4;
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v6);
}

uint64_t sub_10121833C()
{
  return 0;
}

uint64_t sub_101218344(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 568), &v19);
  uint64_t v4 = sub_1012162D8(&v19, (uint64_t)&v8);
  if (!v4)
  {
    *(_DWORD *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 24) = v11;
    *(_OWORD *)(a2 + 40) = v12;
    uint64_t v5 = v14;
    *(void *)(a2 + 56) = v13;
    *(void *)(a2 + 64) = v5;
    *(_OWORD *)(a2 + 72) = v15;
    *(_DWORD *)(a2 + 88) = v16;
    *(void *)(a2 + 104) = v17;
    *(_DWORD *)(a2 + 112) = v18;
  }
  uint64_t v6 = v19;
  uint64_t v19 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

void sub_101218428(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

NSArray *sub_101218444(uint64_t a1, double a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v71[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v72 = 256;
  std::string __p = 0;
  uint64_t v70 = 0;
  v71[0] = 0;
  if (sub_100082064(v6))
  {
    sub_100082068((void *)(a1 + 472), &v68);
    [+[CMPedometerTableRawSpeedToKValue sharedInstance] binIntervalForRawSpeed:a2];
    double v8 = v7;
    double v10 = v9;
    long long v11 = (sqlite3_stmt *)sub_10014D19C(v68);
    if (sub_10014D1A4(v11, 1, (int)v8))
    {
      long long v12 = (sqlite3_stmt *)sub_10014D19C(v68);
      if (sub_10014D1A4(v12, 2, (int)v10))
      {
        int v51 = v71;
        while (!sub_1012162D8(&v68, (uint64_t)&v53))
        {
          int v13 = v53;
          uint64_t v14 = v54;
          int v15 = v55;
          uint64_t v16 = v56;
          uint64_t v17 = v57;
          uint64_t v19 = v58;
          uint64_t v18 = v59;
          uint64_t v20 = v60;
          int v22 = v61;
          int v21 = v62;
          uint64_t v24 = v63;
          uint64_t v23 = v64;
          int v25 = v65;
          uint64_t v26 = v66;
          int v27 = v67;
          unint64_t v28 = v70;
          if ((unint64_t)v70 >= v71[0])
          {
            uint64_t v52 = v54;
            unint64_t v30 = 0xEEEEEEEEEEEEEEEFLL * ((v70 - (unsigned char *)__p) >> 3);
            unint64_t v31 = v30 + 1;
            if (v30 + 1 > 0x222222222222222) {
              sub_1001D7FD4();
            }
            if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v71[0] - (void)__p) >> 3) > v31) {
              unint64_t v31 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v71[0] - (void)__p) >> 3);
            }
            if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v71[0] - (void)__p) >> 3) >= 0x111111111111111) {
              unint64_t v32 = 0x222222222222222;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              int v33 = (char *)sub_10029BE4C((uint64_t)v71, v32);
            }
            else {
              int v33 = 0;
            }
            long long v34 = &v33[120 * v30];
            *(_DWORD *)long long v34 = v13;
            *((void *)v34 + 1) = v52;
            *((_DWORD *)v34 + 4) = v15;
            *((void *)v34 + 3) = v16;
            *((void *)v34 + 4) = v17;
            *((void *)v34 + 5) = v19;
            *((void *)v34 + 6) = v18;
            *((void *)v34 + 7) = v20;
            *((_DWORD *)v34 + 16) = v22;
            *((_DWORD *)v34 + 17) = v21;
            *((void *)v34 + 9) = v24;
            *((void *)v34 + 10) = v23;
            *((_DWORD *)v34 + 22) = v25;
            *((void *)v34 + 13) = v26;
            *((_DWORD *)v34 + 28) = v27;
            long long v36 = (char *)__p;
            long long v35 = v70;
            uint64_t v37 = v34;
            if (v70 != __p)
            {
              do
              {
                long long v38 = *(_OWORD *)(v35 - 120);
                long long v39 = *(_OWORD *)(v35 - 104);
                long long v40 = *(_OWORD *)(v35 - 88);
                *(_OWORD *)(v37 - 72) = *(_OWORD *)(v35 - 72);
                *(_OWORD *)(v37 - 88) = v40;
                *(_OWORD *)(v37 - 104) = v39;
                *(_OWORD *)(v37 - 120) = v38;
                long long v41 = *(_OWORD *)(v35 - 56);
                long long v42 = *(_OWORD *)(v35 - 40);
                long long v43 = *(_OWORD *)(v35 - 24);
                *((void *)v37 - 1) = *((void *)v35 - 1);
                *(_OWORD *)(v37 - 24) = v43;
                *(_OWORD *)(v37 - 40) = v42;
                *(_OWORD *)(v37 - 56) = v41;
                v37 -= 120;
                v35 -= 120;
              }
              while (v35 != v36);
              long long v35 = v36;
            }
            long long v29 = v34 + 120;
            std::string __p = v37;
            uint64_t v70 = v34 + 120;
            v71[0] = &v33[120 * v32];
            if (v35) {
              operator delete(v35);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v70 = v53;
            *((void *)v28 + 1) = v14;
            *((_DWORD *)v28 + 4) = v15;
            *((void *)v28 + 3) = v16;
            *((void *)v28 + 4) = v17;
            *((void *)v28 + 5) = v19;
            *((void *)v28 + 6) = v18;
            *((void *)v28 + 7) = v20;
            *((_DWORD *)v28 + 16) = v22;
            *((_DWORD *)v28 + 17) = v21;
            *((void *)v28 + 9) = v24;
            *((void *)v28 + 10) = v23;
            *((_DWORD *)v28 + 22) = v25;
            *((void *)v28 + 13) = v26;
            long long v29 = v28 + 120;
            *((_DWORD *)v28 + 28) = v27;
          }
          uint64_t v70 = v29;
        }
      }
    }
    uint64_t v45 = v68;
    uint64_t v68 = 0;
    if (v45) {
      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
    }
    unint64_t v44 = 0xEEEEEEEEEEEEEEEFLL * ((v70 - (unsigned char *)__p) >> 3);
  }
  else
  {
    unint64_t v44 = 0;
  }
  uint64_t v46 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", v44, v51);
  int v47 = (char *)__p;
  int v48 = v70;
  if (__p != v70)
  {
    do
    {
      [(NSMutableArray *)v46 addObject:+[NSData dataWithBytes:v47 length:120]];
      v47 += 120;
    }
    while (v47 != v48);
  }
  uint64_t v49 = +[NSArray arrayWithArray:v46];
  if (__p)
  {
    uint64_t v70 = (char *)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return v49;
}

void sub_101218804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_101218878(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StrideCalHistory WHERE (runningFormStrideLength > 0 AND sessiouint64_t n = ?);");
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102318B38);
  }
  long long v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[CMStrideCalRecorderDb] queryStrideLengthTracks: database inaccessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102318B38);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CMStrideCalRecorderDb::queryStrideLengthTracks(std::vector<CLStrideCalEntry> &) const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0;
}

void sub_101218DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101218E0C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "StrideCalHistory");
}

void *sub_101218E1C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "StrideCalHistory");
}

double sub_101218E2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_101218EB0(a2, (uint64_t)&v6);
  *(_DWORD *)a3 = v6;
  *(void *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 24) = v9;
  *(_OWORD *)(a3 + 40) = v10;
  uint64_t v4 = v12;
  *(void *)(a3 + 56) = v11;
  *(void *)(a3 + 64) = v4;
  *(_OWORD *)(a3 + 72) = v13;
  *(_DWORD *)(a3 + 88) = v14;
  double result = v15;
  *(double *)(a3 + 104) = v15;
  *(_DWORD *)(a3 + 112) = v16;
  return result;
}

uint64_t sub_101218EB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  int v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
  int v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  long long v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  long long v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 6);
  uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 7);
  uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 64) = sqlite3_column_int(v12, 8);
  long long v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 68) = sqlite3_column_int(v13, 9);
  int v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v14, 10);
  double v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v15, 11);
  int v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 88) = sqlite3_column_int(v16, 12);
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v17, 13);
  uint64_t v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t result = sqlite3_column_int(v18, 14);
  *(_DWORD *)(a2 + 104) = result;
  return result;
}

uint64_t sub_101219000(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    long long v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          long long v9 = __p;
        }
        else {
          long long v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AA7BE4(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1012194B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_101219534(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_10121B454(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102318C50);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)long long v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&void v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102318C50);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)long long v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102318C50);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLStrideCalEntry>::setDatabaseAccessible() [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_101219CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_101219CE0(uint64_t a1, long long *a2, char a3)
{
  v35[0] = (id)os_transaction_create();
  v35[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v35);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102318C50);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102318C50);
        }
        LOWORD(v36) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = v34;
    double v9 = v7 - v34;
    if (v7 - v34 < 0.0) {
      double v9 = -(v7 - v34);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102318C50);
      }
      long long v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)std::string buf = 134349312;
        double v41 = v34;
        __int16 v42 = 2050;
        uint64_t v43 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102318C50);
        }
        uint64_t v27 = *((void *)a2 + 1);
        int v36 = 134349312;
        double v37 = v34;
        __int16 v38 = 2050;
        uint64_t v39 = v27;
        unint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = v34;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102318C50);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)std::string buf = 134217984;
          double v41 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102318C50);
          }
          double v29 = *((double *)a2 + 1);
          int v36 = 134217984;
          double v37 = v29;
          unint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102318C50);
        double v17 = v32;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v41 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102318C50);
        }
        int v36 = 134217984;
        double v37 = v18;
        unint64_t v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, char *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v33, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  long long v22 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v22;
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
  long long v23 = a2[4];
  long long v24 = a2[5];
  long long v25 = a2[6];
  *(void *)(a1 + 336) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 288) = v23;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v35);
}

void sub_10121A50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
}

uint64_t sub_10121A538(uint64_t a1)
{
  return sub_101219534(a1 - 72);
}

void sub_10121A540(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10121A570(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AA7D54(v4);
    sub_1001D7FD4();
  }
  uint64_t v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_10121A9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  sub_101A129A8((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_10121AA60(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AA7EC4(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_10121ADD4(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA8034(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_10121B100(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA81A4(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_10121B424(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10121B454(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_10121B4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10121B4F0()
{
  qword_102486470 = (uint64_t)"id";
  dword_102486478 = 1;
  word_10248647C = 1;
  byte_102486480 = 0;
  byte_102486498 = 0;
  qword_1024864A0 = (uint64_t)"startTime";
  dword_1024864A8 = 2;
  word_1024864AC = 0;
  byte_1024864B0 = 0;
  byte_1024864C8 = 0;
  qword_1024864D0 = (uint64_t)"pacebin";
  dword_1024864D8 = 1;
  word_1024864DC = 0;
  byte_1024864E0 = 0;
  byte_1024864F8 = 0;
  qword_102486500 = (uint64_t)"kvalue";
  dword_102486508 = 2;
  word_10248650C = 0;
  byte_102486510 = 0;
  byte_102486528 = 0;
  qword_102486530 = (uint64_t)"kvalueTrack";
  dword_102486538 = 2;
  word_10248653C = 0;
  byte_102486540 = 0;
  byte_102486558 = 0;
  qword_102486560 = (uint64_t)"score";
  dword_102486568 = 2;
  word_10248656C = 0;
  byte_102486570 = 0;
  byte_102486588 = 0;
  qword_102486590 = (uint64_t)"endTime";
  dword_102486598 = 2;
  word_10248659C = 0;
  byte_1024865A0 = 0;
  byte_1024865B8 = 0;
  qword_1024865C0 = (uint64_t)"distance";
  dword_1024865C8 = 2;
  word_1024865CC = 0;
  byte_1024865D0 = 0;
  byte_1024865E8 = 0;
  qword_1024865F0 = (uint64_t)"steps";
  dword_1024865F8 = 1;
  word_1024865FC = 0;
  byte_102486600 = 0;
  byte_102486618 = 0;
  qword_102486620 = (uint64_t)"session";
  dword_102486628 = 1;
  word_10248662C = 0;
  byte_102486630 = 0;
  byte_102486648 = 0;
  qword_102486650 = (uint64_t)"speed";
  dword_102486658 = 2;
  word_10248665C = 0;
  byte_102486660 = 0;
  byte_102486678 = 0;
  qword_102486680 = (uint64_t)"percentGrade";
  dword_102486688 = 2;
  word_10248668C = 0;
  byte_102486690 = 0;
  byte_1024866A8 = 0;
  qword_1024866B0 = (uint64_t)"gpsSource";
  dword_1024866B8 = 1;
  word_1024866BC = 0;
  byte_1024866C0 = 0;
  byte_1024866D8 = 0;
  qword_1024866E0 = (uint64_t)"runningFormStrideLength";
  dword_1024866E8 = 2;
  word_1024866EC = 0;
  byte_1024866F0 = 0;
  byte_102486708 = 0;
  qword_102486710 = (uint64_t)"runningFormStrideLengthMetrics";
  dword_102486718 = 1;
  word_10248671C = 0;
  byte_102486720 = 0;
  byte_102486738 = 0;
  qword_102486740 = 0;
  dword_102486748 = 5;
  word_10248674C = 0;
  byte_102486750 = 0;
  byte_102486768 = 0;
  qword_102486770 = (uint64_t)"startTime";
  *(void *)algn_102486778 = 0;
}

uint64_t sub_10121B980(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 & 0x7FFF8) == 8)
    {
      uint64_t v12 = objc_alloc_init(TRANSITPbLocationFingerprintV1);
      [a1 addLocationFingerprint:v12];

      if (!PBReaderPlaceMark() || (sub_10100D8CC((uint64_t)v12, a2) & 1) == 0) {
        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10121C030(id a1)
{
  qword_102486798 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMotionStateObserverSilo"];
}

uint64_t sub_10121C0F0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10121C338;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_1024867A8 != -1) {
    dispatch_once(&qword_1024867A8, block);
  }
  return qword_10248B3A0;
}

uint64_t sub_10121C338()
{
  sub_100103240();
  if (sub_10010145C()) {
    operator new();
  }
  sub_100103240();
  uint64_t result = sub_10016CCBC();
  if (result) {
    operator new();
  }
  return result;
}

void sub_10121C3C4()
{
}

void sub_10121C3FC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10121C7A0(a1, "CLMotionStateObserver", a2);
  *(void *)uint64_t v3 = off_102318CA0;
  *(void *)(v3 + 109) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(v3 + 117) = 0;
  *(void *)(v3 + 133) = 0;
  *(void *)(v3 + 125) = 0;
  *(_DWORD *)(v3 + 141) = 0;
  id v4 = [*(id *)(v3 + 40) newTimer];
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v4;
  *(_WORD *)(a1 + 160) = 0;
  *(void *)(a1 + 162) = 0x10000000000000;
  *(void *)(a1 + 170) = 0;
  *(_DWORD *)(a1 + 178) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v5 = sub_1000D3E78();
  sub_10006B564(v5, &v6);
  sub_1000D2988(v6, "LogMotionStateReplay", (BOOL *)(a1 + 161));
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000B2C0C();
}

void sub_10121C6C0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 200);
  *(void *)(v1 + 200) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(v1 + 192);
  *(void *)(v1 + 192) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v2;
  *uint64_t v2 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_10121CEF0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10121C7A0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102318E88;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10121C830(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10121C84C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318E18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    unint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateObserver::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318E18);
    }
    char v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      unsigned __int8 v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      double v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateObserver::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  (*((void (**)(id *, uint64_t, uint64_t))*a4 + 27))(a4, a2, a3);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10121CA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10121CA48(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102318E18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    unint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateObserver::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102318E18);
    }
    char v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      unsigned __int8 v14 = "";
      __int16 v15 = 2082;
      uint64_t v16 = "activity";
      __int16 v17 = 2050;
      double v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateObserver::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  (*((void (**)(id *, uint64_t, uint64_t))*a4 + 28))(a4, a2, a3);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10121CC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10121CC44(uint64_t a1)
{
  uint64_t result = sub_1000D2E34(0);
  if (result)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102318E38);
    }
    uint64_t v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:*(unsigned int *)(a1 + 117)];
      uint64_t v5 = *(void *)(a1 + 162);
      int v6 = *(_DWORD *)(a1 + 170);
      int v7 = *(_DWORD *)(a1 + 174);
      *(_DWORD *)std::string buf = 134218752;
      id v13 = v4;
      __int16 v14 = 2048;
      uint64_t v15 = v5;
      __int16 v16 = 1024;
      int v17 = v6;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MotionStateObserver, Sending Down ActivityOverride,%ld,startTime,%.3f,activityType,%d,vehicularConfidence,%d", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102318E38);
      }
      +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:*(unsigned int *)(a1 + 117)];
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserver::updateCoprocessor()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v8 = sub_1000D2E34(0);
    unint64_t v9 = sub_10092C998((unint64_t)+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:*(unsigned int *)(a1 + 117)]);
    (*(void (**)(uint64_t, unint64_t, void))(*(void *)(v8 + 56) + 24))(v8 + 56, v9, *(unsigned int *)(a1 + 125));
    uint64_t v10 = sub_1000D2E34(0);
    return (*(uint64_t (**)(void))(*(void *)(v10 + 56) + 48))();
  }
  return result;
}

uint64_t sub_10121CEF0(uint64_t a1)
{
  *(void *)a1 = off_102318E88;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10121CF74(uint64_t a1)
{
  *(void *)a1 = off_102318CA0;
  [*(id *)(a1 + 152) invalidate];

  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 108) = 1;
  uint64_t v2 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return sub_10121CEF0(a1);
}

void sub_10121D07C(uint64_t a1)
{
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 108) = 1;
}

uint64_t sub_10121D0B8(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_DWORD *)(a1 + 141) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 125) = v4;
  *(_OWORD *)(a1 + 109) = v3;
  uuid_copy((unsigned __int8 *)(a1 + 129), (const unsigned __int8 *)a2 + 20);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102318E38);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 109);
    uint64_t v7 = CLMotionActivity::activityTypeToString();
    uint64_t v8 = CLMotionActivity::activityTypeToString();
    int v9 = *(_DWORD *)(a1 + 125);
    *(_DWORD *)std::string buf = 134218754;
    uint64_t v13 = v6;
    __int16 v14 = 2080;
    uint64_t v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    __int16 v18 = 1024;
    int v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Started session, startTime, %.3f, user type, %s, predicted type, %s, hk activity type, %i", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102318E38);
    }
    CLMotionActivity::activityTypeToString();
    CLMotionActivity::activityTypeToString();
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserver::startSession(const CLWorkoutUpdate &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  sub_10121D318(a1);
  return sub_10121D3D8(a1);
}

uint64_t sub_10121D318(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 125);
  long long v5 = *(_OWORD *)(a1 + 109);
  long long v6 = v2;
  int v7 = *(_DWORD *)(a1 + 141);
  uuid_copy((unsigned __int8 *)&v6 + 4, (const unsigned __int8 *)(a1 + 129));
  int v4 = 0;
  (*(void (**)(uint64_t, int *, long long *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v4, &v5, 1, 0xFFFFFFFFLL, 0);
  return sub_10121CC44(a1);
}

uint64_t sub_10121D3D8(uint64_t result)
{
  if (*(unsigned char *)(result + 161))
  {
    uint64_t v1 = result;
    uint64_t v10 = off_1022E6CF0;
    int v13 = *(_DWORD *)(result + 117);
    uint64_t v12 = *(void *)(result + 109);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v2 = sub_101282D9C();
    sub_10128431C(v2, (uint64_t)&v10);
    sub_10170140C(v7);
    sub_1017272D8((uint64_t)v7);
    v9 |= 1u;
    *(CFAbsoluteTime *)&v7[77] = Current;
    uint64_t v3 = v8;
    uint64_t v4 = *(void *)(v1 + 109);
    *(unsigned char *)(v8 + 20) |= 1u;
    *(void *)(v3 + 8) = v4;
    uint64_t v5 = v8;
    int v6 = *(_DWORD *)(v1 + 117);
    *(unsigned char *)(v8 + 20) |= 2u;
    *(_DWORD *)(v5 + 16) = v6;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_102318E58);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v7);
    }
    return sub_101706914((PB::Base *)v7);
  }
  return result;
}

void sub_10121D4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10121D504(uint64_t a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102318E38);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 109);
    uint64_t v4 = CLMotionActivity::activityTypeToString();
    uint64_t v5 = CLMotionActivity::activityTypeToString();
    int v6 = *(_DWORD *)(a1 + 125);
    *(_DWORD *)std::string buf = 134218754;
    uint64_t v10 = v3;
    __int16 v11 = 2080;
    uint64_t v12 = v4;
    __int16 v13 = 2080;
    uint64_t v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Stopped session, startTime, %.3f, user type, %s, predicted type, %s, hk activity type, %i", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102318E38);
    }
    CLMotionActivity::activityTypeToString();
    CLMotionActivity::activityTypeToString();
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserver::stopSession()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(void *)(a1 + 109) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 117) = 0;
  *(void *)(a1 + 133) = 0;
  *(void *)(a1 + 125) = 0;
  *(_DWORD *)(a1 + 141) = 0;
  sub_10121D318(a1);
  return sub_10121D3D8(a1);
}

uint64_t sub_10121D75C(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(_DWORD *)(a1 + 178) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 162) = v2;
  return sub_10121CC44(a1);
}

void *sub_10121D770@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_10121D7EC()
{
  return 1;
}

uint64_t sub_10121D7F4()
{
  return 1;
}

uint64_t sub_10121D7FC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_102318F68;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_10121D8E0()
{
}

void sub_10121D99C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_10121D9DC(uint64_t a1)
{
  sub_10121DAC8(a1);

  operator delete();
}

id sub_10121DA14(uint64_t a1, int a2, void *a3)
{
  id result = sub_1004FB414(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10121DA64(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10121DA94(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10121DAC8(uint64_t a1)
{
  *(void *)a1 = &off_102318F68;
  long long v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *long long v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_10121DB38()
{
  sub_100134750(qword_102486780, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486780, (void *)&_mh_execute_header);
}

uint64_t sub_10121DB98(double *a1)
{
  sub_1010832A8((uint64_t)v3, *a1, a1[1]);
  uint64_t v1 = *(void *)&v3[4];
  if (v5 < 0) {
    operator delete(__p);
  }
  return v1;
}

uint64_t *sub_10121DBE0(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10121DC20(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10079021C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10121DC74(uint64_t *a1)
{
  return sub_100790598(*a1);
}

uint64_t sub_10121DC7C(uint64_t *a1)
{
  sub_10014DDEC(*a1, &__p);
  long long v2 = (unsigned int *)__p;
  uint64_t v3 = v17;
  if (__p == v17)
  {
    uint64_t v4 = 0;
    if (!__p) {
      return v4;
    }
    goto LABEL_16;
  }
  LODWORD(v4) = 0;
  do
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318F80);
    }
    char v5 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = sub_1006D40B0(v2);
      int v7 = sub_100C8D88C((uint64_t)v2);
      *(_DWORD *)std::string buf = 67174913;
      int v23 = v6;
      __int16 v24 = 1025;
      int v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "remaining header in db, deleting, x, %{private}d, y, %{private}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318F80);
      }
      int v11 = sub_1006D40B0(v2);
      int v12 = sub_100C8D88C((uint64_t)v2);
      int v18 = 67174913;
      int v19 = v11;
      __int16 v20 = 1025;
      int v21 = v12;
      id v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLWifiTileDataRepository::removeAllTileHeaders()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t v8 = *a1;
    int v9 = sub_1006D40B0(v2);
    int v10 = sub_100C8D88C((uint64_t)v2);
    *(_DWORD *)std::string buf = v9;
    int v23 = v10;
    if ((sub_100790E64(v8) & 1) == 0)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to delete tile header");
    }
    uint64_t v4 = (v4 + 1);
    v2 += 36;
  }
  while (v2 != v3);
  long long v2 = (unsigned int *)__p;
  if (__p)
  {
LABEL_16:
    uint64_t v17 = v2;
    operator delete(v2);
  }
  return v4;
}

void sub_10121DF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10121DF88(uint64_t *a1)
{
}

uint64_t sub_10121DF90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  (*(void (**)(uint64_t *))(a1[1] + 16))(a1 + 1);
  sub_10019D9A4(*a1, (uint64_t)v7);
  if ((sub_10121E580(a1, a2) & 1) == 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to delete tile.");
  }
  sub_1001A8894(v7);
  (*(void (**)(uint64_t *))(*v4 + 24))(v4);
  return 1;
}

#error "10121E508: call analysis failed (funcsize=261)"

uint64_t sub_10121E580(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 4);
  uint64_t v2 = sub_100790E64(*a1);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102318F80);
  }
  uint64_t v3 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67175425;
    int v8 = v6;
    __int16 v9 = 1025;
    int v10 = HIDWORD(v6);
    __int16 v11 = 1024;
    int v12 = v2;
    __int16 v13 = 1024;
    int v14 = 1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "deleting tile, x, %{private}d, y, %{private}d, header, %d, tile, %d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318F80);
    }
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTileDataRepository::_deleteByTileIdNoTransaction(const TileId &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return v2;
}

void sub_10121E794(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10121E7A0(double a1)
{
  double v1 = a1;
  sub_1010AC700();
}

void sub_10121EAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
}

void sub_10121EB34(uint64_t *a1)
{
}

void sub_10121EB54(uint64_t *a1@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
}

uint64_t sub_10121EB5C(uint64_t *a1)
{
  return sub_10079064C(*a1);
}

void sub_10121EB64(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
}

uint64_t sub_10121EB6C(uint64_t *a1)
{
  return sub_100791D5C(*a1);
}

uint64_t sub_10121EB74(uint64_t *a1, int a2)
{
  return sub_100792200(*a1, a2);
}

uint64_t sub_10121EB7C(uint64_t *a1, int a2)
{
  return sub_100792C38(*a1, a2);
}

void sub_10121EB84(uint64_t *a1)
{
}

void sub_10121EB8C(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_10121EBC0()
{
}

__n128 sub_10121EBD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_102318FB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10121EC28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102318FB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10121EC60(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (*(unsigned char *)(*(void *)(a1 + 16) + 144)) {
    sub_101AA84A8();
  }
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  int v7 = *a4;
  int v8 = *a3;
  uint64_t v9 = **(void **)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(a2 + 192);
  int v12 = (int *)(a2 + 20);
  int v11 = *(_DWORD *)(a2 + 20);
  int v14 = (int *)(a2 + 16);
  int v13 = *(_DWORD *)(a2 + 16);
  int v15 = sub_1002D4CD0(**(void **)(a1 + 32));
  sub_100C8D960(v46, v11, v13, v7, v15);
  sub_100C8D84C((uint64_t)&v38, *v12, *v14, v10, *(_DWORD *)(a2 + 12), *(void *)(a2 + 196), v8, *(_DWORD *)(a2 + 24), *(float *)(a2 + 28), *(float *)(a2 + 32), *(float *)(a2 + 36), *(float *)(a2 + 40), *(float *)(a2 + 44), *(float *)(a2 + 48), *(float *)(a2 + 52), *(double *)&v9, v9, 0, v46[0],
    v46[1]);
  sub_10014F62C((double *)&v38, (uint64_t)v35);
  if (sub_1001447B8(v35))
  {
    if (sub_10121E580(v6, (uint64_t)v35))
    {
      if (sub_100790660(*v6))
      {
        uint64_t v16 = *(void *)(a1 + 16);
        if (*(unsigned char *)(v16 + 144))
        {
          *(_OWORD *)uint64_t v16 = v38;
          long long v17 = v39;
          long long v18 = v40;
          long long v19 = v42;
          *(_OWORD *)(v16 + 48) = v41;
          *(_OWORD *)(v16 + 64) = v19;
          *(_OWORD *)(v16 + 16) = v17;
          *(_OWORD *)(v16 + 32) = v18;
          long long v20 = v43;
          long long v21 = v44;
          long long v22 = *(_OWORD *)v45;
          *(_OWORD *)(v16 + 124) = *(_OWORD *)&v45[12];
          *(_OWORD *)(v16 + 96) = v21;
          *(_OWORD *)(v16 + 112) = v22;
          *(_OWORD *)(v16 + 80) = v20;
        }
        else
        {
          *(_OWORD *)uint64_t v16 = v38;
          long long v29 = v39;
          long long v30 = v40;
          long long v31 = v42;
          *(_OWORD *)(v16 + 48) = v41;
          *(_OWORD *)(v16 + 64) = v31;
          *(_OWORD *)(v16 + 16) = v29;
          *(_OWORD *)(v16 + 32) = v30;
          long long v32 = v43;
          long long v33 = v44;
          long long v34 = *(_OWORD *)&v45[16];
          *(_OWORD *)(v16 + 112) = *(_OWORD *)v45;
          *(_OWORD *)(v16 + 128) = v34;
          *(_OWORD *)(v16 + 80) = v32;
          *(_OWORD *)(v16 + 96) = v33;
          *(unsigned char *)(v16 + 144) = 1;
        }
        goto LABEL_41;
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318F80);
      }
      unint64_t v28 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "failed to save tile header", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193B0 == -1) {
          goto LABEL_38;
        }
        goto LABEL_45;
      }
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318F80);
      }
      uint64_t v27 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "failed to delete previous tile before inserting new one", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193B0 == -1)
        {
LABEL_38:
          *(_WORD *)std::string buf = 0;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "auto CLWifiTileDataRepository::saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const CLTilesManager_Type::TileHeader &, int, uint32_t, uint32_t) const", "%s\n", v26);
          if (v26 == (char *)__p) {
            goto LABEL_41;
          }
          goto LABEL_39;
        }
LABEL_45:
        dispatch_once(&qword_1024193B0, &stru_102318F80);
        goto LABEL_38;
      }
    }
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102318F80);
    }
    int v23 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
    {
      sub_100C094CC((uint64_t)v35);
      __int16 v24 = v52 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136380675;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Invalid tile ID in saveWifiTileAccessPointEntries: %{private}s, #CloneMe", buf, 0xCu);
      if (v52 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102318F80);
      }
      sub_100C094CC((uint64_t)v35);
      if (v48 >= 0) {
        int v25 = buf;
      }
      else {
        int v25 = *(unsigned char **)buf;
      }
      int v49 = 136380675;
      uint64_t v50 = v25;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      if (v48 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLWifiTileDataRepository::saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const CLTilesManager_Type::TileHeader &, int, uint32_t, uint32_t) const", "%s\n", v26);
      if (v26 != (char *)__p) {
LABEL_39:
      }
        free(v26);
    }
  }
LABEL_41:
  if (v37 < 0) {
    operator delete(v36);
  }
}

void sub_10121F25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10121F298(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10121F2D8()
{
}

double sub_10121F2E4(uint64_t a1)
{
  *(void *)(a1 + 32) = &_mh_execute_header;
  *(_OWORD *)(a1 + 40) = xmmword_101DAE724;
  *(_OWORD *)(a1 + 56) = unk_101DAE734;
  *(_OWORD *)(a1 + 72) = xmmword_101DAE744;
  *(_OWORD *)(a1 + 88) = unk_101DAE754;
  *(void *)(a1 + 104) = 0x3FDB28C83F4D0FC7;
  *(void *)(a1 + 112) = 0x8C00000000;
  *(void *)(a1 + 1800) = 0x8C00000000;
  *(void *)(a1 + 3488) = 0x8C00000000;
  *(void *)(a1 + 5176) = 0x8C00000000;
  *(_DWORD *)(a1 + 6864) = 0;
  *(void *)&double result = 1052320862;
  *(_OWORD *)(a1 + 6868) = xmmword_101DAE700;
  *(void *)(a1 + 6888) = 7;
  *(void *)(a1 + 6896) = 7;
  *(_DWORD *)(a1 + 6944) = 0;
  *(_OWORD *)(a1 + 6948) = xmmword_101DAE700;
  *(void *)(a1 + 6968) = 7;
  *(void *)(a1 + 6976) = 7;
  *(_DWORD *)(a1 + 6904) = 0;
  int64x2_t v2 = vdupq_n_s64(7uLL);
  *(_OWORD *)(a1 + 6908) = xmmword_101DAE700;
  *(int64x2_t *)(a1 + 6928) = v2;
  *(_DWORD *)(a1 + 6984) = 0;
  *(_OWORD *)(a1 + 6988) = xmmword_101DAE700;
  *(int64x2_t *)(a1 + 7008) = v2;
  return result;
}

uint64_t sub_10121F390(uint64_t a1, uint64_t a2, double a3, double a4)
{
  sub_100B5C68C((float32x2_t *)(a1 + 6864), (float32x2_t *)a2);
  uint64_t v8 = *(void *)(a1 + 6896) - 1;
  *(void *)(a1 + 6896) = v8;
  if (!v8)
  {
    *(void *)(a1 + 6896) = *(void *)(a1 + 6888);
    int v9 = *(_DWORD *)(a1 + 6880);
    uint64_t v20 = *(void *)(a1 + 6872);
    int v21 = v9;
    sub_100659A48((unsigned __int16 *)(a1 + 112), (uint64_t)&v20);
  }
  sub_100B5C68C((float32x2_t *)(a1 + 6944), (float32x2_t *)(a2 + 24));
  uint64_t v10 = *(void *)(a1 + 6976) - 1;
  *(void *)(a1 + 6976) = v10;
  if (!v10)
  {
    *(void *)(a1 + 6976) = *(void *)(a1 + 6968);
    int v11 = *(_DWORD *)(a1 + 6960);
    uint64_t v20 = *(void *)(a1 + 6952);
    int v21 = v11;
    sub_100659A48((unsigned __int16 *)(a1 + 1800), (uint64_t)&v20);
  }
  sub_100B5C68C((float32x2_t *)(a1 + 6904), (float32x2_t *)(a2 + 12));
  uint64_t v12 = *(void *)(a1 + 6936) - 1;
  *(void *)(a1 + 6936) = v12;
  if (!v12)
  {
    *(void *)(a1 + 6936) = *(void *)(a1 + 6928);
    int v13 = *(_DWORD *)(a1 + 6920);
    uint64_t v20 = *(void *)(a1 + 6912);
    int v21 = v13;
    sub_100659A48((unsigned __int16 *)(a1 + 3488), (uint64_t)&v20);
  }
  sub_100B9BD60((float *)(a2 + 36), (float *)&v20);
  v18.i32[0] = sub_10126D71C((uint64_t)&v20);
  v18.i32[1] = v14;
  int v19 = v15;
  sub_100B5C68C((float32x2_t *)(a1 + 6984), &v18);
  uint64_t v16 = *(void *)(a1 + 7016) - 1;
  *(void *)(a1 + 7016) = v16;
  if (!v16)
  {
    *(void *)(a1 + 7016) = *(void *)(a1 + 7008);
    sub_100659A48((unsigned __int16 *)(a1 + 5176), (uint64_t)&v18);
  }
  *(double *)(a1 + 7024) = a4;
  *(double *)(a1 + 7032) = a3;
  return 1;
}

float sub_10121F4F4(uint64_t a1, float a2)
{
  double v2 = *(double *)(a1 + 7032);
  if (*(_DWORD *)(a1 + 1804) == *(unsigned __int16 *)(a1 + 1802))
  {
    sub_100428940((uint64_t)v20, 0.07, 0.75, 1.2, 4.6);
    unint64_t v5 = vcvtas_u32_f32((float)(a2 * 4.0) / 0.07);
    if (v5 <= 0x47) {
      LODWORD(v5) = 71;
    }
    BOOL v6 = (int)v5 / -2 < -70 || (int)v5 / 2 == 70;
    int v7 = (int)v5 / 2;
    if (v6) {
      int v8 = -70;
    }
    else {
      int v8 = -v7;
    }
    if (v7 >= 69) {
      int v7 = 69;
    }
    sub_10121F7F0(v20, (unsigned __int16 *)(a1 + 5176), (v8 + 70), v7 + 70);
    float v10 = v9;
    float v12 = v11;
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_102319078);
    }
    int v13 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)(a1 + 7024);
      uint64_t v15 = *(void *)(a1 + 7032);
      *(_DWORD *)std::string buf = 134219008;
      double v31 = v10;
      __int16 v32 = 2048;
      double v33 = v12;
      __int16 v34 = 2048;
      uint64_t v35 = v14;
      __int16 v36 = 2048;
      uint64_t v37 = v15;
      __int16 v38 = 2048;
      double v39 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Period Estimate Update,period,%f,confidence,%f,timestamp,%f,startTime,%f,periodEstimate,%f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_102319078);
      }
      uint64_t v17 = *(void *)(a1 + 7024);
      uint64_t v18 = *(void *)(a1 + 7032);
      v20[6] = 3.8524e-34;
      double v21 = v10;
      __int16 v22 = 2048;
      double v23 = v12;
      __int16 v24 = 2048;
      uint64_t v25 = v17;
      __int16 v26 = 2048;
      uint64_t v27 = v18;
      __int16 v28 = 2048;
      double v29 = a2;
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSwimClassifier::PeriodEstimate CLSwimClassifier::estimatePeriod(float) const", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  return v2;
}

void sub_10121F7F0(float *a1, unsigned __int16 *a2, unint64_t a3, unint64_t a4)
{
  if (a4 >= 0x8B) {
    unint64_t v7 = 139;
  }
  else {
    unint64_t v7 = a4;
  }
  HIDWORD(v25) = 0;
  bzero(v29, 0x230uLL);
  float v8 = 1.0;
  if (*a1 != 0.0) {
    float v8 = 1.0 - expf((float)-a1[1] / *a1);
  }
  unint64_t v9 = 0;
  float v10 = -v8;
  if (v7 >= a3) {
    uint64_t v11 = v7 - a3;
  }
  else {
    uint64_t v11 = 0;
  }
  do
  {
    if (v7 <= a3)
    {
      unint64_t v16 = 0;
    }
    else
    {
      float v12 = 0.0;
      int v13 = v27;
      unint64_t v14 = a3;
      do
      {
        uint64_t v15 = sub_100659D10(a2, v14);
        float v12 = v12 + (float)(v10 * (float)(v12 - sub_1004E30E4(v15, v9)));
        *v13++ = v12;
        ++v14;
      }
      while (v7 != v14);
      unint64_t v16 = v7 - a3;
    }
    sub_10126D660(v27, v16);
    sub_10126D6A4((uint64_t)v27, v28, v16, 1);
    float v17 = sub_100428978((uint64_t)a1, (uint64_t)v28, v16);
    v26[v9] = v17;
    if (v16)
    {
      uint64_t v18 = (float *)v29;
      int v19 = v28;
      uint64_t v20 = v11;
      do
      {
        float v21 = *v19++;
        float *v18 = *v18 + (float)(v17 * v21);
        ++v18;
        --v20;
      }
      while (v20);
    }
    ++v9;
  }
  while (v9 != 3);
  float v22 = (float)(v26[0] + v26[1]) + v26[2];
  if (v22 >= 0.00000011921)
  {
    if (v16)
    {
      uint64_t v23 = v7 - a3;
      if (v7 < a3) {
        uint64_t v23 = 0;
      }
      __int16 v24 = (float *)v29;
      do
      {
        *__int16 v24 = *v24 / v22;
        ++v24;
        --v23;
      }
      while (v23);
    }
    sub_100428A08((uint64_t)a1, (uint64_t)v29, (float *)&v25 + 1, v16);
  }
}

uint64_t sub_10121F9E8(uint64_t a1, float a2)
{
  uint64_t v3 = sub_10121FBE4(a1, v25, (uint64_t)v12, &v11, a2);
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_102319078);
  }
  uint64_t v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 7032);
    uint64_t v6 = *(void *)(a1 + 7024);
    *(_DWORD *)std::string buf = 67109632;
    int v20 = v3;
    __int16 v21 = 2048;
    uint64_t v22 = v5;
    __int16 v23 = 2048;
    uint64_t v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "ClassificationResult,%d,startTime,%f,timestamp,%f", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_102319078);
    }
    uint64_t v8 = *(void *)(a1 + 7032);
    uint64_t v9 = *(void *)(a1 + 7024);
    int v13 = 67109632;
    int v14 = v3;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    float v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSwimStyleType CLSwimClassifier::classify(float)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return v3;
}

uint64_t sub_10121FBE4(uint64_t a1, float *a2, uint64_t a3, unsigned char *a4, float a5)
{
  *a4 = 0;
  sub_10121F4F4(a1, a5);
  *(void *)a3 = v10;
  *(_DWORD *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 12) = v12;
  BOOL v13 = *((float *)&v10 + 1) >= 0.5 && *((float *)&v10 + 1) <= 5.5;
  if (v13 && *(float *)&v10 >= 0.2 && (unsigned int v14 = llroundf(*((float *)&v10 + 1) / 0.07), v14 < 0x8D))
  {
    int v15 = 0;
  }
  else
  {
    unsigned int v14 = llroundf((float)(a5 * 0.5) / 0.07);
    int v15 = 1;
  }
  unint64_t v16 = 2 * v14;
  if (v16 > 0x8C) {
    unint64_t v16 = (int)v14;
  }
  *(void *)(a1 + 16) = v16;
  if (v16 > *(unsigned __int16 *)(a1 + 114)) {
    return 0;
  }
  BOOL v13 = (int)v16 / -2 < -70 || (int)v16 / 2 == 70;
  int v17 = (int)v16 / 2;
  if (v13) {
    int v18 = -70;
  }
  else {
    int v18 = -v17;
  }
  uint64_t v19 = (v18 + 70);
  if (v17 >= 69) {
    int v17 = 69;
  }
  int v20 = v17 + 70;
  unsigned int v21 = v20 - v19 + 1;
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v20;
  if (v14 >= v21) {
    unsigned int v14 = v20 - v19 + 1;
  }
  *(void *)(a1 + 16) = (int)v21;
  *(void *)(a1 + 24) = (int)v14;
  *a4 = 1;
  sub_10121FE0C(a1, a2);
  if (*a2 < -0.64) {
    return 0;
  }
  if (*a2 <= 0.67)
  {
    unint64_t v23 = 0;
    uint64_t v24 = (float *)&dword_101DAE778;
    do
    {
      unint64_t v25 = v23;
      if (v23 == 13) {
        break;
      }
      float v26 = a2[v23 + 1];
      if (v26 < *(v24 - 1)) {
        break;
      }
      float v27 = *v24;
      v24 += 2;
      ++v23;
    }
    while (v26 <= v27);
    BOOL v22 = v25 < 0xD;
  }
  else
  {
    BOOL v22 = 1;
  }
  if ((v15 | v22)) {
    return 0;
  }

  return sub_1012202D4(a1, (int32x2_t *)a2);
}

uint64_t sub_10121FDD4(uint64_t a1, uint64_t a2, float *a3, float a4)
{
  unsigned __int8 v5 = 0;
  sub_10121FBE4(a1, a3, a2, &v5, a4);
  return v5;
}

void sub_10121FE0C(uint64_t a1, float *a2)
{
  double v2 = a2;
  int v4 = *(_DWORD *)(a1 + 36);
  float v5 = 1.0;
  if (*(_DWORD *)(a1 + 32) == v4) {
    float v6 = -1.0;
  }
  else {
    float v6 = 1.0;
  }
  if (!v4) {
    float v5 = -1.0;
  }
  float v53 = v5;
  float v54 = v6;
  v75[0] = 0;
  v75[1] = 0;
  int v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  int v79 = 0;
  uint64_t v80 = 0;
  uint64_t v74 = 0;
  memset(v73, 0, 44);
  unint64_t v7 = *(void *)a1;
  if (*(void *)a1 <= *(void *)(a1 + 8))
  {
    uint64_t v16 = 0;
    float v55 = 0.0;
    float v17 = 1.1755e-38;
    float v18 = 3.4028e38;
    float v19 = 0.0;
    float v20 = 0.0;
    float v61 = 1.1755e-38;
    float v63 = 3.4028e38;
    float v59 = 1.1755e-38;
    float v60 = 3.4028e38;
    float v58 = 0.0;
    float v11 = 1.1755e-38;
    float v69 = 0.0;
    float v70 = 1.1755e-38;
    float v68 = 1.1755e-38;
    float v10 = 3.4028e38;
    float v12 = 1.1755e-38;
    float v13 = 3.4028e38;
    float v14 = 3.4028e38;
    float v15 = 1.1755e-38;
    do
    {
      float v65 = v20;
      float v67 = v19;
      unsigned int v21 = (float *)sub_100659D10((unsigned __int16 *)(a1 + 1800), v7);
      BOOL v22 = (float *)sub_100659D10((unsigned __int16 *)(a1 + 112), v7);
      unint64_t v23 = (float *)sub_100659D10((unsigned __int16 *)(a1 + 3488), v7);
      uint64_t v24 = 0;
      float v26 = *v21;
      float v25 = v21[1];
      float v27 = 0.0;
      float v28 = v21[2];
      do
      {
        float v27 = v27 + (float)(v22[v24] * v22[v24]);
        ++v24;
      }
      while (v24 != 3);
      float v30 = v59;
      float v29 = v60;
      if (v60 > v26) {
        float v29 = *v21;
      }
      if (v59 < v26) {
        float v30 = *v21;
      }
      float v32 = v61;
      float v31 = v63;
      if (v63 > v25) {
        float v31 = v21[1];
      }
      if (v61 < v25) {
        float v32 = v21[1];
      }
      if (v18 > v28) {
        float v18 = v21[2];
      }
      if (v17 < v28) {
        float v17 = v21[2];
      }
      float v56 = v18;
      float v57 = v17;
      float v33 = sqrtf(v27);
      float v34 = 0.0;
      float v61 = v32;
      float v63 = v31;
      float v59 = v30;
      float v60 = v29;
      if (v33 == 0.0)
      {
        float v35 = 0.0;
      }
      else
      {
        float v35 = v22[1] / v33;
        float v55 = v55 + (float)(*v22 / v33);
      }
      float v58 = v58 + v33;
      unint64_t v36 = v16 + 1;
      sub_101220A24((float *)v75, v25, v35, v33);
      sub_10082BF38((uint64_t)v73, v21[1], v35);
      for (uint64_t i = 0; i != 3; ++i)
        float v34 = v34 + (float)(v23[i] * v23[i]);
      v82[v16] = sqrtf(v34);
      float v38 = v23[2];
      float v20 = v65 + fabsf(v38);
      float v39 = (float)(v38 * v38) + (float)(*v23 * *v23);
      float v41 = *v22;
      float v40 = v22[1];
      float v42 = fabsf(v40);
      float v19 = v67 + v42;
      if (v14 > v42) {
        float v14 = v42;
      }
      if (v15 < v42) {
        float v15 = v42;
      }
      float v43 = sqrtf(v39);
      if (v10 > v43) {
        float v10 = v43;
      }
      if (v11 < v43) {
        float v11 = v43;
      }
      if (v13 > (float)(v53 * v41)) {
        float v13 = v53 * v41;
      }
      if (v12 < (float)(v54 * v40)) {
        float v12 = v54 * v40;
      }
      float v44 = fabsf(v41);
      float v45 = v68;
      if (v68 < v44) {
        float v45 = v44;
      }
      float v68 = v45;
      float v69 = v69 + (float)(v41 * v41);
      float v46 = v70;
      if (v70 < v42) {
        float v46 = v42;
      }
      float v70 = v46;
      ++v7;
      ++v16;
      float v18 = v56;
      float v17 = v57;
    }
    while (v7 <= *(void *)(a1 + 8));
    double v2 = a2;
    a2[12] = (float)((float)((float)(v59 - v60) + (float)(v61 - v63)) + (float)(v57 - v56)) / 3.0;
    if (v36)
    {
      int v9 = 0;
      float v62 = (float)v36;
      float v8 = v58 / (float)v36;
    }
    else
    {
      float v8 = 0.0;
      float v62 = 0.0;
      int v9 = 1;
    }
    float v64 = v20;
    float v66 = v67 + v42;
  }
  else
  {
    a2[12] = -INFINITY;
    float v8 = 0.0;
    float v55 = 0.0;
    int v9 = 1;
    float v10 = 3.4028e38;
    float v11 = 1.1755e-38;
    float v64 = 0.0;
    float v66 = 0.0;
    float v69 = 0.0;
    float v70 = 1.1755e-38;
    float v68 = 1.1755e-38;
    float v62 = 0.0;
    float v12 = 1.1755e-38;
    float v13 = 3.4028e38;
    float v14 = 3.4028e38;
    float v15 = 1.1755e-38;
  }
  v2[13] = v8;
  v2[1] = (float)(v54 * v53) * sub_101220AAC((uint64_t)v75);
  v2[4] = (float)(v54 * v53) * sub_10082C168((uint64_t)v73);
  *double v2 = (float)(v53 * v55) / (float)*(unint64_t *)(a1 + 16);
  sub_101220908((unint64_t *)a1, v82, (uint64_t)v2);
  float v47 = v54 * v2[3];
  v2[9] = v54 * v2[9];
  float v48 = v64 / v66;
  float v49 = 0.0;
  if (v66 == 0.0) {
    float v48 = 0.0;
  }
  void v2[2] = v48;
  v2[3] = v47;
  float v50 = 0.0;
  if ((float)(v15 - v14) != 0.0) {
    float v50 = (float)(v11 - v10) / (float)(v15 - v14);
  }
  v2[5] = v50;
  v2[6] = v12;
  float v51 = v68 / v70;
  if (v70 == 0.0) {
    float v51 = 0.0;
  }
  v2[7] = v13;
  v2[8] = v51;
  if (!v9) {
    float v49 = v69 / v62;
  }
  v2[11] = sqrtf(v49);
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  sub_101220B6C(a1, (uint64_t)v82, &v72, &v71, v81);
  v2[10] = sub_101220D78(a1, v82, v72, v71, (uint64_t)v81);
}

uint64_t sub_1012202D4(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v52 = vrev64_s32(*a2);
  __int32 v3 = a2[1].i32[0];
  __int32 v53 = a2[1].i32[1];
  __int32 v4 = a2[4].i32[1];
  v47[0] = a2[4].i32[0];
  v47[1] = v3;
  float v5 = *(float *)&a2[2].i32[1];
  v47[2] = a2[2].i32[0];
  v47[3] = v4;
  v47[4] = fminf(v5, 0.475);
  *(int32x2_t *)&long long v6 = vrev64_s32(a2[3]);
  *((int32x2_t *)&v6 + 1) = vrev64_s32(a2[5]);
  long long v48 = v6;
  sub_100081994((uint64_t)&v52, &v49, (int *)(a1 + 40), 3, 3);
  uint64_t v7 = 2;
  sub_100081994((uint64_t)v47, v46, (int *)(a1 + 72), 2, 9);
  if (v51 <= 0.5)
  {
    if (v50 <= 0.725)
    {
      if (v46[0] <= 0.5) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = 4;
      }
    }
    else
    {
      uint64_t v7 = 3;
    }
  }
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_102319078);
  }
  float v8 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
  {
    int v9 = (&off_102319020)[v7];
    uint64_t v10 = *(void *)(a1 + 7024);
    uint64_t v11 = *(void *)(a1 + 7032);
    *(_DWORD *)std::string buf = 136318978;
    float v15 = v9;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 2080;
    float v19 = "tier1_0";
    __int16 v20 = 2048;
    double v21 = v49;
    __int16 v22 = 2080;
    unint64_t v23 = "tier1_1";
    __int16 v24 = 2048;
    double v25 = v50;
    __int16 v26 = 2080;
    float v27 = "tier1_2";
    __int16 v28 = 2048;
    double v29 = v51;
    __int16 v30 = 2080;
    float v31 = "tier2_0";
    __int16 v32 = 2048;
    double v33 = v46[0];
    __int16 v34 = 2080;
    float v35 = "tier2_1";
    __int16 v36 = 2048;
    double v37 = v46[1];
    __int16 v38 = 2080;
    float v39 = "timestamp";
    __int16 v40 = 2048;
    uint64_t v41 = v10;
    __int16 v42 = 2080;
    float v43 = "startTime";
    __int16 v44 = 2048;
    uint64_t v45 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Classification,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f", buf, 0x9Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_102319078);
    }
    float v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSwimStyleType CLSwimClassifier::runTieredClassifiers(const float (&)[14]) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return v7;
}

void sub_101220734(uint64_t a1, void *a2)
{
  *(void *)(a1 + 32) = *a2;
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_102319078);
  }
  __int32 v3 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 32);
    int v5 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)std::string buf = 67109376;
    int v8 = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Swimming device orientation set,wrist,%d,crown,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_102319078);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimClassifier::setDeviceOrientation(const CLGizmoOrientation &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

unint64_t *sub_101220908(unint64_t *result, float *a2, uint64_t a3)
{
  int v4 = a2;
  int v5 = result;
  unint64_t v6 = result[2];
  float v7 = 0.0;
  float v8 = 0.0;
  if (v6)
  {
    uint64_t v9 = 0;
    float v10 = 0.0;
    do
      float v10 = v10 + a2[v9++];
    while (v6 != v9);
    float v8 = v10 / (float)v6;
  }
  unint64_t v11 = *result;
  float v12 = 0.0;
  float v13 = 0.0;
  float v14 = 0.0;
  if (*result <= result[1])
  {
    float v7 = 0.0;
    do
    {
      if (*v4 > v8)
      {
        float v15 = (float *)sub_100659D10((unsigned __int16 *)v5 + 900, v11);
        float v7 = v7 + *v4;
        float v12 = v12 + (float)(*v4 * *v15);
      }
      double result = (unint64_t *)sub_100659D10((unsigned __int16 *)v5 + 900, v11);
      float v16 = *v4++;
      float v13 = v13 + v16;
      float v14 = v14 + (float)(v16 * *(float *)result);
      ++v11;
    }
    while (v11 <= v5[1]);
  }
  float v17 = v12 / v7;
  if (v7 == 0.0) {
    float v17 = 0.0;
  }
  *(float *)(a3 + 12) = v17;
  float v18 = v14 / v13;
  if (v13 == 0.0) {
    float v18 = 0.0;
  }
  *(float *)(a3 + 36) = v18;
  return result;
}

float sub_101220A24(float *a1, float a2, float a3, float a4)
{
  if (a4 <= 0.0)
  {
    uint64_t v9 = *(void *)a1;
  }
  else
  {
    float v4 = a1[4];
    float v5 = v4 + a4;
    float v6 = a1[2];
    float v7 = (float)((float)(a2 - v6) * a4) / (float)(v4 + a4);
    float v8 = a1[3] + (float)((float)(v4 * (float)(a2 - v6)) * v7);
    a1[2] = v6 + v7;
    a1[3] = v8;
    a1[4] = v5;
    uint64_t v9 = *(void *)a1;
    float v10 = a1[10];
    float v11 = v10 + a4;
    float v12 = a1[8];
    float v13 = (float)((float)(a3 - v12) * a4) / (float)(v10 + a4);
    float v14 = a1[9] + (float)((float)(v10 * (float)(a3 - v12)) * v13);
    a1[8] = v12 + v13;
    a1[9] = v14;
    a1[10] = v11;
  }
  *(void *)a1 = v9 + 1;
  ++*((void *)a1 + 3);
  return sub_101221098((uint64_t)(a1 + 12), a2, a3, a4);
}

float sub_101220AAC(uint64_t a1)
{
  float v1 = 0.0;
  float v2 = 0.0;
  if (*(void *)a1 >= 2uLL)
  {
    float v3 = *(float *)(a1 + 16);
    if (v3 != 0.0) {
      float v2 = (float)((float)*(unint64_t *)a1 / (float)(unint64_t)(*(void *)a1 - 1))
    }
         * (float)(*(float *)(a1 + 12) / v3);
  }
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4 >= 2)
  {
    float v5 = *(float *)(a1 + 40);
    if (v5 != 0.0) {
      float v1 = (float)((float)v4 / (float)(v4 - 1)) * (float)(*(float *)(a1 + 36) / v5);
    }
  }
  float v6 = v2 * v1;
  float result = 0.0;
  if (v6 > 0.0)
  {
    unint64_t v8 = *(void *)(a1 + 64);
    if (v8 >= 2)
    {
      float v9 = *(float *)(a1 + 72);
      if (v9 != 0.0) {
        float result = (float)((float)v8 / (float)((float)v8 + -1.0)) * (float)(*(float *)(a1 + 56) / v9);
      }
    }
    return result / sqrtf(v6);
  }
  return result;
}

void sub_101220B6C(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, float *a5)
{
  unint64_t v9 = *(void *)(a1 + 24);
  if (v9 >= 5)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 4;
    float v12 = 3.4028e38;
    do
    {
      float v13 = 0.0;
      unint64_t v14 = v10;
      do
        float v13 = v13 + *(float *)(a2 + 4 + 4 * v14++);
      while (v14 < v11);
      if (v13 < v12)
      {
        *a3 = v11;
        unint64_t v9 = *(void *)(a1 + 24);
        float v12 = v13;
      }
      ++v11;
      ++v10;
    }
    while (v11 < v9);
  }
  uint64_t v15 = *a3 - 2;
  *a3 = v15;
  float v16 = *(float *)sub_100659D10((unsigned __int16 *)(a1 + 5176), *(void *)a1 + v15);
  float v17 = *(float *)(sub_100659D10((unsigned __int16 *)(a1 + 5176), *(void *)a1 + *a3) + 4);
  float v18 = sqrtf((float)(v16 * v16) + (float)(v17 * v17));
  if (v18 > 0.00000011921)
  {
    float v16 = v16 / v18;
    float v17 = v17 / v18;
  }
  unint64_t v19 = *(void *)a1;
  if (*(void *)a1 <= *(void *)(a1 + 8))
  {
    __int16 v20 = a5;
    do
    {
      float v21 = *(float *)sub_100659D10((unsigned __int16 *)(a1 + 5176), v19);
      float v22 = *(float *)(sub_100659D10((unsigned __int16 *)(a1 + 5176), v19) + 4);
      float v23 = sqrtf((float)(v21 * v21) + (float)(v22 * v22));
      if (v23 > 0.00000011921)
      {
        float v21 = v21 / v23;
        float v22 = v22 / v23;
      }
      *v20++ = acosf(fmaxf(fminf((float)(v17 * v22) + (float)(v16 * v21), 1.0), -1.0));
      ++v19;
    }
    while (v19 <= *(void *)(a1 + 8));
  }
  unint64_t v24 = *a3;
  unint64_t v25 = *(void *)(a1 + 24) + *a3;
  if (v25 >= *(void *)(a1 + 16)) {
    unint64_t v25 = *(void *)(a1 + 16);
  }
  if (v24 >= v25)
  {
    unint64_t v28 = *a3;
  }
  else
  {
    float v26 = -3.4028e38;
    unint64_t v27 = *a3;
    unint64_t v28 = *a3;
    do
    {
      if (a5[v27] > v26)
      {
        float v26 = a5[v27];
        unint64_t v28 = v27;
      }
      ++v27;
    }
    while (v25 != v27);
  }
  *a3 = *(void *)a1 + v24;
  *a4 = *(void *)a1 + v28;
}

float sub_101220D78(uint64_t a1, float *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    float v11 = 1.1755e-38;
    goto LABEL_9;
  }
  float v11 = 1.1755e-38;
  float v12 = a2;
  do
  {
    float v13 = *v12++;
    float v14 = v13;
    if (v11 < v13) {
      float v11 = v14;
    }
    --v10;
  }
  while (v10);
  float v15 = 0.0;
  if (v11 != 0.0)
  {
LABEL_9:
    unint64_t v16 = *(void *)a1;
    float v15 = 0.0;
    if (*(void *)a1 >= *(void *)(a1 + 8))
    {
      int v20 = 1;
      float v18 = 0.0;
      float v21 = 0.0;
    }
    else
    {
      unint64_t v17 = 0;
      float v18 = 0.0;
      do
      {
        uint64_t v19 = sub_100659D10((unsigned __int16 *)(a1 + 112), v16 + v17);
        float v18 = v18 + (float)(*(float *)(v19 + 4) * *(float *)(v19 + 4));
        ++v17;
      }
      while (v16 + v17 < *(void *)(a1 + 8));
      if (v17)
      {
        int v20 = 0;
        float v21 = (float)v17;
        float v22 = v18 / (float)v17;
        goto LABEL_17;
      }
      float v21 = 0.0;
      int v20 = 1;
    }
    float v22 = 0.0;
LABEL_17:
    if (sqrtf(v22) != 0.0)
    {
      uint64_t v23 = a4 - a3;
      float v24 = 0.0;
      float v25 = 0.0;
      if (a4 - a3 != -1)
      {
        unint64_t v26 = a3 - *(void *)a1;
        uint64_t v27 = v23 + 1;
        unint64_t v28 = a3;
        do
        {
          if (v26 >= *(void *)(a1 + 16)) {
            unint64_t v29 = 0;
          }
          else {
            unint64_t v29 = v26;
          }
          if (v28 > *(void *)(a1 + 8)) {
            unint64_t v28 = *(void *)a1;
          }
          uint64_t v30 = sub_100659D10((unsigned __int16 *)(a1 + 112), v28);
          float v31 = 0.0;
          if ((float)(a2[v29] / v11) > 0.1) {
            float v31 = *(float *)(a5 + 4 * v29);
          }
          float v24 = v24 + v31;
          float v25 = v25 + (float)(v31 * (float)(*(float *)(v30 + 4) * *(float *)(v30 + 4)));
          unint64_t v26 = v29 + 1;
          ++v28;
          --v27;
        }
        while (v27);
        uint64_t v32 = *(void *)(a1 + 24);
        unint64_t v33 = v32 + a3;
        unint64_t v34 = a3 - *(void *)a1 + v32;
        uint64_t v35 = v23 + 1;
        do
        {
          if (v34 >= *(void *)(a1 + 16)) {
            unint64_t v36 = 0;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v33 > *(void *)(a1 + 8)) {
            unint64_t v33 = *(void *)a1;
          }
          uint64_t v37 = sub_100659D10((unsigned __int16 *)(a1 + 112), v33);
          float v38 = 0.0;
          if ((float)(a2[v36] / v11) > 0.1) {
            float v38 = *(float *)(a5 + 4 * v36);
          }
          float v24 = v24 + v38;
          float v25 = v25 + (float)(v38 * (float)(*(float *)(v37 + 4) * *(float *)(v37 + 4)));
          unint64_t v34 = v36 + 1;
          ++v33;
          --v35;
        }
        while (v35);
      }
      float v39 = v25 / v24;
      if (v24 == 0.0) {
        float v39 = 0.0;
      }
      float v40 = sqrtf(v39);
      float v41 = v18 / v21;
      if (v20) {
        float v41 = 0.0;
      }
      return v40 / sqrtf(v41);
    }
  }
  return v15;
}

double sub_101220FD8(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_101220FE4(uint64_t result, int a2)
{
  if (a2)
  {
    if (a2 != 7)
    {
      ++*(_DWORD *)(result + 28);
      ++*(_DWORD *)(result + 4 * a2);
    }
  }
  return result;
}

uint64_t sub_101221010(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 28);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  int v4 = 0;
  do
  {
    if (*(_DWORD *)(a1 + 4 * v2) > v4)
    {
      int v4 = *(_DWORD *)(a1 + 4 * v2);
      unsigned int v3 = v2;
    }
    ++v2;
  }
  while (v2 != 7);
  if ((float)((float)v4 / (float)v1) <= 0.5) {
    return 5;
  }
  else {
    return v3;
  }
}

void sub_101221068(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

float sub_101221098(uint64_t a1, float result, float a3, float a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    if (a4 > 0.0)
    {
      float v5 = *(float *)(a1 + 24);
      float v6 = *(float *)(a1 + 4);
      float v7 = v5 + a4;
      float v8 = *(float *)(a1 + 8)
         + (float)((float)((float)((float)(v5 * a4) / (float)(v5 + a4)) * (float)(result - (float)(*(float *)a1 / v5)))
                 * (float)(a3 - (float)(v6 / v5)));
      double result = *(float *)a1 + (float)(a4 * result);
      *(float *)a1 = result;
      *(float *)(a1 + 4) = v6 + (float)(a4 * a3);
      *(float *)(a1 + 8) = v8;
      *(float *)(a1 + 24) = v7;
    }
    *(void *)(a1 + 16) = v4 + 1;
  }
  else if (a4 > 0.0)
  {
    *(float *)(a1 + 24) = a4;
    double result = result * a4;
    *(float *)a1 = result;
    *(float *)(a1 + 4) = a3 * a4;
    *(void *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

std::string *sub_101221120(std::string *__str, uint64_t a2)
{
  std::string::operator=((std::string *)(a2 + 40), __str);
  std::string::operator=((std::string *)(a2 + 64), __str + 1);
  std::string::operator=((std::string *)(a2 + 88), __str + 2);
  std::string::operator=((std::string *)(a2 + 112), __str + 4);
  std::string::operator=((std::string *)(a2 + 136), __str + 5);
  double result = std::string::operator=((std::string *)(a2 + 160), __str + 6);
  *(unsigned char *)(a2 + 188) = __str[7].__r_.__value_.__s.__data_[0];
  return result;
}

uint64_t sub_101221194(double a1)
{
  if (a1 <= 5.0) {
    return 1;
  }
  if (a1 <= 10.0) {
    return 2;
  }
  if (a1 <= 15.0) {
    return 3;
  }
  if (a1 <= 20.0) {
    return 4;
  }
  if (a1 <= 30.0) {
    return 5;
  }
  if (a1 <= 40.0) {
    return 6;
  }
  if (a1 <= 50.0) {
    return 7;
  }
  if (a1 <= 70.0) {
    return 8;
  }
  if (a1 <= 100.0) {
    return 9;
  }
  if (a1 <= 200.0) {
    return 10;
  }
  if (a1 <= 300.0) {
    return 11;
  }
  return 12;
}

uint64_t sub_101221294(double a1)
{
  if (a1 <= 0.1) {
    return 1;
  }
  if (a1 <= 0.2) {
    return 2;
  }
  if (a1 <= 0.35) {
    return 3;
  }
  if (a1 <= 0.5) {
    return 4;
  }
  if (a1 <= 0.75) {
    return 5;
  }
  if (a1 <= 1.0) {
    return 6;
  }
  if (a1 <= 1.5) {
    return 7;
  }
  if (a1 <= 2.0) {
    return 8;
  }
  if (a1 <= 3.0) {
    return 9;
  }
  if (a1 <= 4.0) {
    return 10;
  }
  if (a1 <= 5.0) {
    return 11;
  }
  if (a1 <= 10.0) {
    int v1 = 0;
  }
  else {
    int v1 = 14;
  }
  if (a1 > 10.0) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = 13;
  }
  if (a1 > 7.0) {
    return v2;
  }
  else {
    return 12;
  }
}

id sub_1012213A8(int a1, int a2, int a3, int a4, int a5, float a6)
{
  float v12 = [+[NSCalendar currentCalendar](NSCalendar, "currentCalendar") components:28 fromDate:+[NSDate date]];
  float v13 = v12;
  if (a3 >= 1 && a4 >= 1 && a5 >= 1)
  {
    [(NSDateComponents *)v12 setYear:a5];
    [(NSDateComponents *)v13 setMonth:a4];
    [(NSDateComponents *)v13 setDay:a3];
  }
  [(NSDateComponents *)v13 setHour:a1];
  [(NSDateComponents *)v13 setMinute:a2];
  [(NSDateComponents *)v13 setSecond:(uint64_t)a6];
  [(NSDateComponents *)v13 setTimeZone:+[NSTimeZone timeZoneForSecondsFromGMT:0]];
  float v14 = [+[NSCalendar currentCalendar] dateFromComponents:v13];

  return [(NSDate *)v14 timeIntervalSinceReferenceDate];
}

void sub_1012214C8(uint64_t *a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 4);
  a1[2] = *(void *)(a2 + 28);
  a1[3] = *(void *)(a2 + 44);
  a1[4] = *(void *)(a2 + 60);
  a1[5] = *(void *)(a2 + 20);
  a1[6] = *(void *)(a2 + 36);
  a1[8] = *(void *)(a2 + 52);
  a1[7] = *(void *)(a2 + 68);
  a1[9] = *(void *)(a2 + 184);
  a1[10] = *(void *)(a2 + 504);
  *((_DWORD *)a1 + 22) = *(_DWORD *)(a2 + 132);
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_102319098);
  }
  uint64_t v4 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a2 + 96);
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    uint64_t v8 = a1[2];
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    uint64_t v11 = a1[5];
    uint64_t v13 = a1[8];
    uint64_t v12 = a1[9];
    uint64_t v14 = a1[6];
    uint64_t v15 = a1[7];
    uint64_t v16 = a1[10];
    int v17 = *((_DWORD *)a1 + 22);
    *(_DWORD *)std::string buf = 134352129;
    uint64_t v20 = v12;
    __int16 v21 = 1026;
    int v22 = v5;
    __int16 v23 = 2049;
    uint64_t v24 = v6;
    __int16 v25 = 2049;
    uint64_t v26 = v7;
    __int16 v27 = 2050;
    uint64_t v28 = v8;
    __int16 v29 = 2050;
    uint64_t v30 = v9;
    __int16 v31 = 2050;
    uint64_t v32 = v10;
    __int16 v33 = 2050;
    uint64_t v34 = v11;
    __int16 v35 = 2050;
    uint64_t v36 = v14;
    __int16 v37 = 2050;
    uint64_t v38 = v13;
    __int16 v39 = 2050;
    uint64_t v40 = v15;
    __int16 v41 = 2050;
    uint64_t v42 = v16;
    __int16 v43 = 1026;
    int v44 = v17;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,DeviceLocationData,type,%{public}d,ll,%{private}.7lf,%{private}.7lf,alt,%{public}.2lf,speed,%{public}.2lf,course,%{public}.2lf,hUnc,%{public}.2lf,vUnc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,mct,%{public}.1lf,refFrame,%{public}d", buf, 0x7Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    float v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void DeviceLocationData::fillData(const CLLocationProvider_Type::NotificationData &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
}

void sub_1012217EC(uint64_t a1, std::string *a2, int a3)
{
  sub_101221A04(a1);
  double v6 = sub_10016C458();
  sub_101221120(a2, a1 + 40);
  *(double *)(a1 + 2952) = v6;
  double v7 = *(double *)(a1 + 2992);
  if (!a3)
  {
    if (v7 <= 0.0) {
      goto LABEL_7;
    }
    *(_DWORD *)(a1 + 1560) += vabdd_f64(v6, v7);
    double v6 = -1.0;
    goto LABEL_6;
  }
  if (v7 < 0.0) {
LABEL_6:
  }
    *(double *)(a1 + 2992) = v6;
LABEL_7:
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_102319098);
  }
  uint64_t v8 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 2952);
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,AccessoryConnected", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::accessoryConnected(const CLAccessoryUtils::CLAccessoryInfo &, BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

uint64_t sub_101221A04(uint64_t a1)
{
  bzero(&v5, 0x660uLL);
  *((void *)&v5 + 1) = 0xBFF0000000000000;
  long long v10 = 0u;
  int v11 = 0;
  long long v17 = 0u;
  long long v6 = 0u;
  memset(v7, 0, 157);
  uint64_t v8 = 0;
  int v9 = 0;
  v7[10] = 0u;
  memset(v13, 0, sizeof(v13));
  long long v12 = 0u;
  memset(v15, 0, sizeof(v15));
  long long v14 = 0u;
  uint64_t v16 = &v17;
  long long v19 = 0u;
  long long v21 = 0u;
  float v18 = &v19;
  uint64_t v20 = &v21;
  memset(v23, 0, sizeof(v23));
  int v22 = v23;
  int v24 = 0;
  long long v27 = 0u;
  uint64_t v28 = 0;
  long long v30 = 0u;
  memset(v26, 0, sizeof(v26));
  long long v25 = 0u;
  __int16 v29 = &v30;
  long long v32 = 0u;
  __int16 v31 = &v32;
  __int16 v33 = v34;
  memset(v34, 0, sizeof(v34));
  int v35 = 0;
  long long v36 = 0u;
  uint64_t v37 = 0;
  long long v39 = 0u;
  uint64_t v38 = &v39;
  long long v41 = 0u;
  memset(v43, 0, sizeof(v43));
  uint64_t v40 = &v41;
  uint64_t v42 = v43;
  int v44 = 0;
  uint64_t v46 = 0;
  long long v45 = 0u;
  long long v48 = 0u;
  long long v50 = 0u;
  float v47 = &v48;
  float v49 = &v50;
  float v51 = v52;
  int v53 = 0;
  memset(v52, 0, sizeof(v52));
  long long v58 = 0u;
  long long v54 = 0u;
  int v56 = 0;
  uint64_t v55 = 0;
  float v57 = &v58;
  memset(v60, 0, sizeof(v60));
  float v59 = v60;
  int v61 = 0;
  memset(v66, 0, sizeof(v66));
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  float v65 = v66;
  int v67 = 0;
  memset(v73, 0, sizeof(v73));
  memset(v69, 0, sizeof(v69));
  long long v68 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  unint64_t v72 = v73;
  int v74 = 0;
  memset(v78, 0, sizeof(v78));
  memset(v76, 0, 28);
  long long v75 = 0u;
  memset(&v76[32], 0, 32);
  uint64_t v77 = v78;
  int v79 = 0;
  long long v86 = 0u;
  memset(v81, 0, sizeof(v81));
  long long v80 = 0u;
  int v84 = 0;
  uint64_t v83 = 0;
  long long v82 = 0u;
  __int16 v85 = &v86;
  long long v88 = 0u;
  __int16 v87 = &v88;
  long long v90 = 0u;
  __int16 v89 = &v90;
  int v91 = 0;
  long long v93 = 0u;
  int32x4_t v92 = &v93;
  int v94 = 0;
  long long v96 = 0u;
  long long v95 = &v96;
  long long v98 = 0u;
  long long v97 = &v98;
  memset(v100, 0, sizeof(v100));
  unsigned __int8 v99 = v100;
  long long v103 = 0u;
  int v101 = 0;
  unsigned int v102 = &v103;
  sub_101228198(a1 + 40, (uint64_t)&v5);
  sub_100718550((uint64_t)&v5);
  bzero(&v5, 0xBD8uLL);
  sub_100717FAC((uint64_t)&v5);
  long long v2 = v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 32) = *(void *)&v7[0];
  sub_101228198(a1 + 40, (uint64_t)v7 + 8);
  *(void *)(a1 + 1696) = v104;
  *(_OWORD *)(a1 + 1752) = v108;
  *(_OWORD *)(a1 + 1768) = v109;
  *(_OWORD *)(a1 + 1784) = v110;
  *(void *)(a1 + 1800) = v111;
  *(_OWORD *)(a1 + 1704) = v105;
  *(_OWORD *)(a1 + 1720) = v106;
  *(_OWORD *)(a1 + 1736) = v107;
  *(void *)(a1 + 1808) = v112;
  *(_OWORD *)(a1 + 1848) = v115;
  *(_OWORD *)(a1 + 1832) = v114;
  *(_OWORD *)(a1 + 1816) = v113;
  *(void *)(a1 + 1912) = v119;
  *(_OWORD *)(a1 + 1896) = v118;
  *(_OWORD *)(a1 + 1880) = v117;
  *(_OWORD *)(a1 + 1864) = v116;
  memcpy((void *)(a1 + 1920), v120, 0x350uLL);
  sub_100627C24(a1 + 2768, &v121);
  *(_OWORD *)(a1 + 2944) = v135;
  *(_OWORD *)(a1 + 2960) = v136;
  *(_OWORD *)(a1 + 2976) = v137;
  *(void *)(a1 + 2992) = v138;
  unsigned int v3 = *(void **)(a1 + 3000);
  if (v3)
  {
    *(void *)(a1 + 3008) = v3;
    operator delete(v3);
  }
  *(void *)(a1 + 3000) = v139;
  *(_OWORD *)(a1 + 3008) = v140;
  long long v140 = 0uLL;
  uint64_t v139 = 0;
  *(_WORD *)(a1 + 3024) = v141;
  if (v134 < 0) {
    operator delete(__p);
  }
  if (v132 < 0) {
    operator delete(v131);
  }
  if (v130 < 0) {
    operator delete(v129);
  }
  if (v128 < 0) {
    operator delete(v127);
  }
  if (v126 < 0) {
    operator delete(v125);
  }
  if (v124 < 0) {
    operator delete(v123);
  }
  if (v122 < 0) {
    operator delete((void *)v121);
  }
  return sub_100718550((uint64_t)v7 + 8);
}

uint64_t sub_101221F34(uint64_t result, int a2, double a3)
{
  double v3 = *(double *)(result + 2992);
  if (a2)
  {
    if (v3 >= 0.0) {
      return result;
    }
LABEL_6:
    *(double *)(result + 2992) = a3;
    return result;
  }
  if (v3 > 0.0)
  {
    *(_DWORD *)(result + 1560) += vabdd_f64(a3, v3);
    a3 = -1.0;
    goto LABEL_6;
  }
  return result;
}

void sub_101221F70(uint64_t a1, double a2)
{
  if (a2 < 0.0 || (double v4 = *(double *)(a1 + 2952), v4 <= 0.0))
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    long long v5 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_ERROR))
    {
      double v6 = sub_10016C458();
      uint64_t v7 = *(void *)(a1 + 2952);
      *(_DWORD *)std::string buf = 134349568;
      double v10 = v6;
      __int16 v11 = 2050;
      uint64_t v12 = v7;
      __int16 v13 = 2050;
      double v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLAccessoryAWD,%{public}.1lf,accessoryDisconnected,AWD not submitted due to invalid time,accessoryConnectedTime,%{public}.1lf,currentTime,%{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      sub_10016C458();
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAccessoryAWD::accessoryDisconnected(const CFTimeInterval)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 232) = (a2 - v4);
    sub_1012221CC(a1);
  }
}

uint64_t sub_1012221CC(uint64_t a1)
{
  sub_1012229CC(a1, 1);
  if (*(_DWORD *)(a1 + 232) < 0x3Du)
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    double v3 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134349312;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      __int16 v8 = 1026;
      int v9 = 60;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,submitAccessorySessionStats,not submitted,small session,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      CFAbsoluteTimeGetCurrent();
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::submitAccessorySessionStats()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    sub_101226460(v2, a1 + 40);
  }
  return sub_101221A04(a1);
}

void sub_1012223CC(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a2 + 96) == 3)
  {
    if (*(double *)(a2 + 52) < 0.0) {
      ++*(_DWORD *)(a1 + 1040);
    }
    if (*(double *)(a2 + 68) < 0.0) {
      ++*(_DWORD *)(a1 + 936);
    }
    *(_DWORD *)(a1 + 1048) += a3;
    __asm { FMOV            V1.2D, #10.0 }
    *(float64x2_t *)(a1 + 360) = vdivq_f64(vrndmq_f64(vmulq_f64(*(float64x2_t *)(a2 + 4), _Q1)), _Q1);
    ++*(_DWORD *)(a1 + 256);
    double v11 = sub_10016C458();
    if (!*(unsigned char *)(a1 + 3024))
    {
      double v12 = *(double *)(a1 + 2968);
      if (v12 > 0.0)
      {
        *(unsigned char *)(a1 + 3024) = 1;
        sub_101222780(a1 + 264, v11 - v12);
      }
    }
    if (!*(unsigned char *)(a1 + 3025))
    {
      double v13 = *(double *)(a1 + 2968);
      if (v13 > 0.0 && (a3 & 1) == 0)
      {
        *(unsigned char *)(a1 + 3025) = 1;
        sub_101222780(a1 + 312, v11 - v13);
      }
    }
    int v14 = sub_101221194(*(double *)(a2 + 20));
    sub_101222808(v14, a1 + 432, 1);
    int v15 = sub_101221194(*(double *)(a2 + 68));
    sub_101222808(v15, a1 + 840, 1);
    int v16 = sub_101221194(*(double *)(a2 + 36));
    sub_101222808(v16, a1 + 720, 1);
    if (a3)
    {
      int v17 = sub_101221194(*(double *)(a2 + 20));
      sub_101222808(v17, a1 + 600, 1);
    }
    uint64_t v18 = sub_1012228AC(a1, *(double *)(a2 + 184), 0.5);
    if (v18)
    {
      long long v19 = (double *)v18;
      if (*(double *)(v18 + 40) > 0.0 && *(double *)(a2 + 20) > 0.0 && *(_DWORD *)(v18 + 88) == *(_DWORD *)(a2 + 132))
      {
        double v20 = sub_1000F1648((double *)a1, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)v18, *(double *)(v18 + 8), 0.0);
        sub_101222780(a1 + 480, v20);
        int v21 = sub_101221194(v20);
        sub_101222808(v21, a1 + 408, 1);
        int v22 = sub_101221194(v19[5]);
        sub_101222808(v22, a1 + 456, 1);
        sub_101222780(a1 + 528, v19[5]);
        if (a3)
        {
          sub_101222780(a1 + 648, v20);
          sub_101222808(v21, a1 + 576, 1);
          int v23 = sub_101221194(v19[5]);
          sub_101222808(v23, a1 + 624, 1);
        }
      }
      if (v19[6] > 0.0 && *(double *)(a2 + 36) > 0.0)
      {
        double v24 = vabdd_f64(v19[2], *(double *)(a2 + 28));
        sub_101222780(a1 + 768, v24);
        int v25 = sub_101221194(v24);
        sub_101222808(v25, a1 + 696, 1);
        int v26 = sub_101221194(v19[6]);
        sub_101222808(v26, a1 + 744, 1);
      }
      if (v19[7] > 0.0 && *(double *)(a2 + 68) > 0.0)
      {
        double v27 = fmod(v19[4] - *(double *)(a2 + 60), 360.0);
        if (v27 < 0.0) {
          double v27 = v27 + 360.0;
        }
        if (v27 > 180.0) {
          double v27 = v27 + -360.0;
        }
        double v28 = fabs(v27);
        sub_101222780(a1 + 888, v28);
        int v29 = sub_101221194(v28);
        sub_101222808(v29, a1 + 816, 1);
        int v30 = sub_101221194(v19[7]);
        sub_101222808(v30, a1 + 864, 1);
      }
      if (v19[8] > 0.0 && *(double *)(a2 + 52) > 0.0)
      {
        double v31 = vabdd_f64(v19[3], *(double *)(a2 + 44));
        sub_101222780(a1 + 992, v31);
        int v32 = sub_101221294(v31);
        sub_101222808(v32, a1 + 944, 1);
        int v33 = sub_101221294(v19[8]);
        sub_101222808(v33, a1 + 968, 1);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 1044);
    }
    sub_1012229CC(a1, 0);
  }
}

double sub_101222780(uint64_t a1, double a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    double v3 = *(double *)a1;
  }
  else
  {
    *(double *)a1 = a2;
    *(double *)(a1 + 8) = a2;
    double v3 = a2;
  }
  double v4 = fabs(a2);
  if (v4 > fabs(v3)) {
    *(double *)a1 = a2;
  }
  if (v4 < fabs(*(double *)(a1 + 8))) {
    *(double *)(a1 + 8) = a2;
  }
  unsigned int v5 = v2 + 1;
  *(_DWORD *)(a1 + 16) = v5;
  double v6 = *(double *)(a1 + 24);
  double v7 = a2 - v6;
  double v8 = v6 + (a2 - v6) / (double)v5;
  double v9 = *(double *)(a1 + 32) + (a2 - v8) * v7;
  *(double *)(a1 + 24) = v8;
  *(double *)(a1 + 32) = v9;
  double result = a2 * a2 / (double)v5 + *(double *)(a1 + 40) - *(double *)(a1 + 40) / (double)v5;
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t *sub_101222808(int a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  int v7 = a1;
  for (uint64_t i = *(uint64_t **)(a2 + 8); i; uint64_t i = (uint64_t *)*i)
  {
    int v5 = *((_DWORD *)i + 7);
    if (v5 <= a1)
    {
      if (v5 >= a1)
      {
        double v8 = (unsigned int *)&v7;
        double result = sub_100125FD0((uint64_t **)a2, &v7, (uint64_t)&unk_101D0B290, &v8);
        *((_DWORD *)result + 8) += v3;
        return result;
      }
      ++i;
    }
  }
  double v8 = (unsigned int *)(a1 | (unint64_t)(a3 << 32));
  return sub_10122865C((uint64_t **)a2, (int *)&v8, (uint64_t *)&v8);
}

uint64_t sub_1012228AC(uint64_t a1, double a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 3008);
  uint64_t v4 = *(void *)(a1 + 3000);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = -100;
  uint64_t v11 = *(void *)(a1 + 3000);
  while (1)
  {
    uint64_t v12 = v11 + v8;
    double v13 = vabdd_f64(*(double *)(v11 + v8 + 72), a2);
    if (v13 > 5.0)
    {
      uint64_t v14 = v10 + v3 - v11;
      if (v12 + 96 != v3)
      {
        memmove((void *)v12, (const void *)(v12 + 96), v10 + v3 - v11);
        uint64_t v4 = *(void *)(a1 + 3000);
      }
      uint64_t v3 = v11 + v8 + 96 * ((v14 + 4) / 96);
      *(void *)(a1 + 3008) = v3;
      uint64_t v11 = v4;
      goto LABEL_8;
    }
    if (v13 < a3) {
      return v11 + v8;
    }
LABEL_8:
    ++v9;
    v8 += 96;
    v10 -= 96;
    if (0xAAAAAAAAAAAAAAABLL * ((v3 - v11) >> 5) <= v9) {
      return 0;
    }
  }
}

void sub_1012229CC(uint64_t a1, int a2)
{
  if (*(double *)(a1 + 2960) <= 0.0 || (a2 & 1) != 0 || sub_10016C458() - *(double *)(a1 + 2960) >= 30.0)
  {
    *(double *)(a1 + 2960) = sub_10016C458();
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v230 = a2;
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    int v5 = qword_102419368;
    uint64_t v231 = a1;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      double v6 = (void *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0) {
        double v6 = (void *)*v6;
      }
      int v7 = (void *)(a1 + 104);
      if (*(char *)(a1 + 127) < 0) {
        int v7 = (void *)*v7;
      }
      uint64_t v8 = (void *)(a1 + 128);
      if (*(char *)(a1 + 151) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int v9 = *(_DWORD *)(a1 + 224);
      int v10 = *(unsigned __int8 *)(a1 + 228);
      int v11 = *(_DWORD *)(a1 + 232);
      uint64_t v12 = a1;
      int v13 = *(_DWORD *)(a1 + 244);
      int v208 = *(_DWORD *)(a1 + 236);
      int v210 = *(_DWORD *)(a1 + 240);
      int v14 = *(_DWORD *)(a1 + 256);
      int v15 = *(_DWORD *)(a1 + 248);
      int v212 = v14;
      int v214 = *(_DWORD *)(v12 + 252);
      uint64_t v216 = *(void *)(v12 + 360);
      uint64_t v218 = *(void *)(v12 + 368);
      int v220 = *(_DWORD *)(v12 + 376);
      int v222 = *(_DWORD *)(v12 + 936);
      int v228 = *(_DWORD *)(v12 + 1044);
      int v224 = *(_DWORD *)(v12 + 1040);
      int v226 = *(_DWORD *)(v12 + 1048);
      sub_10122767C((void *)(v12 + 1672));
      if (v247[9] >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = *(unsigned char **)__p;
      }
      *(_DWORD *)std::string buf = 134354435;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 1026;
      *(_DWORD *)long long v274 = v230;
      *(_WORD *)&v274[4] = 2081;
      *(void *)&v274[6] = v6;
      *(_WORD *)&v274[14] = 2081;
      *(void *)&v274[16] = v7;
      *(_WORD *)&v274[24] = 2081;
      *(void *)&v274[26] = v8;
      *(_WORD *)&v274[34] = 1026;
      *(_DWORD *)&v274[36] = v9;
      *(_WORD *)&v274[40] = 1026;
      *(_DWORD *)&v274[42] = v10;
      *(_WORD *)&v274[46] = 1026;
      *(_DWORD *)char v275 = v11;
      *(_WORD *)&v275[4] = 1026;
      *(_DWORD *)&v275[6] = v13;
      LOWORD(v276) = 1026;
      *(_DWORD *)((char *)&v276 + 2) = v15;
      HIWORD(v276) = 1026;
      int v277 = v208;
      __int16 v278 = 1026;
      int v279 = v210;
      __int16 v280 = 1026;
      int v281 = v212;
      __int16 v282 = 1026;
      int v283 = v214;
      __int16 v284 = 2049;
      uint64_t v285 = v216;
      __int16 v286 = 2049;
      uint64_t v287 = v218;
      __int16 v288 = 1026;
      int v289 = v220;
      __int16 v290 = 1026;
      int v291 = v222;
      __int16 v292 = 1026;
      int v293 = v224;
      __int16 v294 = 1026;
      int v295 = v228;
      __int16 v296 = 1026;
      int v297 = v226;
      __int16 v298 = 2082;
      __int16 v299 = v16;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,counts,%{public}.1lf,forceLog,%{public}d,manufacturer,%{private}s,name,%{private}s,model,%{private}s,typeBit,%{public}d,isOnDenyList,%{public}d,accessoryConnectedDuration,%{public}d,carPlay,%{public}d,wirelessCarPlay,%{public}d,numberOfLocSessions,%{public}d,locSessionDuration,%{public}d,numberOfPublishedLoc,%{public}d,shifted,%{public}d,ll,%{private}.2lf,%{private}.2lf,charging,%{public}d,invalidCourse,%{public}d,invalidSpeed,%{public}d,deviceLocUnavailable,%{public}d,deadReckonedCount,%{public}d,unsupportedMsgs,%{public}s", buf, 0xA2u);
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v17 = v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      long long v117 = (void *)(v231 + 80);
      if (*(char *)(v231 + 103) < 0) {
        long long v117 = (void *)*v117;
      }
      long long v118 = (void *)(v231 + 104);
      if (*(char *)(v231 + 127) < 0) {
        long long v118 = (void *)*v118;
      }
      uint64_t v119 = (void *)(v231 + 128);
      if (*(char *)(v231 + 151) < 0) {
        uint64_t v119 = (void *)*v119;
      }
      int v120 = *(_DWORD *)(v231 + 224);
      int v121 = *(unsigned __int8 *)(v231 + 228);
      int v122 = *(_DWORD *)(v231 + 232);
      int v123 = *(_DWORD *)(v231 + 244);
      int v209 = *(_DWORD *)(v231 + 236);
      int v211 = *(_DWORD *)(v231 + 240);
      int v124 = *(_DWORD *)(v231 + 248);
      int v213 = *(_DWORD *)(v231 + 256);
      int v215 = *(_DWORD *)(v231 + 252);
      uint64_t v217 = *(void *)(v231 + 360);
      uint64_t v219 = *(void *)(v231 + 368);
      int v221 = *(_DWORD *)(v231 + 376);
      int v223 = *(_DWORD *)(v231 + 936);
      int v229 = *(_DWORD *)(v231 + 1044);
      int v225 = *(_DWORD *)(v231 + 1040);
      int v227 = *(_DWORD *)(v231 + 1048);
      sub_10122767C((void *)(v231 + 1672));
      if (SBYTE3(v244) >= 0) {
        uint64_t v125 = v240;
      }
      else {
        uint64_t v125 = *(unsigned char **)v240;
      }
      *(_DWORD *)std::string __p = 134354435;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 1026;
      *(_DWORD *)long long v247 = v230;
      *(_WORD *)&v247[4] = 2081;
      *(void *)&v247[6] = v117;
      *(_WORD *)&v247[14] = 2081;
      *(void *)&v247[16] = v118;
      *(_WORD *)&v247[24] = 2081;
      *(void *)&v247[26] = v119;
      *(_WORD *)&v247[34] = 1026;
      *(_DWORD *)&v247[36] = v120;
      *(_WORD *)&v247[40] = 1026;
      *(_DWORD *)&v247[42] = v121;
      *(_WORD *)&v247[46] = 1026;
      *(_DWORD *)long long v248 = v122;
      *(_WORD *)&v248[4] = 1026;
      *(_DWORD *)&v248[6] = v123;
      LOWORD(v249) = 1026;
      *(_DWORD *)((char *)&v249 + 2) = v124;
      HIWORD(v249) = 1026;
      int v250 = v209;
      __int16 v251 = 1026;
      *(_DWORD *)uint64_t v252 = v211;
      *(_WORD *)&v252[4] = 1026;
      *(_DWORD *)&v252[6] = v213;
      __int16 v253 = 1026;
      int v254 = v215;
      __int16 v255 = 2049;
      uint64_t v256 = v217;
      __int16 v257 = 2049;
      uint64_t v258 = v219;
      __int16 v259 = 1026;
      int v260 = v221;
      __int16 v261 = 1026;
      int v262 = v223;
      __int16 v263 = 1026;
      int v264 = v225;
      __int16 v265 = 1026;
      int v266 = v229;
      __int16 v267 = 1026;
      int v268 = v227;
      __int16 v269 = 2082;
      __int16 v270 = v125;
      char v126 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v126);
      if (v126 != (char *)buf) {
        free(v126);
      }
      uint64_t v17 = v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    uint64_t v18 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *(_DWORD *)(v17 + 236);
      sub_10122790C();
      int v20 = v247[9];
      int v21 = *(unsigned char **)__p;
      sub_10122790C();
      int v22 = __p;
      if (v20 < 0) {
        int v22 = v21;
      }
      if (SBYTE3(v244) >= 0) {
        int v23 = v240;
      }
      else {
        int v23 = *(unsigned char **)v240;
      }
      *(_DWORD *)std::string buf = 134349826;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 1026;
      *(_DWORD *)long long v274 = v19;
      *(_WORD *)&v274[4] = 2082;
      *(void *)&v274[6] = v22;
      *(_WORD *)&v274[14] = 2082;
      *(void *)&v274[16] = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,ttff,%{public}.1lf,numberOfSessions,%{public}d,all,%{public}s,nonDR,%{public}s", buf, 0x26u);
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v24 = v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      int v127 = *(_DWORD *)(v231 + 236);
      sub_10122790C();
      int v128 = SBYTE3(v244);
      unsigned int v129 = *(unsigned char **)v240;
      sub_10122790C();
      char v130 = v240;
      if (v128 < 0) {
        char v130 = v129;
      }
      if (v239 >= 0) {
        __int32 v131 = v238;
      }
      else {
        __int32 v131 = (void **)v238[0];
      }
      *(_DWORD *)std::string __p = 134349826;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 1026;
      *(_DWORD *)long long v247 = v127;
      *(_WORD *)&v247[4] = 2082;
      *(void *)&v247[6] = v130;
      *(_WORD *)&v247[14] = 2082;
      *(void *)&v247[16] = v131;
      char v132 = (char *)_os_log_send_and_compose_impl();
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v132);
      if (v132 != (char *)buf) {
        free(v132);
      }
      uint64_t v24 = v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    int v25 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      sub_10122767C((void *)(v24 + 1496));
      int v26 = v247[9];
      double v27 = *(unsigned char **)__p;
      int v28 = *(_DWORD *)(v231 + 1520);
      int v29 = *(_DWORD *)(v231 + 1524);
      int v30 = *(_DWORD *)(v231 + 1528);
      sub_101227C78((void *)(v231 + 1536));
      double v31 = __p;
      if (v26 < 0) {
        double v31 = v27;
      }
      if (SBYTE3(v244) >= 0) {
        int v32 = v240;
      }
      else {
        int v32 = *(unsigned char **)v240;
      }
      *(_DWORD *)std::string buf = 134350338;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 2082;
      *(void *)long long v274 = v31;
      *(_WORD *)&v274[8] = 1026;
      *(_DWORD *)&v274[10] = v28;
      *(_WORD *)&v274[14] = 1026;
      *(_DWORD *)&v274[16] = v29;
      *(_WORD *)&v274[20] = 1026;
      *(_DWORD *)&v274[22] = v30;
      *(_WORD *)&v274[26] = 2082;
      *(void *)&v274[28] = v32;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,locationAppRunTime,%{public}.1lf,%{public}s,appleMapsRoutingEpochCount,%{public}d,reroute,%{public}d,proceedToRoute,%{public}d,appleMapsRoutingTypeHist,%{public}s", buf, 0x32u);
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    int v33 = (_DWORD *)v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      sub_10122767C((void *)(v231 + 1496));
      int v133 = SBYTE3(v244);
      char v134 = *(unsigned char **)v240;
      int v135 = *(_DWORD *)(v231 + 1520);
      int v136 = *(_DWORD *)(v231 + 1524);
      int v137 = *(_DWORD *)(v231 + 1528);
      sub_101227C78((void *)(v231 + 1536));
      uint64_t v138 = v240;
      if (v133 < 0) {
        uint64_t v138 = v134;
      }
      if (v239 >= 0) {
        uint64_t v139 = v238;
      }
      else {
        uint64_t v139 = (void **)v238[0];
      }
      *(_DWORD *)std::string __p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 2082;
      *(void *)long long v247 = v138;
      *(_WORD *)&v247[8] = 1026;
      *(_DWORD *)&v247[10] = v135;
      *(_WORD *)&v247[14] = 1026;
      *(_DWORD *)&v247[16] = v136;
      *(_WORD *)&v247[20] = 1026;
      *(_DWORD *)&v247[22] = v137;
      *(_WORD *)&v247[26] = 2082;
      *(void *)&v247[28] = v139;
      long long v140 = (char *)_os_log_send_and_compose_impl();
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v140);
      if (v140 != (char *)buf) {
        free(v140);
      }
      int v33 = (_DWORD *)v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    uint64_t v34 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      int v35 = v33[263];
      int v36 = v33[264];
      int v37 = v33[265];
      uint64_t v38 = __p;
      sub_10122790C();
      if (v247[9] < 0) {
        uint64_t v38 = *(unsigned char **)__p;
      }
      sub_101227C78((void *)(v231 + 1064));
      int v39 = SBYTE3(v244);
      uint64_t v40 = *(unsigned char **)v240;
      sub_10122790C();
      long long v41 = v240;
      if (v39 < 0) {
        long long v41 = v40;
      }
      if (v239 >= 0) {
        uint64_t v42 = v238;
      }
      else {
        uint64_t v42 = (void **)v238[0];
      }
      *(_DWORD *)std::string buf = 134350594;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 1026;
      *(_DWORD *)long long v274 = v35;
      *(_WORD *)&v274[4] = 1026;
      *(_DWORD *)&v274[6] = v36;
      *(_WORD *)&v274[10] = 1026;
      *(_DWORD *)&v274[12] = v37;
      *(_WORD *)&v274[16] = 2082;
      *(void *)&v274[18] = v38;
      *(_WORD *)&v274[26] = 2082;
      *(void *)&v274[28] = v41;
      *(_WORD *)&v274[36] = 2082;
      *(void *)&v274[38] = v42;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,gprmc,%{public}.1lf,good,%{public}d,bad,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s", buf, 0x3Cu);
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v43 = v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      int v141 = *(_DWORD *)(v231 + 1052);
      int v142 = *(_DWORD *)(v231 + 1056);
      int v143 = *(_DWORD *)(v231 + 1060);
      __int16 v144 = v240;
      sub_10122790C();
      if (SBYTE3(v244) < 0) {
        __int16 v144 = *(unsigned char **)v240;
      }
      sub_101227C78((void *)(v231 + 1064));
      int v145 = v239;
      __int16 v146 = (void **)v238[0];
      sub_10122790C();
      __int32 v147 = v238;
      if (v145 < 0) {
        __int32 v147 = v146;
      }
      if (v237 >= 0) {
        __int16 v148 = v236;
      }
      else {
        __int16 v148 = (void **)v236[0];
      }
      *(_DWORD *)std::string __p = 134350594;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 1026;
      *(_DWORD *)long long v247 = v141;
      *(_WORD *)&v247[4] = 1026;
      *(_DWORD *)&v247[6] = v142;
      *(_WORD *)&v247[10] = 1026;
      *(_DWORD *)&v247[12] = v143;
      *(_WORD *)&v247[16] = 2082;
      *(void *)&v247[18] = v144;
      *(_WORD *)&v247[26] = 2082;
      *(void *)&v247[28] = v147;
      *(_WORD *)&v247[36] = 2082;
      *(void *)&v247[38] = v148;
      __int32 v149 = (char *)_os_log_send_and_compose_impl();
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v149);
      if (v149 != (char *)buf) {
        free(v149);
      }
      uint64_t v43 = v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    int v44 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      int v45 = *(_DWORD *)(v43 + 1184);
      int v46 = *(_DWORD *)(v43 + 1188);
      float v47 = __p;
      sub_10122790C();
      if (v247[9] < 0) {
        float v47 = *(unsigned char **)__p;
      }
      sub_101227C78((void *)(v231 + 1192));
      int v48 = SBYTE3(v244);
      float v49 = *(unsigned char **)v240;
      sub_10122790C();
      long long v50 = v240;
      if (v48 < 0) {
        long long v50 = v49;
      }
      if (v239 >= 0) {
        float v51 = v238;
      }
      else {
        float v51 = (void **)v238[0];
      }
      *(_DWORD *)std::string buf = 134350338;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 1026;
      *(_DWORD *)long long v274 = v45;
      *(_WORD *)&v274[4] = 1026;
      *(_DWORD *)&v274[6] = v46;
      *(_WORD *)&v274[10] = 2082;
      *(void *)&v274[12] = v47;
      *(_WORD *)&v274[20] = 2082;
      *(void *)&v274[22] = v50;
      *(_WORD *)&v274[30] = 2082;
      *(void *)&v274[32] = v51;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,gpgga,%{public}.1lf,count,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s", buf, 0x36u);
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v52 = v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      int v150 = *(_DWORD *)(v231 + 1184);
      int v151 = *(_DWORD *)(v231 + 1188);
      __int16 v152 = v240;
      sub_10122790C();
      if (SBYTE3(v244) < 0) {
        __int16 v152 = *(unsigned char **)v240;
      }
      sub_101227C78((void *)(v231 + 1192));
      int v153 = v239;
      __int16 v154 = (void **)v238[0];
      sub_10122790C();
      unsigned int v155 = v238;
      if (v153 < 0) {
        unsigned int v155 = v154;
      }
      if (v237 >= 0) {
        uint64_t v156 = v236;
      }
      else {
        uint64_t v156 = (void **)v236[0];
      }
      *(_DWORD *)std::string __p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 1026;
      *(_DWORD *)long long v247 = v150;
      *(_WORD *)&v247[4] = 1026;
      *(_DWORD *)&v247[6] = v151;
      *(_WORD *)&v247[10] = 2082;
      *(void *)&v247[12] = v152;
      *(_WORD *)&v247[20] = 2082;
      *(void *)&v247[22] = v155;
      *(_WORD *)&v247[30] = 2082;
      *(void *)&v247[32] = v156;
      __int16 v157 = (char *)_os_log_send_and_compose_impl();
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v157);
      if (v157 != (char *)buf) {
        free(v157);
      }
      uint64_t v52 = v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    int v53 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      int v54 = *(_DWORD *)(v52 + 1312);
      int v55 = *(_DWORD *)(v52 + 1316);
      sub_10122790C();
      if (v247[9] >= 0) {
        int v56 = __p;
      }
      else {
        int v56 = *(unsigned char **)__p;
      }
      sub_10122790C();
      if (SBYTE3(v244) >= 0) {
        float v57 = v240;
      }
      else {
        float v57 = *(unsigned char **)v240;
      }
      sub_101227C78((void *)(v231 + 1320));
      if (v239 >= 0) {
        long long v58 = v238;
      }
      else {
        long long v58 = (void **)v238[0];
      }
      int v59 = *(_DWORD *)(v231 + 1440);
      sub_101227C78((void *)(v231 + 1448));
      int v60 = v237;
      int v61 = (void **)v236[0];
      sub_101227EF0((void *)(v231 + 1472));
      long long v62 = v236;
      if (v60 < 0) {
        long long v62 = v61;
      }
      if (v235 >= 0) {
        long long v63 = v234;
      }
      else {
        long long v63 = (void **)v234[0];
      }
      *(_DWORD *)std::string buf = 134351106;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 1026;
      *(_DWORD *)long long v274 = v54;
      *(_WORD *)&v274[4] = 1026;
      *(_DWORD *)&v274[6] = v55;
      *(_WORD *)&v274[10] = 2082;
      *(void *)&v274[12] = v56;
      *(_WORD *)&v274[20] = 2082;
      *(void *)&v274[22] = v57;
      *(_WORD *)&v274[30] = 2082;
      *(void *)&v274[32] = v58;
      *(_WORD *)&v274[40] = 1026;
      *(_DWORD *)&v274[42] = v59;
      *(_WORD *)&v274[46] = 2082;
      *(void *)char v275 = v62;
      *(_WORD *)&v275[8] = 2082;
      uint64_t v276 = v63;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,pascd,%{public}.1lf,count,%{public}d,repeated,%{public}d,spacing,%{public}s,latency,%{public}s,latencyHist,%{public}s,slipCount,%{public}d,transmisionHist,%{public}s,sampleCountHist,%{public}s", buf, 0x50u);
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      int v158 = *(_DWORD *)(v231 + 1312);
      int v159 = *(_DWORD *)(v231 + 1316);
      sub_10122790C();
      if (SBYTE3(v244) >= 0) {
        uint64_t v160 = v240;
      }
      else {
        uint64_t v160 = *(unsigned char **)v240;
      }
      sub_10122790C();
      if (v239 >= 0) {
        __int16 v161 = v238;
      }
      else {
        __int16 v161 = (void **)v238[0];
      }
      sub_101227C78((void *)(v231 + 1320));
      if (v237 >= 0) {
        uint64_t v162 = v236;
      }
      else {
        uint64_t v162 = (void **)v236[0];
      }
      int v163 = *(_DWORD *)(v231 + 1440);
      sub_101227C78((void *)(v231 + 1448));
      int v164 = v235;
      __int16 v165 = (void **)v234[0];
      sub_101227EF0((void *)(v231 + 1472));
      uint64_t v166 = v234;
      if (v164 < 0) {
        uint64_t v166 = v165;
      }
      if (v233 >= 0) {
        __int16 v167 = v232;
      }
      else {
        __int16 v167 = (void **)v232[0];
      }
      *(_DWORD *)std::string __p = 134351106;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 1026;
      *(_DWORD *)long long v247 = v158;
      *(_WORD *)&v247[4] = 1026;
      *(_DWORD *)&v247[6] = v159;
      *(_WORD *)&v247[10] = 2082;
      *(void *)&v247[12] = v160;
      *(_WORD *)&v247[20] = 2082;
      *(void *)&v247[22] = v161;
      *(_WORD *)&v247[30] = 2082;
      *(void *)&v247[32] = v162;
      *(_WORD *)&v247[40] = 1026;
      *(_DWORD *)&v247[42] = v163;
      *(_WORD *)&v247[46] = 2082;
      *(void *)long long v248 = v166;
      *(_WORD *)&v248[8] = 2082;
      long long v249 = v167;
      uint64_t v168 = (char *)_os_log_send_and_compose_impl();
      if (v233 < 0) {
        operator delete(v232[0]);
      }
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v168);
      if (v168 != (char *)buf) {
        free(v168);
      }
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    long long v64 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      sub_10122790C();
      if (v247[9] >= 0) {
        float v65 = __p;
      }
      else {
        float v65 = *(unsigned char **)__p;
      }
      float v66 = v240;
      sub_10122790C();
      if (SBYTE3(v244) < 0) {
        float v66 = *(unsigned char **)v240;
      }
      int v67 = v238;
      sub_10122790C();
      if (v239 < 0) {
        int v67 = (void **)v238[0];
      }
      sub_10122790C();
      int v68 = v237;
      float v69 = (void **)v236[0];
      sub_10122790C();
      long long v70 = v236;
      if (v68 < 0) {
        long long v70 = v69;
      }
      if (v235 >= 0) {
        long long v71 = v234;
      }
      else {
        long long v71 = (void **)v234[0];
      }
      *(_DWORD *)std::string buf = 134350338;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 2082;
      *(void *)long long v274 = v65;
      *(_WORD *)&v274[8] = 2082;
      *(void *)&v274[10] = v66;
      *(_WORD *)&v274[18] = 2082;
      *(void *)&v274[20] = v67;
      *(_WORD *)&v274[28] = 2082;
      *(void *)&v274[30] = v70;
      *(_WORD *)&v274[38] = 2082;
      *(void *)&v274[40] = v71;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,diffStats,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s,", buf, 0x3Eu);
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v72 = v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      sub_10122790C();
      if (SBYTE3(v244) >= 0) {
        uint64_t v169 = v240;
      }
      else {
        uint64_t v169 = *(unsigned char **)v240;
      }
      long long v170 = v238;
      sub_10122790C();
      if (v239 < 0) {
        long long v170 = (void **)v238[0];
      }
      long long v171 = v236;
      sub_10122790C();
      if (v237 < 0) {
        long long v171 = (void **)v236[0];
      }
      sub_10122790C();
      int v172 = v235;
      long long v173 = (void **)v234[0];
      sub_10122790C();
      int v174 = v234;
      if (v172 < 0) {
        int v174 = v173;
      }
      if (v233 >= 0) {
        long long v175 = v232;
      }
      else {
        long long v175 = (void **)v232[0];
      }
      *(_DWORD *)std::string __p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 2082;
      *(void *)long long v247 = v169;
      *(_WORD *)&v247[8] = 2082;
      *(void *)&v247[10] = v170;
      *(_WORD *)&v247[18] = 2082;
      *(void *)&v247[20] = v171;
      *(_WORD *)&v247[28] = 2082;
      *(void *)&v247[30] = v174;
      *(_WORD *)&v247[38] = 2082;
      *(void *)&v247[40] = v175;
      long long v176 = (char *)_os_log_send_and_compose_impl();
      if (v233 < 0) {
        operator delete(v232[0]);
      }
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v176);
      if (v176 != (char *)buf) {
        free(v176);
      }
      uint64_t v72 = v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    __int16 v73 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      sub_101227C78((void *)(v72 + 408));
      if (v247[9] >= 0) {
        int v74 = __p;
      }
      else {
        int v74 = *(unsigned char **)__p;
      }
      long long v75 = v240;
      sub_101227C78((void *)(v231 + 696));
      if (SBYTE3(v244) < 0) {
        long long v75 = *(unsigned char **)v240;
      }
      int v76 = v238;
      sub_101227C78((void *)(v231 + 816));
      if (v239 < 0) {
        int v76 = (void **)v238[0];
      }
      sub_101227C78((void *)(v231 + 944));
      int v77 = v237;
      uint64_t v78 = (void **)v236[0];
      sub_101227C78((void *)(v231 + 576));
      int v79 = v236;
      if (v77 < 0) {
        int v79 = v78;
      }
      if (v235 >= 0) {
        long long v80 = v234;
      }
      else {
        long long v80 = (void **)v234[0];
      }
      *(_DWORD *)std::string buf = 134350338;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 2082;
      *(void *)long long v274 = v74;
      *(_WORD *)&v274[8] = 2082;
      *(void *)&v274[10] = v75;
      *(_WORD *)&v274[18] = 2082;
      *(void *)&v274[20] = v76;
      *(_WORD *)&v274[28] = 2082;
      *(void *)&v274[30] = v79;
      *(_WORD *)&v274[38] = 2082;
      *(void *)&v274[40] = v80;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,diffHist,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s", buf, 0x3Eu);
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v81 = v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      sub_101227C78((void *)(v231 + 408));
      if (SBYTE3(v244) >= 0) {
        unint64_t v177 = v240;
      }
      else {
        unint64_t v177 = *(unsigned char **)v240;
      }
      double v178 = v238;
      sub_101227C78((void *)(v231 + 696));
      if (v239 < 0) {
        double v178 = (void **)v238[0];
      }
      __int16 v179 = v236;
      sub_101227C78((void *)(v231 + 816));
      if (v237 < 0) {
        __int16 v179 = (void **)v236[0];
      }
      sub_101227C78((void *)(v231 + 944));
      int v180 = v235;
      long long v181 = (void **)v234[0];
      sub_101227C78((void *)(v231 + 576));
      uint64_t v182 = v234;
      if (v180 < 0) {
        uint64_t v182 = v181;
      }
      if (v233 >= 0) {
        __int16 v183 = v232;
      }
      else {
        __int16 v183 = (void **)v232[0];
      }
      *(_DWORD *)std::string __p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 2082;
      *(void *)long long v247 = v177;
      *(_WORD *)&v247[8] = 2082;
      *(void *)&v247[10] = v178;
      *(_WORD *)&v247[18] = 2082;
      *(void *)&v247[20] = v179;
      *(_WORD *)&v247[28] = 2082;
      *(void *)&v247[30] = v182;
      *(_WORD *)&v247[38] = 2082;
      *(void *)&v247[40] = v183;
      unint64_t v184 = (char *)_os_log_send_and_compose_impl();
      if (v233 < 0) {
        operator delete(v232[0]);
      }
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v184);
      if (v184 != (char *)buf) {
        free(v184);
      }
      uint64_t v81 = v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    long long v82 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v83 = (void *)(v81 + 432);
      int v84 = __p;
      sub_101227C78(v83);
      if (v247[9] < 0) {
        int v84 = *(unsigned char **)__p;
      }
      __int16 v85 = v240;
      sub_101227C78((void *)(v231 + 720));
      if (SBYTE3(v244) < 0) {
        __int16 v85 = *(unsigned char **)v240;
      }
      sub_101227C78((void *)(v231 + 840));
      int v86 = v239;
      __int16 v87 = (void **)v238[0];
      sub_101227C78((void *)(v231 + 600));
      long long v88 = v238;
      if (v86 < 0) {
        long long v88 = v87;
      }
      if (v237 >= 0) {
        __int16 v89 = v236;
      }
      else {
        __int16 v89 = (void **)v236[0];
      }
      *(_DWORD *)std::string buf = 134350082;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 2082;
      *(void *)long long v274 = v84;
      *(_WORD *)&v274[8] = 2082;
      *(void *)&v274[10] = v85;
      *(_WORD *)&v274[18] = 2082;
      *(void *)&v274[20] = v88;
      *(_WORD *)&v274[28] = 2082;
      *(void *)&v274[30] = v89;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,accessoryReportedUnc,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,2DDR,%{public}s", buf, 0x34u);
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v90 = v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      __int16 v185 = v240;
      sub_101227C78((void *)(v231 + 432));
      if (SBYTE3(v244) < 0) {
        __int16 v185 = *(unsigned char **)v240;
      }
      uint64_t v186 = v238;
      sub_101227C78((void *)(v231 + 720));
      if (v239 < 0) {
        uint64_t v186 = (void **)v238[0];
      }
      sub_101227C78((void *)(v231 + 840));
      int v187 = v237;
      uint64_t v188 = (void **)v236[0];
      sub_101227C78((void *)(v231 + 600));
      __int16 v189 = v236;
      if (v187 < 0) {
        __int16 v189 = v188;
      }
      if (v235 >= 0) {
        __int16 v190 = v234;
      }
      else {
        __int16 v190 = (void **)v234[0];
      }
      *(_DWORD *)std::string __p = 134350082;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 2082;
      *(void *)long long v247 = v185;
      *(_WORD *)&v247[8] = 2082;
      *(void *)&v247[10] = v186;
      *(_WORD *)&v247[18] = 2082;
      *(void *)&v247[20] = v189;
      *(_WORD *)&v247[28] = 2082;
      *(void *)&v247[30] = v190;
      __int16 v191 = (char *)_os_log_send_and_compose_impl();
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v191);
      if (v191 != (char *)buf) {
        free(v191);
      }
      uint64_t v90 = v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    int v91 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      sub_101227C78((void *)(v90 + 456));
      if (v247[9] >= 0) {
        int32x4_t v92 = __p;
      }
      else {
        int32x4_t v92 = *(unsigned char **)__p;
      }
      long long v93 = v240;
      sub_101227C78((void *)(v231 + 744));
      if (SBYTE3(v244) < 0) {
        long long v93 = *(unsigned char **)v240;
      }
      int v94 = v238;
      sub_101227C78((void *)(v231 + 864));
      if (v239 < 0) {
        int v94 = (void **)v238[0];
      }
      sub_101227C78((void *)(v231 + 968));
      int v95 = v237;
      long long v96 = (void **)v236[0];
      sub_101227C78((void *)(v231 + 624));
      long long v97 = v236;
      if (v95 < 0) {
        long long v97 = v96;
      }
      if (v235 >= 0) {
        long long v98 = v234;
      }
      else {
        long long v98 = (void **)v234[0];
      }
      *(_DWORD *)std::string buf = 134350338;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 2082;
      *(void *)long long v274 = v92;
      *(_WORD *)&v274[8] = 2082;
      *(void *)&v274[10] = v93;
      *(_WORD *)&v274[18] = 2082;
      *(void *)&v274[20] = v94;
      *(_WORD *)&v274[28] = 2082;
      *(void *)&v274[30] = v97;
      *(_WORD *)&v274[38] = 2082;
      *(void *)&v274[40] = v98;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,deviceReportedUnc,%{public}.1lf,2D,%{public}s,alt,%{public}s,course,%{public}s,speed,%{public}s,2DDR,%{public}s", buf, 0x3Eu);
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    unsigned __int8 v99 = (_DWORD *)v231;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      sub_101227C78((void *)(v231 + 456));
      if (SBYTE3(v244) >= 0) {
        __int16 v192 = v240;
      }
      else {
        __int16 v192 = *(unsigned char **)v240;
      }
      uint64_t v193 = v238;
      sub_101227C78((void *)(v231 + 744));
      if (v239 < 0) {
        uint64_t v193 = (void **)v238[0];
      }
      __int16 v194 = v236;
      sub_101227C78((void *)(v231 + 864));
      if (v237 < 0) {
        __int16 v194 = (void **)v236[0];
      }
      sub_101227C78((void *)(v231 + 968));
      int v195 = v235;
      __int16 v196 = (void **)v234[0];
      sub_101227C78((void *)(v231 + 624));
      uint64_t v197 = v234;
      if (v195 < 0) {
        uint64_t v197 = v196;
      }
      if (v233 >= 0) {
        __int16 v198 = v232;
      }
      else {
        __int16 v198 = (void **)v232[0];
      }
      *(_DWORD *)std::string __p = 134350338;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 2082;
      *(void *)long long v247 = v192;
      *(_WORD *)&v247[8] = 2082;
      *(void *)&v247[10] = v193;
      *(_WORD *)&v247[18] = 2082;
      *(void *)&v247[20] = v194;
      *(_WORD *)&v247[28] = 2082;
      *(void *)&v247[30] = v197;
      *(_WORD *)&v247[38] = 2082;
      *(void *)&v247[40] = v198;
      uint64_t v199 = (char *)_os_log_send_and_compose_impl();
      if (v233 < 0) {
        operator delete(v232[0]);
      }
      if (v235 < 0) {
        operator delete(v234[0]);
      }
      if (v237 < 0) {
        operator delete(v236[0]);
      }
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v199);
      if (v199 != (char *)buf) {
        free(v199);
      }
      unsigned __int8 v99 = (_DWORD *)v231;
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    __int32 v100 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      int v101 = v99[390];
      int v102 = v99[391];
      long long v103 = v99 + 394;
      int v104 = v99[392];
      sub_101227C78(v103);
      long long v105 = v247[9] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 134350082;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 1026;
      *(_DWORD *)long long v274 = v101;
      *(_WORD *)&v274[4] = 1026;
      *(_DWORD *)&v274[6] = v102;
      *(_WORD *)&v274[10] = 1026;
      *(_DWORD *)&v274[12] = v104;
      *(_WORD *)&v274[16] = 2082;
      *(void *)&v274[18] = v105;
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,nmeaScreening,%{public}.1lf,enabledDuration,%{public}d,screened,%{public}d,rejected,%{public}d,locationHist,%{public}s", buf, 0x28u);
      if ((v247[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      int v200 = *(_DWORD *)(v231 + 1560);
      int v201 = *(_DWORD *)(v231 + 1564);
      int v202 = *(_DWORD *)(v231 + 1568);
      sub_101227C78((void *)(v231 + 1576));
      if (SBYTE3(v244) >= 0) {
        unint64_t v203 = v240;
      }
      else {
        unint64_t v203 = *(unsigned char **)v240;
      }
      *(_DWORD *)std::string __p = 134350082;
      *(CFAbsoluteTime *)&__p[4] = Current;
      __int16 v246 = 1026;
      *(_DWORD *)long long v247 = v200;
      *(_WORD *)&v247[4] = 1026;
      *(_DWORD *)&v247[6] = v201;
      *(_WORD *)&v247[10] = 1026;
      *(_DWORD *)&v247[12] = v202;
      *(_WORD *)&v247[16] = 2082;
      *(void *)&v247[18] = v203;
      uint64_t v204 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v204);
      if (v204 != (char *)buf) {
        free(v204);
      }
    }
    sub_10010F274((uint64_t)__p);
    long long v106 = *(void **)(v231 + 384);
    if (v106 != (void *)(v231 + 392))
    {
      do
      {
        uint64_t v107 = *(void *)&v247[2];
        *(_DWORD *)&v247[*(void *)(*(void *)&v247[2] - 24) + 10] |= 4u;
        *(void *)&v247[*(void *)(v107 - 24) + 18] = 0;
        long long v108 = (void *)std::ostream::operator<<();
        sub_100132EFC(v108, (uint64_t)",", 1);
        long long v109 = (void *)std::ostream::operator<<();
        sub_100132EFC(v109, (uint64_t)",", 1);
        long long v110 = (void *)v106[1];
        if (v110)
        {
          do
          {
            uint64_t v111 = v110;
            long long v110 = (void *)*v110;
          }
          while (v110);
        }
        else
        {
          do
          {
            uint64_t v111 = (void *)v106[2];
            BOOL v112 = *v111 == (void)v106;
            long long v106 = v111;
          }
          while (!v112);
        }
        long long v106 = v111;
      }
      while (v111 != (void *)(v231 + 392));
    }
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    long long v113 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      int v114 = *(_DWORD *)(v231 + 376);
      std::stringbuf::str();
      long long v115 = SBYTE3(v244) >= 0 ? v240 : *(unsigned char **)v240;
      *(_DWORD *)std::string buf = 134349570;
      CFAbsoluteTime v272 = Current;
      __int16 v273 = 1026;
      *(_DWORD *)long long v274 = v114;
      *(_WORD *)&v274[4] = 2082;
      *(void *)&v274[6] = v115;
      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,battery,%{public}.1lf,charging,%{public}d,chargingHist,%{public}s,", buf, 0x1Cu);
      if (SBYTE3(v244) < 0) {
        operator delete(*(void **)v240);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      int v205 = *(_DWORD *)(v231 + 376);
      std::stringbuf::str();
      if (v239 >= 0) {
        double v206 = v238;
      }
      else {
        double v206 = (void **)v238[0];
      }
      *(_DWORD *)unint64_t v240 = 134349570;
      *(CFAbsoluteTime *)&v240[4] = Current;
      __int16 v241 = 1026;
      int v242 = v205;
      __int16 v243 = 2082;
      long long v244 = v206;
      uint64_t v207 = (char *)_os_log_send_and_compose_impl();
      if (v239 < 0) {
        operator delete(v238[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::logSessionStats(const BOOL)", "%s\n", v207);
      if (v207 != (char *)buf) {
        free(v207);
      }
    }
    *(void *)&v247[2] = v116;
    if (SHIBYTE(v256) < 0) {
      operator delete(*(void **)&v252[2]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
}

void sub_101225280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
}

uint64_t *sub_101225410(uint64_t *result, int a2, double a3, double a4)
{
  if (a4 > 0.0)
  {
    double v4 = *((double *)result + 369);
    if (v4 > 0.0)
    {
      if (v4 > a4) {
        a4 = *((double *)result + 369);
      }
      uint64_t v5 = vabdd_f64(a3, a4);
      *((_DWORD *)result + 94) += v5;
      return sub_101222808(a2, (uint64_t)(result + 48), v5);
    }
  }
  return result;
}

uint64_t sub_101225454(uint64_t result, int a2, double a3)
{
  double v3 = *(double *)(result + 2976);
  if (a2)
  {
    if (v3 >= 0.0) {
      return result;
    }
LABEL_6:
    *(double *)(result + 2976) = a3;
    return result;
  }
  if (v3 > 0.0)
  {
    *(_DWORD *)(result + 244) += vabdd_f64(a3, v3);
    a3 = -1.0;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_101225490(uint64_t result, int a2, double a3)
{
  double v3 = *(double *)(result + 2984);
  if (a2)
  {
    if (v3 >= 0.0) {
      return result;
    }
LABEL_6:
    *(double *)(result + 2984) = a3;
    return result;
  }
  if (v3 > 0.0)
  {
    *(_DWORD *)(result + 248) += vabdd_f64(a3, v3);
    a3 = -1.0;
    goto LABEL_6;
  }
  return result;
}

void sub_1012254CC(uint64_t a1, const std::string *a2)
{
  char v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v2 >= 0) {
    int64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v2 >= 0) {
    double v4 = a2;
  }
  else {
    double v4 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= 1)
  {
    int v7 = (char *)v4 + size;
    size_t v8 = size;
    int v9 = (std::string *)v4;
    while (1)
    {
      int v10 = (char *)memchr(v9, 36, v8);
      if (!v10) {
        return;
      }
      if (*v10 == 36) {
        break;
      }
      int v9 = (std::string *)(v10 + 1);
      size_t v8 = v7 - (char *)v9;
      if (v7 - (char *)v9 < 1) {
        return;
      }
    }
    if (v10 != v7 && v10 - (char *)v4 != -1)
    {
      std::string::basic_string(&__str, a2, v10 - (char *)v4, size, (std::allocator<char> *)&v19);
      char v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v12 = __str.__r_.__value_.__l.__size_;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v12 >= 1)
      {
        int v14 = (char *)p_str + v12;
        int v15 = p_str;
        while (1)
        {
          int v16 = memchr(v15, 44, v12);
          if (!v16) {
            goto LABEL_43;
          }
          if (*v16 == 44) {
            break;
          }
          int v15 = (std::string *)(v16 + 1);
          int64_t v12 = v14 - (unsigned char *)v15;
          if (v14 - (unsigned char *)v15 < 1) {
            goto LABEL_43;
          }
        }
        if (v16 != v14 && v16 - (unsigned char *)p_str != -1)
        {
          std::string::basic_string(&v19, &__str, 0, v16 - (unsigned char *)p_str, (std::allocator<char> *)&v21);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v17 = v19.__r_.__value_.__l.__size_;
            if (!v19.__r_.__value_.__l.__size_)
            {
LABEL_40:
              if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v19.__r_.__value_.__l.__data_);
              }
              goto LABEL_42;
            }
          }
          else
          {
            if (!*((unsigned char *)&v19.__r_.__value_.__s + 23))
            {
LABEL_42:
              char v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              goto LABEL_43;
            }
            std::string::size_type v17 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          }
          if (v17 <= 9 && *(void *)(a1 + 1688) <= 0x13uLL)
          {
            if ((*((unsigned char *)&v19.__r_.__value_.__s + 23) & 0x80) != 0) {
              sub_1000DC48C(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
            }
            else {
              std::string __p = v19;
            }
            sub_1012256EC((void **)&__p.__r_.__value_.__l.__data_, (uint64_t **)(a1 + 1672), 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_40;
        }
      }
LABEL_43:
      if (v11 < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1012256A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012256EC(void **a1, uint64_t **a2, int a3)
{
  if (sub_100040D3C((uint64_t)a2, (const void **)a1))
  {
    __p[0] = a1;
    double v6 = sub_100510C30(a2, (const void **)a1, (uint64_t)&unk_101D0B290, (long long **)__p);
    *((_DWORD *)v6 + 14) += a3;
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
    {
      sub_1000DC48C(__p, *a1, (unint64_t)a1[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a1;
      size_t v8 = a1[2];
    }
    int v9 = a3;
    sub_100A1C9DC(a2, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1012257B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012257CC(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 1184);
  if (sub_100622498(a2, 1u))
  {
    if (*(double *)(a1 + 1696) <= 0.0 || vabdd_f64(sub_10016C458(), *(double *)(a1 + 2944)) >= 120.0)
    {
      int v4 = *(_DWORD *)a2;
      int v5 = *(_DWORD *)(a2 + 4);
      float v6 = *(float *)(a2 + 8);
      int v7 = -1;
      int v8 = -1;
      int v9 = -1;
    }
    else
    {
      int v4 = *(_DWORD *)a2;
      int v5 = *(_DWORD *)(a2 + 4);
      float v6 = *(float *)(a2 + 8);
      int v7 = *(_DWORD *)(a1 + 1776);
      int v8 = *(_DWORD *)(a1 + 1780);
      int v9 = *(_DWORD *)(a1 + 1784) + 2000;
    }
    sub_1012213A8(v4, v5, v7, v8, v9, v6);
    double v11 = v10;
    double v12 = *(double *)(a1 + 1808);
    if (v12 > 0.0 && *(_DWORD *)(a1 + 1184) >= 0xBu)
    {
      double v13 = vabdd_f64(v11, v12);
      if (v13 < 43200.0) {
        sub_101222780(a1 + 1264, v13);
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    if (vabdd_f64(Current, v11) < 43200.0)
    {
      double v15 = Current - v11;
      if (Current - v11 < 0.0 || v15 > 1.0)
      {
        if (v15 <= 2.0)
        {
          int v19 = 2;
        }
        else if (v15 <= 3.0)
        {
          int v19 = 3;
        }
        else if (v15 <= 5.0)
        {
          int v19 = 4;
        }
        else
        {
          int v19 = 5;
        }
      }
      else
      {
        int v19 = 1;
      }
      sub_101222808(v19, a1 + 1192, 1);
      sub_101222780(a1 + 1216, v15);
    }
    *(double *)(a1 + 1808) = v11;
    long long v20 = *(_OWORD *)a2;
    long long v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 1848) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 1832) = v21;
    *(_OWORD *)(a1 + 1816) = v20;
    long long v22 = *(_OWORD *)(a2 + 48);
    long long v23 = *(_OWORD *)(a2 + 64);
    long long v24 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 1912) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 1896) = v24;
    *(_OWORD *)(a1 + 1880) = v23;
    *(_OWORD *)(a1 + 1864) = v22;
  }
  else
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    std::string::size_type v17 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134349056;
      CFAbsoluteTime v26 = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,handleGPGGA,Unexpectedly invalid GPGGA string", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      CFAbsoluteTimeGetCurrent();
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::handleGPGGA(const CLNmeaGGA &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

void sub_101225AFC(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 1052);
  if (sub_100622498(a2, 1u) && sub_100622498(a2, 0x40u))
  {
    sub_1012213A8(*(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 72), *(_DWORD *)(a2 + 76), *(_DWORD *)(a2 + 80) + 2000, *(float *)(a2 + 8));
    double v5 = v4;
    double v6 = *(double *)(a1 + 1696);
    if (v6 > 0.0) {
      sub_101222780(a1 + 1136, v5 - v6);
    }
    double v7 = CFAbsoluteTimeGetCurrent() - v5;
    if (v7 < 0.0 || v7 > 1.0)
    {
      if (v7 <= 2.0)
      {
        int v11 = 2;
      }
      else if (v7 <= 3.0)
      {
        int v11 = 3;
      }
      else if (v7 <= 5.0)
      {
        int v11 = 4;
      }
      else
      {
        int v11 = 5;
      }
    }
    else
    {
      int v11 = 1;
    }
    sub_101222808(v11, a1 + 1064, 1);
    sub_101222780(a1 + 1088, v7);
    *(double *)(a1 + 2944) = sub_10016C458();
    *(double *)(a1 + 1696) = v5;
    long long v12 = *(_OWORD *)(a2 + 48);
    long long v13 = *(_OWORD *)(a2 + 64);
    long long v14 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 1800) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 1784) = v14;
    *(_OWORD *)(a1 + 1768) = v13;
    *(_OWORD *)(a1 + 1752) = v12;
    long long v16 = *(_OWORD *)a2;
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 1736) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 1704) = v16;
    *(_OWORD *)(a1 + 1720) = v15;
  }
  else
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    int v9 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134349056;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,handleGoodGPRMC,Unexpectedly invalid GPRMC string", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      CFAbsoluteTimeGetCurrent();
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::handleGoodGPRMC(const CLNmeaRMC &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void *sub_101225DD4(uint64_t a1, double *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 1312) + 1;
  *(_DWORD *)(a1 + 1312) = v4;
  int v5 = *(_DWORD *)(a1 + 1440);
  if (*((_DWORD *)a2 + 10) == 1) {
    ++v5;
  }
  *(_DWORD *)(a1 + 1440) = v5;
  if (v4 >= 2) {
    sub_101222780(a1 + 1392, *a2 - *(double *)(a1 + 1920));
  }
  double v6 = CFAbsoluteTimeGetCurrent() - *a2;
  if (v6 < 0.0 || v6 > 1.0)
  {
    if (v6 <= 2.0)
    {
      int v8 = 2;
    }
    else if (v6 <= 3.0)
    {
      int v8 = 3;
    }
    else if (v6 <= 5.0)
    {
      int v8 = 4;
    }
    else
    {
      int v8 = 5;
    }
  }
  else
  {
    int v8 = 1;
  }
  sub_101222808(v8, a1 + 1320, 1);
  sub_101222780(a1 + 1344, v6);
  sub_101225F1C(*((_DWORD *)a2 + 11), a1 + 1472, 1);
  HIDWORD(v10) = *((_DWORD *)a2 + 9);
  LODWORD(v10) = HIDWORD(v10) - 68;
  unsigned int v9 = v10 >> 1;
  if (v9 > 7) {
    int v11 = 0;
  }
  else {
    int v11 = dword_101DAE7E8[v9];
  }
  sub_101222808(v11, a1 + 1448, 1);

  return memcpy((void *)(a1 + 1920), a2, 0x350uLL);
}

uint64_t *sub_101225F1C(unsigned int a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  unsigned int v7 = a1;
  unsigned int v4 = *(uint64_t **)(a2 + 8);
  if (!v4)
  {
LABEL_6:
    int v8 = (unsigned int *)(a1 | (unint64_t)(a3 << 32));
    return sub_1012287D8((uint64_t **)a2, (unsigned int *)&v8, (uint64_t *)&v8);
  }
  while (1)
  {
    unsigned int v5 = *((_DWORD *)v4 + 7);
    if (v5 <= a1) {
      break;
    }
LABEL_5:
    unsigned int v4 = (uint64_t *)*v4;
    if (!v4) {
      goto LABEL_6;
    }
  }
  if (v5 < a1)
  {
    ++v4;
    goto LABEL_5;
  }
  int v8 = &v7;
  double result = sub_101228718((uint64_t **)a2, &v7, (uint64_t)&unk_101D0B290, &v8);
  *((_DWORD *)result + 8) += v3;
  return result;
}

_DWORD *sub_101225FC0(_DWORD *result, int a2)
{
  if (a2)
  {
    if (a2 == 4)
    {
      char v2 = result + 329;
    }
    else
    {
      if (a2 != 3) {
        return result;
      }
      char v2 = result + 265;
    }
  }
  else
  {
    char v2 = result + 297;
  }
  ++*v2;
  return result;
}

void sub_101225FF8(uint64_t a1, double a2)
{
  double v3 = *(double *)(a1 + 2968);
  if (v3 > 0.0)
  {
    *(_DWORD *)(a1 + 240) += vabdd_f64(a2, v3);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    unsigned int v5 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v7 = *(void *)(a1 + 2968);
      int v9 = *(_DWORD *)(a1 + 236);
      int v8 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)std::string buf = 134350080;
      CFAbsoluteTime v12 = Current;
      __int16 v13 = 2050;
      uint64_t v14 = v7;
      __int16 v15 = 2050;
      double v16 = a2;
      __int16 v17 = 1026;
      int v18 = v8;
      __int16 v19 = 1026;
      int v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,locationSession,start,%{public}.1lf,end,%{public}.1lf,duration,%{public}d,sessions,%{public}d", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      CFAbsoluteTimeGetCurrent();
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::locationSessionEnd(const CFTimeInterval)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(void *)(a1 + 2968) = 0xBFF0000000000000;
    *(_WORD *)(a1 + 3024) = 0;
  }
}

void sub_101226248(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 2968) < 0.0)
  {
    *(double *)(a1 + 2968) = a2;
    ++*(_DWORD *)(a1 + 236);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    double v3 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v5 = *(void *)(a1 + 2968);
      int v6 = *(_DWORD *)(a1 + 236);
      *(_DWORD *)std::string buf = 134349568;
      CFAbsoluteTime v9 = Current;
      __int16 v10 = 2050;
      uint64_t v11 = v5;
      __int16 v12 = 1026;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,locationSession,start,%{public}.1lf,sessions,%{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      CFAbsoluteTimeGetCurrent();
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::locationSessionStart(const CFTimeInterval)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    *(_WORD *)(a1 + 3024) = 0;
  }
}

uint64_t sub_101226460(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a2 = 1;
  *(CFAbsoluteTime *)(a2 + 8) = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)(a2 + 16), "com.apple.locationd");
  uint64_t v3 = sub_10071B604();

  return sub_10071E7CC(v3, (unsigned __int8 *)a2);
}

uint64_t sub_1012264B8(int a1, std::string *__str)
{
  v4[0] = 0;
  unint64_t v5 = 0xBFF0000000000000;
  long long v19 = 0u;
  int v20 = 0;
  long long v26 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  uint64_t v17 = 0;
  int v18 = 0;
  long long v16 = 0u;
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
  int v25 = &v26;
  long long v28 = 0u;
  long long v30 = 0u;
  memset(v32, 0, sizeof(v32));
  double v27 = &v28;
  int v29 = &v30;
  double v31 = v32;
  int v33 = 0;
  long long v36 = 0u;
  uint64_t v37 = 0;
  long long v39 = 0u;
  memset(v35, 0, sizeof(v35));
  long long v34 = 0u;
  uint64_t v38 = &v39;
  long long v41 = 0u;
  uint64_t v40 = &v41;
  uint64_t v42 = v43;
  int v44 = 0;
  memset(v43, 0, sizeof(v43));
  long long v45 = 0u;
  uint64_t v46 = 0;
  long long v48 = 0u;
  float v47 = &v48;
  long long v50 = 0u;
  float v49 = &v50;
  memset(v52, 0, sizeof(v52));
  float v51 = v52;
  int v53 = 0;
  uint64_t v55 = 0;
  long long v54 = 0u;
  long long v57 = 0u;
  int v56 = &v57;
  long long v59 = 0u;
  long long v58 = &v59;
  int v60 = v61;
  memset(v61, 0, sizeof(v61));
  int v62 = 0;
  long long v67 = 0u;
  long long v63 = 0u;
  uint64_t v64 = 0;
  int v65 = 0;
  float v66 = &v67;
  memset(v69, 0, sizeof(v69));
  int v68 = v69;
  int v70 = 0;
  memset(v75, 0, sizeof(v75));
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  int v74 = v75;
  int v76 = 0;
  memset(v82, 0, sizeof(v82));
  memset(v78, 0, sizeof(v78));
  long long v77 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  uint64_t v81 = v82;
  int v83 = 0;
  memset(v87, 0, sizeof(v87));
  memset(v85, 0, 28);
  long long v84 = 0u;
  memset(&v85[32], 0, 32);
  int v86 = v87;
  int v88 = 0;
  long long v95 = 0u;
  memset(v90, 0, sizeof(v90));
  long long v89 = 0u;
  int v93 = 0;
  uint64_t v92 = 0;
  long long v91 = 0u;
  int v94 = &v95;
  long long v97 = 0u;
  long long v96 = &v97;
  long long v99 = 0u;
  long long v98 = &v99;
  uint64_t v100 = 0;
  int v101 = 0;
  long long v103 = 0u;
  int v102 = &v103;
  uint64_t v104 = 0;
  int v105 = 0;
  long long v107 = 0u;
  long long v106 = &v107;
  long long v109 = 0u;
  long long v108 = &v109;
  memset(v111, 0, sizeof(v111));
  long long v110 = v111;
  long long v114 = 0u;
  int v112 = 0;
  long long v113 = &v114;
  char v2 = sub_101221120(__str, (uint64_t)v4);
  sub_101226460((uint64_t)v2, (uint64_t)v4);
  return sub_100718550((uint64_t)v4);
}

void sub_10122681C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100718550((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101226830(int a1, std::string *__str, int a3)
{
  v6[0] = 0;
  unint64_t v7 = 0xBFF0000000000000;
  long long v20 = 0u;
  int v21 = 0;
  long long v27 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v17, 0, 29);
  uint64_t v18 = 0;
  int v19 = 0;
  v17[2] = 0u;
  memset(v23, 0, sizeof(v23));
  long long v22 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v24 = 0u;
  long long v26 = &v27;
  long long v29 = 0u;
  long long v31 = 0u;
  memset(v33, 0, sizeof(v33));
  long long v28 = &v29;
  long long v30 = &v31;
  int v32 = v33;
  int v34 = 0;
  long long v37 = 0u;
  uint64_t v38 = 0;
  long long v40 = 0u;
  memset(v36, 0, sizeof(v36));
  long long v35 = 0u;
  long long v39 = &v40;
  long long v42 = 0u;
  long long v41 = &v42;
  uint64_t v43 = v44;
  int v45 = 0;
  memset(v44, 0, sizeof(v44));
  long long v46 = 0u;
  uint64_t v47 = 0;
  long long v49 = 0u;
  long long v48 = &v49;
  long long v51 = 0u;
  long long v50 = &v51;
  memset(v53, 0, sizeof(v53));
  uint64_t v52 = v53;
  int v54 = 0;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v58 = 0u;
  long long v57 = &v58;
  long long v60 = 0u;
  long long v59 = &v60;
  int v61 = v62;
  memset(v62, 0, sizeof(v62));
  int v63 = 0;
  long long v68 = 0u;
  long long v64 = 0u;
  uint64_t v65 = 0;
  int v66 = 0;
  long long v67 = &v68;
  memset(v70, 0, sizeof(v70));
  float v69 = v70;
  int v71 = 0;
  memset(v76, 0, sizeof(v76));
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v75 = v76;
  int v77 = 0;
  memset(v83, 0, sizeof(v83));
  memset(v79, 0, sizeof(v79));
  long long v78 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v82 = v83;
  int v84 = 0;
  memset(v88, 0, sizeof(v88));
  memset(v86, 0, 28);
  long long v85 = 0u;
  memset(&v86[32], 0, 32);
  __int16 v87 = v88;
  int v89 = 0;
  long long v96 = 0u;
  memset(v91, 0, sizeof(v91));
  long long v90 = 0u;
  int v94 = 0;
  uint64_t v93 = 0;
  long long v92 = 0u;
  long long v95 = &v96;
  long long v98 = 0u;
  long long v97 = &v98;
  long long v100 = 0u;
  long long v99 = &v100;
  uint64_t v101 = 0;
  int v102 = 0;
  long long v104 = 0u;
  long long v103 = &v104;
  uint64_t v105 = 0;
  int v106 = 0;
  long long v108 = 0u;
  long long v107 = &v108;
  long long v110 = 0u;
  long long v109 = &v110;
  memset(v112, 0, sizeof(v112));
  uint64_t v111 = v112;
  long long v115 = 0u;
  int v113 = 0;
  long long v114 = &v115;
  unsigned int v4 = sub_101221120(__str, (uint64_t)v6);
  DWORD2(v17[1]) = a3;
  sub_101226460((uint64_t)v4, (uint64_t)v6);
  return sub_100718550((uint64_t)v6);
}

void sub_101226B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100718550((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101226BB0(uint64_t result, int a2)
{
  if (a2 == 1)
  {
    ++*(_DWORD *)(result + 1528);
  }
  else if (a2 == 4)
  {
    ++*(_DWORD *)(result + 1524);
  }
  return result;
}

uint64_t *sub_101226BE0(uint64_t a1, int a2)
{
  return sub_101222808(a2, a1 + 1536, 1);
}

_OWORD *sub_101226C00(_OWORD *result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 96) == 1)
  {
    char v2 = result;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v11 = _Q0;
    long long v12 = _Q0;
    long long v13 = _Q0;
    long long v14 = _Q0;
    int v15 = 0;
    sub_1012214C8((uint64_t *)&v9, a2);
    double result = sub_101226C98((uint64_t)v2 + 3000, *((_OWORD **)v2 + 375), &v9);
    uint64_t v8 = *((void *)v2 + 376);
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - *((void *)v2 + 375)) >> 5) >= 6) {
      *((void *)v2 + 376) = v8 - 96;
    }
  }
  return result;
}

_OWORD *sub_101226C98(uint64_t a1, _OWORD *__src, _OWORD *a3)
{
  uint64_t v3 = a3;
  unsigned int v4 = __src;
  long long v6 = *(unsigned char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    long long v16 = *(unsigned char **)a1;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 5) + 1;
    if (v17 > 0x2AAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    uint64_t v18 = (char *)__src - v16;
    int64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)__src - v16) >> 5);
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v16) >> 5);
    if (2 * v20 > v17) {
      unint64_t v17 = 2 * v20;
    }
    if (v20 >= 0x155555555555555) {
      unint64_t v21 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v21 = v17;
    }
    uint64_t v45 = a1 + 16;
    if (v21) {
      long long v22 = (char *)sub_100642EA8(a1 + 16, v21);
    }
    else {
      long long v22 = 0;
    }
    long long v31 = &v22[96 * v19];
    std::string __p = v22;
    long long v42 = v31;
    uint64_t v43 = v31;
    int v44 = &v22[96 * v21];
    if (v19 == v21)
    {
      if (v18 < 1)
      {
        if (v16 == (unsigned char *)v4) {
          unint64_t v33 = 1;
        }
        else {
          unint64_t v33 = 2 * v19;
        }
        int v34 = (char *)sub_100642EA8(v8, v33);
        long long v31 = &v34[96 * (v33 >> 2)];
        std::string __p = v34;
        long long v42 = v31;
        int v44 = &v34[96 * v35];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        uint64_t v32 = v19 + 2;
        if (v19 >= -1) {
          uint64_t v32 = v19 + 1;
        }
        v31 -= 96 * (v32 >> 1);
        long long v42 = v31;
      }
    }
    long long v36 = v3[1];
    *(_OWORD *)long long v31 = *v3;
    *((_OWORD *)v31 + 1) = v36;
    long long v37 = v3[2];
    long long v38 = v3[3];
    long long v39 = v3[5];
    *((_OWORD *)v31 + 4) = v3[4];
    *((_OWORD *)v31 + 5) = v39;
    *((_OWORD *)v31 + 2) = v37;
    *((_OWORD *)v31 + 3) = v38;
    uint64_t v43 = v31 + 96;
    unsigned int v4 = sub_101228894((void **)a1, (uint64_t)&__p, (char *)v4);
    if (v43 != v42) {
      uint64_t v43 = &v42[(v43 - v42 - 96) % 0x60uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == (_OWORD *)v6)
  {
    long long v27 = a3[1];
    void *__src = *a3;
    __src[1] = v27;
    long long v28 = a3[2];
    long long v29 = a3[3];
    long long v30 = a3[5];
    __src[4] = a3[4];
    __src[5] = v30;
    __src[2] = v28;
    __src[3] = v29;
    *(void *)(a1 + 8) = __src + 6;
  }
  else
  {
    long long v9 = (char *)(__src + 6);
    uint64_t v10 = v6 - 96;
    long long v11 = *(_OWORD **)(a1 + 8);
    while (v10 < (_OWORD *)v6)
    {
      long long v12 = v10[1];
      *long long v11 = *v10;
      v11[1] = v12;
      long long v13 = v10[2];
      long long v14 = v10[3];
      long long v15 = v10[5];
      v11[4] = v10[4];
      v11[5] = v15;
      _DWORD v11[2] = v13;
      v11[3] = v14;
      v10 += 6;
      v11 += 6;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(v9, __src, v6 - v9 - 4);
    }
    if (v4 <= v3) {
      v3 += 6 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    long long v23 = v3[1];
    *unsigned int v4 = *v3;
    v4[1] = v23;
    long long v24 = v3[2];
    long long v25 = v3[3];
    long long v26 = v3[4];
    *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)((char *)v3 + 76);
    _OWORD v4[3] = v25;
    void v4[4] = v26;
    void v4[2] = v24;
  }
  return v4;
}

void sub_101226F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101226F8C(uint64_t a1, void *a2, double a3)
{
  uint64_t v3 = (double *)(a2 + 1);
  unsigned int v4 = (double *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_10122701C(a1, (uint64_t)(v4 + 4), v4 + 7, a3);
      unint64_t v7 = (double *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (double *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          unsigned int v4 = v8;
        }
        while (!v9);
      }
      unsigned int v4 = v8;
    }
    while (v8 != v3);
  }
}

void sub_10122701C(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  if (*(void *)(a1 + 1512) < 0x1FuLL)
  {
    if (*a3 >= 0.0 && *(double *)(a1 + 2952) <= *a3) {
      double v15 = *a3;
    }
    else {
      double v15 = *(double *)(a1 + 2952);
    }
    if (v15 <= a4)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a2;
        uint64_t v31 = *(void *)(a2 + 16);
      }
      unint64_t v21 = (uint64_t **)(a1 + 1496);
      int v22 = vabdd_f64(a4, v15);
      sub_1012256EC(__p, v21, v22);
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      long long v23 = qword_102419368;
      if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
      {
        double Current = CFAbsoluteTimeGetCurrent();
        if (*(char *)(a2 + 23) >= 0) {
          long long v25 = (void *)a2;
        }
        else {
          long long v25 = *(void **)a2;
        }
        double v26 = *a3;
        *(_DWORD *)std::string buf = 134350082;
        double v43 = Current;
        __int16 v44 = 2082;
        uint64_t v45 = v25;
        __int16 v46 = 2050;
        double v47 = v26;
        __int16 v48 = 2050;
        double v49 = v15;
        __int16 v50 = 1026;
        int v51 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,appLaunchTime,%{public}.1lf,appStartTime,%{public}.1lf,appRunTime,%{public}d", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419360 != -1) {
          dispatch_once(&qword_102419360, &stru_102319098);
        }
        double v27 = CFAbsoluteTimeGetCurrent();
        long long v28 = *(char *)(a2 + 23) >= 0 ? (void *)a2 : *(void **)a2;
        double v29 = *a3;
        int v32 = 134350082;
        double v33 = v27;
        __int16 v34 = 2082;
        uint64_t v35 = v28;
        __int16 v36 = 2050;
        double v37 = v29;
        __int16 v38 = 2050;
        double v39 = v15;
        __int16 v40 = 1026;
        int v41 = v22;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::updateNavigationAppStats(const CFTimeInterval, const std::string &, const CFTimeInterval &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      long long v16 = qword_102419368;
      if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
      {
        double v17 = CFAbsoluteTimeGetCurrent();
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v18 = (void *)a2;
        }
        else {
          uint64_t v18 = *(void **)a2;
        }
        *(_DWORD *)std::string buf = 134349826;
        double v43 = v17;
        __int16 v44 = 2082;
        uint64_t v45 = v18;
        __int16 v46 = 2050;
        double v47 = v15;
        __int16 v48 = 2050;
        double v49 = a4;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#Warning,CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,appStartTime,%{public}.1lf, greater than machContTime,%{public}.1lf", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419360 != -1) {
          dispatch_once(&qword_102419360, &stru_102319098);
        }
        double v19 = CFAbsoluteTimeGetCurrent();
        if (*(char *)(a2 + 23) >= 0) {
          unint64_t v20 = (void *)a2;
        }
        else {
          unint64_t v20 = *(void **)a2;
        }
        int v32 = 134349826;
        double v33 = v19;
        __int16 v34 = 2082;
        uint64_t v35 = v20;
        __int16 v36 = 2050;
        double v37 = v15;
        __int16 v38 = 2050;
        double v39 = a4;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::updateNavigationAppStats(const CFTimeInterval, const std::string &, const CFTimeInterval &)", "%s\n", v10);
LABEL_37:
        if (v10 == (char *)buf) {
          return;
        }
LABEL_59:
        free(v10);
      }
    }
  }
  else
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102319098);
    }
    unint64_t v5 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      double v6 = CFAbsoluteTimeGetCurrent();
      if (*(char *)(a2 + 23) >= 0) {
        unint64_t v7 = (void *)a2;
      }
      else {
        unint64_t v7 = *(void **)a2;
      }
      *(_DWORD *)std::string buf = 134349570;
      double v43 = v6;
      __int16 v44 = 2082;
      uint64_t v45 = v7;
      __int16 v46 = 1026;
      LODWORD(v47) = 30;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessoryAWD,%{public}.1lf,updateNavigationAppStats,%{public}s,more than allowed location apps open,%{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102319098);
      }
      double v8 = CFAbsoluteTimeGetCurrent();
      if (*(char *)(a2 + 23) >= 0) {
        BOOL v9 = (void *)a2;
      }
      else {
        BOOL v9 = *(void **)a2;
      }
      int v32 = 134349570;
      double v33 = v8;
      __int16 v34 = 2082;
      uint64_t v35 = v9;
      __int16 v36 = 1026;
      LODWORD(v37) = 30;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryAWD::updateNavigationAppStats(const CFTimeInterval, const std::string &, const CFTimeInterval &)", "%s\n", v10);
      goto LABEL_37;
    }
  }
}

void sub_101227630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_101227654(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 1568) += a2;
  return sub_101222808(a3, a1 + 1576, 1);
}

uint64_t sub_10122767C(void *a1)
{
  sub_10010F274((uint64_t)v16);
  unsigned int v4 = (void *)*a1;
  char v2 = a1 + 1;
  uint64_t v3 = v4;
  if (v4 != v2)
  {
    int v5 = 0;
    do
    {
      if (v5) {
        sub_100132EFC(&v17, (uint64_t)",", 1);
      }
      uint64_t v6 = v17;
      *(_DWORD *)((char *)v18 + *(void *)(v17 - 24)) |= 4u;
      *(void *)((char *)&v18[1] + *(void *)(v6 - 24)) = 0;
      int v7 = *((char *)v3 + 55);
      if (v7 >= 0) {
        uint64_t v8 = (uint64_t)(v3 + 4);
      }
      else {
        uint64_t v8 = v3[4];
      }
      if (v7 >= 0) {
        uint64_t v9 = *((unsigned __int8 *)v3 + 55);
      }
      else {
        uint64_t v9 = v3[5];
      }
      uint64_t v10 = sub_100132EFC(&v17, v8, v9);
      sub_100132EFC(v10, (uint64_t)",", 1);
      std::ostream::operator<<();
      long long v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          long long v12 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      ++v5;
      uint64_t v3 = v12;
    }
    while (v12 != v2);
  }
  std::stringbuf::str();
  *(void *)((char *)v16
  uint64_t v17 = v14;
  if (v19 < 0) {
    operator delete((void *)v18[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1012278F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10122790C()
{
  sub_10010F274((uint64_t)v8);
  uint64_t v0 = v9[0];
  *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) |= 4u;
  *(void *)((char *)&v9[2] + *(void *)(v0 - 24)) = 0;
  std::ostream::operator<<();
  int v1 = sub_100132EFC(v9, (uint64_t)",avg,", 5);
  *(void *)((char *)v1 + *(void *)(*v1 - 24) + 16) = 2;
  std::ostream::operator<<();
  char v2 = sub_100132EFC(v9, (uint64_t)",rms,", 5);
  *(void *)((char *)v2 + *(void *)(*v2 - 24) + 16) = 2;
  std::ostream::operator<<();
  uint64_t v3 = sub_100132EFC(v9, (uint64_t)",max,", 5);
  *(void *)((char *)v3 + *(void *)(*v3 - 24) + 16) = 2;
  std::ostream::operator<<();
  unsigned int v4 = sub_100132EFC(v9, (uint64_t)",min,", 5);
  *(void *)((char *)v4 + *(void *)(*v4 - 24) + 16) = 2;
  std::ostream::operator<<();
  int v5 = sub_100132EFC(v9, (uint64_t)",std,", 5);
  *(void *)((char *)v5 + *(void *)(*v5 - 24) + 16) = 2;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v8
  v9[0] = v6;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101227C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101227C78(void *a1)
{
  sub_10010F274((uint64_t)v13);
  unsigned int v4 = (void *)*a1;
  char v2 = a1 + 1;
  uint64_t v3 = v4;
  if (v4 != v2)
  {
    int v5 = 0;
    do
    {
      if (v5) {
        sub_100132EFC(&v14, (uint64_t)",", 1);
      }
      uint64_t v6 = v14;
      *(_DWORD *)((char *)v15 + *(void *)(v14 - 24)) |= 4u;
      *(void *)((char *)&v15[1] + *(void *)(v6 - 24)) = 0;
      int v7 = (void *)std::ostream::operator<<();
      sub_100132EFC(v7, (uint64_t)",", 1);
      std::ostream::operator<<();
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      ++v5;
      uint64_t v3 = v9;
    }
    while (v9 != v2);
  }
  std::stringbuf::str();
  *(void *)((char *)v13
  uint64_t v14 = v11;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101227ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101227EF0(void *a1)
{
  sub_10010F274((uint64_t)v13);
  unsigned int v4 = (void *)*a1;
  char v2 = a1 + 1;
  uint64_t v3 = v4;
  if (v4 != v2)
  {
    int v5 = 0;
    do
    {
      if (v5) {
        sub_100132EFC(&v14, (uint64_t)",", 1);
      }
      uint64_t v6 = v14;
      *(_DWORD *)((char *)v15 + *(void *)(v14 - 24)) |= 4u;
      *(void *)((char *)&v15[1] + *(void *)(v6 - 24)) = 0;
      int v7 = (void *)std::ostream::operator<<();
      sub_100132EFC(v7, (uint64_t)",", 1);
      std::ostream::operator<<();
      uint64_t v8 = (void *)v3[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v3[2];
          BOOL v10 = *v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      ++v5;
      uint64_t v3 = v9;
    }
    while (v9 != v2);
  }
  std::stringbuf::str();
  *(void *)((char *)v13
  uint64_t v14 = v11;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10122814C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101228168(id a1)
{
  qword_102419368 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

uint64_t sub_101228198(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1 + 16;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(void *)(v4 + 16) = *(void *)(a2 + 32);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 39) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v6 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t v6 = v7;
  *(unsigned char *)(a2 + 63) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  uint64_t v8 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)uint64_t v8 = v9;
  *(unsigned char *)(a2 + 87) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  BOOL v10 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)BOOL v10 = v11;
  *(unsigned char *)(a2 + 111) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  long long v12 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)long long v12 = v13;
  *(unsigned char *)(a2 + 135) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  uint64_t v14 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)uint64_t v14 = v15;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  char v16 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)char v16 = v17;
  *(unsigned char *)(a2 + 183) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  long long v18 = *(_OWORD *)(a2 + 264);
  long long v19 = *(_OWORD *)(a2 + 248);
  long long v20 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v20;
  *(_OWORD *)(a1 + 248) = v19;
  *(_OWORD *)(a1 + 264) = v18;
  long long v21 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v21;
  long long v22 = *(_OWORD *)(a2 + 280);
  long long v23 = *(_OWORD *)(a2 + 296);
  long long v24 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
  *(_OWORD *)(a1 + 296) = v23;
  *(_OWORD *)(a1 + 312) = v24;
  *(_OWORD *)(a1 + 280) = v22;
  sub_100D697EC(a1 + 344, (void *)(a2 + 344));
  sub_100D697EC(a1 + 368, (void *)(a2 + 368));
  sub_100D697EC(a1 + 392, (void *)(a2 + 392));
  sub_100D697EC(a1 + 416, (void *)(a2 + 416));
  long long v25 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v25;
  long long v26 = *(_OWORD *)(a2 + 472);
  long long v27 = *(_OWORD *)(a2 + 488);
  long long v28 = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = v28;
  *(_OWORD *)(a1 + 472) = v26;
  *(_OWORD *)(a1 + 488) = v27;
  sub_100D697EC(a1 + 536, (void *)(a2 + 536));
  sub_100D697EC(a1 + 560, (void *)(a2 + 560));
  sub_100D697EC(a1 + 584, (void *)(a2 + 584));
  long long v29 = *(_OWORD *)(a2 + 608);
  long long v30 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v30;
  *(_OWORD *)(a1 + 608) = v29;
  sub_100D697EC(a1 + 656, (void *)(a2 + 656));
  sub_100D697EC(a1 + 680, (void *)(a2 + 680));
  sub_100D697EC(a1 + 704, (void *)(a2 + 704));
  long long v31 = *(_OWORD *)(a2 + 728);
  long long v32 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = v32;
  *(_OWORD *)(a1 + 728) = v31;
  sub_100D697EC(a1 + 776, (void *)(a2 + 776));
  sub_100D697EC(a1 + 800, (void *)(a2 + 800));
  sub_100D697EC(a1 + 824, (void *)(a2 + 824));
  long long v33 = *(_OWORD *)(a2 + 848);
  long long v34 = *(_OWORD *)(a2 + 864);
  long long v35 = *(_OWORD *)(a2 + 880);
  *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 864) = v34;
  *(_OWORD *)(a1 + 880) = v35;
  *(_OWORD *)(a1 + 848) = v33;
  sub_100D697EC(a1 + 904, (void *)(a2 + 904));
  sub_100D697EC(a1 + 928, (void *)(a2 + 928));
  *(_OWORD *)(a1 + 952) = *(_OWORD *)(a2 + 952);
  long long v36 = *(_OWORD *)(a2 + 968);
  long long v37 = *(_OWORD *)(a2 + 984);
  long long v38 = *(_OWORD *)(a2 + 1000);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(_OWORD *)(a1 + 984) = v37;
  *(_OWORD *)(a1 + 1000) = v38;
  *(_OWORD *)(a1 + 968) = v36;
  sub_100D697EC(a1 + 1024, (void *)(a2 + 1024));
  long long v39 = *(_OWORD *)(a2 + 1048);
  long long v40 = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1064) = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1080) = v40;
  *(_OWORD *)(a1 + 1048) = v39;
  long long v41 = *(_OWORD *)(a2 + 1096);
  long long v42 = *(_OWORD *)(a2 + 1112);
  long long v43 = *(_OWORD *)(a2 + 1128);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(_OWORD *)(a1 + 1112) = v42;
  *(_OWORD *)(a1 + 1128) = v43;
  *(_OWORD *)(a1 + 1096) = v41;
  sub_100D697EC(a1 + 1152, (void *)(a2 + 1152));
  long long v44 = *(_OWORD *)(a2 + 1176);
  long long v45 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v45;
  *(_OWORD *)(a1 + 1176) = v44;
  long long v46 = *(_OWORD *)(a2 + 1224);
  long long v47 = *(_OWORD *)(a2 + 1240);
  long long v48 = *(_OWORD *)(a2 + 1256);
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(_OWORD *)(a1 + 1240) = v47;
  *(_OWORD *)(a1 + 1256) = v48;
  *(_OWORD *)(a1 + 1224) = v46;
  sub_100D697EC(a1 + 1280, (void *)(a2 + 1280));
  long long v49 = *(_OWORD *)(a2 + 1304);
  long long v50 = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1336) = v50;
  *(_OWORD *)(a1 + 1304) = v49;
  long long v51 = *(_OWORD *)(a2 + 1352);
  long long v52 = *(_OWORD *)(a2 + 1368);
  long long v53 = *(_OWORD *)(a2 + 1384);
  *(_DWORD *)(a1 + 1400) = *(_DWORD *)(a2 + 1400);
  *(_OWORD *)(a1 + 1368) = v52;
  *(_OWORD *)(a1 + 1384) = v53;
  *(_OWORD *)(a1 + 1352) = v51;
  sub_100D697EC(a1 + 1408, (void *)(a2 + 1408));
  sub_100D697EC(a1 + 1432, (void *)(a2 + 1432));
  sub_1012285F0(a1 + 1456, (void *)(a2 + 1456));
  uint64_t v54 = *(void *)(a2 + 1480);
  *(_DWORD *)(a1 + 1488) = *(_DWORD *)(a2 + 1488);
  *(void *)(a1 + 1480) = v54;
  sub_100D697EC(a1 + 1496, (void *)(a2 + 1496));
  uint64_t v55 = *(void *)(a2 + 1520);
  *(_DWORD *)(a1 + 1528) = *(_DWORD *)(a2 + 1528);
  *(void *)(a1 + 1520) = v55;
  sub_100D697EC(a1 + 1536, (void *)(a2 + 1536));
  sub_100D697EC(a1 + 1560, (void *)(a2 + 1560));
  sub_100D697EC(a1 + 1584, (void *)(a2 + 1584));
  long long v56 = *(_OWORD *)(a2 + 1608);
  *(_DWORD *)(a1 + 1624) = *(_DWORD *)(a2 + 1624);
  *(_OWORD *)(a1 + 1608) = v56;
  sub_1012285F0(a1 + 1632, (void *)(a2 + 1632));
  return a1;
}

void sub_1012285F0(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_1000DB264(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *long long v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t *sub_10122865C(uint64_t **a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    BOOL v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *sub_101228718(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    long long v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_1000EDF90(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1012287D8(uint64_t **a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *sub_101228894(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unsigned int v7 = v5;
  if (*a1 != __src)
  {
    unsigned int v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 5);
      *(_OWORD *)(v9 - 96) = *((_OWORD *)v8 - 6);
      *(_OWORD *)(v9 - 80) = v10;
      long long v11 = *((_OWORD *)v8 - 4);
      long long v12 = *((_OWORD *)v8 - 3);
      long long v13 = *((_OWORD *)v8 - 2);
      unsigned int v7 = (void *)(v9 - 96);
      *(_OWORD *)(v9 - 20) = *(_OWORD *)(v8 - 20);
      *(_OWORD *)(v9 - 48) = v12;
      *(_OWORD *)(v9 - 32) = v13;
      *(_OWORD *)(v9 - 64) = v11;
      v8 -= 96;
      v9 -= 96;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v14 = a1[1];
  uint64_t v15 = *(void *)(a2 + 16);
  int64_t v16 = v14 - __src;
  if (v14 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v16 - 4);
    unsigned int v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v15 + v16;
  long long v17 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v17;
  long long v18 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v18;
  long long v19 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v19;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

id *sub_10122898C(id *a1)
{
  return a1;
}

uint64_t sub_1012289C0(uint64_t a1)
{
  sub_101228B4C(a1);
  uint64_t v2 = mach_absolute_time();
  double v3 = sub_1000D3D90(v2 - *(void *)(a1 + 8));
  v6[0] = *(void *)a1;
  v5[0] = @"client";
  v5[1] = @"inForegroundPercent";
  v6[1] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 24) / v3 / 0.05) * 0.05];
  void v5[2] = @"desiredAccuracy";
  _DWORD v6[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  _OWORD v5[3] = @"duration";
  v6[3] = +[NSNumber numberWithDouble:round(v3 / 10.0) * 10.0];
  void v5[4] = @"durationForeground";
  uint64_t v6[4] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 24) / 10.0) * 10.0];
  void v5[5] = @"durationBackground";
  void v6[5] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 32) / 10.0) * 10.0];
  +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:6];
  uint64_t result = AnalyticsSendEvent();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  return result;
}

double sub_101228B4C(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  double v3 = sub_1000D3D90(v2 - *(void *)(a1 + 16));
  uint64_t v4 = 24;
  if (!*(unsigned char *)(a1 + 48)) {
    uint64_t v4 = 32;
  }
  double result = v3 + *(double *)(a1 + v4);
  *(double *)(a1 + v4) = result;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_101228BA4(uint64_t a1)
{
  if (!*(void *)(a1 + 128)) {
    sub_100681630();
  }
  return a1 + 128;
}

void sub_101228C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102319290);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    long long v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationSubscription::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102319290);
    }
    uint64_t v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      long long v12 = "";
      __int16 v13 = 2082;
      uint64_t v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationSubscription::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_101228E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101228E1C@<X0>(uint64_t a1@<X8>)
{
  v12[0] = off_102319340;
  v12[1] = sub_100042554;
  _DWORD v12[2] = 0;
  uint64_t v12[3] = v12;
  sub_100134750(v13, "kCLConnectionMessagePausesLocationUpdatesAutomatically");
  sub_100BEF1D8((uint64_t)&v14, (uint64_t)v12);
  uint64_t v9 = off_1023193D0;
  v10[0] = sub_10009C1D0;
  v10[1] = 0;
  __int16 v11 = &v9;
  sub_100134750(v15, "kCLConnectionMessageLocation");
  sub_100BEF1D8((uint64_t)&v16, (uint64_t)&v9);
  v8[0] = off_102319340;
  v8[1] = sub_101229250;
  void v8[2] = 0;
  v8[3] = v8;
  sub_100134750(v17, "kCLConnectionMessageBatch");
  sub_100BEF1D8((uint64_t)&v18, (uint64_t)v8);
  v7[0] = off_102319340;
  v7[1] = sub_10122A1C4;
  _DWORD v7[2] = 0;
  v7[3] = v7;
  sub_100134750(v19, "kCLConnectionMessageAllowsBackgroundLocationUpdates");
  sub_100BEF1D8((uint64_t)&v20, (uint64_t)v7);
  v6[0] = off_102319340;
  v6[1] = sub_10122A4DC;
  _DWORD v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v21, "kCLConnectionMessageShowsBackgroundLocationIndicator");
  sub_100BEF1D8((uint64_t)&v22, (uint64_t)v6);
  v5[0] = off_102319340;
  v5[1] = sub_10122A7D0;
  void v5[2] = 0;
  _OWORD v5[3] = v5;
  sub_100134750(v23, "kCLConnectionMessageAllowsMapCorrection");
  sub_100BEF1D8((uint64_t)&v24, (uint64_t)v5);
  v4[0] = off_102319340;
  v4[1] = sub_10122AE20;
  void v4[2] = 0;
  _OWORD v4[3] = v4;
  sub_100134750(v25, "kCLConnectionMessageActivityType");
  sub_100BEF1D8((uint64_t)&v26, (uint64_t)v4);
  sub_10122E354(a1, (unsigned __int8 *)v13, 7);
  uint64_t v2 = 49;
  do
  {
    sub_100BEF258(&v12[v2]);
    if (SHIBYTE((&v11)[v2]) < 0) {
      operator delete((void *)v10[v2]);
    }
    v2 -= 7;
  }
  while (v2 * 8);
  sub_100BEF258(v4);
  sub_100BEF258(v5);
  sub_100BEF258(v6);
  sub_100BEF258(v7);
  sub_100BEF258(v8);
  sub_100BEF258(&v9);
  return sub_100BEF258(v12);
}

void sub_101229168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  for (uint64_t i = 336; i != -56; i -= 56)
    sub_10122B124((uint64_t)(&a37 + i));
  sub_100BEF258(&a9);
  sub_100BEF258(&a13);
  sub_100BEF258(&a17);
  sub_100BEF258(&a21);
  sub_100BEF258(&a25);
  sub_100BEF258(&a29);
  sub_100BEF258(&a33);
  _Unwind_Resume(a1);
}

void sub_101229250(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  double Current = CFAbsoluteTimeGetCurrent();
  BOOL v49 = 0;
  double v47 = -1.0;
  double v48 = -1.0;
  int v6 = *(unsigned __int8 *)(a1 + 241);
  if (*(unsigned char *)(a1 + 241))
  {
    sub_10122BF58(a1);
    sub_10122C1BC(a1, 15);
  }
  id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageBatchAllowedKey"];
  if (!v7 || (sub_1000D2C98(v7, &v49) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    uint64_t v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      *(void *)int v63 = "kCLConnectionMessageBatchAllowedKey";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_32;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    int v50 = 136446210;
    long long v51 = "kCLConnectionMessageBatchAllowedKey";
    long long v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
    goto LABEL_108;
  }
  if (v49)
  {
    sub_100103240();
    if ((sub_10010145C() & 1) == 0)
    {
      if (v6)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1023192F0);
        }
        uint64_t v24 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 68289026;
          *(_DWORD *)int v63 = 0;
          *(_WORD *)&v63[4] = 2082;
          *(void *)&v63[6] = "";
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: How were we batching if this wasn't supported?\"}", buf, 0x12u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1023192F0);
          }
        }
        long long v25 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          *(_DWORD *)std::string buf = 68289026;
          *(_DWORD *)int v63 = 0;
          *(_WORD *)&v63[4] = 2082;
          *(void *)&v63[6] = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: How were we batching if this wasn't supported?", "{\"msg%{public}.0s\":\"BATCH: How were we batching if this wasn't supported?\"}", buf, 0x12u);
        }
      }
      sub_10122B498(a1, 1);
      uint64_t v17 = 11;
      goto LABEL_47;
    }
    id v8 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageBatchDistanceKey"];
    if (v8 && (sub_1000A6DD8(v8, &v48) & 1) != 0)
    {
      id v9 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageBatchTimeoutKey"];
      if (v9 && (sub_1000A6DD8(v9, &v47) & 1) != 0)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        int v10 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v11 = *(void *)(a1 + 248);
          uint64_t v12 = *(void *)(a1 + 256);
          uint64_t v13 = *(void *)(a1 + 24);
          *(_DWORD *)std::string buf = 134219266;
          *(double *)int v63 = v48;
          *(_WORD *)&v63[8] = 2048;
          *(double *)&v63[10] = v47;
          *(_WORD *)&v63[18] = 2048;
          *(void *)&v63[20] = v11;
          __int16 v64 = 2048;
          uint64_t v65 = v12;
          __int16 v66 = 2048;
          double v67 = Current;
          __int16 v68 = 2112;
          uint64_t v69 = v13;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BATCH: request (%.1fm, %.1fs) will be based on %.1fm (%.1fs), %.1fs for client %@", buf, 0x3Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1023192B0);
          }
          uint64_t v43 = *(void *)(a1 + 248);
          uint64_t v44 = *(void *)(a1 + 256);
          uint64_t v45 = *(void *)(a1 + 24);
          int v50 = 134219266;
          long long v51 = *(const char **)&v48;
          __int16 v52 = 2048;
          double v53 = v47;
          __int16 v54 = 2048;
          uint64_t v55 = v43;
          __int16 v56 = 2048;
          uint64_t v57 = v44;
          __int16 v58 = 2048;
          double v59 = Current;
          __int16 v60 = 2112;
          uint64_t v61 = v45;
          long long v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)", "%s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        int v14 = *(_DWORD *)(a1 + 196);
        if (v14 < 0)
        {
          if (v6)
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1023192B0);
            }
            long long v29 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)std::string buf = 68289026;
              *(_DWORD *)int v63 = 0;
              *(_WORD *)&v63[4] = 2082;
              *(void *)&v63[6] = "";
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: How were we not updating location?\"}", buf, 0x12u);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1023192B0);
              }
            }
            long long v30 = qword_102419528;
            if (os_signpost_enabled((os_log_t)qword_102419528))
            {
              *(_DWORD *)std::string buf = 68289026;
              *(_DWORD *)int v63 = 0;
              *(_WORD *)&v63[4] = 2082;
              *(void *)&v63[6] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: How were we not updating location?", "{\"msg%{public}.0s\":\"BATCH: How were we not updating location?\"}", buf, 0x12u);
            }
          }
          sub_10122B498(a1, 1);
          uint64_t v17 = 12;
          goto LABEL_47;
        }
        if (v14)
        {
          if (v6)
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1023192B0);
            }
            __int16 v15 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)std::string buf = 68289026;
              *(_DWORD *)int v63 = 0;
              *(_WORD *)&v63[4] = 2082;
              *(void *)&v63[6] = "";
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: How were we batching accuracy was too low?\"}", buf, 0x12u);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1023192B0);
              }
            }
            uint64_t v16 = qword_102419528;
            if (os_signpost_enabled((os_log_t)qword_102419528))
            {
              *(_DWORD *)std::string buf = 68289026;
              *(_DWORD *)int v63 = 0;
              *(_WORD *)&v63[4] = 2082;
              *(void *)&v63[6] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: How were we batching accuracy was too low?", "{\"msg%{public}.0s\":\"BATCH: How were we batching accuracy was too low?\"}", buf, 0x12u);
            }
          }
          sub_10122B498(a1, 1);
          uint64_t v17 = 13;
LABEL_47:
          sub_10122C1BC(a1, v17);
          goto LABEL_32;
        }
        if ([*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDistanceFilterKey"])
        {
          [objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDistanceFilterKey") doubleValue];
          if (v31 > 0.0)
          {
            if (v6)
            {
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1023192B0);
              }
              long long v32 = qword_102419528;
              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)std::string buf = 68289026;
                *(_DWORD *)int v63 = 0;
                *(_WORD *)&v63[4] = 2082;
                *(void *)&v63[6] = "";
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: How were we batching if a distance filter was on?\"}", buf, 0x12u);
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1023192B0);
                }
              }
              long long v33 = qword_102419528;
              if (os_signpost_enabled((os_log_t)qword_102419528))
              {
                *(_DWORD *)std::string buf = 68289026;
                *(_DWORD *)int v63 = 0;
                *(_WORD *)&v63[4] = 2082;
                *(void *)&v63[6] = "";
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: How were we batching if a distance filter was on?", "{\"msg%{public}.0s\":\"BATCH: How were we batching if a distance filter was on?\"}", buf, 0x12u);
              }
            }
            sub_10122B498(a1, 1);
            uint64_t v17 = 14;
            goto LABEL_47;
          }
        }
        double v34 = v48;
        if (v48 <= 0.0 || (double v35 = v47, v47 <= 0.0))
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1023192B0);
          }
          long long v39 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 68289026;
            *(_DWORD *)int v63 = 0;
            *(_WORD *)&v63[4] = 2082;
            *(void *)&v63[6] = "";
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: distance or timeout was <= 0 (techincally exit criteria has already been satisfied.)\"}", buf, 0x12u);
          }
          sub_10122B498(a1, 1);
          uint64_t v17 = 0xFFFFFFFFLL;
          goto LABEL_47;
        }
        double v36 = *(double *)(a1 + 248);
        if (v48 != 1.79769313e308 && (v36 < 0.0 || *(double *)(a1 + 256) + 7.0 < Current))
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1023192B0);
          }
          long long v37 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 68289026;
            *(_DWORD *)int v63 = 0;
            *(_WORD *)&v63[4] = 2082;
            *(void *)&v63[6] = "";
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Notice Location uncertainty too high to allow deferred updates now\"}", buf, 0x12u);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1023192B0);
            }
          }
          long long v38 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 68289026;
            *(_DWORD *)int v63 = 0;
            *(_WORD *)&v63[4] = 2082;
            *(void *)&v63[6] = "";
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning BATCH: odometer is not running, we have no way to know what distance is relative to\"}", buf, 0x12u);
          }
          sub_10122B498(a1, 1);
          uint64_t v17 = 11;
          goto LABEL_47;
        }
        double v40 = v48 + v36;
        double v41 = Current + v47;
        *(double *)(a1 + 264) = v40;
        *(double *)(a1 + 272) = Current + v35;
        if (v34 >= 100.0 && v35 >= 30.0)
        {
          sub_10122B88C(a1, v40, v41);
          goto LABEL_32;
        }
        sub_10122B498(a1, 1);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        uint64_t v42 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 68289026;
          *(_DWORD *)int v63 = 0;
          *(_WORD *)&v63[4] = 2082;
          *(void *)&v63[6] = "";
          long long v21 = "{\"msg%{public}.0s\":\"BATCH: scheduled batch exit but not off-boarding\"}";
          uint64_t v22 = v42;
          uint32_t v23 = 18;
          goto LABEL_37;
        }
        goto LABEL_32;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      long long v28 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)int v63 = "kCLConnectionMessageBatchTimeoutKey";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_32;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      int v50 = 136446210;
      long long v51 = "kCLConnectionMessageBatchTimeoutKey";
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      uint64_t v26 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 136446210;
        *(void *)int v63 = "kCLConnectionMessageBatchDistanceKey";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_32;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      int v50 = 136446210;
      long long v51 = "kCLConnectionMessageBatchDistanceKey";
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
    }
LABEL_108:
    if (v27 != (char *)buf) {
      free(v27);
    }
    goto LABEL_32;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  uint64_t v19 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *(void *)(a1 + 24);
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)int v63 = 0;
    *(_WORD *)&v63[4] = 2082;
    *(void *)&v63[6] = "";
    *(_WORD *)&v63[14] = 2114;
    *(void *)&v63[16] = v20;
    long long v21 = "{\"msg%{public}.0s\":\"BATCH: client disallowed Batch\", \"Client\":%{public, location:escape_only}@}";
    uint64_t v22 = v19;
    uint32_t v23 = 28;
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, v21, buf, v23);
  }
LABEL_32:
}

void sub_10122A178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10122A1C4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v11 = 0;
  id v5 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageAllowsBackgroundLocationUpdatesKey"];
  if (v5 && (sub_1000D2C98(v5, &v11) & 1) != 0)
  {
    if (*(unsigned char *)(a1 + 90) != v11)
    {
      *(unsigned char *)(a1 + 90) = v11;
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      int v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 24);
        int v8 = *(unsigned __int8 *)(a1 + 90);
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)__int16 v15 = 0;
        *(_WORD *)&v15[4] = 2082;
        *(void *)&v15[6] = "";
        __int16 v16 = 2114;
        uint64_t v17 = v7;
        __int16 v18 = 1026;
        int v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client is setting ContinuousBackgroundLocationRequested\", \"Client\":%{public, location:escape_only}@, \"ContinuousBackgroundLocationRequested\":%{public}d}", buf, 0x22u);
      }
      sub_10012A2F0(a1);
      if (*(unsigned char *)(a1 + 90)) {
        sub_10012AFC4(a1, 0);
      }
      else {
        sub_10012AC24(a1, 0);
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    id v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      *(void *)__int16 v15 = "kCLConnectionMessageAllowsBackgroundLocationUpdatesKey";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      int v12 = 136446210;
      uint64_t v13 = "kCLConnectionMessageAllowsBackgroundLocationUpdatesKey";
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageAllowsBackgroundLocationUpdates(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_10122A4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10122A4DC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  BOOL v11 = 0;
  id v5 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageShowsBackgroundLocationIndicatorKey"];
  if (v5 && (sub_1000D2C98(v5, &v11) & 1) != 0)
  {
    if (*(unsigned char *)(a1 + 91) != v11)
    {
      *(unsigned char *)(a1 + 91) = v11;
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      int v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 24);
        int v8 = *(unsigned __int8 *)(a1 + 91);
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)__int16 v15 = 0;
        *(_WORD *)&v15[4] = 2082;
        *(void *)&v15[6] = "";
        __int16 v16 = 2114;
        uint64_t v17 = v7;
        __int16 v18 = 1026;
        int v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client is setting ContinuousBackgroundLocationIndicatorForAlwaysEnabled\", \"Client\":%{public, location:escape_only}@, \"ContinuousBackgroundLocationIndicatorForAlwaysEnabled\":%{public}d}", buf, 0x22u);
      }
      sub_10012A7A0(a1);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    id v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      *(void *)__int16 v15 = "kCLConnectionMessageShowsBackgroundLocationIndicatorKey";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      int v12 = 136446210;
      uint64_t v13 = "kCLConnectionMessageShowsBackgroundLocationIndicatorKey";
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageShowsBackgroundLocationIndicator(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_10122A7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10122A7D0(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (([*(id *)(a1 + 16) isAuthorizedForServiceType:12] & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%@ with CorrectiveCompensation enabled attempting allowsMapCorrection.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      id v9 = *(const char **)(a1 + 24);
      int v26 = 138412290;
      long long v27 = v9;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::handleMessageAllowsMapCorrection(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      goto LABEL_47;
    }
    goto LABEL_32;
  }
  if ([*(id *)(a1 + 176) objectForKeyedSubscript:@"kCLConnectionMessageDesiredAccuracyKey"])
  {
    [objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", @"kCLConnectionMessageDesiredAccuracyKey") doubleValue];
    double v6 = v5;
  }
  else
  {
    double v6 = -1.0;
  }
  char v25 = 1;
  id v11 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageAllowsMapCorrectionKey"];
  if (v11 && (sub_1000D2C98(v11, (BOOL *)&v25) & 1) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 193) == v25) {
      goto LABEL_32;
    }
    *(unsigned char *)(a1 + 193) = v25;
    sub_100134750(buf, "kCLConnectionMessageLocation");
    if (sub_10012E364(a1))
    {
      BOOL v13 = v6 < 100.0 && (*(unsigned __int8 *)(a1 + 194) | *(unsigned __int8 *)(a1 + 193)) != 0;
      if (SHIBYTE(v40) < 0) {
        operator delete(*(void **)buf);
      }
      if (v13)
      {
        uint64_t v14 = sub_100129E3C(a1);
        [*(id *)(*(void *)v14 + 16) register:*(void *)(*(void *)v14 + 8) forNotification:17 registrationInfo:0];
        int v15 = 1;
        goto LABEL_36;
      }
    }
    else if (SHIBYTE(v40) < 0)
    {
      operator delete(*(void **)buf);
    }
    uint64_t v17 = sub_100129E3C(a1);
    [*(id *)(*(void *)v17 + 16) unregister:*(void *)(*(void *)v17 + 8) forNotification:17];
    int v15 = 0;
LABEL_36:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    __int16 v18 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a1 + 24);
      int v20 = *(_DWORD *)(a1 + 44);
      int v21 = *(unsigned __int8 *)(a1 + 193);
      *(_DWORD *)std::string buf = 138413314;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v37 = 1024;
      int v38 = v20;
      __int16 v39 = 1024;
      int v40 = v21;
      __int16 v41 = 2048;
      double v42 = v6;
      __int16 v43 = 1024;
      int v44 = v15;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,Client,'%@',pid,%u,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d", buf, 0x28u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v22 = *(const char **)(a1 + 24);
      int v23 = *(_DWORD *)(a1 + 44);
      int v24 = *(unsigned __int8 *)(a1 + 193);
      int v26 = 138413314;
      long long v27 = v22;
      __int16 v28 = 1024;
      int v29 = v23;
      __int16 v30 = 1024;
      int v31 = v24;
      __int16 v32 = 2048;
      double v33 = v6;
      __int16 v34 = 1024;
      int v35 = v15;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::handleMessageAllowsMapCorrection(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
LABEL_47:
      if (v10 != buf) {
        free(v10);
      }
      goto LABEL_32;
    }
    goto LABEL_32;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1023192F0);
  }
  __int16 v16 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = "kCLConnectionMessageAllowsMapCorrectionKey";
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    int v26 = 136446210;
    long long v27 = "kCLConnectionMessageAllowsMapCorrectionKey";
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageAllowsMapCorrection(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
    goto LABEL_47;
  }
LABEL_32:
}

void sub_10122ADBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_10122AE20(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v12[0] = 0;
  id v5 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageActivityTypeKey"];
  if (v5 && (sub_10013E6B4(v5, v12) & 1) != 0)
  {
    unsigned int v6 = v12[0];
    if (*(_DWORD *)(a1 + 232) != v12[0])
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v7 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 24);
        int v9 = *(_DWORD *)(a1 + 232);
        *(_DWORD *)std::string buf = 68289794;
        *(_DWORD *)int v15 = 0;
        *(_WORD *)&v15[4] = 2082;
        *(void *)&v15[6] = "";
        __int16 v16 = 2114;
        uint64_t v17 = v8;
        __int16 v18 = 1026;
        int v19 = v9;
        __int16 v20 = 1026;
        unsigned int v21 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client changed activity type\", \"Client\":%{public, location:escape_only}@, \"from\":%{public}d, \"to\":%{public}d}", buf, 0x28u);
      }
      sub_10122B170(a1, v6);
      sub_10012D358(a1);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    int v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136446210;
      *(void *)int v15 = "kCLConnectionMessageActivityTypeKey";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      v12[1] = 136446210;
      BOOL v13 = "kCLConnectionMessageActivityTypeKey";
      id v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageActivityType(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_10122B0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10122B124(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10122B170(uint64_t a1, unsigned int a2)
{
  if ([*(id *)(a1 + 16) isAuthorizedForServiceType:12])
  {
    unsigned int v4 = *(_DWORD *)(a1 + 232);
    if (v4 == 5) {
      unsigned int v5 = 29;
    }
    else {
      unsigned int v5 = 28;
    }
    BOOL v6 = v4 < 3 || v4 == 4;
    char v7 = v6;
    if (v6) {
      uint64_t v8 = 48;
    }
    else {
      uint64_t v8 = v5;
    }
    if (a2 < 3 || a2 == 4)
    {
      uint64_t v10 = 48;
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
      if (a2 == 5) {
        uint64_t v10 = 29;
      }
      else {
        uint64_t v10 = 28;
      }
    }
    if (v10 != v8)
    {
      if ((v7 & 1) == 0)
      {
        uint64_t v14 = sub_100129E3C(a1);
        [*(id *)(*(void *)v14 + 16) unregister:*(void *)(*(void *)v14 + 8) forNotification:v8];
      }
      if ((v9 & 1) == 0)
      {
        uint64_t v15 = sub_100129E3C(a1);
        [*(id *)(*(void *)v15 + 16) register:*(void *)(*(void *)v15 + 8) forNotification:v10 registrationInfo:0];
      }
    }
    *(_DWORD *)(a1 + 232) = a2;
    if (*(double *)(a1 + 208) != 1.79769313e308)
    {
      BOOL v16 = (a2 == 4 || a2 == 2) && ([*(id *)(a1 + 16) inUseLevelIsAtLeast:5] & 1) != 0;
      sub_1001A024C(a1, v16);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023192F0);
    }
    id v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%@ with CorrectiveCompensation enabled attempting setActivityType", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023192F0);
      }
      BOOL v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::setActivityType(CLClientActivityType)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_10122B470(unsigned int a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return qword_101DAED98[a1];
  }
}

uint64_t sub_10122B498(uint64_t result, int a2)
{
  if ((*(unsigned char *)(result + 241) != 0) != a2)
  {
    uint64_t v2 = result;
    *(unsigned char *)(result + 241) = a2;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    double v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(v2 + 24);
      int v5 = *(unsigned __int8 *)(v2 + 241);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      uint64_t v8 = "";
      __int16 v9 = 2114;
      uint64_t v10 = v4;
      __int16 v11 = 1026;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: setBatching\", \"Client\":%{public, location:escape_only}@, \"isBatching\":%{public}d}", (uint8_t *)v6, 0x22u);
    }
    return sub_1010A4BFC(v2);
  }
  return result;
}

void sub_10122B5B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (!v2) {
    sub_10103FA90();
  }
  [*(id *)(v2 + 16) register:*(void *)(v2 + 8) forNotification:0 registrationInfo:v5];
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  double v3 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = 68289282;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 2114;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client registered for autopause notifications\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v5, 0x1Cu);
  }
}

void sub_10122B88C(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 241) || *(void *)(a1 + 280) || *(void *)(a1 + 288))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    __int16 v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: startBatching called but we're already batching\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
    }
    __int16 v7 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: startBatching called but we're already batching", "{\"msg%{public}.0s\":\"BATCH: startBatching called but we're already batching\"}", buf, 0x12u);
    }
    sub_10122BF58(a1);
    sub_10122C1BC(a1, 15);
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  __int16 v8 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v26 = 2114;
    uint64_t v27 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: starting client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (a2 == 1.79769313e308) {
    goto LABEL_23;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  uint64_t v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    *(double *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BATCH: scheduling odometer alarm for %.1f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    int v23 = 134217984;
    double v24 = a2;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::startBatching(CLTypeOdometer, CFAbsoluteTime)", "%s\n", v20);
    if (v20 != buf) {
      free(v20);
    }
  }
  __int16 v11 = [CLOdometerAlarm alloc];
  uint64_t v12 = *(void *)(a1 + 8);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10122C470;
  v22[3] = &unk_102319110;
  v22[4] = a1;
  *(double *)&v22[5] = a2;
  BOOL v13 = [(CLOdometerAlarm *)v11 initWithDistance:v12 inUniverse:v22 handler:a2];
  *(void *)(a1 + 280) = v13;
  if (v13)
  {
LABEL_23:
    if (a3 != 1.79769313e308)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v14 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(double *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BATCH: scheduling timer for %.1f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        int v23 = 134217984;
        double v24 = a3;
        unsigned int v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::startBatching(CLTypeOdometer, CFAbsoluteTime)", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"BatchAlarm.%@", [*(id *)(a1 + 24) description]);
      operator new();
    }
    sub_10012AFC4(a1, 2);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)std::string buf = _Q0;
    *(_WORD *)&uint8_t buf[16] = 0;
    uint64_t v27 = 0;
    sub_101228BA4(a1);
    sub_10012F770();
  }
  sub_10122B498(a1, 1);
  sub_10122C1BC(a1, 11);
}

void sub_10122BF08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

id sub_10122BF58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 241))
  {
LABEL_9:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    goto LABEL_11;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    int v10 = 68289026;
    int v11 = 0;
    __int16 v12 = 2082;
    BOOL v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"BATCH: stopBatching called but we're not batching\"}", (uint8_t *)&v10, 0x12u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
  }
  double v3 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    int v10 = 68289026;
    int v11 = 0;
    __int16 v12 = 2082;
    BOOL v13 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BATCH: stopBatching called but we're not batching", "{\"msg%{public}.0s\":\"BATCH: stopBatching called but we're not batching\"}", (uint8_t *)&v10, 0x12u);
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    BOOL v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: stopping client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
  }
  [*(id *)(a1 + 280) invalidate];

  *(void *)(a1 + 280) = 0;
  uint64_t v6 = *(void *)(a1 + 288);
  if (v6)
  {
    sub_1001B0AE4(v6);
    __int16 v7 = *(std::__shared_weak_count **)(a1 + 296);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
  sub_10012AC24(a1, 2);
  uint64_t v8 = sub_101228BA4(a1);
  return [*(id *)(*(void *)v8 + 16) unregister:*(void *)(*(void *)v8 + 8) forNotification:15];
}

void sub_10122C1BC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 241))
  {
    sub_10122B498(a1, 0);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 24);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 1026;
      int v16 = a2;
      __int16 v17 = 2114;
      uint64_t v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: Sending didFinishDeferredUpdatesWithError message to client\", \"error\":%{public}d, \"Client\":%{public, location:escape_only}@}", buf, 0x22u);
    }
    CFStringRef v8 = @"kCLConnectionMessageErrorKey";
    uint64_t v9 = +[NSNumber numberWithInt:a2];
    *(void *)std::string buf = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    sub_10122D0E4(a1);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "BATCH: Not batching but tried to finish with error %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      int v10 = 67240192;
      int v11 = a2;
      __int16 v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::sendBatchDidFinish(int)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

id sub_10122C470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [*(id *)(v6 + 8) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10122C510;
  v9[3] = &unk_1023190F0;
  void v9[5] = a3;
  void v9[6] = v6;
  _OWORD v9[4] = a2;
  v9[7] = *(void *)(a1 + 40);
  return [v7 async:v9];
}

void sub_10122C510(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 32) == *(void *)(v2 + 280))
  {
    sub_10122BF58(*(void *)(a1 + 48));
    if (*(void *)(a1 + 40))
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      id v7 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        id v8 = [[objc_msgSend(*(id *)(a1 + 40), "description") UTF8String];
        uint64_t v9 = *(void *)(v2 + 24);
        *(_DWORD *)std::string buf = 136446466;
        *(void *)__int16 v14 = v8;
        *(_WORD *)&v14[8] = 2114;
        *(void *)&v14[10] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "BATCH: Odometer errored (%{public}s) for client (%{public}@)", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1023192B0);
        }
        [objc_msgSend(*(id *)(a1 + 40), "description") UTF8String];
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationSubscription::startBatching(CLTypeOdometer, CFAbsoluteTime)_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      sub_10122C1BC(v2, (uint64_t)[*(id *)(a1 + 40) code]);
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      int v10 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(void *)(v2 + 24);
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)__int16 v14 = 0;
        *(_WORD *)&v14[4] = 2082;
        *(void *)&v14[6] = "";
        *(_WORD *)&v14[14] = 2114;
        *(void *)&v14[16] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: Odometer criterion met, waiting for location event to notify client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    double v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 56);
      id v5 = [[objc_msgSend(*(id *)(a1 + 40), "description") UTF8String];
      *(_DWORD *)std::string buf = 134218242;
      *(void *)__int16 v14 = v4;
      *(_WORD *)&v14[8] = 2080;
      *(void *)&v14[10] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "BATCH: Odometer fired (%.1f,%s) but no longer relevant to us", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      [objc_msgSend(*(id *)(a1 + 40), "description") UTF8String];
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::startBatching(CLTypeOdometer, CFAbsoluteTime)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_10122C944(uint64_t a1, uint64_t a2)
{
  sub_10122E79C(&v2, a2);
}

void sub_10122C98C(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102319290);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationSubscription::onBatchTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102319290);
    }
    id v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationSubscription::onBatchTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_10122DFD8(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_10122CB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122CB60(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v4 = "didPause";
  }
  else {
    uint64_t v4 = "willResume";
  }
  int v5 = *(_DWORD *)(a1 + 188);
  if (v5 == 2)
  {
    BOOL v8 = 1;
  }
  else
  {
    if (v5 == 1)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 24);
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2082;
        *(void *)&buf[20] = v4;
        __int16 v44 = 2114;
        uint64_t v45 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: AutoPause is overridden to off, reject message to client\", \"msg\":%{public, location:escape_only}s, \"Client\":%{public, location:escape_only}@}", buf, 0x26u);
      }
      return;
    }
    BOOL v8 = v5 == 3 && *(_DWORD *)(a1 + 184) == 2;
  }
  if (*(unsigned char *)(a1 + 192))
  {
    __int16 v10 = +[NSDate date];
    uint64_t v11 = [+[NSCalendar currentCalendar] components:252 fromDate:v10];
    if (sub_1004BA5BC())
    {
      uint64_t v32 = *(void *)(a1 + 24);
      id v31 = [(NSDateComponents *)v11 hour];
      id v19 = [(NSDateComponents *)v11 minute];
      id v20 = [(NSDateComponents *)v11 second];
      id v21 = [(NSDateComponents *)v11 month];
      id v22 = [(NSDateComponents *)v11 day];
      id v23 = [(NSDateComponents *)v11 year];
      [(NSDate *)v10 timeIntervalSinceReferenceDate];
      CFStringRef v25 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"locationd paused updates to '%@' at %ld:%ld:%ld %ld-%ld-%ld (%.2f). If you believe this was in error, file a radar with a screenshot and your locationd.log", v32, v31, v19, v20, v21, v22, v23, v24);
      sub_100DE3130(@"Autopause", 0, v25);
      CFRelease(v25);
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    __int16 v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 24);
      [(NSDate *)v10 timeIntervalSinceReferenceDate];
      int v14 = *(_DWORD *)(a1 + 184);
      int v15 = *(_DWORD *)(a1 + 188);
      *(_DWORD *)std::string buf = 138413058;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v16;
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = v14;
      __int16 v44 = 1024;
      LODWORD(v45) = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "locationd paused updates to '%@' at %.2f. client autopause setting: %d, override setting: %d", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1023192B0);
      }
      uint64_t v26 = *(void *)(a1 + 24);
      [(NSDate *)v10 timeIntervalSinceReferenceDate];
      int v27 = *(_DWORD *)(a1 + 184);
      int v28 = *(_DWORD *)(a1 + 188);
      int v35 = 138413058;
      uint64_t v36 = v26;
      __int16 v37 = 2048;
      uint64_t v38 = v29;
      __int16 v39 = 1024;
      int v40 = v27;
      __int16 v41 = 1024;
      int v42 = v28;
      __int16 v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::sendAutopauseStatusMessage(BOOL)", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  __int16 v17 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)(a1 + 24);
    *(_DWORD *)std::string buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v4;
    __int16 v44 = 2114;
    uint64_t v45 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: Sending message to client\", \"msg\":%{public, location:escape_only}s, \"Client\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  v33[0] = @"kCLConnectionMessageAutopauseStatusKey";
  v33[1] = @"kCLConnectionMessageAutopauseOverrideKey";
  v34[0] = +[NSNumber numberWithBool:a2];
  v34[1] = +[NSNumber numberWithBool:v8];
  *(void *)std::string buf = +[NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:2];
  sub_10122D060(a1);
}

void sub_10122D060(uint64_t a1)
{
  sub_1000E9420(off_1023194B8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10122D0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122D0E4(uint64_t a1)
{
  sub_1000E9420(off_1023194C0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10122D150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122D168(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    id v3 = [*(id *)(a1 + 32) UTF8String];
    int v4 = *(_DWORD *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)std::string buf = 136446722;
    id v9 = v3;
    __int16 v10 = 1026;
    int v11 = v4;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#visibility Completing async release of visibility assertion for %{public}s (PID:%{public}d, ptr:%p)", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    [*(id *)(a1 + 32) UTF8String];
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationSubscription::updateVisibilityAssertion()_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    [v6 invalidate:0];
  }
}

CLOSTransaction *sub_10122D380(const void *a1, const char *a2)
{
  snprintf(__str, 0x2FuLL, "CLLS:%p.%s", a1, a2);
  return [[CLOSTransaction alloc] initWithDescription:__str];
}

void sub_10122D3F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    *(_DWORD *)std::string buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v7 = 2082;
    BOOL v8 = "";
    __int16 v9 = 2114;
    uint64_t v10 = v3;
    __int16 v11 = 2050;
    uint64_t v12 = sub_1000E9360(v1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client not currently authorized for location; sending error\", \"Client\":%{public, locatio"
      "n:escape_only}@, \"DC\":\"%{public}p\"}",
      buf,
      0x26u);
  }
  CFStringRef v4 = @"kCLConnectionMessageErrorKey";
  uint64_t v5 = &off_102394388;
  *(void *)std::string buf = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  sub_10122D53C(v1);
}

void sub_10122D53C(uint64_t a1)
{
  sub_1000E9420(&off_1022ED868, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10122D5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122D5C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (sub_100138A70(v2, 4))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(v2 + 24);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      __int16 v7 = "";
      __int16 v8 = 2114;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning failed to release fNotYetAuthorizedTimer after client was re-authorized\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  [*(id *)(v2 + 576) invalidate];

  *(void *)(v2 + 576) = 0;
}

void sub_10122D6E8(uint64_t a1, int *a2, __int16 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102319290);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationSubscription::onPauseNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102319290);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationSubscription::onPauseNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10122DEA4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10122D8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122D8C4(uint64_t a1, uint64_t a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  uint64_t v7 = sub_10122D9D0;
  __int16 v8 = &unk_102319168;
  sub_1000EF97C((uint64_t)&v11, a1 + 56);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v9 = a2;
  uint64_t v10 = v4;
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5 && *(void *)(v5 + 8) != -1) {
    v7((uint64_t)v6);
  }

  if (v16) {
    sub_1000DB0A0(v16);
  }
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    sub_1000DB0A0(v12);
  }
}

void sub_10122D9B8(_Unwind_Exception *a1)
{
  sub_100458658(v1);
  _Unwind_Resume(a1);
}

void sub_10122D9D0(uint64_t a1)
{
  sub_1000EF97C((uint64_t)v13, a1 + 48);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  long long v16 = 0u;
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    [v3 clientLocation];
  }
  else
  {
    long long v11 = 0u;
    memset(v12, 0, 28);
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
  }
  void v13[6] = v10;
  void v13[7] = v11;
  v14[0] = v12[0];
  *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)v12 + 12);
  void v13[2] = v6;
  void v13[3] = v7;
  v13[4] = v8;
  v13[5] = v9;
  v13[0] = v4;
  v13[1] = v5;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v18 < 0) {
    operator delete(__p);
  }
  if (*((void *)&v16 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v16 + 1));
  }
  if (v15) {
    sub_1000DB0A0(v15);
  }
}

void sub_10122DAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_10122DAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return sub_1000EF97C(a1 + 56, a2 + 56);
}

void sub_10122DB38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122DB50(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1224);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (*(char *)(a1 + 983) < 0) {
    operator delete(*(void **)(a1 + 960));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 864);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 744);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_10122DBD4(uint64_t a1)
{
  sub_1000E9420(off_1023194C8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10122DC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122DC58(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10122DCE0;
  v3[3] = &unk_102319208;
  char v5 = a2;
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    if (*(void *)(v2 + 8) != -1) {
      sub_10122DCE0((uint64_t)v3);
    }
  }
}

void sub_10122DCE0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v1 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v1();
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(v2 + 16);
      uint64_t v4 = *(void *)(v2 + 24);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      long long v8 = "";
      __int16 v9 = 2114;
      uint64_t v10 = v4;
      __int16 v11 = 2114;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Got location, but not sending location to client because ProvisionalIntermediation said so.\", \"Client\":%{public, location:escape_only}@, \"AuthContext\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x26u);
    }
  }
}

void sub_10122DE20(uint64_t a1)
{
  sub_10048C758(&off_1023194D8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10122DE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122DEA4(uint64_t a1, uint64_t a2, int *a3, __int16 *a4)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023192B0);
  }
  __int16 v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    int v9 = *a3;
    v11[0] = 68289538;
    v11[1] = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v8;
    __int16 v16 = 1026;
    int v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PAUSE: received pause notification\", \"Client\":%{public, location:escape_only}@, \"notification\":%{public}d}", (uint8_t *)v11, 0x22u);
  }
  if (!*a3)
  {
    __int16 v10 = *a4;
    *(unsigned char *)(a1 + 239) = *((unsigned char *)a4 + 2);
    *(_WORD *)(a1 + 237) = v10;
    *(unsigned char *)(a1 + 240) = 1;
    sub_10012D358(a1);
  }
}

void sub_10122DFD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 288) == a2)
  {
    sub_10122BF58(a1);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023192B0);
    }
    uint64_t v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      __int16 v7 = "";
      __int16 v8 = 2114;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: Time criterion met, waiting for location event to notify client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
    }
  }
}

void sub_10122E0D4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10122E104(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_10122E134(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10122E164(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10122E194(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

__n128 sub_10122E1C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102319340;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10122E210(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102319340;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10122E240(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10122E280()
{
}

__n128 sub_10122E28C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1023193D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10122E2D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023193D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10122E308(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10122E348()
{
}

uint64_t sub_10122E354(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_10122E3D0(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_10122E3BC(_Unwind_Exception *a1)
{
  sub_100BEF2DC(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10122E3D0(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  __int16 v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_10122E654(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  id v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *id v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_10122E744((uint64_t)v25, 0);
  return i;
}

void sub_10122E63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10122E744((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_10122E654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_10122E6CC(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10122E6B4(_Unwind_Exception *a1)
{
  sub_10122E744(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10122E6CC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_100BEEF38((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10122E728(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10122E744(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BEF35C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_10122E79C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10122E810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006677A0((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10122E828(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_100998C38(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10122E870(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10122E8F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DAE888;
      v0[3] = unk_101DAE898;
      v0[4] = xmmword_101DAE8A8;
      v0[0] = xmmword_101DAE868;
      v0[1] = unk_101DAE878;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10122E9D8(_Unwind_Exception *a1)
{
}

uint64_t sub_10122E9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 64))();
  sub_10111B384(v6);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 40))();
  sub_1006AC0E8(v7);
  uint64_t v8 = a2 + 8;
  sub_100AD83E4(a2 + 8);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 56))();
  sub_100AD8E44(v9);
  double v10 = *(double *)(v6 + 136);
  if (v10 == -1.0 || v10 == *(double *)(a1 + 16)) {
    return 0;
  }
  int v13 = *(_DWORD *)(v6 + 200);
  int v14 = *(_DWORD *)(v6 + 220);
  *(double *)(a1 + 16) = v10;
  int v15 = *(_DWORD *)(a1 + 8);
  if (v15 < 0)
  {
    uint64_t v11 = 0;
    *(_DWORD *)(a1 + 8) = v13;
    *(double *)(a1 + 24) = v10;
    return v11;
  }
  *(_DWORD *)a3 = v13 - v15;
  *(double *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 32) = v14;
  *(_DWORD *)(a1 + 8) = v13;
  if ((sub_10111AFA8(v7, (uint64_t)v23, v10) & 1) == 0)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102319528);
    }
    BOOL v18 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v39 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "SwimStop is unable to get tier2 data!,the last swim time is %{public}f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102319528);
    }
    LODWORD(v35[0]) = 134349056;
    *(double *)((char *)v35 + 4) = v10;
LABEL_27:
    unint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSwimWorkoutStopModel::getCurrentEpoch(const CLWorkoutPredictorInputs &, Epoch &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
    return 0;
  }
  if ((sub_1001865E0(v8, v35, v10) & 1) == 0)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102319528);
    }
    unint64_t v19 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v39 = v10;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "SwimStop is unable to get activity data!,the last swim time is %{public}f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102319528);
    }
    int v26 = 134349056;
    *(double *)int v27 = v10;
    goto LABEL_27;
  }
  *(void *)&v27[4] = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0x80000000800000;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0x80000000800000;
  uint64_t v33 = 0x80000000800000;
  int v34 = -8388609;
  uint64_t v11 = sub_1000BE1F4(v9, (uint64_t)&v26, v10);
  if (v11)
  {
    *(void *)(a3 + 8) = v23[1];
    *(void *)(a3 + 24) = v23[0];
    int v16 = v37;
    float v17 = v36 * 57.296;
    *(float *)(a3 + 36) = *(float *)&v28 * 57.296;
    *(float *)(a3 + 40) = v17;
    *(_DWORD *)(a3 + 44) = v16;
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102319528);
    }
    size_t v21 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v39 = v10;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "SwimStop is unable to get turn data!,the last swim time is %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102319528);
      }
      int v24 = 134349056;
      double v25 = v10;
      id v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSwimWorkoutStopModel::getCurrentEpoch(const CLWorkoutPredictorInputs &, Epoch &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  return v11;
}

uint64_t sub_10122EF80@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(unsigned __int16 *)(result + 42);
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 4) = v3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v3)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    int v6 = 0;
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = (unsigned __int16 *)(result + 40);
    double v10 = -1.79769313e308;
    double v11 = -1.79769313e308;
    do
    {
      uint64_t v12 = *(void *)(sub_10122F0E0(v9, v5) + 8);
      if (v12 != 1) {
        LODWORD(v12) = *(void *)(sub_10122F0E0(v9, v5) + 8) == 2;
      }
      v6 += v12;
      *(_DWORD *)(a2 + 8) = v6;
      if (*(void *)(sub_10122F0E0(v9, v5) + 8) == 19)
      {
        *(_DWORD *)(a2 + 12) = ++v7;
        double v11 = *(double *)(sub_10122F0E0(v9, v5) + 24);
      }
      uint64_t result = sub_10122F0E0(v9, v5);
      if (*(int *)result >= 1)
      {
        uint64_t result = sub_10122F0E0(v9, v5);
        if (*(_DWORD *)(result + 32))
        {
          v8 += *(_DWORD *)sub_10122F0E0(v9, v5);
          *(_DWORD *)a2 = v8;
          uint64_t result = sub_10122F0E0(v9, v5);
          double v10 = *(double *)(result + 16);
        }
      }
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(v4 + 42));
    if (v8 <= 0) {
      double v13 = v11;
    }
    else {
      double v13 = v10;
    }
  }
  else
  {
    double v13 = -1.79769313e308;
  }
  *(double *)(a2 + 16) = v13;
  return result;
}

uint64_t sub_10122F0E0(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319548);
    }
    int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)std::string buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102319548);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLSwimWorkoutStopModel::Epoch>::operator[](const size_t) const [T = CLSwimWorkoutStopModel::Epoch]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[24 * (v4 - v5) + 4];
}

BOOL sub_10122F2E0(uint64_t a1, float *a2)
{
  std::string __p = 0;
  int v37 = 0;
  uint64_t v38 = 0;
  if (*(unsigned __int16 *)(a1 + 42) < 7u)
  {
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    unsigned int v4 = 0;
  }
  else
  {
    unsigned int v4 = 0;
    unint64_t v5 = 6;
    do
    {
      uint64_t v6 = sub_10122F0E0((unsigned __int16 *)(a1 + 40), v5);
      uint64_t v7 = v6;
      int v8 = v37;
      if (v37 >= (float *)v38)
      {
        double v10 = __p;
        uint64_t v11 = v37 - __p;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v13 = v38 - (char *)__p;
        if ((v38 - (char *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          int v15 = (char *)sub_10017EA34((uint64_t)&v38, v14);
          double v10 = __p;
          int v8 = v37;
        }
        else
        {
          int v15 = 0;
        }
        int v16 = (float *)&v15[4 * v11];
        *int v16 = *(float *)(v7 + 40);
        uint64_t v9 = v16 + 1;
        while (v8 != v10)
        {
          int v17 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v16-- - 1) = v17;
        }
        std::string __p = v16;
        uint64_t v38 = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        float *v37 = *(float *)(v6 + 40);
        uint64_t v9 = v37 + 1;
      }
      int v37 = v9;
      sub_10122F0E0((unsigned __int16 *)(a1 + 40), v5);
      int v18 = *(void *)(sub_10122F0E0((unsigned __int16 *)(a1 + 40), v5) + 8) == 19
         || *(void *)(sub_10122F0E0((unsigned __int16 *)(a1 + 40), v5) + 8) == 25;
      v4 += v18;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 42));
    unint64_t v19 = __p;
    unint64_t v20 = v9;
  }
  double v21 = (float)(unint64_t)(v20 - v19 - 1) * 0.25;
  unint64_t v22 = (unint64_t)v21;
  unint64_t v23 = &v19[(unint64_t)v21];
  if (v23 != v20)
  {
    sub_1004EF34C(v19, v23, v20, *(float *)&v21);
    unint64_t v19 = __p;
  }
  float v24 = v19[v22];
  double v25 = (float)(unint64_t)(v37 - v19 - 1) * 0.75;
  unint64_t v26 = (unint64_t)v25;
  int v27 = &v19[(unint64_t)v25];
  if (v27 != v37)
  {
    sub_1004EF34C(v19, v27, v37, *(float *)&v25);
    unint64_t v19 = __p;
  }
  v29 = (float)(v19[v26] - v24) >= 20.0 || (float v28 = a2[10], v28 < -30.0) || v28 > 45.0;
  BOOL v30 = 0;
  if (!v29)
  {
    float v31 = a2[11];
    if (a2[9] < 10.0 && v31 > 2.0 && v31 < 20.0 && v4 >= 7) {
      BOOL v30 = *(_DWORD *)(a1 + 12) < 36;
    }
  }
  operator delete(v19);
  return v30;
}

void sub_10122F58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10122F5B4(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 32) < 1) {
    goto LABEL_13;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 4);
  int v3 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = v3 + 1;
  if (*(int *)a2 >= 4
    && ((*(float *)&double result = (float)SLODWORD(result) * 0.25, *(_DWORD *)(a2 + 12) > (int)*(float *)&result)
      ? (BOOL v4 = v3 <= 1)
      : (BOOL v4 = 1),
        !v4)
    || (v3 <= 22 ? (BOOL v5 = *(_DWORD *)a2 < 16) : (BOOL v5 = 0), !v5))
  {
    *(void *)(a1 + 32) = 0;
LABEL_13:
    double result = *(double *)(a2 + 16);
    *(double *)(a1 + 24) = result;
  }
  return result;
}

BOOL sub_10122F618(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 24) == -1.0) {
    *(void *)(a1 + 24) = *(void *)(a2 + 296);
  }
  LODWORD(v32) = 0;
  *((void *)&v32 + 1) = 26;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v33 = _Q0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (!sub_10122E9F4(a1, a2, (uint64_t)&v32)) {
    return 0;
  }
  sub_10122FB00((unsigned __int16 *)(a1 + 40), &v32);
  if (*(_DWORD *)(a1 + 44) != *(unsigned __int16 *)(a1 + 42))
  {
    *(_DWORD *)std::string buf = 0;
    sub_1000C0D88((unsigned __int16 *)(a1 + 928), buf);
    BOOL result = 0;
    *(unsigned char *)(a1 + 912) = 1;
    return result;
  }
  *(_DWORD *)std::string buf = sub_10122F2E0(a1, (float *)&v32);
  sub_1000C0D88((unsigned __int16 *)(a1 + 928), buf);
  *(unsigned char *)(a1 + 912) = 1;
  if (*((float *)&v34 + 1) <= 75.0) {
    int v8 = *(_DWORD *)(a1 + 12) + 1;
  }
  else {
    int v8 = 0;
  }
  *(_DWORD *)(a1 + 12) = v8;
  sub_10122EF80(a1, (uint64_t)&v28);
  int v10 = v28;
  int v11 = v30;
  int v12 = v31;
  if (v30) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v28 < (int)(float)((float)((float)v29 * 0.2) * 2.56);
  }
  if (!v13 || v31 >= (int)(float)((float)v29 * 0.75))
  {
    sub_10122F5B4(a1, (uint64_t)&v28);
    goto LABEL_28;
  }
  uint64_t v15 = *(unsigned __int16 *)(a1 + 930);
  if (!*(_WORD *)(a1 + 930)) {
    goto LABEL_24;
  }
  unint64_t v16 = 0;
  int v17 = 0;
  do
    v17 += *(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(a1 + 928), v16++);
  while (v15 != v16);
  if (v17 >= 9)
  {
    *(void *)(a1 + 32) = 0;
    goto LABEL_28;
  }
  if (!*(_WORD *)(a1 + 930)
    || !*(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(a1 + 928), *(unsigned __int16 *)(a1 + 930) - 1))
  {
LABEL_24:
    int v18 = *(_DWORD *)(a1 + 32);
    if (v18) {
      int v19 = v18 + 1;
    }
    else {
      int v19 = *(unsigned __int16 *)(a1 + 42);
    }
    *(_DWORD *)(a1 + 32) = v19;
  }
LABEL_28:
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102319528);
  }
  unint64_t v20 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    int v21 = *(_DWORD *)(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 24);
    int v23 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)std::string buf = 134221312;
    uint64_t v65 = v33;
    __int16 v66 = 2048;
    uint64_t v67 = *((void *)&v33 + 1);
    __int16 v68 = 1024;
    int v69 = v32;
    __int16 v70 = 2048;
    uint64_t v71 = *((void *)&v32 + 1);
    __int16 v72 = 1024;
    int v73 = v10;
    __int16 v74 = 1024;
    int v75 = v11;
    __int16 v76 = 1024;
    int v77 = v12;
    __int16 v78 = 1024;
    int v79 = v21;
    __int16 v80 = 1024;
    int v81 = v34;
    __int16 v82 = 2048;
    uint64_t v83 = v22;
    __int16 v84 = 2048;
    double v85 = *(float *)&v35;
    __int16 v86 = 2048;
    double v87 = *((float *)&v35 + 1);
    __int16 v88 = 2048;
    double v89 = *((float *)&v34 + 1);
    __int16 v90 = 1024;
    int v91 = v23;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "SwimStop,startTime,%f,tier2Time,%f,epochCount,%d,epochTier2,%ld,bufferCnt,%d,bufferedPed,%d,bufferedSwim,%d,count,%d,style,%d,lastTime,%f,angle,%f,vectorMag,%f,yaw,%f,sinceTurn,%d", buf, 0x72u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102319528);
    }
    int v24 = *(_DWORD *)(a1 + 32);
    uint64_t v25 = *(void *)(a1 + 24);
    int v26 = *(_DWORD *)(a1 + 12);
    int v36 = 134221312;
    uint64_t v37 = v33;
    __int16 v38 = 2048;
    uint64_t v39 = *((void *)&v33 + 1);
    __int16 v40 = 1024;
    int v41 = v32;
    __int16 v42 = 2048;
    uint64_t v43 = *((void *)&v32 + 1);
    __int16 v44 = 1024;
    int v45 = v10;
    __int16 v46 = 1024;
    int v47 = v11;
    __int16 v48 = 1024;
    int v49 = v12;
    __int16 v50 = 1024;
    int v51 = v24;
    __int16 v52 = 1024;
    int v53 = v34;
    __int16 v54 = 2048;
    uint64_t v55 = v25;
    __int16 v56 = 2048;
    double v57 = *(float *)&v35;
    __int16 v58 = 2048;
    double v59 = *((float *)&v35 + 1);
    __int16 v60 = 2048;
    double v61 = *((float *)&v34 + 1);
    __int16 v62 = 1024;
    int v63 = v26;
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLSwimWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  return *(int *)(a1 + 32) >= 118 && (!v28 || v30 >= 1);
}

unsigned __int16 *sub_10122FB00(unsigned __int16 *result, long long *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  BOOL v4 = &result[24 * (v3 - v2)];
  long long v6 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 20) = a2[2];
  *(_OWORD *)(v4 + 4) = v6;
  *(_OWORD *)(v4 + 12) = v5;
  unsigned int v7 = result[1];
  unint64_t v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    unint64_t v9 = *result + 1;
    if (v9 < v8) {
      LOWORD(v8) = 0;
    }
    *BOOL result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

void *sub_10122FB70(void *result)
{
  *BOOL result = off_1023194F0;
  return result;
}

void sub_10122FB90(void *a1)
{
  *a1 = off_1023194F0;
  operator delete();
}

void sub_10122FBC0(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10122FBF0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10122FCD0(id a1)
{
  qword_1024867C8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCellTilesManagerSilo"];
}

uint64_t sub_10122FD90(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1012321C0;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_1024867D8 != -1) {
    dispatch_once(&qword_1024867D8, block);
  }
  return qword_10248B3A8;
}

void sub_1012300E0(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = sub_101230DAC(a1, "CLCellTilesManager", a2);
  *(void *)uint64_t v7 = off_102319598;
  *(void *)(v7 + 112) = &off_102319680;
  *(void *)(v7 + 120) = 0;
  *(_WORD *)(v7 + 128) = 1;
  *(_OWORD *)(v7 + 136) = xmmword_101D9DED0;
  unint64_t v8 = (uint64_t *)(v7 + 136);
  *(void *)(v7 + 152) = 0x40C5180000000000;
  unint64_t v9 = (uint64_t *)(v7 + 152);
  *(void *)(v7 + 168) = 0;
  *(_DWORD *)(v7 + 176) = 0xFFFF;
  *(void *)(v7 + 188) = 0;
  *(void *)(v7 + 180) = 0;
  *(_OWORD *)(v7 + 196) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v7 + 212) = _Q0;
  *(_OWORD *)(v7 + 228) = _Q0;
  *(_OWORD *)(v7 + 244) = _Q0;
  *(_DWORD *)(v7 + 260) = 0;
  *(void *)(v7 + 272) = 0;
  *(void *)(v7 + 280) = 0;
  *(void *)(v7 + 264) = 0xBFF0000000000000;
  *(_DWORD *)(v7 + 288) = 0;
  *(void *)(v7 + 292) = 0xBFF0000000000000;
  *(_DWORD *)(v7 + 300) = 0x7FFFFFFF;
  *(void *)(v7 + 312) = 0;
  *(void *)(v7 + 320) = 0;
  *(void *)(v7 + 304) = 0;
  *(unsigned char *)(v7 + 328) = 0;
  *(void *)(v7 + 350) = 0;
  *(void *)(v7 + 336) = 0;
  *(void *)(v7 + 344) = 0;
  *(_DWORD *)(v7 + 364) = 100;
  uint64_t v15 = *a3;
  *a3 = 0;
  *(void *)(a1 + 368) = v15;
  *(void *)(a1 + 376) = 0;
  sub_1011377A0((void *)(v7 + 384));
  sub_100FFB380((void *)(a1 + 392), *(void *)(a1 + 40));
  sub_1013182A0(a1 + 416);
  *(unsigned char *)(a1 + 440) = 0;
  sub_1000C7F88(&buf);
  sub_1000A699C(buf, "MaxTileAge", v8);
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  unint64_t v16 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *v8;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: fMaxTileSecurityAge, %.1lf", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v25);
    if (v25 != (char *)&buf) {
      free(v25);
    }
  }
  sub_1000C7F88(&buf);
  sub_1000A699C(buf, "AncientTilesThreshold", (void *)(a1 + 144));
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  int v18 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void *)(a1 + 144);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: fMaxTileDataAge, %.1lf", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v26);
    if (v26 != (char *)&buf) {
      free(v26);
    }
  }
  sub_1000C7F88(&buf);
  sub_1000A699C(buf, "EncryptionGracePeriod", v9);
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  unint64_t v20 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = *v9;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: fEncryptionGracePeriod, %.1lf", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v27);
    if (v27 != (char *)&buf) {
      free(v27);
    }
  }
  *(unsigned char *)(a1 + 160) = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 32))(*(void *)(a1 + 368));
  sub_1000C7F88(&buf);
  sub_1000D2988(buf, "CellTilesActive", (BOOL *)(a1 + 160));
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  uint64_t v22 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v23 = *(unsigned __int8 *)(a1 + 160);
    LODWORD(buf) = 67240192;
    DWORD1(buf) = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TileCell, isActive, %{public}d", (uint8_t *)&buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v28);
    if (v28 != (char *)&buf) {
      free(v28);
    }
  }
  if (*(unsigned char *)(a4 + 24))
  {
    sub_1013182A4((long long *)(a1 + 416), (long long *)a4);
    sub_1000C7F88(&buf);
    sub_1000A699C(buf, "MTimeModificationPeriod", &qword_102477288);
    if (*((void *)&buf + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v24 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = qword_102477288;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TILE: MTimeModificationPeriod, %.1lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLCellTilesManager::CLCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v29);
      if (v29 != (char *)&buf) {
        free(v29);
      }
    }
    operator new();
  }
  sub_101230E58((uint64_t)&buf);
}

void sub_101230C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_100D1A044((void ***)&a13);
  nullsub_1413(a12);
  uint64_t v23 = *v21;
  *uint64_t v21 = 0;
  if (v23) {
    sub_100D1A0FC((uint64_t)v21, v23);
  }
  uint64_t v24 = *(void *)(v20 + 368);
  *(void *)(v20 + 368) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(void *)(v20 + 120);
  *(void *)(v20 + 120) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  sub_101231EEC(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_101230DAC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102319830;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_101230E3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101230E58(uint64_t a1@<X8>)
{
  sub_101232230();
  if (byte_102486808[23] < 0) {
    sub_1000DC48C(&__dst, *(void **)byte_102486808, *(unint64_t *)&byte_102486808[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_102486808;
  }
  sub_1000C7F88(buf);
  BOOL v2 = sub_1004D1284(*(uint64_t *)buf, "CellTilesServerUrl", &__dst);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  unint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    p_dst = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136380931;
    *(void *)&uint8_t buf[4] = p_dst;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TILE: defaultCellTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v18 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v30 = 136380931;
    *(void *)&v30[4] = v18;
    __int16 v31 = 1026;
    BOOL v32 = v2;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLCellTilesManager::initializeProductionTilesSetCollection()", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  long long v6 = v30;
  sub_1001110E4((uint64_t)v30, size + 5);
  if (v33 < 0) {
    long long v6 = *(unsigned char **)v30;
  }
  if (size)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &__dst;
    }
    else {
      uint64_t v7 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v6, v7, size);
  }
  strcpy(&v6[size], "/3/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = __dst.__r_.__value_.__l.__size_;
  }
  unint64_t v9 = v24;
  sub_1001110E4((uint64_t)v24, v8 + 5);
  if (v25 < 0) {
    unint64_t v9 = (void **)v24[0];
  }
  if (v8)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &__dst;
    }
    else {
      int v10 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/4/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __dst.__r_.__value_.__l.__size_;
  }
  int v12 = v22;
  sub_1001110E4((uint64_t)v22, v11 + 5);
  if (v23 < 0) {
    int v12 = (void **)v22[0];
  }
  if (v11)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v13 = &__dst;
    }
    else {
      BOOL v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "/5/v1");
  sub_1013182A0(a1);
  sub_1012322D0();
  if (byte_1024867F7 >= 0) {
    unint64_t v14 = (const char *)&qword_1024867E0;
  }
  else {
    unint64_t v14 = (const char *)qword_1024867E0;
  }
  int v15 = mkdir(v14, 0x1C0u);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  unint64_t v16 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1012322D0();
    if (byte_1024867F7 >= 0) {
      uint64_t v17 = &qword_1024867E0;
    }
    else {
      uint64_t v17 = (uint64_t *)qword_1024867E0;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v17;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: mkdir, %s, ret, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    sub_1012322D0();
    if (byte_1024867F7 >= 0) {
      uint64_t v20 = &qword_1024867E0;
    }
    else {
      uint64_t v20 = (uint64_t *)qword_1024867E0;
    }
    __p[0] = 136315394;
    *(void *)&__p[1] = v20;
    __int16 v28 = 1024;
    int v29 = v15;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLCellTilesManager::initializeProductionTilesSetCollection()", "%s\n", v21);
    if (v21 != buf) {
      free(v21);
    }
  }
  operator new();
}

void sub_101231AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

void sub_101231C9C(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023197A0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    BOOL v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023197A0);
    }
    long long v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      std::string::size_type v11 = "";
      __int16 v12 = 2082;
      BOOL v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_1012348B8(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101231E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_101231E70(uint64_t a1, char a2, uint64_t a3)
{
  unint64_t v3 = *(void **)(a3 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10123741C;
  _OWORD v5[3] = &unk_1022C7AC0;
  char v6 = a2;
  void v5[4] = a3;
  void v5[5] = a1;
  void v5[6] = a3;
  return [v3 async:v5];
}

uint64_t sub_101231EEC(uint64_t a1)
{
  *(void *)a1 = off_102319830;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101231F70()
{
}

void sub_101232014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a12)
  {
    *(void *)(v13 - 24) = &a9;
    sub_100D1A044((void ***)(v13 - 24));
  }
  sub_101AA8F00(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_101232040(uint64_t a1)
{
  *(void *)a1 = off_102319598;
  *(void *)(a1 + 112) = &off_102319680;
  sub_101232370((void *)a1);
  char v6 = (void **)(a1 + 416);
  sub_100D1A044(&v6);
  nullsub_1413(a1 + 384);
  uint64_t v2 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v2) {
    sub_100D1A0FC(a1 + 376, v2);
  }
  uint64_t v3 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return sub_101231EEC(a1);
}

uint64_t sub_101232144(uint64_t a1)
{
  return sub_101232040(a1 - 112);
}

void sub_10123214C(uint64_t a1)
{
  sub_101232040(a1);

  operator delete();
}

void sub_101232184(uint64_t a1)
{
  sub_101232040(a1 - 112);

  operator delete();
}

void sub_1012321C0()
{
}

void sub_10123220C()
{
}

long long *sub_101232230()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102486820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102486820))
  {
    xmmword_102486808 = 0uLL;
    unk_102486818 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102486808, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102486820);
  }
  if (qword_102486828 != -1) {
    dispatch_once(&qword_102486828, &stru_1023196D8);
  }
  return &xmmword_102486808;
}

uint64_t *sub_1012322D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024867F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024867F8))
  {
    qword_1024867E0 = 0;
    qword_1024867E8 = 0;
    unk_1024867F0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024867E0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024867F8);
  }
  if (qword_102486800 != -1) {
    dispatch_once(&qword_102486800, &stru_1023196B8);
  }
  return &qword_1024867E0;
}

uint64_t sub_101232370(void *a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: CLCellTilesManager::shutdown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCellTilesManager::shutdown()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (a1[21])
  {
    sub_101232570(a1);
    uint64_t v3 = a1[21];
    if (v3)
    {
      sub_100998C38(v3);
      operator delete();
    }
    a1[21] = 0;
  }
  sub_10112ED30(a1[47]);
  uint64_t result = a1[15];
  a1[15] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *sub_101232570(void *result)
{
  if (result[21])
  {
    uint64_t v1 = result;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v2 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileTimer, cancel", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::cancelExpiredLocationTimer()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return sub_1001B0AE4(v1[21]);
  }
  return result;
}

void sub_101232714(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  if (*a3)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    long long v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a3;
      *(_DWORD *)long long buf = 67240192;
      int v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, dataprotection, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v7 = *a3;
      int v25 = 67240192;
      int v26 = v7;
LABEL_40:
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  else
  {
    double v10 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
    int v11 = *(unsigned __int8 *)(a1 + 128);
    char v12 = *a4 != 1;
    *(unsigned char *)(a1 + 128) = v12;
    sub_10112FC54(*(void *)(a1 + 376), v12);
    if (*(unsigned char *)(a1 + 128))
    {
      int v13 = 1;
    }
    else
    {
      sub_101232D90(a1, v10);
      int v13 = *(unsigned __int8 *)(a1 + 128);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    __int16 v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)long long buf = 67109376;
      int v30 = v15;
      __int16 v31 = 1024;
      BOOL v32 = v11 != v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TileCell, kNotificationEncryptedDataAvailability, %d, changed, %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v19 = *(unsigned __int8 *)(a1 + 128);
      int v25 = 67109376;
      int v26 = v19;
      __int16 v27 = 1024;
      BOOL v28 = v11 != v13;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    if (v11 != v13)
    {
      if (*(unsigned char *)(a1 + 128))
      {
        sub_101233234(a1, (uint64_t)"onDataProtectionNotification", a1 + 176, 1);
      }
      else
      {
        sub_10112F12C(*(void *)(a1 + 376), v10);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        unint64_t v16 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, skip on unlock", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1023197E0);
          }
          LOWORD(v25) = 0;
          char v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        sub_101232570((void *)a1);
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_101233628;
        void v24[3] = &unk_1022C1698;
        void v24[4] = a1;
        sub_1000511A0(a1, (uint64_t)"onDataProtectionNotification.cleanUnknownCache", (uint64_t)v24);
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v17 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      int v18 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)long long buf = 67240192;
      int v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "@TileEvent, all, locked, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v21 = *(unsigned __int8 *)(a1 + 128);
      int v25 = 67240192;
      int v26 = v21;
      goto LABEL_40;
    }
  }
}

void sub_101232D90(uint64_t a1, double a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)long long buf = 67240192;
    int v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileCell, listAvailableFilesAllTypes, indexed, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v8 = *(unsigned __int8 *)(a1 + 129);
    int v13 = 67240192;
    int v14 = v8;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (!*(unsigned char *)(a1 + 129))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _OWORD v12[2] = sub_101234EB4;
    uint64_t v12[3] = &unk_1022C9848;
    void v12[4] = a1;
    *(double *)&v12[5] = a2;
    sub_1000511A0(a1, (uint64_t)"indexTiles", (uint64_t)v12);
    *(unsigned char *)(a1 + 129) = 1;
    if (*(unsigned char *)(a1 + 440))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v6 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCell, clear on index", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        LOWORD(v13) = 0;
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_101233F98(a1);
      *(unsigned char *)(a1 + 440) = 0;
    }
    else
    {
      sub_101234D88(a1, a2);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileCell, listAvailableFilesAllTypes, done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      LOWORD(v13) = 0;
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_101233234(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v15 = 0;
  int v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  if (*(unsigned char *)(a1 + 128))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_10123CF50;
    void v13[3] = &unk_10230CD98;
    void v13[6] = a3;
    void v13[7] = a2;
    char v14 = a4;
    v13[4] = &v15;
    v13[5] = a1;
    sub_1000511A0(a1, (uint64_t)"updateProtectionClass", (uint64_t)v13);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *((_DWORD *)v16 + 6);
      *(_DWORD *)long long buf = 67109376;
      int v24 = a4;
      __int16 v25 = 1024;
      int v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      int v10 = *((_DWORD *)v16 + 6);
      int v19 = 67109376;
      int v20 = a4;
      __int16 v21 = 1024;
      int v22 = v10;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    if (*(unsigned char *)(a1 + 128) && *((_DWORD *)v16 + 6)) {
      sub_10123EA3C(a1, a2);
    }
    else {
      sub_101232570((void *)a1);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning TILE: updateProtectionClass, called on when not locked", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      LOWORD(v19) = 0;
      char v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  _Block_object_dispose(&v15, 8);
}

void sub_101233604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_101233628(void *result, uint64_t a2)
{
  if (*(unsigned char *)(result[4] + 160))
  {
    uint64_t result = *(void **)(a2 + 304);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*result + 32))();
    }
  }
  return result;
}

void sub_101233664(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (*a3 == 6)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      int v8 = *a4;
      int v7 = a4[1];
      *(_DWORD *)long long buf = 67240448;
      int v16 = v7;
      __int16 v17 = 1026;
      int v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCell, kNotificationReachability, %{public}d, was, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    int v9 = a4[1];
    *(_DWORD *)(a1 + 352) = v9;
    sub_10112FA4C(*(void *)(a1 + 376), v9);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *a3;
      *(_DWORD *)long long buf = 67240192;
      int v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, status, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      char v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_1012339A0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  if (*a3 == 6)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TileCell, #CacheDelete kNotificationSoftwareUpdateStorageRecovery", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
LABEL_27:
    sub_101233F98(a1);
    if (!*(unsigned char *)(a1 + 129)) {
      *(unsigned char *)(a1 + 440) = 1;
    }
    return;
  }
  if (v5 != 4)
  {
    if (v5)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v12 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *a3;
        *(_DWORD *)long long buf = 67240192;
        int v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, status, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v6 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCell, kNotificationReset", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        char v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      sub_101233F98(a1);
      if (!*(unsigned char *)(a1 + 129)) {
        *(unsigned char *)(a1 + 440) = 1;
      }
      (*(void (**)(void))(**(void **)(a1 + 368) + 48))(*(void *)(a1 + 368));
    }
    return;
  }
  *(unsigned char *)(a1 + 357) = *(_DWORD *)(a4 + 188) == 1;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  int v9 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    int v10 = *(unsigned __int8 *)(a1 + 357);
    *(_DWORD *)long long buf = 67240192;
    int v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "TileCell, kNotificationLocationServicesStatus, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (!*(unsigned char *)(a1 + 357)) {
    goto LABEL_27;
  }
}

id *sub_101233F98(uint64_t a1)
{
  sub_1000E1294((uint64_t *)v12, (uint64_t)"clearLocationInformationCell", 0);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446210;
    int v16 = "clearLocationInformationCell";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileCell, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v13 = 136446210;
    char v14 = "clearLocationInformationCell";
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::clearLocationInformation()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  sub_10112ED30(*(void *)(a1 + 376));
  *(_DWORD *)(a1 + 176) = 0xFFFF;
  *(void *)(a1 + 188) = 0;
  *(void *)(a1 + 180) = 0;
  *(_OWORD *)(a1 + 196) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 212) = _Q0;
  *(_OWORD *)(a1 + 228) = _Q0;
  *(_OWORD *)(a1 + 244) = _Q0;
  *(_DWORD *)(a1 + 260) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 292) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 300) = 0x7FFFFFFF;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  sub_100FFB390(a1 + 392);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_10123BBF0;
  v11[3] = &unk_1022C1698;
  v11[4] = a1;
  sub_1000511A0(a1, (uint64_t)"label", (uint64_t)v11);
  return sub_1000E1098(v12);
}

void sub_10123425C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_10123427C(uint64_t a1, uint64_t a2, int *a3, char *a4)
{
  if (*a3 == 5)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *a3;
      *(_DWORD *)long long buf = 67240192;
      int v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, companion, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 368) + 24))(*(void *)(a1 + 368)))
    {
      double v9 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
      *(unsigned char *)(a1 + 356) = *a4;
      sub_10112FC00(*(void *)(a1 + 376), *a4);
      if (*(unsigned char *)(a1 + 356)) {
        sub_101234620(a1, v9);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *a3;
      *(_DWORD *)long long buf = 67240192;
      int v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, companion, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

BOOL sub_101234620(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 357) && sub_10112C4FC(*(void *)(a1 + 376)))
  {
    LODWORD(v16) = 13;
    sub_10014F674((uint64_t)buf, &v16);
    uint64_t v4 = *(void *)(a1 + 376);
    uint64_t v5 = *(void *)(a1 + 120);
    long long v6 = *(_OWORD *)(a1 + 288);
    v14[6] = *(_OWORD *)(a1 + 272);
    v14[7] = v6;
    v15[0] = *(_OWORD *)(a1 + 304);
    *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)(a1 + 316);
    long long v7 = *(_OWORD *)(a1 + 224);
    int v14[2] = *(_OWORD *)(a1 + 208);
    void v14[3] = v7;
    long long v8 = *(_OWORD *)(a1 + 256);
    v14[4] = *(_OWORD *)(a1 + 240);
    void v14[5] = v8;
    long long v9 = *(_OWORD *)(a1 + 192);
    v14[0] = *(_OWORD *)(a1 + 176);
    v14[1] = v9;
    sub_10112C85C(v4, v5, (uint64_t)v14, (uint64_t)&v16, a2);
    *(_OWORD *)long long buf = v16;
    uint64_t v21 = v17;
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v18;
    uint64_t v23 = v19;
    BOOL v10 = sub_1001447B8((unsigned int *)buf);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "@TileDl, cell, failed criteria", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      LOWORD(v16) = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return 0;
  }
  return v10;
}

void sub_101234890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012348B8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    BOOL v5 = *(void *)(a1 + 168) == a2;
    int v6 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)long long buf = 67240448;
    BOOL v9 = v5;
    __int16 v10 = 1026;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TileCell, Timer, %{public}d, locked, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onTimerFired(CLPersistentTimer *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*(void *)(a1 + 168) == a2)
  {
    if (*(unsigned char *)(a1 + 128)) {
      sub_101233234(a1, (uint64_t)"onExpiredLocationTimerFired", a1 + 176, 0);
    }
  }
}

id sub_101234ACC(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "TileCell, Cleanup", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    __int16 v8 = 0;
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::onCleanupAgedTiles()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  double v3 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
  uint64_t v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101234CE0;
  v7[3] = &unk_1022B8660;
  void v7[4] = a1;
  *(double *)&v7[5] = v3;
  return [v4 async:v7];
}

id *sub_101234CE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_101234D88(v1, *(double *)(a1 + 40));
  sub_1000511A0(v1, (uint64_t)"onCleanupAgedTiles", (uint64_t)&stru_102319698);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_101238BB0;
  v3[3] = &unk_1022C1698;
  void v3[4] = v1;
  return sub_1000511A0(v1, (uint64_t)"refreshTilesDataIfNeeded", (uint64_t)v3);
}

uint64_t *sub_101234D88(uint64_t a1, double a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10123BDCC;
  _OWORD v5[3] = &unk_1022C9848;
  void v5[4] = a1;
  *(double *)&void v5[5] = a2;
  sub_1000511A0(a1, (uint64_t)"deleteAgedTiles", (uint64_t)v5);
  return sub_10112E174(*(void *)(a1 + 376), a2);
}

void sub_101234E24(id a1, void *a2)
{
  uint64_t v3 = *((void *)a2 + 37);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)a2 + 38);
  if (v4)
  {
    BOOL v5 = *(void (**)(void))(*(void *)v4 + 40);
    v5();
  }
}

BOOL sub_101234EB4(uint64_t a1, uint64_t a2)
{
  return sub_101234EC4(*(void *)(a1 + 32), a2, *(double *)(a1 + 40));
}

BOOL sub_101234EC4(uint64_t a1, uint64_t a2, double a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  BOOL v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v6 = *(void *)(a2 + 32);
    if (*(char *)(a2 + 55) >= 0) {
      std::string::size_type v6 = a2 + 32;
    }
    std::string::size_type v7 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      std::string::size_type v7 = *(void *)(a2 + 8);
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TileCell, indexTiles, rootDirectory, %{public}s, name, %{public}s", (uint8_t *)&buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v66 = *(void *)(a2 + 32);
    if (*(char *)(a2 + 55) >= 0) {
      uint64_t v66 = a2 + 32;
    }
    __darwin_ino64_t v67 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      __darwin_ino64_t v67 = *(void *)(a2 + 8);
    }
    v86.st_dev = 136446466;
    *(void *)&v86.st_mode = v66;
    WORD2(v86.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&v86.st_ino + 6) = v67;
    __int16 v68 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v68);
    if (v68 != &buf) {
      free(v68);
    }
  }
  if (*(char *)(a2 + 55) >= 0) {
    __int16 v8 = (const char *)(a2 + 32);
  }
  else {
    __int16 v8 = *(const char **)(a2 + 32);
  }
  BOOL v9 = opendir(v8);
  sub_101235ECC(a1, 0, *(_DWORD *)(a2 + 4));
  if (!v9)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    __int16 v64 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "TileCell, indexTiles, can't open dir, %{public}s, #CloneMe", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return v9 != 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    v86.st_dev = 136446210;
    *(void *)&v86.st_mode = v8;
    int v63 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v63);
    if (v63 == &buf) {
      return v9 != 0;
    }
LABEL_149:
    free(v63);
    return v9 != 0;
  }
  __int16 v10 = readdir(v9);
  if (v10)
  {
    int v11 = 0;
    uint64_t v69 = a2 + 184;
    while (1)
    {
      sub_1002E9328(__dst, v10->d_name, v10->d_namlen);
      if (*(char *)(a2 + 55) >= 0) {
        size_t v12 = *(unsigned __int8 *)(a2 + 55);
      }
      else {
        size_t v12 = *(void *)(a2 + 40);
      }
      sub_1001110E4((uint64_t)&buf, v12 + 1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if (v12)
      {
        if (*(char *)(a2 + 55) >= 0) {
          char v14 = (const void *)(a2 + 32);
        }
        else {
          char v14 = *(const void **)(a2 + 32);
        }
        memmove(p_buf, v14, v12);
      }
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v12) = 47;
      if ((v74 & 0x80u) == 0) {
        int v15 = __dst;
      }
      else {
        int v15 = (void **)__dst[0];
      }
      if ((v74 & 0x80u) == 0) {
        std::string::size_type v16 = v74;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)__dst[1];
      }
      uint64_t v17 = std::string::append(&buf, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      int64_t v72 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v19 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        int v20 = __p;
        if (v72 < 0) {
          int v20 = (void **)__p[0];
        }
        int d_type = v10->d_type;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = d_type;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "TileCell, indexTiles, absoluteFilename, '%{public}s', d_type, %{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        int v41 = __p;
        if (v72 < 0) {
          int v41 = (void **)__p[0];
        }
        int v42 = v10->d_type;
        v86.st_dev = 136446466;
        *(void *)&v86.st_mode = v41;
        WORD2(v86.st_ino) = 1026;
        *(_DWORD *)((char *)&v86.st_ino + 6) = v42;
        uint64_t v43 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v43);
        if (v43 != &buf) {
          free(v43);
        }
      }
      if (v10->d_type != 8) {
        goto LABEL_77;
      }
      if (!sub_10125C7E4((uint64_t)__dst, (const void **)(a2 + 32))) {
        break;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      ++v11;
      int v22 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = __p;
        if (v72 < 0) {
          uint64_t v23 = (void **)__p[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "TileCell, convert to class B, first unlock, %{public}s, files, %{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        __int16 v44 = __p;
        if (v72 < 0) {
          __int16 v44 = (void **)__p[0];
        }
        v86.st_dev = 136446466;
        *(void *)&v86.st_mode = v44;
        WORD2(v86.st_ino) = 1026;
        *(_DWORD *)((char *)&v86.st_ino + 6) = v11;
        int v45 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v45);
        if (v45 != &buf) {
          free(v45);
        }
      }
      if (v72 >= 0) {
        int v24 = __p;
      }
      else {
        int v24 = (void **)__p[0];
      }
      sub_10104CF04((const char *)v24);
      if (v72 >= 0) {
        __int16 v25 = __p;
      }
      else {
        __int16 v25 = (void **)__p[0];
      }
      int v26 = stat((const char *)v25, &v86);
      if (!v26)
      {
        if (sub_1012365D0(a1, *(_DWORD *)(a2 + 4), (char *)(a2 + 32), (std::string::value_type *)__dst, a3))
        {
          uint64_t v34 = v33;
          *(_OWORD *)uint64_t v83 = *(_OWORD *)(v33 + 48);
          *(void *)&v83[16] = *(void *)(v33 + 64);
          if (*(char *)(v33 + 95) < 0)
          {
            sub_1000DC48C(&v84, *(void **)(v33 + 72), *(void *)(v33 + 80));
          }
          else
          {
            long long v84 = *(_OWORD *)(v33 + 72);
            uint64_t v85 = *(void *)(v33 + 88);
          }
          sub_101236C20(a1, v34, a2, (uint64_t)"index", a3);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023197C0);
          }
          uint64_t v35 = (unsigned int *)(v34 + 48);
          int v36 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v37 = sub_100147F50(*v35);
            double v38 = sub_10013DAC0((uint64_t)v83);
            double v39 = sub_10013DA9C((uint64_t)v83);
            uint64_t v40 = sub_10014D19C(v69);
            LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
            *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v38;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
            double v88 = v39;
            __int16 v89 = 2050;
            uint64_t v90 = v40;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, index, size, %{public}lu", (uint8_t *)&buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023197C0);
            }
            int v47 = sub_100147F50(*v35);
            double v48 = sub_10013DAC0((uint64_t)v83);
            double v49 = sub_10013DA9C((uint64_t)v83);
            uint64_t v50 = sub_10014D19C(v69);
            int v75 = 136446979;
            __int16 v76 = v47;
            __int16 v77 = 2049;
            double v78 = v48;
            __int16 v79 = 2049;
            double v80 = v49;
            __int16 v81 = 2050;
            uint64_t v82 = v50;
            int v51 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v51);
            if (v51 != &buf) {
              free(v51);
            }
          }
          if (SHIBYTE(v85) < 0) {
            operator delete((void *)v84);
          }
        }
        goto LABEL_77;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      __int16 v27 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        BOOL v28 = __dst;
        if ((v74 & 0x80u) != 0) {
          BOOL v28 = (void **)__dst[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "TileCell, indexTiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", (uint8_t *)&buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        int v29 = __dst;
        if ((v74 & 0x80u) != 0) {
          int v29 = (void **)__dst[0];
        }
        *(_DWORD *)uint64_t v83 = 136446466;
        *(void *)&v83[4] = v29;
        *(_WORD *)&v83[12] = 1026;
        *(_DWORD *)&v83[14] = v26;
        int v30 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v30);
LABEL_111:
        if (v30 != &buf) {
          free(v30);
        }
      }
LABEL_77:
      if (SHIBYTE(v72) < 0) {
        operator delete(__p[0]);
      }
      if ((char)v74 < 0) {
        operator delete(__dst[0]);
      }
      __int16 v10 = readdir(v9);
      if (!v10) {
        goto LABEL_117;
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    __int16 v31 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v32 = __dst;
      if ((v74 & 0x80u) != 0) {
        BOOL v32 = (void **)__dst[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "TileCell, indexTiles, invalid filename  %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_77;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    __int16 v46 = __dst;
    if ((v74 & 0x80u) != 0) {
      __int16 v46 = (void **)__dst[0];
    }
    v86.st_dev = 136446210;
    *(void *)&v86.st_mode = v46;
    int v30 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v30);
    goto LABEL_111;
  }
LABEL_117:
  closedir(v9);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  __int16 v52 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 31) >= 0) {
      std::string::size_type v53 = a2 + 8;
    }
    else {
      std::string::size_type v53 = *(void *)(a2 + 8);
    }
    uint64_t v54 = sub_10014D19C(a2 + 184);
    uint64_t v55 = sub_1008B42D8(a2 + 184);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
    double v88 = *(double *)&v55;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "TileCell, indexTiles, done, %{public}s, size, %{public}lu, unprotected, %{public}lu", (uint8_t *)&buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v58 = *(void *)(a2 + 8);
    uint64_t v57 = a2 + 8;
    uint64_t v56 = v58;
    uint64_t v59 = *(char *)(v57 + 23) >= 0 ? v57 : v56;
    uint64_t v60 = v57 + 176;
    uint64_t v61 = sub_10014D19C(v57 + 176);
    uint64_t v62 = sub_1008B42D8(v60);
    v86.st_dev = 136446722;
    *(void *)&v86.st_mode = v59;
    WORD2(v86.st_ino) = 2050;
    *(__darwin_ino64_t *)((char *)&v86.st_ino + 6) = v61;
    HIWORD(v86.st_gid) = 2050;
    *(void *)&v86.st_rdev = v62;
    int v63 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v63);
    if (v63 != &buf) {
      goto LABEL_149;
    }
  }
  return v9 != 0;
}

void sub_101235E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_101235ECC(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 - 3 >= 3)
  {
    sub_101AA8F48();
    __break(1u);
  }
  else
  {
    int v4 = a2;
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    id v45[2] = sub_10123BC90;
    uint64_t v45[3] = &unk_1022F2D28;
    unsigned int v46 = a3;
    v47[0] = mach_absolute_time();
    v47[1] = (uint64_t)v45;
    uint64_t v44 = sub_10015EF24(a3, (void *)(a1 + 416));
    uint64_t v3 = &qword_102419000;
    if (qword_1024193A0 == -1) {
      goto LABEL_3;
    }
  }
  dispatch_once(&qword_1024193A0, &stru_1023197C0);
LABEL_3:
  std::string::size_type v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(v44 + 8);
    int v9 = *(char *)(v44 + 31);
    uint64_t v10 = sub_10014D19C(v44 + 184);
    if (v9 >= 0) {
      uint64_t v11 = v44 + 8;
    }
    else {
      uint64_t v11 = v8;
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v57 = (const char *)v11;
    __int16 v58 = 2050;
    double v59 = *(double *)&v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TileCell, %{public}s, removeAllTiles, size, %{public}lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v35 = *(void *)(v44 + 8);
    int v36 = *(char *)(v44 + 31);
    uint64_t v37 = sub_10014D19C(v44 + 184);
    if (v36 >= 0) {
      uint64_t v38 = v44 + 8;
    }
    else {
      uint64_t v38 = v35;
    }
    int v48 = 136446466;
    double v49 = (const char *)v38;
    __int16 v50 = 2050;
    double v51 = *(double *)&v37;
    double v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  uint64_t v12 = v44 + 184;
  int v13 = (void *)sub_1000D8908(v44 + 184);
  if (v13 != (void *)sub_1000B894C(v44 + 184))
  {
    do
    {
      if (v4)
      {
        uint64_t v14 = v13[10];
        sub_101048104(v14);
        if (v3[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        int v15 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v16 = sub_100147F50(*(_DWORD *)(v14 + 48));
          double v17 = sub_10013DAC0(v14 + 48);
          double v18 = sub_10013DA9C(v14 + 48);
          uint64_t v19 = sub_10014D19C(v12);
          *(_DWORD *)std::string buf = 136446979;
          uint64_t v57 = v16;
          __int16 v58 = 2049;
          double v59 = v17;
          __int16 v60 = 2049;
          double v61 = v18;
          __int16 v62 = 2050;
          uint64_t v63 = v19;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v3[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023197C0);
          }
          unsigned int v24 = *(_DWORD *)(v14 + 48);
          uint64_t v23 = v14 + 48;
          __int16 v25 = sub_100147F50(v24);
          double v26 = sub_10013DAC0(v23);
          double v27 = sub_10013DA9C(v23);
          uint64_t v28 = sub_10014D19C(v12);
          int v48 = 136446979;
          double v49 = v25;
          __int16 v50 = 2049;
          double v51 = v26;
          __int16 v52 = 2049;
          double v53 = v27;
          __int16 v54 = 2050;
          uint64_t v55 = v28;
          int v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
      }
      int v20 = (void *)v13[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          int v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)v13[2];
          BOOL v22 = *v21 == (void)v13;
          int v13 = v21;
        }
        while (!v22);
      }
      int v13 = v21;
    }
    while (v21 != (void *)sub_1000B894C(v12));
  }
  sub_1008B42E0(v12);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  int v30 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v44 + 31) >= 0) {
      uint64_t v31 = v44 + 8;
    }
    else {
      uint64_t v31 = *(void *)(v44 + 8);
    }
    uint64_t v32 = sub_10014D19C(v12);
    uint64_t v33 = sub_1008B42D8(v12);
    *(_DWORD *)std::string buf = 136315650;
    uint64_t v57 = (const char *)v31;
    __int16 v58 = 2048;
    double v59 = *(double *)&v32;
    __int16 v60 = 2048;
    double v61 = *(double *)&v33;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    if (*(char *)(v44 + 31) >= 0) {
      uint64_t v40 = v44 + 8;
    }
    else {
      uint64_t v40 = *(void *)(v44 + 8);
    }
    uint64_t v41 = sub_10014D19C(v12);
    uint64_t v42 = sub_1008B42D8(v12);
    int v48 = 136315650;
    double v49 = (const char *)v40;
    __int16 v50 = 2048;
    double v51 = *(double *)&v41;
    __int16 v52 = 2048;
    double v53 = *(double *)&v42;
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
  return sub_1000E0900(v47);
}

void sub_10123658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000E0900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1012365D0(uint64_t a1, unsigned int a2, char *a3, std::string::value_type *a4, double a5)
{
  if (a2 - 3 >= 3)
  {
    sub_101AA90B4();
    __break(1u);
LABEL_39:
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
    goto LABEL_12;
  }
  std::string::size_type v6 = a4;
  std::string::size_type v7 = a3;
  unsigned int v5 = a2;
  uint64_t v10 = sub_10015EF24(a2, (void *)(a1 + 416));
  sub_10125C090(v5, &v40);
  if (v7[23] >= 0) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = *(char **)v7;
  }
  if (v6[23] >= 0) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = *(std::string::value_type **)v6;
  }
  if (sub_10104A8A0(v40, v11, v12, v5, 1, a5))
  {
    int v13 = v40;
    *(_OWORD *)double v49 = *((_OWORD *)v40 + 3);
    *(void *)&v49[16] = v40[8];
    if (*((char *)v40 + 95) < 0)
    {
      sub_1000DC48C(&__p, (void *)v40[9], v40[10]);
      int v13 = v40;
    }
    else
    {
      long long __p = *(_OWORD *)(v40 + 9);
      uint64_t v51 = v40[11];
    }
    sub_10125C938((uint64_t)v13, v10, (uint64_t)"lister");
    uint64_t v19 = v10 + 184;
    int v20 = sub_1008B436C((uint64_t **)(v10 + 184), (unsigned int *)v49);
    uint64_t v21 = v40;
    uint64_t v40 = 0;
    uint64_t v22 = *v20;
    *int v20 = (uint64_t)v21;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = *(void *)(v10 + 304);
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 32))(v23);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    unsigned int v24 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      __int16 v25 = sub_100147F50(v5);
      double v26 = sub_10013DAC0((uint64_t)v49);
      double v27 = sub_10013DA9C((uint64_t)v49);
      uint64_t v28 = sub_10014D19C(v19);
      *(_DWORD *)std::string buf = 136446979;
      double v53 = v25;
      __int16 v54 = 2049;
      double v55 = v26;
      __int16 v56 = 2049;
      double v57 = v27;
      __int16 v58 = 2050;
      uint64_t v59 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v35 = sub_100147F50(v5);
      double v36 = sub_10013DAC0((uint64_t)v49);
      double v37 = sub_10013DA9C((uint64_t)v49);
      uint64_t v38 = sub_10014D19C(v19);
      int v41 = 136446979;
      uint64_t v42 = v35;
      __int16 v43 = 2049;
      double v44 = v36;
      __int16 v45 = 2049;
      double v46 = v37;
      __int16 v47 = 2050;
      uint64_t v48 = v38;
      double v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    sub_100144000(v19, (unsigned int *)v49);
    if (SHIBYTE(v51) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v18 = 1;
    goto LABEL_35;
  }
  uint64_t v8 = &qword_102419000;
  if (qword_1024193A0 != -1) {
    goto LABEL_39;
  }
LABEL_12:
  uint64_t v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = sub_100147F50(v5);
    if (v7[23] >= 0) {
      std::string::size_type v16 = v7;
    }
    else {
      std::string::size_type v16 = *(char **)v7;
    }
    if (v6[23] >= 0) {
      double v17 = v6;
    }
    else {
      double v17 = *(std::string::value_type **)v6;
    }
    *(_DWORD *)std::string buf = 136446722;
    double v53 = v15;
    __int16 v54 = 2082;
    double v55 = *(double *)&v16;
    __int16 v56 = 2082;
    double v57 = *(double *)&v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v31 = sub_100147F50(v5);
    if (v7[23] >= 0) {
      uint64_t v32 = v7;
    }
    else {
      uint64_t v32 = *(char **)v7;
    }
    if (v6[23] >= 0) {
      uint64_t v33 = v6;
    }
    else {
      uint64_t v33 = *(std::string::value_type **)v6;
    }
    *(_DWORD *)double v49 = 136446722;
    *(void *)&v49[4] = v31;
    *(_WORD *)&v49[12] = 2082;
    *(void *)&v49[14] = v32;
    *(_WORD *)&v49[22] = 2082;
    *(void *)&long long __p = v33;
    uint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  uint64_t v18 = 0;
LABEL_35:
  int v29 = v40;
  uint64_t v40 = 0;
  if (v29) {
    (*(void (**)(uint64_t *))(*v29 + 8))(v29);
  }
  return v18;
}

void sub_101236BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101236C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  long long v46 = *(_OWORD *)(a2 + 48);
  uint64_t v47 = *(void *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1000DC48C(&v48, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v48 = *(_OWORD *)(a2 + 72);
    uint64_t v49 = *(void *)(a2 + 88);
  }
  double v10 = *(double *)(a1 + 252);
  double v11 = *(double *)(a1 + 152);
  BOOL v12 = sub_10104CF14((double *)a2, a1 + 176, 30000.0);
  if (!*(unsigned char *)(a1 + 128) || fabs(a5 - v10 + 60.0) >= v11 || !v12)
  {
    sub_10104CC50(a2, *(unsigned __int8 *)(a1 + 128) != 0);
  }
  else
  {
    char v13 = sub_10104A2AC(a2);
    uint64_t v14 = a3 + 184;
    sub_1008B403C(v14, (unsigned int *)&v46);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      int v16 = SHIBYTE(v66);
      double v17 = *(unsigned char **)__p;
      uint64_t v18 = sub_1008B42D8(v14);
      uint64_t v19 = __p;
      if (v16 < 0) {
        uint64_t v19 = v17;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v51 = 2048;
      double v52 = *(double *)&v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu", buf, 0x16u);
      if (SHIBYTE(v66) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
      int v36 = SHIBYTE(v53);
      double v37 = *(unsigned char **)buf;
      uint64_t v38 = sub_1008B42D8(v14);
      double v39 = buf;
      if (v36 < 0) {
        double v39 = v37;
      }
      int v59 = 136315394;
      __int16 v60 = v39;
      __int16 v61 = 2048;
      uint64_t v62 = v38;
      uint64_t v40 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v53) < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v40);
      if (v40 != __p) {
        free(v40);
      }
    }
    if ((v13 & 1) == 0)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      int v20 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
        int v21 = SHIBYTE(v66);
        uint64_t v22 = *(unsigned char **)__p;
        uint64_t v23 = sub_1008B42D8(v14);
        unsigned int v24 = __p;
        if (v21 < 0) {
          unsigned int v24 = v22;
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v24;
        __int16 v51 = 2048;
        double v52 = *(double *)&v23;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu", buf, 0x16u);
        if (SHIBYTE(v66) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
        int v41 = SHIBYTE(v53);
        uint64_t v42 = *(unsigned char **)buf;
        uint64_t v43 = sub_1008B42D8(v14);
        double v44 = buf;
        if (v41 < 0) {
          double v44 = v42;
        }
        int v59 = 136315394;
        __int16 v60 = v44;
        __int16 v61 = 2048;
        uint64_t v62 = v43;
        __int16 v45 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v53) < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v45);
        if (v45 != __p) {
          free(v45);
        }
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    __int16 v25 = (unsigned int *)(a2 + 48);
    double v26 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      double v27 = sub_100147F50(*v25);
      double v28 = sub_10013DAC0((uint64_t)&v46);
      double v29 = sub_10013DA9C((uint64_t)&v46);
      uint64_t v30 = sub_1008B42D8(v14);
      *(_DWORD *)long long __p = 136447235;
      *(void *)&__p[4] = v27;
      __int16 v64 = 2049;
      double v65 = v28;
      __int16 v66 = 2049;
      double v67 = v29;
      __int16 v68 = 2082;
      uint64_t v69 = a4;
      __int16 v70 = 2050;
      uint64_t v71 = v30;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "@TileList, %{public}s, unprotect, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", __p, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v31 = sub_100147F50(*v25);
      double v32 = sub_10013DAC0((uint64_t)&v46);
      double v33 = sub_10013DA9C((uint64_t)&v46);
      uint64_t v34 = sub_1008B42D8(v14);
      *(_DWORD *)std::string buf = 136447235;
      *(void *)&uint8_t buf[4] = v31;
      __int16 v51 = 2049;
      double v52 = v32;
      __int16 v53 = 2049;
      double v54 = v33;
      __int16 v55 = 2082;
      uint64_t v56 = a4;
      __int16 v57 = 2050;
      uint64_t v58 = v34;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v35);
      if (v35 != __p) {
        free(v35);
      }
    }
  }
  if (SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
}

void sub_1012373A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id *sub_10123741C(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileDl, tileDownloadedCallback, success, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCellTilesManager::tileDownloadCallback(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1012375DC(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 56));
}

id *sub_1012375DC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned __int8 v87 = a3;
  sub_1000E1294((uint64_t *)v86, (uint64_t)"cellTileDownloaded", 0);
  double v5 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
  uint64_t v6 = sub_10112D70C(*(void **)(a1 + 376), a2);
  int v7 = (char *)v6;
  int v85 = 0;
  if (v6)
  {
    long long v81 = *(_OWORD *)(v6 + 48);
    uint64_t v82 = *(void *)(v6 + 64);
    if (*(char *)(v6 + 95) < 0)
    {
      sub_1000DC48C(&v83, *(void **)(v6 + 72), *(void *)(v6 + 80));
    }
    else
    {
      long long v83 = *(_OWORD *)(v6 + 72);
      uint64_t v84 = *(void *)(v6 + 88);
    }
    unsigned int v10 = *((_DWORD *)v7 + 12);
    uint64_t v11 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
    uint64_t v12 = a1 + 392;
    uint64_t v69 = v11;
    if (v87 || v11 == -1100) {
      sub_100FFB390(v12);
    }
    else {
      sub_100FFB3C0(v12, v5);
    }
    uint64_t v13 = sub_10015EF24(v10, (void *)(a1 + 416));
    if (v87 && (_os_feature_enabled_impl() & 1) == 0) {
      unsigned __int8 v87 = (*(uint64_t (**)(char *, int *))(*(void *)v7 + 40))(v7, &v85);
    }
    uint64_t v14 = &qword_102419000;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    int v15 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = sub_100147F50(v10);
      double v17 = sub_10013DAC0((uint64_t)&v81);
      double v18 = sub_10013DA9C((uint64_t)&v81);
      int v19 = v87;
      uint64_t v20 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      *(_DWORD *)std::string buf = 136447235;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v97 = 2049;
      *(double *)long long v98 = v17;
      *(_WORD *)&char v98[8] = 2049;
      double v99 = v18;
      *(_WORD *)long long v100 = 1026;
      *(_DWORD *)&v100[2] = v19;
      *(_WORD *)&v100[6] = 1026;
      *(_DWORD *)&v100[8] = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v49 = sub_100147F50(v10);
      double v50 = sub_10013DAC0((uint64_t)&v81);
      double v51 = sub_10013DA9C((uint64_t)&v81);
      int v52 = v87;
      uint64_t v53 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      *(_DWORD *)long long __p = 136447235;
      *(void *)&__p[4] = v49;
      __int16 v89 = 2049;
      *(double *)uint64_t v90 = v50;
      *(_WORD *)&v90[8] = 2049;
      double v91 = v51;
      *(_WORD *)long long v92 = 1026;
      *(_DWORD *)&v92[2] = v52;
      *(_WORD *)&v92[6] = 1026;
      *(_DWORD *)&v92[8] = v53;
      double v54 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v54);
      if (v54 != buf) {
        free(v54);
      }
    }
    if (v87)
    {
      int v21 = v85;
      (*(void (**)(uint64_t))(*(void *)(v13 + 232) + 16))(v13 + 232);
      *(_DWORD *)(v13 + 276) += v21;
      (*(void (**)(uint64_t))(*(void *)(v13 + 232) + 24))(v13 + 232);
      (*(void (**)(uint64_t))(*(void *)(v13 + 232) + 16))(v13 + 232);
      ++*(_DWORD *)(v13 + 284);
      (*(void (**)(uint64_t))(*(void *)(v13 + 232) + 24))(v13 + 232);
      sub_100134750(buf, "tileDownloadCompleted");
      sub_100D3B360(v13 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 352));
      if ((v98[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v22 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v23 = v10;
      unsigned int v24 = __p;
      (*(void (**)(unsigned char *__return_ptr, char *))(*(void *)v7 + 16))(__p, v7);
      if (v90[9] < 0) {
        unsigned int v24 = *(unsigned char **)__p;
      }
      int v25 = v87;
      uint64_t v26 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      int v27 = *(_DWORD *)(a1 + 352);
      BOOL v28 = sub_1001447B8((unsigned int *)&v81);
      int v29 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)std::string buf = 136382467;
      *(void *)&uint8_t buf[4] = v24;
      __int16 v97 = 1026;
      *(_DWORD *)long long v98 = v25;
      *(_WORD *)&v98[4] = 1026;
      *(_DWORD *)&v98[6] = v26;
      LOWORD(v99) = 1026;
      *(_DWORD *)((char *)&v99 + 2) = v69 == -1100;
      HIWORD(v99) = 1026;
      *(_DWORD *)long long v100 = v27;
      *(_WORD *)&v100[4] = 1026;
      *(_DWORD *)&v100[6] = v28;
      *(_WORD *)&v100[10] = 1026;
      int v101 = v29;
      __int16 v102 = 1026;
      int v103 = v85;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "@TileDl, tileDecompressionCompleted, tile, %{private}s, decompress done, success, %{public}d, NSURLErrorCode, %{public}d, tileDoesNotExist, %{public}d, reachability, %{public}d, validId, %{public}d, locked, %{public}d, fileSize, %{public}d", buf, 0x36u);
      if ((v90[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      unsigned int v10 = v23;
      uint64_t v14 = &qword_102419000;
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      __int16 v55 = v79;
      (*(void (**)(void **__return_ptr, char *))(*(void *)v7 + 16))(v79, v7);
      unsigned int v68 = v10;
      if (v80 < 0) {
        __int16 v55 = (void **)v79[0];
      }
      int v56 = v87;
      uint64_t v57 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      int v58 = *(_DWORD *)(a1 + 352);
      BOOL v59 = sub_1001447B8((unsigned int *)&v81);
      int v60 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)long long __p = 136382467;
      *(void *)&__p[4] = v55;
      __int16 v89 = 1026;
      *(_DWORD *)uint64_t v90 = v56;
      *(_WORD *)&v90[4] = 1026;
      *(_DWORD *)&v90[6] = v57;
      LOWORD(v91) = 1026;
      *(_DWORD *)((char *)&v91 + 2) = v69 == -1100;
      HIWORD(v91) = 1026;
      *(_DWORD *)long long v92 = v58;
      *(_WORD *)&v92[4] = 1026;
      *(_DWORD *)&v92[6] = v59;
      *(_WORD *)&v92[10] = 1026;
      int v93 = v60;
      __int16 v94 = 1026;
      int v95 = v85;
      __int16 v61 = (char *)_os_log_send_and_compose_impl();
      if (v80 < 0) {
        operator delete(v79[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v61);
      unsigned int v10 = v68;
      uint64_t v14 = &qword_102419000;
      if (v61 != buf) {
        free(v61);
      }
    }
    if (!sub_1001447B8((unsigned int *)&v81))
    {
      if (v14[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v30 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "@TileError, DecompressionID", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v14[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        *(_WORD *)long long __p = 0;
        double v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v67);
        if (v67 != buf) {
          free(v67);
        }
      }
    }
    unsigned __int8 v87 = sub_101048658((uint64_t)v7, v87, v69 == -1100, v5);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    sub_101238680(a1, v87, v7, v13, v85);
    if (sub_1000FC450())
    {
      sub_1000E9354(buf);
      uint64_t v31 = v7 + 8;
      if (v7[31] < 0) {
        uint64_t v31 = *(char **)v31;
      }
      sub_1004D34AC((uint64_t)buf, "gotTile", v31);
      sub_1000EA238((uint64_t)buf, "success", &v87);
      sub_1000EA238((uint64_t)buf, "protection", (unsigned char *)(a1 + 128));
      sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
      sub_10013F3C4(buf);
    }
    if (v87)
    {
      sub_10125C938((uint64_t)v7, v13, (uint64_t)"download");
      uint64_t v32 = *(void *)(a1 + 376);
      long long v75 = v81;
      uint64_t v76 = v82;
      if (SHIBYTE(v84) < 0)
      {
        sub_1000DC48C(&v77, (void *)v83, *((unint64_t *)&v83 + 1));
      }
      else
      {
        long long v77 = v83;
        uint64_t v78 = v84;
      }
      sub_10112D798(v32, (uint64_t)&v75, v87, v69 == -1100, (uint64_t *)v79, v5);
      if (SHIBYTE(v78) < 0) {
        operator delete((void *)v77);
      }
      if (v79[0])
      {
        uint64_t v35 = sub_1008B436C((uint64_t **)(v13 + 184), (unsigned int *)&v81);
        int v36 = v79[0];
        v79[0] = 0;
        uint64_t v37 = *v35;
        *uint64_t v35 = (uint64_t)v36;
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
        }
      }
      uint64_t v38 = sub_100144000(v13 + 184, (unsigned int *)&v81);
      sub_100144E3C(v38, v5);
      uint64_t v39 = sub_100144000(v13 + 184, (unsigned int *)&v81);
      sub_101236C20(a1, v39, v13, (uint64_t)"download", v5);
      uint64_t v40 = *(void *)(v13 + 304);
      if (v40) {
        (*(void (**)(uint64_t))(*(void *)v40 + 32))(v40);
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      int v41 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        uint64_t v42 = sub_100147F50(v10);
        double v43 = sub_10013DAC0((uint64_t)&v81);
        double v44 = sub_10013DA9C((uint64_t)&v81);
        uint64_t v45 = sub_10014D19C(v13 + 184);
        *(_DWORD *)std::string buf = 136446979;
        *(void *)&uint8_t buf[4] = v42;
        __int16 v97 = 2049;
        *(double *)long long v98 = v43;
        *(_WORD *)&char v98[8] = 2049;
        double v99 = v44;
        *(_WORD *)long long v100 = 2050;
        *(void *)&v100[2] = v45;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        uint64_t v62 = sub_100147F50(v10);
        double v63 = sub_10013DAC0((uint64_t)&v81);
        double v64 = sub_10013DA9C((uint64_t)&v81);
        uint64_t v65 = sub_10014D19C(v13 + 184);
        *(_DWORD *)long long __p = 136446979;
        *(void *)&__p[4] = v62;
        __int16 v89 = 2049;
        *(double *)uint64_t v90 = v63;
        *(_WORD *)&v90[8] = 2049;
        double v91 = v64;
        *(_WORD *)long long v92 = 2050;
        *(void *)&v92[2] = v65;
        __int16 v66 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v66);
        if (v66 != buf) {
          free(v66);
        }
      }
      ++*(_DWORD *)(v13 + 288);
      if ((sub_100147F74(*(_DWORD *)(a1 + 352), *(unsigned __int8 *)(a1 + 356)) & 1) == 0) {
        ++*(_DWORD *)(v13 + 292);
      }
      sub_101234D88(a1, v5);
      long long v46 = v79[0];
      v79[0] = 0;
      if (v46) {
        (*(void (**)(void *))(*(void *)v46 + 8))(v46);
      }
    }
    else
    {
      uint64_t v33 = *(void *)(a1 + 376);
      long long v70 = v81;
      uint64_t v71 = v82;
      if (SHIBYTE(v84) < 0)
      {
        sub_1000DC48C(&v72, (void *)v83, *((unint64_t *)&v83 + 1));
        BOOL v34 = v87 != 0;
      }
      else
      {
        BOOL v34 = 0;
        long long v72 = v83;
        uint64_t v73 = v84;
      }
      sub_10112D798(v33, (uint64_t)&v70, v34, v69 == -1100, &v74, v5);
      uint64_t v47 = v74;
      uint64_t v74 = 0;
      if (v47) {
        (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
      }
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
    }
    if (SHIBYTE(v84) < 0) {
      operator delete((void *)v83);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "@TileError, tile not on download list, #CloneMe", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      *(_WORD *)long long __p = 0;
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v9);
      if (v9 != buf) {
        free(v9);
      }
    }
  }
  sub_101234620(a1, v5);
  return sub_1000E1098(v86);
}

void sub_101238540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,id a41)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  sub_1000E1098(&a41);
  _Unwind_Resume(a1);
}

void sub_101238680(uint64_t a1, char a2, _DWORD *a3, uint64_t a4, int a5)
{
  double v10 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
  int v11 = a3[12];
  memset(&v35, 0, sizeof(v35));
  memset(v34, 0, sizeof(v34));
  v32[0] = a2;
  int v33 = v11;
  std::string::operator=(v34, (const std::string *)(a4 + 56));
  sub_100C09A14((uint64_t)(a3 + 12), &buf);
  if (SHIBYTE(v34[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34[1].__r_.__value_.__l.__data_);
  }
  v34[1] = buf;
  sub_101048050((uint64_t)a3, &buf);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string v35 = buf;
  int v36 = a5;
  double v12 = *(double *)(a4 + 136);
  long long v13 = *(_OWORD *)(a1 + 272);
  long long v14 = *(_OWORD *)(a1 + 304);
  v30[7] = *(_OWORD *)(a1 + 288);
  v31[0] = v14;
  *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a1 + 316);
  long long v15 = *(_OWORD *)(a1 + 224);
  v30[2] = *(_OWORD *)(a1 + 208);
  v30[3] = v15;
  long long v16 = *(_OWORD *)(a1 + 256);
  v30[4] = *(_OWORD *)(a1 + 240);
  void v30[5] = v16;
  v30[6] = v13;
  long long v17 = *(_OWORD *)(a1 + 192);
  v30[0] = *(_OWORD *)(a1 + 176);
  v30[1] = v17;
  unsigned __int8 v37 = sub_10125BB04((uint64_t)a3, (uint64_t)v30, v12, v10);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  double v18 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, _DWORD *))(*(void *)a3 + 16))(v38, a3);
    int v19 = v42 >= 0 ? v38 : *(unsigned char **)v38;
    uint64_t v20 = (v34[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? v34
        : (std::string *)v34[0].__r_.__value_.__r.__words[0];
    int v21 = (v34[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v34[1]
        : (std::string *)v34[1].__r_.__value_.__r.__words[0];
    uint64_t v22 = (v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v35
        : (std::string *)v35.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136382467;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v32[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v33;
    __int16 v54 = 2081;
    __int16 v55 = v20;
    __int16 v56 = 2081;
    uint64_t v57 = v21;
    __int16 v58 = 2081;
    BOOL v59 = v22;
    __int16 v60 = 1026;
    int v61 = a5;
    __int16 v62 = 1026;
    int v63 = v37;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s, size, %{public}d, current, %{public}d", (uint8_t *)&buf, 0x42u);
    if (SHIBYTE(v42) < 0) {
      operator delete(*(void **)v38);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a3 + 16))(v28, a3);
    if (v29 >= 0) {
      unsigned int v23 = v28;
    }
    else {
      unsigned int v23 = (void **)v28[0];
    }
    if ((v34[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v24 = v34;
    }
    else {
      unsigned int v24 = (std::string *)v34[0].__r_.__value_.__r.__words[0];
    }
    if ((v34[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      data = &v34[1];
    }
    else {
      data = (std::string *)v34[1].__r_.__value_.__l.__data_;
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v35;
    }
    else {
      uint64_t v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v38 = 136382467;
    *(void *)&v38[4] = v23;
    __int16 v39 = 1026;
    int v40 = v32[0];
    __int16 v41 = 1026;
    int v42 = v33;
    __int16 v43 = 2081;
    double v44 = v24;
    __int16 v45 = 2081;
    long long v46 = data;
    __int16 v47 = 2081;
    long long v48 = v26;
    __int16 v49 = 1026;
    int v50 = a5;
    __int16 v51 = 1026;
    int v52 = v37;
    int v27 = (std::string *)_os_log_send_and_compose_impl();
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &, unsigned int)", "%s\n", (const char *)v27);
    if (v27 != &buf) {
      free(v27);
    }
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &buf, v32, 0, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34[0].__r_.__value_.__l.__data_);
  }
}

void sub_101238B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

id sub_101238BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_101238C24;
  _OWORD v5[3] = &unk_1022B8660;
  void v5[4] = v2;
  void v5[5] = a2;
  return [v3 async:v5];
}

void sub_101238C24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (*(double (**)(void))(**(void **)(v2 + 368) + 16))(*(void *)(v2 + 368));
  uint64_t v4 = *(void *)(a1 + 40) + 184;
  double v5 = (void *)sub_1000D8908(v4);
  uint64_t v6 = sub_1000B894C(v4);
  if (v5 != (void *)v6)
  {
    int v7 = (void *)v6;
    char v8 = 0;
    do
    {
      char v9 = sub_10112DBA0(*(void *)(v2 + 376), v5[10], v3);
      double v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          double v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          double v5 = v11;
        }
        while (!v12);
      }
      v8 |= v9;
      double v5 = v11;
    }
    while (v11 != v7);
    if (v8)
    {
      int v13 = (*(uint64_t (**)(void))(**(void **)(v2 + 368) + 40))(*(void *)(v2 + 368));
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      long long v14 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileSched, cell, set, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        long long v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::refreshTilesDataIfNeeded()_block_invoke", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
  }
}

uint64_t sub_101238EB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100113C7C(a3);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  double v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10142D00C(a3);
    int v11 = v43 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 134218242;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s", buf, 0x16u);
    if (v43 < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    sub_10142D00C(a3);
    if (v37 >= 0) {
      char v29 = buf;
    }
    else {
      char v29 = *(unsigned char **)buf;
    }
    int v38 = 134218242;
    *(void *)__int16 v39 = v9;
    *(_WORD *)&v39[8] = 2080;
    *(void *)&v39[10] = v29;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    if (v37 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v30);
    if (v30 != (char *)&__p) {
      free(v30);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  BOOL v12 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v13 = sub_1001453B8((uint64_t)a2, *(unsigned char *)(a1 + 128));
    (*(void (**)(void **__return_ptr, void *))(*a2 + 16))(&__p, a2);
    long long v14 = v43 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v13;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, in tile, accessible, %d, %s", buf, 0x12u);
    if (v43 < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v31 = sub_1001453B8((uint64_t)a2, *(unsigned char *)(a1 + 128));
    (*(void (**)(unsigned char *__return_ptr, void *))(*a2 + 16))(buf, a2);
    if (v37 >= 0) {
      uint64_t v32 = buf;
    }
    else {
      uint64_t v32 = *(unsigned char **)buf;
    }
    int v38 = 67109378;
    *(_DWORD *)__int16 v39 = v31;
    *(_WORD *)&v39[4] = 2080;
    *(void *)&v39[6] = v32;
    int v33 = (char *)_os_log_send_and_compose_impl();
    if (v37 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v33);
    if (v33 != (char *)&__p) {
      free(v33);
    }
  }
  if (!sub_1001453B8((uint64_t)a2, *(unsigned char *)(a1 + 128))) {
    return 0;
  }
  unsigned int v15 = *(_DWORD *)(a3 + 8);
  if (v15 > 7 || ((1 << v15) & 0x87) == 0 || a2[8] != v9)
  {
    if (v15 - 3 > 2)
    {
      if (v15 == 6 && a2[8] == v9)
      {
        __int16 v42 = 0;
        int v41 = 0;
        *(void *)&buf[6] = 0;
        *(void *)std::string buf = 0;
        long long __p = *(void **)(sub_100117098(a3) + 8);
        int v21 = (*(uint64_t (**)(void *, void **, unsigned char *))(*a2 + 176))(a2, &__p, buf);
LABEL_33:
        if (v21) {
          goto LABEL_24;
        }
        goto LABEL_34;
      }
    }
    else if (a2[8] == v9)
    {
      __int16 v42 = 0;
      int v41 = 0;
      *(void *)&buf[6] = 0;
      *(void *)std::string buf = 0;
      LODWORD(__p) = *(_DWORD *)(sub_1006E58D4(a3) + 32);
      HIDWORD(__p) = *(_DWORD *)(sub_1006E58D4(a3) + 44);
      int v21 = (*(uint64_t (**)(void *, void **, unsigned char *))(*a2 + 176))(a2, &__p, buf);
      goto LABEL_33;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    uint64_t v26 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_10142D00C(a3);
      int v27 = v43 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TILE: no cell tiles for, %s", buf, 0xCu);
      if (v43 < 0) {
        operator delete(__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      sub_10142D00C(a3);
      if (v37 >= 0) {
        BOOL v34 = buf;
      }
      else {
        BOOL v34 = *(unsigned char **)buf;
      }
      int v38 = 136315138;
      *(void *)__int16 v39 = v34;
      std::string v35 = (char *)_os_log_send_and_compose_impl();
      if (v37 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v35);
      if (v35 != (char *)&__p) {
        free(v35);
      }
    }
    return 0;
  }
  __int16 v42 = 0;
  int v41 = 0;
  *(void *)&buf[6] = 0;
  *(void *)std::string buf = 0;
  long long __p = *(void **)(sub_1006E6690(a3) + 8);
  if ((*(unsigned int (**)(void *, void **, unsigned char *))(*a2 + 176))(a2, &__p, buf))
  {
LABEL_24:
    unsigned int v17 = *(unsigned __int16 *)&buf[8];
    unsigned int v18 = *(unsigned __int16 *)&buf[10];
    LOBYTE(v16) = buf[12];
    *(double *)(a5 + 20) = (double)v16 * 1000.0;
    sub_10104C204((uint64_t)a2, v17, v18, (double *)(a5 + 4), (double *)(a5 + 12));
    *(_OWORD *)(a5 + 28) = xmmword_101D1C570;
    *(double *)(a5 + 76) = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
    *(void *)(a5 + 88) = 0xBFF0000000000000;
    *(_DWORD *)(a5 + 96) = 6;
    *(void *)(a5 + 128) = 0x100000032;
    *(_DWORD *)(a5 + 84) = 70;
    if (sub_1001453B8((uint64_t)a2, *(unsigned char *)(a1 + 128)))
    {
      double v19 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
      sub_100144E3C((uint64_t)a2, v19);
    }
    uint64_t v20 = 1;
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v20 = 0;
LABEL_35:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  uint64_t v22 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1000AB340(a5);
    unsigned int v23 = v43 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v20;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, isFound, %d, locationd, %s", buf, 0x12u);
    if (v43 < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    sub_1000AB340(a5);
    if (v37 >= 0) {
      unsigned int v24 = buf;
    }
    else {
      unsigned int v24 = *(unsigned char **)buf;
    }
    int v38 = 67109378;
    *(_DWORD *)__int16 v39 = v20;
    *(_WORD *)&v39[4] = 2080;
    *(void *)&v39[6] = v24;
    int v25 = (char *)_os_log_send_and_compose_impl();
    if (v37 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v25);
    if (v25 != (char *)&__p) {
      free(v25);
    }
  }
  return v20;
}

BOOL sub_1012398F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v87 = 0;
  *(void *)(a5 + 96) = 0;
  *(void *)(a5 + 104) = 0;
  *(_DWORD *)(a5 + 112) = 0;
  *(void *)(a5 + 136) = 0;
  *(void *)(a5 + 144) = 0;
  *(void *)(a5 + 128) = 0;
  *(unsigned char *)(a5 + 152) = 0;
  *(_DWORD *)a5 = 0xFFFF;
  *(void *)(a5 + 12) = 0;
  *(void *)(a5 + 4) = 0;
  *(_OWORD *)(a5 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a5 + 36) = _Q0;
  *(_OWORD *)(a5 + 52) = _Q0;
  *(_OWORD *)(a5 + 68) = _Q0;
  *(_DWORD *)(a5 + 84) = 0;
  *(void *)(a5 + 88) = 0xBFF0000000000000;
  *(void *)(a5 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 124) = 0x7FFFFFFF;
  if (!*(unsigned char *)(a1 + 129))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    unsigned int v23 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v25 = *(unsigned __int8 *)(a1 + 128);
    LODWORD(v97) = 67109120;
    DWORD1(v97) = v25;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v26);
    goto LABEL_33;
  }
  uint64_t v11 = a2;
  long long v81 = (_DWORD *)(a5 + 96);
  uint64_t v12 = sub_100113C7C(a2);
  unsigned int v13 = *(_DWORD *)(v11 + 8);
  if (v13 < 3) {
    goto LABEL_5;
  }
  if (v13 == 9)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    BOOL v28 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_10142D00C(v11);
      char v29 = v105 >= 0 ? buf : *(uint8_t **)buf;
      LODWORD(v97) = 136315138;
      *(void *)((char *)&v97 + 4) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: no tiles for, %s", (uint8_t *)&v97, 0xCu);
      if (v105 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    sub_10142D00C(v11);
    if (v98 >= 0) {
      uint64_t v30 = &v97;
    }
    else {
      uint64_t v30 = (long long *)v97;
    }
    LODWORD(v94) = 136315138;
    *(void *)((char *)&v94 + 4) = v30;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v98) < 0) {
      operator delete((void *)v97);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v26);
    goto LABEL_52;
  }
  if (v13 == 7)
  {
LABEL_5:
    unsigned int v14 = 3;
LABEL_6:
    int v87 = v14;
    goto LABEL_7;
  }
  if (v13 - 3 > 2)
  {
    if (v13 == 6)
    {
      unsigned int v14 = 4;
      goto LABEL_6;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    BOOL v34 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      sub_10142D00C(v11);
      std::string v35 = v105 >= 0 ? buf : *(uint8_t **)buf;
      LODWORD(v97) = 136380675;
      *(void *)((char *)&v97 + 4) = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CellTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe", (uint8_t *)&v97, 0xCu);
      if (v105 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    sub_10142D00C(v11);
    if (v98 >= 0) {
      long long v77 = &v97;
    }
    else {
      long long v77 = (long long *)v97;
    }
    LODWORD(v94) = 136380675;
    *(void *)((char *)&v94 + 4) = v77;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v98) < 0) {
      operator delete((void *)v97);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v26);
LABEL_52:
    if (v26 == (char *)buf) {
      return 0;
    }
    goto LABEL_34;
  }
  unsigned int v14 = 5;
  int v87 = 5;
  if (v13 != 3) {
    return 0;
  }
LABEL_7:
  uint64_t v15 = sub_10015EF24(v14, (void *)(a1 + 416));
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v27 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, tiles, %d, are not active on this device", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    LODWORD(v97) = 67109120;
    DWORD1(v97) = v87;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v26);
LABEL_33:
    if (v26 == (char *)buf) {
      return 0;
    }
LABEL_34:
    free(v26);
    return 0;
  }
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 + 296);
  uint64_t v18 = *(void *)(v15 + 304);
  sub_10010EE08(v11, &v86);
  uint64_t v78 = v17;
  uint64_t v79 = v18;
  if (v17) {
    _ZF = v18 == 0;
  }
  else {
    _ZF = 1;
  }
  char v20 = !_ZF;
  char v80 = v20;
  if (_ZF) {
    goto LABEL_84;
  }
  BOOL v21 = sub_10123AD68(v17, &v86, (_OWORD *)a5);
  BOOL v22 = !v21 && sub_10123AD68(v18, &v86, (_OWORD *)a5);
  uint64_t v31 = v11;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  uint64_t v32 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v21;
    __int16 v101 = 1024;
    unsigned int v102 = v22;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, isInKnownCache, %d, isInUnKnownCache, %d", buf, 0xEu);
  }
  uint64_t v11 = v31;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    LODWORD(v97) = 67109376;
    DWORD1(v97) = v21;
    WORD4(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 10) = v22;
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
    uint64_t v11 = v31;
    if (v21) {
      goto LABEL_64;
    }
  }
  else if (v21)
  {
LABEL_64:
    *(double *)(a5 + 76) = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
    BOOL v33 = 1;
    goto LABEL_177;
  }
  if (!v22)
  {
LABEL_84:
    double v37 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
    v85[0] = 0;
    v85[1] = 0;
    uint64_t v84 = v85;
    double v38 = *(double *)(a3 + 76);
    sub_10014F674((uint64_t)&v97, &v87);
    sub_10014F674((uint64_t)&v94, &v87);
    uint64_t v82 = v11;
    if (*(double *)(a3 + 20) >= 0.0 && vabdd_f64(v37, v38) <= 3600.0 * 0.5)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      __int16 v39 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        sub_1000AB340(a3);
        int v40 = v105 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)double v88 = 136315138;
        *(void *)&v88[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, using locationHint, %s", v88, 0xCu);
        if (v105 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        sub_1000AB340(a3);
        if (v91 >= 0) {
          long long v75 = v88;
        }
        else {
          long long v75 = *(unsigned char **)v88;
        }
        int v92 = 136315138;
        int v93 = v75;
        uint64_t v76 = (char *)_os_log_send_and_compose_impl();
        if (v91 < 0) {
          operator delete(*(void **)v88);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v76);
        if (v76 != (char *)buf) {
          free(v76);
        }
      }
      sub_100146674((uint64_t)&v97, v12, *(double *)(a3 + 4), *(double *)(a3 + 12), *(double *)(v16 + 152), *(double *)(v16 + 160));
    }
    if (sub_1001447B8((unsigned int *)&v97)
      && (__int16 v42 = (void *)sub_100144000(v16 + 184, (unsigned int *)&v97)) != 0
      && (char v43 = sub_101238EB4(a1, v42, v11, v41, a5),
          *(void *)std::string buf = v42 + 6,
          sub_101242EC0((uint64_t **)&v84, (uint64_t)(v42 + 6), (uint64_t)&unk_101D0B290, (_OWORD **)buf)[10] = (uint64_t)v42,
          (v43 & 1) != 0))
    {
LABEL_99:
      sub_1000D8908(v16 + 184);
      char v44 = v80;
      if (*v81 != 6) {
        char v44 = 0;
      }
      if ((v44 & 1) == 0) {
        goto LABEL_170;
      }
    }
    else
    {
      uint64_t v45 = 0;
      long long v46 = &byte_101DAF2D5;
      uint64_t v47 = v16 + 184;
      do
      {
        if (!sub_1001447B8((unsigned int *)&v97)) {
          break;
        }
        unsigned int v48 = *v46;
        unsigned int v49 = *(v46 - 1);
        long long v94 = v97;
        uint64_t v95 = v98;
        std::string::operator=(&__p, &v99);
        double v50 = *(double *)(v16 + 160);
        float32_t v51 = *(double *)(v16 + 152);
        *(float *)&double v50 = v50;
        sub_100143FCC((uint64_t)&v94, v48, v49, v51, *(float32x2_t *)&v50);
        if (sub_1001447B8((unsigned int *)&v94))
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1023197E0);
          }
          int v52 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v45;
            __int16 v101 = 1024;
            unsigned int v102 = v48;
            __int16 v103 = 1024;
            unsigned int v104 = v49;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, search neighbor, step, %2d, y, %+2d, x, %+2d", buf, 0x14u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1023197E0);
            }
            *(_DWORD *)double v88 = 67109632;
            *(_DWORD *)&v88[4] = v45;
            *(_WORD *)&v88[8] = 1024;
            *(_DWORD *)&v88[10] = v48;
            __int16 v89 = 1024;
            unsigned int v90 = v49;
            __int16 v58 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v58);
            if (v58 != (char *)buf) {
              free(v58);
            }
          }
          __int16 v54 = (void *)sub_100144000(v16 + 184, (unsigned int *)&v94);
          if (v54)
          {
            char v55 = sub_101238EB4(a1, v54, v11, v53, a5);
            *(void *)std::string buf = v54 + 6;
            sub_101242EC0((uint64_t **)&v84, (uint64_t)(v54 + 6), (uint64_t)&unk_101D0B290, (_OWORD **)buf)[10] = (uint64_t)v54;
            if (v55) {
              goto LABEL_99;
            }
          }
        }
        else
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1023197E0);
          }
          __int16 v56 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            sub_100C094CC((uint64_t)&v94);
            uint64_t v57 = buf;
            if (v105 < 0) {
              uint64_t v57 = *(uint8_t **)buf;
            }
            *(_DWORD *)double v88 = 136315138;
            *(void *)&v88[4] = v57;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, out of boundary, %s", v88, 0xCu);
            if (v105 < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1023197E0);
            }
            sub_100C094CC((uint64_t)&v94);
            BOOL v59 = v88;
            if (v91 < 0) {
              BOOL v59 = *(unsigned char **)v88;
            }
            int v92 = 136315138;
            int v93 = v59;
            __int16 v60 = (char *)_os_log_send_and_compose_impl();
            if (v91 < 0) {
              operator delete(*(void **)v88);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v60);
            if (v60 != (char *)buf) {
              free(v60);
            }
          }
        }
        ++v45;
        v46 += 2;
      }
      while (v45 != 24);
      int v61 = (void *)sub_1000D8908(v16 + 184);
      do
      {
        __int16 v62 = v61;
        uint64_t v63 = sub_1000B894C(v47);
        BOOL v33 = v62 != (void *)v63;
        if (v62 == (void *)v63) {
          break;
        }
        double v64 = (void *)v62[10];
        if (v85 == sub_100144248((uint64_t)&v84, (uint64_t)(v64 + 6)))
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1023197E0);
          }
          __int16 v66 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(uint8_t *__return_ptr, void *))(*v64 + 16))(buf, v64);
            double v67 = v105 >= 0 ? buf : *(uint8_t **)buf;
            *(_DWORD *)double v88 = 136315138;
            *(void *)&v88[4] = v67;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, search remaining tiles, %s", v88, 0xCu);
            if (v105 < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1023197E0);
            }
            (*(void (**)(unsigned char *__return_ptr, void *))(*v64 + 16))(v88, v64);
            uint64_t v71 = v88;
            if (v91 < 0) {
              uint64_t v71 = *(unsigned char **)v88;
            }
            int v92 = 136315138;
            int v93 = v71;
            long long v72 = (char *)_os_log_send_and_compose_impl();
            if (v91 < 0) {
              operator delete(*(void **)v88);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v72);
            if (v72 != (char *)buf) {
              free(v72);
            }
          }
          char v65 = sub_101238EB4(a1, v64, v82, v68, a5);
          *(void *)std::string buf = v64 + 6;
          sub_101242EC0((uint64_t **)&v84, (uint64_t)(v64 + 6), (uint64_t)&unk_101D0B290, (_OWORD **)buf)[10] = (uint64_t)v64;
        }
        else
        {
          char v65 = 0;
        }
        uint64_t v69 = (void *)v62[1];
        long long v70 = v62;
        if (v69)
        {
          do
          {
            int v61 = v69;
            uint64_t v69 = (void *)*v69;
          }
          while (v69);
        }
        else
        {
          do
          {
            int v61 = (void *)v70[2];
            _ZF = *v61 == (void)v70;
            long long v70 = v61;
          }
          while (!_ZF);
        }
      }
      while ((v65 & 1) == 0);
      char v73 = v80;
      if (*v81 != 6) {
        char v73 = 0;
      }
      if ((v73 & 1) == 0) {
        goto LABEL_172;
      }
      if (v62 == (void *)v63)
      {
        sub_10123B230(v79, &v86, (_OWORD *)a5);
        BOOL v33 = 0;
        goto LABEL_172;
      }
    }
    sub_10123B230(v78, &v86, (_OWORD *)a5);
LABEL_170:
    BOOL v33 = 1;
LABEL_172:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    sub_10014F400((uint64_t)&v84, v85[0]);
    goto LABEL_177;
  }
  BOOL v33 = 0;
  *(double *)(a5 + 76) = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
LABEL_177:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  return v33;
}

void sub_10123ACBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  sub_10014F400((uint64_t)&a24, a25);
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10123AD68(uint64_t a1, std::string *a2, _OWORD *a3)
{
  uint64_t v6 = sub_10012FFE0(a1 + 56, (const void **)&a2->__r_.__value_.__l.__data_);
  uint64_t v7 = v6;
  uint64_t v8 = a1 + 64;
  if (a1 + 64 != v6)
  {
    long long v9 = *(_OWORD *)(v6 + 72);
    *a3 = *(_OWORD *)(v6 + 56);
    a3[1] = v9;
    long long v10 = *(_OWORD *)(v6 + 88);
    long long v11 = *(_OWORD *)(v6 + 104);
    long long v12 = *(_OWORD *)(v6 + 136);
    a3[4] = *(_OWORD *)(v6 + 120);
    a3[5] = v12;
    a3[2] = v10;
    a3[3] = v11;
    long long v13 = *(_OWORD *)(v6 + 152);
    long long v14 = *(_OWORD *)(v6 + 168);
    long long v15 = *(_OWORD *)(v6 + 184);
    *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)(v6 + 196);
    a3[7] = v14;
    a3[8] = v15;
    a3[6] = v13;
    memset(__p, 0, sizeof(__p));
    uint64_t v16 = *(void *)(v6 + 216);
    if (v16 == a1 + 88)
    {
      std::string::operator=((std::string *)&__p[1], a2);
    }
    else
    {
      __p[0] = *(void **)(v16 + 32);
      std::string::operator=((std::string *)&__p[1], (const std::string *)(v16 + 40));
      sub_10006DA20((uint64_t **)(a1 + 80), *(void *)(v7 + 216));
    }
    __p[0] = COERCE_VOID_(CFAbsoluteTimeGetCurrent());
    sub_101242C48(a1, (uint64_t)__p, v7 + 56);
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  uint64_t v17 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v18 = (void *)*v18;
    }
    double v19 = *(void **)(a1 + 72);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *))(*(void *)a1 + 56))(v37, a1, a2);
    int v20 = SHIBYTE(v40);
    BOOL v21 = *(unsigned char **)v37;
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(void *)a1 + 72))(v35, a1, a3);
    BOOL v22 = v37;
    if (v20 < 0) {
      BOOL v22 = v21;
    }
    if (v36 >= 0) {
      unsigned int v23 = v35;
    }
    else {
      unsigned int v23 = (void **)v35[0];
    }
    LODWORD(__p[0]) = 136315906;
    *(void **)((char *)__p + 4) = v18;
    WORD2(__p[1]) = 2048;
    *(void **)((char *)&__p[1] + 6) = v19;
    HIWORD(__p[2]) = 2080;
    _DWORD __p[3] = v22;
    __int16 v45 = 2080;
    long long v46 = v23;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, getEntry, end, size, %lu, %s, entry, %s", (uint8_t *)__p, 0x2Au);
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    uint64_t v8 = a1 + 64;
    if (SHIBYTE(v40) < 0) {
      operator delete(*(void **)v37);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v25 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v25 = (void *)*v25;
    }
    uint64_t v26 = *(void *)(a1 + 72);
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)a1 + 56))(v35, a1, a2);
    uint64_t v27 = v8;
    int v28 = v36;
    char v29 = (void **)v35[0];
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(void *)a1 + 72))(v33, a1, a3);
    uint64_t v30 = v35;
    if (v28 < 0) {
      uint64_t v30 = v29;
    }
    if (v34 >= 0) {
      uint64_t v31 = v33;
    }
    else {
      uint64_t v31 = (void **)v33[0];
    }
    *(_DWORD *)double v37 = 136315906;
    *(void *)&v37[4] = v25;
    __int16 v38 = 2048;
    uint64_t v39 = v26;
    __int16 v40 = 2080;
    uint64_t v41 = v30;
    __int16 v42 = 2080;
    char v43 = v31;
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    uint64_t v8 = v27;
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEntryCache<std::string, CLDaemonLocation>::getEntry(const Key_T &, DataEntry_T &) [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v32);
    if (v32 != (char *)__p) {
      free(v32);
    }
  }
  return v8 != v7;
}

void sub_10123B1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10123B230(uint64_t a1, std::string *a2, _OWORD *a3)
{
  uint64_t v4 = (uint64_t **)(a1 + 56);
  uint64_t v5 = sub_10012FFE0(a1 + 56, (const void **)&a2->__r_.__value_.__l.__data_);
  if (a1 + 64 != v5)
  {
    uint64_t v6 = *(void *)(v5 + 216);
    if (a1 + 88 == v6)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      uint64_t v7 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v8 = (void *)*v8;
        }
        uint64_t v9 = *(void *)(a1 + 72);
        (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *))(*(void *)a1 + 56))(__p, a1, a2);
        if (__p[23] >= 0) {
          long long v10 = __p;
        }
        else {
          long long v10 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v75 = 2048;
        uint64_t v76 = v9;
        __int16 v77 = 2080;
        uint64_t v78 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "CACHE: name, %s, bad set iterator - recovering, size, %lu, %s", buf, 0x20u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        double v50 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v50 = (void *)*v50;
        }
        uint64_t v51 = *(void *)(a1 + 72);
        (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *))(*(void *)a1 + 56))(v62, a1, a2);
        if (v65 >= 0) {
          int v52 = v62;
        }
        else {
          int v52 = *(unsigned char **)v62;
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v50;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v51;
        *(_WORD *)&__p[22] = 2080;
        *(void *)&__p[24] = v52;
        uint64_t v53 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v65) < 0) {
          operator delete(*(void **)v62);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEntryCache<std::string, CLDaemonLocation>::addEntry(const Key_T &, const DataEntry_T &) [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v53);
        if (v53 != buf) {
          free(v53);
        }
      }
    }
    else
    {
      sub_1001055EC(v4, (const void **)(v6 + 40));
      sub_10006DA20((uint64_t **)(a1 + 80), v6);
    }
    uint64_t v11 = sub_10012FFE0((uint64_t)v4, (const void **)&a2->__r_.__value_.__l.__data_);
    if (a1 + 64 != v11) {
      sub_100645C00(v4, v11);
    }
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  memset(&v61, 0, sizeof(v61));
  *(_OWORD *)&__p[4] = 0uLL;
  *(_OWORD *)&__p[20] = xmmword_101D1C320;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&__p[36] = _Q1;
  *(_OWORD *)&__p[52] = _Q1;
  *(_OWORD *)&__p[68] = _Q1;
  *(_DWORD *)std::string __p = 0xFFFF;
  *(_DWORD *)&__p[84] = 0;
  long long v70 = 0uLL;
  *(void *)&__p[88] = 0xBFF0000000000000;
  *(void *)((char *)&v71 + 4) = 0xBFF0000000000000;
  LODWORD(v71) = 0;
  HIDWORD(v71) = 0x7FFFFFFF;
  memset(v72, 0, 25);
  uint64_t v73 = 0;
  double v60 = Current;
  if (*(unsigned char *)(a1 + 40))
  {
    double v18 = *(double *)(a1 + 48);
    double v60 = v60 - (double)(rand() % ((int)(v18 * 0.9) / 9));
  }
  long long v19 = a3[7];
  long long v70 = a3[6];
  long long v71 = v19;
  *(_OWORD *)long long v72 = a3[8];
  *(_OWORD *)&v72[12] = *(_OWORD *)((char *)a3 + 140);
  long long v20 = a3[3];
  *(_OWORD *)&__p[32] = a3[2];
  *(_OWORD *)&__p[48] = v20;
  long long v21 = a3[5];
  *(_OWORD *)&__p[64] = a3[4];
  *(_OWORD *)&__p[80] = v21;
  long long v22 = a3[1];
  *(_OWORD *)std::string __p = *a3;
  *(_OWORD *)&__p[16] = v22;
  std::string::operator=(&v61, a2);
  sub_101242C48(a1, (uint64_t)&v60, (uint64_t)__p);
  *(void *)std::string buf = a2;
  unsigned int v23 = sub_101243010(v4, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (long long **)buf);
  long long v24 = v70;
  *(_OWORD *)(v23 + 21) = v71;
  long long v25 = *(_OWORD *)&v72[16];
  *(_OWORD *)(v23 + 23) = *(_OWORD *)v72;
  *(_OWORD *)(v23 + 25) = v25;
  uint64_t v26 = v73;
  long long v27 = *(_OWORD *)&__p[32];
  *(_OWORD *)(v23 + 13) = *(_OWORD *)&__p[48];
  long long v28 = *(_OWORD *)&__p[80];
  *(_OWORD *)(v23 + 15) = *(_OWORD *)&__p[64];
  *(_OWORD *)(v23 + 17) = v28;
  *(_OWORD *)(v23 + 19) = v24;
  long long v29 = *(_OWORD *)&__p[16];
  *(_OWORD *)(v23 + 7) = *(_OWORD *)__p;
  uint64_t v30 = (uint64_t *)(a1 + 8);
  v23[27] = v26;
  *(_OWORD *)(v23 + 9) = v29;
  *(_OWORD *)(v23 + 11) = v27;
  while (*(void *)(a1 + 72) > *(void *)(a1 + 32))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    uint64_t v31 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v32 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v32 = (void *)*v30;
      }
      uint64_t v33 = *(void *)(a1 + 72);
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v32;
      __int16 v75 = 2048;
      uint64_t v76 = v33;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, cache too large, evicting, size, %lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      uint64_t v34 = a1 + 8;
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v34 = *v30;
      }
      uint64_t v35 = *(void *)(a1 + 72);
      *(_DWORD *)__int16 v62 = 136315394;
      *(void *)&v62[4] = v34;
      __int16 v63 = 2048;
      uint64_t v64 = v35;
      char v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEntryCache<std::string, CLDaemonLocation>::addEntry(const Key_T &, const DataEntry_T &) [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v36);
      if (v36 != buf) {
        free(v36);
      }
    }
    sub_101241978(a1);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  double v37 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v38 = a1 + 8;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v38 = *v30;
    }
    uint64_t v39 = *(void *)(a1 + 72);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *))(*(void *)a1 + 56))(v62, a1, a2);
    int v40 = SHIBYTE(v65);
    uint64_t v41 = *(unsigned char **)v62;
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(void *)a1 + 72))(v58, a1, a3);
    __int16 v42 = v62;
    if (v40 < 0) {
      __int16 v42 = v41;
    }
    char v43 = v58;
    if (v59 < 0) {
      char v43 = (void **)v58[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = v38;
    __int16 v75 = 2048;
    uint64_t v76 = v39;
    __int16 v77 = 2080;
    uint64_t v78 = v42;
    __int16 v79 = 2080;
    char v80 = v43;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, addEntry, end, size, %lu, %s, entry, %s", buf, 0x2Au);
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(*(void **)v62);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v30 = (uint64_t *)*v30;
    }
    uint64_t v44 = *(void *)(a1 + 72);
    (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)a1 + 56))(v58, a1, a2);
    int v45 = v59;
    long long v46 = (void **)v58[0];
    (*(void (**)(void **__return_ptr, uint64_t, _OWORD *))(*(void *)a1 + 72))(v56, a1, a3);
    uint64_t v47 = v58;
    if (v45 < 0) {
      uint64_t v47 = v46;
    }
    if (v57 >= 0) {
      unsigned int v48 = v56;
    }
    else {
      unsigned int v48 = (void **)v56[0];
    }
    *(_DWORD *)__int16 v62 = 136315906;
    *(void *)&v62[4] = v30;
    __int16 v63 = 2048;
    uint64_t v64 = v44;
    __int16 v65 = 2080;
    __int16 v66 = v47;
    __int16 v67 = 2080;
    uint64_t v68 = v48;
    unsigned int v49 = (char *)_os_log_send_and_compose_impl();
    if (v57 < 0) {
      operator delete(v56[0]);
    }
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEntryCache<std::string, CLDaemonLocation>::addEntry(const Key_T &, const DataEntry_T &) [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v49);
    if (v49 != buf) {
      free(v49);
    }
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_10123BB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10123BBF0(uint64_t a1, uint64_t a2)
{
  sub_101235ECC(*(void *)(a1 + 32), 1, *(_DWORD *)(a2 + 4));
  uint64_t v3 = *(void *)(a2 + 296);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  uint64_t result = *(void *)(a2 + 304);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v5();
  }
  return result;
}

void sub_10123BC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102319800);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 32);
    v9[0] = 68290307;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2082;
    long long v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 1025;
    int v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCellTilesManager::removeAllTiles\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"type\":%{private}d}", (uint8_t *)v9, 0x40u);
  }
}

id sub_10123BDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TileCell, deleteAgedTiles, dispatch, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v9 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    int v12 = 136446210;
    uint64_t v13 = v9;
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v7 = *(void **)(v4 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_10123C00C;
  v11[3] = &unk_1022B8680;
  v11[4] = v4;
  void v11[5] = a2;
  v11[6] = *(void *)(a1 + 40);
  return [v7 async:v11];
}

unint64_t sub_10123C00C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = (void *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    *(_DWORD *)std::string buf = 136446466;
    __int16 v10 = v5;
    __int16 v11 = 2050;
    uint64_t v12 = sub_10014D19C(v4 + 184);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TileCell, deleteAgedTiles, start, name, %{public}s, size, %{public}lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    sub_10014D19C(*(void *)(a1 + 40) + 184);
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v6 = *(void *)(a1 + 40) + 184;
  do
  {
    sub_10123C240(v2, *(void *)(a1 + 40), *(double *)(a1 + 48));
    unint64_t result = sub_10014D19C(v6);
  }
  while (result > 0x32);
  return result;
}

uint64_t *sub_10123C240(uint64_t a1, uint64_t a2, double a3)
{
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472;
  void v75[2] = sub_10123CE18;
  v75[3] = &unk_1022F2D48;
  *(double *)&v75[4] = a3;
  v76[0] = mach_absolute_time();
  v76[1] = (uint64_t)v75;
  uint64_t v68 = a2;
  uint64_t v6 = (uint64_t **)(a2 + 184);
  uint64_t v7 = (void *)sub_1000D8908((uint64_t)v6);
  uint64_t v8 = sub_1000B894C((uint64_t)v6);
  if (v7 != (void *)sub_1000B894C((uint64_t)v6))
  {
    uint64_t v9 = 0;
    uint64_t v69 = a1;
    while (1)
    {
      __int16 v10 = v7;
      __int16 v11 = (void *)v7[1];
      uint64_t v12 = v7;
      if (v11)
      {
        do
        {
          uint64_t v7 = v11;
          __int16 v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v12[2];
          BOOL v13 = *v7 == (void)v12;
          uint64_t v12 = v7;
        }
        while (!v13);
      }
      uint64_t v72 = (uint64_t)v10;
      __int16 v14 = (unsigned int *)v10[10];
      double v15 = sub_101045840((uint64_t)v14, a3);
      double v16 = sub_101045834((uint64_t)v14, a3);
      double v17 = fabs(v15);
      BOOL v18 = v17 >= *(double *)(a1 + 136) || v16 >= *(double *)(a1 + 144) || sub_10104D9A8((uint64_t)v14);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      double v19 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v70 = v8;
        __int16 v20 = v6;
        uint64_t v21 = v9;
        uint64_t v22 = *(void *)(a1 + 136);
        unsigned int v23 = *(const char **)(a1 + 144);
        BOOL v24 = sub_10104D9A8((uint64_t)v14);
        (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v14 + 16))(__p, v14);
        long long v25 = __p;
        if (__p[23] < 0) {
          long long v25 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 134219522;
        *(double *)int v85 = v17;
        *(_WORD *)&v85[8] = 2048;
        *(void *)&unsigned char v85[10] = v22;
        *(_WORD *)&v85[18] = 2048;
        *(double *)&v85[20] = v16;
        __int16 v86 = 2048;
        int v87 = v23;
        __int16 v88 = 1024;
        *(_DWORD *)__int16 v89 = v24;
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = v18;
        __int16 v90 = 2080;
        char v91 = v25;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s", buf, 0x40u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v9 = v21;
        uint64_t v6 = v20;
        a1 = v69;
        uint64_t v8 = v70;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        unsigned int v67 = v9;
        uint64_t v71 = v8;
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        uint64_t v34 = *(void *)(a1 + 136);
        uint64_t v33 = *(const char **)(a1 + 144);
        BOOL v35 = sub_10104D9A8((uint64_t)v14);
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)v14 + 16))(v73, v14);
        char v36 = v73;
        if (v74 < 0) {
          char v36 = (void **)v73[0];
        }
        *(_DWORD *)std::string __p = 134219522;
        *(double *)&__p[4] = v17;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v34;
        *(_WORD *)&__p[22] = 2048;
        *(double *)&__p[24] = v16;
        __int16 v78 = 2048;
        __int16 v79 = v33;
        __int16 v80 = 1024;
        *(_DWORD *)long long v81 = v35;
        *(_WORD *)&v81[4] = 1024;
        *(_DWORD *)&v81[6] = v18;
        __int16 v82 = 2080;
        long long v83 = v36;
        double v37 = (char *)_os_log_send_and_compose_impl();
        if (v74 < 0) {
          operator delete(v73[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v37);
        uint64_t v9 = v67;
        uint64_t v8 = v71;
        if (v37 != (char *)buf) {
          free(v37);
        }
        a1 = v69;
        if (!v18)
        {
LABEL_39:
          if (v8 == sub_1000B894C((uint64_t)v6))
          {
            uint64_t v8 = v72;
          }
          else if (v8 != sub_1000B894C((uint64_t)v6) && v17 >= fabs(sub_101045840(*(void *)(v8 + 80), a3)))
          {
            uint64_t v8 = v72;
          }
          goto LABEL_44;
        }
      }
      else if (!v18)
      {
        goto LABEL_39;
      }
      sub_101048104((uint64_t)v14);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v26 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        long long v27 = sub_100147F50(v14[12]);
        double v28 = sub_10013DAC0((uint64_t)(v14 + 12));
        double v29 = sub_10013DA9C((uint64_t)(v14 + 12));
        BOOL v30 = sub_10104D9A8((uint64_t)v14);
        uint64_t v31 = sub_10014D19C((uint64_t)v6);
        *(_DWORD *)std::string buf = 136447235;
        uint64_t v32 = "age";
        if (v30) {
          uint64_t v32 = "corrupt";
        }
        *(void *)int v85 = v27;
        *(_WORD *)&v85[8] = 2049;
        *(double *)&unsigned char v85[10] = v28;
        *(_WORD *)&v85[18] = 2049;
        *(double *)&v85[20] = v29;
        __int16 v86 = 2082;
        int v87 = v32;
        __int16 v88 = 2050;
        *(void *)__int16 v89 = v31 - 1;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, 0x34u);
        a1 = v69;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        uint64_t v38 = sub_100147F50(v14[12]);
        double v39 = sub_10013DAC0((uint64_t)(v14 + 12));
        double v40 = sub_10013DA9C((uint64_t)(v14 + 12));
        BOOL v41 = sub_10104D9A8((uint64_t)v14);
        uint64_t v42 = sub_10014D19C((uint64_t)v6);
        *(_DWORD *)std::string __p = 136447235;
        char v43 = "age";
        if (v41) {
          char v43 = "corrupt";
        }
        *(void *)&__p[4] = v38;
        *(_WORD *)&unsigned char __p[12] = 2049;
        *(double *)&__p[14] = v39;
        *(_WORD *)&__p[22] = 2049;
        *(double *)&__p[24] = v40;
        __int16 v78 = 2082;
        __int16 v79 = v43;
        __int16 v80 = 2050;
        *(void *)long long v81 = v42 - 1;
        uint64_t v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v44);
        a1 = v69;
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
      sub_1008B3890(v6, v72);
      uint64_t v9 = (v9 + 1);
LABEL_44:
      if (v7 == (void *)sub_1000B894C((uint64_t)v6)) {
        goto LABEL_53;
      }
    }
  }
  LODWORD(v9) = 0;
LABEL_53:
  if (v8 != sub_1000B894C((uint64_t)v6) && (unint64_t)sub_10014D19C((uint64_t)v6) >= 0x33)
  {
    uint64_t v45 = *(void *)(v8 + 80);
    if (sub_10014548C(v45))
    {
      sub_101048104(v45);
      LODWORD(v9) = v9 + 1;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    long long v46 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = v8;
      unsigned int v48 = sub_100147F50(*(_DWORD *)(v45 + 48));
      double v49 = sub_10013DAC0(v45 + 48);
      double v50 = sub_10013DA9C(v45 + 48);
      uint64_t v51 = sub_10014D19C((uint64_t)v6);
      *(_DWORD *)std::string buf = 136446979;
      *(void *)int v85 = v48;
      *(_WORD *)&v85[8] = 2049;
      *(double *)&unsigned char v85[10] = v49;
      *(_WORD *)&v85[18] = 2049;
      *(double *)&v85[20] = v50;
      __int16 v86 = 2050;
      int v87 = (const char *)(v51 - 1);
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", buf, 0x2Au);
      uint64_t v8 = v47;
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      uint64_t v59 = v8;
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      unsigned int v61 = *(_DWORD *)(v45 + 48);
      uint64_t v60 = v45 + 48;
      __int16 v62 = sub_100147F50(v61);
      double v63 = sub_10013DAC0(v60);
      double v64 = sub_10013DA9C(v60);
      uint64_t v65 = sub_10014D19C((uint64_t)v6);
      *(_DWORD *)std::string __p = 136446979;
      *(void *)&__p[4] = v62;
      *(_WORD *)&unsigned char __p[12] = 2049;
      *(double *)&__p[14] = v63;
      *(_WORD *)&__p[22] = 2049;
      *(double *)&__p[24] = v64;
      __int16 v78 = 2050;
      __int16 v79 = (const char *)(v65 - 1);
      __int16 v66 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v66);
      if (v66 != (char *)buf) {
        free(v66);
      }
      uint64_t v8 = v59;
    }
    sub_1008B3890(v6, v8);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  int v52 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v53 = sub_10014D19C((uint64_t)v6);
    uint64_t v54 = v68 + 8;
    if (*(char *)(v68 + 31) < 0) {
      uint64_t v54 = *(void *)(v68 + 8);
    }
    *(_DWORD *)std::string buf = 67240707;
    *(_DWORD *)int v85 = v9;
    *(_WORD *)&v85[4] = 2050;
    *(void *)&v85[6] = v53;
    *(_WORD *)&v85[14] = 2081;
    *(void *)&v85[16] = v54;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "TileCell, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v56 = sub_10014D19C((uint64_t)v6);
    uint64_t v57 = *(void *)(v68 + 8);
    if (*(char *)(v68 + 31) >= 0) {
      uint64_t v57 = v68 + 8;
    }
    *(_DWORD *)std::string __p = 67240707;
    *(_DWORD *)&__p[4] = v9;
    *(_WORD *)&__p[8] = 2050;
    *(void *)&__p[10] = v56;
    *(_WORD *)&__p[18] = 2081;
    *(void *)&__p[20] = v57;
    __int16 v58 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v58);
    if (v58 != (char *)buf) {
      free(v58);
    }
  }
  return sub_1000E0900(v76);
}

void sub_10123CDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_10123CE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102319800);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2082;
    BOOL v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCellTilesManager::agedTileDeleter\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

void sub_10123CF50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 40);
  double v4 = (*(double (**)(void))(**(void **)(v3 + 368) + 16))(*(void *)(v3 + 368))
     - *(double *)(*(void *)(a1 + 48) + 76);
  double v5 = *(double *)(v3 + 152);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  double v6 = v4 + 60.0;
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(char *)(a2 + 31) >= 0 ? a2 + 8 : *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(v2 + 56);
    int v10 = *(unsigned __int8 *)(v2 + 64);
    uint64_t v11 = sub_10014D19C(a2 + 184);
    uint64_t v12 = sub_1008B42D8(a2 + 184);
    sub_1000AB340(*(void *)(v2 + 48));
    BOOL v13 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136316930;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v131 = 2080;
    *(void *)&long long v132 = v9;
    WORD4(v132) = 1024;
    *(_DWORD *)((char *)&v132 + 10) = v10;
    HIWORD(v132) = 2048;
    *(double *)int v133 = v6;
    *(_WORD *)&v133[8] = 1024;
    BOOL v134 = v6 < v5;
    __int16 v135 = 2048;
    uint64_t v136 = v11;
    __int16 v137 = 2048;
    uint64_t v138 = v12;
    __int16 v139 = 2080;
    long long v140 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s", buf, 0x4Au);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    if (*(char *)(a2 + 31) >= 0) {
      uint64_t v92 = a2 + 8;
    }
    else {
      uint64_t v92 = *(void *)(a2 + 8);
    }
    uint64_t v93 = *(void *)(v2 + 56);
    int v94 = *(unsigned __int8 *)(v2 + 64);
    uint64_t v95 = sub_10014D19C(a2 + 184);
    uint64_t v96 = sub_1008B42D8(a2 + 184);
    sub_1000AB340(*(void *)(v2 + 48));
    if (SHIBYTE(v120[2]) >= 0) {
      long long v97 = v120;
    }
    else {
      long long v97 = (void **)v120[0];
    }
    *(_DWORD *)std::string __p = 136316930;
    *(void *)&__p[4] = v92;
    *(_WORD *)&unsigned char __p[12] = 2080;
    *(void *)&__p[14] = v93;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&__p[24] = v94;
    *(_WORD *)&__p[28] = 2048;
    *(double *)int v122 = v6;
    *(_WORD *)&v122[8] = 1024;
    BOOL v123 = v6 < v5;
    __int16 v124 = 2048;
    uint64_t v125 = v95;
    __int16 v126 = 2048;
    uint64_t v127 = v96;
    __int16 v128 = 2080;
    unsigned int v129 = v97;
    uint64_t v98 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v120[2]) < 0) {
      operator delete(v120[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v98);
    if (v98 != buf) {
      free(v98);
    }
  }
  if (v6 < v5)
  {
    if (*(unsigned char *)(v2 + 64))
    {
      uint64_t v14 = a2 + 184;
      sub_1008B4338(a2 + 184);
      uint64_t v15 = (void *)sub_1000D8908(a2 + 184);
      uint64_t v16 = sub_1000B894C(a2 + 184);
      if (v15 != (void *)v16)
      {
        uint64_t v17 = (void *)v16;
        __int16 v18 = (mach_header_64 *)&_mh_execute_header;
        double v19 = "CellTile, tile ptr is NULL, #CloneMe";
        uint64_t v114 = v16;
        while (1)
        {
          __int16 v20 = (unsigned int *)v15[10];
          if (!v20) {
            break;
          }
          if (sub_10014548C(v15[10]))
          {
            if (!sub_10104CF14((double *)v20, *(void *)(v2 + 48), *(float *)(a2 + 144)))
            {
              if (sub_10104CC50((uint64_t)v20, *(unsigned __int8 *)(v3 + 128))) {
                goto LABEL_27;
              }
              sub_1008B403C(v14, v20 + 12);
              ++*(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1023197C0);
              }
              long long v25 = qword_1024193A8;
              if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
              {
                (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v20 + 16))(buf, v20);
                uint64_t v26 = buf;
                if (SBYTE9(v132) < 0) {
                  uint64_t v26 = *(unsigned char **)buf;
                }
                *(_DWORD *)std::string __p = 136380675;
                *(void *)&__p[4] = v26;
                _os_log_impl(v18, v25, OS_LOG_TYPE_ERROR, "CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", __p, 0xCu);
                if (SBYTE9(v132) < 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_27;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1023197C0);
              }
              (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v20 + 16))(__p, v20);
              long long v27 = __p;
              if (__p[23] < 0) {
                long long v27 = *(unsigned char **)__p;
              }
              LODWORD(v120[0]) = 136380675;
              *(void **)((char *)v120 + 4) = v27;
              double v28 = (char *)_os_log_send_and_compose_impl();
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              goto LABEL_49;
            }
            if (!sub_10104A2AC((uint64_t)v20))
            {
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1023197C0);
              }
              double v29 = qword_1024193A8;
              if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
              {
                (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v20 + 16))(buf, v20);
                uint64_t v30 = v2;
                uint64_t v31 = v3;
                uint64_t v32 = v14;
                uint64_t v33 = v18;
                uint64_t v34 = v19;
                int v35 = SBYTE9(v132);
                char v36 = *(unsigned char **)buf;
                uint64_t v37 = v32;
                uint64_t v38 = sub_1008B42D8(v32);
                *(_DWORD *)std::string __p = 136380931;
                double v39 = buf;
                if (v35 < 0) {
                  double v39 = v36;
                }
                *(void *)&__p[4] = v39;
                *(_WORD *)&unsigned char __p[12] = 2050;
                *(void *)&__p[14] = v38;
                __int16 v18 = v33;
                _os_log_impl(v33, v29, OS_LOG_TYPE_ERROR, "CellTile, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe", __p, 0x16u);
                if (SBYTE9(v132) < 0) {
                  operator delete(*(void **)buf);
                }
                double v19 = v34;
                uint64_t v14 = v37;
                uint64_t v3 = v31;
                uint64_t v2 = v30;
                uint64_t v17 = (void *)v114;
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_27;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1023197C0);
              }
              (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v20 + 16))(__p, v20);
              double v40 = v18;
              int v41 = __p[23];
              uint64_t v42 = *(unsigned char **)__p;
              char v43 = (void *)sub_1008B42D8(v14);
              LODWORD(v120[0]) = 136380931;
              uint64_t v44 = __p;
              if (v41 < 0) {
                uint64_t v44 = v42;
              }
              *(void **)((char *)v120 + 4) = v44;
              WORD2(v120[1]) = 2050;
              *(void **)((char *)&v120[1] + 6) = v43;
              __int16 v18 = v40;
              double v28 = (char *)_os_log_send_and_compose_impl();
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
LABEL_49:
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v28);
LABEL_69:
              if (v28 != buf) {
                free(v28);
              }
              goto LABEL_27;
            }
            sub_1008B403C(v14, v20 + 12);
            ++*(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
          }
LABEL_27:
          uint64_t v22 = (void *)v15[1];
          if (v22)
          {
            do
            {
              unsigned int v23 = v22;
              uint64_t v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              unsigned int v23 = (void *)v15[2];
              BOOL v24 = *v23 == (void)v15;
              uint64_t v15 = v23;
            }
            while (!v24);
          }
          uint64_t v15 = v23;
          if (v23 == v17) {
            goto LABEL_179;
          }
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        uint64_t v21 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(v18, v21, OS_LOG_TYPE_ERROR, v19, buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_27;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        *(_WORD *)std::string __p = 0;
        double v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v28);
        goto LABEL_69;
      }
      goto LABEL_179;
    }
    memset(v120, 0, 24);
    uint64_t v57 = a2 + 184;
    sub_1008B42CC(a2 + 184, (uint64_t *)__p);
    __int16 v58 = *(unsigned int **)__p;
    if (*(unsigned char **)__p == &__p[8])
    {
LABEL_167:
      sub_10014F400((uint64_t)__p, *(char **)&__p[8]);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      uint64_t v76 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        uint64_t v77 = *(void *)(a2 + 8);
        int v78 = *(char *)(a2 + 31);
        int v79 = *(unsigned __int8 *)(v2 + 64);
        uint64_t v80 = sub_10014D19C(v57);
        if (v78 >= 0) {
          uint64_t v81 = a2 + 8;
        }
        else {
          uint64_t v81 = v77;
        }
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = v81;
        __int16 v131 = 1026;
        LODWORD(v132) = v79;
        WORD2(v132) = 1026;
        *(_DWORD *)((char *)&v132 + 6) = 0;
        WORD5(v132) = 1026;
        HIDWORD(v132) = 0;
        *(_WORD *)int v133 = 2050;
        *(void *)&v133[2] = v80;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "CellTile, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu", buf, 0x28u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        uint64_t v108 = *(void *)(a2 + 8);
        int v109 = *(char *)(a2 + 31);
        int v110 = *(unsigned __int8 *)(v2 + 64);
        uint64_t v111 = sub_10014D19C(v57);
        if (v109 >= 0) {
          uint64_t v112 = a2 + 8;
        }
        else {
          uint64_t v112 = v108;
        }
        *(_DWORD *)std::string __p = 136447234;
        *(void *)&__p[4] = v112;
        *(_WORD *)&unsigned char __p[12] = 1026;
        *(_DWORD *)&__p[14] = v110;
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = 0;
        *(_WORD *)&__p[24] = 1026;
        *(_DWORD *)&__p[26] = 0;
        *(_WORD *)int v122 = 2050;
        *(void *)&v122[2] = v111;
        int v113 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v113);
        if (v113 != buf) {
          free(v113);
        }
      }
      __int16 v82 = (unsigned int *)v120[0];
      long long v83 = (unsigned int *)v120[1];
      while (v82 != v83)
      {
        sub_1008B3B1C(v57, v82);
        v82 += 12;
      }
      *(void *)std::string buf = v120;
      sub_10014FEE0((void ***)buf);
      goto LABEL_179;
    }
    while (1)
    {
      uint64_t v59 = sub_100144000(v57, v58 + 8);
      uint64_t v60 = (double *)v59;
      if (!v59)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        uint64_t v65 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "CellTile, tile ptr is NULL, #CloneMe", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023197C0);
          }
          *(_WORD *)uint64_t v116 = 0;
          __int16 v66 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v66);
          if (v66 != buf) {
            free(v66);
          }
        }
        goto LABEL_137;
      }
      if (sub_10014548C(v59))
      {
        if (!sub_10104CF14(v60, *(void *)(v2 + 48), *(float *)(a2 + 144)))
        {
          if (sub_10104CC50((uint64_t)v60, *(unsigned __int8 *)(v3 + 128)))
          {
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1023197E0);
            }
            unsigned int v61 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)v60 + 16))(buf, v60);
              __int16 v62 = buf;
              if (SBYTE9(v132) < 0) {
                __int16 v62 = *(unsigned char **)buf;
              }
              *(_DWORD *)uint64_t v116 = 136315138;
              *(void *)&v116[4] = v62;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, location moved, locking tileid, %s", v116, 0xCu);
              if (SBYTE9(v132) < 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_1023197E0);
              }
              (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)v60 + 16))(v116, v60);
              uint64_t v71 = v116;
              if (v117 < 0) {
                uint64_t v71 = *(unsigned char **)v116;
              }
              int v118 = 136315138;
              uint64_t v119 = v71;
              uint64_t v72 = (char *)_os_log_send_and_compose_impl();
              if (v117 < 0) {
                operator delete(*(void **)v116);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v72);
              if (v72 != buf) {
                free(v72);
              }
            }
            double v63 = (char *)v120[1];
            if (v120[1] >= v120[2])
            {
              double v64 = (void *)sub_10014F734((uint64_t *)v120, (long long *)v58 + 2);
            }
            else
            {
              sub_10014F6C0((uint64_t)v120, (long long *)v58 + 2);
              double v64 = v63 + 48;
            }
            v120[1] = v64;
            goto LABEL_137;
          }
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023197C0);
          }
          unsigned int v67 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)v60 + 16))(buf, v60);
            uint64_t v68 = buf;
            if (SBYTE9(v132) < 0) {
              uint64_t v68 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v116 = 136380675;
            *(void *)&v116[4] = v68;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "CellTile, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", v116, 0xCu);
            if (SBYTE9(v132) < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023197C0);
            }
            (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)v60 + 16))(v116, v60);
            uint64_t v73 = v116;
            if (v117 < 0) {
              uint64_t v73 = *(unsigned char **)v116;
            }
            int v118 = 136380675;
            uint64_t v119 = v73;
            char v74 = (char *)_os_log_send_and_compose_impl();
            if (v117 < 0) {
              operator delete(*(void **)v116);
            }
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v74);
            if (v74 != buf) {
              free(v74);
            }
          }
        }
        ++*(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
      }
LABEL_137:
      uint64_t v69 = (unsigned int *)*((void *)v58 + 1);
      if (v69)
      {
        do
        {
          uint64_t v70 = v69;
          uint64_t v69 = *(unsigned int **)v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          uint64_t v70 = (unsigned int *)*((void *)v58 + 2);
          BOOL v24 = *(void *)v70 == (void)v58;
          __int16 v58 = v70;
        }
        while (!v24);
      }
      __int16 v58 = v70;
      if (v70 == (unsigned int *)&__p[8]) {
        goto LABEL_167;
      }
    }
  }
  uint64_t v45 = a2 + 184;
  sub_1008B42CC(a2 + 184, (uint64_t *)__p);
  long long v46 = *(unsigned int **)__p;
  if (*(unsigned char **)__p == &__p[8])
  {
    sub_10014F400((uint64_t)__p, **(char ***)__p);
  }
  else
  {
    int v47 = 1;
    do
    {
      uint64_t v48 = sub_100144000(v45, v46 + 8);
      uint64_t v49 = v48;
      if (v48)
      {
        BOOL v50 = sub_10014548C(v48);
        if ((v50 & v47) == 1) {
          int v47 = sub_10104CC50(v49, *(unsigned __int8 *)(v3 + 128));
        }
        else {
          v47 &= !v50;
        }
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        uint64_t v51 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "CellTile, tile ptr is NULL, #CloneMe", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023197C0);
          }
          LOWORD(v120[0]) = 0;
          int v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v52);
          if (v52 != buf) {
            free(v52);
          }
        }
      }
      uint64_t v53 = (unsigned int *)*((void *)v46 + 1);
      if (v53)
      {
        do
        {
          uint64_t v54 = v53;
          uint64_t v53 = *(unsigned int **)v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          uint64_t v54 = (unsigned int *)*((void *)v46 + 2);
          BOOL v24 = *(void *)v54 == (void)v46;
          long long v46 = v54;
        }
        while (!v24);
      }
      long long v46 = v54;
    }
    while (v54 != (unsigned int *)&__p[8]);
    sub_10014F400((uint64_t)__p, *(char **)&__p[8]);
    if ((v47 & 1) == 0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      char v55 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "CellTile, Unable to lock all unprotected files!, #CloneMe", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023197C0);
        }
        *(_WORD *)std::string __p = 0;
        uint64_t v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v56);
        if (v56 != buf) {
          free(v56);
        }
      }
      goto LABEL_179;
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  __int16 v75 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, clearing unprotected map", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    *(_WORD *)std::string __p = 0;
    long long v107 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v107);
    if (v107 != buf) {
      free(v107);
    }
  }
  sub_1008B4338(v45);
LABEL_179:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  uint64_t v84 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 31) >= 0) {
      uint64_t v85 = a2 + 8;
    }
    else {
      uint64_t v85 = *(void *)(a2 + 8);
    }
    uint64_t v86 = sub_10014D19C(a2 + 184);
    int v87 = *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v85;
    __int16 v131 = 2048;
    *(void *)&long long v132 = v86;
    WORD4(v132) = 1024;
    *(_DWORD *)((char *)&v132 + 10) = v87;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    if (*(char *)(a2 + 31) >= 0) {
      uint64_t v99 = a2 + 8;
    }
    else {
      uint64_t v99 = *(void *)(a2 + 8);
    }
    uint64_t v100 = sub_10014D19C(a2 + 184);
    int v101 = *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v99;
    *(_WORD *)&unsigned char __p[12] = 2048;
    *(void *)&__p[14] = v100;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&__p[24] = v101;
    unsigned int v102 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v102);
    if (v102 != buf) {
      free(v102);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  __int16 v88 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 31) >= 0) {
      uint64_t v89 = a2 + 8;
    }
    else {
      uint64_t v89 = *(void *)(a2 + 8);
    }
    int v90 = *(unsigned __int8 *)(v2 + 64);
    uint64_t v91 = sub_10014D19C(a2 + 184);
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v89;
    __int16 v131 = 1026;
    LODWORD(v132) = v90;
    WORD2(v132) = 2050;
    *(void *)((char *)&v132 + 6) = v91;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu\n", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    if (*(char *)(a2 + 31) >= 0) {
      uint64_t v103 = a2 + 8;
    }
    else {
      uint64_t v103 = *(void *)(a2 + 8);
    }
    int v104 = *(unsigned __int8 *)(v2 + 64);
    uint64_t v105 = sub_10014D19C(a2 + 184);
    *(_DWORD *)std::string __p = 136446722;
    *(void *)&__p[4] = v103;
    *(_WORD *)&unsigned char __p[12] = 1026;
    *(_DWORD *)&__p[14] = v104;
    *(_WORD *)&__p[18] = 2050;
    *(void *)&__p[20] = v105;
    int v106 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v106);
    if (v106 != buf) {
      free(v106);
    }
  }
}

void sub_10123E98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  a42 = &a25;
  sub_10014FEE0((void ***)&a42);
  _Unwind_Resume(a1);
}

void sub_10123EA3C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 168) || *(double *)(a1 + 196) >= 0.0)
  {
    double v8 = vabdd_f64((*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368)), *(double *)(a1 + 252));
    double v9 = *(double *)(a1 + 152);
    double v10 = v9 - v8 + 20.0;
    double v11 = v9 * 0.170000002;
    if (v10 > v11) {
      double v12 = v10;
    }
    else {
      double v12 = v11;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    BOOL v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      sub_1000AB340(a1 + 176);
      uint64_t v14 = v24 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v29 = a2;
      __int16 v30 = 2048;
      double v31 = v8;
      __int16 v32 = 2048;
      double v33 = v12;
      __int16 v34 = 2080;
      int v35 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TileTimer, schedule, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s", buf, 0x2Au);
      if (SHIBYTE(v24) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      sub_1000AB340(a1 + 176);
      if (v20 >= 0) {
        uint64_t v17 = &v19;
      }
      else {
        uint64_t v17 = v19;
      }
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = a2;
      __int16 v22 = 2048;
      double v23 = v8;
      __int16 v24 = 2048;
      double v25 = v12;
      __int16 v26 = 2080;
      long long v27 = v17;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      if (v20 < 0) {
        operator delete(v19);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::scheduleExpiredLocationTimer(const char *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v15 = *(void *)(a1 + 168);
    double v16 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
    sub_1001165F8(v15, v12 + v16);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    double v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v5 = *(double *)(a1 + 196) < 0.0;
      *(_DWORD *)std::string buf = 67240192;
      LODWORD(v29) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileTimer, skip, location, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023197C0);
      }
      BOOL v6 = *(double *)(a1 + 196) < 0.0;
      *(_DWORD *)std::string __p = 67240192;
      *(_DWORD *)&__p[4] = v6;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellTilesManager::scheduleExpiredLocationTimer(const char *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_10123EEA8(id a1)
{
  sub_10053B99C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign((std::string *)&qword_1024867E0, [[+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"tiles_cell"] UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10123EF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10123EF48(id a1)
{
}

BOOL sub_10123EF5C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023197C0);
  }
  double v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileSched, cell, called, %{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023197C0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCellTilesManager::onScheduledTileDownloadsCallback(CLTileDownloadReachabilityRequirement)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  double v5 = (*(double (**)(void))(**(void **)(a1 + 368) + 16))(*(void *)(a1 + 368));
  return sub_101234620(a1, v5);
}

BOOL sub_10123F13C(uint64_t a1, uint64_t a2)
{
  return sub_10123EF5C(a1 - 112, a2);
}

void sub_10123F144()
{
}

void sub_10123F200(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10123F23C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_102319A08;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    double v12 = a3;
  }
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

id sub_10123F320(uint64_t a1)
{
  id v2 = [+[CLServiceVendor sharedInstance] proxyForService:@"CLCellTilesManager"];

  return [v2 syncgetDoSync:a1];
}

void sub_10123F36C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023197A0);
      }
      double v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        double v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        double v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1023197A0);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10123F5FC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10123F6B0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10123F6F8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10123F740(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10123F788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102477160);
}

BOOL sub_10123F7B4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          double v23 = (uint64_t *)v17;
        }
        else {
          double v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          double v28 = (uint64_t *)v24;
        }
        else {
          double v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)int v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)std::string buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        memset(&buf[4], 0, 48);
        *(_OWORD *)std::string __p = 0u;
        long long v46 = 0u;
        char v47 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101243248();
        }
        if (SBYTE11(v46) < 0) {
          operator delete(*(void **)((char *)__p + 4));
        }
        if (SBYTE3(__p[0]) < 0) {
          operator delete(*(void **)&buf[32]);
        }
        if ((buf[31] & 0x80000000) != 0) {
          operator delete(*(void **)&buf[8]);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)int v41 = a1 + 64;
        char v29 = byte_102477161;
        int v38 = v16;
        *(void *)std::string buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)std::string buf = &v38;
        __int16 v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v31 = (std::__shared_weak_count *)v30[9];
        _OWORD v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)std::string buf = &v38;
        double v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023197A0);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023197A0);
    }
    char v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      char v36 = (void *)*v36;
    }
    *(_DWORD *)int v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = v40;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_10123FCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10123FCC8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023197A0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023197A0);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10123FF4C(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023197A0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  double v28 = __p;
                }
                else {
                  double v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023197A0);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  __int16 v30 = buf;
                }
                else {
                  __int16 v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                double v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101240320(uint64_t a1, int *a2, uint64_t a3)
{
  sub_10124261C(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1012403B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1012403CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  char v9 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (SBYTE11(v8) < 0) {
    operator delete(*(void **)((char *)__p + 4));
  }
  if (SBYTE3(__p[0]) < 0) {
    operator delete(*(void **)((char *)&v6[1] + 4));
  }
  if (SBYTE3(v6[1]) < 0) {
    operator delete(*(void **)((char *)v5 + 4));
  }
}

void sub_101240474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101240488(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023197A0);
  }
  char v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    _OWORD v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_10124261C(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_10124205C();
  }
  os_activity_scope_leave(&state);
}

void sub_101240A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101240AA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023197A0);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023197A0);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023197A0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023197A0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        char v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1023197A0);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023197A0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                char v9 = v15;
              }
              while (!v16);
            }
            char v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101241058(uint64_t a1)
{
  sub_1012431D8(a1);

  operator delete();
}

id sub_101241090(uint64_t a1, int a2, void *a3)
{
  id result = sub_1012427F8(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1012410E0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101241110(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101241140(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101241170(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1012411A0(uint64_t a1, long long *a2, uint64_t a3, char a4, double a5)
{
  *(void *)a1 = off_102319910;
  uint64_t v9 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)v9, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *(void *)(v9 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v9 = v10;
  }
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = a4;
  *(double *)(a1 + 48) = a5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  return a1;
}

void sub_101241250(uint64_t a1)
{
  sub_101241908(a1);

  operator delete();
}

void sub_101241288(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  id v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v3 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a1 + 72);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v9 = v3;
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, clear, size, %lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEntryCache<std::string, CLDaemonLocation>::clear() [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1000DB264(a1 + 56, *(char **)(a1 + 64));
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 64) = 0;
  int v6 = *(char **)(a1 + 88);
  uint64_t v5 = (void *)(a1 + 88);
  *(v5 - 2) = 0;
  sub_10078A7B0((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  *uint64_t v5 = 0;
  v5[1] = 0;
}

uint64_t *sub_1012414A4(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1023197E0);
  }
  id v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v3 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a1 + 72);
    *(_DWORD *)std::string buf = 136315394;
    long long v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, deleteAgedEntries, size, %lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1023197E0);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEntryCache<std::string, CLDaemonLocation>::deleteAgedEntries() [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_101241978(a1);
}

uint64_t sub_101241698()
{
  sub_10010F274((uint64_t)v5);
  char v4 = 48;
  uint64_t v0 = sub_10006E19C(v6, &v4);
  uint64_t v1 = *v0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 - 24) + 24) = 12;
  *(_DWORD *)((char *)v0 + *(void *)(v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v0 + *(void *)(v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v0 + *(void *)(v1 - 24) + 8) |= 0x4000u;
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v2;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101241898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1012418B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    return sub_1000DC48C((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
  }
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return result;
}

void sub_1012418E0(std::string *a1@<X8>)
{
}

uint64_t sub_101241908(uint64_t a1)
{
  *(void *)a1 = off_102319910;
  sub_101241288(a1);
  sub_10078A7B0(a1 + 80, *(char **)(a1 + 88));
  sub_1000DB264(a1 + 56, *(char **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t *sub_101241978(uint64_t a1)
{
  id result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v4 = *(void *)(a1 + 80);
    char v36 = (uint64_t **)(a1 + 80);
    if (v4 != a1 + 88)
    {
      char v35 = (void *)(a1 + 8);
      do
      {
        uint64_t v5 = *(void **)(v4 + 8);
        int v6 = (void *)v4;
        if (v5)
        {
          do
          {
            char v7 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            char v7 = (void *)v6[2];
            BOOL v8 = *v7 == (void)v6;
            int v6 = v7;
          }
          while (!v8);
        }
        if (vabdd_f64(Current, *(double *)(v4 + 32)) < *(double *)(a1 + 48)) {
          break;
        }
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        __int16 v9 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = (void *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0) {
            uint64_t v10 = (void *)*v35;
          }
          double v11 = *(double *)(v4 + 32);
          uint64_t v12 = *(void *)(a1 + 72);
          uint64_t v13 = *(void *)(a1 + 32);
          (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 56))(__p, a1, v4 + 40);
          uint64_t v14 = __p;
          if (v42 < 0) {
            uint64_t v14 = *(unsigned char **)__p;
          }
          *(_DWORD *)std::string buf = 136316162;
          uint64_t v49 = v10;
          __int16 v50 = 2048;
          double v51 = Current - v11;
          __int16 v52 = 2048;
          uint64_t v53 = v12;
          __int16 v54 = 2048;
          uint64_t v55 = v13;
          __int16 v56 = 2080;
          uint64_t v57 = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, evict, aged, age, %.1lf, size, %lu, %lu, key, %s", buf, 0x34u);
          if (SHIBYTE(v42) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1023197E0);
          }
          int v15 = (void *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0) {
            int v15 = (void *)*v35;
          }
          double v16 = *(double *)(v4 + 32);
          uint64_t v17 = *(void *)(a1 + 72);
          uint64_t v18 = *(void *)(a1 + 32);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 56))(v37, a1, v4 + 40);
          int v19 = v37;
          if (v38 < 0) {
            int v19 = (void **)v37[0];
          }
          *(_DWORD *)std::string __p = 136316162;
          *(void *)&__p[4] = v15;
          __int16 v40 = 2048;
          double v41 = Current - v16;
          __int16 v42 = 2048;
          uint64_t v43 = v17;
          __int16 v44 = 2048;
          uint64_t v45 = v18;
          __int16 v46 = 2080;
          char v47 = v19;
          uint64_t v20 = (char *)_os_log_send_and_compose_impl();
          if (v38 < 0) {
            operator delete(v37[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEntryCache<std::string, CLDaemonLocation>::evict() [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        sub_1001055EC((uint64_t **)(a1 + 56), (const void **)(v4 + 40));
        sub_10006DA20(v36, v4);
        uint64_t v4 = (uint64_t)v7;
      }
      while (v7 != (void *)(a1 + 88));
    }
    unint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    id result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (v21 > (unint64_t)result)
    {
      BOOL v22 = *v36;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1023197E0);
      }
      __int16 v23 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        BOOL v24 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          BOOL v24 = (void *)*v24;
        }
        double v25 = *((double *)v22 + 4);
        uint64_t v26 = *(void *)(a1 + 72);
        uint64_t v27 = *(void *)(a1 + 32);
        (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 56))(__p, a1, v22 + 5);
        if (v42 >= 0) {
          double v28 = __p;
        }
        else {
          double v28 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 136316162;
        uint64_t v49 = v24;
        __int16 v50 = 2048;
        double v51 = Current - v25;
        __int16 v52 = 2048;
        uint64_t v53 = v26;
        __int16 v54 = 2048;
        uint64_t v55 = v27;
        __int16 v56 = 2080;
        uint64_t v57 = v28;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CACHE: name, %s, evict, size, age, %.1lf, size, %lu, %lu, key, %s", buf, 0x34u);
        if (SHIBYTE(v42) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1023197E0);
        }
        char v29 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          char v29 = (void *)*v29;
        }
        double v30 = *((double *)v22 + 4);
        uint64_t v31 = *(void *)(a1 + 72);
        uint64_t v32 = *(void *)(a1 + 32);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 56))(v37, a1, v22 + 5);
        if (v38 >= 0) {
          double v33 = v37;
        }
        else {
          double v33 = (void **)v37[0];
        }
        *(_DWORD *)std::string __p = 136316162;
        *(void *)&__p[4] = v29;
        __int16 v40 = 2048;
        double v41 = Current - v30;
        __int16 v42 = 2048;
        uint64_t v43 = v31;
        __int16 v44 = 2048;
        uint64_t v45 = v32;
        __int16 v46 = 2080;
        char v47 = v33;
        __int16 v34 = (char *)_os_log_send_and_compose_impl();
        if (v38 < 0) {
          operator delete(v37[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEntryCache<std::string, CLDaemonLocation>::evict() [Key_T = std::string, DataEntry_T = CLDaemonLocation]", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      sub_1001055EC((uint64_t **)(a1 + 56), (const void **)v22 + 5);
      return sub_10006DA20(v36, (uint64_t)v22);
    }
  }
  return result;
}

void sub_10124205C()
{
}

void sub_10124210C()
{
}

void sub_101242130(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1012427F8(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          double v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_101242524(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  uint64_t v32 = (uint64_t *)v27;
                }
                else {
                  uint64_t v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      __int16 v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      __int16 v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  uint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      uint64_t v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023197A0);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                double v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  double v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023197A0);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                char v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCellTilesManager_Type::Notification, NotificationData_T = CLCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_101242524(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    char v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1012427F8(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void *sub_10124261C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  id result = sub_101242678(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101242664(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101242678(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102319998;
  sub_100D1A970((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1012426C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1012426D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102319998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1012426F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102319998;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101242748(uint64_t a1)
{
  sub_100C55D44((uint64_t)&v1, a1 + 24);
}

uint64_t sub_101242774(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

id sub_1012427F8(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_101242858(a1);
}

id sub_101242858(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023199D8);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAEF8FLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCellTilesManager_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023199D8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAEF8FLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1023199D8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_101242C18(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101242C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v9 = *(double *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 24);
  }
  uint64_t v5 = a1 + 80;
  int v6 = (uint64_t *)(a1 + 88);
  while (1)
  {
    char v7 = sub_101242D60(v5, &v9, (uint64_t)&v9);
    if (v8) {
      break;
    }
    double v9 = v9 + -10.0;
  }
  if (v6 == v7)
  {
    sub_101AA9220();
    abort_report_np();
    __break(1u);
  }
  else
  {
    *(void *)(a3 + 160) = v7;
    if (SHIBYTE(v11) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_101242D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_101242D60(uint64_t a1, double *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    double v6 = *a2;
    while (1)
    {
      while (1)
      {
        char v7 = (uint64_t **)v4;
        double v8 = *((double *)v4 + 4);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = (uint64_t *)v4[1];
      if (!v4)
      {
        uint64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    sub_101242E14(a1, a3, (uint64_t)&v10);
    sub_1000EDF90((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

void *sub_101242E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  void v6[4] = *(void *)a2;
  id result = v6 + 5;
  if (*(char *)(a2 + 31) < 0)
  {
    id result = sub_1000DC48C(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)id result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_101242EA4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10078A750(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_101242EC0(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  double v6 = (uint64_t **)sub_10014F4E4((uint64_t)a1, &v9, a2);
  id result = *v6;
  if (!*v6)
  {
    sub_101242F58((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_101242F58@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  char v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 2);
  *((_OWORD *)v6 + 2) = **a2;
  *((void *)v6 + 6) = v8;
  id result = v6 + 56;
  if (*((char *)v7 + 47) < 0)
  {
    id result = sub_1000DC48C(result, *((void **)v7 + 3), *((void *)v7 + 4));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)v7 + 24);
    *((void *)v6 + 9) = *((void *)v7 + 5);
    *(_OWORD *)id result = v10;
  }
  *((void *)v6 + 10) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_101242FF4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1008B4750(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_101243010(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  double v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v9, a2);
  id result = *v6;
  if (!*v6)
  {
    sub_1012430A8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

char *sub_1012430A8@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = (char *)operator new(0xE0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  id result = sub_10124312C(v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_101243110(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_10124312C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  *((_DWORD *)__dst + 6) = 0xFFFF;
  *(void *)(__dst + 36) = 0;
  *(void *)(__dst + 28) = 0;
  *(_OWORD *)(__dst + 44) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(__dst + 60) = _Q0;
  *(_OWORD *)(__dst + 76) = _Q0;
  *(_OWORD *)(__dst + 92) = _Q0;
  *((_DWORD *)__dst + 27) = 0;
  *((void *)__dst + 15) = 0;
  *((void *)__dst + 16) = 0;
  *((void *)__dst + 14) = 0xBFF0000000000000;
  *((_DWORD *)__dst + 34) = 0;
  *(void *)(__dst + 140) = 0xBFF0000000000000;
  *((_DWORD *)__dst + 37) = 0x7FFFFFFF;
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  *((void *)__dst + 19) = 0;
  __dst[176] = 0;
  *((void *)__dst + 23) = 0;
  return __dst;
}

uint64_t sub_1012431D8(uint64_t a1)
{
  *(void *)a1 = off_102319A08;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101243248()
{
}

void sub_1012432F8()
{
}

uint64_t sub_10124331C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_1012433A0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101243420()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1012434B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1012434C8()
{
  sub_100134750(qword_1024867B0, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024867B0, (void *)&_mh_execute_header);
}

void sub_101243528(uint64_t a1, void *a2)
{
  id v2 = sub_10103F874(a1, a2);
  *id v2 = off_102319A30;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  sub_1010A1DA8((uint64_t)(v2 + 18));
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102319B18);
  }
  long long v3 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "PAUSE: Constructing CLAutopauseProviderConcrete", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLAutopauseProviderConcrete::CLAutopauseProviderConcrete(id<CLIntersiloUniverse>)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100681630();
}

void sub_1012438F8(_Unwind_Exception *a1)
{
  sub_1010A1E24(v2);
  uint64_t v5 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v3;
  *long long v3 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_10103F960(v1);
  _Unwind_Resume(a1);
}

void sub_1012439C0(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102319B38);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAutopauseProviderConcrete::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102319B38);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAutopauseProviderConcrete::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101244754(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101243B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101243B9C(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102319B38);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAutopauseProviderConcrete::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102319B38);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAutopauseProviderConcrete::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101244CAC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101243D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101243D78(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102319B38);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAutopauseProviderConcrete::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102319B38);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      __int16 v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAutopauseProviderConcrete::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_101244F8C(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_101243F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101243F4C(uint64_t a1)
{
  return sub_101243F54(*(id **)(a1 + 32));
}

uint64_t sub_101243F54(id *a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102319B18);
  }
  id v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "PAUSE: Autopause provider has no location updates for 15 minutes.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    __int16 v5 = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onLocationTimer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [a1[17] setNextFireDelay:1.79769313e308];
  __int16 v5 = 257;
  char v6 = 1;
  *(_DWORD *)std::string buf = 0;
  return (*((uint64_t (**)(id *, uint8_t *, __int16 *, uint64_t, uint64_t, void))*a1 + 19))(a1, buf, &v5, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_10124414C(uint64_t a1)
{
  *(void *)a1 = off_102319A30;
  sub_101244278(a1);
  [*(id *)(a1 + 136) invalidate];

  *(void *)(a1 + 136) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  sub_1010A1E24((void *)(a1 + 144));
  uint64_t v2 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return sub_10103F960(a1);
}

id sub_101244278(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102319B18);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "PAUSE: Stopping auto-pause monitoring.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::stopMonitoringPauseState()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(*(void *)(a1 + 120) + 16) unregister:*(void *)(*(void *)(a1 + 120) + 8) forNotification:4];
  [*(id *)(*(void *)(a1 + 112) + 16) unregister:*(void *)(*(void *)(a1 + 112) + 8) forNotification:2];
  [*(id *)(*(void *)(a1 + 128) + 16) unregister:*(void *)(*(void *)(a1 + 128) + 8) forNotification:2];
  [*(id *)(*(void *)(a1 + 128) + 16) unregister:*(void *)(*(void *)(a1 + 128) + 8) forNotification:3];
  *(_DWORD *)std::string buf = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)a1 + 120))(a1, buf);
  sub_1010A1E60(a1 + 144);
  return [*(id *)(a1 + 136) setNextFireDelay:1.79769313e308];
}

void sub_101244498(uint64_t a1)
{
  sub_10124414C(a1);

  operator delete();
}

id sub_1012444D0(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102319B18);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "PAUSE: Starting auto-pause monitoring.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::startMonitoringPauseState()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(*(void *)(a1 + 120) + 16) register:*(void *)(*(void *)(a1 + 120) + 8) forNotification:4 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 112) + 16) register:*(void *)(*(void *)(a1 + 112) + 8) forNotification:2 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 128) + 16) register:*(void *)(*(void *)(a1 + 128) + 8) forNotification:2 registrationInfo:0];
  [*(id *)(*(void *)(a1 + 128) + 16) register:*(void *)(*(void *)(a1 + 128) + 8) forNotification:3 registrationInfo:0];
  return [*(id *)(a1 + 136) setNextFireDelay:900.0];
}

uint64_t sub_1012446C4(uint64_t a1)
{
  int v3 = 0;
  if (sub_1001072EC(a1, &v3, 1)) {
    sub_1012444D0(a1);
  }
  return 1;
}

uint64_t sub_10124470C(uint64_t a1)
{
  int v3 = 0;
  if (!sub_1001072EC(a1, &v3, 1)) {
    sub_101244278(a1);
  }
  return 1;
}

id sub_101244754(id result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    uint64_t v5 = (uint64_t)result;
    char v6 = *(int **)(a4 + 800);
    if (v6 && sub_1010FB9FC(v6))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102319B18);
      }
      uint64_t v7 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = sub_1010FB9FC(*(int **)(a4 + 800));
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "PAUSE: Batched notification response in auto-pause with %zu locations.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102319B18);
        }
        sub_1010FB9FC(*(int **)(a4 + 800));
        char v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      id result = (id)sub_1010FB9FC(*(int **)(a4 + 800));
      if (result)
      {
        for (unint64_t i = 0; i < (unint64_t)result; ++i)
        {
          sub_1010FB258(*(void *)(a4 + 800), i, (uint64_t)buf);
          sub_1012449BC(v5, (uint64_t)buf);
          id result = (id)sub_1010FB9FC(*(int **)(a4 + 800));
        }
      }
    }
    else
    {
      return sub_1012449BC(v5, a4);
    }
  }
  return result;
}

id sub_1012449BC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 202);
  int v5 = *(unsigned __int8 *)(a1 + 201);
  int v6 = *(unsigned __int8 *)(a1 + 200);
  char v16 = 0;
  sub_1010A2AB8(a1 + 144, (_OWORD *)a2, &v16);
  id result = (id)sub_1010A1FA8(*(_DWORD *)(a2 + 96));
  if (result) {
    id result = [*(id *)(a1 + 136) setNextFireDelay:900.0];
  }
  if (v16)
  {
    BOOL v8 = v4 != 0;
    int v9 = *(unsigned __int8 *)(a1 + 202);
    int v10 = *(unsigned __int8 *)(a1 + 201);
    if (v8 == (*(unsigned char *)(a1 + 202) != 0))
    {
      char v13 = (v5 != 0) ^ (v10 != 0);
      int v11 = *(unsigned __int8 *)(a1 + 200);
      if ((v13 & 1) == 0 && (v6 != 0) == (*(unsigned char *)(a1 + 200) != 0)) {
        return result;
      }
    }
    else
    {
      int v11 = *(unsigned __int8 *)(a1 + 200);
    }
    v15[0] = *(unsigned char *)(a1 + 202);
    v15[1] = v10;
    _OWORD v15[2] = v11;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    uint64_t v12 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109632;
      int v24 = v11;
      __int16 v25 = 1024;
      int v26 = v10;
      __int16 v27 = 1024;
      int v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "PAUSE: Pause state changed, notifying - fitness: %d navigation: %d other: %d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102319B18);
      }
      int v17 = 67109632;
      int v18 = v11;
      __int16 v19 = 1024;
      int v20 = v10;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onLocationNotificationHelper(const CLDaemonLocation &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
    *(_DWORD *)std::string buf = 0;
    return (id)(*(uint64_t (**)(uint64_t, uint8_t *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v15, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_101244CAC(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  if (*a3 >= 2)
  {
    if (*a3 == 2)
    {
      uint64_t v8 = a1 + 144;
      *(void *)std::string buf = CFAbsoluteTimeGetCurrent();
      sub_1010A2178(v8, (unint64_t *)buf, a4, a4 + 1);
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    int v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *a3;
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning PAUSE: Unknown notification %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    int v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a3;
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning PAUSE: unexpected notification %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_18:
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
        return;
      }
LABEL_20:
      dispatch_once(&qword_102419630, &stru_102319B18);
      goto LABEL_18;
    }
  }
}

id *sub_101244F8C(id *result, uint64_t a2, _DWORD *a3)
{
  int v3 = result;
  if (*a3 == 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    int v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "PAUSE: got kNotificationWake.", buf, 2u);
    }
    double v5 = 900.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102319B18);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    if (*a3 != 2) {
      return result;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102319B18);
    }
    int v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PAUSE: got kNotificationSleep.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102319B18);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseProviderConcrete::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    double v5 = 1.79769313e308;
  }
  return (id *)[v3[17] setNextFireDelay:v5];
}

void sub_10124528C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1012452BC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1012452EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DAEFE0;
      v0[3] = unk_101DAEFF0;
      v0[4] = xmmword_101DAF000;
      v0[0] = xmmword_101DAEFC0;
      v0[1] = unk_101DAEFD0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1012453CC(_Unwind_Exception *a1)
{
}

BOOL sub_101245554(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1) {
        break;
      }
      if ((v6 >> 3) == 2)
      {
        uint64_t v12 = &OBJC_IVAR___ALSMeta__productId;
LABEL_21:
        String = (void *)PBReaderReadString();

        *(void *)(a1 + *v12) = String;
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = &OBJC_IVAR___ALSMeta__softwareBuild;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

char *sub_101245CF8(uint64_t a1, uint64_t a2, void *a3)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id result = (char *)[a3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (result)
  {
    unint64_t v6 = result;
    uint64_t v7 = *(void *)v10;
    do
    {
      char v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(a3);
        }
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        ++v8;
      }
      while (v6 != v8);
      id result = (char *)[a3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      unint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_101245E40(id a1, NSString *a2, CLFallLogger *a3)
{
}

void sub_101245E94(id a1, NSString *a2, CLFallLogger *a3)
{
}

id sub_101245FC8(uint64_t a1, uint64_t a2, void *a3)
{
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_101246068;
  v9[3] = &unk_102319BE8;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  _OWORD v9[4] = a2;
  void v9[5] = v7;
  void v9[6] = *(void *)(a1 + 32);
  return [a3 flushInMemoryDataWithCompletionQueue:v6 completionBlock:v9];
}

void sub_101246068(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    id v4 = [[*(id *)(a1 + 40) objectForKeyedSubscript:];
    if (a2)
    {
      if (!v4) {
        [*(id *)(a1 + 40) setObject:a2 forKeyedSubscript:*(void *)(a1 + 32)];
      }
    }
  }
  unsigned int v5 = *(NSObject **)(a1 + 48);

  dispatch_group_leave(v5);
}

void *sub_10124613C(void *result)
{
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v2 = result;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v3 = [[*(id *)(v1 + 16) objectForKeyedSubscript:+[CLFallLoggerManager loggerDataTypeString:](CLFallLoggerManager, "loggerDataTypeString:", *((unsigned __int8 *)result + 48), 0)];
    id result = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (result)
    {
      id v4 = result;
      uint64_t v5 = *(void *)v8;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v3);
          }
          [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) logData:v2[5]];
          uint64_t v6 = (void *)((char *)v6 + 1);
        }
        while (v4 != v6);
        id result = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
        id v4 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_101246B20(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_101246B50()
{
  sub_100134750(qword_102486830, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486830, (void *)&_mh_execute_header);
}

double sub_101246BB0(_OWORD *a1)
{
  double result = -1.0;
  *a1 = xmmword_101D1C320;
  a1[1] = xmmword_101D1C320;
  a1[2] = xmmword_101D1C320;
  return result;
}

double sub_101246BC4(uint64_t a1, void *a2, double *a3, unsigned char *a4, void *a5)
{
  *a4 = 0;
  *a5 = 0xBFF0000000000000;
  double result = *a3;
  if (*a3 >= 0.0)
  {
    if (*(double *)a2 >= 0.0)
    {
      *(double *)(a1 + 16) = result;
      *(void *)(a1 + 24) = *a2;
      double result = *(double *)a2;
      double v10 = *(double *)(a1 + 8);
      if (*(double *)a1 >= 0.0 && result < v10)
      {
        double result = -1.0;
        *(_OWORD *)(a1 + 32) = xmmword_101D1C320;
        *(_OWORD *)a1 = xmmword_101D1C320;
      }
      else if (result - v10 >= 0.9)
      {
        double result = result - *(double *)(a1 + 40);
        if (result >= 1.5)
        {
          *a4 = 1;
          *(_OWORD *)a1 = *(_OWORD *)(a1 + 16);
          double result = *(double *)a1;
          *a5 = *(void *)a1;
        }
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102319CD8);
    }
    long long v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *a2;
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,SpeedFilter,%{public}.1lf,unexpected,vehicleSpeed < 0", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102319CD8);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleSpeedFilter::update(const CFAbsoluteTime &, const double &, BOOL &, double &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return result;
}

void sub_101246E14(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101247398()
{
}

void sub_1012473BC(uint64_t a1, int *a2, unsigned char *a3, void *a4)
{
  if (*a2 == 5)
  {
    if (!*a3)
    {
      [a4 setSession:0];
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102319CF8);
    }
    uint64_t v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a2;
      *(_DWORD *)std::string buf = 67109120;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Received unhandled notification, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102319CF8);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void onCompanionNotification_bounce(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &, void *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

id sub_1012475CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onOdometerNotification:a2 data:a3];
}

id sub_1012475DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onMotionStateNotification:a2 data:a3];
}

void sub_10124805C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10124808C()
{
}

uint64_t sub_101248138(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_101248158()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DAF088;
      v0[3] = unk_101DAF098;
      v0[4] = xmmword_101DAF0A8;
      v0[0] = xmmword_101DAF068;
      v0[1] = unk_101DAF078;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101248238(_Unwind_Exception *a1)
{
}

uint64_t sub_101248250()
{
  sub_100134750(qword_102486848, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102486848, (void *)&_mh_execute_header);
}

void sub_1012482B0(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102319D18);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLProactiveLocStats,submitStats()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102319D18);
    }
    uint64_t v77 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v77);
    if (v77 != (char *)buf) {
      free(v77);
    }
  }
  if (*(double *)(a1 + 48) >= 1.0 && *(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 120))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102319D18);
    }
    id v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = *(double *)(a1 + 112);
      int v5 = *(_DWORD *)(a1 + 120);
      unsigned int v6 = *(double *)(a1 + 48);
      int v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)std::string buf = 67240960;
      *(_DWORD *)uint64_t v99 = v4;
      *(_WORD *)&v99[4] = 1026;
      *(_DWORD *)&v99[6] = v5;
      *(_WORD *)uint64_t v100 = 1026;
      *(_DWORD *)&v100[2] = v7;
      *(_WORD *)int v101 = 1026;
      *(_DWORD *)&v101[2] = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,Overall,APWakeDur,%{public}d,APWakeCnt,%{public}d,sessCnt,%{public}d,gnssSec,%{public}d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102319D18);
      }
      int v79 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v79);
      if (v79 != (char *)buf) {
        free(v79);
      }
    }
    LODWORD(v9) = *(_DWORD *)(a1 + 120);
    LODWORD(v8) = *(_DWORD *)(a1 + 124);
    *(double *)&uint64_t v10 = (double)v9;
    double v11 = (double)v8 * 100.0 / *(double *)&v10;
    uint64_t v12 = *(void *)(a1 + 128);
    v13.i64[0] = v12;
    v13.i64[1] = HIDWORD(v12);
    float64x2_t v14 = vdivq_f64(vmulq_f64(vcvtq_f64_u64(v13), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL)), (float64x2_t)vdupq_lane_s64(v10, 0));
    int64x2_t v15 = (int64x2_t)vcvtq_u64_f64(v14);
    LODWORD(v14.f64[0]) = *(_DWORD *)(a1 + 136);
    double v16 = (double)*(unint64_t *)&v14.f64[0] * 100.0 / *(double *)&v10;
    if (qword_102419380 != -1)
    {
      int64x2_t v97 = v15;
      dispatch_once(&qword_102419380, &stru_102319D18);
      int64x2_t v15 = v97;
    }
    int32x2_t v96 = vmovn_s64(v15);
    int v17 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240960;
      *(_DWORD *)uint64_t v99 = v11;
      *(_WORD *)&v99[4] = 1026;
      *(_DWORD *)&v99[6] = v96.i32[0];
      *(_WORD *)uint64_t v100 = 1026;
      *(_DWORD *)&v100[2] = v96.i32[1];
      *(_WORD *)int v101 = 1026;
      *(_DWORD *)&v101[2] = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,AP WakeDuration sec,percentage,[-,10),%{public}d,[10,20),%{public}d,[20,30),%{public}d,[30,+),%{public}d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102319D18);
      }
      uint64_t v80 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v80);
      if (v80 != (char *)buf) {
        free(v80);
      }
    }
    LODWORD(v18) = *(_DWORD *)(a1 + 80);
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
    LODWORD(v19) = *(_DWORD *)(a1 + 16);
    double v20 = (double)v19;
    double v21 = (double)v18 * 100.0 / v20;
    uint64_t v22 = *(void *)(a1 + 84);
    v23.i64[0] = v22;
    v23.i64[1] = HIDWORD(v22);
    float64x2_t v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0);
    int64x2_t v25 = (int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v29), v24));
    uint64_t v26 = *(void *)(a1 + 92);
    v23.i64[0] = v26;
    v23.i64[1] = HIDWORD(v26);
    float64x2_t v27 = vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v29), v24);
    int64x2_t v28 = (int64x2_t)vcvtq_u64_f64(v27);
    LODWORD(v27.f64[0]) = *(_DWORD *)(a1 + 100);
    LODWORD(v29.f64[0]) = *(_DWORD *)(a1 + 104);
    double v30 = (double)*(unint64_t *)&v27.f64[0] * 100.0 / v20;
    double v31 = (double)*(unint64_t *)&v29.f64[0] * 100.0 / v20;
    if (qword_102419380 != -1)
    {
      double v95 = (double)*(unint64_t *)&v29.f64[0] * 100.0 / v20;
      int64x2_t v90 = v28;
      int64x2_t v93 = v25;
      dispatch_once(&qword_102419380, &stru_102319D18);
      int64x2_t v28 = v90;
      int64x2_t v25 = v93;
      double v31 = v95;
    }
    int32x2_t v94 = vmovn_s64(v25);
    int32x2_t v92 = vmovn_s64(v28);
    unsigned int v32 = v31;
    uint64_t v33 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67241728;
      *(_DWORD *)uint64_t v99 = v21;
      *(_WORD *)&v99[4] = 1026;
      *(_DWORD *)&v99[6] = v94.i32[0];
      *(_WORD *)uint64_t v100 = 1026;
      *(_DWORD *)&v100[2] = v94.i32[1];
      *(_WORD *)int v101 = 1026;
      *(_DWORD *)&v101[2] = v92.i32[0];
      __int16 v102 = 1026;
      unsigned int v103 = v92.u32[1];
      __int16 v104 = 1026;
      *(_DWORD *)uint64_t v105 = v30;
      *(_WORD *)&v105[4] = 1026;
      *(_DWORD *)&v105[6] = v32;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,Intersession min, percentage,[-,3),%{public}d,[3,5),%{public}d,[5,10),%{public}d,[10,15),%{public}d,[15,20),%{public}d,[20,30),%{public}d,[30,+),%{public}d", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102319D18);
      }
      uint64_t v81 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v81);
      if (v81 != (char *)buf) {
        free(v81);
      }
    }
    LODWORD(v35) = *(_DWORD *)(a1 + 16);
    LODWORD(v34) = *(_DWORD *)(a1 + 20);
    *(double *)&unint64_t v36 = (double)v34 * 100.0;
    *(double *)&uint64_t v37 = (double)v35;
    double v38 = *(double *)&v36 / (double)v35;
    LODWORD(v36) = *(_DWORD *)(a1 + 32);
    LODWORD(v35) = *(_DWORD *)(a1 + 36);
    double v39 = (double)v36 * 100.0 / *(double *)&v37;
    uint64_t v40 = *(void *)(a1 + 40);
    v41.i64[0] = v40;
    v41.i64[1] = HIDWORD(v40);
    float64x2_t v42 = (float64x2_t)vdupq_lane_s64(v37, 0);
    float64x2_t v43 = vdivq_f64(vmulq_f64(vcvtq_f64_u64(v41), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL)), v42);
    int64x2_t v44 = (int64x2_t)vcvtq_u64_f64(v43);
    LODWORD(v42.f64[0]) = *(_DWORD *)(a1 + 24);
    LODWORD(v43.f64[0]) = *(_DWORD *)(a1 + 28);
    double v45 = (double)*(unint64_t *)&v43.f64[0] * 100.0 / *(double *)&v37;
    double v46 = (double)v35 * 100.0 / *(double *)&v37;
    double v47 = (double)*(unint64_t *)&v42.f64[0] * 100.0 / *(double *)&v37;
    if (qword_102419380 != -1)
    {
      double v91 = v45;
      double v86 = v46;
      double v88 = v47;
      int64x2_t v85 = v44;
      dispatch_once(&qword_102419380, &stru_102319D18);
      int64x2_t v44 = v85;
      double v47 = v88;
      double v46 = v86;
      double v45 = v91;
    }
    unsigned int v48 = v45;
    int32x2_t v89 = vmovn_s64(v44);
    unsigned int v49 = v46;
    unsigned int v50 = v47;
    double v51 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67241728;
      *(_DWORD *)uint64_t v99 = v38;
      *(_WORD *)&v99[4] = 1026;
      *(_DWORD *)&v99[6] = v39;
      *(_WORD *)uint64_t v100 = 1026;
      *(_DWORD *)&v100[2] = v89.i32[1];
      *(_WORD *)int v101 = 1026;
      *(_DWORD *)&v101[2] = v89.i32[0];
      __int16 v102 = 1026;
      unsigned int v103 = v48;
      __int16 v104 = 1026;
      *(_DWORD *)uint64_t v105 = v49;
      *(_WORD *)&v105[4] = 1026;
      *(_DWORD *)&v105[6] = v50;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,Session percentage,converged,%{public}d,APSleep,%{public}d,LocSrvDisabled,%{public}d,lpm,%{public}d,timeout,%{public}d,visitEnd,%{public}d,noYield,%{public}d", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102319D18);
      }
      __int16 v82 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v82);
      if (v82 != (char *)buf) {
        free(v82);
      }
    }
    unsigned int v53 = *(_DWORD *)(a1 + 20);
    if (v53)
    {
      LODWORD(v52) = *(_DWORD *)(a1 + 56);
      float64x2_t v54 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      unsigned int v55 = ((double)v52 * 100.0 / (double)v53);
      long long v56 = *(_OWORD *)(a1 + 60);
      v57.i64[0] = v56;
      v57.i64[1] = DWORD1(v56);
      float64x2_t v58 = vcvtq_f64_u64(v57);
      v57.i64[0] = DWORD2(v56);
      v57.i64[1] = HIDWORD(v56);
      float64x2_t v59 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v53), 0);
      int32x4_t v60 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v58, v54), v59)), (int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v57), v54), v59)));
      int32x4_t v87 = v60;
      v60.i32[0] = *(_DWORD *)(a1 + 76);
      unsigned int v61 = ((double)v60.u64[0] * 100.0 / (double)v53);
    }
    else
    {
      unsigned int v55 = 0;
      unsigned int v61 = 0;
      int32x4_t v87 = 0u;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102319D18);
    }
    __int16 v66 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67241472;
      *(_DWORD *)uint64_t v99 = v55;
      *(_WORD *)&v99[4] = 1026;
      *(_DWORD *)&v99[6] = v87.i32[0];
      *(_WORD *)uint64_t v100 = 1026;
      *(_DWORD *)&v100[2] = v87.i32[1];
      *(_WORD *)int v101 = 1026;
      *(_DWORD *)&v101[2] = v87.i32[2];
      __int16 v102 = 1026;
      unsigned int v103 = v87.u32[3];
      __int16 v104 = 1026;
      *(_DWORD *)uint64_t v105 = v61;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,Converged session sec, percentage,[-,3),%{public}d,[3,5),%{public}d,[5,8),%{public}d,[8,10),%{public}d,[10,15),%{public}d,[15,+),%{public}d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102319D18);
      }
      long long v83 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v83);
      if (v83 != (char *)buf) {
        free(v83);
      }
    }
    AnalyticsSendEventLazy();
    float v67 = vaddv_f32(*(float32x2_t *)(a1 + 160)) + *(float *)(a1 + 168);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102319D18);
    }
    uint64_t v68 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v69 = *(_DWORD *)(a1 + 140);
      int v70 = *(_DWORD *)(a1 + 144);
      int v71 = *(_DWORD *)(a1 + 148);
      int v72 = *(_DWORD *)(a1 + 152);
      unsigned int v73 = *(_DWORD *)(a1 + 156);
      double v74 = *(float *)(a1 + 160);
      double v75 = *(float *)(a1 + 164);
      double v76 = *(float *)(a1 + 168);
      *(_DWORD *)std::string buf = 67242240;
      *(_DWORD *)uint64_t v99 = v69;
      *(_WORD *)&v99[4] = 1026;
      *(_DWORD *)&v99[6] = v70;
      *(_WORD *)uint64_t v100 = 1026;
      *(_DWORD *)&v100[2] = v71;
      *(_WORD *)int v101 = 1026;
      *(_DWORD *)&v101[2] = v72;
      __int16 v102 = 1026;
      unsigned int v103 = v73;
      __int16 v104 = 2050;
      *(double *)uint64_t v105 = v74;
      *(_WORD *)&v105[8] = 2050;
      double v106 = v75;
      __int16 v107 = 2050;
      double v108 = v76;
      __int16 v109 = 2050;
      double v110 = v67;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,PerformanceMetrics,cntVisitExitSuccessfulPredict,%{public}d,cntVisitExitUnSuccessfulPredict,%{public}d,cntVisitExitMissedPredict,%{public}d,maxVisitExitPullInSec,%{public}d,avgVisitExitPullInSec,%{public}d,APSleepDurationLT2minSec,%{public}0.2f,APSleepDurationGT2minLT5minSec,%{public}0.2f,APSleepDurationGT5minSec,%{public}0.2f,APSleepDurationTotalSec,%{public}0.2f,", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102319D18);
      }
      uint64_t v84 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v84);
      if (v84 != (char *)buf) {
        free(v84);
      }
    }
    AnalyticsSendEventLazy();
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102319D18);
    }
    __int16 v62 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v63 = *(void *)(a1 + 48);
      int v64 = *(_DWORD *)(a1 + 16);
      int v65 = *(_DWORD *)(a1 + 120);
      *(_DWORD *)std::string buf = 134349568;
      *(void *)uint64_t v99 = v63;
      *(_WORD *)&v99[8] = 1026;
      *(_DWORD *)uint64_t v100 = v64;
      *(_WORD *)&v100[4] = 1026;
      *(_DWORD *)int v101 = v65;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,CA,small or invalid data,CA submit skipped,activeSec,%{public}0.2f,numSess,%{public}d,numApWake,%{public}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102319D18);
      }
      int v78 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocationStats::submitStats() const", "%s\n", v78);
      if (v78 != (char *)buf) {
        free(v78);
      }
    }
  }
}

NSDictionary *sub_1012494A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"DailyAPWakeDurationSeconds";
  v5[0] = +[NSNumber numberWithUnsignedInt:*(double *)(v2 + 112)];
  v4[1] = @"DailyCountAPWakes";
  v5[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 120)];
  void v4[2] = @"DailyCountGNSSSessions";
  void v5[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 16)];
  _OWORD v4[3] = @"DailyGNSSLocationReqActiveSec";
  _OWORD v5[3] = +[NSNumber numberWithUnsignedInt:*(double *)(v2 + 48)];
  unsigned char v4[4] = @"PercentageIntersessionTime10to15min";
  void v5[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  void v4[5] = @"PercentageIntersessionTime15to20min";
  void v5[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
  void v4[6] = @"PercentageIntersessionTime20to30min";
  void v5[6] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  v4[7] = @"PercentageIntersessionTime3To5min";
  void v5[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 52)];
  unsigned char v4[8] = @"PercentageIntersessionTime5to10min";
  v5[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)];
  v4[9] = @"PercentageIntersessionTimeLessThan3min";
  v5[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 60)];
  v4[10] = @"PercentageIntersessionTimeMoreThan30min";
  v5[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
  v4[11] = @"PercentAPWakeDuration10To20Sec";
  v5[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 68)];
  v4[12] = @"PercentAPWakeDuration20To30Sec";
  v5[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  v4[13] = @"PercentAPWakeDurationLessThan10Sec";
  v5[13] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 76)];
  v4[14] = @"PercentAPWakeDurationMoreThan30Sec";
  v5[14] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
  v4[15] = @"PercentConvergedGNSSSessionDuration10To15Sec";
  v5[15] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 84)];
  v4[16] = @"PercentConvergedGNSSSessionDuration3To5Sec";
  v5[16] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
  v4[17] = @"PercentConvergedGNSSSessionDuration5To8Sec";
  v5[17] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 92)];
  v4[18] = @"PercentConvergedGNSSSessionDuration8To10Sec";
  v5[18] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)];
  v4[19] = @"PercentConvergedGNSSSessionDurationLessThan3Sec";
  v5[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 100)];
  v4[20] = @"PercentConvergedGNSSSessionDurationMoreThan15Sec";
  v5[20] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 104)];
  v4[21] = @"PercentGNSSSessionConverged";
  v5[21] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 108)];
  v4[22] = @"PercentGNSSSessionIncompleteAPSleep";
  v5[22] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 112)];
  v4[23] = @"PercentGNSSSessionIncompleteLocSrvcDisabled";
  v5[23] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 116)];
  v4[24] = @"PercentGNSSSessionIncompleteLowPowerMode";
  v5[24] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 120)];
  v4[25] = @"PercentGNSSSessionIncompleteTimeout";
  v5[25] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 124)];
  v4[26] = @"PercentGNSSSessionIncompleteVisitEnd";
  v5[26] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 128)];
  v4[27] = @"PercentGNSSSessionNoYield";
  v5[27] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 132)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:28];
}

NSDictionary *sub_10124983C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  v4[0] = @"DailyEarlyVisitExitPredictionAverage";
  v5[0] = +[NSNumber numberWithUnsignedInt:v2[39]];
  v4[1] = @"DailyEarlyVisitExitPredictionMax";
  v5[1] = +[NSNumber numberWithUnsignedInt:v2[38]];
  void v4[2] = @"DailyMissedVisitExitPredictionCount";
  void v5[2] = +[NSNumber numberWithUnsignedInt:v2[37]];
  _OWORD v4[3] = @"DailyPercentAPSleep2To5min";
  _OWORD v5[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  unsigned char v4[4] = @"DailyPercentAPSleepLessThan2min";
  void v5[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
  void v4[5] = @"DailyPercentAPSleepMoreThan5min";
  void v5[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  void v4[6] = @"DailySuccessfulVisitExitPredictionCount";
  void v5[6] = +[NSNumber numberWithUnsignedInt:v2[35]];
  v4[7] = @"DailyTotalAPSleepDurationSec";
  void v5[7] = +[NSNumber numberWithUnsignedInt:*(float *)(a1 + 52)];
  unsigned char v4[8] = @"DailyUnsuccessfulVisitExitPredictionCount";
  v5[8] = +[NSNumber numberWithUnsignedInt:v2[36]];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:9];
}

void sub_1012499B8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101249DB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v1)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v4 = *(void *)(v1 + 144);
    sub_1001CAEBC(v4, v3.__d_.__rep_, v2);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    int v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "ignoring indoor error - shutting down", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLPipelineXPCBounce indoorDidFailWithError:]_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_10124A024(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
    std::chrono::steady_clock::now();
    sub_1001CAA9C(*(void *)(v1 + 144), v2);
    uint64_t v3 = *(void *)(v1 + 144);
    sub_1001CB30C(v3);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ignoring indoor is uncertain - shutting down", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLPipelineXPCBounce indoorIsUncertainWithLocation:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_10124A20C(uint64_t a1, int a2, uint64_t a3)
{
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_1001CAA9C(*(void *)(a1 + 144), a3);
  if (a2 == 1)
  {
    uint64_t v8 = *(void *)(a1 + 144);
    sub_1001CB554(v8, v6.__d_.__rep_);
  }
  else if (!a2)
  {
    uint64_t v7 = *(void *)(a1 + 144);
    sub_1001CB30C(v7);
  }
}

void sub_10124A338(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 40);
    sub_10124A20C(v2, 1, v3);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ignoring indoor give up - shutting down", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLPipelineXPCBounce indoorGivesUpWithLocation:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_10124B084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_10124B0EC(uint64_t a1)
{
  v4[0] = @"cell";
  v3[0] = @"provider";
  v3[1] = @"flow";
  uint64_t v1 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v1 = (void *)*v1;
  }
  void v3[2] = @"island";
  v4[1] = +[NSString stringWithUTF8String:v1];
  void v4[2] = @"null";
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_10124B1A4(uint64_t a1)
{
  v4[0] = @"cell";
  v3[0] = @"provider";
  v3[1] = @"flow";
  uint64_t v1 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v1 = (void *)*v1;
  }
  void v3[2] = @"island";
  v4[1] = +[NSString stringWithUTF8String:v1];
  void v4[2] = @"sentinel";
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

void sub_10124B25C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 8))
  {
    sub_1000DB3D4((uint64_t)buf);
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2)
    {
      [v2 location];
      uint64_t v3 = *(void **)(a1 + 40);
      long long v28 = *(_OWORD *)&__src[96];
      long long v29 = *(_OWORD *)&__src[112];
      v30[0] = *(_OWORD *)&__src[128];
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)&__src[140];
      long long v24 = *(_OWORD *)&__src[32];
      long long v25 = *(_OWORD *)&__src[48];
      long long v26 = *(_OWORD *)&__src[64];
      long long v27 = *(_OWORD *)&__src[80];
      *(_OWORD *)std::string buf = *(_OWORD *)__src;
      long long v23 = *(_OWORD *)&__src[16];
      if (v3)
      {
        [v3 locationPrivate];
LABEL_16:
        sub_1000789AC((uint64_t)__src, (uint64_t)v13);
        memcpy(v31, __src, 0x201uLL);
        long long v6 = v15;
        long long v15 = 0u;
        uint64_t v7 = (std::__shared_weak_count *)*((void *)&v32 + 1);
        long long v32 = v6;
        if (v7)
        {
          sub_1000DB0A0(v7);
          long long v37 = v20;
          *(_OWORD *)double v38 = *(_OWORD *)v21;
          *(void *)&v38[13] = *(void *)&v21[13];
          long long v33 = v16;
          long long v34 = v17;
          long long v35 = v18;
          long long v36 = v19;
          if (*((void *)&v15 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v15 + 1));
          }
        }
        else
        {
          long long v37 = v20;
          *(_OWORD *)double v38 = *(_OWORD *)v21;
          *(void *)&v38[13] = *(void *)&v21[13];
          long long v33 = v16;
          long long v34 = v17;
          long long v35 = v18;
          long long v36 = v19;
        }
        v38[20] = 0;
        v31[3] = 0;
        uint64_t v8 = *(void **)(a1 + 40);
        if (v8)
        {
          [v8 diagnosticReport];
          uint64_t v8 = *(void **)(a1 + 40);
        }
        else
        {
          memset(__src, 0, 136);
        }
        long long v48 = *(_OWORD *)&__src[80];
        long long v49 = *(_OWORD *)&__src[96];
        long long v50 = *(_OWORD *)&__src[112];
        long long v44 = *(_OWORD *)&__src[16];
        long long v45 = *(_OWORD *)&__src[32];
        long long v46 = *(_OWORD *)&__src[48];
        long long v47 = *(_OWORD *)&__src[64];
        uint64_t v51 = *(void *)&__src[128];
        long long v43 = *(_OWORD *)__src;
        id v9 = [v8 requestsGpsAssistance];
        uint64_t v10 = *(void **)(a1 + 40);
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
        sub_100134750(__src, [v10 locationId]);
        v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        sub_1001CEE50(*(void *)(v11 + 144), v12.__d_.__rep_, (uint64_t)buf, (uint64_t)v9);
        if ((__src[23] & 0x80000000) != 0) {
          operator delete(*(void **)__src);
        }

        if (v42) {
          sub_1000DB0A0(v42);
        }
        if (v41 < 0) {
          operator delete(__p);
        }
        if (v39) {
          sub_1000DB0A0(v39);
        }
        if (*((void *)&v32 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v32 + 1));
        }
        return;
      }
    }
    else
    {
      memset(v30, 0, 28);
      long long v29 = 0u;
      long long v28 = 0u;
      long long v27 = 0u;
      long long v26 = 0u;
      long long v25 = 0u;
      long long v24 = 0u;
      long long v23 = 0u;
      *(_OWORD *)std::string buf = 0u;
    }
    bzero(v13, 0x230uLL);
    goto LABEL_16;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ignoring location update - shutting down", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    *(_WORD *)__src = 0;
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLPipelineXPCBounce indoorDidUpdateToLocation:fromLocation:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10124B640(_Unwind_Exception *a1)
{
}

uint64_t sub_10124B6EC(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10124B77C;
  void v3[3] = &unk_10229FEB0;
  void v3[4] = a1;
  void v3[5] = a2;
  if (qword_102486878 != -1) {
    dispatch_once(&qword_102486878, v3);
  }
  return qword_102486880;
}

void sub_10124B77C()
{
}

void sub_10124B7C8()
{
}

void sub_10124B7EC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (void *)sub_1006B766C(a1, "pipeline", a2);
  *uint64_t v4 = off_102319D48;
  v4[15] = off_102319F60;
  v4[16] = off_10231A050;
  v4[17] = a3;
  operator new();
}

void sub_10124BCE0(_Unwind_Exception *a1)
{
  sub_1000F5BB0((uint64_t)(v1 + 85), *v5);
  sub_1000F5BB0((uint64_t)(v1 + 82), *v4);
  sub_1011E9B58(v1 + 81);
  sub_1005C3B7C(v3);
  uint64_t v7 = v1[47];
  v1[47] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[46];
  v1[46] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  id v9 = v1 + 44;
  uint64_t v10 = v1[45];
  v1[45] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *v9;
  *id v9 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_1015766A0(v2);
  uint64_t v12 = v1[24];
  v1[24] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v1[23];
  v1[23] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v1[22];
  v1[22] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = v1[21];
  v1[21] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v1[18];
  v1[18] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  sub_1006B7BEC(v1);
  _Unwind_Resume(a1);
}

void sub_10124BF24(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    long long v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_10124FF9C(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10124C0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10124C100(uint64_t a1)
{
  *(void *)a1 = off_102319D48;
  *(void *)(a1 + 120) = off_102319F60;
  *(void *)(a1 + 128) = off_10231A050;

  *(void *)(a1 + 152) = 0;
  sub_1000F5BB0(a1 + 680, *(void **)(a1 + 688));
  sub_1000F5BB0(a1 + 656, *(void **)(a1 + 664));
  sub_1011E9B58(a1 + 648);
  sub_1005C3B7C(a1 + 400);
  uint64_t v2 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 352);
  *(void *)(a1 + 352) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_1015766A0(a1 + 200);
  uint64_t v6 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }

  return sub_1006B7BEC(a1);
}

uint64_t sub_10124C384(uint64_t a1)
{
  return sub_10124C100(a1 - 120);
}

uint64_t sub_10124C38C(uint64_t a1)
{
  return sub_10124C100(a1 - 128);
}

void sub_10124C394(uint64_t a1)
{
  sub_10124C100(a1);

  operator delete();
}

void sub_10124C3CC(uint64_t a1)
{
  sub_10124C100(a1 - 120);

  operator delete();
}

void sub_10124C408(uint64_t a1)
{
  sub_10124C100(a1 - 128);

  operator delete();
}

void sub_10124C444(uint64_t a1)
{
  *(void *)(a1 + 152) = [[CLPipelineXPCBounce alloc] initWithProvider:a1 onSilo:*(void *)(a1 + 40)];
  id v2 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLRoutineMonitor"];
  *(void *)(a1 + 160) = v2;
  [v2 registerDelegate:*(void *)(a1 + 136) inSilo:*(void *)(a1 + 40)];
  [*(id *)(a1 + 160) setDelegateEntityName:"CLIndoorLocationProvider"];
  id v3 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLVisionNotifier"];
  *(void *)(a1 + 384) = v3;
  [v3 registerDelegate:*(void *)(a1 + 136) inSilo:*(void *)(a1 + 40)];
  [*(id *)(a1 + 384) setDelegateEntityName:"CLIndoorLocationProvider"];
  id v4 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLOutdoorService"];
  *(void *)(a1 + 392) = v4;
  [v4 registerDelegate:*(void *)(a1 + 136) inSilo:*(void *)(a1 + 40)];
  [*(id *)(a1 + 392) setDelegateEntityName:"CLIndoorLocationProvider"];
  uint64_t v5 = NSClassFromString(@"CLStarkManager");
  if (v5)
  {
    id v6 = objc_alloc_init(v5);
    *(void *)(a1 + 704) = v6;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_10124D4A8;
    unsigned char v15[3] = &unk_102314980;
    v15[4] = a1;
    [v6 setConnectionUpdateHandler:v15];
  }
  id v7 = [*(id *)(a1 + 40) newTimer];
  [*(id *)(a1 + 152) setDebounceTimer:v7];

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  int v14[2] = sub_10124D6F8;
  void v14[3] = &unk_1022A3020;
  v14[4] = a1;
  [objc_msgSend(*(id *)(a1 + 152), "debounceTimer") setHandler:v14];
  id v8 = [*(id *)(a1 + 40) newTimer];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10124D704;
  void v13[3] = &unk_1022A3020;
  v13[4] = a1;
  [v8 setHandler:v13];
  [*(id *)(a1 + 152) setRouteHintWatchdogTimer:v8];

  [*(id *)(a1 + 152) setIndoorBundle:sub_10124D740()];
  id v9 = [objc_alloc_init((Class)[objc_msgSend(*(id *)(a1 + 152), "indoorBundle") classNamed:@"CLIndoorMaintenance"])
  if (v9)
  {
    [*(id *)(a1 + 152) setDaemonControl:v9];
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Indoor framework doesn't expose maintenance controller", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      LOWORD(v16) = 0;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPipelineLocationProvider::start()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }

  sub_10124D92C(a1);
  sub_10124DC14(a1);
  sub_101389C2C();
}

void sub_10124D458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_10124D4A8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10124D520;
  _OWORD v5[3] = &unk_1022BBA18;
  void v5[4] = v2;
  char v6 = a2;
  return [v3 async:v5];
}

void sub_10124D520(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  id v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)std::string buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Received fStarkMgr connectionUpdateHandler, connected: %d\n", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::start()_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1001D0748(*(void *)(v2 + 144), v3.__d_.__rep_, *(unsigned __int8 *)(a1 + 40));
}

void sub_10124D6F8(uint64_t a1)
{
}

void sub_10124D704(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v3 = *(void *)(v1 + 144);

  sub_1001D0D0C(v3, v2.__d_.__rep_);
}

NSBundle *sub_10124D740()
{
  uint64_t v0 = +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/CoreIndoor.framework"];
  uint64_t v1 = v0;
  if (v0)
  {
    id v7 = 0;
    if (![(NSBundle *)v0 loadAndReturnError:&v7])
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      std::chrono::steady_clock::time_point v2 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        id v3 = [v7 description];
        *(_DWORD *)std::string buf = 138543362;
        id v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "indoor bundle appears to be corrupted: %{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        id v5 = [v7 description];
        int v8 = 138543362;
        id v9 = v5;
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "NSBundle *loadBundle()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      return 0;
    }
  }
  return v1;
}

void sub_10124D92C(uint64_t a1)
{
  sub_1001CD2DC(*(void *)(a1 + 144), &v11);
  sub_1001CD514(&__p);
  uint64_t v2 = sub_1001CD624();
  uint64_t v3 = a1 + 400;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v4 = &v11;
  }
  else {
    id v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  *(double *)std::string buf = (double)v2;
  sub_1005C653C(a1 + 400, (const std::string::value_type *)v4, (const std::string::value_type *)p_p, (double *)buf);
  uint64_t v6 = 3600 * sub_1001CD62C();
  uint64_t v7 = 3600 * sub_1001CD634();
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  int v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v6;
    __int16 v16 = 1026;
    int v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "IndoorAvl, rates, %{public}d, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    LODWORD(v12) = 67240448;
    HIDWORD(v12) = v6;
    __int16 v13 = 1026;
    int v14 = v7;
    id v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::avlFileUpdaterUpdateSettings()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(double *)std::string buf = (double)v6;
  double v12 = (double)v7;
  sub_1005C6BBC(v3, (double *)buf, &v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_10124DBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124DC14(uint64_t a1)
{
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_1000C7F88(&v45);
  id v3 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:10];
  BOOL v44 = 0;
  if (sub_1000D29FC(v45, (uint64_t)off_1024196B8[0], &v44))
  {
    id v4 = +[NSNumber numberWithBool:v44];
    [v3 setObject:v4 forKeyedSubscript:off_1024196B8[0]];
  }
  CFTypeRef v43 = 0;
  if (sub_1004D1D1C(v45, off_1024196C0[0], &v43))
  {
    id v5 = +[NSSet setWithArray:v43];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = [[(NSArray *)[(NSString *)[(NSSet *)v5 description] componentsSeparatedByCharactersInSet:+[NSCharacterSet whitespaceAndNewlineCharacterSet]] UTF8String];
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Disabled Venue Set = %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      long long v27 = [[(NSArray *)[(NSString *)[(NSSet *)v5 description] componentsSeparatedByCharactersInSet:+[NSCharacterSet whitespaceAndNewlineCharacterSet]] UTF8String];
      int v47 = 136315138;
      long long v48 = v27;
      long long v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::reloadSettings()", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
    [v3 setObject:v5 forKeyedSubscript:off_1024196C0[0]];
  }
  double v42 = 0.0;
  if (sub_1000A6A10(v45, (uint64_t)off_1024196C8[0], &v42))
  {
    int v8 = +[NSNumber numberWithDouble:v42];
    [v3 setObject:v8 forKeyedSubscript:off_1024196C8[0]];
  }
  double v41 = 0.0;
  if (sub_1000A6A10(v45, (uint64_t)off_1024196D0[0], &v41))
  {
    id v9 = +[NSNumber numberWithDouble:v41];
    [v3 setObject:v9 forKeyedSubscript:off_1024196D0[0]];
  }
  BOOL v40 = 0;
  if (sub_1000D29FC(v45, (uint64_t)off_102419728[0], &v40))
  {
    [v3 setObject:@"21600" forKeyedSubscript:off_102419718[0]];
    [v3 setObject:@"8" forKeyedSubscript:off_102419720[0]];
  }
  unsigned int v39 = 0;
  if (sub_10013E418(v45, (uint64_t)off_102419718[0], &v39))
  {
    uint64_t v10 = +[NSNumber numberWithInt:v39];
    [v3 setObject:v10 forKeyedSubscript:off_102419718[0]];
  }
  unsigned int v38 = 0;
  if (sub_1004D08E4(v45, (uint64_t)off_102419720[0], &v38))
  {
    std::string v11 = +[NSNumber numberWithUnsignedInt:v38];
    [v3 setObject:v11 forKeyedSubscript:off_102419720[0]];
  }
  *(void *)std::string buf = 0;
  if ((sub_1000A6A10(v45, (uint64_t)off_1024196D8[0], buf) & 1) != 0
    || sub_1000A6A10(v45, (uint64_t)off_102419738[0], buf))
  {
    double v12 = +[NSNumber numberWithDouble:*(double *)buf];
    [v3 setObject:v12 forKeyedSubscript:off_1024196D8[0]];
  }
  *(_DWORD *)std::string buf = 0;
  if ((sub_1004D08E4(v45, (uint64_t)off_1024196E0[0], buf) & 1) != 0
    || sub_1004D08E4(v45, (uint64_t)off_102419740[0], buf))
  {
    __int16 v13 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)buf];
    [v3 setObject:v13 forKeyedSubscript:off_1024196E0[0]];
  }
  *(void *)std::string buf = 0;
  if ((sub_1000A6A10(v45, (uint64_t)off_1024196E8[0], buf) & 1) != 0
    || sub_1000A6A10(v45, (uint64_t)off_102419748, buf))
  {
    int v14 = +[NSNumber numberWithDouble:*(double *)buf];
    [v3 setObject:v14 forKeyedSubscript:off_1024196E8[0]];
  }
  *(void *)std::string buf = 0;
  if ((sub_1000A6A10(v45, (uint64_t)off_1024196F0[0], buf) & 1) != 0
    || sub_1000A6A10(v45, (uint64_t)off_102419738[0], buf))
  {
    uint64_t v15 = +[NSNumber numberWithDouble:*(double *)buf];
    [v3 setObject:v15 forKeyedSubscript:off_1024196F0[0]];
  }
  *(_DWORD *)std::string buf = 0;
  if ((sub_1004D08E4(v45, (uint64_t)off_1024196F8[0], buf) & 1) != 0
    || sub_1004D08E4(v45, (uint64_t)off_102419740[0], buf))
  {
    __int16 v16 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)buf];
    [v3 setObject:v16 forKeyedSubscript:off_1024196F8[0]];
  }
  *(void *)std::string buf = 0;
  if ((sub_1000A6A10(v45, (uint64_t)off_102419700[0], buf) & 1) != 0
    || sub_1000A6A10(v45, (uint64_t)off_102419748, buf))
  {
    int v17 = +[NSNumber numberWithDouble:*(double *)buf];
    [v3 setObject:v17 forKeyedSubscript:off_102419700[0]];
  }
  CFTypeRef v37 = 0;
  if (sub_10013F3C8(v45, off_1024196B0[0], &v37)) {
    [v3 setObject:v37 forKeyedSubscript:off_1024196B0[0]];
  }
  CFTypeRef v36 = 0;
  if (sub_1004D1D1C(v45, off_102419708[0], &v36))
  {
    long long v18 = +[NSSet setWithArray:v36];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    long long v19 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      long long v20 = [[(NSArray *)[(NSString *)[(NSSet *)v18 description] componentsSeparatedByCharactersInSet:+[NSCharacterSet whitespaceAndNewlineCharacterSet]] UTF8String];
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Forced venues set = %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      long long v29 = [[(NSArray *)[(NSString *)[(NSSet *)v18 description] componentsSeparatedByCharactersInSet:+[NSCharacterSet whitespaceAndNewlineCharacterSet]] UTF8String];
      int v47 = 136315138;
      long long v48 = v29;
      double v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::reloadSettings()", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
    [v3 setObject:v18 forKeyedSubscript:off_102419708[0]];
  }
  CFTypeRef cf = 0;
  if (sub_1004D01D8(v45, (uint64_t)off_102419710[0], &cf))
  {
    CFTypeID v21 = CFGetTypeID(cf);
    if (v21 == CFDictionaryGetTypeID())
    {
      [v3 setObject:cf forKeyedSubscript:off_102419710[0]];
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v22 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        id v23 = [(__CFString *)off_102419710[0] UTF8String];
        CFTypeID v24 = CFGetTypeID(cf);
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v23;
        __int16 v52 = 2050;
        CFTypeID v53 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Invalid type for setting %{public}s - expecting dictionary but got %{public}lu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        double v31 = (const char *)[(__CFString *)off_102419710[0] UTF8String];
        CFTypeID v32 = CFGetTypeID(cf);
        int v47 = 136446466;
        long long v48 = v31;
        __int16 v49 = 2050;
        CFTypeID v50 = v32;
        long long v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::reloadSettings()", "%s\n", v33);
        if (v33 != buf) {
          free(v33);
        }
      }
    }
  }
  buf[0] = 0;
  if (sub_1000D29FC(v45, (uint64_t)off_102419730[0], buf))
  {
    long long v25 = +[NSNumber numberWithBool:buf[0]];
    [v3 setObject:v25 forKeyedSubscript:off_102419730[0]];
  }
  sub_1001CCA08(*(void *)(a1 + 144), v2.__d_.__rep_, v3);
  [*(id *)(a1 + 152) daemonControl];
  if (objc_opt_respondsToSelector())
  {
    id v26 = [*(id *)(a1 + 152) daemonControl];
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    std::string v34[2] = sub_101253B48;
    v34[3] = &unk_102318180;
    v34[4] = a1;
    [v26 retrieveLocationRelevancyDurationWithCompletionHandler:v34];
  }
  if (v46) {
    sub_1000DB0A0(v46);
  }
}

void sub_10124E768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    sub_1000DB0A0(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124E7F8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_101252B9C(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_10124E9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124E9CC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101251A2C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10124EB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124EBA8(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101253A50(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10124ED74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124ED94(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onGpsControllerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onGpsControllerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101252BF4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10124EF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124EF70(uint64_t a1, int *a2, CLMotionActivity *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onMotionState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onMotionState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1012535B8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10124F12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124F14C(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onVehicleConnectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onVehicleConnectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1012537D0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10124F308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124F328(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10231A1E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onWifiProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10231A1E8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onWifiProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1012533B0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10124F4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10124F504(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v4 = *(void *)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = sub_1001CD63C(*(void *)(v4 + 144));
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = state;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(double *)&buf[10] = (double)(uint64_t)v7 / 3600.0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IndoorPreFetch, callback, %{public}d, interval, %{public}.1f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    sub_1001CD63C(*(void *)(v4 + 144));
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLPipelineLocationProvider::start()::(anonymous class)::operator()(xpc_activity_t) const", "%s\n", v11);
    if (v11 != buf) {
      free(v11);
    }
  }
  if (state == 2)
  {
    if (!xpc_activity_set_state(activity, 4))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      int v8 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t v9 = xpc_activity_get_state(activity);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "failed to mark tile cleanup activity as continue.  current state is %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        xpc_activity_get_state(activity);
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "auto CLPipelineLocationProvider::start()::(anonymous class)::operator()(xpc_activity_t) const", "%s\n", v12);
        if (v12 != buf) {
          free(v12);
        }
      }
    }
    char v10 = *(void **)(a1 + 40);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_10125845C;
    __int16 v14 = &unk_1022A56E0;
    xpc_activity_t v15 = activity;
    uint64_t v16 = v4;
    [v10 async:buf];
  }
}

__n128 sub_10124F8E0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t sub_10124F8F0(uint64_t a1)
{
  return sub_10124F8F8(*(void *)(a1 + 32));
}

uint64_t sub_10124F8F8(uint64_t a1)
{
  [*(id *)(a1 + 40) assertInside];
  sub_10124DC14(a1);
  sub_1005C70E0(a1 + 400);
  sub_101251D80(a1);
  [objc_msgSend(*(id *)(a1 + 152), "daemonControl") shutdown];
  uint64_t result = sub_1001198CC();
  if (result == 1)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    return sub_1005C6FFC((double *)(a1 + 400), &Current);
  }
  return result;
}

void sub_10124F970(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 712);
  if (v2)
  {
    notify_cancel(v2);
    *(_DWORD *)(a1 + 712) = 0;
  }
  xpc_activity_unregister("com.apple.locationd.IndoorTilePrefetch");

  *(void *)(a1 + 160) = 0;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  id v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Deregistering for visual localizations", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::shutdown()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  [*(id *)(a1 + 384) deregisterForVisionNotifications:*(void *)(a1 + 136)];

  *(void *)(a1 + 384) = 0;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Deregistering for outdoor update", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::shutdown()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  [*(id *)(a1 + 392) unregisterForUpdates:*(void *)(a1 + 136)];

  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 704) = 0;
  sub_1001CD904(*(void *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  sub_10124FDB8(a1);
  [*(id *)(a1 + 152) invalidate];

  *(void *)(a1 + 152) = 0;
  [*(id *)(a1 + 720) stopMonitoring];

  *(void *)(a1 + 720) = 0;
}

void sub_10124FDB8(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  int v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "disconnecting from indoord completely", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::killDaemon()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  [*(id *)(*(void *)(a1 + 376) + 16) unregister:*(void *)(*(void *)(a1 + 376) + 8) forNotification:4];
  [objc_msgSend(*(id *)(a1 + 152), "indoord") stopUpdatingLocation];
  [objc_msgSend(*(id *)(a1 + 152), "indoord") invalidate];
  [*(id *)(a1 + 152) setIndoord:0];
  sub_101256858(a1, 0);
  sub_1001CD68C(*(void *)(a1 + 144));
}

void sub_10124FF94(uint64_t a1)
{
}

void sub_10124FF9C(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    sub_1005C75B4(a2, (uint64_t)v31);
    sub_1005C768C(a2, (uint64_t)v29);
    sub_1001CD404(&v28);
    if (a3 == 2)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v6 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Indoor availability received file update status %d, will attempt to decompress", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        *(void *)long long v33 = 0x204000100;
        CFTypeID v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      if (v30 >= 0) {
        uint64_t v7 = v29;
      }
      else {
        uint64_t v7 = (void **)v29[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v28;
      }
      else {
        uint64_t v8 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if (!sub_1004BC3D8((const char *)v7, (const char *)v8))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        uint64_t v9 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
        {
          char v10 = v29;
          if (v30 < 0) {
            char v10 = (void **)v29[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to decompress availability tile %{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231A1C8);
          }
          char v11 = v29;
          if (v30 < 0) {
            char v11 = (void **)v29[0];
          }
          *(_DWORD *)long long v33 = 136446210;
          *(void *)&v33[4] = v11;
          int v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v12);
          if (v12 != buf) {
            free(v12);
          }
        }
LABEL_59:
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v30) < 0) {
          operator delete(v29[0]);
        }
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[0]);
        }
        return;
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      xpc_activity_t v15 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Indoor availability received file update status %d, which is not complete", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        *(_DWORD *)long long v33 = 67109120;
        *(_DWORD *)&v33[4] = a3;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
      }
      if (a3 == 3)
      {
        uint64_t v16 = 3600 * sub_1001CD62C();
        uint64_t v17 = 3600 * sub_1001CD634();
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        __int16 v18 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67240704;
          *(_DWORD *)&uint8_t buf[4] = 3;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v16;
          __int16 v37 = 1026;
          int v38 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "IndoorAvl, update rates upon status %{public}d, %{public}d, %{public}d", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231A1C8);
          }
          *(void *)long long v33 = 0x304020300;
          *(_WORD *)&char v33[8] = 1026;
          *(_DWORD *)&v33[10] = v16;
          __int16 v34 = 1026;
          int v35 = v17;
          id v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v23);
          if (v23 != buf) {
            free(v23);
          }
        }
        *(double *)std::string buf = (double)v16;
        *(double *)long long v33 = (double)v17;
        sub_1005C6BBC(a1 + 400, (double *)buf, (double *)v33);
      }
    }
    uint64_t v19 = *(void *)(a1 + 144);
    v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (SHIBYTE(v32) < 0)
    {
      sub_1000DC48C(__dst, v31[0], (unint64_t)v31[1]);
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)v31;
      uint64_t v27 = v32;
    }
    if (SHIBYTE(v30) < 0)
    {
      sub_1000DC48C(__p, v29[0], (unint64_t)v29[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v29;
      uint64_t v25 = v30;
    }
    sub_1001CF6C4(v19, v20.__d_.__rep_, (uint64_t *)__dst, (uint64_t *)__p, a3);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(__dst[0]);
    }
    goto LABEL_59;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  int v13 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Got availability file updated notification, but no file update object???", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    LOWORD(v31[0]) = 0;
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
}

void sub_101250824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

id sub_1012508C8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    id v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Enabling GPS assistance for pipeline", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::gpsAssistanceRequestChanged(BOOL)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return [*(id *)(*(void *)(a1 + 352) + 16) register:*(void *)(*(void *)(a1 + 352) + 8) forNotification:0 registrationInfo:0];
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Disabling GPS assistance for pipeline", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::gpsAssistanceRequestChanged(BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return [*(id *)(*(void *)(a1 + 352) + 16) unregister:*(void *)(*(void *)(a1 + 352) + 8) forNotification:0];
  }
}

id sub_101250BAC(uint64_t a1, int a2)
{
  return sub_1012508C8(a1 - 120, a2);
}

uint64_t sub_101250BB4(uint64_t a1)
{
  int v2 = 0;
  return sub_1001072EC(a1, &v2, 1);
}

uint64_t sub_101250BE0(uint64_t a1)
{
  int v2 = 0;
  return sub_1001072EC(a1 - 120, &v2, 1);
}

BOOL sub_101250C10(uint64_t a1)
{
  return *(void *)(a1 + 672) != 0;
}

BOOL sub_101250C20(uint64_t a1)
{
  return *(void *)(a1 + 552) != 0;
}

BOOL sub_101250C30(uint64_t a1)
{
  return *(void *)(a1 + 696) != 0;
}

BOOL sub_101250C40(uint64_t a1)
{
  return *(void *)(a1 + 576) != 0;
}

uint64_t sub_101250C50(void *a1, int a2, unsigned int *a3, uint64_t a4)
{
  v24[0] = a2;
  BOOL v7 = sub_1000ACE54((uint64_t)a1, a2, a3, (uint64_t *)a4);
  uint64_t result = 1;
  if (v7 && !*a3)
  {
    uint64_t v9 = a1[84];
    uint64_t v10 = a1[87];
    BOOL v11 = (sub_10016CCBC() & (*(_DWORD *)(a4 + 24) == 1)) == 0;
    uint64_t v12 = 85;
    if (!v11) {
      uint64_t v12 = 82;
    }
    sub_1000EDED4((uint64_t **)&a1[v12], v24, v24);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    int v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = a1[84];
      uint64_t v15 = a1[87];
      unsigned int v16 = *a3;
      *(_DWORD *)std::string buf = 134349824;
      uint64_t v33 = v14;
      __int16 v34 = 2050;
      uint64_t v35 = v15;
      __int16 v36 = 1026;
      int v37 = v24[0];
      __int16 v38 = 1026;
      unsigned int v39 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "regionalClients,%{public}lu, indoorClients,%{public}lu, client, %{public}d, notification,%{public}d", buf, 0x22u);
    }
    uint64_t v17 = -v10;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v20 = a1[84];
      uint64_t v21 = a1[87];
      unsigned int v22 = *a3;
      v24[1] = 134349824;
      uint64_t v25 = v20;
      __int16 v26 = 2050;
      uint64_t v27 = v21;
      __int16 v28 = 1026;
      int v29 = v24[0];
      __int16 v30 = 1026;
      unsigned int v31 = v22;
      id v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLPipelineLocationProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v19 = a1[18];
    if (v9 != v17 || a1[84] == -a1[87])
    {
      sub_1001D0D58(v19, v18.__d_.__rep_);
      return 1;
    }
    else
    {
      return sub_1001CC2EC(v19, v18.__d_.__rep_, a3);
    }
  }
  return result;
}

uint64_t sub_101250F00(uint64_t a1, int a2, int *a3)
{
  int v34 = a2;
  BOOL v6 = sub_1001AF260((char *)a1, a2, a3);
  uint64_t result = 1;
  if (v6 && !*a3)
  {
    uint64_t v8 = *(void *)(a1 + 672);
    uint64_t v9 = *(void *)(a1 + 696);
    uint64_t v10 = *(void *)(a1 + 664);
    if (v10)
    {
      uint64_t v11 = a1 + 656;
      uint64_t v12 = a1 + 664;
      do
      {
        int v13 = *(_DWORD *)(v10 + 28);
        BOOL v14 = v13 < a2;
        if (v13 >= a2) {
          uint64_t v15 = (uint64_t *)v10;
        }
        else {
          uint64_t v15 = (uint64_t *)(v10 + 8);
        }
        if (!v14) {
          uint64_t v12 = v10;
        }
        uint64_t v10 = *v15;
      }
      while (*v15);
      if (v12 != a1 + 664 && *(_DWORD *)(v12 + 28) <= a2) {
        goto LABEL_32;
      }
    }
    uint64_t v16 = *(void *)(a1 + 688);
    if (!v16) {
      goto LABEL_23;
    }
    uint64_t v11 = a1 + 680;
    uint64_t v17 = a1 + 688;
    do
    {
      int v18 = *(_DWORD *)(v16 + 28);
      BOOL v19 = v18 < a2;
      if (v18 >= a2) {
        uint64_t v20 = (uint64_t *)v16;
      }
      else {
        uint64_t v20 = (uint64_t *)(v16 + 8);
      }
      if (!v19) {
        uint64_t v17 = v16;
      }
      uint64_t v16 = *v20;
    }
    while (*v20);
    if (v17 != a1 + 688 && *(_DWORD *)(v17 + 28) <= a2)
    {
LABEL_32:
      sub_1000ED9F4(v11, &v34);
    }
    else
    {
LABEL_23:
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v21 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#Warning Trying to remove non-existent pipeline client", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        LOWORD(v35) = 0;
        unsigned int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLPipelineLocationProvider::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    id v23 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a1 + 672);
      uint64_t v25 = *(void *)(a1 + 696);
      int v26 = *a3;
      *(_DWORD *)std::string buf = 134349824;
      uint64_t v44 = v24;
      __int16 v45 = 2050;
      uint64_t v46 = v25;
      __int16 v47 = 1026;
      int v48 = v34;
      __int16 v49 = 1026;
      int v50 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "regionalClients,%{public}lu, indoorClients,%{public}lu, client,%{public}d, notification,%{public}d", buf, 0x22u);
    }
    uint64_t v27 = -v9;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v30 = *(void *)(a1 + 672);
      uint64_t v31 = *(void *)(a1 + 696);
      int v32 = *a3;
      int v35 = 134349824;
      uint64_t v36 = v30;
      __int16 v37 = 2050;
      uint64_t v38 = v31;
      __int16 v39 = 1026;
      int v40 = v34;
      __int16 v41 = 1026;
      int v42 = v32;
      uint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLPipelineLocationProvider::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v29 = *(void *)(a1 + 144);
    if (v8 == v27 || *(void *)(a1 + 672) != -*(void *)(a1 + 696))
    {
      sub_1001D0F7C(v29, v28.__d_.__rep_);
      return 1;
    }
    else
    {
      return sub_1001CC528(v29);
    }
  }
  return result;
}

uint64_t sub_101251340(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 28)
  {
    v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_1001D11A0(*(void *)(a1 + 144), v3.__d_.__rep_);
  }
  return 1;
}

uint64_t sub_101251380(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 28)
  {
    v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_1001D13E8(*(void *)(a1 + 144), v3.__d_.__rep_);
  }
  return 1;
}

uint64_t sub_1012513C0(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  int v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stopping indoor & deleting global availability tile due to reset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onResetLocationData()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_101251D80(a1);
  [objc_msgSend(*(id *)(a1 + 152), "daemonControl") eraseEverything];
  uint64_t result = sub_1001198CC();
  if (result == 1)
  {
    *(void *)std::string buf = CFAbsoluteTimeGetCurrent();
    return sub_1005C6FFC((double *)(a1 + 400), (double *)buf);
  }
  return result;
}

void sub_10125158C(uint64_t a1)
{
  if (sub_1001198CC() == 1)
  {
    sub_1001CD514(__p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v2 = __p;
    }
    else {
      int v2 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    BOOL v3 = sub_1000A569C((const char *)v2);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      sub_1001CD514(__p);
      uint64_t v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "File %{private}s exists, %{public}d", (uint8_t *)&buf, 0x12u);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      sub_1001CD514(&buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v9 = 136380931;
      uint64_t v10 = p_buf;
      __int16 v11 = 1026;
      BOOL v12 = v3;
      BOOL v7 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::downloadAvailabilityTileIfAllowedAndNotExists()", "%s\n", (const char *)v7);
      if (v7 != __p) {
        free(v7);
      }
    }
    if (!v3)
    {
      __p[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
      sub_1005C6FFC((double *)(a1 + 400), (double *)__p);
    }
  }
}

void sub_101251828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10125184C(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    *(void *)std::string buf = CFAbsoluteTimeGetCurrent();
    return (id)sub_1005C6FFC((double *)(a1 + 400), (double *)buf);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Stopping indoor & deleting global availability tile due to location disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onLocationStatusChanged(CLCommonLocationServicesEnabled)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_1005C70E0(a1 + 400);
    sub_101251D80(a1);
    [objc_msgSend(*(id *)(a1 + 152), "daemonControl") eraseEverything];
    return [objc_msgSend(*(id *)(a1 + 152), "daemonControl") shutdown];
  }
}

void sub_101251A2C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    int v8 = *(_DWORD *)(a4 + 188);
    sub_10125184C(a1, v8);
  }
  else if (*a3)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      int v11 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      int v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unhandled manager notification %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      BOOL v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    sub_1012513C0(a1);
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLClientManager"];
    if (byte_102486877 >= 0) {
      BOOL v6 = &qword_102486860;
    }
    else {
      BOOL v6 = (uint64_t *)qword_102486860;
    }
    BOOL v7 = +[NSString stringWithUTF8String:v6];
    [v5 resetNotificationConsumedForIdentifier:v7];
  }
}

void sub_101251CC8(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if ((*a3 - 6) >= 2)
  {
    if (*a3 == 1)
    {
      uint64_t v11 = *(void *)(a1 + 144);
      uint64_t v12 = *a4;
      sub_1001D007C(v11, v7.__d_.__rep_, v12);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 144);
    if (a4[96]) {
      BOOL v9 = *((_DWORD *)a4 + 12) <= 0;
    }
    else {
      BOOL v9 = 1;
    }
    uint64_t v10 = !v9;
    sub_1001D02A8(v8, v7.__d_.__rep_, v10);
  }
}

void sub_101251D78(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
}

void sub_101251D80(uint64_t a1)
{
  sub_1001CD904(*(void *)(a1 + 144));
  sub_1001CD758(*(void *)(a1 + 144));
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  int v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@IndoorAvl, delete, na", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    BOOL v3 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::stopProviderAndEraseAvailabilityTile()", "%s\n", (const char *)v3);
    if (v3 != buf) {
      free(v3);
    }
  }
  sub_1001CD514(buf);
  sub_101251F94((const char *)buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  sub_1001CD404(buf);
  sub_101251F94((const char *)buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
}

void sub_101251F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101251F94(const char *a1)
{
  uint64_t v1 = (uint64_t *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!sub_1004BB38C(a1))
  {
    int v2 = *__error();
    if (v2 != 20 && v2 != 2)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      BOOL v6 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v1 + 23) >= 0) {
          std::chrono::steady_clock::time_point v7 = v1;
        }
        else {
          std::chrono::steady_clock::time_point v7 = (uint64_t *)*v1;
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v10 = v7;
        __int16 v11 = 1024;
        int v12 = v2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Error deleting %s: %d", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1)
      {
LABEL_29:
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLPipelineLocationProvider::stopProviderAndEraseAvailabilityTile()::(anonymous class)::operator()(const string &) const", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
LABEL_31:
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      goto LABEL_29;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)v1 + 23) >= 0) {
        id v5 = v1;
      }
      else {
        id v5 = (uint64_t *)*v1;
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v10 = v5;
      __int16 v11 = 1024;
      int v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Error deleting %s: %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
}

id sub_1012522DC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 176) + 16) register:*(void *)(*(void *)(a1 + 176) + 8) forNotification:3 registrationInfo:0];
}

id sub_1012522F0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:3 registrationInfo:0];
}

id sub_101252304(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 176) + 16) unregister:*(void *)(*(void *)(a1 + 176) + 8) forNotification:3];
}

id sub_101252314(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 56) + 16) unregister:*(void *)(*(void *)(a1 + 56) + 8) forNotification:3];
}

id sub_101252324(uint64_t a1, double a2)
{
  sub_1011E9AE0((uint64_t *)__p, (uint64_t *)(a1 + 192));
  sub_1011E9B5C((uint64_t *)(a1 + 648), (uint64_t *)__p);
  sub_1011E9B58(__p);
  uint64_t v4 = *(void *)(a1 + 144);
  sub_100134750(__p, "start debounce");
  sub_1001C9FD4(v4, (uint64_t *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return [objc_msgSend(*(id *)(a1 + 152), "debounceTimer") setNextFireDelay:a2];
}

void sub_1012523B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1012523D4(uint64_t a1, double a2)
{
  return sub_101252324(a1 - 120, a2);
}

id sub_1012523DC(uint64_t a1)
{
  uint64_t v3 = 0;
  sub_1011E9B5C((uint64_t *)(a1 + 648), &v3);
  sub_1011E9B58(&v3);
  return [((id *)(a1 + 152)) debounceTimer setNextFireDelay:1.79769313e308];
}

id sub_101252430(uint64_t a1)
{
  return sub_1012523DC(a1 - 120);
}

id sub_101252438(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  int v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Schedule route hint timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::startVehicleNavigationWatchdogTimer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [objc_msgSend(*(id *)(a1 + 152), "routeHintWatchdogTimer") setNextFireDelay:6.0];
}

id sub_1012525DC(uint64_t a1)
{
  return sub_101252438(a1 - 120);
}

id sub_1012525E4(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  int v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Cancel route hint timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::stopVehicleNavigationWatchdogTimer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [objc_msgSend(*(id *)(a1 + 152), "routeHintWatchdogTimer") setNextFireDelay:1.79769313e308];
}

id sub_10125278C(uint64_t a1)
{
  return sub_1012525E4(a1 - 120);
}

uint64_t sub_101252794(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 152), "debounceTimer") setNextFireDelay:1.79769313e308];
  sub_10124FDB8(a1);
  sub_100134750(__p, "force stop immediately");
  sub_101252838(a1, (uint64_t *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0;
  sub_1011E9B5C((uint64_t *)(a1 + 648), (uint64_t *)__p);
  return sub_1011E9B58(__p);
}

void sub_10125281C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101252838(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  char v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      id v5 = a2;
    }
    else {
      id v5 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string buf = 136446210;
    __int16 v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@ClxIndoor, Fix, 0, ll, N/A, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::notifyClients_LocationUnavailable(const std::string &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_10016CCBC())
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    BOOL v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        char v7 = a2;
      }
      else {
        char v7 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string buf = 136446210;
      __int16 v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@ClxWifi2, Fix, 0, ll, N/A, %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::notifyClients_LocationUnavailable(const std::string &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  *(_DWORD *)std::string buf = 9;
  sub_1001C0198(a1, (uint64_t)buf, 1, 0xFFFFFFFFLL);
}

uint64_t sub_101252B94(uint64_t a1)
{
  return sub_101252794(a1 - 120);
}

void sub_101252B9C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!*a3)
  {
    sub_10124DC14(a1);
  }
}

void sub_101252BF4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if ([*(id *)(a1 + 152) indoord])
  {
    int v7 = *a3;
    if ((*a3 - 3) < 3 || v7 == 0)
    {
      sub_10125319C(a1, a4, a4 + 160);
    }
    else if (v7 == 18)
    {
      unsigned int v9 = *(_DWORD *)(a4 + 840);
      sub_101252E6C(a1, v9);
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      uint64_t v10 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        int v11 = *a3;
        *(_DWORD *)std::string buf = 67240192;
        int v14 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unexpected notification %{public}d from gps", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onGpsControllerNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
  }
}

void sub_101252E6C(uint64_t a1, unsigned int a2)
{
  if (![*(id *)(a1 + 152) indoord]) {
    return;
  }
  char v4 = NSClassFromString(@"CLGpsSignalQuality");
  if (!v4)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    id v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to load gps signal quality class from framework - cannot deliver gps signal quality", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_21:
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onGpsAssistanceSignalQualityUpdate(CLLocationProvider_Type::SignalQuality) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
      return;
    }
LABEL_23:
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    goto LABEL_21;
  }
  if (a2 < 3)
  {
    id v8 = [[v4 alloc] initWithSignalQuality:dword_101DAF2A8[a2]];
    [objc_msgSend(*(id *)(a1 + 152), "indoord") gpsSignalQualityAvailable:v8];

    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  BOOL v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67240192;
    unsigned int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unexpected signal quality %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_21;
    }
    goto LABEL_23;
  }
}

void sub_10125319C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ([*(id *)(a1 + 152) indoord])
  {
    id v6 = objc_alloc((Class)CLGpsPosition);
    sub_100BCE8BC(buf, a3);
    id v7 = [v6 initWithLocation:a2 andPrivateLocation:buf];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    id v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Sending gpsEstimateAvailable, type, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onGpsAssistanceLocationUpdate(const CLDaemonLocation &, const CLDaemonLocationPrivate &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    [objc_msgSend(*(id *)(a1 + 152), "indoord") gpsEstimateAvailable:v7];
  }
}

void sub_1012533B0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    sub_10125319C(a1, a4, a4 + 160);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    id v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning, Unexpected notification %{public}d from wifi", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      id v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onWifiProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_1012535B8(uint64_t a1, uint64_t a2, int *a3, CLMotionActivity *a4)
{
  if (*a3 == 2)
  {
    v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v7 = *(void *)(a1 + 144);
    sub_1001CDEB0(v7, v6.__d_.__rep_, a4);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    int v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *a3;
      *(_DWORD *)std::string buf = 67109120;
      int v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "unexpected motion state notification type %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onMotionState(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_1012537D0(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  uint64_t v7 = a4[1] < 0.0 && *a4 > 0.0;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10231A1C8);
  }
  id v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a3;
    double v10 = *a4;
    uint64_t v11 = *((void *)a4 + 1);
    *(_DWORD *)std::string buf = 67109888;
    int v15 = v9;
    __int16 v16 = 2048;
    double v17 = v10;
    __int16 v18 = 2048;
    uint64_t v19 = v11;
    __int16 v20 = 1024;
    int v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Received VehicleConnection notification,%d,startTime, %f, endTime, %f, status, %d\n", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onVehicleConnectionNotification(int, const CLVehicleConnectionNotifier_Type::Notification &, const CLVehicleConnectionNotifier_Type::NotificationData &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_1001D0748(*(void *)(a1 + 144), v12.__d_.__rep_, v7);
}

void sub_1012539FC(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1)
  {
    v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v4 = *(void *)(a1 + 144);
    sub_1001D0C80(v4, v3.__d_.__rep_);
  }
}

void sub_101253A50(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v8 = *a3;
  if (*a3 == 6)
  {
    if (*a4) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = a4[1] == 0;
    }
    if (!v12)
    {
      sub_10125158C(a1);
    }
  }
  else if (v8 == 3)
  {
    rep = v7.__d_.__rep_;
    uint64_t v11 = *(void *)(a1 + 144);
    sub_1001CF290(v11, rep);
  }
  else if (v8 == 2)
  {
    uint64_t v9 = *(void *)(a1 + 144);
    sub_1001CF0F4(v9);
  }
}

void sub_101253B38(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
}

void sub_101253B40(uint64_t a1, uint64_t *a2)
{
}

id sub_101253B48(uint64_t a1, double a2)
{
  return sub_1001CD2D0(*(void *)(*(void *)(a1 + 32) + 144), (uint64_t)a2);
}

void sub_101253B58(uint64_t a1, _xpc_activity_s *a2)
{
  if (sub_1001C95F4(*(void *)(a1 + 144)))
  {
    uint64_t v4 = dispatch_group_create();
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = &v34;
    uint64_t v35 = 0x4812000000;
    uint64_t v36 = sub_100177F2C;
    __int16 v37 = sub_100177698;
    uint64_t v38 = "";
    memset(v39, 0, 24);
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x4812000000;
    v28[3] = sub_100177F2C;
    v28[4] = sub_100177698;
    v28[5] = "";
    memset(v29, 0, sizeof(v29));
    v26[0] = 0;
    v26[1] = v26;
    _DWORD v26[2] = 0x2020000000;
    int v27 = 0;
    v24[0] = 0;
    v24[1] = v24;
    int v24[2] = 0x2020000000;
    int v25 = 0;
    v5.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    id v6 = sub_1001CD63C(*(void *)(a1 + 144));
    unsigned int v7 = sub_1001CD644(*(void *)(a1 + 144));
    if (v7 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v7;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "IndoorPreFetch, params, %{public}d, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      int v30 = 67240448;
      int v31 = (int)v6;
      __int16 v32 = 1026;
      int v33 = v8;
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const", "%s\n", v18);
      if (v18 != buf) {
        free(v18);
      }
    }
    dispatch_group_enter(v4);
    double v10 = *(void **)(a1 + 160);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_101254330;
    void v23[3] = &unk_10231A0A0;
    void v23[5] = v26;
    v23[6] = &v34;
    v23[4] = v4;
    [v10 fetchRecentLocationsOfInterestWithReply:v23];
    dispatch_group_enter(v4);
    id v11 = [objc_alloc((Class)NSDateInterval) initWithStartDate:[NSDate date] duration:(double)((uint64_t)v6 * v8)];
    BOOL v12 = *(void **)(a1 + 160);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_101254EAC;
    void v21[3] = &unk_10231A0C8;
    int v22 = v8;
    v21[6] = v28;
    v21[7] = v5.__d_.__rep_;
    _DWORD v21[8] = v6;
    v21[4] = v4;
    v21[5] = v24;
    [v12 fetchPredictedLocationsOfInterestBetweenStartDate:objc_msgSend(v11, "startDate") endDate:objc_msgSend(v11, "endDate") withReply:v21];

    int v13 = [*(id *)(a1 + 40) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_101255E44;
    block[3] = &unk_10231A0F0;
    block[6] = v26;
    block[7] = v24;
    block[8] = &v34;
    void block[9] = v28;
    block[10] = a1;
    block[11] = v5.__d_.__rep_;
    void block[4] = v4;
    void block[5] = a2;
    dispatch_group_notify(v4, v13, block);
    _Block_object_dispose(v24, 8);
    _Block_object_dispose(v26, 8);
    _Block_object_dispose(v28, 8);
    *(void *)std::string buf = v29;
    sub_101258EFC((void ***)buf);
    _Block_object_dispose(&v34, 8);
    *(void *)std::string buf = v39;
    sub_101258EFC((void ***)buf);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    int v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Prefetching is disabled if pipelined is disabled. Set EnablePipelined to be true if you wish to prefetch", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      LOWORD(v34) = 0;
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const", "%s\n", v17);
      if (v17 != buf) {
        free(v17);
      }
    }
    if (a2 && !xpc_activity_set_state(a2, 5))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      int v15 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t state = xpc_activity_get_state(a2);
        *(_DWORD *)std::string buf = 134349056;
        *(void *)&uint8_t buf[4] = state;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Failed to mark prefetch activity as done. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10231A1C8);
        }
        LODWORD(v34) = 134349056;
        *(void *)((char *)&v34 + 4) = xpc_activity_get_state(a2);
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const", "%s\n", v19);
        if (v19 != buf) {
          free(v19);
        }
      }
    }
  }
}

void sub_1012542C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  sub_101258EFC(&a71);
  _Block_object_dispose(&a61, 8);
  a71 = a12;
  sub_101258EFC(&a71);
  _Unwind_Resume(a1);
}

void sub_101254330(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138543362;
      *(void *)&uint8_t buf[4] = [a3 description];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to get historical LOI from RoutineManager - %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      id v58 = [a3 description];
      int v85 = 138543362;
      id v86 = v58;
      float64x2_t v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v59);
      if (v59 != buf) {
        free(v59);
      }
    }
    uint64_t v5 = a1;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -1;
  }
  else if (a2)
  {
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    id v7 = [a2 countByEnumeratingWithState:&v64 objects:v76 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v65;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v65 != v8) {
            objc_enumerationMutation(a2);
          }
          double v10 = *(void **)(*((void *)&v64 + 1) + 8 * (void)v9);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10231A1C8);
          }
          id v11 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
          {
            [objc_msgSend(v10, "location") latitude];
            uint64_t v13 = v12;
            [objc_msgSend(v10, "location") longitude];
            uint64_t v15 = v14;
            unsigned int v16 = [[v10 visits] count];
            *(_DWORD *)std::string buf = 134284033;
            *(void *)&uint8_t buf[4] = v13;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(void *)&unsigned char buf[14] = v15;
            __int16 v83 = 1026;
            LODWORD(v84) = v16;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@IndoorPreFetch, historical, %{private}.7f, %{private}.7f, visits, %{public}d", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10231A1C8);
            }
            [objc_msgSend(v10, "location") latitude];
            __int16 v18 = v17;
            [objc_msgSend(v10, "location") longitude];
            uint64_t v20 = v19;
            unsigned int v21 = [[v10 visits] count];
            int v85 = 134284033;
            id v86 = v18;
            __int16 v87 = 2049;
            uint64_t v88 = v20;
            __int16 v89 = 1026;
            unsigned int v90 = v21;
            int v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v22);
            if (v22 != buf) {
              free(v22);
            }
          }
          uint64_t v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v23 = [a2 countByEnumeratingWithState:&v64 objects:v76 count:16];
        id v7 = v23;
      }
      while (v23);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 count];
    unint64_t v63 = 0;
    long long v62 = 0uLL;
    sub_101256350((uint64_t *)&v62, (unint64_t)[a2 count]);
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    id v24 = [a2 countByEnumeratingWithState:&v72 objects:&v85 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v73;
      do
      {
        int v26 = 0;
        do
        {
          if (*(void *)v73 != v25) {
            objc_enumerationMutation(a2);
          }
          int v27 = *(void **)(*((void *)&v72 + 1) + 8 * (void)v26);
          if (objc_msgSend(objc_msgSend(v27, "visits"), "count"))
          {
            sub_101258468([v27 visits], (uint64_t)buf);
            if (!buf[0]) {
              __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
            }
            uint64_t v71 = *(void *)&buf[8];
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10231A1C8);
            }
            std::chrono::steady_clock::time_point v28 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
            {
              [objc_msgSend(v27, "location") latitude];
              uint64_t v30 = v29;
              [objc_msgSend(v27, "location") longitude];
              *(_DWORD *)std::string buf = 134284033;
              *(void *)&uint8_t buf[4] = v30;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&unsigned char buf[14] = v31;
              __int16 v83 = 2050;
              uint64_t v84 = v71;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "VisitTime, histloi, %{private}.7f, %{private}.7f, recent, %{public}ld", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_10231A1C8);
              }
              [objc_msgSend(v27, "location") latitude];
              uint64_t v52 = v51;
              [objc_msgSend(v27, "location") longitude];
              *(_DWORD *)uint64_t v77 = 134284033;
              *(void *)&v77[4] = v52;
              __int16 v78 = 2049;
              uint64_t v79 = v53;
              __int16 v80 = 2050;
              uint64_t v81 = v71;
              float64x2_t v54 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertHistoricalLOI(NSArray *)", "%s\n", v54);
              if (v54 != buf) {
                free(v54);
              }
            }
            [objc_msgSend(v27, "location") latitude];
            *(void *)std::string buf = v32;
            [objc_msgSend(v27, "location") longitude];
            *(void *)uint64_t v77 = v33;
            [objc_msgSend(v27, "location") horizontalUncertainty];
            uint64_t v70 = v34;
            [v27 confidence];
            uint64_t v69 = v35;
            id v36 = [[objc_msgSend(v27, "visits") count];
            id v68 = v36;
            uint64_t v37 = *((void *)&v62 + 1);
            if (*((void *)&v62 + 1) >= v63)
            {
              uint64_t v42 = sub_1012587D0((uint64_t *)&v62, buf, (uint64_t *)v77, &v70, &v69, &v71, (uint64_t *)&v68);
            }
            else
            {
              uint64_t v38 = *(void *)v77;
              uint64_t v40 = v69;
              uint64_t v39 = v70;
              uint64_t v41 = v71;
              **((void **)&v62 + 1) = *(void *)buf;
              *(void *)(v37 + 8) = v38;
              *(void *)(v37 + 16) = v39;
              *(void *)(v37 + 24) = v40;
              *(void *)(v37 + 40) = v41;
              *(unsigned char *)(v37 + 32) = 1;
              *(unsigned char *)(v37 + 48) = 0;
              *(_DWORD *)(v37 + 64) = v36;
              uint64_t v42 = v37 + 72;
              *(unsigned char *)(v37 + 68) = 0;
            }
            *((void *)&v62 + 1) = v42;
          }
          else
          {
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10231A1C8);
            }
            CFTypeRef v43 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
            {
              [objc_msgSend(v27, "location") latitude];
              uint64_t v45 = v44;
              [objc_msgSend(v27, "location") longitude];
              *(_DWORD *)std::string buf = 134283777;
              *(void *)&uint8_t buf[4] = v45;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&unsigned char buf[14] = v46;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "@IndoorPreFetch, skiploi, %{private}.7f, %{private}.7f, historical, novisits", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_10231A1C8);
              }
              [objc_msgSend(v27, "location") latitude];
              uint64_t v48 = v47;
              [objc_msgSend(v27, "location") longitude];
              *(_DWORD *)uint64_t v77 = 134283777;
              *(void *)&v77[4] = v48;
              __int16 v78 = 2049;
              uint64_t v79 = v49;
              int v50 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLIndoorPrefetchLocationOfInterest> convertHistoricalLOI(NSArray *)", "%s\n", v50);
              if (v50 != buf) {
                free(v50);
              }
            }
          }
          int v26 = (char *)v26 + 1;
        }
        while (v24 != v26);
        id v55 = [a2 countByEnumeratingWithState:&v72 objects:&v85 count:16];
        id v24 = v55;
      }
      while (v55);
    }
    uint64_t v5 = a1;
    uint64_t v56 = *(void *)(*(void *)(a1 + 48) + 8);
    sub_101258F40((char **)(v56 + 48));
    *(_OWORD *)(v56 + 48) = v62;
    *(void *)(v56 + 64) = v63;
    unint64_t v63 = 0;
    long long v62 = 0uLL;
    *(void *)std::string buf = &v62;
    sub_101258EFC((void ***)buf);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10231A1C8);
    }
    uint64x2_t v57 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#Warning No historical locations of interest", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10231A1C8);
      }
      LOWORD(v85) = 0;
      int32x4_t v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPipelineLocationProvider::onPrefetchRequested(xpc_activity_t) const_block_invoke", "%s\n", v60);
      if (v60 != buf) {
        free(v60);
      }
    }
    uint64_t v5 = a1;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)(v5 + 32));
}